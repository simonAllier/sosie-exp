{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":190,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":603,"com.google.gson.functional.StringTest.testStringValueDeserialization":601,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":83,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":573,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":400,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":29,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":152,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":11,"com.google.gson.MixedStreamTest.testWriteLenient":622,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":582,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":3,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":66,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":70,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":119,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":447,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":305,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":535,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":171,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":408,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":44,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":94,"com.google.gson.functional.ObjectTest.testSingletonLists":117,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":574,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":393,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":604,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":336,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":25,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":590,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":132,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":288,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":450,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":233,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":617,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":157,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":439,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":502,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":78,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":279,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":386,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":497,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":363,"com.google.gson.functional.EnumTest.testEnumCaseMapping":304,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":602,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":625,"com.google.gson.functional.JsonTreeTest.testToJsonTree":221,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":385,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":593,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":114,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":258,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":270,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":552,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":527,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":567,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":381,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":316,"com.google.gson.functional.ObjectTest.testNullDeserialization":482,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":159,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":614,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":129,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":284,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":459,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":401,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":481,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":495,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":88,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":140,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":283,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":594,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":90,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":463,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":589,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":260,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":444,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":423,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":469,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":551,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":143,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":523,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":572,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":12,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":356,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":436,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":564,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":217,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":72,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":373,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":342,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":445,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":437,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":139,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":517,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":23,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":125,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":241,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":36,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":275,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":370,"com.google.gson.metrics.PerformanceTest.testDummy":286,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":213,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":105,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":42,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":501,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":330,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":290,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":375,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":508,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":580,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":566,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":87,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":272,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":162,"com.google.gson.functional.CollectionTest.testSetDeserialization":69,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":172,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":128,"com.google.gson.functional.EnumTest.testEnumSet":297,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":537,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":428,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":43,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":329,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":266,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":556,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":133,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":19,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":41,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":441,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":176,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":452,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":26,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":492,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":453,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":629,"com.google.gson.functional.MapTest.testHashMapDeserialization":346,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":398,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":578,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":510,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":600,"com.google.gson.MixedStreamTest.testReadNulls":623,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":52,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":189,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":214,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":295,"com.google.gson.functional.MapTest.testSortedMap":366,"com.google.gson.functional.MapTest.testMapSerialization":362,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":191,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":180,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":434,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":529,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":245,"com.google.gson.functional.MapTest.testSerializeMaps":349,"com.google.gson.functional.MapTest.testComplexKeysSerialization":82,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":536,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":374,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":533,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":28,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":161,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":100,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":64,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":292,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":302,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":178,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":31,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":142,"com.google.gson.functional.MapTest.testStringKeyDeserialization":372,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":268,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":530,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":8,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":465,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":376,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":404,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":399,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":488,"com.google.gson.functional.PrettyPrintingTest.testMap":503,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":309,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":193,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":547,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":287,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":532,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":607,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":611,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":1,"com.google.gson.functional.CollectionTest.testQueueSerialization":313,"com.google.gson.functional.MapTest.testMapSerializationEmpty":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":562,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":429,"com.google.gson.functional.MapTest.testMapOfMapSerialization":361,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":569,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":318,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":168,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":431,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":337,"com.google.gson.functional.FieldNamingTest.testIdentity":246,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":605,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":331,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":196,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":144,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":35,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":116,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":220,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":327,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":388,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":280,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":259,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":16,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":606,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":154,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":584,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":557,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":563,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":592,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":343,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":276,"com.google.gson.functional.MapTest.testMapSubclassSerialization":348,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":50,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":186,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":539,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":173,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":249,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":418,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":596,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":13,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":476,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":546,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":24,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":40,"com.google.gson.functional.EnumTest.testEnumSubclass":300,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":440,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":131,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":289,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":387,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":84,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":446,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":7,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":59,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":389,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":156,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":424,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":155,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":103,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":20,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":526,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":430,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":478,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":34,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":586,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":118,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":345,"com.google.gson.MixedStreamTest.testWriteNulls":621,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":525,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":340,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":519,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":38,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":160,"com.google.gson.CommentsTest.testParseComments":627,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":97,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":120,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":333,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":202,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":207,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":443,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":507,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":365,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":609,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":484,"com.google.gson.MixedStreamTest.testReadInvalidState":619,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":169,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":49,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":588,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":181,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":397,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":534,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":267,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":204,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":256,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":413,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":166,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":570,"com.google.gson.functional.MapTest.testMapDeserialization":355,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":565,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":506,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":344,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":93,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":112,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":354,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":96,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":379,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":65,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":219,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":225,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":145,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":480,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":54,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":490,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":553,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":48,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":63,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":153,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":177,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":591,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":384,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":335,"com.google.gson.functional.PrimitiveTest.testShortSerialization":460,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":382,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":449,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":499,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":419,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":227,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":396,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":242,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":299,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":67,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":185,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":350,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":412,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":325,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":467,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":14,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":581,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":253,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":474,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":468,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":33,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":73,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":111,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":146,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":542,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":115,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":223,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":9,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":425,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":150,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":124,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":303,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":56,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":538,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":226,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":486,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":254,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":332,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":92,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":571,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":403,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":559,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":576,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":108,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":310,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":390,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":455,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":427,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":471,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":75,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":95,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":298,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":195,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":182,"com.google.gson.functional.MapTest.testGeneralMapField":81,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":122,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":516,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":473,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":85,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":201,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":487,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":583,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":367,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":378,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":543,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":451,"com.google.gson.MixedStreamTest.testReadMixedStreamed":252,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":357,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":554,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":215,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":281,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":321,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":211,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":432,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":498,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":229,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":358,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":599,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":347,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":334,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":472,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":200,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":236,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":568,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":341,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":197,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":541,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":383,"com.google.gson.functional.ObjectTest.testNestedDeserialization":151,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":339,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":137,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":483,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":192,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":102,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":496,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":470,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":206,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":30,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":359,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":608,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":39,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":458,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":55,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":6,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":15,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":323,"com.google.gson.functional.ObjectTest.testNullSerialization":265,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":58,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":598,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":351,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":80,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":274,"com.google.gson.functional.MapTest.testInterfaceTypeMap":79,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":528,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":489,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":107,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":391,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":27,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":628,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":262,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":62,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":491,"com.google.gson.MixedStreamTest.testReadClosed":620,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":544,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":494,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":406,"com.google.gson.MixedStreamTest.testWriteClosed":251,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":194,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":315,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":110,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":595,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":45,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":106,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":209,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":148,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":231,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":113,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":126,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":314,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":237,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":435,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":239,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":60,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":577,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":512,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":164,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":475,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":411,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":549,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":163,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":513,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":208,"com.google.gson.functional.CollectionTest.testQueueDeserialization":326,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":417,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":433,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":255,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":613,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":509,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":587,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":77,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":561,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":91,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":149,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":308,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":248,"com.google.gson.functional.MapTest.testRawMapSerialization":369,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":575,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":53,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":135,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":184,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":264,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":291,"com.google.gson.functional.PrimitiveTest.testByteSerialization":457,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":518,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":17,"com.google.gson.ObjectTypeAdapterTest.testSerialize":22,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":89,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":402,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":4,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":277,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":243,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":46,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":278,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":610,"com.google.gson.functional.MapTest.testMapWithQuotes":360,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":548,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":612,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":328,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":269,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":540,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":338,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":188,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":545,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":170,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":380,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":37,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":147,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":179,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":442,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":558,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":127,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":531,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":550,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":5,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":560,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":454,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":296,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":320,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":521,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":306,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":514,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":585,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":57,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":198,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":597,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":187,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":257,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":294,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":307,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":392,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":261,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":10,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":134,"com.google.gson.JsonObjectTest.testAddingStringProperties":2,"com.google.gson.functional.ObjectTest.testNestedSerialization":136,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":76,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":377,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":405,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":616,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":273,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":368,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":183,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":222,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":285,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":624,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":130,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":511,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":466,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":109,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":228,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":282,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":407,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":626,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":224,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":234,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":615,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":524,"com.google.gson.functional.CollectionTest.testSetSerialization":71,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":86,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":74,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":504,"com.google.gson.functional.StringTest.testStringValueSerialization":618,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":247,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":32,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":165,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":311,"com.google.gson.MixedStreamTest.testWriteInvalidState":250,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":515,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":477,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":410,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":203,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":416,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":555,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":244,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":158,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":0,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":199,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":493,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":579,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":18,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":353,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":500,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":520},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:902","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"b6ea104a-3e74-11e6-9ba8-5b06a4f27a77","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == h) {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"h","com.google.gson.stream.JsonReader.PEEKED_NONE":"h"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b6ea5e6b-3e74-11e6-9ba8-39766cb98145","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"tindex":"b6ea5e6c-3e74-11e6-9ba8-5bf34b6900cf","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,3,4,5,6,72,73,7,9,74,75,76,11,12,13,14,15,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253],"tindex":"b6ea5e6d-3e74-11e6-9ba8-83d2a9c38bd3","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"b6eaac8e-3e74-11e6-9ba8-cb48519cea3c","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b6eaac8f-3e74-11e6-9ba8-6bffd7a83b4a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"b6eaac90-3e74-11e6-9ba8-0fcd885bea6d","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[19,20,21,22,23,254,255,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,3,4,5,6,72,73,7,9,74,75,76,11,12,13,14,15,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,256,257,258,259,260,261,262,263],"tindex":"b6ead3a1-3e74-11e6-9ba8-8b31d9c5f128","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b6eafab2-3e74-11e6-9ba8-3f98d827d0b6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b6eafab3-3e74-11e6-9ba8-d7eaa7c3af16","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1175","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_LONG)"},"failures":[],"tindex":"b6eb21c4-3e74-11e6-9ba8-3d3c1ba48da1","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_LONG":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b6eb21c5-3e74-11e6-9ba8-e1bd01e6d37a","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[264,265],"tindex":"b6eb6fe6-3e74-11e6-9ba8-0f3c7ff86629","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"b6eb96f7-3e74-11e6-9ba8-e3749f26435f","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl","sourcecode":"type.equals(from)"},"failures":[],"tindex":"b6eb96f8-3e74-11e6-9ba8-0f95875bb7f2","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type.equals(type)) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type","type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[266,267,268],"tindex":"b6eb96f9-3e74-11e6-9ba8-51a0fe62a031","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[269,270,271,272],"tindex":"b6eb96fa-3e74-11e6-9ba8-11a2224809a2","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"b6eb96fb-3e74-11e6-9ba8-4d4a7b164691","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (!(jsonElement instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (jsonElement == null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(jsonElement, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new java.lang.RuntimeException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl","sourcecode":"isEmpty"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,3,4,5,6,72,73,7,9,74,75,76,11,12,13,14,15,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253],"tindex":"b6ebbe0c-3e74-11e6-9ba8-d312b248c97c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"b6ebe51d-3e74-11e6-9ba8-bfc370e05394","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (!(jsonElement instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (jsonElement == null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(jsonElement, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new java.lang.RuntimeException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1186","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[],"tindex":"b6ebe51e-3e74-11e6-9ba8-779635ce4e57","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (i == i) {\n        {\n            return char[][i];\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl","sourcecode":"standardPrimitive.isAssignableFrom(classOfPrimitive)"},"failures":[],"tindex":"b6ebe51f-3e74-11e6-9ba8-cf4b8e719937","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (clazz.isAssignableFrom(clazz)) {\n                {\n                    return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"clazz","classOfPrimitive":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b6ebe520-3e74-11e6-9ba8-0fed581346ef","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[273,200],"tindex":"b6ec0c31-3e74-11e6-9ba8-d35debfc0da6","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (factory == factory) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[43,106,274,275,276,277,219],"tindex":"b6ec0c32-3e74-11e6-9ba8-3313d633dd81","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b6ec0c33-3e74-11e6-9ba8-156c361c886a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"b6ec0c34-3e74-11e6-9ba8-4fa040c19025","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    synchronized(java.text.DateFormat) {\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException ignored) {\n        }\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException ignored) {\n        }\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException e) {\n            throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"json","this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion <= (version)"},"failures":[],"tindex":"b6ec0c35-3e74-11e6-9ba8-697508246628","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if (ignoreVersionsAfter <= ignoreVersionsAfter) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"ignoreVersionsAfter","annotationVersion":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[278,19,279,280,281,20,21,282,23,283,284,285,286,287,288,289,290,291,24,25,292,293,294,295,296,26,297,298,299,300,301,302,27,28,303,304,305,29,30,31,32,33,34,35,36,37,38,306,39,40,41,42,43,44,45,46,47,48,49,307,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,308,67,309,310,311,312,313,314,315,316,68,317,318,319,320,69,70,321,322,71,323,324,325,326,3,4,327,5,6,328,72,329,330,331,73,7,8,9,332,74,333,334,335,10,336,337,338,339,75,76,11,12,13,14,15,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,77,356,357,358,359,360,361,362,363,78,364,365,366,79,367,80,81,368,369,370,82,371,372,373,374,375,376,83,84,16,85,86,87,88,89,377,378,90,91,92,93,94,379,380,381,95,96,97,98,382,99,264,383,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,384,385,386,387,388,274,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,275,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,115,455,456,457,458,459,460,461,276,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,116,117,118,119,120,121,122,123,124,125,126,477,127,478,128,129,265,130,479,131,480,132,481,133,134,135,136,137,138,139,140,141,142,482,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,483,484,158,159,160,161,162,163,169,485,170,171,172,486,487,488,489,173,490,491,492,493,494,495,496,497,498,499,500,174,175,176,501,502,503,177,178,504,505,506,179,507,180,181,182,183,508,184,185,186,187,189,509,190,191,510,192,193,194,195,511,196,197,512,198,199,273,200,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,277,529,201,202,203,530,531,532,533,534,204,205,206,207,208,209,535,210,211,212,213,536,537,538,539,214,540,215,216,217,218,219,220,221,222,223,541,542,543,544,271,224,225,545,546,547,548,549,550,551,552,553,226,554,555,556,227,557,558,559,560,561,562,228,563,564,565,566,567,568,569,229,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,230,585,586,587,588,231,589,590,591,592,593,594,595,596,232,233,234,235,236,237,238,239,597,598,599,240,241,600,242,243,244,245,246,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,247,17,18,248,619,620,249,621,250,622,623,624,251,252,253,625,626,627],"tindex":"b6ec3346-3e74-11e6-9ba8-8172430f51f2","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b6ec5a57-3e74-11e6-9ba8-5bcebe4c0c77","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[227],"tindex":"b6ec5a58-3e74-11e6-9ba8-eb13946dffd4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value((value == null ? null : value.toString()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.STRING)) && (token != (com.google.gson.stream.JsonToken.NUMBER))"},"failures":[],"tindex":"b6ec5a59-3e74-11e6-9ba8-d514964fa257","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((src != src) && (token != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"src","token":"src","com.google.gson.stream.JsonToken.NUMBER":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"b6ec5a5a-3e74-11e6-9ba8-d3467cc3e163","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl","sourcecode":"standardPrimitive.isAssignableFrom(classOfPrimitive)"},"failures":[],"tindex":"b6ec816b-3e74-11e6-9ba8-53610f69df4a","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (clazz.isAssignableFrom(clazz)) {\n                {\n                    return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"clazz","classOfPrimitive":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"b6ec816c-3e74-11e6-9ba8-8b10b6bee379","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (!(o instanceof java.util.Map.Entry)) {\n        return false;\n    } \n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n    if (node == null) {\n        return false;\n    } \n    removeInternal(node, true);\n    return true;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"b6ec816d-3e74-11e6-9ba8-f5ec9213a652","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"b6eca87e-3e74-11e6-9ba8-f72368331aa2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b6eca87f-3e74-11e6-9ba8-f52b01bf36dc","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"b6eca880-3e74-11e6-9ba8-57df6359ef35","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"b6eca881-3e74-11e6-9ba8-cd116eeb7787","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"b6eca882-3e74-11e6-9ba8-8fd64bb6295f","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o != null) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[19,279,280,281,20,21,23,283,284,285,287,288,289,291,25,292,296,26,297,298,299,300,27,303,304,305,29,31,33,35,36,37,306,39,40,41,42,43,45,46,47,49,51,52,53,54,55,56,57,58,61,63,66,308,67,309,313,314,315,316,68,319,70,321,71,323,325,328,329,7,8,9,74,333,334,10,337,338,339,75,76,344,348,349,352,354,77,360,361,362,364,365,79,367,80,81,368,369,82,371,373,376,83,84,16,85,87,88,89,377,378,90,91,92,379,381,95,96,98,382,99,264,100,105,106,107,112,113,387,274,394,397,275,405,411,413,414,417,420,422,423,426,427,431,440,442,444,445,448,451,453,456,457,458,459,460,461,276,465,467,471,472,474,116,117,120,123,126,477,128,265,130,480,481,133,135,136,137,139,143,145,146,148,153,156,157,483,158,159,160,161,163,164,165,166,167,168,169,485,170,171,172,486,487,488,489,173,490,491,492,493,494,495,496,497,498,499,628,502,503,177,178,504,505,506,179,181,183,185,186,187,188,189,509,191,193,196,197,198,273,200,513,514,516,517,518,519,520,523,524,525,277,201,203,531,533,204,205,206,207,535,212,538,214,216,217,219,222,542,543,544,545,547,548,550,552,553,555,227,558,559,560,561,562,563,565,566,568,229,570,571,572,574,577,579,580,582,583,230,585,586,587,588,231,591,592,594,596,232,235,236,239,599,240,241,600,242,243,244,245,246,602,603,604,605,606,609,611,615,618,247,17,18,625,626],"tindex":"b6eccf93-3e74-11e6-9ba8-114b157657f4","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"appendable"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b6eccf94-3e74-11e6-9ba8-53bc19b58c63","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"b6eccf95-3e74-11e6-9ba8-03a793b29049","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    try {\n        com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n        return read(jsonReader);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b6ecf6a6-3e74-11e6-9ba8-a3b923916dc6","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b6ecf6a7-3e74-11e6-9ba8-b3e5ecc42f3d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[629],"tindex":"b6ecf6a8-3e74-11e6-9ba8-e74bf0949491","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key != null) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[],"tindex":"b6ecf6a9-3e74-11e6-9ba8-c7bdf1d0a852","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"b6ecf6aa-3e74-11e6-9ba8-47269d7e37bb","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (factory == factory) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":49,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":0,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":504,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":110,"com.google.gson.functional.StringTest.testStringValueDeserialization":503,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":175,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":383,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":63,"com.google.gson.stream.JsonWriterTest.testRepeatedName":102,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":646,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":267,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":467,"com.google.gson.MixedStreamTest.testWriteLenient":80,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":440,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":539,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":1,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":261,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":51,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":446,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":351,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":544,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":556,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":43,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":336,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":566,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":419,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":498,"com.google.gson.functional.ObjectTest.testSingletonLists":228,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":538,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":331,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":551,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":17,"com.google.gson.stream.JsonWriterTest.testStrings":123,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":428,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":218,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":392,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":455,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":321,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":662,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":313,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":476,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":513,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":274,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":220,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":349,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":115,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":400,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":70,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":594,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":473,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":587,"com.google.gson.functional.EnumTest.testEnumCaseMapping":522,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":68,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":550,"com.google.gson.functional.JsonTreeTest.testToJsonTree":7,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":640,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":393,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":13,"com.google.gson.stream.JsonWriterTest.testNulls":99,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":567,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":373,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":310,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":680,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":380,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":14,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":577,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":264,"com.google.gson.functional.ObjectTest.testNullDeserialization":461,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":202,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":511,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":452,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":73,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":625,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":647,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":606,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":578,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":471,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":317,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":458,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":72,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":543,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":216,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":357,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":356,"com.google.gson.JsonParserTest.testParseString":575,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":391,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":311,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":597,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":561,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":372,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":185,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":147,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":342,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":346,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":441,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":673,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":379,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":255,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":86,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":424,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":173,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":598,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":685,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":347,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":181,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":239,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":83,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":118,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":289,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":450,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":62,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":271,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":558,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":588,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":397,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":256,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":196,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":19,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":425,"com.google.gson.stream.JsonWriterTest.testEmptyArray":92,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":678,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":681,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":148,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":404,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":537,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":316,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":423,"com.google.gson.functional.CollectionTest.testSetDeserialization":487,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":44,"com.google.gson.functional.EnumTest.testEnumSet":53,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":233,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":437,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":343,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":197,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":206,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":376,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":235,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":32,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":125,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":660,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":328,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":114,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":353,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":219,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":468,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":71,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":65,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":644,"com.google.gson.functional.MapTest.testHashMapDeserialization":671,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":689,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":386,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":361,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":611,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":136,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":291,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":253,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":682,"com.google.gson.functional.MapTest.testSortedMap":676,"com.google.gson.functional.MapTest.testMapSerialization":164,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":137,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":345,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":402,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":410,"com.google.gson.functional.MapTest.testSerializeMaps":25,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":154,"com.google.gson.functional.MapTest.testComplexKeysSerialization":171,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":436,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":85,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":677,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":191,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":204,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":521,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":285,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":518,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":631,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":520,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":222,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":568,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":268,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":460,"com.google.gson.functional.MapTest.testStringKeyDeserialization":589,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":412,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":208,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":600,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":174,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":335,"com.google.gson.functional.PrettyPrintingTest.testMap":38,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":546,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":645,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":46,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":138,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":529,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":312,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":320,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":413,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":506,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":553,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":22,"com.google.gson.functional.MapTest.testMapSerializationEmpty":172,"com.google.gson.functional.CollectionTest.testQueueSerialization":263,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":569,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":119,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":656,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":121,"com.google.gson.functional.MapTest.testMapOfMapSerialization":27,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":560,"com.google.gson.JavaSerializationTest.testMapIsSerializable":637,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":381,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":691,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":94,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":304,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":596,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":604,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":614,"com.google.gson.functional.FieldNamingTest.testIdentity":155,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":505,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":590,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":105,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":275,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":462,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":3,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":227,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":270,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":431,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":97,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":329,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":324,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":15,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":552,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":492,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":619,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":388,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":377,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":629,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":670,"com.google.gson.functional.MapTest.testMapSubclassSerialization":160,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":562,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":127,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":422,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":438,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":78,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":193,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":340,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":607,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":370,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":442,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":668,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":433,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":195,"com.google.gson.functional.EnumTest.testEnumSubclass":56,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":620,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":322,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":454,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":616,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":314,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":350,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":207,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":515,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":641,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":273,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":106,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":654,"com.google.gson.stream.JsonWriterTest.testTwoNames":93,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":493,"com.google.gson.stream.JsonWriterTest.testNullName":100,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":10,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":74,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":408,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":580,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":657,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":686,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":108,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":491,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":618,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":540,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":445,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":399,"com.google.gson.MixedStreamTest.testWriteNulls":612,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":30,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":103,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":683,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":183,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":203,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":418,"com.google.gson.CommentsTest.testParseComments":634,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":564,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":36,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":229,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":500,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":248,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":411,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":661,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":401,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":28,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":290,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":609,"com.google.gson.MixedStreamTest.testReadInvalidState":635,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":40,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":199,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":541,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":76,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":176,"com.google.gson.JsonParserTest.testParseMixedArray":84,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":334,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":58,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":414,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":245,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":559,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":382,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":623,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":407,"com.google.gson.functional.MapTest.testMapDeserialization":585,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":536,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":39,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":159,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":497,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":525,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":162,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":259,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":281,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":279,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":519,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":591,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":213,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":695,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":369,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":241,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":633,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":293,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":417,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":531,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":420,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":272,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":298,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":165,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":221,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":615,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":542,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":639,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":603,"com.google.gson.functional.PrimitiveTest.testShortSerialization":626,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":283,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":352,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":475,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":613,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":341,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":21,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":333,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":151,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":55,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":579,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":262,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":126,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":576,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":583,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":338,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":134,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":549,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":443,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":387,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":502,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":88,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":319,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":627,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":665,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":307,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":269,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":242,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":426,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":485,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":91,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":527,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":354,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":439,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":209,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":655,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":465,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":449,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":57,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":294,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":548,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":374,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":192,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":427,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":146,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":282,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":649,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":143,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":254,"com.google.gson.stream.JsonWriterTest.testNullStringValue":96,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":384,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":11,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":687,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":642,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":355,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":563,"com.google.gson.stream.JsonWriterTest.testEmptyObject":113,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":601,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":286,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":54,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":280,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":364,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":403,"com.google.gson.functional.MapTest.testGeneralMapField":169,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":448,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":180,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":667,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":188,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":315,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":23,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":167,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":129,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":366,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":622,"com.google.gson.MixedStreamTest.testReadMixedStreamed":318,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":572,"com.google.gson.JsonObjectTest.testDeepCopy":570,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":375,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":674,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":265,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":325,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":481,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":116,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":396,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":658,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":474,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":636,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":145,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":586,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":545,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":582,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":135,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":547,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":20,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":251,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":101,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":653,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":89,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":144,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":684,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":365,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":690,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":501,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":212,"com.google.gson.functional.ObjectTest.testNestedDeserialization":466,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":238,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":494,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":362,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":482,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":472,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":666,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":247,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":489,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":507,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":675,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":31,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":599,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":514,"com.google.gson.JavaSerializationTest.testListIsSerializable":638,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":5,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":444,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":266,"com.google.gson.functional.ObjectTest.testNullSerialization":632,"com.google.gson.stream.JsonWriterTest.testDoubles":120,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":296,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":398,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":584,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":168,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":557,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":117,"com.google.gson.functional.MapTest.testInterfaceTypeMap":166,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":409,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":416,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":258,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":643,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":299,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":306,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":517,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":630,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":528,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":470,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":650,"com.google.gson.MixedStreamTest.testWriteClosed":82,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":48,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":363,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":394,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":484,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":64,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":33,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":257,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":9,"com.google.gson.stream.JsonWriterTest.testLongs":98,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":243,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":246,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":150,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":231,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":260,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":47,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":478,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":659,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":252,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":516,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":385,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":495,"com.google.gson.stream.JsonWriterTest.testNumbers":122,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":300,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":360,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":526,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":371,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":178,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":205,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":8,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":59,"com.google.gson.functional.CollectionTest.testQueueDeserialization":693,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":344,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":617,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":510,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":602,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":390,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":479,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":163,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":459,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":534,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":217,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":464,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":45,"com.google.gson.functional.MapTest.testRawMapSerialization":29,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":77,"com.google.gson.JsonParserTest.testParseReader":574,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":692,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":669,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":308,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":236,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":292,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":405,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":610,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":581,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":18,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":182,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":432,"com.google.gson.functional.PrimitiveTest.testByteSerialization":624,"com.google.gson.ObjectTypeAdapterTest.testSerialize":16,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":156,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":214,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":648,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":2,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":187,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":152,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":34,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":508,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":593,"com.google.gson.functional.MapTest.testMapWithQuotes":26,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":530,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":509,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":35,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":608,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":429,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":244,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":664,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":140,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":42,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":107,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":499,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":194,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":463,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":225,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":532,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":621,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":190,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":141,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":4,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":533,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":663,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":605,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":486,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":406,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":6,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":179,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":389,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":295,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":277,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":61,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":480,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":128,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":435,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":330,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":421,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":67,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":211,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":305,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":456,"com.google.gson.functional.ObjectTest.testNestedSerialization":237,"com.google.gson.JsonObjectTest.testAddingStringProperties":571,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":287,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":37,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":130,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":512,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":139,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":170,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":177,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":226,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":81,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":323,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":124,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":234,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":694,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":358,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":12,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":378,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":69,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":592,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":651,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":368,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":457,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":477,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":309,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":554,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":186,"com.google.gson.functional.CollectionTest.testSetSerialization":52,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":523,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":210,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":223,"com.google.gson.functional.StringTest.testStringValueSerialization":555,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":24,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":301,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":490,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":688,"com.google.gson.MixedStreamTest.testWriteInvalidState":79,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":679,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":232,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":652,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":189,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":339,"com.google.gson.stream.JsonWriterTest.testBooleans":95,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":142,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":524,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":153,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":573,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":201,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":565,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":496,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":87,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":469,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":628,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":157,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":672,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":109,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":184,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":595},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:138","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e725106f-3efe-11e6-bf4b-c774a3988216","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"expected":"value","this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"tindex":"e725d3c0-3efe-11e6-bf4b-bf37ff55458c","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src instanceof java.lang.Class) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e725d3c1-3efe-11e6-bf4b-05a079dfeac0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl"},"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"tindex":"e725fad2-3efe-11e6-bf4b-75a7ec5a5f72","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:683","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e725fad3-3efe-11e6-bf4b-3ba80428a492","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (i == i) {\n        {\n            return char[][i];\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"i","com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:318","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72621e4-3efe-11e6-bf4b-110dc0dc194e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            if (root != null) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                        stackTop = n;\n                    }\n                    com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e72648f5-3efe-11e6-bf4b-010a8a68c84d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:511","type":"CtBinaryOperatorImpl"},"failures":[58,59,60,61,62,63,64,65,66,67],"tindex":"e72648f6-3efe-11e6-bf4b-2f64a9641af0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == 0) {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"h"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e7267007-3efe-11e6-bf4b-fd96076c7910","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e7267008-3efe-11e6-bf4b-5f604094d36b","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e7269719-3efe-11e6-bf4b-f38324ee463e","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e726971a-3efe-11e6-bf4b-ff8ce6883bc6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e726be2b-3efe-11e6-bf4b-015ea7d8ef6a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e726e53c-3efe-11e6-bf4b-4141c8759dc3","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e727a88d-3efe-11e6-bf4b-23dc1ea9f6c1","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e727a88e-3efe-11e6-bf4b-713a6d8e643c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e727cf9f-3efe-11e6-bf4b-d7366323833e","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property != null) {\n                {\n                    return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e727cfa0-3efe-11e6-bf4b-d15826a1fd96","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json != null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e727cfa1-3efe-11e6-bf4b-39bcbaf8940d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e727cfa2-3efe-11e6-bf4b-d1e192a4138b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[68,69,70,71],"tindex":"e727f6b3-3efe-11e6-bf4b-f9f045e571ce","method":{"position":"com.google.gson.GsonBuilder:261","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy serializationPolicy) {\n    if (serializationPolicy == serializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.com.google.gson.LongSerializationPolicy = serializationPolicy;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"serializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"serializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"e727f6b4-3efe-11e6-bf4b-8b1f3ea18a22","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array.getRawType().equals(array.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"array","to":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl"},"failures":[68,69,72,73,74,75,76,16,17,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,20,140,141,142,143,22,144,145,146,147,148,23,149,150,151,152,153,154,155,24,156,157,158,159,160,25,161,162,163,26,27,164,165,28,166,167,168,169,170,29,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,30,187,188,189,190,191,192,193,194,6,31,195,32,196,197,33,34,198,199,200,201,202,203,204,205,35,206,207,208,209,210,36,211,212,213,214,37,215,216,217,218,219,220,38,221,222,223,224,39,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,40,41,42,43,44,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,45,262,46,263,47,48,264,49,50,51,265,52,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,53,54,55,56,299,57,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317],"tindex":"e7281dc5-3efe-11e6-bf4b-e5aa2e5a73fb","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (!root) {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl"},"failures":[58],"tindex":"e72844d6-3efe-11e6-bf4b-39dafa5c4fe1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl"},"failures":[74,75,16,77,78,79,82,318,319,83,320,321,322,323,125,324,325,326,327,328,19,126,127,128,70,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,136,0,137,361,362,138,363,364,139,20,365,366,367,368,369,370,371,372,373,374,375,376,21,377,378,379,380,381,145,382,147,383,384,385,386,387,388,149,389,390,150,391,392,393,394,151,152,153,154,155,24,395,396,158,397,398,399,163,400,166,168,169,171,175,401,402,176,403,177,404,405,406,407,408,409,410,188,411,189,412,413,414,192,415,416,193,417,1,2,4,5,194,418,6,31,195,32,196,197,419,33,34,198,420,199,421,422,200,201,202,203,204,423,205,424,425,426,207,209,427,210,428,429,430,213,431,7,214,215,216,217,432,433,218,434,435,219,436,437,438,221,222,225,226,439,440,441,442,443,444,227,228,445,446,229,447,448,230,449,450,231,451,233,452,234,453,454,455,235,456,236,237,457,239,458,459,460,461,240,462,241,242,463,243,464,465,466,467,244,40,42,43,44,468,469,470,471,472,473,474,475,245,246,247,248,8,9,249,476,477,250,251,478,479,252,480,253,481,254,255,482,10,483,256,257,258,11,12,484,485,259,260,13,261,262,49,486,487,51,52,488,267,489,268,490,491,270,271,272,492,493,273,274,494,275,276,495,277,496,278,497,498,499,280,281,500,282,284,501,285,502,286,287,288,289,503,504,505,506,507,508,509,510,511,512,513,291,292,293,514,294,295,296,515,516,297,517,298,518,519,55,56,520,299,521,522,300,301,302,303,304,314,315,523,316,317],"tindex":"e7286be7-3efe-11e6-bf4b-295bde9cd525","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (value.isAssignableFrom(key)) {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"value","rawSupertype":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e729cb78-3efe-11e6-bf4b-05b227fb6147","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[68,72,74,75,77,78,81,83,320,323,119,524,123,124,125,325,525,127,128,129,334,526,71,136,137,139,20,527,366,528,529,530,141,373,531,532,533,534,22,535,536,537,382,538,385,148,539,23,389,540,390,541,542,543,24,156,157,544,158,545,160,25,161,162,163,26,27,166,168,169,29,171,173,175,176,177,178,179,182,183,185,186,187,188,190,192,415,546,416,193,417,6,197,201,202,203,204,205,35,206,207,36,547,212,213,214,37,215,216,217,432,218,219,548,222,225,226,228,229,230,231,234,235,237,240,242,243,244,468,469,470,471,472,473,474,475,245,246,250,254,255,256,257,258,259,260,261,45,263,48,264,49,50,51,265,549,272,273,274,494,275,276,279,286,287,288,289,550,504,551,505,552,290,553,554,555,291,293,294,295,297,53,54,55,56,299,57,522,556,300,301,302,303,304,306,307,308,313],"tindex":"e729f289-3efe-11e6-bf4b-15daf7fae997","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72a199a-3efe-11e6-bf4b-b38fc9e0bc86","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72a199b-3efe-11e6-bf4b-7b0b31b8db91","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            if (skipPast == skipPast) {\n                {\n                    boolean boolean = false;\n                    if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                        skipPastFound = true;\n                    \n                    for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                        if (!skipPastFound) {\n                            if (factory == skipPast) {\n                                skipPastFound = true;\n                            } \n                            continue;\n                        } \n                        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                        if (candidate != null) {\n                            return candidate;\n                        } \n                    }\n                    throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl"},"failures":[],"tindex":"e72a40ac-3efe-11e6-bf4b-7dcdf86f51ad","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if ((key.peek()) == key) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e72a40ad-3efe-11e6-bf4b-1fcd23cd09e5","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[152,294,516],"tindex":"e72a40ae-3efe-11e6-bf4b-8f2942f702c1","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72a67bf-3efe-11e6-bf4b-4779529ee7f9","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json != null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72a67c0-3efe-11e6-bf4b-39d875dc91a7","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[154,295,515],"tindex":"e72a67c1-3efe-11e6-bf4b-b10d0021941c","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e72a8ed2-3efe-11e6-bf4b-21dfc86c9b82","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl"},"failures":[],"tindex":"e72a8ed3-3efe-11e6-bf4b-1526b979eea5","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e72a8ed4-3efe-11e6-bf4b-efd9a17ce401","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72ab5e5-3efe-11e6-bf4b-113fde80a28d","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72ab5e6-3efe-11e6-bf4b-f35e7b891a9f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"e72adcf7-3efe-11e6-bf4b-11dba8215705","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[80,557,558,559,560,561,562],"tindex":"e72adcf8-3efe-11e6-bf4b-6b1bf78ee929","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl"},"failures":[],"tindex":"e72adcf9-3efe-11e6-bf4b-67266cc41817","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n    toJson(jsonElement, writer);\n    return writer.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72adcfa-3efe-11e6-bf4b-290890aa4507","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"appendable"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72b040b-3efe-11e6-bf4b-659f8cf45cc0","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72b040c-3efe-11e6-bf4b-0f591c9be781","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (typeOfT == typeOfT) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"typeOfT","java.sql.Timestamp.class":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:64","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72c639d-3efe-11e6-bf4b-8d4145627555","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if ((key.peek()) == key) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"key","com.google.gson.stream.JsonToken.NULL":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72c8aae-3efe-11e6-bf4b-69a62fadb23f","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        {\n            if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl"},"failures":[],"tindex":"e72c8aaf-3efe-11e6-bf4b-dd7ca0e43571","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n    } \n    java.util.List<com.google.gson.JsonElement>.add(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:139","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72c8ab0-3efe-11e6-bf4b-0b27af85d8ad","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            if (root != null) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                        stackTop = n;\n                    }\n                    com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72cb1c1-3efe-11e6-bf4b-6978446ade7e","method":{"position":"com.google.gson.internal.$Gson$Types:394","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.TypeVariable<?> unknown) {\n    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.declaringClassOf(unknown);\n    if (declaredByRaw == null) {\n        return unknown;\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof java.lang.reflect.ParameterizedType) {\n        int int = com.google.gson.internal.$Gson$Types.indexOf(declaredByRaw.getTypeParameters(), unknown);\n        return ((java.lang.reflect.ParameterizedType)(declaredBy)).getActualTypeArguments()[index];\n    } \n    return unknown;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"e72cb1c2-3efe-11e6-bf4b-d3150951748a","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72cb1c3-3efe-11e6-bf4b-733758b4e006","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (name != null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72cd8d4-3efe-11e6-bf4b-83466972c890","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property != null) {\n                {\n                    return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:208","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72cd8d5-3efe-11e6-bf4b-63cefcb108d8","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n    } \n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n    } \n    return com.google.gson.GsonBuilder.this;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"typeAdapter","com.google.gson.stream.JsonToken.NAME":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl"},"failures":[],"tindex":"e72cffe6-3efe-11e6-bf4b-37058aa218df","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n    toJson(jsonElement, writer);\n    return writer.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72cffe7-3efe-11e6-bf4b-77da8beff26d","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl"},"failures":[],"tindex":"e72cffe8-3efe-11e6-bf4b-7142b57bf7ce","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e72cffe9-3efe-11e6-bf4b-2de3019502ff","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72d26fa-3efe-11e6-bf4b-0da82bc13eff","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[156,157],"tindex":"e72d26fb-3efe-11e6-bf4b-27f035925564","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[563],"tindex":"e72d26fc-3efe-11e6-bf4b-ab3e15259de7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,127,128,0,367,582,583,584,585,586,587,588,589,176,403,177,1,2,4,5,421,425,590,431,443,244,8,9,255,482,10,483,11,12,13,274,495,591],"tindex":"e72d4e0d-3efe-11e6-bf4b-a1791adcb873","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72e868e-3efe-11e6-bf4b-55bab9845431","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"e72ead9f-3efe-11e6-bf4b-61d92b9cfc3d","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o == null) {\n        {\n            if (o.getRawType().equals(o.getRawType())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o","to":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[321,98,143,144,146,147],"tindex":"e72ed4b0-3efe-11e6-bf4b-3394a112dda9","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72ed4b1-3efe-11e6-bf4b-c528d22ae775","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o == null) {\n        {\n            if (o.getRawType().equals(o.getRawType())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e72efbc2-3efe-11e6-bf4b-c1046f8069cf","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[74,75,16,77,78,79,82,318,319,83,125,326,327,328,126,127,128,354,136,0,137,362,138,363,364,20,368,369,374,21,378,145,149,150,151,152,153,154,155,24,395,396,158,397,163,400,166,168,169,171,175,402,176,403,177,405,188,411,189,193,1,2,4,5,194,418,31,195,32,196,197,419,33,34,198,420,199,422,200,201,202,203,204,423,205,424,426,207,209,210,430,213,431,7,214,216,217,433,218,219,221,222,225,226,439,440,441,442,443,444,227,228,445,446,229,447,448,230,449,450,231,451,233,452,234,454,455,235,456,236,237,457,239,458,459,240,462,241,242,463,243,464,465,466,467,244,40,42,43,44,245,246,247,248,8,9,249,476,477,250,251,478,479,252,253,481,254,255,482,10,483,256,257,258,11,12,484,485,259,260,13,261,262,49,487,51,52,267,489,268,490,269,491,270,271,272,492,493,273,274,275,276,277,496,278,497,498,280,281,500,282,284,285,502,286,287,288,289,291,292,293,514,294,295,296,515,516,297,517,298,518,519,299,521,300,301,302,303,304,314,315,523,316,317],"tindex":"e72efbc3-3efe-11e6-bf4b-f3825031c71f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e72f22d4-3efe-11e6-bf4b-5be7928d5796","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[68,69,74,75,592,80,81,320,321,322,593,125,594,324,325,595,326,327,328,19,70,526,596,597,598,71,599,600,601,136,602,0,137,361,362,138,363,364,139,20,532,144,382,146,385,387,390,541,391,392,151,152,153,154,155,156,544,395,396,158,397,159,399,25,163,166,169,170,175,401,402,176,403,177,404,405,186,415,546,416,1,2,3,4,5,6,419,420,421,201,203,35,424,206,425,590,426,207,208,209,427,210,36,547,603,211,428,604,429,212,214,434,605,220,38,221,222,223,224,39,225,226,439,232,606,467,468,469,470,471,472,473,474,475,607,249,476,477,250,251,478,479,252,480,253,608,481,254,255,549,267,489,268,490,269,491,270,271,274,494,609,495,278,497,279,499,14,280,281,282,283,284,610,501,285,502,288,289,611,291,293,514,294,295,296,515,516,517,298,518,519,55,15],"tindex":"e72f22d5-3efe-11e6-bf4b-358842cd234c","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (datePattern == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[68,69,72,73,74,75,77,78,612,79,80,81,82,83,320,321,322,613,614,581,615,18,323,125,594,324,325,126,127,128,616,557,129,334,558,130,526,559,131,617,560,618,561,619,563,596,620,621,597,598,132,622,71,623,624,599,625,626,133,562,600,134,601,135,627,136,602,0,137,138,139,20,527,366,528,140,529,530,141,373,531,142,21,532,143,533,534,22,535,536,537,144,145,382,146,147,538,385,628,148,539,23,149,389,540,390,541,150,542,629,543,151,152,153,154,155,24,156,157,544,158,545,159,160,25,161,162,163,26,27,164,165,28,166,167,168,169,170,29,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,30,187,188,189,190,191,192,415,546,416,193,417,630,1,2,3,4,5,194,6,31,195,32,196,197,33,34,198,199,200,201,202,203,204,205,35,206,207,208,209,210,36,547,211,604,429,212,430,213,431,7,214,37,215,216,217,432,218,631,605,219,548,220,38,221,222,223,224,39,225,226,227,228,229,230,231,232,233,632,234,633,606,235,236,237,238,239,240,241,242,243,244,40,41,42,43,44,468,469,470,471,472,473,474,475,245,246,247,248,8,9,607,249,250,251,252,253,254,255,482,10,483,256,257,258,11,12,259,260,13,261,45,262,46,263,47,48,264,49,50,51,265,52,266,549,267,268,269,270,271,272,273,274,494,275,276,277,278,279,14,280,281,282,283,284,610,285,286,287,288,289,611,550,504,551,505,552,290,553,554,555,291,292,293,294,295,296,297,298,53,54,55,56,299,57,522,556,300,301,302,303,304,306,314,15,315,316,317],"tindex":"e72f49e6-3efe-11e6-bf4b-c7dc7681e6d0","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[86,613],"tindex":"e72f70f7-3efe-11e6-bf4b-950372abb43e","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e72f70f8-3efe-11e6-bf4b-019aa3adfb1e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72f9809-3efe-11e6-bf4b-f1e821fbb30f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"key","java.util.Date.class":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72f980a-3efe-11e6-bf4b-7fcaafea81cd","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl"},"failures":[192,415,416,417,630,202,203,204,423,205,244],"tindex":"e72f980b-3efe-11e6-bf4b-e1ba23e6916c","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72fbf1c-3efe-11e6-bf4b-15a406d556b2","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e72fbf1d-3efe-11e6-bf4b-1199cc46831e","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl"},"failures":[83,95,101,102,104,109,110,128,131,617,20,24,158,188,197,213,218,219,222,225,229,234,235,237,240,241,243,250,255,259,261,49,51,275,276],"tindex":"e72fbf1e-3efe-11e6-bf4b-83f71024cc25","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (!value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72fbf1f-3efe-11e6-bf4b-3d9d63d11f40","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e72fe630-3efe-11e6-bf4b-61c6a8ea68fe","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            if (skipPast == skipPast) {\n                {\n                    boolean boolean = false;\n                    if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                        skipPastFound = true;\n                    \n                    for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                        if (!skipPastFound) {\n                            if (factory == skipPast) {\n                                skipPastFound = true;\n                            } \n                            continue;\n                        } \n                        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                        if (candidate != null) {\n                            return candidate;\n                        } \n                    }\n                    throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e73145c1-3efe-11e6-bf4b-e392222f5b60","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e7316cd2-3efe-11e6-bf4b-099ed818d2e3","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        {\n            if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"typeOfT","context":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e7316cd3-3efe-11e6-bf4b-3bb1a4f6ef0a","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e731e204-3efe-11e6-bf4b-b71db1e7fcc2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e7320915-3efe-11e6-bf4b-7153237f0aeb","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:174","type":"CtInvocationImpl"},"failures":[],"tindex":"e7320916-3efe-11e6-bf4b-b9ec58b277e1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"o","this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e7323027-3efe-11e6-bf4b-896081220863","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc != typeOfSrc) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"typeOfSrc","type":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e7323028-3efe-11e6-bf4b-4f60d7eeca2d","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e7323029-3efe-11e6-bf4b-f137112e213b","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"condition","skipSerialize":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e732302a-3efe-11e6-bf4b-cb635a84a421","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e7327e4b-3efe-11e6-bf4b-3905ff82b9e1","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (name != null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl"},"failures":[],"tindex":"e7327e4c-3efe-11e6-bf4b-71c06cd46c13","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n    } \n    java.util.List<com.google.gson.JsonElement>.add(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"e7327e4d-3efe-11e6-bf4b-f17d383bb5c2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e732a55e-3efe-11e6-bf4b-a319dbe220cb","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e732cc6f-3efe-11e6-bf4b-d5a438d3d0a0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:350","type":"CtBinaryOperatorImpl"},"failures":[634,68,69,74,75,77,635,78,79,80,81,82,318,319,83,320,321,322,581,615,18,323,593,125,594,324,325,636,637,638,595,326,327,328,19,126,127,128,639,640,70,616,329,557,641,642,643,330,331,129,332,333,334,644,645,646,647,648,649,335,558,130,650,651,336,337,652,526,338,559,131,653,339,617,340,341,560,342,618,561,654,655,619,563,343,656,657,596,658,344,345,659,346,347,348,349,620,660,621,661,597,598,350,351,132,352,662,622,353,71,663,354,355,623,624,599,625,626,133,562,356,357,664,600,358,134,665,359,666,601,135,667,627,360,668,136,602,0,137,361,362,138,363,364,139,20,365,527,366,528,367,368,369,140,370,529,530,371,141,372,373,531,374,375,142,376,21,377,532,143,533,534,22,378,535,379,536,537,380,144,381,145,382,146,147,383,538,669,384,385,386,628,148,387,539,23,388,149,389,540,390,541,150,391,392,542,629,393,543,394,151,152,153,154,155,24,544,395,396,158,397,398,545,670,159,399,671,582,160,25,583,584,161,672,162,585,163,673,674,586,675,26,27,164,587,400,165,28,676,166,167,168,169,170,29,588,171,172,589,173,677,678,174,175,401,402,176,403,177,404,405,178,179,679,180,181,182,183,184,406,407,185,186,30,408,680,409,187,410,188,411,189,412,190,413,191,414,192,415,546,416,193,417,630,1,2,3,4,5,194,418,6,31,195,32,196,197,419,33,34,198,420,199,421,422,200,201,202,203,204,423,205,35,424,206,425,590,426,207,208,209,427,210,36,547,603,211,428,604,429,212,430,213,431,7,214,37,215,216,217,681,432,433,218,434,435,682,219,436,437,548,438,220,38,221,222,223,224,39,225,226,439,440,441,442,443,444,683,684,685,227,228,445,446,229,447,448,230,449,450,231,451,686,233,452,234,454,633,455,606,235,456,236,237,238,457,239,458,459,460,240,462,241,242,463,243,464,465,466,467,244,40,41,42,43,44,468,469,470,471,472,473,474,475,245,246,247,248,8,9,607,249,476,477,250,251,478,479,252,480,253,608,481,254,255,482,10,483,256,257,258,11,12,484,485,259,260,13,261,45,262,46,687,688,689,263,47,48,264,49,690,691,50,486,487,51,265,692,52,266,488,549,693,267,489,268,490,269,491,270,271,272,492,493,273,274,494,694,275,276,495,277,496,278,497,498,279,499,14,280,281,500,282,283,284,610,501,285,502,286,287,288,289,611,503,550,504,551,505,552,506,507,290,508,553,509,510,511,554,512,513,555,291,292,293,514,294,295,296,515,516,297,517,298,518,519,53,54,55,56,695,520,299,521,57,522,556,300,301,302,303,304,314,15,315,523,316,317],"tindex":"e732f380-3efe-11e6-bf4b-71429ab952d5","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ongoingCall":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e7331a91-3efe-11e6-bf4b-193a669e6fb2","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if ((name.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315500694/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e7331a92-3efe-11e6-bf4b-a97bc2ac6c9d","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
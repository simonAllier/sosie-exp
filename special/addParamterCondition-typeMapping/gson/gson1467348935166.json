{"failureDictionary":{"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":1,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":21,"com.google.gson.functional.MapTest.testSortedMap":22,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":58,"com.google.gson.functional.MapTest.testMapSerialization":18,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":68,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":36,"com.google.gson.functional.MapTest.testSerializeMaps":108,"com.google.gson.functional.MapTest.testComplexKeysSerialization":29,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":69,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":146,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":38,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":33,"com.google.gson.MixedStreamTest.testWriteLenient":138,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":90,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":122,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":110,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":135,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":76,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":46,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":7,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":62,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":92,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":137,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":120,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":147,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":13,"com.google.gson.functional.MapTest.testStringKeyDeserialization":31,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":35,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":141,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":115,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":140,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":144,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":43,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":64,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":65,"com.google.gson.functional.MapTest.testMapSerializationEmpty":30,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":57,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":80,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":149,"com.google.gson.JavaSerializationTest.testMapIsSerializable":0,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":97,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":91,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":126,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":131,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":20,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":86,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":106,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":48,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":19,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":74,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":55,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":109,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":111,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":94,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":53,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":128,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":73,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":142,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":125,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":133,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":2,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":101,"com.google.gson.functional.MapTest.testMapSubclassSerialization":6,"com.google.gson.functional.MapTest.testGeneralMapField":26,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":78,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":59,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":87,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":41,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":151,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":24,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":89,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":63,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":129,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":103,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":15,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":117,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":54,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":136,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":77,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":143,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":16,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":70,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":42,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":72,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":150,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":5,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":83,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":121,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":14,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":67,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":99,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":56,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":116,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":98,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":27,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":49,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":3,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":32,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":85,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":37,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":81,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":113,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":79,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":112,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":45,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":17,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":28,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":102,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":75,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":96,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":66,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":100,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":119,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":84,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":93,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":34,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":50,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":40,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":123,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":8,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":25,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":60,"com.google.gson.functional.MapTest.testInterfaceTypeMap":23,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":127,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":44,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":71,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":139,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":145,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":148,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":88,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":124,"com.google.gson.functional.MapTest.testMapDeserialization":12,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":9,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":95,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":114,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":104,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":11,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":134,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":132,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":105,"com.google.gson.functional.MapTest.testHashMapDeserialization":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":39,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":107,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":47,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":61,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":10,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":51,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":52,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":82},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:520","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf1098a-3f48-11e6-bb0a-6584dd9a0dee","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (indexOfSubstring == indexOfSubstring) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"indexOfSubstring","com.google.gson.stream.JsonScope.DANGLING_NAME":"indexOfSubstring"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl"},"failures":[],"tindex":"0bf17ebb-3f48-11e6-bb0a-d58e36b9772c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if ((value == null) || (value.isJsonNull())) {\n        out.nullValue();\n    } else if (value.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            out.value(primitive.getAsBoolean());\n        } else {\n            out.value(primitive.getAsString());\n        }\n    } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n            write(out, e);\n        }\n        out.endArray();\n    } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n            out.name(e.getKey());\n            write(out, e.getValue());\n        }\n        out.endObject();\n    } else {\n        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf1a5cc-3f48-11e6-bb0a-09d9503b6096","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf1a5cd-3f48-11e6-bb0a-abfdbc5d5456","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0bf1a5ce-3f48-11e6-bb0a-419f392b83b5","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf1ccdf-3f48-11e6-bb0a-db7cdc1b5785","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1291","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf1f3f0-3f48-11e6-bb0a-01ef2dfa14e6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        {\n            if (targetSize != targetSize) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n                    int = treeCapacity - targetSize;\n                    int = 0;\n                    int = 0;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"targetSize","limit":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf1f3f1-3f48-11e6-bb0a-6b09e9d831fd","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc == src) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"src","typeOfT":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"tindex":"0bf1f3f2-3f48-11e6-bb0a-ab580577ad77","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"keyType"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:271","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf21b03-3f48-11e6-bb0a-69ab62003959","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root != null) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:279","type":"CtBinaryOperatorImpl"},"failures":[59,60,61,62],"tindex":"0bf24214-3f48-11e6-bb0a-c3ad4f80b321","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf26925-3f48-11e6-bb0a-8937c86b7df0","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf26926-3f48-11e6-bb0a-2519884f5247","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"contextRawType","toResolve":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf26927-3f48-11e6-bb0a-f3053efbb483","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0bf29038-3f48-11e6-bb0a-3d54427adc95","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0bf29039-3f48-11e6-bb0a-5f8636d48277","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[],"tindex":"0bf2903a-3f48-11e6-bb0a-e98ce8e164af","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[38],"tindex":"0bf2b74b-3f48-11e6-bb0a-c51b60b34635","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[63,64,65,66,67,68,69,70,71,72,73],"tindex":"0bf2de5c-3f48-11e6-bb0a-03f1e275a57a","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (since != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (isValidSince(since)) && (isValidUntil(until));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"since"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:549","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf2de5d-3f48-11e6-bb0a-95e885dfe7d7","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if (count == count) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new java.lang.AssertionError();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonScope.CLOSED":"count","peekStack":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf2de5e-3f48-11e6-bb0a-c9d0f3bc194b","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:409","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf2de5f-3f48-11e6-bb0a-37a15b788819","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root != null) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotLeft":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl"},"failures":[],"tindex":"0bf30570-3f48-11e6-bb0a-93da9c6a43e6","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:56","type":"CtUnaryOperatorImpl"},"failures":[74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,26,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135],"tindex":"0bf30571-3f48-11e6-bb0a-051d6602e467","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (!(array instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeTypeAdapter":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:902","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf30572-3f48-11e6-bb0a-631143e930a2","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (start == start) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"start","com.google.gson.stream.JsonReader.PEEKED_NONE":"start"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0bf32c83-3f48-11e6-bb0a-2b781b5fe235","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf32c84-3f48-11e6-bb0a-d3006cd7aca9","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:520","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf32c85-3f48-11e6-bb0a-3fbcc3794611","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        {\n            if (targetSize != targetSize) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n                    int = treeCapacity - targetSize;\n                    int = 0;\n                    int = 0;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"targetSize","com.google.gson.stream.JsonScope.DANGLING_NAME":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf35396-3f48-11e6-bb0a-bbe551be0dcf","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[64,65,66,136,67,68,137,69,72,73],"tindex":"0bf35397-3f48-11e6-bb0a-c1587705e7f0","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1113","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf35398-3f48-11e6-bb0a-c72f949ce095","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (dateStyle == '\\\\') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[138,99,139,140,141,100,142,143,144,145,146,147,109,148,149,150,151,121],"tindex":"0bf35399-3f48-11e6-bb0a-ff1ca017d94f","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf37aaa-3f48-11e6-bb0a-d3354a600ac2","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:857","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf37aab-3f48-11e6-bb0a-71315bbbb75b","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (length == offset) {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"length","com.google.gson.stream.JsonReader.PEEKED_TRUE":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf37aac-3f48-11e6-bb0a-fb1ebf36ac8b","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[],"tindex":"0bf37aad-3f48-11e6-bb0a-0d36121b20e7","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0bf3a1be-3f48-11e6-bb0a-a5c21fe99ac2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:520","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf3a1bf-3f48-11e6-bb0a-e9b91f777941","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if ((newTop == newTop) || (p == newTop)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (newTop == newTop) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((int) == (int[].int)) {\n                        int[] int[] = new int[(int) * 2];\n                        int[] int[] = new int[(int) * 2];\n                        java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                        java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                        java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                        java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                        int[] = newStack;\n                        int[] = newPathIndices;\n                        java.lang.String[] = newPathNames;\n                    } \n                    int[][((int)++)] = newTop;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"newTop","com.google.gson.stream.JsonScope.DANGLING_NAME":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1256","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0bf3a1c0-3f48-11e6-bb0a-0f193aee8f40","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if ((newTop == newTop) || (p == newTop)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (newTop == newTop) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467348196745/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((int) == (int[].int)) {\n                        int[] int[] = new int[(int) * 2];\n                        int[] int[] = new int[(int) * 2];\n                        java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                        java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                        java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                        java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                        int[] = newStack;\n                        int[] = newPathIndices;\n                        java.lang.String[] = newPathNames;\n                    } \n                    int[][((int)++)] = newTop;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"newTop","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":39,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
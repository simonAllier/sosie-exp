{"failureDictionary":{"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":6,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":48,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":2,"com.google.gson.JsonObjectTest.testDeepCopy":16,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":54,"com.google.gson.JsonParserTest.testParseString":9,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":49,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":30,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":46,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":3,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":19,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":26,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":0,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":18,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":50,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":35,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":27,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":12,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":4,"com.google.gson.JsonObjectTest.testAddingStringProperties":17,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":14,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":52,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":25,"com.google.gson.functional.MapTest.testStringKeyDeserialization":33,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":44,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":34,"com.google.gson.JsonParserTest.testParseReader":8,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":10,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":38,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":32,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":15,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":5,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":22,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":40,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":42,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":20,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":23,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":28,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":24,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":31,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":53,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":37,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":39,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":13,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":47,"com.google.gson.functional.MapTest.testMapDeserialization":29,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":7,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":11,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":1,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":41,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":43,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":51,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":45,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":36},"transformations":[{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"c50ee2ba-3e58-11e6-948b-c1e41e27ffab","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if (instance instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016511/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"c50f30db-3e58-11e6-948b-55a9016cc788","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"c50f57ec-3e58-11e6-948b-5750f5c34848","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"tindex":"c50f57ed-3e58-11e6-948b-3b6a01b65a95","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == null) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016511/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1439","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\r'"},"failures":[],"tindex":"c50f7efe-3e58-11e6-948b-05955c061981","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if (quote == '\\r') {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016511/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"c50fa60f-3e58-11e6-948b-771bb9c798ae","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016511/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"c50fa610-3e58-11e6-948b-cd164fd20635","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016511/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":7,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
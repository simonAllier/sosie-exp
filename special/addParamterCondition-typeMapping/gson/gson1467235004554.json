{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":270,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":150,"com.google.gson.functional.StringTest.testStringValueDeserialization":149,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":418,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":51,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":117,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":700,"com.google.gson.stream.JsonWriterTest.testRepeatedName":415,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":636,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":272,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":230,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":356,"com.google.gson.MixedStreamTest.testWriteLenient":427,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":504,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":624,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":303,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":244,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":210,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":401,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":54,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":515,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":538,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":349,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":39,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":90,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":185,"com.google.gson.functional.ObjectTest.testSingletonLists":208,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":501,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":34,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":519,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":577,"com.google.gson.stream.JsonWriterTest.testStrings":424,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":71,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":344,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":127,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":219,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":1,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":56,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":25,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":442,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":159,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":85,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":52,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":569,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":684,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":373,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":31,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":600,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":261,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":201,"com.google.gson.functional.EnumTest.testEnumCaseMapping":140,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":431,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":518,"com.google.gson.functional.JsonTreeTest.testToJsonTree":355,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":630,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":128,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":333,"com.google.gson.stream.JsonWriterTest.testNulls":413,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":584,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":628,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":105,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":339,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":439,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":164,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":113,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":540,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":593,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":564,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":232,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":157,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":598,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":216,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":430,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":466,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":637,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":558,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":259,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":310,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":222,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":429,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":516,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":510,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":61,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":173,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":60,"com.google.gson.JsonParserTest.testParseString":589,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":126,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":440,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":458,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":607,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":104,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":391,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":531,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":116,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":49,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":197,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":357,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":586,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":112,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":179,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":578,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":65,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":554,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":459,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":661,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":50,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":390,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":582,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":214,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":297,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":406,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":687,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":203,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":314,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":604,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":694,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":183,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":326,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":336,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":13,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":66,"com.google.gson.stream.JsonWriterTest.testEmptyArray":671,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":205,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":658,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":503,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":498,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":309,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":668,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":235,"com.google.gson.functional.CollectionTest.testSetDeserialization":252,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":350,"com.google.gson.functional.EnumTest.testEnumSet":133,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":265,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":385,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":46,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":337,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":108,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":546,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":387,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":275,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":335,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":650,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":12,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":57,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":683,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":256,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":345,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":462,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":695,"com.google.gson.functional.MapTest.testHashMapDeserialization":192,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":634,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":121,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":21,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":434,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":269,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":315,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":363,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":659,"com.google.gson.functional.MapTest.testSortedMap":202,"com.google.gson.functional.MapTest.testMapSerialization":550,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":294,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":599,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":48,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":238,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":166,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":398,"com.google.gson.functional.MapTest.testSerializeMaps":545,"com.google.gson.functional.MapTest.testComplexKeysSerialization":377,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":264,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":618,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":665,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":536,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":139,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":234,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":371,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":596,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":81,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":512,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":138,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":404,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":619,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":273,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":224,"com.google.gson.functional.MapTest.testStringKeyDeserialization":204,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":168,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":476,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":469,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":38,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":555,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":517,"com.google.gson.functional.PrettyPrintingTest.testMap":570,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":635,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":560,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":131,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":487,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":0,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":169,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":441,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":152,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":495,"com.google.gson.functional.CollectionTest.testQueueSerialization":561,"com.google.gson.functional.MapTest.testMapSerializationEmpty":613,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":420,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":646,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":688,"com.google.gson.functional.MapTest.testMapOfMapSerialization":549,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":606,"com.google.gson.JavaSerializationTest.testMapIsSerializable":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":114,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":250,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":673,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":20,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":455,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":480,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":151,"com.google.gson.functional.FieldNamingTest.testIdentity":399,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":67,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":15,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":677,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":225,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":274,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":354,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":381,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":601,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":674,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":32,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":6,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":520,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":602,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":206,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":123,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":110,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":509,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":190,"com.google.gson.functional.MapTest.testMapSubclassSerialization":544,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":608,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":96,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":142,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":266,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":43,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":277,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":351,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":101,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":358,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":657,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":130,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":89,"com.google.gson.functional.EnumTest.testEnumSubclass":136,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":456,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":2,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":218,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":446,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":307,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":53,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":311,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":78,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":631,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":380,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":622,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":678,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":644,"com.google.gson.stream.JsonWriterTest.testTwoNames":672,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":207,"com.google.gson.stream.JsonWriterTest.testNullName":675,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":324,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":163,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":407,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":595,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":647,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":666,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":76,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":452,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":680,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":506,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":209,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":191,"com.google.gson.MixedStreamTest.testWriteNulls":426,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":533,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":676,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":660,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":529,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":88,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":233,"com.google.gson.CommentsTest.testParseComments":267,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":187,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":382,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":477,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":167,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":289,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":651,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":237,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":521,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":551,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":697,"com.google.gson.MixedStreamTest.testReadInvalidState":625,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":347,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":338,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":507,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":239,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":583,"com.google.gson.JsonParserTest.testParseMixedArray":690,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":37,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":620,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":170,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":286,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":626,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":605,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":18,"com.google.gson.JsonArrayTest.testRemove":703,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":115,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":463,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":162,"com.google.gson.functional.MapTest.testMapDeserialization":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":497,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":573,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":543,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":184,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":576,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":331,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":547,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":368,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":539,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":82,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":587,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":137,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":340,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":392,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":557,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":316,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":147,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":489,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":94,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":322,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":379,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":403,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":611,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":616,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":508,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":629,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":70,"com.google.gson.functional.PrimitiveTest.testShortSerialization":467,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":541,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":55,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":263,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":44,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":594,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":460,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":109,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":395,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":135,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":245,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":141,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":591,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":194,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":41,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":470,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":568,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":359,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":691,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":122,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":189,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":281,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":580,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":473,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":654,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":436,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":609,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":68,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":84,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":393,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":484,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":581,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":58,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":180,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":312,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":645,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":228,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":213,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":514,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":318,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":574,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":106,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":400,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":144,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":69,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":366,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":500,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":623,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":639,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":699,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":492,"com.google.gson.stream.JsonWriterTest.testNullStringValue":411,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":119,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":246,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":329,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":632,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":59,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":454,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":471,"com.google.gson.stream.JsonWriterTest.testEmptyObject":682,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":292,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":134,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":367,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":271,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":240,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":212,"com.google.gson.functional.MapTest.testGeneralMapField":376,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":527,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":656,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":145,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":308,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":505,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":612,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":98,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":172,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":447,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":461,"com.google.gson.MixedStreamTest.testReadMixedStreamed":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":107,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":198,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":450,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":7,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":177,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":566,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":685,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":182,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":648,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":262,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":669,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":3,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":341,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":199,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":482,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":193,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":472,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":478,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":176,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":300,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":414,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":643,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":597,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":499,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":696,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":160,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":97,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":249,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":188,"com.google.gson.functional.ObjectTest.testNestedDeserialization":229,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":481,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":86,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":614,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":22,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":323,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":260,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":655,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":288,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":74,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":153,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":200,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":334,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":465,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":317,"com.google.gson.JavaSerializationTest.testListIsSerializable":5,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":306,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":360,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":567,"com.google.gson.functional.ObjectTest.testNullSerialization":556,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":320,"com.google.gson.stream.JsonWriterTest.testDoubles":421,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":73,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":195,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":375,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":603,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":165,"com.google.gson.functional.MapTest.testInterfaceTypeMap":374,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":686,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":146,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":328,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":585,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":633,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":24,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":346,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":80,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":610,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":485,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":258,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":640,"com.google.gson.MixedStreamTest.testWriteClosed":279,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":23,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":563,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":129,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":383,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":701,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":91,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":327,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":291,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":287,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":394,"com.google.gson.stream.JsonWriterTest.testLongs":412,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":343,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":332,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":384,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":562,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":27,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":649,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":301,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":79,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":565,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":120,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":16,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":17,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":64,"com.google.gson.stream.JsonWriterTest.testNumbers":423,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":449,"com.google.gson.JsonNullTest.testEqualsAndHashcode":667,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":102,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":236,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":525,"com.google.gson.functional.CollectionTest.testQueueDeserialization":255,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":290,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":692,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":47,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":451,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":156,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":433,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":125,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":223,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":372,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":681,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":494,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":174,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":227,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":559,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":276,"com.google.gson.functional.MapTest.testRawMapSerialization":553,"com.google.gson.JsonParserTest.testParseReader":588,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":118,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":437,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":77,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":388,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":243,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":542,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":615,"com.google.gson.functional.PrimitiveTest.testByteSerialization":464,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":511,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":528,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":617,"com.google.gson.ObjectTypeAdapterTest.testSerialize":409,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":444,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":171,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":638,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":670,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":575,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":304,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":534,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":396,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":92,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":154,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":621,"com.google.gson.functional.MapTest.testMapWithQuotes":548,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":488,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":155,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":474,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":663,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":72,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":148,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":653,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":486,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":348,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":679,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":186,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":87,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":226,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":405,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":217,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":491,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":215,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":103,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":299,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":493,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":652,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":513,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":251,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":124,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":483,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":526,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":319,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":283,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":29,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":693,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":143,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":627,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":132,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":33,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":95,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":702,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":435,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":479,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":220,"com.google.gson.functional.ObjectTest.testNestedSerialization":389,"com.google.gson.internal.LinkedTreeMapTest.testClear":592,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":293,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":158,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":448,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":537,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":175,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":552,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":241,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":364,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":8,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":428,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":425,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":14,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":386,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":62,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":330,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":111,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":432,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":641,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":698,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":100,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":221,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":26,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":438,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":523,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":532,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":30,"com.google.gson.functional.CollectionTest.testSetSerialization":402,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":313,"com.google.gson.functional.StringTest.testStringValueSerialization":524,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":571,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":302,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":75,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":247,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":285,"com.google.gson.MixedStreamTest.testWriteInvalidState":278,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":662,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":689,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":642,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":42,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":362,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":296,"com.google.gson.stream.JsonWriterTest.testBooleans":410,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":490,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":397,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":590,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":231,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":268,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":284,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":257,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":579,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":502,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":445,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":664,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":417,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":9,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":530},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"c7ffe770-3e3e-11e6-9632-2fa6580d1500","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267],"tindex":"c8003591-3e3e-11e6-9632-9b7009477b32","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj instanceof java.lang.reflect.TypeVariable) {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[268],"tindex":"c8005ca2-3e3e-11e6-9632-7b9861ef5e4e","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[269,270,271,272,273,76,274],"tindex":"c8005ca3-3e3e-11e6-9632-9b7a549f7472","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (deserialize) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"deserialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[275,276,277,278,279,280,281,10,11,12,15,282,283,284,17,285,18,19,20,286,287,288,289,290,291,292,293,269,270,294,22,295,23,271,296,297,298,25,26,299,300,27,28,301,302,303,304,305,306,307,308,30,309,310,58,65,68,311,312,313,272,273,75,76,274,314,315,77,316,317,318,319,320,78,79,321,80,322,81,82,323,324,325,326,327,328,329,330,83,84,331,332,333,85,87,88,334,89,335,336,337,90,91,92,93,94,338,96,339,100,340,106,109,111,341,342,343,130,344,345,346,139,141,142,143,347,348,349,350,351,148,352,353,354,355,356,357,358,359,360,361,167,362,171,173,174,176,363,177,178,179,364,180,181,182,365,183,366,184,185,367,368,187,369,370,371,189,372,373,374,375,376,377,378,379,206,207,380,381,208,209,210,382,211,212,383,213,214,384,215,385,216,386,218,219,387,220,388,389,221,390,222,223,391,225,392,393,226,394,227,228,229,230,231,232,233,234,235,236,238,239,240,241,243,395,396,397,398,399,244,245,400,252,401,402,403,404,405,406,407,408,409],"tindex":"c80083b4-3e3e-11e6-9632-495b6121c7ef","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[193],"tindex":"c800aac5-3e3e-11e6-9632-5995e79e3bb2","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n                    return node != null ? node.V : null;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"c800aac6-3e3e-11e6-9632-b13c13174a1c","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c800aac7-3e3e-11e6-9632-4dc3fcdbb885","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"c800aac8-3e3e-11e6-9632-3fa98e13d0d9","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((typeOfSrc instanceof java.lang.reflect.ParameterizedType) && (!(typeOfSrc.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeOfSrc.getRawType().equals(src.getRawType())) {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfSrc","to":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[],"tindex":"c800d1d9-3e3e-11e6-9632-6770ff586df8","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"contextRawType","toResolve":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"c800d1da-3e3e-11e6-9632-33c8b3cf7441","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key != null) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"c800f8eb-3e3e-11e6-9632-a3c723079fbe","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"c800f8ec-3e3e-11e6-9632-39ae4f4d22c3","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"keyType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"c800f8ed-3e3e-11e6-9632-ebc2b67ca3f7","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c800f8ee-3e3e-11e6-9632-97341db17cb3","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"c8011fff-3e3e-11e6-9632-db4dcb2b2acd","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Streams:50","type":"CtVariableReadImpl","sourcecode":"isEmpty"},"failures":[410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,0,1,2,275,6,7,8,276,277,426,427,428,429,430,431,432,15,282,17,285,18,19,20,286,287,288,289,292,293,269,433,294,295,296,297,434,435,24,436,437,438,439,440,441,442,443,298,299,300,301,302,444,445,446,447,37,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,311,476,312,313,477,478,479,480,72,481,482,272,273,274,315,77,316,318,319,320,321,322,326,327,328,331,332,85,86,87,483,334,89,335,336,337,91,92,93,338,339,484,98,485,486,487,488,103,105,489,490,109,491,492,493,494,495,496,497,498,499,341,115,500,116,501,120,502,503,504,505,124,506,125,507,343,508,509,510,511,344,512,513,345,133,134,135,136,346,514,140,515,141,142,143,347,516,348,349,350,144,145,517,146,351,147,148,353,518,150,519,151,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,361,362,535,536,171,537,172,173,174,175,176,363,178,179,364,538,365,366,539,540,367,368,369,541,370,542,371,543,544,545,546,547,372,548,549,550,551,374,375,376,552,553,377,554,555,378,379,380,381,208,382,383,384,385,556,386,557,558,387,388,389,391,392,393,394,231,232,233,234,236,239,241,395,396,397,398,399,244,559,245,560,561,562,563,564,400,565,401,566,402,567,568,569,570,403,404,571,572,573,405,256,257,258,259,260,261,262,263,574,406,575,576,407,408,409,577,578,579,580,581],"tindex":"c8014710-3e3e-11e6-9632-399613fa7201","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (root) {\n                {\n                    switch (peek()) {\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            if (!(boolean)) {\n                                throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                            } \n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            if ((!(boolean)) && (!root)) {\n                                throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                            } \n                            replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                            break;\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                            newline();\n                            break;\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            java.io.Writer.append(',');\n                            newline();\n                            break;\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            java.io.Writer.append(java.lang.String);\n                            replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                            break;\n                        default :\n                            throw new java.lang.IllegalStateException(\"Nesting problem.\");\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"c8014711-3e3e-11e6-9632-df408cb2953a","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1364","type":"CtBinaryOperatorImpl","sourcecode":"p == l"},"failures":[],"tindex":"c8016e22-3e3e-11e6-9632-d1bf7109da8b","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (length == length) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"length","l":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"c8016e23-3e3e-11e6-9632-e952438f9d16","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[],"tindex":"c8016e24-3e3e-11e6-9632-198ef59939ef","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (key == value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"value","rawSupertype":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[431,432,17,285,18,19,20,435,438,302,303,309,448,450,460,468,470,472,274,329,85,87,334,335,91,92,521,525,526,527,582,528,529,530,531,532,533,534,361,362,535,536,172,175,539,545,376,381,382,386,387,388,569,404,571,572,573],"tindex":"c8019535-3e3e-11e6-9632-07fda1cde114","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c8019536-3e3e-11e6-9632-3d819b35cfce","method":{"position":"com.google.gson.internal.bind.TypeAdapters:509","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.UUID value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[302,347,348,349,350,527,361,545,386,559,400,401,402,583,409,577],"tindex":"c8019537-3e3e-11e6-9632-171f04e0acca","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c8019538-3e3e-11e6-9632-4525d8272e46","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[476,312,479,356,357,358,360],"tindex":"c8019539-3e3e-11e6-9632-25a23b232e68","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c801bc4a-3e3e-11e6-9632-0dac5b974076","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion > (version)"},"failures":[],"tindex":"c801bc4b-3e3e-11e6-9632-d5abb13efb0b","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if (value > value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[4,584,585,290,291,270,271,586,587,444,445,66,479,324,325,329,330,333,85,99,490,344,142,148,352,353,354,355,356,357,358,359,360,363,178,179,196,199,201,204,240,242,243,254,588,589,406,590,591,592,593,594,595,596,580,597,598,599],"tindex":"c801bc4c-3e3e-11e6-9632-37e2d2e9bb0c","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            if (!insert) {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl","sourcecode":"(type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))"},"failures":[],"tindex":"c801e35d-3e3e-11e6-9632-557e1c50f1b9","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((typeOfSrc instanceof java.lang.reflect.ParameterizedType) && (!(typeOfSrc.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeOfSrc.getRawType().equals(src.getRawType())) {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"typeOfSrc","type":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[0,1,2,275,600,6,7,8,276,277,426,278,427,428,279,429,430,431,432,15,282,283,17,285,18,19,20,286,287,288,289,290,291,292,293,433,294,296,297,434,24,443,298,299,300,301,302,445,303,304,601,305,306,307,602,308,309,310,446,603,447,37,604,448,449,605,450,451,606,452,607,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,608,469,470,471,472,473,474,475,311,476,312,313,477,478,479,480,72,481,482,272,273,609,274,314,315,77,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,85,86,87,483,334,89,335,336,337,91,92,93,338,339,484,98,485,486,487,488,103,105,489,490,109,491,492,493,494,495,496,497,498,499,341,115,500,116,501,120,502,503,504,505,342,124,506,125,507,343,508,509,510,511,344,512,345,133,134,135,136,346,514,140,515,141,142,143,347,516,348,349,350,144,145,517,146,351,147,610,148,352,353,354,355,518,150,519,151,520,521,522,523,524,525,526,527,582,528,529,530,531,533,534,361,362,535,536,171,537,172,173,174,175,176,363,178,179,364,538,365,539,540,371,543,544,545,546,547,548,549,550,611,551,374,612,375,376,553,377,613,554,555,378,379,380,381,208,382,383,384,385,556,386,557,558,387,388,389,614,390,391,392,393,394,231,232,233,234,236,239,241,395,396,397,398,399,244,559,245,560,561,562,563,564,400,565,401,566,402,567,568,569,570,403,404,571,572,573,405,256,257,258,259,260,261,262,263,574,406,615,616,617,407,408,618],"tindex":"c801e35e-3e3e-11e6-9632-bfa279d7874f","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (!serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c8020a6f-3e3e-11e6-9632-d7c4554f3e64","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"c8020a70-3e3e-11e6-9632-930e2a310546","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"c8020a71-3e3e-11e6-9632-7d824130a523","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (root) {\n                {\n                    switch (peek()) {\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            if (!(boolean)) {\n                                throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                            } \n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            if ((!(boolean)) && (!root)) {\n                                throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                            } \n                            replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                            break;\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                            newline();\n                            break;\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            java.io.Writer.append(',');\n                            newline();\n                            break;\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            java.io.Writer.append(java.lang.String);\n                            replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                            break;\n                        default :\n                            throw new java.lang.IllegalStateException(\"Nesting problem.\");\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:62","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"c8023182-3e3e-11e6-9632-451523611377","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if ((o.peek()) == o) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"o","com.google.gson.stream.JsonToken.NULL":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:409","type":"CtBinaryOperatorImpl","sourcecode":"pivotRight != null"},"failures":[619,359,596],"tindex":"c8023183-3e3e-11e6-9632-2bae92dbef87","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[290,291,270,303,304,305,306,323,324,325,329,330,333,85,352,353,354,355,363,178,179,378,615,618,580,597,581],"tindex":"c8023184-3e3e-11e6-9632-5b53fd4cbab3","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:818","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"c8025895-3e3e-11e6-9632-d54928c681b1","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == style) {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"style","com.google.gson.stream.JsonReader.PEEKED_NONE":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:279","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[620],"tindex":"c8025896-3e3e-11e6-9632-dd8bff9c07ba","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c8025897-3e3e-11e6-9632-27d6f81875e2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:491","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.InetAddress value) throws java.io.IOException {\n    out.value((value == null ? null : value.getHostAddress()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"c8025898-3e3e-11e6-9632-93cf50624871","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:536","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_DOCUMENT)"},"failures":[],"tindex":"c8025899-3e3e-11e6-9632-6de343fef84e","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index == index) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"index","com.google.gson.stream.JsonScope.EMPTY_DOCUMENT":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"c8027faa-3e3e-11e6-9632-cdc08a350b67","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if ((json != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c8027fab-3e3e-11e6-9632-e96530dc0174","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"c8027fac-3e3e-11e6-9632-090a6027e435","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"c8027fad-3e3e-11e6-9632-93aa22b21c95","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"c8027fae-3e3e-11e6-9632-b33400e78e5c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:163","type":"CtFieldReadImpl","sourcecode":"requireExpose"},"failures":[0,1,2,3,4,5,621,275,600,6,7,622,623,8,624,276,625,277,278,427,428,279,280,281,626,627,628,431,432,9,10,11,12,13,14,15,282,16,283,284,17,285,18,19,20,286,287,288,289,290,291,292,293,269,433,270,294,21,22,295,23,271,296,297,434,443,298,25,26,299,300,27,28,301,29,302,303,304,601,305,306,307,602,308,30,309,310,629,630,31,446,32,603,631,632,633,33,34,447,35,36,37,634,635,636,637,638,639,38,604,448,640,641,39,40,642,449,41,605,450,643,42,451,43,44,606,45,452,607,644,645,453,454,46,646,647,455,648,47,48,649,49,50,51,52,456,650,457,651,458,459,53,54,460,55,56,461,57,462,652,58,59,463,464,465,466,467,468,608,60,61,653,469,62,470,654,63,655,471,472,656,473,64,657,474,65,475,66,67,68,311,476,312,69,313,477,478,70,479,71,480,72,481,73,482,272,74,273,75,609,76,274,314,315,77,316,317,318,319,320,78,79,321,80,322,81,82,323,324,325,326,327,328,329,330,83,84,331,332,333,85,86,87,88,483,334,89,335,336,337,90,91,92,93,94,338,95,96,339,97,484,98,485,100,340,101,487,102,103,105,489,106,107,108,109,110,491,492,493,494,495,111,496,112,497,498,113,499,114,341,115,500,116,501,118,119,120,121,503,122,504,505,123,342,124,506,125,507,343,126,127,508,510,129,658,511,130,344,131,132,659,345,133,134,135,136,137,138,346,139,514,140,515,141,142,143,347,516,348,349,350,144,145,517,146,351,147,610,148,352,353,354,355,149,518,150,519,151,520,152,153,521,154,522,155,156,157,523,158,159,524,356,357,358,359,360,660,160,661,525,526,662,527,582,528,529,530,161,162,531,532,533,163,164,165,534,166,361,167,362,168,535,169,536,170,171,537,172,173,174,175,176,363,663,177,178,179,364,180,538,181,182,365,183,366,184,185,539,186,540,367,368,187,369,541,370,542,188,371,189,190,543,191,192,193,544,545,194,195,546,664,547,196,372,197,198,199,200,548,549,550,201,373,611,551,202,374,612,375,376,552,553,203,377,613,204,554,665,205,555,378,379,206,207,380,381,208,209,210,382,211,212,383,213,214,384,215,666,385,216,386,218,557,219,558,387,220,388,389,614,221,390,222,223,224,391,225,392,393,226,394,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,395,396,397,398,399,244,559,245,560,246,247,248,561,562,563,564,400,249,250,565,251,252,401,566,253,402,567,254,568,255,569,570,403,404,571,572,573,405,256,257,258,259,260,261,262,263,264,265,574,266,406,267,615,616,617,407,408,409,577],"tindex":"c802a6bf-3e3e-11e6-9632-c9d15456df28","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requireExpose":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"c802a6c0-3e3e-11e6-9632-eb38624419c9","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[667,584,117,668,669],"tindex":"c802cdd1-3e3e-11e6-9632-7df5cb3dbe25","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (other instanceof java.lang.Class) {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"other"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[670],"tindex":"c802cdd2-3e3e-11e6-9632-5d1c7898b5d3","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls.isAssignableFrom(cls)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"cls","rawSupertype":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"c802cdd3-3e3e-11e6-9632-e11582d16230","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"c802cdd4-3e3e-11e6-9632-bd1250eee05c","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c802cdd5-3e3e-11e6-9632-8f8f34b69e6f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[427,455,458,459,465,469,471],"tindex":"c802f4e6-3e3e-11e6-9632-b1d4efd7d382","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"c802f4e7-3e3e-11e6-9632-3bfdcbc5b363","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c802f4e8-3e3e-11e6-9632-9b81c7fcbeba","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c802f4e9-3e3e-11e6-9632-a5a15918097d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"c802f4ea-3e3e-11e6-9632-9fe3838ba093","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"c802f4eb-3e3e-11e6-9632-415e1fcf7684","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"c8031bfc-3e3e-11e6-9632-cd064c7783b5","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1291","type":"CtBinaryOperatorImpl","sourcecode":"(limit) != (pos)"},"failures":[671,672,673,410,411,674,412,413,675,414,415,676,416,677,678,679,680,417,418,419,681,682,683,684,685,686,687,420,421,688,423,424,425,275,276,277,278,427,428,279,429,430,431,432,15,282,283,17,285,18,19,20,286,287,288,289,292,293,269,294,295,296,297,435,24,436,437,438,439,440,441,442,298,299,300,301,302,444,445,307,308,309,310,447,448,450,460,468,470,472,474,475,311,476,312,313,477,479,481,272,273,609,274,314,315,77,316,318,319,320,321,322,326,327,328,331,332,85,87,483,334,89,335,336,337,91,92,93,338,339,486,103,490,492,495,499,341,500,116,503,505,342,343,344,345,133,134,135,136,346,514,141,142,143,347,516,348,349,350,144,351,148,353,521,525,526,527,582,528,529,530,531,532,533,534,361,362,535,536,171,537,172,173,174,175,176,363,178,179,364,365,366,539,367,368,369,541,370,371,543,544,545,546,547,372,548,549,550,611,551,374,612,375,376,552,553,377,613,554,555,378,379,380,381,208,382,383,384,689,385,386,387,388,389,614,390,391,392,393,394,231,232,233,234,236,239,241,395,396,397,398,399,244,559,245,560,561,562,563,564,400,565,401,566,402,567,569,570,403,404,571,572,573,405,406,690,407,408,583,409,577,618,578,579,580,597,691,581],"tindex":"c8031bfd-3e3e-11e6-9632-0b9fc680f70e","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty != empty) {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"empty","limit":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[489],"tindex":"c8031bfe-3e3e-11e6-9632-af465f8efb0e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value((value == null ? null : value.toString()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:51","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"c803430f-3e3e-11e6-9632-4142b182745c","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if ((o.peek()) == o) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"o","com.google.gson.stream.JsonToken.NULL":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[275,276,277,278,279,280,281,10,11,12,15,282,283,284,17,285,18,19,20,286,287,288,289,290,291,292,293,269,270,294,22,295,23,271,296,297,298,25,26,299,300,27,28,301,302,303,304,305,306,307,308,30,309,310,447,58,65,68,311,312,313,272,74,273,75,609,76,274,314,315,77,316,317,318,319,320,78,79,321,80,322,81,82,323,324,325,326,327,328,329,330,83,84,331,332,333,85,87,88,334,89,335,336,337,90,91,92,93,94,338,96,339,100,340,106,109,111,341,342,343,130,344,345,346,139,141,142,143,347,348,349,350,351,148,352,353,354,355,356,357,358,359,360,361,167,362,171,173,174,176,363,177,178,179,364,180,181,182,365,183,366,184,185,367,368,187,369,370,371,189,372,373,374,375,376,377,378,379,206,207,380,381,208,209,210,382,211,212,383,213,214,384,215,385,216,386,218,219,387,220,388,389,614,221,390,222,223,224,391,225,392,393,226,394,227,228,229,230,231,232,233,234,235,236,238,239,240,241,243,395,396,397,398,399,244,245,400,252,401,402,403,404,405,406,407,408,409],"tindex":"c8034310-3e3e-11e6-9632-2bb871baa4b1","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isAssignableFrom(raw)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"raw","rawSupertype":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl","sourcecode":"!skipPastFound"},"failures":[],"tindex":"c8036921-3e3e-11e6-9632-6f8b750c0f9b","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            if (!insert) {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"c8036922-3e3e-11e6-9632-4139eff61586","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"c8039033-3e3e-11e6-9632-43c8c3d2176e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[620,692,693,694,695,696],"tindex":"c8039034-3e3e-11e6-9632-bd9ebaa03b1a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"key","java.sql.Timestamp.class":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[],"tindex":"c8039035-3e3e-11e6-9632-b16339043f8d","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (!(subclass.isInterface())) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:401","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_END_OBJECT)"},"failures":[0,1,2,621,275,600,6,7,427,428,431,432,9,10,11,12,13,16,269,433,270,294,21,22,295,23,271,296,297,434,443,298,25,26,299,300,27,28,301,29,444,303,304,601,305,306,602,31,449,455,458,459,462,465,469,471,474,65,475,66,67,68,311,476,312,69,313,477,478,70,479,71,480,72,481,272,74,273,75,609,76,274,314,315,316,317,318,319,320,78,79,80,322,81,82,85,86,697,483,90,94,95,98,103,105,491,499,115,500,120,122,504,124,125,507,126,127,508,131,513,135,145,517,146,532,171,175,176,363,663,177,178,179,364,180,538,181,182,365,183,366,184,539,186,540,367,368,369,541,370,542,188,371,189,543,191,545,372,374,376,552,378,689,558,230,231,233,237,238,239,240,241,242,243,395,396,397,398,399,568,569,570,403,404,571,572,573,405,256,257,258,259,260,261,262,263,407,408,698],"tindex":"c8039036-3e3e-11e6-9632-1957a779b415","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (timeStyle == timeStyle) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"timeStyle","com.google.gson.stream.JsonReader.PEEKED_END_OBJECT":"timeStyle"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"c803b747-3e3e-11e6-9632-fb7b6f348b53","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[0,1,2,275,600,6,7,8,431,432,15,282,283,17,285,18,19,20,286,287,288,289,292,293,269,433,294,295,296,297,434,24,443,298,299,300,301,302,307,602,308,309,310,446,603,447,37,604,448,449,605,450,451,606,452,607,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,608,469,470,471,472,473,474,475,311,476,312,313,477,478,479,480,72,481,482,272,273,609,274,314,315,77,316,317,318,319,320,321,322,326,327,328,331,332,85,86,87,483,334,89,335,336,337,91,92,93,338,484,98,485,486,487,488,103,105,489,490,491,492,493,494,495,496,497,498,499,341,115,500,116,501,120,502,503,504,505,342,124,506,125,507,343,508,510,511,344,133,134,135,136,346,514,140,515,141,142,143,347,516,348,349,350,144,145,517,146,351,147,610,148,353,518,150,519,151,520,521,522,523,524,525,526,527,582,528,529,530,531,532,533,534,361,362,535,536,171,537,172,173,174,175,176,363,178,179,364,538,365,366,539,540,367,368,369,541,370,371,543,544,545,546,547,372,548,549,550,611,551,374,612,375,376,552,553,377,613,554,555,378,379,380,381,208,382,383,384,385,386,557,558,387,388,389,614,390,391,392,393,394,231,232,233,234,236,239,241,395,396,397,398,399,244,559,245,560,561,562,563,564,400,565,401,566,402,567,568,569,570,403,404,571,572,573,405,256,257,258,259,260,261,262,263,574,406,407,408],"tindex":"c803b748-3e3e-11e6-9632-4ddc552511d5","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"c803b749-3e3e-11e6-9632-595046da3fed","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c803b74a-3e3e-11e6-9632-9d84c9a0715b","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"c803de5b-3e3e-11e6-9632-977b7c2e1fc7","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"c803de5c-3e3e-11e6-9632-75af6b7d9e4c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"c803de5d-3e3e-11e6-9632-a1af916ea5ea","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[620,692,699,693,694,700,701,695,696,702],"tindex":"c803de5e-3e3e-11e6-9632-d37a45214799","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"c804056f-3e3e-11e6-9632-3b6676cd346a","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if (!(instance instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c8040570-3e3e-11e6-9632-01cfc4c3db1a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"c8042c81-3e3e-11e6-9632-29f047170df2","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[703],"tindex":"c8042c82-3e3e-11e6-9632-41ee28f54b14","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"c8042c83-3e3e-11e6-9632-a9d888e23f5a","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"c8042c84-3e3e-11e6-9632-7b90cd272577","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"c8042c85-3e3e-11e6-9632-1714cd2e0a20","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c8042c86-3e3e-11e6-9632-b540963314df","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"c8042c87-3e3e-11e6-9632-1d64412ac973","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c8045398-3e3e-11e6-9632-13499e56ae63","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:797","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME)"},"failures":[],"tindex":"c8045399-3e3e-11e6-9632-33494fba45c7","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if (topOfStack == topOfStack) {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"topOfStack","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME":"topOfStack"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"c804539a-3e3e-11e6-9632-0b68d91040b5","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[0,1,2,275,600,6,7,8,429,430,431,432,15,282,283,17,285,18,19,20,286,287,288,289,292,293,269,433,294,295,296,297,434,24,443,298,299,300,301,302,444,445,307,602,308,309,310,446,603,447,37,604,448,449,605,450,451,606,452,607,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,608,469,470,471,472,473,474,475,311,476,312,313,477,478,479,480,72,481,482,272,273,609,274,314,315,77,316,317,318,319,320,321,322,326,327,328,331,332,85,86,87,483,334,89,335,336,337,91,92,93,338,339,484,98,485,486,487,488,103,105,489,490,109,491,492,493,494,495,496,497,498,499,341,115,500,116,501,120,502,503,504,505,342,124,506,125,507,343,508,509,510,511,344,512,513,345,133,134,135,136,346,514,140,515,141,142,143,347,516,348,349,350,144,145,517,146,351,147,610,148,353,518,150,519,151,520,521,522,523,524,525,526,527,582,528,529,530,531,532,533,534,361,362,535,536,171,537,172,173,174,175,176,363,178,179,364,538,365,366,539,540,367,368,369,541,370,542,371,543,544,545,546,547,372,548,549,550,611,551,374,612,375,376,552,553,377,613,554,555,378,379,380,381,208,382,383,384,689,385,556,386,557,558,387,388,389,614,390,391,392,393,394,231,232,233,234,236,239,241,395,396,397,398,399,244,559,245,560,561,562,563,564,400,565,401,566,402,567,568,569,570,403,404,571,572,573,405,256,257,258,259,260,261,262,263,574,406,407,408],"tindex":"c804539b-3e3e-11e6-9632-b929c7f4d0fe","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"appendable"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[411,285,326,328,332,109,342,532,535,366,539,367,368,542,371,372,374,375,378,564],"tindex":"c804539c-3e3e-11e6-9632-f3132359ae30","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[430,15,282,302,337,345,361,365,551,384,386,400,405],"tindex":"c8047aad-3e3e-11e6-9632-312c392cf858","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if ((value.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"c8047aae-3e3e-11e6-9632-ad5693aa3a6d","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"c8047aaf-3e3e-11e6-9632-c5a7c27f08cf","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(d))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[175,176],"tindex":"c8047ab0-3e3e-11e6-9632-07ae97e4ebd2","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"c8047ab1-3e3e-11e6-9632-0d704f2a48b1","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[],"tindex":"c804a1c2-3e3e-11e6-9632-6df5a8237ad2","method":{"position":"com.google.gson.stream.JsonReader:1572","type":"CtMethodImpl","sourcecode":"private java.io.IOException syntaxError(java.lang.String message) throws java.io.IOException {\n    if (message == null) {\n        {\n            throw new com.google.gson.stream.MalformedJsonException(((((((message + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())) + \" path \") + (getPath())));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"c804a1c3-3e3e-11e6-9632-53040bd1a9b4","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233227401/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n                    return node != null ? node.V : null;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"key","com.google.gson.LongSerializationPolicy.DEFAULT":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
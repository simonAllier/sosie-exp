{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":14,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":142,"com.google.gson.functional.StringTest.testStringValueDeserialization":599,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":634,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":66,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":560,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":339,"com.google.gson.stream.JsonWriterTest.testRepeatedName":631,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":204,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":446,"com.google.gson.MixedStreamTest.testWriteLenient":26,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":269,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":568,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":166,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":42,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":49,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":414,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":382,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":129,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":203,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":460,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":347,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":218,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":309,"com.google.gson.functional.ObjectTest.testSingletonLists":86,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":561,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":143,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":334,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":265,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":9,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":577,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":428,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":184,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":385,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":104,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":584,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":607,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":13,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":374,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":475,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":290,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":176,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":327,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":160,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":289,"com.google.gson.functional.EnumTest.testEnumCaseMapping":202,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":141,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":618,"com.google.gson.functional.JsonTreeTest.testToJsonTree":19,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":326,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":579,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":82,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":623,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":537,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":502,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":553,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":311,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":3,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":46,"com.google.gson.functional.ObjectTest.testNullDeserialization":438,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":452,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":605,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":423,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":180,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":394,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":340,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":429,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":159,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":306,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":435,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":179,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":527,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":580,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":70,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":398,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":397,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":576,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":379,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":24,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":536,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":93,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":121,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":357,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":559,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":270,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":284,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":371,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":550,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":133,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":251,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":65,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":274,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":380,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":372,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":434,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":496,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":8,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":140,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":418,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":21,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":211,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":296,"com.google.gson.metrics.PerformanceTest.testDummy":182,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":515,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":76,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":217,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":474,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":253,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":186,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":136,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":484,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":471,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":552,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":305,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":624,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":455,"com.google.gson.functional.CollectionTest.testSetDeserialization":244,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":461,"com.google.gson.functional.EnumTest.testEnumSet":193,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":422,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":517,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":363,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":36,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":252,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":542,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":91,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":28,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":216,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":376,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":473,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":387,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":34,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":157,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":388,"com.google.gson.functional.MapTest.testHashMapDeserialization":278,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":337,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":565,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":488,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":593,"com.google.gson.MixedStreamTest.testReadNulls":614,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":37,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":111,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":191,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":519,"com.google.gson.functional.MapTest.testSortedMap":293,"com.google.gson.functional.MapTest.testMapSerialization":288,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":112,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":369,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":482,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":504,"com.google.gson.functional.MapTest.testSerializeMaps":54,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":597,"com.google.gson.functional.MapTest.testComplexKeysSerialization":64,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":516,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":299,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":509,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":200,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":454,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":320,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":6,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":233,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":188,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":198,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":105,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":206,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":437,"com.google.gson.functional.MapTest.testStringKeyDeserialization":298,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":507,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":257,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":400,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":301,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":343,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":338,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":463,"com.google.gson.functional.PrettyPrintingTest.testMap":476,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":236,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":189,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":532,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":183,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":508,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":147,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":600,"com.google.gson.functional.CollectionTest.testQueueSerialization":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":135,"com.google.gson.functional.MapTest.testMapSerializationEmpty":297,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":364,"com.google.gson.functional.MapTest.testMapOfMapSerialization":59,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":555,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":242,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":101,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":366,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":266,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":144,"com.google.gson.functional.FieldNamingTest.testIdentity":598,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":254,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":113,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":439,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":18,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":168,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":210,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":412,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":329,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":177,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":145,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":171,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":361,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":569,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":543,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":549,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":578,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":275,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":25,"com.google.gson.functional.MapTest.testMapSubclassSerialization":53,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":109,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":225,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":518,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":102,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":152,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":355,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":582,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":11,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":531,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":187,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":215,"com.google.gson.functional.EnumTest.testEnumSubclass":196,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":375,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":185,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":426,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":328,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":302,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":625,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":381,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":256,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":229,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":330,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":96,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":359,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":448,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":74,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":31,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":501,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":5,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":365,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":421,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":209,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":358,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":632,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":572,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":413,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":277,"com.google.gson.MixedStreamTest.testWriteNulls":612,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":500,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":272,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":120,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":213,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":453,"com.google.gson.CommentsTest.testParseComments":620,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":87,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":261,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":314,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":378,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":505,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":512,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":481,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":146,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":292,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":450,"com.google.gson.MixedStreamTest.testReadInvalidState":610,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":457,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":223,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":574,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":107,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":84,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":510,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":126,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":22,"com.google.gson.JsonArrayTest.testRemove":27,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":99,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":557,"com.google.gson.functional.MapTest.testMapDeserialization":283,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":551,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":480,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":276,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":308,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":56,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":80,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":313,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":72,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":234,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":17,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":529,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":427,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":440,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":38,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":464,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":538,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":222,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":95,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":232,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":291,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":164,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":325,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":263,"com.google.gson.functional.PrimitiveTest.testShortSerialization":395,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":316,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":384,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":469,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":356,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":4,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":154,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":336,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":594,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":195,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":235,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":1,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":486,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":280,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":350,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":248,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":402,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":12,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":567,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":617,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":409,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":403,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":627,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":208,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":255,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":324,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":524,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":583,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":390,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":522,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":258,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":360,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":444,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":417,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":201,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":39,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":131,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":539,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":462,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":259,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":307,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":315,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":558,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":342,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":545,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":563,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":78,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":237,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":331,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":391,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":362,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":406,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":51,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":194,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":312,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":15,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":483,"com.google.gson.functional.MapTest.testGeneralMapField":62,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":416,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":495,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":408,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":124,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":155,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":137,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":294,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":69,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":525,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":386,"com.google.gson.MixedStreamTest.testReadMixedStreamed":616,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":285,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":540,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":29,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":50,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":521,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":514,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":367,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":468,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":621,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":556,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":286,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":592,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":279,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":262,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":407,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":116,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":586,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":630,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":554,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":273,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":114,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":523,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":319,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":268,"com.google.gson.functional.ObjectTest.testNestedDeserialization":445,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":432,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":449,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":162,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":73,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":467,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":405,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":511,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":205,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":287,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":601,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":214,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":393,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":228,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":170,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":271,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":247,"com.google.gson.functional.ObjectTest.testNullSerialization":424,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":173,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":591,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":281,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":20,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":61,"com.google.gson.functional.MapTest.testInterfaceTypeMap":60,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":503,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":156,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":77,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":332,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":199,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":626,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":231,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":465,"com.google.gson.MixedStreamTest.testReadClosed":611,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":526,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":158,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":345,"com.google.gson.MixedStreamTest.testWriteClosed":615,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":45,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":163,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":88,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":581,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":219,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":322,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":172,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":94,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":575,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":81,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":89,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":240,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":587,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":628,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":370,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":589,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":230,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":564,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":491,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":97,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":410,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":85,"com.google.gson.JsonNullTest.testEqualsAndHashcode":622,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":534,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":117,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":456,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":128,"com.google.gson.functional.CollectionTest.testQueueDeserialization":249,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":354,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":368,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":604,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":573,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":588,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":57,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":547,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":71,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":443,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":43,"com.google.gson.functional.MapTest.testRawMapSerialization":63,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":151,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":562,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":103,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":227,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":431,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":485,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":318,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":30,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":33,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":119,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":165,"com.google.gson.functional.PrimitiveTest.testByteSerialization":174,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":608,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":67,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":0,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":341,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":167,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":123,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":595,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":175,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":220,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":602,"com.google.gson.functional.MapTest.testMapWithQuotes":58,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":533,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":603,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":250,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":520,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":267,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":161,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":530,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":459,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":310,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":212,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":442,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":106,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":377,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":544,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":125,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":535,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":138,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":546,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":389,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":192,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":243,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":498,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":35,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":571,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":40,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":492,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":590,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":110,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":190,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":224,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":333,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":264,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":430,"com.google.gson.internal.LinkedTreeMapTest.testClear":2,"com.google.gson.functional.ObjectTest.testNestedSerialization":92,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":52,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":68,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":344,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":606,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":115,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":295,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":108,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":134,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":153,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":181,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":90,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":490,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":401,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":79,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":548,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":178,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":346,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":619,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":528,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":585,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":148,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":122,"com.google.gson.functional.CollectionTest.testSetSerialization":246,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":304,"com.google.gson.functional.StringTest.testStringValueSerialization":149,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":260,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":478,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":150,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":98,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":207,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":238,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":494,"com.google.gson.MixedStreamTest.testWriteInvalidState":613,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":419,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":349,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":353,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":506,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":139,"com.google.gson.stream.JsonWriterTest.testBooleans":629,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":541,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":7,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":596,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":451,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":493,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":466,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":566,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":609,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":282,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":633,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":470,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":497},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[0],"tindex":"17a9b779-3e6b-11e6-a4d1-c5bac00a48b0","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls.isInterface()) {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:709","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT)"},"failures":[],"tindex":"17aa059a-3e6b-11e6-a4d1-fd3be9a223c7","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if (offset == offset) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"offset","com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"17aa059b-3e6b-11e6-a4d1-c52894d0b154","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b == null) {\n        {\n            if (a != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return a.compareTo(b);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"17aa2cac-3e6b-11e6-a4d1-5bbf64482842","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:226","type":"CtBinaryOperatorImpl","sourcecode":"(left != null) && (right != null)"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"17aa2cad-3e6b-11e6-a4d1-b32c05ef36d6","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if ((replacement != null) && (replacement != null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"replacement","right":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[20,21,22,23,24,25,26],"tindex":"17aa2cae-3e6b-11e6-a4d1-2563f0d74127","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[],"tindex":"17aa53bf-3e6b-11e6-a4d1-27796126cbbc","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (!(clazz.isInterface())) {\n        {\n            if (clazz.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (clazz.isAssignableFrom(clazz)) {\n                        {\n                            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[27],"tindex":"17aa53c0-3e6b-11e6-a4d1-4bcc7d0123e6","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element.isJsonNull()) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"17aa7ad1-3e6b-11e6-a4d1-d3b85afce7c2","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.contains(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[28,29,30,31,32,8,33,9,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,13,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,14,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,16,17,19,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153],"tindex":"17aa7ad2-3e6b-11e6-a4d1-edfe484bff43","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"17aa7ad3-3e6b-11e6-a4d1-7dd12bf90d19","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"17aaa1e4-3e6b-11e6-a4d1-258df5aa5709","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"17aaa1e5-3e6b-11e6-a4d1-e3fd4fedc927","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:687","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E)"},"failures":[],"tindex":"17aaa1e6-3e6b-11e6-a4d1-3d0105293ca2","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return char[][i];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"i","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[154],"tindex":"17aac8f7-3e6b-11e6-a4d1-d3cda0587471","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"17ab1718-3e6b-11e6-a4d1-adc8e27b3ac0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"17ab1719-3e6b-11e6-a4d1-4fa7653e82df","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"17ab3e2a-3e6b-11e6-a4d1-014ced5ef9e7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == o) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"o","b":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:291","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[],"tindex":"17ab3e2b-3e6b-11e6-a4d1-9b4added4604","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"17ab3e2c-3e6b-11e6-a4d1-23308cb4baa7","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == src) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"src","com.google.gson.LongSerializationPolicy.DEFAULT":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"17ab3e2d-3e6b-11e6-a4d1-a50673e53cba","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"17ab653e-3e6b-11e6-a4d1-e7f3a1958397","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"17ab653f-3e6b-11e6-a4d1-d566b3b25938","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[154],"tindex":"17ab8c50-3e6b-11e6-a4d1-594b1e4aec5d","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"17ab8c51-3e6b-11e6-a4d1-69fb4a44bce6","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"17ab8c52-3e6b-11e6-a4d1-9d7a7ae331f4","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[28,155,156,157,158,159,160,107,108,161,111,14,112,162,163,115,116,164],"tindex":"17ab8c53-3e6b-11e6-a4d1-bb5313ce1a55","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.util.Date.class)"},"failures":[],"tindex":"17abb364-3e6b-11e6-a4d1-3f1eafe09b29","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == o) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"o","java.util.Date.class":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"17abb365-3e6b-11e6-a4d1-3f14b0d3f426","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"17abb366-3e6b-11e6-a4d1-ef491a0d09ee","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"17abda77-3e6b-11e6-a4d1-75b190eed846","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (!(clazz.isInterface())) {\n        {\n            if (clazz.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (clazz.isAssignableFrom(clazz)) {\n                        {\n                            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"17abda78-3e6b-11e6-a4d1-f7753127d766","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[165,35,166,167,168,169,170,66,171,73,74,75,78,79,82,13,14,128,172,16,17,18,19],"tindex":"17ac0189-3e6b-11e6-a4d1-b34c8b517998","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"17ac018a-3e6b-11e6-a4d1-6bfd58033b14","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[173,154],"tindex":"17ac018b-3e6b-11e6-a4d1-11c121930674","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl","sourcecode":"isJsonNull()"},"failures":[],"tindex":"17ac018c-3e6b-11e6-a4d1-9d1232767dcc","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isBoolean()) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"17ac018d-3e6b-11e6-a4d1-478bfc39165d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"17ac289e-3e6b-11e6-a4d1-59ddbebad4e5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[174],"tindex":"17ac289f-3e6b-11e6-a4d1-a7c3081d139d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[175,28,176,177,29,31,32,178,8,179,180,181,182,183,184,185,186,33,187,9,188,189,190,191,192,34,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,35,214,215,216,217,36,218,219,220,221,222,223,224,225,226,37,227,38,228,39,40,173,229,230,41,231,232,233,234,42,43,235,236,237,238,239,44,240,45,46,47,241,242,48,243,244,49,50,245,246,247,10,248,249,166,167,168,169,170,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,51,52,269,270,11,12,271,272,273,274,275,276,277,278,279,53,54,280,281,55,282,56,283,57,284,285,286,287,58,59,288,289,290,291,292,293,60,294,61,62,295,63,296,64,297,298,65,299,300,301,66,302,171,303,304,305,306,67,68,69,70,71,307,308,309,72,310,311,312,313,314,315,316,317,318,319,320,321,73,74,75,76,322,77,78,79,323,324,80,81,82,325,326,327,328,329,20,330,331,332,333,334,83,335,336,84,337,338,339,340,341,342,343,21,344,345,346,347,348,349,85,350,22,351,352,353,354,355,356,23,357,358,24,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,174,393,394,395,396,25,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,86,413,414,87,415,416,88,417,418,89,419,420,421,422,423,424,90,425,426,427,428,429,91,430,431,92,432,433,434,435,436,437,438,93,439,440,441,442,94,443,444,445,446,95,447,448,96,13,449,450,451,452,453,454,455,456,457,458,459,460,461,462,155,463,156,102,464,465,157,466,158,159,467,160,468,469,470,471,472,473,474,475,476,477,105,478,479,480,106,481,482,107,483,108,484,485,486,109,110,111,487,14,112,488,162,489,163,15,490,113,114,491,492,493,115,116,117,118,494,495,496,119,120,497,498,499,121,122,500,501,502,503,123,504,124,505,506,507,125,508,509,510,126,127,511,512,128,172,129,513,514,130,515,516,517,131,518,519,520,521,132,133,16,17,18,19,134,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,154,543,544,545,546,547,135,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,136,567,568,137,569,570,571,572,573,574,575,576,577,164,578,579,580,581,582,583,584,585,138,586,587,588,589,590,591,592,139,140,593,594,595,596,597,598,599,141,142,143,144,145,600,601,146,602,147,603,604,605,148,606,607,149,150,608,609,151,610,611,152,612,613,26,614,153,615,616,617,618,619,620],"tindex":"17ac28a0-3e6b-11e6-a4d1-b1c6b816a2f4","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"17ac4fb1-3e6b-11e6-a4d1-15dcf4a9cada","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[621,622,623,560,624],"tindex":"17ac4fb2-3e6b-11e6-a4d1-478411a3d423","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (other == null) {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"other"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"17ac4fb3-3e6b-11e6-a4d1-fb15b21d3304","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[175,28,176,177,29,625,183,184,185,204,205,206,207,208,209,210,211,35,218,222,224,248,166,167,168,169,170,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,268,276,277,66,171,310,311,316,446,451,453,155,463,156,157,466,158,159,467,160,469,626,627,628,470,471,472,473,474,481,482,107,483,108,484,485,491,134,522,557,564,567,574,164],"tindex":"17ac76c4-3e6b-11e6-a4d1-e103a2b4d1d7","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[8,629,630,631,632,633,634,9,34,36,42,47,49,80,351,354,87,90,91,92,93,440,94,105,106,110,113,114,116,124,130,133,17,138,150],"tindex":"17ac76c5-3e6b-11e6-a4d1-61988de7338d","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"17ac9dd6-3e6b-11e6-a4d1-b1ceab58b0e0","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"17ac9dd7-3e6b-11e6-a4d1-17ebd25a7b90","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:511","type":"CtBinaryOperatorImpl","sourcecode":"(stackSize) == 0"},"failures":[],"tindex":"17ac9dd8-3e6b-11e6-a4d1-db3d8963e684","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (timeStyle == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"17ac9dd9-3e6b-11e6-a4d1-8352d6584a90","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[],"tindex":"17ac9dda-3e6b-11e6-a4d1-41c6e910f828","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (!(clazz.isInterface())) {\n        {\n            if (clazz.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (clazz.isAssignableFrom(clazz)) {\n                        {\n                            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"17acc4eb-3e6b-11e6-a4d1-011712744018","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"17acc4ec-3e6b-11e6-a4d1-43f7b8b3ca4b","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isBoolean()) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:591","type":"CtBinaryOperatorImpl","sourcecode":"result != (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"17acebfd-3e6b-11e6-a4d1-4b5bc053892b","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (offset != length) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"offset","com.google.gson.stream.JsonReader.PEEKED_NONE":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:346","type":"CtBinaryOperatorImpl","sourcecode":"context == nonempty"},"failures":[],"tindex":"17acebfe-3e6b-11e6-a4d1-8df35025bebd","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"newTop","nonempty":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"17ad130f-3e6b-11e6-a4d1-6fc51f3e2942","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"17ad1310-3e6b-11e6-a4d1-5194f11b3ff2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b == null) {\n        {\n            if (a != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return a.compareTo(b);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142628/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":56,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":28,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":602,"com.google.gson.functional.StringTest.testStringValueDeserialization":600,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":20,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":572,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":397,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":44,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":163,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":94,"com.google.gson.MixedStreamTest.testWriteLenient":619,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":635,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":581,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":14,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":81,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":85,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":132,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":445,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":298,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":533,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":181,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":406,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":6,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":59,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":113,"com.google.gson.functional.ObjectTest.testSingletonLists":130,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":573,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":390,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":603,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":626,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":330,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":40,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":589,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":145,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":283,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":448,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":236,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":616,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":27,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":437,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":498,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":100,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":269,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":382,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":493,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":357,"com.google.gson.functional.EnumTest.testEnumCaseMapping":297,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":601,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":622,"com.google.gson.functional.JsonTreeTest.testToJsonTree":33,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":381,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":592,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":26,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":551,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":632,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":524,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":566,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":376,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":0,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":308,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":169,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":613,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":142,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":456,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":646,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":398,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":477,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":1,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":491,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":107,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":152,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":645,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":543,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":593,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":109,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":461,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":588,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":258,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":442,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":633,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":421,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":550,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":154,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":520,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":571,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":95,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":350,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":434,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":563,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":30,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":637,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":87,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":367,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":336,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":443,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":435,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":151,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":514,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":38,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":138,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":244,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":51,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":364,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":402,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":221,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":121,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":57,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":497,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":322,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":285,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":369,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":579,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":565,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":106,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":172,"com.google.gson.functional.CollectionTest.testSetDeserialization":84,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":182,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":141,"com.google.gson.functional.EnumTest.testEnumSet":290,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":535,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":426,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":58,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":321,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":275,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":555,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":146,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":34,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":56,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":439,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":186,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":450,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":41,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":488,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":451,"com.google.gson.functional.MapTest.testHashMapDeserialization":340,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":395,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":577,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":506,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":599,"com.google.gson.MixedStreamTest.testReadNulls":620,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":67,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":199,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":222,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":289,"com.google.gson.functional.MapTest.testSortedMap":360,"com.google.gson.functional.MapTest.testMapSerialization":356,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":200,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":190,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":432,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":527,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":248,"com.google.gson.functional.MapTest.testSerializeMaps":343,"com.google.gson.functional.MapTest.testComplexKeysSerialization":102,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":534,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":368,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":636,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":531,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":43,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":171,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":119,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":266,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":79,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":647,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":295,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":7,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":188,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":46,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":479,"com.google.gson.functional.MapTest.testStringKeyDeserialization":366,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":277,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":528,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":324,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":463,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":370,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":401,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":396,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":484,"com.google.gson.functional.PrettyPrintingTest.testMap":499,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":301,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":202,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":546,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":282,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":530,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":634,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":606,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":610,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":8,"com.google.gson.functional.CollectionTest.testQueueSerialization":305,"com.google.gson.functional.MapTest.testMapSerializationEmpty":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":561,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":427,"com.google.gson.functional.MapTest.testMapOfMapSerialization":355,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":418,"com.google.gson.JavaSerializationTest.testMapIsSerializable":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":568,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":310,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":178,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":429,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":331,"com.google.gson.functional.FieldNamingTest.testIdentity":249,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":604,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":323,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":205,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":155,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":10,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":50,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":129,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":319,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":384,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":270,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":257,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":371,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":605,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":165,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":583,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":556,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":591,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":337,"com.google.gson.functional.MapTest.testMapSubclassSerialization":342,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":459,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":65,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":196,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":537,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":183,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":252,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":416,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":595,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":96,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":545,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":39,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":55,"com.google.gson.functional.EnumTest.testEnumSubclass":293,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":438,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":144,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":284,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":383,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":103,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":274,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":444,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":89,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":74,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":386,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":167,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":657,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":422,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":166,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":22,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":35,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":523,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":265,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":428,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":475,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":49,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":585,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":131,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":339,"com.google.gson.MixedStreamTest.testWriteNulls":653,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":522,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":334,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":516,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":53,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":170,"com.google.gson.CommentsTest.testParseComments":624,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":116,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":133,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":326,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":211,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":216,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":441,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":503,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":359,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":608,"com.google.gson.MixedStreamTest.testReadInvalidState":618,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":179,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":64,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":587,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":191,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":625,"com.google.gson.JsonParserTest.testParseMixedArray":643,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":394,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":532,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":276,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":213,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":12,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":411,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":176,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":454,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":569,"com.google.gson.functional.MapTest.testMapDeserialization":349,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":564,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":502,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":338,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":112,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":655,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":126,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":348,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":115,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":374,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":80,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":32,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":228,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":156,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":476,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":69,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":486,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":552,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":63,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":78,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":164,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":187,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":358,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":590,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":380,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":328,"com.google.gson.functional.PrimitiveTest.testShortSerialization":457,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":377,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":447,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":495,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":417,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":264,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":230,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":393,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":245,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":292,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":2,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":82,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":195,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":262,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":344,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":410,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":317,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":465,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":97,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":641,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":580,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":256,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":639,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":472,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":466,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":629,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":48,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":88,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":125,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":157,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":540,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":642,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":128,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":226,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":90,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":423,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":161,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":137,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":296,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":71,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":536,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":229,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":482,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":656,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":325,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":111,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":570,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":659,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":400,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":558,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":575,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":24,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":302,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":387,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":453,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":425,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":469,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":92,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":114,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":291,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":204,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":192,"com.google.gson.functional.MapTest.testGeneralMapField":19,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":135,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":513,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":471,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":104,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":210,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":483,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":582,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":361,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":373,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":541,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":449,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":4,"com.google.gson.MixedStreamTest.testReadMixedStreamed":255,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":351,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":412,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":553,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":223,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":271,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":313,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":219,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":430,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":494,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":279,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":232,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":352,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":598,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":341,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":327,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":470,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":209,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":239,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":413,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":640,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":567,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":335,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":206,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":539,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":379,"com.google.gson.functional.ObjectTest.testNestedDeserialization":162,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":333,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":478,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":480,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":201,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":21,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":492,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":468,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":215,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":45,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":353,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":607,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":54,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":455,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":70,"com.google.gson.JavaSerializationTest.testListIsSerializable":281,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":17,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":98,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":315,"com.google.gson.functional.ObjectTest.testNullSerialization":650,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":73,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":597,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":345,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":101,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":385,"com.google.gson.functional.MapTest.testInterfaceTypeMap":18,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":525,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":485,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":123,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":388,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":42,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":628,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":260,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":77,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":542,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":490,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":404,"com.google.gson.MixedStreamTest.testWriteClosed":254,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":203,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":307,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":124,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":594,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":60,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":122,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":217,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":159,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":234,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":127,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":139,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":306,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":240,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":433,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":242,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":75,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":576,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":508,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":174,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":473,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":409,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":548,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":173,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":510,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":29,"com.google.gson.functional.CollectionTest.testQueueDeserialization":318,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":415,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":431,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":612,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":658,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":505,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":586,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":99,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":560,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":110,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":160,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":300,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":251,"com.google.gson.functional.MapTest.testRawMapSerialization":363,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":574,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":630,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":68,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":148,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":194,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":378,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":3,"com.google.gson.functional.PrimitiveTest.testByteSerialization":11,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":273,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":286,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":515,"com.google.gson.ObjectTypeAdapterTest.testSerialize":37,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":651,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":108,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":399,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":654,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":15,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":526,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":246,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":61,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":268,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":609,"com.google.gson.functional.MapTest.testMapWithQuotes":354,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":547,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":611,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":320,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":538,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":332,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":198,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":544,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":180,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":644,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":375,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":52,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":158,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":189,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":557,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":140,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":549,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":16,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":559,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":452,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":648,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":312,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":518,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":13,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":511,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":584,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":72,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":207,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":596,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":197,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":288,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":299,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":389,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":259,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":329,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":627,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":147,"com.google.gson.JsonObjectTest.testAddingStringProperties":9,"com.google.gson.functional.ObjectTest.testNestedSerialization":149,"com.google.gson.internal.LinkedTreeMapTest.testClear":263,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":93,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":372,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":403,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":615,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":509,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":362,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":193,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":225,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":278,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":621,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":143,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":507,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":464,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":25,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":231,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":405,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":623,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":227,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":237,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":631,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":614,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":521,"com.google.gson.functional.CollectionTest.testSetSerialization":86,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":105,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":91,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":500,"com.google.gson.functional.StringTest.testStringValueSerialization":617,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":250,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":47,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":175,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":303,"com.google.gson.MixedStreamTest.testWriteInvalidState":253,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":512,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":649,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":408,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":212,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":414,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":554,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":247,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":267,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":168,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":5,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":208,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":489,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":638,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":578,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":652,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":347,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":496,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":517},"transformations":[{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"30fcb866-3e3b-11e6-8e55-7bb753cb840a","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10],"tindex":"30fd0687-3e3b-11e6-8e55-2dfbcb33edb3","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key == null) {\n        {\n            return (findByObject(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:346","type":"CtBinaryOperatorImpl","sourcecode":"context == nonempty"},"failures":[],"tindex":"30fd2d98-3e3b-11e6-8e55-0d9217e1c76a","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (offset == length) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"offset","nonempty":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[11],"tindex":"30fd2d99-3e3b-11e6-8e55-33d252a92ba3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"30fd2d9a-3e3b-11e6-8e55-a7b06217ec82","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[],"tindex":"30fd2d9b-3e3b-11e6-8e55-6ba587f56b9e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"key","java.sql.Timestamp.class":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"30fd54ac-3e3b-11e6-8e55-0de84db10288","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"30fd54ad-3e3b-11e6-8e55-ef7f4ae945d1","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"30fd54ae-3e3b-11e6-8e55-3f9c49d69208","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b == null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1252","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME)) || (p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED))"},"failures":[],"tindex":"30fd7bbf-3e3b-11e6-8e55-2b3e96076fbc","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if ((newTop == newTop) || (p == newTop)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"newTop","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[12,3,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"tindex":"30fd7bc0-3e3b-11e6-8e55-113eeb1d856e","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:482","type":"CtBinaryOperatorImpl","sourcecode":"(peekStack == (com.google.gson.stream.JsonScope.EMPTY_OBJECT)) || (peekStack == (com.google.gson.stream.JsonScope.NONEMPTY_OBJECT))"},"failures":[],"tindex":"30fd7bc1-3e3b-11e6-8e55-3db154798f78","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if ((style == style) || (peekStack == style)) {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"style","com.google.gson.stream.JsonScope.EMPTY_OBJECT":"style","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"30fda2d2-3e3b-11e6-8e55-b5688fabd8ed","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"30fda2d3-3e3b-11e6-8e55-d12c2b2d4dc1","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src.isJsonNull()) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,14,15,16,17,87,88,89,90,91,92,93,94,95,96,97,98,99,100,18,101,19,102,20,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,21,22,23,121,122,123,24,25,124,125,126,127,26,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,27,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,28,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,29,217,218,219,220,221,222,223,224,30,31,32,10,33,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261],"tindex":"30fdc9e4-3e3b-11e6-8e55-855c0e01768e","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"30fdc9e5-3e3b-11e6-8e55-23405c1f6eca","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"30fdf0f6-3e3b-11e6-8e55-491f7488de42","method":{"position":"com.google.gson.internal.bind.TypeAdapters:509","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.UUID value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"30fdf0f7-3e3b-11e6-8e55-0974398d740c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (!value) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"30fdf0f8-3e3b-11e6-8e55-f5421119020d","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:292","type":"CtBinaryOperatorImpl","sourcecode":"(parent.left) == node"},"failures":[262,263,0,264,265,266,267,96,97,28,204,32],"tindex":"30fe6629-3e3b-11e6-8e55-eff47307a632","method":{"position":"com.google.gson.internal.LinkedTreeMap:373","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root == root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"root","node":"root","left":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"30fe662a-3e3b-11e6-8e55-bb726b2039b8","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    try {\n        if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n            throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n        } \n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[268,34,269,270,271,3,272,273,35,36,274,275,276,277,37,38,278,279,280,281,282,283,284,285,286,39,40,287,288,289,41,290,291,292,293,294,295,42,43,296,297,298,44,45,46,47,48,49,50,51,52,53,13,54,55,56,57,58,59,60,61,62,63,64,299,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,300,82,301,302,303,304,305,306,307,308,83,309,310,311,312,84,85,313,314,86,315,316,317,318,14,15,319,16,17,320,87,321,322,323,88,89,324,90,325,91,326,327,328,329,330,331,332,333,92,93,94,95,96,97,98,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,99,350,351,352,353,354,355,356,357,100,358,359,360,18,361,101,19,362,363,364,102,365,366,367,368,369,370,20,103,371,104,105,106,107,108,372,373,109,110,111,112,113,374,375,376,114,115,116,117,377,118,378,379,119,120,21,22,23,121,122,123,24,25,124,125,126,127,26,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,128,453,454,11,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,129,130,131,132,133,134,135,136,137,138,139,140,475,141,142,143,144,476,145,477,146,147,148,149,478,150,151,152,153,479,154,155,156,157,158,159,160,161,162,163,164,165,166,167,27,480,168,169,170,171,172,173,174,175,176,177,178,179,481,180,181,182,482,483,484,485,183,486,487,488,489,490,491,492,493,494,495,496,184,185,186,497,498,499,187,188,500,501,502,189,503,190,191,192,193,504,194,195,196,197,198,199,505,28,200,506,201,202,203,204,507,205,206,508,207,208,509,209,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,210,211,212,528,529,530,531,532,213,214,215,216,29,217,533,218,219,220,221,534,535,536,537,222,538,223,224,30,31,32,10,33,225,226,539,540,541,542,543,227,228,544,545,546,547,548,549,550,551,552,229,553,554,555,230,556,557,558,559,560,561,231,562,563,564,565,566,567,568,232,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,233,584,585,586,587,234,588,589,590,591,592,593,594,595,235,236,237,238,239,240,241,242,596,597,598,243,244,599,245,246,247,248,249,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,250,251,618,252,253,619,620,621,254,255,256,622,623,624],"tindex":"30fe662b-3e3b-11e6-8e55-7d310c52a438","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl","sourcecode":"(type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))"},"failures":[],"tindex":"30fe8d3c-3e3b-11e6-8e55-5d6545186a84","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"context","type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"30fe8d3d-3e3b-11e6-8e55-3d4541e6d0d6","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[],"tindex":"30fe8d3e-3e3b-11e6-8e55-8966e8d2104f","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if ((src instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"30feb44f-3e3b-11e6-8e55-e1b45e797fdd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:744","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    out.value((value == null ? null : java.util.Map<T, java.lang.String>.get(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"30feb450-3e3b-11e6-8e55-7d4944453927","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:358","type":"CtUnaryOperatorImpl","sourcecode":"!changed"},"failures":[34,35,36,37,38,39,40,41,42,43,44,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,14,15,16,17,87,88,89,90,91,92,93,94,95,96,97,98,99,100,18,101,19,102,20,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,21,22,23,121,122,123,24,25,124,125,126,127,26,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,27,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,28,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,29,217,218,219,220,221,222,223,224,30,31,32,10,33,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256],"tindex":"30feb451-3e3b-11e6-8e55-31fc22bace46","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (!deserialize) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"changed":"deserialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"30fedb62-3e3b-11e6-8e55-71cb77aeafc1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"30ff0273-3e3b-11e6-8e55-9de84c8a4727","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[625,37,626],"tindex":"30ff0274-3e3b-11e6-8e55-551390d4cdcb","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"30ff0275-3e3b-11e6-8e55-3d968f5811ab","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"30ff0276-3e3b-11e6-8e55-65789c925619","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            if (in == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"30ff2987-3e3b-11e6-8e55-a15f941c0bbc","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.remove(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"30ff2988-3e3b-11e6-8e55-85074d39a71f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"30ff2989-3e3b-11e6-8e55-8d036782e02d","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"30ff298a-3e3b-11e6-8e55-b1509a633f9f","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl","sourcecode":"superclass instanceof java.lang.Class"},"failures":[],"tindex":"30ff298b-3e3b-11e6-8e55-d3c2a805263e","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[],"tindex":"30ff509c-3e3b-11e6-8e55-733b2f7fdcff","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter != null) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"30ff509d-3e3b-11e6-8e55-47f27461bc88","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if ((src != src) && (token != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"src","token":"src","com.google.gson.stream.JsonToken.NUMBER":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"30ff509e-3e3b-11e6-8e55-8399a22edf70","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            if (in == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"30ff509f-3e3b-11e6-8e55-3b62f6a58f1e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[44,46,50,58,411,418,421,440,470,627,628,629,630,631,632,633,634,619],"tindex":"30ff50a0-3e3b-11e6-8e55-d9d7cd8b2ab9","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"30ff77b1-3e3b-11e6-8e55-db61538c3b9e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"30ff77b2-3e3b-11e6-8e55-47a9e44f9943","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"30ff77b3-3e3b-11e6-8e55-1ba4a561f8c1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"30ff77b4-3e3b-11e6-8e55-0f19c9299030","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (!(value instanceof java.lang.reflect.WildcardType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"30ff77b5-3e3b-11e6-8e55-2dec851d5482","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"30ff9ec6-3e3b-11e6-8e55-8d091b0cf48b","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter != null) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"30ff9ec7-3e3b-11e6-8e55-7321acc04906","method":{"position":"com.google.gson.internal.bind.TypeAdapters:491","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.InetAddress value) throws java.io.IOException {\n    out.value((value == null ? null : value.getHostAddress()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"30ff9ec8-3e3b-11e6-8e55-572cda6662aa","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if ((array instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[635,636,637,638,12,639,640,641,642,34,269,270,271,3,272,273,35,36,38,643,644,645,646,278,282,283,284,286,40,647,648,41,290,291,292,293,42,296,297,298,44,46,48,50,51,52,13,54,55,56,57,58,60,61,62,64,66,67,68,69,71,72,73,76,78,81,300,82,301,305,306,307,308,83,311,85,313,86,315,317,14,15,319,16,17,320,321,89,324,90,91,326,327,329,331,332,333,92,93,338,342,343,346,348,99,354,355,356,358,359,18,361,101,19,362,363,102,365,367,370,20,103,371,104,106,107,108,372,373,109,110,111,374,376,114,115,117,377,118,378,119,21,22,23,121,122,123,24,25,126,127,26,383,385,391,394,402,403,409,411,412,415,418,420,421,424,425,429,438,440,442,443,446,449,451,454,11,455,456,457,458,459,463,465,469,470,472,129,130,133,136,139,649,141,650,143,476,477,146,148,149,478,151,154,156,157,159,164,167,27,480,168,169,170,171,173,174,175,176,177,178,179,481,180,181,182,482,483,484,485,183,486,487,488,489,490,491,492,493,494,495,628,498,499,187,188,500,501,502,189,191,193,195,196,197,198,199,505,28,200,202,205,206,207,509,209,510,511,513,514,515,516,517,520,521,522,526,210,212,529,531,213,214,215,216,29,217,533,220,536,222,224,30,31,32,10,33,225,540,541,542,544,546,547,549,551,552,554,230,557,558,559,560,561,562,564,565,567,232,569,570,571,573,576,578,579,581,582,233,584,585,586,587,234,590,591,593,595,235,238,239,242,598,243,244,599,245,246,247,248,249,601,602,603,604,605,608,610,614,617,250,651,652,251,252,653,253,619,621,254,654,655,622,623],"tindex":"30ff9ec9-3e3b-11e6-8e55-f510b023942c","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[266],"tindex":"30ffc5da-3e3b-11e6-8e55-138f495256f4","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (!unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"30ffeceb-3e3b-11e6-8e55-73a2904bb3e8","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"310013fc-3e3b-11e6-8e55-5df599f97451","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"310013fd-3e3b-11e6-8e55-d9ea8d3bd917","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == key) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"key","com.google.gson.LongSerializationPolicy.DEFAULT":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[656,657,658,659,599],"tindex":"310013fe-3e3b-11e6-8e55-113724df5286","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (!(clazz.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"310013ff-3e3b-11e6-8e55-f77baf4ce678","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[34,35,36,37,38,39,40,41,42,43,44,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,14,15,16,17,87,88,89,90,91,92,93,94,95,96,97,98,99,100,18,101,19,102,20,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,21,22,23,121,122,123,24,25,124,125,126,127,26,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,27,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,28,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,29,217,218,219,220,221,222,223,224,30,31,32,10,33,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256],"tindex":"31001400-3e3b-11e6-8e55-3104ff12957b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"31003b11-3e3b-11e6-8e55-858dfb07a9af","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"31003b12-3e3b-11e6-8e55-7b8d5f180680","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind != null) {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503498/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":61,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
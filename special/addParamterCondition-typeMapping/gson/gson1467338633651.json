{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":262,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":55,"com.google.gson.functional.StringTest.testStringValueDeserialization":392,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":625,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":114,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":551,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":635,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":619,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":524,"com.google.gson.stream.JsonWriterTest.testRepeatedName":666,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":140,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":510,"com.google.gson.MixedStreamTest.testWriteLenient":7,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":455,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":175,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":613,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":190,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":115,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":125,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":490,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":556,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":138,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":198,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":78,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":531,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":629,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":412,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":602,"com.google.gson.functional.ObjectTest.testSingletonLists":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":171,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":199,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":56,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":519,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":610,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":587,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":303,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":484,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":499,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":11,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":558,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":406,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":653,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":400,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":63,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":46,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":552,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":430,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":359,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":513,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":25,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":429,"com.google.gson.functional.EnumTest.testEnumCaseMapping":137,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":13,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":54,"com.google.gson.functional.JsonTreeTest.testToJsonTree":315,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":512,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":636,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":301,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":154,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":659,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":384,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":476,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":520,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":340,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":122,"com.google.gson.functional.ObjectTest.testNullDeserialization":645,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":308,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":398,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":497,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":246,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":357,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":525,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":210,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":23,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":278,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":502,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":356,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":633,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":326,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":564,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":563,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":483,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":238,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":648,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":660,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":232,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":568,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":634,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":37,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":170,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":539,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":425,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":456,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":549,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":475,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":350,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":363,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":581,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":112,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":239,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":462,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":550,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":33,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":215,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":16,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":18,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":494,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":686,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":144,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":224,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":432,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":618,"com.google.gson.metrics.PerformanceTest.testDummy":642,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":488,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":294,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":85,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":379,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":582,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":435,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":174,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":165,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":376,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":277,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":595,"com.google.gson.functional.CollectionTest.testSetDeserialization":442,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":79,"com.google.gson.functional.EnumTest.testEnumSet":131,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":206,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":450,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":542,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":86,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":280,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":638,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":472,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":211,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":84,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":358,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":553,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":378,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":559,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":20,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":306,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":242,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":621,"com.google.gson.functional.MapTest.testHashMapDeserialization":419,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":522,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":480,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":19,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":573,"com.google.gson.MixedStreamTest.testReadNulls":632,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":260,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":316,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":348,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":594,"com.google.gson.functional.MapTest.testSortedMap":431,"com.google.gson.functional.MapTest.testMapSerialization":101,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":263,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":402,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":547,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":685,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":676,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":386,"com.google.gson.functional.MapTest.testSerializeMaps":95,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":188,"com.google.gson.functional.MapTest.testComplexKeysSerialization":110,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":449,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":434,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":678,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":44,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":310,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":448,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":347,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":626,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":2,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":304,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":447,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":49,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":627,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":141,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":504,"com.google.gson.functional.MapTest.testStringKeyDeserialization":433,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":640,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":388,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":282,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":250,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":113,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":528,"com.google.gson.functional.PrettyPrintingTest.testMap":47,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":333,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":523,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":151,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":264,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":592,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":10,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":389,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":661,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":60,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":393,"com.google.gson.functional.MapTest.testMapSerializationEmpty":111,"com.google.gson.functional.CollectionTest.testQueueSerialization":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":162,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":630,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":543,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":669,"com.google.gson.functional.MapTest.testMapOfMapSerialization":100,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":230,"com.google.gson.JavaSerializationTest.testMapIsSerializable":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":477,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":440,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":663,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":235,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":259,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":288,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":57,"com.google.gson.functional.FieldNamingTest.testIdentity":189,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":583,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":271,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":505,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":143,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":192,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":200,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":314,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":514,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":360,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":647,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":58,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":275,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":233,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":463,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":482,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":184,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":258,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":417,"com.google.gson.functional.MapTest.testMapSubclassSerialization":94,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":249,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":196,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":415,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":451,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":4,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":70,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":335,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":537,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":468,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":572,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":591,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":83,"com.google.gson.functional.EnumTest.testEnumSubclass":134,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":236,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":12,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":498,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":220,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":274,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":637,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":555,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":281,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":682,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":597,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":515,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":146,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":540,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":672,"com.google.gson.stream.JsonWriterTest.testTwoNames":662,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":464,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":292,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":351,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":383,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":496,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":544,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":231,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":454,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":667,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":179,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":489,"com.google.gson.MixedStreamTest.testWriteNulls":5,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":418,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":39,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":460,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":35,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":309,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":411,"com.google.gson.CommentsTest.testParseComments":611,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":202,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":285,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":604,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":268,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":387,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":554,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":401,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":59,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":103,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":643,"com.google.gson.MixedStreamTest.testReadInvalidState":369,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":75,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":181,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":248,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":67,"com.google.gson.JsonParserTest.testParseMixedArray":365,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":223,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":614,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":390,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":639,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":674,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":265,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":227,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":257,"com.google.gson.JsonArrayTest.testRemove":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":168,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":243,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":382,"com.google.gson.functional.MapTest.testMapDeserialization":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":164,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":52,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":93,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":601,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":97,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":299,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":342,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":339,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":600,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":313,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":467,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":209,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":217,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":1,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":336,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":155,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":413,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":145,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":322,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":48,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":102,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":183,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":511,"com.google.gson.functional.PrimitiveTest.testShortSerialization":247,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":586,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":344,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":557,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":27,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":364,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":538,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":157,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":521,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":186,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":133,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":117,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":195,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":421,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":534,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":129,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":251,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":481,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":606,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":371,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":655,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":254,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":567,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":658,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":142,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":218,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":584,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":589,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":147,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":657,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":561,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":391,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":283,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":541,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":508,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":493,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":136,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":139,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":318,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":470,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":331,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":585,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":169,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":343,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":527,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":616,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":159,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":349,"com.google.gson.stream.JsonWriterTest.testNullStringValue":664,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":479,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":297,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":436,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":516,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":562,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":234,"com.google.gson.JsonArrayTest.testSet":367,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":252,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":28,"com.google.gson.JsonPrimitiveTest.testEquals":684,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":132,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":341,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":576,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":403,"com.google.gson.functional.MapTest.testGeneralMapField":107,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":492,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":32,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":570,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":41,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":276,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":332,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":651,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":176,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":148,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":222,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":325,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":241,"com.google.gson.MixedStreamTest.testReadMixedStreamed":370,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":228,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":471,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":126,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":361,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":608,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":654,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":487,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":545,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":26,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":372,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":377,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":167,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":427,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":92,"com.google.gson.JsonArrayTest.testDeepCopy":368,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":420,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":253,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":286,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":66,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":73,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":665,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":535,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":656,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":166,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":622,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":461,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":683,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":272,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":465,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":605,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":677,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":290,"com.google.gson.functional.ObjectTest.testNestedDeserialization":509,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":64,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":214,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":574,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":291,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":24,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":569,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":267,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":366,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":394,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":428,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":452,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":82,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":245,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":596,"com.google.gson.JavaSerializationTest.testListIsSerializable":374,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":194,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":459,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":128,"com.google.gson.functional.ObjectTest.testNullSerialization":207,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":320,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":416,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":422,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":106,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":221,"com.google.gson.functional.MapTest.testInterfaceTypeMap":104,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":385,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":334,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":296,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":517,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":69,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":135,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":650,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":337,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":599,"com.google.gson.MixedStreamTest.testReadClosed":641,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":149,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":22,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":529,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":680,"com.google.gson.MixedStreamTest.testWriteClosed":9,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":121,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":575,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":485,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":588,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":620,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":87,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":295,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":270,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":219,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":266,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":675,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":182,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":204,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":300,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":120,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":408,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":671,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":548,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":74,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":598,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":172,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":578,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":255,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":571,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":226,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":469,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":30,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":311,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":269,"com.google.gson.functional.CollectionTest.testQueueDeserialization":445,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":615,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":229,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":546,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":397,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":180,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":409,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":98,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":503,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":668,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":161,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":327,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":507,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":116,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":3,"com.google.gson.functional.MapTest.testRawMapSerialization":109,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":478,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":652,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":212,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":317,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":405,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":346,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":353,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":34,"com.google.gson.functional.PrimitiveTest.testByteSerialization":244,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":302,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":355,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":329,"com.google.gson.ObjectTypeAdapterTest.testSerialize":609,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":323,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":526,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":673,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":191,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":670,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":40,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":679,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":187,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":88,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":395,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":612,"com.google.gson.functional.MapTest.testMapWithQuotes":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":152,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":532,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":396,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":279,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":607,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":289,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":130,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":565,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":150,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":77,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":603,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":80,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":506,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":158,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":237,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":644,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":43,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":153,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":160,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":193,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":560,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":305,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":441,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":381,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":31,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":178,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":319,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":273,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":681,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":410,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":617,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":197,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":593,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":414,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":518,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":623,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":649,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":287,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":500,"com.google.gson.functional.ObjectTest.testNestedSerialization":213,"com.google.gson.JsonObjectTest.testAddingStringProperties":631,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":29,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":225,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":324,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":399,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":65,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":108,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":68,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":45,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":8,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":15,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":208,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":577,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":566,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":298,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":474,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":14,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":530,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":646,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":466,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":501,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":407,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":61,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":38,"com.google.gson.functional.CollectionTest.testSetSerialization":127,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":580,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":50,"com.google.gson.functional.StringTest.testStringValueSerialization":62,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":284,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":328,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":256,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":437,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":453,"com.google.gson.MixedStreamTest.testWriteInvalidState":6,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":380,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":205,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":533,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":42,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":536,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":156,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":0,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":307,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":628,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":579,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":21,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":173,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":330,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":423,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":624,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":36,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":375},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[0,1,2],"tindex":"0fc298b3-3f30-11e6-a52a-f1f58cf7516f","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,0,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,1,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361],"tindex":"0fc30de4-3f30-11e6-a52a-651d251b608b","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (htmlSafe) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:543","type":"CtBinaryOperatorImpl"},"failures":[362],"tindex":"0fc334f5-3f30-11e6-a52a-7117c2e75282","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index == (-1)) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[363,364],"tindex":"0fc35c06-3f30-11e6-a52a-37ad3f1ece10","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc35c07-3f30-11e6-a52a-b5bcadc1b4f5","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o == o) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED":"o","o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc38318-3f30-11e6-a52a-e9a4d962b130","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"0fc3aa29-3f30-11e6-a52a-2d16f62dc608","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:536","type":"CtBinaryOperatorImpl"},"failures":[365,366,367,368],"tindex":"0fc3aa2a-3f30-11e6-a52a-71cf47c3d915","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"i","com.google.gson.stream.JsonScope.EMPTY_DOCUMENT":"i"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl"},"failures":[3,369,4,6,7,8,9,370,371,10,11,12,372,373,374,13,14,15,16,17,18,19,375,376,377,378,379,20,21,22,23,24,25,26,27,28,29,30,31,380,32,33,34,35,36,381,382,37,38,39,383,384,385,40,386,41,387,42,388,43,389,44,390,45,391,46,47,48,49,50,51,52,53,392,54,55,56,57,58,393,394,59,395,60,396,397,398,61,399,400,62,63,64,65,66,401,402,67,403,68,404,405,70,71,406,407,72,73,408,409,74,410,75,76,77,78,79,80,411,81,82,83,84,85,86,412,87,88,89,413,90,414,415,91,416,92,417,93,418,419,420,94,95,421,422,96,423,97,424,98,425,426,427,428,99,100,101,429,430,102,103,431,104,105,106,107,108,109,432,110,111,433,112,434,435,113,114,115,116,117,118,436,437,438,119,120,121,122,123,439,440,124,441,442,125,126,443,127,128,444,129,445,130,131,132,133,134,446,447,135,448,136,137,138,449,450,139,451,140,452,141,453,142,454,143,144,455,456,457,458,459,460,461,462,145,463,464,146,465,147,148,149,466,467,468,151,469,153,154,155,470,471,472,157,473,158,159,160,161,162,474,163,475,164,165,476,166,477,167,168,169,170,171,478,479,172,480,174,481,175,176,482,177,178,179,180,181,182,483,484,183,185,485,186,187,0,188,189,190,191,192,193,194,195,196,197,198,486,487,199,488,200,201,489,490,202,491,492,203,493,494,204,495,496,206,497,208,498,209,499,210,211,500,212,213,214,501,215,502,503,504,216,505,217,218,506,219,507,508,509,510,511,512,513,220,514,221,515,516,517,518,519,222,520,521,223,522,523,524,525,526,527,528,224,225,529,530,531,532,533,226,534,227,228,535,536,229,537,538,230,539,231,232,540,541,233,234,542,543,544,235,545,546,547,548,549,550,551,552,236,553,237,554,238,239,555,556,240,557,558,241,559,242,560,561,562,243,244,245,246,247,248,249,563,564,565,250,566,251,567,568,569,252,253,570,254,571,572,255,256,257,258,259,260,261,262,263,573,574,264,575,576,265,266,267,268,269,270,577,271,272,578,273,579,274,275,276,580,277,278,279,581,280,582,583,584,281,282,283,585,284,285,286,586,287,587,288,289,290,291,292,293,294,295,296,297,298,588,589,299,300,301,590,302,591,303,592,593,594,306,307,308,309,310,595,311,312,313,314,315,316,317,1,596,318,319,320,597,598,321,599,322,2,600,323,324,325,326,327,328,331,332,333,334,335,336,337,338,601,602,339,603,340,341,342,604,343,344,345,346,605,347,606,348,607,608,349,350,609,610,611,351,352,353,354,355,612,358,359,360,361,613],"tindex":"0fc3d13b-3f30-11e6-a52a-cbf21a0539e6","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (!serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc3f84c-3f30-11e6-a52a-53f04941dcd6","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc41f5d-3f30-11e6-a52a-bface62b8d30","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc41f5e-3f30-11e6-a52a-c180a86e6f48","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(d))) {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc41f5f-3f30-11e6-a52a-4b490b217455","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"context","typeOfT":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc44670-3f30-11e6-a52a-934413522176","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc46d81-3f30-11e6-a52a-61bfeab08402","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:366","type":"CtBinaryOperatorImpl"},"failures":[614,615,616,617,618,619,620,621,622,623],"tindex":"0fc46d82-3f30-11e6-a52a-33dae4f91e7a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == 0) {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"h"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc46d83-3f30-11e6-a52a-37924b0fe569","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc49494-3f30-11e6-a52a-410e99546e60","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        public T construct() {\n                            try {\n                                java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                                return ((T)(newInstance));\n                            } catch (java.lang.Exception e) {\n                                throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                            }\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc4bba5-3f30-11e6-a52a-57761307dc9d","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[4,46,47,48,49,50,51,52,53,63,95,624,625],"tindex":"0fc4bba6-3f30-11e6-a52a-57d316e28bf2","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (indent == null) {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc4bba7-3f30-11e6-a52a-b3147aac21e6","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[340],"tindex":"0fc4e2b8-3f30-11e6-a52a-09124e798985","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc4e2b9-3f30-11e6-a52a-032d9af1de43","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Map.Entry) {\n        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Streams:50","type":"CtVariableReadImpl"},"failures":[626,458,627],"tindex":"0fc4e2ba-3f30-11e6-a52a-7156269e2914","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc509cb-3f30-11e6-a52a-7f95f79652e3","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[314,353,628,629,627,630,631],"tindex":"0fc530dc-3f30-11e6-a52a-d54cb2d807b6","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc530dd-3f30-11e6-a52a-ad13950ac93f","method":{"position":"com.google.gson.internal.$Gson$Types:65","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type componentType) {\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(componentType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[3,369,4,6,7,632,8,9,370,371,10,11,12,372,373,374,13,14,15,16,17,18,19,375,376,377,378,379,20,21,22,23,24,25,26,27,28,29,30,31,380,32,33,34,35,36,381,382,37,38,39,383,384,385,40,386,41,387,42,388,43,389,44,390,45,391,46,47,48,49,50,51,52,53,392,54,55,56,57,58,393,394,59,395,60,396,397,398,61,399,400,62,63,64,65,66,401,402,67,403,68,404,405,70,71,406,407,72,73,408,409,74,410,75,76,77,78,79,80,411,81,82,83,84,85,86,412,87,88,89,413,90,415,91,416,92,417,418,419,420,94,95,421,422,96,423,97,424,98,425,426,427,428,99,100,101,429,430,102,103,431,104,105,106,107,108,109,432,110,111,433,112,434,435,113,114,115,116,117,118,436,437,438,119,120,121,122,123,439,440,124,441,442,125,126,443,127,128,444,445,130,131,132,133,134,446,447,135,448,136,137,138,449,450,139,451,140,452,141,453,142,454,143,144,455,456,457,458,459,460,461,462,145,463,464,146,465,147,148,149,633,466,467,150,468,151,152,469,153,634,154,155,470,471,156,472,157,473,158,159,160,161,162,474,163,475,164,165,476,166,477,167,168,169,170,635,171,478,479,172,480,173,174,481,175,176,482,177,178,179,180,181,182,483,484,183,184,636,185,485,186,187,0,188,189,190,191,192,193,194,195,196,197,198,486,487,199,488,200,201,489,490,202,491,492,203,493,494,204,495,496,206,497,208,498,209,499,210,211,500,212,213,214,501,215,502,503,504,216,505,217,218,506,219,507,508,509,510,511,512,513,220,514,221,515,516,517,518,519,222,520,521,223,522,523,524,525,526,527,528,224,225,529,530,531,532,533,226,534,227,228,535,536,229,537,538,230,539,231,232,540,541,233,234,542,543,544,235,545,546,547,548,549,550,551,552,236,553,237,554,238,239,555,556,240,557,558,241,559,242,560,561,562,243,244,245,246,247,248,249,563,564,565,250,566,251,567,568,569,252,253,570,254,571,572,255,256,257,258,259,260,261,262,263,573,574,264,575,576,265,266,267,268,269,270,577,271,272,578,273,579,274,275,276,580,277,278,279,581,280,582,583,584,281,282,283,585,284,285,286,586,287,587,288,289,290,291,292,293,294,295,296,297,298,588,589,299,300,301,590,302,591,303,592,593,594,306,307,308,309,310,595,311,312,313,314,315,316,317,1,596,318,319,320,597,598,321,599,322,2,600,323,324,325,326,327,328,331,332,333,334,335,336,337,338,601,602,339,603,340,341,342,604,343,344,345,346,605,347,606,348,607,608,349,350,609,610,611,351,352,637,353,354,355,612,358,359,360,361],"tindex":"0fc530de-3f30-11e6-a52a-e95ccf5290b6","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc557ef-3f30-11e6-a52a-3b075c6fbc09","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (!(subclass.isInterface())) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc557f0-3f30-11e6-a52a-197e790987ab","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc57e01-3f30-11e6-a52a-73d493b59eb4","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc57e02-3f30-11e6-a52a-1f7d7f18d047","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc57e03-3f30-11e6-a52a-158f3b9ebdc6","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[638,639,640],"tindex":"0fc57e04-3f30-11e6-a52a-ada3aad26603","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == from) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[3,369,641,4,5,6,7,632,8,9,370,371,10,11,12,13,14,15,642,16,17,18,19,375,376,377,378,379,20,21,22,23,24,25,26,27,28,29,30,31,380,32,33,34,35,36,381,382,37,38,39,383,384,385,40,386,41,387,42,388,43,389,44,390,45,391,46,47,48,49,50,51,52,53,392,54,55,56,57,58,393,394,59,395,60,396,397,398,61,399,400,62,63,64,643,65,66,401,402,67,403,68,404,405,70,71,406,407,72,73,408,409,74,410,75,76,77,78,79,80,411,81,82,83,84,85,86,412,87,88,89,413,90,414,415,91,416,92,417,93,418,419,420,94,95,421,422,96,423,97,424,98,425,426,427,428,99,100,101,429,430,102,103,431,104,105,106,107,108,109,432,110,111,433,112,434,435,113,114,115,116,117,118,436,437,438,119,120,121,122,123,439,440,124,441,442,125,126,443,127,128,444,129,445,131,132,133,134,446,447,135,448,136,137,138,449,450,139,451,140,452,141,453,142,454,143,144,455,456,457,458,459,460,461,462,145,463,464,146,465,147,148,149,633,466,467,150,468,151,152,469,153,634,154,155,470,471,156,472,157,473,158,159,160,161,162,474,163,475,164,165,476,166,477,167,168,169,170,635,171,478,479,172,480,173,174,481,175,176,482,177,178,179,180,181,182,483,484,183,184,636,185,485,186,187,0,188,189,190,191,192,193,194,195,196,197,198,486,487,199,488,200,201,489,490,202,491,492,203,493,494,204,205,495,496,206,497,207,208,644,498,209,499,210,211,500,212,213,214,501,215,502,503,504,645,216,505,217,218,506,219,507,508,509,510,511,512,513,220,514,221,515,516,517,518,519,222,520,521,223,522,523,524,525,526,527,528,224,225,529,530,531,532,533,226,534,227,228,535,536,229,537,538,230,539,231,232,540,541,233,234,542,543,544,235,545,546,547,548,549,550,551,552,236,553,237,554,238,239,555,556,240,557,558,241,559,242,560,561,562,243,244,245,246,247,248,249,563,564,565,250,566,251,567,568,569,252,253,570,254,571,572,260,261,262,263,573,574,264,575,576,265,266,267,268,269,270,577,271,272,578,273,579,274,275,276,580,277,278,279,581,280,582,583,584,281,282,283,585,284,285,286,586,287,587,288,289,290,291,292,293,294,295,296,297,298,588,589,299,300,301,590,302,591,303,304,592,593,594,305,306,307,308,309,310,595,311,312,313,314,315,316,317,1,596,318,319,320,597,598,321,599,322,2,600,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,601,602,339,603,340,341,342,604,343,344,345,346,605,347,606,348,607,608,349,350,611,351,352,646,356,357,612,358,359,360,361],"tindex":"0fc5a515-3f30-11e6-a52a-0b68ccfd3f0e","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc5cc26-3f30-11e6-a52a-55aa3b4af7a8","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:163","type":"CtFieldReadImpl"},"failures":[3,4,6,9,370,371,16,17,18,376,377,378,28,29,41,387,42,45,391,48,49,53,63,66,402,67,403,68,405,71,406,407,72,73,408,409,74,75,77,78,79,80,411,82,83,84,85,86,412,87,88,89,413,90,415,91,98,430,104,106,107,110,114,115,117,123,442,125,127,130,135,448,140,452,141,453,142,454,143,144,455,456,457,458,459,145,463,464,146,466,467,470,157,474,167,177,182,186,187,0,188,189,190,191,193,194,195,196,197,486,487,199,488,200,201,489,490,202,491,492,203,493,494,204,495,206,497,208,498,499,211,500,212,213,501,215,502,503,216,505,217,218,506,219,507,508,509,510,561,255,256,257,258,259,260,262,263,574,264,575,576,265,266,267,268,269,270,271,272,273,579,274,276,580,277,278,581,584,281,283,284,291,292,293,294,295,296,297,298,588,589,299,300,301,591,303,306,307,308,309,310,595,311,312,313,314,315,316,317,1,596,318,319,320,597,598,321,599,322,2,600,323,326,327,328,335,338,601,602,341,342,604,343,345,347,606,348,608,349,350,609,351,352,358,647,648,649,650,651],"tindex":"0fc5cc27-3f30-11e6-a52a-d578e30445e8","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requireExpose":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl"},"failures":[],"tindex":"0fc5cc28-3f30-11e6-a52a-d3ab4bfbf11d","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n    } \n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n    } \n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n    } \n    return com.google.gson.GsonBuilder.this;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc5f339-3f30-11e6-a52a-35806ba686ae","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc5f33a-3f30-11e6-a52a-b76f7c85e5ed","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:309","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc5f33b-3f30-11e6-a52a-fdc37f3a5a03","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (findByObject(key)) != null;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"key","this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl"},"failures":[],"tindex":"0fc5f33c-3f30-11e6-a52a-4da66d066183","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc5f33d-3f30-11e6-a52a-e3846eddeaa6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc5f33e-3f30-11e6-a52a-5d1ca9c162cc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[458,627],"tindex":"0fc5f33f-3f30-11e6-a52a-592b69a562cf","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key instanceof java.lang.Class) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc61a50-3f30-11e6-a52a-0d8606a41302","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (memberName != null) {\n                {\n                    return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc61a51-3f30-11e6-a52a-e14f58308b4f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:736","type":"CtMethodImpl","sourcecode":"public T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.Map<java.lang.String, T>.get(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc61a52-3f30-11e6-a52a-a5a924d9044a","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc61a53-3f30-11e6-a52a-fb3e33693973","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.Class) {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[3,4,8,16,17,18,28,29,30,31,34,35,37,38,40,41,43,45,49,53,54,55,56,57,58,59,60,61,62,63,65,66,67,68,652,653,72,81,86,94,95,96,97,98,99,100,104,106,107,109,110,112,114,115,116,119,121,122,123,124,125,126,139,145,146,162,174,176,196,197,198,199,201,202,203,204,208,211,213,216,219,222,223,226,255,256,257,258,259,260,262,263,265,266,269,271,272,291,292,293,294,296,297,298,299,300,301,302,303,306,312,313,315,316,1,318,319,321,323,324,325,326,327,328,335,339,349,350,351,352,353,358,361],"tindex":"0fc61a54-3f30-11e6-a52a-6d9f4a8e28eb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc64165-3f30-11e6-a52a-cb489f1ce22a","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (memberName != null) {\n                {\n                    return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc64166-3f30-11e6-a52a-7d48a48c097c","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if ((json.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc64167-3f30-11e6-a52a-ed5ca01e69a5","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (!(key instanceof java.lang.reflect.GenericArrayType)) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc64168-3f30-11e6-a52a-8d46b847f722","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        public T construct() {\n                            try {\n                                java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                                return ((T)(newInstance));\n                            } catch (java.lang.Exception e) {\n                                throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                            }\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[654],"tindex":"0fc64169-3f30-11e6-a52a-25ccfc962ab3","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc6416a-3f30-11e6-a52a-413f204e3499","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc6687b-3f30-11e6-a52a-93c6dfad8a4c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:138","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc6687c-3f30-11e6-a52a-a7934154d2b6","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (!(key instanceof java.lang.reflect.GenericArrayType)) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"expected":"key","this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc6687d-3f30-11e6-a52a-079319319cc2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (findByObject(key)) != null;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc6687e-3f30-11e6-a52a-bb31a4c5c04f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:744","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    out.value((value == null ? null : java.util.Map<T, java.lang.String>.get(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc6687f-3f30-11e6-a52a-4159b924e65e","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc68f90-3f30-11e6-a52a-89d87b27130f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key == key) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"key","b":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:51","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc68f91-3f30-11e6-a52a-f5722b647f49","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if ((array.peek()) == array) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"array","com.google.gson.stream.JsonToken.NULL":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc68f92-3f30-11e6-a52a-c9d4c65b352c","method":{"position":"com.google.gson.internal.$Gson$Types:394","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.TypeVariable<?> unknown) {\n    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.declaringClassOf(unknown);\n    if (declaredByRaw == null) {\n        return unknown;\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof java.lang.reflect.ParameterizedType) {\n        int int = com.google.gson.internal.$Gson$Types.indexOf(declaredByRaw.getTypeParameters(), unknown);\n        return ((java.lang.reflect.ParameterizedType)(declaredBy)).getActualTypeArguments()[index];\n    } \n    return unknown;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[3,4,16,655,656,657,17,18,28,29,41,45,47,48,49,53,63,66,67,68,69,658,652,659,660,661,653,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,113,114,115,117,123,125,127,130,135,140,141,143,144,145,146,156,166,167,169,174,177,182,186,187,0,188,189,195,196,197,199,200,201,202,203,204,206,208,211,212,213,215,216,217,218,219,255,256,257,258,259,260,263,264,265,266,267,268,271,272,273,274,277,278,281,282,283,284,285,287,290,294,295,296,299,300,303,306,307,308,309,310,311,313,316,317,1,318,319,320,321,322,323,326,327,328,329,330,331,335,338,341,342,343,344,345,347,348,349,350,609,610,662,663,664,665,666,667,624,625,668,669,351,352,356,357,358],"tindex":"0fc68f93-3f30-11e6-a52a-971efb05be8a","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc6b6a4-3f30-11e6-a52a-c10c6d37e652","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc6b6a5-3f30-11e6-a52a-ad347bbc02e4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc6b6a6-3f30-11e6-a52a-9f2d88c584e4","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:334","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc6b6a7-3f30-11e6-a52a-37a668777e90","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"other","value":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,633,634,636,312,315,362,627],"tindex":"0fc6b6a8-3f30-11e6-a52a-3759f5e6616f","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"0fc6ddb9-3f30-11e6-a52a-b9e43b12b481","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc6ddba-3f30-11e6-a52a-8da7fe52a3e6","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (indent == null) {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc6ddbb-3f30-11e6-a52a-29361cec60cf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (findByObject(key)) != null;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc6ddbc-3f30-11e6-a52a-81b74e82a553","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[638,639,640],"tindex":"0fc6ddbd-3f30-11e6-a52a-e75ed04ea8d7","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc6ddbe-3f30-11e6-a52a-e9fcc4da5ac4","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc704cf-3f30-11e6-a52a-157a487bc056","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == from) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"from","java.util.Date.class":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc704d0-3f30-11e6-a52a-632dc908fd65","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl"},"failures":[],"tindex":"0fc704d1-3f30-11e6-a52a-6dc5e32e8ff4","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.remove(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc704d2-3f30-11e6-a52a-91edd1fde731","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.reflect.ParameterizedType) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc704d3-3f30-11e6-a52a-a17e7aa3c493","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if ((key instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0fc72be4-3f30-11e6-a52a-17bc2e76933a","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[186,188,316,319,597,600],"tindex":"0fc72be5-3f30-11e6-a52a-69f20aa77821","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc72be6-3f30-11e6-a52a-37902ae12abc","method":{"position":"com.google.gson.stream.JsonReader:1101","type":"CtMethodImpl","sourcecode":"private void skipQuotedValue(char quote) throws java.io.IOException {\n    if (!(java.lang.Character.isUpperCase(quote))) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            do {\n                int int = int;\n                int int = int;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        return ;\n                    } else if (c == '\\\\') {\n                        int = p;\n                        readEscapeCharacter();\n                        p = int;\n                        l = int;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                int = p;\n            } while (fillBuffer(1) );\n            throw syntaxError(\"Unterminated string\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[],"tindex":"0fc72be7-3f30-11e6-a52a-113804a3579b","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1368","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0fc72be8-3f30-11e6-a52a-b5e659338edc","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337094001/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsLoaded":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":86,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
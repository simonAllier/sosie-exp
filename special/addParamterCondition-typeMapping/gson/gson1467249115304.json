{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":455,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":596,"com.google.gson.functional.StringTest.testStringValueDeserialization":594,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":640,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":8,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":554,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":273,"com.google.gson.stream.JsonWriterTest.testRepeatedName":637,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":91,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":396,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":180,"com.google.gson.MixedStreamTest.testWriteLenient":621,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":1,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":154,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":130,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":146,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":356,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":321,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":90,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":500,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":413,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":282,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":107,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":237,"com.google.gson.functional.ObjectTest.testSingletonLists":354,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":555,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":266,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":597,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":633,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":174,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":73,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":570,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":374,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":68,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":324,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":577,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":653,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":610,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":401,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":313,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":435,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":209,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":56,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":258,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":427,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":208,"com.google.gson.functional.EnumTest.testEnumCaseMapping":89,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":595,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":627,"com.google.gson.functional.JsonTreeTest.testToJsonTree":32,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":257,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":35,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":255,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":530,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":650,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":483,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":547,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":239,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":4,"com.google.gson.functional.ObjectTest.testNullDeserialization":386,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":405,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":607,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":368,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":64,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":334,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":274,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":375,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":425,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":230,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":383,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":63,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":573,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":234,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":339,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":569,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":318,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":651,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":34,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":345,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":387,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":480,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":553,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":181,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":201,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":310,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":544,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":513,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":160,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":221,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":187,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":319,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":311,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":382,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":474,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":52,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":62,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":362,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":588,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":98,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":217,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":278,"com.google.gson.metrics.PerformanceTest.testDummy":66,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":504,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":15,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":105,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":434,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":162,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":70,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":223,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":561,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":546,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":229,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":408,"com.google.gson.functional.CollectionTest.testSetDeserialization":145,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":414,"com.google.gson.functional.EnumTest.testEnumSet":80,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":367,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":506,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":302,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":106,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":161,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":535,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":376,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":55,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":104,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":315,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":433,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":326,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":79,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":422,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":327,"com.google.gson.functional.MapTest.testHashMapDeserialization":191,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":271,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":559,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":27,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":457,"com.google.gson.MixedStreamTest.testReadNulls":622,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":116,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":453,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":77,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":509,"com.google.gson.functional.MapTest.testSortedMap":212,"com.google.gson.functional.MapTest.testMapSerialization":207,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":456,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":51,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":308,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":444,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":42,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":486,"com.google.gson.functional.MapTest.testSerializeMaps":194,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":592,"com.google.gson.functional.MapTest.testComplexKeysSerialization":218,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":505,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":44,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":222,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":655,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":492,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":87,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":407,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":14,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":128,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":74,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":85,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":30,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":438,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":93,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":385,"com.google.gson.functional.MapTest.testStringKeyDeserialization":220,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":490,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":166,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":341,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":224,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":277,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":272,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":417,"com.google.gson.functional.PrettyPrintingTest.testMap":436,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":133,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":75,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":526,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":67,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":491,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":652,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":600,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":604,"com.google.gson.functional.CollectionTest.testQueueSerialization":137,"com.google.gson.functional.MapTest.testMapSerializationEmpty":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":541,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":303,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":642,"com.google.gson.functional.MapTest.testMapOfMapSerialization":206,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":549,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":142,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":635,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":305,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":646,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":175,"com.google.gson.functional.FieldNamingTest.testIdentity":593,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":598,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":163,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":463,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":388,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":97,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":156,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":353,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":515,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":260,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":57,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":226,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":599,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":300,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":398,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":564,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":536,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":543,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":572,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":645,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":188,"com.google.gson.functional.MapTest.testMapSubclassSerialization":193,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":337,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":114,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":451,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":508,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":292,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":419,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":575,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":618,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":182,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":525,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":72,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":103,"com.google.gson.functional.EnumTest.testEnumSubclass":83,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":314,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":69,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":372,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":259,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":225,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":320,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":165,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":48,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":123,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":262,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":400,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":24,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":38,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":298,"com.google.gson.stream.JsonWriterTest.testTwoNames":634,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":399,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":247,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":59,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":482,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":304,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":366,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":96,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":296,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":638,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":565,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":355,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":190,"com.google.gson.MixedStreamTest.testWriteNulls":619,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":481,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":185,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":476,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":100,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":406,"com.google.gson.CommentsTest.testParseComments":629,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":170,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":240,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":357,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":317,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":488,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":497,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":443,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":211,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":602,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":403,"com.google.gson.MixedStreamTest.testReadInvalidState":616,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":410,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":112,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":567,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":445,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":270,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":493,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":40,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":494,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":287,"com.google.gson.JsonArrayTest.testRemove":53,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":644,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":551,"com.google.gson.functional.MapTest.testMapDeserialization":200,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":545,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":441,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":189,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":236,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":199,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":254,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":12,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":10,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":129,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":84,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":514,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":523,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":373,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":389,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":118,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":420,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":531,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":111,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":127,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":397,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":210,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":571,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":256,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":172,"com.google.gson.functional.PrimitiveTest.testShortSerialization":335,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":242,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":323,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":429,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":293,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":21,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":269,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":589,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":82,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":132,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":450,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":195,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":286,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":152,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":343,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":183,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":562,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":29,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":626,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":350,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":344,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":648,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":95,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":164,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":253,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":519,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":576,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":631,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":329,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":517,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":167,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":299,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":394,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":361,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":88,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":120,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":507,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":532,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":415,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":23,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":168,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":9,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":552,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":26,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":276,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":538,"com.google.gson.stream.JsonWriterTest.testNullStringValue":3,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":557,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":134,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":250,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":263,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":330,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":301,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":347,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":178,"com.google.gson.JsonPrimitiveTest.testEquals":50,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":11,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":81,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":461,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":446,"com.google.gson.functional.MapTest.testGeneralMapField":214,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":359,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":473,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":349,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":227,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":416,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":563,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":213,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":233,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":520,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":325,"com.google.gson.MixedStreamTest.testReadMixedStreamed":625,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":202,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":533,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":58,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":147,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":511,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":502,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":306,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":428,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":550,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":203,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":586,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":192,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":171,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":348,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":469,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":580,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":636,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":289,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":630,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":548,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":186,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":49,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":464,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":518,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":43,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":244,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":177,"com.google.gson.functional.ObjectTest.testNestedDeserialization":395,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":380,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":402,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":458,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":246,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":426,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":346,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":496,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":92,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":204,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":601,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":102,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":333,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":119,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":158,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":184,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":150,"com.google.gson.functional.ObjectTest.testNullSerialization":369,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":122,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":585,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":196,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":7,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":261,"com.google.gson.functional.MapTest.testInterfaceTypeMap":6,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":484,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":418,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":16,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":264,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":86,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":647,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":126,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":421,"com.google.gson.MixedStreamTest.testReadClosed":617,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":521,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":424,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":280,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":46,"com.google.gson.MixedStreamTest.testWriteClosed":624,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":139,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":460,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":252,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":360,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":574,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":108,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":249,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":499,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":392,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":495,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":568,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":17,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":363,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":138,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":37,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":581,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":309,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":583,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":124,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":558,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":465,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":351,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":643,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":285,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":528,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":409,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":470,"com.google.gson.functional.CollectionTest.testQueueDeserialization":153,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":498,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":291,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":307,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":25,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":606,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":454,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":566,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":582,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":5,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":384,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":641,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":540,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":235,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":393,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":131,"com.google.gson.functional.MapTest.testRawMapSerialization":216,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":615,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":556,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":649,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":117,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":378,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":449,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":13,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":656,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":71,"com.google.gson.functional.PrimitiveTest.testByteSerialization":332,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":475,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":613,"com.google.gson.ObjectTypeAdapterTest.testSerialize":632,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":231,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":0,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":275,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":39,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":155,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":36,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":45,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":485,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":590,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":54,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":109,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":603,"com.google.gson.functional.MapTest.testMapWithQuotes":205,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":527,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":605,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":159,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":510,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":176,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":654,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":524,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":412,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":238,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":99,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":391,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":442,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":316,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":537,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":20,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":529,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":539,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":579,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":328,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":78,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":144,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":2,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":101,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":471,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":121,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":466,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":47,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":584,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":452,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":76,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":113,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":265,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":173,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":377,"com.google.gson.functional.ObjectTest.testNestedSerialization":379,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":179,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":232,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":279,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":609,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":468,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":215,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":447,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":516,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":65,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":623,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":370,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":462,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":342,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":251,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":542,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":61,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":281,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":628,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":522,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":578,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":608,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":19,"com.google.gson.functional.CollectionTest.testSetSerialization":149,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":228,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":169,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":439,"com.google.gson.functional.StringTest.testStringValueSerialization":611,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":612,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":18,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":94,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":135,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":472,"com.google.gson.MixedStreamTest.testWriteInvalidState":620,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":364,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":284,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":290,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":489,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":587,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":534,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":591,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":404,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":467,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":28,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":423,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":560,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":614,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":198,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":639,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":430,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":477},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"a2a95420-3e5f-11e6-8e2a-d73d6a714ff1","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a2a9a241-3e5f-11e6-8e2a-bb4156e5c381","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"a2a9a242-3e5f-11e6-8e2a-e1cea1eceb23","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[0],"tindex":"a2a9c953-3e5f-11e6-8e2a-55018c32a998","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (!(cls.isInterface())) {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonParser:60","type":"CtBinaryOperatorImpl","sourcecode":"(!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"a2a9c954-3e5f-11e6-8e2a-dff47cb6c6ad","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((!(typeAdapter.isJsonNull())) && ((typeAdapter.peek()) != typeAdapter)) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"typeAdapter","jsonReader":"typeAdapter","element":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"a2a9c955-3e5f-11e6-8e2a-efef00d4ccde","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a2a9f066-3e5f-11e6-8e2a-d7b5c2f22854","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:361","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"a2a9f067-3e5f-11e6-8e2a-571a10872aa3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        {\n            if (targetSize == targetSize) {\n                {\n                    int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n                    int = treeCapacity - targetSize;\n                    int = 0;\n                    int = 0;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"targetSize","com.google.gson.stream.JsonReader.PEEKED_NONE":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1362","type":"CtBinaryOperatorImpl","sourcecode":"c == '/'"},"failures":[1,2],"tindex":"a2aa6598-3e5f-11e6-8e2a-4b39dcac1e77","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == '/') {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"style"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"tindex":"a2aa8ca9-3e5f-11e6-8e2a-7fd6fa3c43cc","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value != null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a2aa8caa-3e5f-11e6-8e2a-93c671f59be9","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:64","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"a2aadacb-3e5f-11e6-8e2a-69d9cc4174bb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if ((key.peek()) == key) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"key","com.google.gson.stream.JsonToken.NULL":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"a2ab01dc-3e5f-11e6-8e2a-a1c318b5b7da","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[23,24,25,26,27],"tindex":"a2ab01dd-3e5f-11e6-8e2a-7bcb1482a0ee","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (clazz == clazz) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a2ab01de-3e5f-11e6-8e2a-8500ead8af37","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[28,29],"tindex":"a2ab28ef-3e5f-11e6-8e2a-091b4c392da1","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"tindex":"a2ab28f0-3e5f-11e6-8e2a-8d1ab66f3844","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj instanceof java.lang.Class<?>) {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a2ab5001-3e5f-11e6-8e2a-2f0119375597","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"a2ab5002-3e5f-11e6-8e2a-fb992514fd4a","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"a2ab5003-3e5f-11e6-8e2a-8beec003aeeb","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value != null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,4,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,5,201,202,203,204,205,206,207,208,209,210,211,212,6,213,7,214,215,216,217,218,219,220,221,222,223,224,8,225,226,227,228,229,230,231,232,233,234,235,9,236,237,10,238,239,11,12,240,241,242,243,13,244,14,245,246,247,248,15,249,16,250,251,252,253,254,17,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,19,481,482,483,484,485,486,487,488,489,490,20,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,31,514,515,32,516,517,518,519,520,521,33,522,523,524,525,526,527,528,529,34,530,531,532,533,534,535,21,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,1,563,564,22,2,565,566,567,568,569,570,571,572,35,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,27,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629],"tindex":"a2ab9e24-3e5f-11e6-8e2a-8b86ba3b85d6","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a2ac1355-3e5f-11e6-8e2a-6fcec786c5d3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a2ac1356-3e5f-11e6-8e2a-0117c1215269","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[13,369],"tindex":"a2ac3a67-3e5f-11e6-8e2a-791f1fd99753","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"jsonElement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[29,630,631,55,59,60,632,633,62,634,635,3,636,637,638,639,640,641,642,63,64,73,79,86,91,93,97,98,99,101,102,103,104,105,106,108,109,110,112,115,116,117,118,120,121,122,125,127,130,132,140,146,149,165,166,167,169,170,173,177,178,179,193,194,197,199,5,205,206,207,210,211,6,213,7,214,215,216,218,221,224,8,225,229,230,231,234,235,9,11,12,241,242,243,14,15,249,16,254,17,353,354,357,360,363,367,370,376,378,379,382,387,389,390,392,397,400,401,404,405,406,407,409,643,18,644,645,646,410,412,413,414,415,419,647,648,649,650,651,652,653,436,437,438,442,445,447,450,451,452,654,453,456,459,463,464,466,469,487,494,495,496,497,503,509,512,513,514,516,534,548,550,552,561,22,568,576,579,580,583,587,588,589,590,591,592,593,612,613,614,615,618],"tindex":"a2ac3a68-3e5f-11e6-8e2a-196014f9643f","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"a2ac3a69-3e5f-11e6-8e2a-d57806c0e3b5","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"a2ac617a-3e5f-11e6-8e2a-3de6aaed6233","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"a2ac617b-3e5f-11e6-8e2a-6f5e39560487","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"a2ac617c-3e5f-11e6-8e2a-8703e37e72b8","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o == o) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"o","com.google.gson.LongSerializationPolicy.DEFAULT":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a2ac617d-3e5f-11e6-8e2a-adb75a7e9a6a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"a2ac617e-3e5f-11e6-8e2a-b1d0d3d51145","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a2ac888f-3e5f-11e6-8e2a-adda428d7bf2","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"a2ac8890-3e5f-11e6-8e2a-113e7e4c174d","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement instanceof com.google.gson.JsonArray) {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[55,59,60,632,62,72,73,79,86,87,91,93,94,96,97,98,99,100,102,103,104,105,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,140,145,146,149,154,155,157,158,160,164,165,167,169,178,179,180,181,182,183,184,5,209,6,7,214,218,8,225,227,228,229,230,231,234,235,9,236,237,11,12,240,241,243,14,245,246,247,248,15,249,16,250,251,252,253,254,17,255,329,353,354,355,356,357,358,359,360,361,362,363,365,367,368,370,372,374,376,377,378,379,381,382,383,384,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,404,405,406,407,408,409,643,18,644,645,646,410,412,413,414,419,431,432,433,437,438,442,444,445,446,447,449,450,451,452,654,453,455,456,458,459,460,461,463,464,466,467,469,487,488,489,494,495,496,497,498,499,501,502,503,504,509,511,512,513,31,514,515,32,516,517,522,523,532,21,542,550,22,568,576,577,578,579,580,581,582,583,587,588,589,590,591,592,593,612,615,618,620,624,625,626],"tindex":"a2ac8891-3e5f-11e6-8e2a-3721b17912da","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:709","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT)"},"failures":[],"tindex":"a2acafa2-3e5f-11e6-8e2a-a3834a37ee52","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        {\n            if (targetSize == targetSize) {\n                {\n                    int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n                    int = treeCapacity - targetSize;\n                    int = 0;\n                    int = 0;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"targetSize","com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"a2acafa3-3e5f-11e6-8e2a-573bec1ada67","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a2acafa4-3e5f-11e6-8e2a-c57f4f78ea31","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[655,29,630,631,656,154,155,157,158,8,246,247,248,250,251,255,401,455,498,499,509,512,513,31,514,515,32],"tindex":"a2acafa5-3e5f-11e6-8e2a-c3fafd15f9ae","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"a2acd6b6-3e5f-11e6-8e2a-57e4bafcb886","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"a2acd6b7-3e5f-11e6-8e2a-d1e1f8d015ab","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value.getRawType().equals(value.getRawType())) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"value","to":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[],"tindex":"a2acfdc8-3e5f-11e6-8e2a-9be16a9e83a7","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (clazz == clazz) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz","toResolve":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a2acfdc9-3e5f-11e6-8e2a-69ffa486ea7a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"a2acfdca-3e5f-11e6-8e2a-75dc52694b41","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"a2acfdcb-3e5f-11e6-8e2a-857f1bbf5d81","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a2ad24dc-3e5f-11e6-8e2a-759e0269ce69","method":{"position":"com.google.gson.stream.JsonReader:1572","type":"CtMethodImpl","sourcecode":"private java.io.IOException syntaxError(java.lang.String message) throws java.io.IOException {\n    if (message == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new com.google.gson.stream.MalformedJsonException(((((((message + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())) + \" path \") + (getPath())));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":45,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
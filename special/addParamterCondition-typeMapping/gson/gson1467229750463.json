{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":185,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":483,"com.google.gson.functional.StringTest.testStringValueDeserialization":616,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":640,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":80,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":552,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":604,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":525,"com.google.gson.stream.JsonWriterTest.testRepeatedName":637,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":16,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":147,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":69,"com.google.gson.MixedStreamTest.testWriteLenient":318,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":471,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":58,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":52,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":56,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":116,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":557,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":348,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":448,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":166,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":532,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":326,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":29,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":91,"com.google.gson.functional.ObjectTest.testSingletonLists":114,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":467,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":484,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":520,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":628,"com.google.gson.stream.JsonWriterTest.testStrings":642,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":505,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":12,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":611,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":129,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":1,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":308,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":228,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":631,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":624,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":152,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":430,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":553,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":75,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":335,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":514,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":426,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":295,"com.google.gson.functional.EnumTest.testEnumCaseMapping":347,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":482,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":494,"com.google.gson.functional.JsonTreeTest.testToJsonTree":216,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":513,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":612,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":111,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":456,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":629,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":314,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":521,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":602,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":372,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":268,"com.google.gson.functional.ObjectTest.testNullDeserialization":574,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":154,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":622,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":126,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":340,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":400,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":526,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":412,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":424,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":85,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":136,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":339,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":594,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":87,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":563,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":562,"com.google.gson.JsonParserTest.testParseString":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":610,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":392,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":630,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":386,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":567,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":597,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":138,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":5,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":540,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":70,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":509,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":550,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":601,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":212,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":62,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":303,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":393,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":506,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":551,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":135,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":439,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":10,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":122,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":236,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":21,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":300,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":378,"com.google.gson.metrics.PerformanceTest.testDummy":498,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":208,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":102,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":27,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":577,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":331,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":254,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":470,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":579,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":465,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":84,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":157,"com.google.gson.functional.CollectionTest.testSetDeserialization":55,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":167,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":125,"com.google.gson.functional.EnumTest.testEnumSet":256,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":591,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":543,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":28,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":277,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":599,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":130,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":6,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":26,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":554,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":171,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":559,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":13,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":421,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":396,"com.google.gson.functional.MapTest.testHashMapDeserialization":508,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":523,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":607,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":481,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":580,"com.google.gson.MixedStreamTest.testReadNulls":627,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":38,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":184,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":209,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":255,"com.google.gson.functional.MapTest.testSortedMap":297,"com.google.gson.functional.MapTest.testMapSerialization":294,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":186,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":175,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":548,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":586,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":240,"com.google.gson.functional.MapTest.testSerializeMaps":363,"com.google.gson.functional.MapTest.testComplexKeysSerialization":79,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":590,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":304,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":447,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":15,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":156,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":97,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":50,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":345,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":501,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":173,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":327,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":17,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":573,"com.google.gson.functional.MapTest.testStringKeyDeserialization":302,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":587,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":355,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":404,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":306,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":529,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":417,"com.google.gson.functional.PrettyPrintingTest.testMap":431,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":524,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":263,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":454,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":499,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":342,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":588,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":646,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":488,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":617,"com.google.gson.functional.CollectionTest.testQueueSerialization":266,"com.google.gson.functional.MapTest.testMapSerializationEmpty":301,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":462,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":544,"com.google.gson.functional.MapTest.testMapOfMapSerialization":365,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":384,"com.google.gson.JavaSerializationTest.testMapIsSerializable":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":603,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":270,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":163,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":389,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":359,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":334,"com.google.gson.functional.FieldNamingTest.testIdentity":241,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":485,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":278,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":191,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":139,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":20,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":113,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":215,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":353,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":515,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":336,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":368,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":486,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":149,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":609,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":600,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":463,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":477,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":283,"com.google.gson.functional.MapTest.testMapSubclassSerialization":362,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":403,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":36,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":181,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":592,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":168,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":244,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":479,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":538,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":71,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":571,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":595,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":11,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":25,"com.google.gson.functional.EnumTest.testEnumSubclass":259,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":390,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":128,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":343,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":375,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":81,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":556,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":64,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":45,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":516,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":151,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":541,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":150,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":100,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":7,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":584,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":309,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":545,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":19,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":385,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":638,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":473,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":115,"com.google.gson.MixedStreamTest.testWriteNulls":493,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":507,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":313,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":281,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":441,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":23,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":155,"com.google.gson.CommentsTest.testParseComments":320,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":324,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":94,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":117,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":356,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":197,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":202,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":555,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":578,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":366,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":487,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":575,"com.google.gson.MixedStreamTest.testReadInvalidState":625,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":164,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":34,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":475,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":176,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":377,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":589,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":199,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":381,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":161,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":397,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":466,"com.google.gson.functional.MapTest.testMapDeserialization":290,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":464,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":311,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":361,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":90,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":647,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":109,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":289,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":93,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":371,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":51,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":214,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":220,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":140,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":411,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":40,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":419,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":457,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":33,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":49,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":148,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":172,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":296,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":476,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":512,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":279,"com.google.gson.functional.PrimitiveTest.testShortSerialization":401,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":373,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":558,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":333,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":428,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":539,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":222,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":522,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":237,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":258,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":53,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":180,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":285,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":535,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":352,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":405,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":72,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":608,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":248,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":632,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":408,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":566,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":644,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":349,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":63,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":108,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":141,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":450,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":634,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":112,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":218,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":65,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":542,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":145,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":121,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":261,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":42,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":449,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":221,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":415,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":504,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":4,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":95,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":528,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":2,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":211,"com.google.gson.stream.JsonWriterTest.testNullStringValue":635,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":606,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":105,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":264,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":517,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":561,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":388,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":406,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":67,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":92,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":257,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":190,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":177,"com.google.gson.functional.MapTest.testGeneralMapField":78,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":119,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":438,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":569,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":82,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":196,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":317,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":298,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":307,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":451,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":395,"com.google.gson.MixedStreamTest.testReadMixedStreamed":247,"com.google.gson.JsonObjectTest.testDeepCopy":329,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":291,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":598,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":210,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":337,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":351,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":206,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":546,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":427,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":251,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":224,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":292,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":480,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":284,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":357,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":407,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":195,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":231,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":636,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":536,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":633,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":3,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":282,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":192,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":593,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":511,"com.google.gson.functional.ObjectTest.testNestedDeserialization":146,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":280,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":413,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":414,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":187,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":99,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":425,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":568,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":201,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":293,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":502,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":618,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":24,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":399,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":41,"com.google.gson.JavaSerializationTest.testListIsSerializable":253,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":61,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":73,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":274,"com.google.gson.functional.ObjectTest.testNullSerialization":410,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":44,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":615,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":286,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":77,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":376,"com.google.gson.functional.MapTest.testInterfaceTypeMap":76,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":585,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":418,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":104,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":518,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":14,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":429,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":48,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":420,"com.google.gson.MixedStreamTest.testReadClosed":626,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":452,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":423,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":530,"com.google.gson.MixedStreamTest.testWriteClosed":246,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":189,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":350,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":107,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":613,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":30,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":103,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":204,"com.google.gson.stream.JsonWriterTest.testLongs":0,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":143,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":226,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":110,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":123,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":267,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":232,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":549,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":234,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":46,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":468,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":332,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":159,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":570,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":380,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":596,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":158,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":436,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":203,"com.google.gson.functional.CollectionTest.testQueueDeserialization":276,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":383,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":547,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":621,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":434,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":474,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":74,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":137,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":641,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":461,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":88,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":144,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":262,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":243,"com.google.gson.functional.MapTest.testRawMapSerialization":367,"com.google.gson.JsonParserTest.testParseReader":322,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":605,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":645,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":39,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":132,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":179,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":374,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":249,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":338,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":344,"com.google.gson.functional.PrimitiveTest.testByteSerialization":398,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":440,"com.google.gson.ObjectTypeAdapterTest.testSerialize":9,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":491,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":86,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":527,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":59,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":445,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":238,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":31,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":496,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":619,"com.google.gson.functional.MapTest.testMapWithQuotes":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":455,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":533,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":620,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":354,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":315,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":360,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":183,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":564,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":453,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":165,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":510,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":22,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":142,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":174,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":459,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":572,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":124,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":225,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":316,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":60,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":460,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":560,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":346,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":272,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":582,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":321,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":472,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":43,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":193,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":614,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":182,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":500,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":35,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":519,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":358,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":131,"com.google.gson.functional.ObjectTest.testNestedSerialization":133,"com.google.gson.JsonObjectTest.testAddingStringProperties":330,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":68,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":369,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":379,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":623,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":435,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":299,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":178,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":217,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":319,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":341,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":643,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":127,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":312,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":565,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":106,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":223,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":495,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":497,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":531,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":219,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":229,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":489,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":444,"com.google.gson.functional.CollectionTest.testSetSerialization":57,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":83,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":66,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":432,"com.google.gson.functional.StringTest.testStringValueSerialization":490,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":242,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":18,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":160,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":265,"com.google.gson.MixedStreamTest.testWriteInvalidState":245,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":581,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":409,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":534,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":198,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":537,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":458,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":239,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":153,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":325,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":194,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":422,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":469,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":492,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":288,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":639,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":442,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":576},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8c5116a2-3e32-11e6-9606-89cb14c62840","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[0,1,2,3,4,5],"tindex":"8c5164c3-3e32-11e6-9606-11c1a93e30e9","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248],"tindex":"8c5164c4-3e32-11e6-9606-652cd43262e1","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8c518bd5-3e32-11e6-9606-05405c9e54e3","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[249,250,9,251,252,253,254,255,256,257,258,259,260,261,16,17,18,19,20,21,22,24,25,26,30,31,32,34,37,38,39,40,41,42,43,44,45,46,50,51,52,262,263,264,265,266,267,268,54,269,270,271,272,55,273,57,274,275,276,58,59,60,61,62,277,278,64,279,280,67,68,281,282,283,284,285,286,287,288,289,290,74,291,292,293,294,295,75,296,297,76,298,77,78,299,300,79,301,302,303,304,305,306,80,81,83,85,89,92,93,97,100,103,105,107,108,109,111,307,308,114,124,309,125,135,140,141,144,153,154,155,156,157,158,159,160,161,162,163,164,310,165,166,167,168,169,172,311,174,179,181,182,183,312,195,313,314,199,200,201,202,203,204,209,315,210,211,212,214,217,218,219,220,316,222,223,224,317,226,235,236,318,319,320],"tindex":"8c51b2e6-3e32-11e6-9606-ed7a11c841b6","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type == type) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type","b":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[321],"tindex":"8c51d9f7-3e32-11e6-9606-33fa06ad48bd","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if ((!(src.isJsonNull())) && ((src.peek()) != src)) {\n        {\n            if (src instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src instanceof java.lang.Number) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return toJsonTree(src);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"8c520108-3e32-11e6-9606-a390ad37902c","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"8c520109-3e32-11e6-9606-6d8f2606df73","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8c52281a-3e32-11e6-9606-9dee500c6f51","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[],"tindex":"8c52281b-3e32-11e6-9606-a9e77131a356","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8c52281c-3e32-11e6-9606-654fab72bf4f","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"8c52281d-3e32-11e6-9606-95a721a186e7","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"8c52281e-3e32-11e6-9606-411a0ac3e377","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if ((!(src.isJsonNull())) && ((src.peek()) != src)) {\n        {\n            if (src instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src instanceof java.lang.Number) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return toJsonTree(src);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[322,323,324,325,326,327,328,329,330,35,58,59,60,61,331,99,100,101,105,106,111,152,176,177,178,183,185,332,203,204],"tindex":"8c524f2f-3e32-11e6-9606-75ce409e4d47","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8c524f30-3e32-11e6-9606-ad9d9c09a228","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonParser:60","type":"CtBinaryOperatorImpl","sourcecode":"(!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"8c524f31-3e32-11e6-9606-f947efe450ab","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if ((!(src.isJsonNull())) && ((src.peek()) != src)) {\n        {\n            if (src instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src instanceof java.lang.Number) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return toJsonTree(src);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"src","jsonReader":"src","element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"8c527642-3e32-11e6-9606-9fe492098e2c","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"8c527643-3e32-11e6-9606-09b2fd4d4027","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if ((key != key) && (token != key)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"key","token":"key","com.google.gson.stream.JsonToken.NUMBER":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"8c527644-3e32-11e6-9606-c7402bd94fde","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property != null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[333,334,6,335,336,337,249,250,338,7,8,10,339,340,341,342,1,343,344,12,345,346,13,256,257,258,259,14,261,347,348,16,17,349,20,21,22,321,24,25,26,27,28,30,31,32,34,37,38,39,40,42,43,44,47,49,52,262,53,263,266,267,350,268,54,271,56,351,57,274,352,58,59,353,60,61,354,277,64,355,65,66,356,357,358,359,360,280,67,68,361,362,363,287,289,74,364,365,294,296,366,76,298,77,78,299,367,79,301,303,306,80,81,368,82,84,85,86,369,370,87,88,89,371,372,92,93,95,373,96,374,97,99,100,101,102,103,104,105,106,109,110,111,375,376,307,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,113,114,117,120,123,409,125,410,127,411,412,130,132,133,413,135,138,140,141,143,148,151,152,414,153,154,155,156,158,159,160,161,162,163,164,310,165,166,167,415,416,417,418,168,419,420,421,422,423,424,425,426,427,428,429,430,431,172,173,432,433,311,174,176,178,180,181,182,183,184,434,185,186,188,191,192,193,435,195,436,437,438,439,440,441,442,443,444,313,445,196,198,446,447,199,200,201,202,203,204,448,207,449,209,211,212,213,214,215,216,217,450,451,452,453,454,455,316,456,457,458,222,459,2,460,461,462,463,464,465,3,224,466,4,5,467,468,469,470,471,317,225,472,473,474,475,226,476,477,478,479,227,230,231,234,480,235,236,481,237,238,239,240,241,482,483,484,485,486,487,488,489,490,242,491,492,243,244,493,245,318,319,246,494,495],"tindex":"8c527645-3e32-11e6-9606-43e01dec1cec","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[496,6,335,336,337,7,8,497,10,339,340,341,498,342,1,343,254,344,11,12,345,499,500,255,346,13,256,257,258,259,260,501,14,15,261,347,348,16,502,17,18,349,19,20,21,22,23,321,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,262,53,263,264,265,503,266,267,350,268,54,269,270,271,272,55,56,351,273,57,274,275,352,276,58,59,353,60,61,354,62,277,331,278,63,64,355,65,504,66,356,357,279,358,505,359,360,280,67,68,69,70,71,72,73,281,282,506,283,361,507,508,284,362,363,285,286,287,288,289,290,74,509,291,292,293,364,365,294,295,75,296,366,297,76,298,77,78,299,367,300,79,301,302,303,304,305,306,80,81,368,82,83,84,85,86,369,370,87,88,89,90,91,371,510,372,92,93,94,95,373,96,374,511,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,512,513,514,375,515,376,516,517,518,519,520,307,521,522,377,523,524,525,526,527,528,529,378,379,530,531,532,533,534,380,535,381,382,536,537,383,538,539,384,540,385,386,541,542,387,388,543,544,545,389,546,547,548,549,550,551,552,553,390,554,391,555,392,393,556,557,394,558,308,395,559,396,560,112,561,397,398,399,400,401,402,403,562,563,564,404,565,405,566,567,568,406,407,569,408,570,571,113,114,115,116,117,118,119,120,121,122,123,409,124,309,125,126,410,127,572,128,411,129,412,130,131,132,133,413,134,135,136,137,573,574,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,414,575,153,154,155,156,157,158,164,310,165,166,167,415,416,417,418,168,419,420,421,422,423,424,425,426,427,428,576,169,170,171,577,430,431,172,173,432,433,311,174,578,175,176,177,178,579,179,180,181,182,184,434,185,186,580,187,188,189,190,312,191,192,332,193,194,435,195,436,437,581,438,439,440,441,442,582,583,443,444,313,584,314,585,445,586,196,197,198,587,446,588,447,589,199,200,201,202,203,204,448,205,206,207,208,590,591,449,592,209,315,210,211,212,213,214,215,216,217,218,593,450,451,452,594,219,220,453,595,454,455,596,316,597,456,457,221,598,458,599,222,600,459,2,460,461,462,223,463,601,464,465,602,3,603,224,466,4,5,604,467,605,606,468,607,469,470,608,471,317,609,225,472,473,474,475,226,610,611,476,477,612,478,613,479,227,228,229,230,231,232,233,234,614,615,480,235,236,481,237,238,239,240,241,616,482,483,484,485,486,617,618,487,619,488,620,621,622,489,623,624,490,242,491,492,243,625,626,244,493,245,318,627,319,246,247,248,494,495,320],"tindex":"8c529d56-3e32-11e6-9606-0731abbfbea3","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"8c52c467-3e32-11e6-9606-259419106fe2","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"8c52c468-3e32-11e6-9606-4da8c6dab4bc","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:303","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[9,628,16,20,22,25,26,31,32,44,262,268,363,74,296,76,298,77,299,80,89,371,92,93,95,96,97,99,100,101,102,104,105,106,110,111,138,160,429,629,630,631,193,438,444,198,446,199,202,203,204,215,217,225,242],"tindex":"8c52c469-3e32-11e6-9606-279da324a14e","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value != null) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8c52c46a-3e32-11e6-9606-d35932f8f5bc","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"8c52c46b-3e32-11e6-9606-cb1bf39db240","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"8c52eb7c-3e32-11e6-9606-dd04de4909b4","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if ((memberName.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:683","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE)"},"failures":[],"tindex":"8c52eb7d-3e32-11e6-9606-cb351f330212","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (length == length) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"length","com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1397","type":"CtBinaryOperatorImpl","sourcecode":"c == '#'"},"failures":[38,43,45,51,237,240],"tindex":"8c52eb7e-3e32-11e6-9606-25bb6a8c7890","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (indexOfSubstring == '#') {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"indexOfSubstring"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:122","type":"CtBinaryOperatorImpl","sourcecode":"o == (com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED)"},"failures":[],"tindex":"8c52eb7f-3e32-11e6-9606-b14aa5a956d3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o == o) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED":"o","o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8c52eb80-3e32-11e6-9606-1761dc9b8d06","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"8c531291-3e32-11e6-9606-abe52f427f6b","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.reflect.ParameterizedType) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[227,228,229,230,231,232,233,234],"tindex":"8c531292-3e32-11e6-9606-7f0c95fc0855","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"8c531293-3e32-11e6-9606-49e8513ff7d1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[458],"tindex":"8c5339a4-3e32-11e6-9606-db34f4a4e3ef","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"8c5339a5-3e32-11e6-9606-072df71d2193","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"8c5339a6-3e32-11e6-9606-0bfc065e0446","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"8c5339a7-3e32-11e6-9606-ed801b28d219","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[632,633,634,6,337,7,8,9,628,10,635,636,637,638,639,640,641,642,643,339,340,341,342,344,12,13,256,257,258,259,14,261,347,348,16,17,20,21,22,321,24,25,26,27,28,30,31,32,34,37,38,39,40,42,43,44,47,49,52,262,53,266,350,268,54,271,56,351,57,352,354,277,64,355,65,66,356,357,358,280,67,68,362,363,287,289,74,364,365,294,366,76,77,78,299,367,79,303,306,80,81,84,85,86,369,370,87,88,89,371,92,93,95,373,96,97,102,103,104,109,110,307,377,380,396,113,114,117,120,123,125,127,130,132,133,135,138,140,141,143,148,151,152,414,153,154,155,156,158,159,160,161,162,163,164,165,166,167,415,416,417,418,168,419,421,422,423,424,425,426,427,428,429,644,645,629,630,646,631,431,172,173,174,176,178,180,181,182,183,184,186,188,191,192,193,435,195,436,437,440,441,443,444,445,196,446,199,200,201,202,448,207,449,209,211,212,214,217,450,451,452,454,455,316,456,457,458,459,460,461,462,463,464,465,3,224,466,4,467,468,470,471,317,472,473,474,475,226,476,478,227,230,231,234,480,235,236,237,238,239,240,241,482,483,484,485,486,487,488,489,490,242,491,492,243,244,319,647,494],"tindex":"8c5360b8-3e32-11e6-9606-15df13bc82ec","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8c5360b9-3e32-11e6-9606-f360e59a524f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"8c5360ba-3e32-11e6-9606-758d6b7767c6","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"8c5387cb-3e32-11e6-9606-9b36fbfe81ae","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"8c5387cc-3e32-11e6-9606-9732e1482075","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (o == null) {\n                {\n                    return containsKey(o);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"8c5387cd-3e32-11e6-9606-03e123e851cc","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (o == null) {\n                {\n                    return containsKey(o);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030317/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":44,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContainsAll":848,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetClearChangesMap":728,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapSize":865,"org.apache.commons.collections4.map.Flat3MapTest.testFailFastEntrySet":178,"org.apache.commons.collections4.map.HashedMapTest.testMapEquals":225,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetIteratorRemoveChangesMap":667,"org.apache.commons.collections4.map.LinkedMapTest.testMapPut":820,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndexBoundsChecking":797,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPut":899,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testShadok":142,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":610,"org.apache.commons.collections4.PredicateUtilsTest.testOnePredicateEx2":686,"org.apache.commons.collections4.PredicateUtilsTest.testOnePredicateEx3":687,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapGet":909,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":976,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":794,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEqualsNull":773,"org.apache.commons.collections4.CollectionUtilsTest.collect":90,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesRetainAll":338,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetRetainAll":290,"org.apache.commons.collections4.map.UnmodifiableMapTest.testDecorateFactory":740,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetRemoveAll":361,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetRemoveChangesMap":122,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray":651,"org.apache.commons.collections4.map.Flat3MapTest.testValuesRetainAll":206,"org.apache.commons.collections4.map.HashedMapTest.testMapPutNullKey":231,"org.apache.commons.collections4.map.MultiKeyMapTest.testMakeMap":713,"org.apache.commons.collections4.bag.TransformedBagTest.testBagAdd":581,"org.apache.commons.collections4.MapUtilsTest.testLazyMapTransformer":6,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiTailMapContains":380,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRetainAll":499,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetClearChangesMap":729,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetIteratorRemoveChangesMap":473,"org.apache.commons.collections4.map.ReferenceMapTest.testValuesRemoveChangesMap":313,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testEqualsNull":84,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapClear":893,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContainsAll":350,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapEquals":487,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":691,"org.apache.commons.collections4.bag.SynchronizedBagTest.testSimpleSerialization":1019,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testObjectHashCodeEqualsContract":53,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":760,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":941,"org.apache.commons.collections4.bag.TreeBagTest.testBagEquals":55,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetIteratorRemoveChangesMap":565,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapSize":904,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemoveChangesMap":212,"org.apache.commons.collections4.map.PredicatedMapTest.testMapRemove":972,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapPutNullValue":751,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIterator":1034,"org.apache.commons.collections4.CollectionUtilsTest.emptyIfNull":146,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapEquals":868,"org.apache.commons.collections4.map.LinkedMapTest.testMapRemove":822,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListRemoveByIndexBoundsChecking2":129,"org.apache.commons.collections4.map.LRUMapTest.testMapGet":831,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetClearChangesMap":197,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemoveAll":293,"org.apache.commons.collections4.map.Flat3MapTest.testMapIsEmpty":182,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesRemoveChangesMap":336,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":796,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsKey":504,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIterator":638,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":938,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_WithEmptyIterators":679,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapClear":758,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetIteratorRemoveChangesMap":123,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContainsAll":597,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsKey":425,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":441,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContainsAll":646,"org.apache.commons.collections4.PredicateUtilsTest.testEitherPredicateEx":685,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetIteratorRemoveChangesMap":291,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testValuesRemoveChangesMap":23,"org.apache.commons.collections4.map.CompositeMapTest.testMapSize":1039,"org.apache.commons.collections4.ClosureUtilsTest.testInvokeClosure":158,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsKey":467,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove1":241,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapEquals":114,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove2":242,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndexBoundsChecking2":344,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove3":243,"org.apache.commons.collections4.map.SingletonMapTest.testMapSize":960,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":357,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":605,"org.apache.commons.collections4.map.HashedMapTest.testMapContainsValue":224,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetIteratorRemoveChangesMap":407,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":761,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove3":525,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove2":524,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove1":523,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":951,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapGet":888,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContains":620,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemoveAll":599,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testEmptyBagCompatibility":82,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapToString":488,"org.apache.commons.collections4.map.Flat3MapTest.testMapClear":184,"org.apache.commons.collections4.map.MultiValueMapTest.testKeyedIterator":451,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMap":386,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapIsEmpty":110,"org.apache.commons.collections4.ClosureUtilsTest.testSwitchClosure":1047,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapPut":767,"org.apache.commons.collections4.bag.TransformedBagTest.testFullBagCompatibility":33,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMapEntrySet":371,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetClearChangesMap":309,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemove1":492,"org.apache.commons.collections4.map.Flat3MapTest.testMakeMap":181,"org.apache.commons.collections4.map.ReferenceMapTest.testMapClear":301,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemove3":494,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemove2":493,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains1":278,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesRemoveAll":285,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains2":279,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains3":280,"org.apache.commons.collections4.bag.TransformedBagTest.testEmptyBagCompatibility":32,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapEquals":956,"org.apache.commons.collections4.map.ReferenceMapTest.testValuesIteratorRemoveChangesMap":316,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapHashCode":748,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testMinimal":140,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContainsAll":642,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":539,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIterator":627,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove2":101,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove3":102,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove1":100,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemoveAll":213,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapSize":261,"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":298,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRetainAll":8,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testFullBagCompatibility":65,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetRetainAll":359,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":755,"org.apache.commons.collections4.list.SetUniqueListTest.testAdd":781,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIterator":659,"org.apache.commons.collections4.CollectionUtilsTest.testDisjunctionAsUnionMinusIntersection":149,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearBySubMap":385,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRetainAll":476,"org.apache.commons.collections4.bag.SynchronizedBagTest.testEmptyBagCompatibility":46,"org.apache.commons.collections4.map.Flat3MapTest.testKeySetClearChangesMap":196,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapHashCode":326,"org.apache.commons.collections4.map.UnmodifiableMapTest.testValuesRemoveAll":763,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagAdd":570,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIterator":572,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapToString":898,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapRemove":726,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsValue":717,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagHashCode":1007,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRemoveAll":734,"org.apache.commons.collections4.map.UnmodifiableMapTest.testValuesRetainAll":747,"org.apache.commons.collections4.map.HashedMapTest.testFailFastValues":218,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesIteratorRemoveChangesMap":693,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemoveAll":15,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":536,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetIteratorRemoveChangesMap":424,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEqualsHashBag":25,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testExecution":139,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapRemove":274,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetIteratorRemoveChangesMap":750,"org.apache.commons.collections4.bag.TransformedBagTest.testBagContainsAll":991,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":974,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionClear":169,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":762,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains1":730,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsValue":486,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains2":731,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains3":732,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":1014,"org.apache.commons.collections4.bag.TreeBagTest.testObjectHashCodeEqualsContract":61,"org.apache.commons.collections4.bag.TreeBagTest.testBagAdd":615,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetIteratorRemoveChangesMap":670,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":366,"org.apache.commons.collections4.map.LinkedMapTest.testPreviousKey":813,"org.apache.commons.collections4.map.Flat3MapTest.testMapPutAll":152,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapRemove":913,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapSize":945,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesRemoveChangesMap":692,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastKeySet":710,"org.apache.commons.collections4.map.CompositeMapTest.testMapRemove":1045,"org.apache.commons.collections4.bag.PredicatedBagTest.testIllegalAdd":568,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":438,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":696,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testEqualsNull":135,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContainsAll":631,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":800,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemoveChangesMap":105,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapGet":719,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutAll":1043,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagContains":571,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsValue":829,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testPreviousKey":664,"org.apache.commons.collections4.map.UnmodifiableMapTest.testKeySetRetainAll":770,"org.apache.commons.collections4.CollectionUtilsTest.testRemoveAll":1048,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":609,"org.apache.commons.collections4.map.HashedMapTest.testKeySetIteratorRemoveChangesMap":251,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsValue":895,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIsEmpty":1009,"org.apache.commons.collections4.CollectionUtilsTest.testPermutations":5,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator_Key":452,"org.apache.commons.collections4.map.Flat3MapTest.testFailFastKeySet":179,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapIsEmpty":864,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":395,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapEquals":919,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":1011,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContainsAll":852,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemoveAll":125,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemoveAll":435,"org.apache.commons.collections4.bag.PredicatedBagTest.testObjectHashCodeEqualsContract":29,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContainsAll":850,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testEmptyBagCompatibility":78,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiTailMapContains":392,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiHeadMapContains":388,"org.apache.commons.collections4.bag.HashBagTest.testFullBagCompatibility":40,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetClearChangesMap":308,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsValue":817,"org.apache.commons.collections4.map.ListOrderedMapTest.testRemoveByIndex":478,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAdd":808,"org.apache.commons.collections4.collection.IndexedCollectionTest.testDecoratedCollectionIsIndexedOnCreation":347,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetClearChangesMap":276,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetRemoveChangesMap":103,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagEqualsHashBag":63,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRetainAll":1001,"org.apache.commons.collections4.bag.CollectionBagTest.testObjectHashCodeEqualsContract":77,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetIteratorRemoveChangesMap":496,"org.apache.commons.collections4.set.CompositeSetTest.testSerializeDeserializeThenCompare":1032,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":795,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetRetainAll":396,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemoveAll":517,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetClearChangesMap":331,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContains":575,"org.apache.commons.collections4.map.MultiValueMapTest.testRemoveAllViaKeyedIterator":453,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRetainAll":294,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":535,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Empty":677,"org.apache.commons.collections4.map.LinkedMapTest.testMapSize":815,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPutNullValue":329,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray":658,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToArray":1033,"org.apache.commons.collections4.bag.TreeBagTest.testBagEqualsHashBag":56,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRemoveAll":737,"org.apache.commons.collections4.map.Flat3MapTest.testMapPutNullValue":193,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsValue":961,"org.apache.commons.collections4.map.LazyMapTest.testKeySetIteratorRemoveChangesMap":449,"org.apache.commons.collections4.functors.AllPredicateTest.nullCollectionToGetInstance":89,"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastValues":299,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testNullHandling":319,"org.apache.commons.collections4.ListUtilsTest.testRemoveAll":1049,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":339,"org.apache.commons.collections4.bag.TransformedBagTest.testObjectHashCodeEqualsContract":35,"org.apache.commons.collections4.map.Flat3MapTest.testValuesRemoveAll":205,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRetainAll":518,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":287,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":884,"org.apache.commons.collections4.map.ReferenceMapTest.testMapRemove":99,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRemove":997,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapClear":716,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRemoveAll":532,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet":555,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetRemoveAll":289,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedRemove":21,"org.apache.commons.collections4.map.CompositeMapTest.testMapIsEmpty":1042,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testEmptyIterator":682,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":806,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyPut":466,"org.apache.commons.collections4.bag.TransformedBagTest.testBagContains":582,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapSize":111,"org.apache.commons.collections4.bag.HashBagTest.testBagContains":592,"org.apache.commons.collections4.ListUtilsTest.testPartition":138,"org.apache.commons.collections4.set.MapBackedSetTest.testSerializeDeserializeThenCompare":174,"org.apache.commons.collections4.map.TransformedMapTest.testTransformedMap":397,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":885,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemoveAll":589,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetIteratorRemoveChangesMap":527,"org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIteratorTest.testFullMapIterator":567,"org.apache.commons.collections4.list.SetUniqueListTest.testSetCollections444":792,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapGet":325,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemoveChangesMap":124,"org.apache.commons.collections4.bag.PredicatedBagTest.testEmptyBagCompatibility":26,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAddAll":656,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiHeadMapContains":364,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIteratorRemove":165,"org.apache.commons.collections4.EnumerationUtilsTest.testToListWithHashtable":1,"org.apache.commons.collections4.map.PredicatedMapTest.testMapIsEmpty":969,"org.apache.commons.collections4.map.HashedMapTest.testKeySetRemoveAll":249,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAdd":573,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapGet":266,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapGet":882,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPutNullKey":328,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":970,"org.apache.commons.collections4.map.HashedMapTest.testMapPut":230,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiSubMapContains":363,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContains":586,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray":663,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapClear":917,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContainsAll":855,"org.apache.commons.collections4.map.ReferenceMapTest.testValuesClearChangesMap":307,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemoveAll":7,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiGetKey":842,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListRemoveByIndex":130,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapPutAll":764,"org.apache.commons.collections4.bag.TransformedBagTest.testBagEquals":30,"org.apache.commons.collections4.map.HashedMapTest.testMapContainsKey":223,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove1":119,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionContains":167,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagContains":602,"org.apache.commons.collections4.bag.PredicatedBagTest.testFullBagCompatibility":27,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove2":120,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove3":121,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsValue":1046,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetRemoveAll":394,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPut":415,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagAdd":625,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetIteratorRemoveChangesMap":446,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesClearChangesMap":727,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":878,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemoveAll":351,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagContains":637,"org.apache.commons.collections4.set.MapBackedSetTest.testSetEquals":159,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapHashCode":267,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":876,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":943,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapIsEmpty":260,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":805,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemoveChangesMap":823,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":880,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":802,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesClearChangesMap":275,"org.apache.commons.collections4.PredicateUtilsTest.testNullIsTruePredicate":671,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":934,"org.apache.commons.collections4.bag.CollectionBagTest.testEmptyBagCompatibility":74,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsValue":186,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPutAll":912,"org.apache.commons.collections4.set.MapBackedSetTest.testSetHashCode":160,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":886,"org.apache.commons.collections4.map.TransformedMapTest.testMapToString":931,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMapEntrySet":379,"org.apache.commons.collections4.map.SingletonMapTest.testMapToString":964,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove3":544,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove2":543,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove1":542,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiSubMapContains":372,"org.apache.commons.collections4.map.Flat3MapTest.testMapPut":151,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContains":1029,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMapEntrySet":387,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContains":596,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContainsAll":926,"org.apache.commons.collections4.map.HashedMapTest.testMakeMap":219,"org.apache.commons.collections4.map.ReferenceMapTest.testValuesRetainAll":315,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemoveChangesMap":252,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAdd":604,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastValues":711,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":606,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetIteratorRemoveChangesMap":477,"org.apache.commons.collections4.map.TransformedSortedMapTest.testTransformedMap":413,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetRetainAll":362,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContainsAll":849,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapIsEmpty":944,"org.apache.commons.collections4.ListUtilsTest.testSelectRejected":346,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapGet":957,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag":580,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetRemoveAll":409,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRetainAll":423,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetIteratorRemoveChangesMap":215,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains3":744,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapGet":877,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetRemoveChangesMap":526,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains1":742,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains2":743,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll1":704,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetIteratorRemoveChangesMap":255,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutAll":725,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testEmptyBagCompatibility":64,"org.apache.commons.collections4.bag.CollectionBagTest.testFullBagCompatibility":75,"org.apache.commons.collections4.map.UnmodifiableMapTest.testSerializeDeserializeThenCompare":778,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testPreviousKey":665,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains1":333,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains2":334,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRetainAll":735,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPutNullValue":272,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains3":335,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapGet":987,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionClear":1008,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll4":707,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll3":706,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll2":705,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetIteratorRemoveChangesMap":295,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesIteratorRemoveChangesMap":698,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetIteratorRemoveChangesMap":519,"org.apache.commons.collections4.map.HashedMapTest.testKeySetClearChangesMap":236,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemoveChangesMap":528,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetRetainAll":465,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveChangesMap":474,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":867,"org.apache.commons.collections4.map.HashedMapTest.testMapPutNullValue":232,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemove3":513,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemove2":512,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetRemoveAll":358,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":977,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":607,"org.apache.commons.collections4.keyvalue.MultiKeyTest.testEqualsAfterSerialization":700,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapHashCode":720,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRemoveAll":998,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemove1":511,"org.apache.commons.collections4.map.Flat3MapTest.testValuesRemoveChangesMap":204,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetIteratorRemoveChangesMap":403,"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastEntrySet":297,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testPut":540,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":534,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testEmptyBagCompatibility":70,"org.apache.commons.collections4.map.ReferenceMapTest.testFullMapCompatibility":304,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testEqualsNull":72,"org.apache.commons.collections4.bag.TreeBagTest.testBagIterator":617,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":694,"org.apache.commons.collections4.bag.CollectionBagTest.testEqualsNull":76,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapEquals":984,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesClearChangesMap":330,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRetainAll":549,"org.apache.commons.collections4.map.Flat3MapTest.testValuesIteratorRemoveChangesMap":207,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPut":508,"org.apache.commons.collections4.map.Flat3MapTest.testValuesClearChangesMap":195,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAdd":628,"org.apache.commons.collections4.bag.HashBagTest.testEmptyBagCompatibility":39,"org.apache.commons.collections4.PredicateUtilsTest.testOnePredicate":689,"org.apache.commons.collections4.bag.SynchronizedBagTest.testEqualsNull":48,"org.apache.commons.collections4.TransformerUtilsTest.testInvokerTransformer":156,"org.apache.commons.collections4.map.LRUMapTest.testNextKey":824,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapGet":942,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToArray":355,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMap":370,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemove":173,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContainsAll":653,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":879,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContainsAll":858,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContains":352,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapPutNullKey":756,"org.apache.commons.collections4.CollectionUtilsTest.forAllButLastDoCollection":811,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapGet":869,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemoveChangesMap":454,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testFullMapCompatibility":327,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testContainsKey":520,"org.apache.commons.collections4.map.TransformedMapTest.testMapGet":935,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMap":378,"org.apache.commons.collections4.map.ReferenceMapTest.testMapPut":97,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIterator":662,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndex":343,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPutAll":900,"org.apache.commons.collections4.map.HashedMapTest.testKeySetRemoveChangesMap":248,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionContainsAll":161,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapToString":921,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCanonicalFullCollectionExists":1021,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":809,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsKey":185,"org.apache.commons.collections4.map.Flat3MapTest.testKeySetRetainAll":210,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearByHeadMap":377,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":940,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearByTailMap":369,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testObjectHashCodeEqualsContract":81,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRemove":16,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPut":522,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorFailDoubleRemove":1004,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearBySubMap":373,"org.apache.commons.collections4.map.HashedMapTest.testMapPutAll":233,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRetainAll":107,"org.apache.commons.collections4.map.PredicatedMapTest.testPut":430,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsKey":548,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray":578,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIterator":643,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAddAll":649,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":803,"org.apache.commons.collections4.map.TransformedSortedMapTest.testKeySetRemoveChangesMap":419,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag":635,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapGet":978,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapSize":484,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRetainAll":126,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetRetainAll":368,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIterator":622,"org.apache.commons.collections4.map.HashedMapTest.testMapClear":222,"org.apache.commons.collections4.bag.HashBagTest.testBagEqualsSelf":36,"org.apache.commons.collections4.CollectionUtilsTest.disjunction":148,"org.apache.commons.collections4.map.ReferenceMapTest.testMakeMap":300,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":874,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":975,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRetainAll":530,"org.apache.commons.collections4.map.LRUMapTest.testMapRemove":835,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":863,"org.apache.commons.collections4.map.UnmodifiableMapTest.testKeySetRemoveChangesMap":752,"org.apache.commons.collections4.bag.TreeBagTest.testObjectEqualsSelf":60,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFailFastValues":258,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetClearChangesMap":277,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiGetKey":845,"org.apache.commons.collections4.MapUtilsTest.testPopulateMultiMap":393,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray":590,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveAll":475,"org.apache.commons.collections4.map.ReferenceMapTest.testMapPutAll":98,"org.apache.commons.collections4.map.HashedMapTest.testKeySetRetainAll":250,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyContainsKey":702,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutAll":509,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapToString":910,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":464,"org.apache.commons.collections4.map.LRUMapTest.testMapEquals":830,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":937,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesRemoveChangesMap":284,"org.apache.commons.collections4.map.HashedMapTest.testValuesIteratorRemoveChangesMap":247,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapRemove":988,"org.apache.commons.collections4.map.HashedMapTest.testValuesRemoveChangesMap":244,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetRetainAll":318,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsKey":485,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapClear":946,"org.apache.commons.collections4.TransformerUtilsTest.testInvokerTransformer2":157,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListRemoveByIndexBoundsChecking":128,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetIteratorRemoveChangesMap":440,"org.apache.commons.collections4.collection.CompositeCollectionTest.testRemoveComposited":4,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testMapContainsValue":22,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIterator":583,"org.apache.commons.collections4.map.SingletonMapTest.testMapIsEmpty":959,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAddAll":353,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRemoveChangesMap":733,"org.apache.commons.collections4.map.ReferenceMapTest.testMapIsEmpty":91,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetRemoveChangesMap":746,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetRemoveAll":340,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray":614,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove1":432,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContainsAll":928,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove3":434,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove2":433,"org.apache.commons.collections4.map.ReferenceMapTest.testMapToString":96,"org.apache.commons.collections4.map.LinkedMapTest.testMapToString":819,"org.apache.commons.collections4.map.TransformedMapTest.testMapSize":929,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRetainAll":537,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetIteratorRemoveChangesMap":561,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsValue":113,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":769,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPut":911,"org.apache.commons.collections4.comparators.BooleanComparatorTest.testStaticFactoryMethods":3,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagToArray":1005,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAdd":1031,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIsEmpty":168,"org.apache.commons.collections4.map.PredicatedMapTest.testMapGet":971,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagContainsAll":992,"org.apache.commons.collections4.ClosureUtilsTest.testChainedClosure":147,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetIteratorRemoveChangesMap":461,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapToString":721,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":881,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRetainAll":1012,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapRemove":118,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAddAll":619,"org.apache.commons.collections4.map.MultiKeyMapTest.testNullHandling":177,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetRetainAll":411,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapRemove":768,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapClear":324,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIterator":577,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAdd":650,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":695,"org.apache.commons.collections4.map.LazySortedMapTest.testTransformerDecorate":86,"org.apache.commons.collections4.bag.HashBagTest.testBagIterator":593,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMap":374,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsValue":947,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetClearChangesMap":332,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":979,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagSize":13,"org.apache.commons.collections4.map.HashedMapTest.testFailFastKeySet":217,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicate2":153,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetRemoveChangesMap":437,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testEntrySetRetainAll":428,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMapEntrySet":383,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testEmptyBagCompatibility":50,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetRemoveChangesMap":288,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesRemoveChangesMap":697,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetRemoveChangesMap":495,"org.apache.commons.collections4.bag.HashBagTest.testBagEquals":37,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorRemove":680,"org.apache.commons.collections4.map.ReferenceMapTest.testMapPutNullKey":305,"org.apache.commons.collections4.map.HashedMapTest.testMapToString":228,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapGet":766,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIterator":176,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiInverse":847,"org.apache.commons.collections4.map.Flat3MapTest.testMapHashCode":189,"org.apache.commons.collections4.list.SetUniqueListTest.testSetDownwardsInList":780,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagSize":17,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet3":553,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet4":554,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAdd":618,"org.apache.commons.collections4.map.ReferenceMapTest.testValuesRemoveAll":314,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet2":552,"org.apache.commons.collections4.map.ReferenceMapTest.testNullHandling":296,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContainsAll":862,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testRemove":684,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":804,"org.apache.commons.collections4.map.Flat3MapTest.testKeySetRemoveAll":209,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetRemoveChangesMap":514,"org.apache.commons.collections4.map.LinkedMapTest.testMapEquals":818,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearByHeadMap":389,"org.apache.commons.collections4.map.CompositeMapTest.testMapEquals":1041,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetIteratorRemoveChangesMap":515,"org.apache.commons.collections4.map.ReferenceMapTest.testMapContainsValue":94,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetIteratorRemoveChangesMap":500,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAll":787,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContains":630,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemoveChangesMap":497,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemove":14,"org.apache.commons.collections4.bag.TreeBagTest.testFullBagCompatibility":58,"org.apache.commons.collections4.map.HashedMapTest.testMapIsEmpty":220,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContains":641,"org.apache.commons.collections4.bag.TreeBagTest.testBagContains":616,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray":624,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorFail":1002,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRetainAll":406,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapClear":905,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapToString":950,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove1":281,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRemoveAll":1028,"org.apache.commons.collections4.TransformerUtilsTest.testMapTransformer":145,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPutAll":922,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testObjectHashCodeEqualsContract":73,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContainsAll":857,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetIteratorRemoveChangesMap":108,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemoveAll":644,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove3":283,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove2":282,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToArray":175,"org.apache.commons.collections4.map.MultiKeyMapTest.testFullMapCompatibility":722,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRetainAll":254,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemoveChangesMap":442,"org.apache.commons.collections4.map.LRUMapTest.testPreviousKey":825,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testDecorateFactory":1023,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemoveAll":668,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapGet":897,"org.apache.commons.collections4.map.Flat3MapTest.testMapToString":190,"org.apache.commons.collections4.BagUtilsTest.testUnmodifiableSortedBag":1022,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullKey":723,"org.apache.commons.collections4.map.UnmodifiableMapTest.testObjectHashCodeEqualsSelfHashCode":777,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetIteratorRemoveChangesMap":546,"org.apache.commons.collections4.bag.HashBagTest.testObjectHashCodeEqualsContract":43,"org.apache.commons.collections4.map.DefaultedMapTest.testMapContainsKey":563,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemoveAll":529,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagContainsAll":990,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":883,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapIsEmpty":714,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIterator":613,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagContainsAll":999,"org.apache.commons.collections4.map.UnmodifiableMapTest.testSimpleSerialization":775,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":360,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapIsEmpty":903,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapSize":715,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemoveAll":623,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagContains":626,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMakeMap":259,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Simple":676,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRetainAll":214,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAddAll":1030,"org.apache.commons.collections4.map.PredicatedMapTest.testMapClear":966,"org.apache.commons.collections4.map.UnmodifiableMapTest.testFullMapCompatibility":759,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapRemove":491,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRetainAll":11,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapGet":920,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContains":648,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapSize":892,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetContains2":311,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetContains1":310,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetRemoveChangesMap":459,"org.apache.commons.collections4.map.LazySortedMapTest.testSortOrder":9,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEquals":24,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetContains3":312,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsKey":429,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray":645,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedRemove":739,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove3":471,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove2":470,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorRemoveProtectsInvariants":995,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove1":469,"org.apache.commons.collections4.map.HashedMapTest.testMapRemove":234,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPutAll":273,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testEqualsNull":52,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListRemoveByIndex":133,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapIsEmpty":502,"org.apache.commons.collections4.bag.HashBagTest.testBagAdd":591,"org.apache.commons.collections4.bag.SynchronizedBagTest.testFullBagCompatibility":47,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapSize":981,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFailFastEntrySet":256,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagAdd":601,"org.apache.commons.collections4.list.SetUniqueListTest.testSet":782,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutAll":490,"org.apache.commons.collections4.list.SetUniqueListTest.testSetUpwardsInList":789,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapSize":954,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":939,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove3":401,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove2":400,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRetainAll":564,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove1":399,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemoveAll":837,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":918,"org.apache.commons.collections4.map.HashedMapTest.testFullMapCompatibility":229,"org.apache.commons.collections4.map.Flat3MapTest.testMapRemove":194,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiHeadMapContains":376,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemove3":559,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testFullBagCompatibility":71,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemove2":558,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapToString":958,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemove1":557,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetRemoveChangesMap":547,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsKey":112,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemoveAll":422,"org.apache.commons.collections4.keyvalue.MultiKeyTest.testEquals":701,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRemoveChangesMap":472,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapClear":982,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsKey":414,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContainsAll":621,"org.apache.commons.collections4.map.HashedMapTest.testValuesRemoveAll":245,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testObjectHashCodeEqualsContract":85,"org.apache.commons.collections4.map.UnmodifiableMapTest.testValuesIteratorRemoveChangesMap":745,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":629,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":538,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRetainAll":171,"org.apache.commons.collections4.map.TransformedMapTest.testMapRemove":936,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains3":1037,"org.apache.commons.collections4.map.LazyMapTest.testKeySetRemoveChangesMap":447,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContains":660,"org.apache.commons.collections4.map.ListOrderedMapTest.testPutAllWithIndexBug441":480,"org.apache.commons.collections4.bag.SynchronizedBagTest.testSerializeDeserializeThenCompare":1016,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":973,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFailFastKeySet":257,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetIteratorRemoveChangesMap":550,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContainsAll":612,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains1":1035,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains2":1036,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemove":18,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIterator":598,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContainsAll":576,"org.apache.commons.collections4.map.PredicatedMapTest.testMapEquals":968,"org.apache.commons.collections4.map.CompositeMapTest.testMapToString":1040,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":608,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagEqualsHashBag":45,"org.apache.commons.collections4.bag.PredicatedBagTest.testlegalAddRemove":569,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":889,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAdd":584,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemove3":418,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemove":703,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemove1":416,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemove2":417,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapRemove":872,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetRemoveChangesMap":562,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiGetKeyInverse":843,"org.apache.commons.collections4.bag.TransformedBagTest.testEqualsNull":34,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapSize":916,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemoveChangesMap":836,"org.apache.commons.collections4.map.HashedMapTest.testMapHashCode":227,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPut":468,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testEqualsNull":66,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetRemoveAll":367,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsKey":894,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapToString":983,"org.apache.commons.collections4.collection.IndexedCollectionTest.testEnsureDuplicateObjectsCauseException":348,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContainsAll":854,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMakeMap":754,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagEquals":62,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagEquals":44,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiGetKeyInverse":840,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testObjectHashCodeEqualsContract":67,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContainsAll":853,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiMapIteratorSet":902,"org.apache.commons.collections4.map.ReferenceMapTest.testMapHashCode":303,"org.apache.commons.collections4.bag.HashBagTest.testEqualsNull":41,"org.apache.commons.collections4.bag.SynchronizedBagTest.testObjectHashCodeEqualsSelfHashCode":1018,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContainsAll":851,"org.apache.commons.collections4.map.MultiKeyMapTest.testSampleMappings":712,"org.apache.commons.collections4.map.UnmodifiableMapTest.testCanonicalFullCollectionExists":772,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContainsAll":1027,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapToString":115,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsKey":828,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray":633,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testLength":141,"org.apache.commons.collections4.map.HashedMapTest.testMapGet":226,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPut":116,"org.apache.commons.collections4.list.CursorableLinkedListTest.testEqualsNull":134,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionSize":163,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPut":270,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMap":382,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":793,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":410,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":986,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testFailFastEntrySet":320,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPut":462,"org.apache.commons.collections4.comparators.BooleanComparatorTest.testConstructors":2,"org.apache.commons.collections4.map.ListOrderedMapTest.testCOLLECTIONS_474_nullValues":481,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAddAll":595,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndexBoundsChecking":342,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":801,"org.apache.commons.collections4.map.ListOrderedMapTest.testCOLLECTIONS_474_nonNullValues":482,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":19,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemove1":455,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemove2":456,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAdd":639,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemove3":457,"org.apache.commons.collections4.map.HashedMapTest.testFailFastEntrySet":216,"org.apache.commons.collections4.bag.TreeBagTest.testBagEqualsSelf":54,"org.apache.commons.collections4.map.UnmodifiableMapTest.testKeySetIteratorRemoveChangesMap":765,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToString":164,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":405,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesIteratorRemoveChangesMap":736,"org.apache.commons.collections4.map.LinkedMapTest.testMapPutAll":821,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapToString":507,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testFailFastValues":322,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetRemoveAll":317,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesRetainAll":286,"org.apache.commons.collections4.CollectionUtilsTest.testSize_List":1051,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFullMapCompatibility":269,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetRetainAll":341,"org.apache.commons.collections4.set.CompositeSetTest.testRemoveUnderlying":1024,"org.apache.commons.collections4.map.SingletonMapTest.testMapGet":963,"org.apache.commons.collections4.map.Flat3MapTest.testKeySetIteratorRemoveChangesMap":211,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapIsEmpty":915,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagEqualsHashBag":69,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListReInsert":779,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemoveChangesMap":421,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testEqualsNull":80,"org.apache.commons.collections4.map.UnmodifiableMapTest.testObjectEqualsSelf":771,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag_decorateTransform":634,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemoveAll":654,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagToArrayPopulate":1006,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemoveAll":253,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesRemoveAll":337,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":989,"org.apache.commons.collections4.map.LRUMapTest.testMapSize":827,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapEquals":896,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove1":201,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove2":202,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove3":203,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemoveAll":402,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemoveChangesMap":292,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapEquals":265,"org.apache.commons.collections4.set.CompositeSetTest.testAddComposited":1026,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetIteratorRemoveChangesMap":458,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyGet":0,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsValue":907,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContainsAll":859,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetIteratorRemoveChangesMap":436,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPutAll":117,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapRemove":510,"org.apache.commons.collections4.map.LazyMapTest.testMapContainsKey":448,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRetainAll":669,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapEquals":948,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapIsEmpty":483,"org.apache.commons.collections4.map.TransformedSortedMapTest.testKeySetIteratorRemoveChangesMap":420,"org.apache.commons.collections4.list.SetUniqueListTest.testSetInBiggerList":791,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemoveAll":106,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapSize":503,"org.apache.commons.collections4.map.LazySortedMapTest.testMapContainsKey":460,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemoveAll":545,"org.apache.commons.collections4.IteratorUtilsTest.testArrayListIterator":20,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagSize":1000,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRetainAll":838,"org.apache.commons.collections4.map.ListOrderedMapTest.testPutAllWithIndex":479,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapToString":268,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapPut":426,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndexBoundsChecking2":799,"org.apache.commons.collections4.CollectionUtilsTest.selectRejected":345,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemoveAll":498,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAddAll":585,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastEntrySet":709,"org.apache.commons.collections4.map.HashedMapTest.testValuesClearChangesMap":235,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemoveChangesMap":398,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMapEntrySet":391,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiMapIteratorSet":890,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListRemoveByIndexBoundsChecking2":132,"org.apache.commons.collections4.map.LinkedMapTest.testMapIsEmpty":814,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemoveAll":647,"org.apache.commons.collections4.map.Flat3MapTest.testMapEquals":187,"org.apache.commons.collections4.bag.TransformedBagTest.testBagEqualsHashBag":31,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAdd":657,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testFullBagCompatibility":79,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEmptyMapCompatibility":757,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIterator":632,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsKey":1038,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMapEntrySet":375,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListDoubleInsert":788,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapRemove":901,"org.apache.commons.collections4.map.ReferenceMapTest.testMapSize":92,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testFullBagCompatibility":83,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testEntrySetRemoveAll":427,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapGet":949,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagAdd":636,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPutAll":871,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections307":786,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIteratorRemove":1010,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections304":785,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCanonicalEmptyCollectionExists":1020,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemove3":445,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearByTailMap":381,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemoveChangesMap":431,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemove1":443,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemove2":444,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContainsAll":587,"org.apache.commons.collections4.bag.PredicatedBagTest.testEqualsNull":28,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_SimpleNoHasNext":681,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsKey":906,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullValue":724,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToArray2":162,"org.apache.commons.collections4.map.Flat3MapTest.testMapGet":188,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":533,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAddAll":574,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAdd":354,"org.apache.commons.collections4.list.SetUniqueListTest.testListIterator":784,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIterator":356,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPut":566,"org.apache.commons.collections4.set.CompositeSetTest.testContains":1025,"org.apache.commons.collections4.map.HashedMapTest.testValuesRetainAll":246,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAddAll":640,"org.apache.commons.collections4.map.LRUMapTest.testMapPutAll":834,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContainsAll":661,"org.apache.commons.collections4.map.LinkedMapTest.testNextKey":812,"org.apache.commons.collections4.CollectionUtilsTest.testMatchesAll":1050,"org.apache.commons.collections4.bag.HashBagTest.testObjectEqualsSelf":42,"org.apache.commons.collections4.map.ReferenceMapTest.testMapContainsKey":93,"org.apache.commons.collections4.map.TransformedMapTest.testMapClear":930,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsValue":690,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagContainsAll":993,"org.apache.commons.collections4.trie.PatriciaTrieTest.testPrefixMapRemoval":137,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray":600,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetRemoveChangesMap":404,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapClear":262,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testFullIterator":683,"org.apache.commons.collections4.map.HashedMapTest.testMapSize":221,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIteratorsWithEmptyIterators":678,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapIsEmpty":891,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToString":1015,"org.apache.commons.collections4.CollectionUtilsTest.testDisjunctionAsSymmetricDifference":150,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagEqualsSelf":996,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiGetKeyInverse":846,"org.apache.commons.collections4.bag.HashBagTest.testBagEqualsHashBag":38,"org.apache.commons.collections4.trie.PatriciaTrieTest.testPrefixMap":136,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicate2Ex3":155,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":873,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicate2Ex2":154,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPutNullKey":271,"org.apache.commons.collections4.BagUtilsTest.testSynchronizedBag":994,"org.apache.commons.collections4.PredicateUtilsTest.testAllPredicateEx4":88,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":412,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetIteratorRemoveChangesMap":531,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiInverse":844,"org.apache.commons.collections4.map.SingletonMapTest.testMapEquals":962,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetIteratorRemoveChangesMap":104,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiGetKey":839,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorFailNoMore":1003,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIterators":675,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAllWithInitialList":783,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContains":655,"org.apache.commons.collections4.bag.TreeBagTest.testEqualsNull":59,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetRemoveAll":463,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":798,"org.apache.commons.collections4.map.LRUMapTest.testMapIsEmpty":826,"org.apache.commons.collections4.bag.TreeBagTest.testEmptyBagCompatibility":57,"org.apache.commons.collections4.map.Flat3MapTest.testKeySetRemoveChangesMap":208,"org.apache.commons.collections4.map.ReferenceMapTest.testMapPutNullValue":306,"org.apache.commons.collections4.map.PredicatedMapTest.testMapToString":967,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":551,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":807,"org.apache.commons.collections4.map.UnmodifiableMapTest.testValuesRemoveChangesMap":749,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapContainsKey":521,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContainsAll":856,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionSize":1013,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagEquals":68,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPut":489,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContainsAll":927,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":408,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiTailMapContains":365,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemoveAll":10,"org.apache.commons.collections4.map.ReferenceMapTest.testMapGet":302,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapToString":870,"org.apache.commons.collections4.map.ReferenceMapTest.testMapEquals":95,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemoveChangesMap":556,"org.apache.commons.collections4.map.ListOrderedMap2Test.testRemoveByIndex":501,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testFailFastKeySet":321,"org.apache.commons.collections4.bag.SynchronizedBagTest.testObjectHashCodeEqualsContract":49,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemoveChangesMap":541,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRetainAll":738,"org.apache.commons.collections4.map.LazyMapTest.testMapPut":450,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetContains2":199,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetContains3":200,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testBasics":109,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetContains1":198,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetClearChangesMap":237,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsValue":505,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testFullBagCompatibility":51,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsValue":955,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedRemove":87,"org.apache.commons.collections4.map.Flat3MapTest.testMapPutNullKey":192,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContainsAll":860,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsKey":263,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":810,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesIteratorRemoveChangesMap":666,"org.apache.commons.collections4.bag.SynchronizedBagTest.testObjectEqualsSelf":1017,"org.apache.commons.collections4.map.TransformedMapTest.testMapIsEmpty":933,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed1":672,"org.apache.commons.collections4.map.PredicatedMapTest.testMapSize":965,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":673,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":674,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetContains1":238,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetContains2":239,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapClear":866,"org.apache.commons.collections4.map.MultiKeyMapTest.testClone":708,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIterator":588,"org.apache.commons.collections4.map.LRUMapTest.testMapPut":833,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiInverse":841,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapEquals":506,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsValue":264,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag_decorateTransform":579,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":790,"org.apache.commons.collections4.map.Flat3MapTest.testMapSize":183,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContainsAll":925,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapRemove":952,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContainsAll":924,"org.apache.commons.collections4.map.UnmodifiableMapTest.testKeySetRemoveAll":753,"org.apache.commons.collections4.map.UnmodifiableMapTest.testUnmodifiable":741,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListRemoveByIndexBoundsChecking":131,"org.apache.commons.collections4.map.UnmodifiableMapTest.testObjectHashCodeEqualsContract":776,"org.apache.commons.collections4.map.Flat3MapTest.testFailFastValues":180,"org.apache.commons.collections4.map.Flat3MapTest.testFullMapCompatibility":191,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContainsAll":861,"org.apache.commons.collections4.ListUtilsTest.testLongestCommonSubsequenceWithString":144,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionAddAll":170,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRetainAll":439,"org.apache.commons.collections4.map.TransformedMapTest.testMapEquals":932,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":887,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":875,"org.apache.commons.collections4.ListUtilsTest.testLongestCommonSubsequence":143,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapIsEmpty":985,"org.apache.commons.collections4.PredicateUtilsTest.testEitherPredicate":688,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemoveAll":560,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapIsEmpty":953,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRemove":12,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIterator":603,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapRemove":923,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":914,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiSubMapContains":384,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMap":390,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIterator":652,"org.apache.commons.collections4.PredicateUtilsTest.testNonePredicateEx4":699,"org.apache.commons.collections4.map.CompositeMapTest.testMapPut":1044,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapEquals":908,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetContains3":240,"org.apache.commons.collections4.map.UnmodifiableMapTest.testCanonicalEmptyCollectionExists":774,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsKey":816,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemoveAll":166,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapEquals":718,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionAdd":172,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAdd":594,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMakeMap":323,"org.apache.commons.collections4.collection.IndexedCollectionTest.testReindexUpdatesIndexWhenDecoratedCollectionIsModifiedSeparately":349,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetIteratorRemoveChangesMap":127,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContains":611,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemoveChangesMap":516,"org.apache.commons.collections4.map.LRUMapTest.testMapToString":832,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapGet":980},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:153","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"351fa023-3f05-11e6-b5b1-416738b3502e","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:404","type":"CtMethodImpl","sourcecode":"public V get(final java.lang.Object key1, final java.lang.Object key2, final java.lang.Object key3, final java.lang.Object key4) {\n    if (key1 != null) {\n        {\n            final int int = hash(key1, key2, key3, key4);\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[][decorated().hashIndex(hashCode, decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[].int)];\n            while (entry != null) {\n                if (((entry.int) == hashCode) && (isEqualKey(entry, key1, key2, key3, key4))) {\n                    return entry.getValue();\n                } \n                entry = entry.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n            }\n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.TransformedMap:198","type":"CtInvocationImpl"},"failures":[],"tindex":"351fee44-3f05-11e6-b5b1-f154057bda5f","method":{"position":"org.apache.commons.collections4.map.UnmodifiableMap:122","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void putAll(final java.util.Map<? extends K, ? extends V> mapToCopy) {\n    if (mapToCopy.isEmpty()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"mapToCopy"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1077","type":"CtInvocationImpl"},"failures":[],"tindex":"35201555-3f05-11e6-b5b1-63ebfc73861d","method":{"position":"org.apache.commons.collections4.list.TransformedList:119","type":"CtMethodImpl","sourcecode":"public E get(final int index) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isNullBitKey(index)) {\n        {\n            return getList().get(index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:854","type":"CtBinaryOperatorImpl"},"failures":[1],"tindex":"35201556-3f05-11e6-b5b1-13dd4ff051b7","method":{"position":"org.apache.commons.collections4.EnumerationUtils:50","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> toList(final java.util.Enumeration<? extends E> enumeration) {\n    if (enumeration == null) {\n        {\n            return org.apache.commons.collections4.IteratorUtils.toList(new org.apache.commons.collections4.iterators.EnumerationIterator<E>(enumeration));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"enumeration":"enumeration"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:408","type":"CtBinaryOperatorImpl"},"failures":[2,3],"tindex":"35201557-3f05-11e6-b5b1-7130f55c05b0","method":{"position":"org.apache.commons.collections4.comparators.BooleanComparator:137","type":"CtMethodImpl","sourcecode":"public int compare(final java.lang.Boolean b1, final java.lang.Boolean b2) {\n    if (b2 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = b1.booleanValue();\n            final boolean boolean = b2.booleanValue();\n            return v1 ^ v2 ? v1 ^ (boolean) ? 1 : -1 : 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"b2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap:57","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"35201558-3f05-11e6-b5b1-fdaf865558cd","method":{"position":"org.apache.commons.collections4.map.FixedSizeSortedMap:126","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void putAll(final java.util.Map<? extends K, ? extends V> mapToCopy) {\n    if (mapToCopy instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            if (org.apache.commons.collections4.CollectionUtils.isSubCollection(mapToCopy.keySet(), keySet())) {\n                throw new java.lang.IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n            } \n            java.util.Map<K, V>.putAll(mapToCopy);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"mapToCopy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.CollatingIterator:295","type":"CtBinaryOperatorImpl"},"failures":[4],"tindex":"35203c69-3f05-11e6-b5b1-471287ea56f7","method":{"position":"org.apache.commons.collections4.collection.CompositeCollection:379","type":"CtMethodImpl","sourcecode":"public void removeComposited(final java.util.Collection<E> coll) {\n    if (coll == null) {\n        {\n            java.util.List<java.util.Collection<E>>.remove(coll);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"values":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.SynchronizedCollection:87","type":"CtBinaryOperatorImpl"},"failures":[5],"tindex":"35203c6a-3f05-11e6-b5b1-45e13910d14f","method":{"position":"org.apache.commons.collections4.CollectionUtils:1642","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Collection<java.util.List<E>> permutations(final java.util.Collection<E> collection) {\n    if (collection.isEmpty()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (collection == null) {\n                {\n                    final org.apache.commons.collections4.iterators.PermutationIterator<E> org.apache.commons.collections4.iterators.PermutationIterator<E> = new org.apache.commons.collections4.iterators.PermutationIterator<E>(collection);\n                    final java.util.Collection<java.util.List<E>> java.util.Collection<java.util.List<E>> = new java.util.LinkedList<java.util.List<E>>();\n                    while (it.hasNext()) {\n                        result.add(it.next());\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collection":"collection"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:225","type":"CtBinaryOperatorImpl"},"failures":[6,7,8,9,10,11],"tindex":"35203c6b-3f05-11e6-b5b1-afedcabcd0b4","method":{"position":"org.apache.commons.collections4.map.LazyMap:160","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(final java.lang.Object key) {\n    if (key != null) {\n        {\n            if (key != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.util.Map<K, V>.containsKey(key)) == false) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        final K K = ((K)(key));\n                        final V V = org.apache.commons.collections4.Transformer<? super K, ? extends V>.transform(castKey);\n                        java.util.Map<K, V>.put(castKey, value);\n                        return value;\n                    } \n                    return java.util.Map<K, V>.get(key);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key1":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.ArrayIterator:99","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"35203c6c-3f05-11e6-b5b1-5b834333dfb7","method":{"position":"org.apache.commons.collections4.set.ListOrderedSet:344","type":"CtMethodImpl","sourcecode":"public java.lang.Object remove(final int index) {\n    if (index < index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.Object java.lang.Object = java.util.List<E>.remove(index);\n            remove(obj);\n            return obj;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"index","endIndex":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:385","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3520637d-3f05-11e6-b5b1-efbd54b4a064","method":{"position":"org.apache.commons.collections4.list.TransformedList:79","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.list.TransformedList<E> transformedList(final java.util.List<E> list, final org.apache.commons.collections4.Transformer<? super E, ? extends E> transformer) {\n    final org.apache.commons.collections4.list.TransformedList<E> org.apache.commons.collections4.list.TransformedList<E> = new org.apache.commons.collections4.list.TransformedList<E>(list , transformer);\n    if (((transformer != null) && (list != null)) && ((list.size()) > 0)) {\n        @java.lang.SuppressWarnings(value = \"unchecked\")\n        final E[] E[] = ((E[])(list.toArray()));\n        list.clear();\n        for (final E E : values) {\n            decorated.decorated().add(transformer.transform(value));\n        }\n    } \n    return decorated;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"list"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalArgumentException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:424","type":"CtInvocationImpl"},"failures":[],"tindex":"3520637e-3f05-11e6-b5b1-91d306b22cb2","method":{"position":"org.apache.commons.collections4.map.CompositeMap:133","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic synchronized void addComposited(final java.util.Map<K, V> map) throws java.lang.IllegalArgumentException {\n    for (int int = (java.util.Map<K, V>[].int) - 1 ; i >= 0 ; --i) {\n        final java.util.Collection<K> java.util.Collection<K> = org.apache.commons.collections4.CollectionUtils.intersection(org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[][i].keySet(), map.keySet());\n        if ((intersect.size()) != 0) {\n            if ((org.apache.commons.collections4.map.CompositeMap.this.org.apache.commons.collections4.map.CompositeMap.MapMutator<K, V>) == null) {\n                throw new java.lang.IllegalArgumentException(\"Key collision adding Map to CompositeMap\");\n            } \n            org.apache.commons.collections4.map.CompositeMap.this.org.apache.commons.collections4.map.CompositeMap.MapMutator<K, V>.resolveCollision(org.apache.commons.collections4.map.CompositeMap.this, org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[][i], map, intersect);\n        } \n    }\n    final java.util.Map<K, V>[] java.util.Map<K, V>[] = new java.util.Map[(org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[].int) + 1];\n    java.lang.System.arraycopy(org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[], 0, temp, 0, org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[].int);\n    temp[((temp.int) - 1)] = map;\n    org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[] = temp;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:679","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3520637f-3f05-11e6-b5b1-c184fc3935a0","method":{"position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:63","type":"CtMethodImpl","sourcecode":"public boolean containsKey(final java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return decorated().containsKey(key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"floatObject":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:325","type":"CtBinaryOperatorImpl"},"failures":[12,13,14,15,16,17,18,19],"tindex":"35208990-3f05-11e6-b5b1-7bd558a1ce6a","method":{"position":"org.apache.commons.collections4.bag.PredicatedBag:97","type":"CtMethodImpl","sourcecode":"public boolean remove(final java.lang.Object object, final int count) {\n    if (count == 0) {\n        {\n            return decorated().remove(object, count);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nodeCount":"count"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:321","type":"CtBinaryOperatorImpl"},"failures":[20],"tindex":"35208991-3f05-11e6-b5b1-0969623bdbab","method":{"position":"org.apache.commons.collections4.IteratorUtils:378","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.ResettableListIterator<E> arrayListIterator(final E[] array, final int start) {\n    if (start >= start) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (start <= 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new org.apache.commons.collections4.iterators.ObjectArrayListIterator<E>(array , start);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nCopies":"start"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1142","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"35208992-3f05-11e6-b5b1-670ec54bce37","method":{"position":"org.apache.commons.collections4.trie.KeyAnalyzer:64","type":"CtMethodImpl","sourcecode":"static boolean isEqualBitKey(final int bitIndex) {\n    if ((bitIndex >= 0) && (bitIndex < bitIndex)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return bitIndex == (org.apache.commons.collections4.trie.KeyAnalyzer.org.apache.commons.collections4.trie.KeyAnalyzer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lengthInBits":"bitIndex","bitIndex":"bitIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:359","type":"CtBinaryOperatorImpl"},"failures":[21],"tindex":"35208993-3f05-11e6-b5b1-dd894a22248c","method":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:119","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object object) {\n    if (object != null) {\n        {\n            return remove(object, 1);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key1":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:189","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3520b0a4-3f05-11e6-b5b1-f1c40fe4f3ac","method":{"position":"org.apache.commons.collections4.set.TransformedSortedSet:56","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.set.TransformedSortedSet<E> transformingSortedSet(final java.util.SortedSet<E> set, final org.apache.commons.collections4.Transformer<? super E, ? extends E> transformer) {\n    if (transformer != null) {\n        {\n            return new org.apache.commons.collections4.set.TransformedSortedSet<E>(set , transformer);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"transformer":"transformer"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:542","type":"CtBinaryOperatorImpl"},"failures":[22,23],"tindex":"3520b0a5-3f05-11e6-b5b1-db8a87972d5d","method":{"position":"org.apache.commons.collections4.trie.UnmodifiableTrie:101","type":"CtMethodImpl","sourcecode":"public boolean containsValue(final java.lang.Object value) {\n    if ((value instanceof org.apache.commons.collections4.Bag) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.Trie<K, V>.containsValue(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:1079","type":"CtInvocationImpl"},"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"tindex":"3520b0a6-3f05-11e6-b5b1-39a9c97d4d18","method":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:538","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object object) {\n    if (object.getClass().isArray()) {\n        {\n            if (object == (org.apache.commons.collections4.bag.AbstractMapBag.this)) {\n                return true;\n            } \n            if ((object instanceof org.apache.commons.collections4.Bag) == false) {\n                return false;\n            } \n            final org.apache.commons.collections4.Bag<?> org.apache.commons.collections4.Bag<?> = ((org.apache.commons.collections4.Bag<?>)(object));\n            if ((other.size()) != (size())) {\n                return false;\n            } \n            for (final E E : java.util.Map<E, org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger>.keySet()) {\n                if ((other.getCount(element)) != (getCount(element))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.IteratorChain:213","type":"CtInvocationImpl"},"failures":[],"tindex":"3520b0a7-3f05-11e6-b5b1-3536c024982e","method":{"position":"org.apache.commons.collections4.IteratorUtils:521","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Iterator<E> chainedIterator(final java.util.Collection<java.util.Iterator<? extends E>> iterators) {\n    if (iterators.isEmpty()) {\n        {\n            return new org.apache.commons.collections4.iterators.IteratorChain<E>(iterators);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iteratorChain":"iterators"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.LazyMap:125","type":"CtBinaryOperatorImpl"},"failures":[86],"tindex":"3520d7b8-3f05-11e6-b5b1-e9c0beef193a","method":{"position":"org.apache.commons.collections4.map.LazySortedMap:91","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.map.LazySortedMap<K, V> lazySortedMap(final java.util.SortedMap<K, V> map, final org.apache.commons.collections4.Transformer<? super K, ? extends V> factory) {\n    if (factory == null) {\n        {\n            return new org.apache.commons.collections4.map.LazySortedMap<K, V>(map , factory);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3520d7b9-3f05-11e6-b5b1-bfd569107be2","method":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:108","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll instanceof org.apache.commons.collections4.collection.SynchronizedCollection) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            final java.util.Iterator<? extends E> java.util.Iterator<? extends E> = coll.iterator();\n            while (i.hasNext()) {\n                final boolean boolean = add(i.next(), 1);\n                changed = changed || added;\n            }\n            return changed;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.NodeCachingLinkedList:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3520d7ba-3f05-11e6-b5b1-ad56d0bf7ef6","method":{"position":"org.apache.commons.collections4.list.FixedSizeList:87","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final int index, final java.util.Collection<? extends E> coll) {\n    if (index == 0) {\n        {\n            throw new java.lang.UnsupportedOperationException(\"List is fixed size\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cacheSize":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:528","type":"CtBinaryOperatorImpl"},"failures":[87],"tindex":"3520d7bb-3f05-11e6-b5b1-a93e6d516e2d","method":{"position":"org.apache.commons.collections4.bag.UnmodifiableBag:148","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object object, final int count) {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:97","type":"CtBinaryOperatorImpl"},"failures":[88,89],"tindex":"3520d7bc-3f05-11e6-b5b1-9d24f390a13f","method":{"position":"org.apache.commons.collections4.functors.AllPredicate:79","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> allPredicate(final java.util.Collection<? extends org.apache.commons.collections4.Predicate<T>> predicates) {\n    if (predicates == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.Predicate<T>[] org.apache.commons.collections4.Predicate<T>[] = org.apache.commons.collections4.functors.FunctorUtils.validate(predicates);\n            if ((preds.int) == 0) {\n                return org.apache.commons.collections4.functors.TruePredicate.truePredicate();\n            } \n            if ((preds.int) == 1) {\n                return preds[0];\n            } \n            return new org.apache.commons.collections4.functors.AllPredicate<T>(preds);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicates":"predicates"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:675","type":"CtBinaryOperatorImpl"},"failures":[90],"tindex":"3520fecd-3f05-11e6-b5b1-b9e8cc7aefdf","method":{"position":"org.apache.commons.collections4.CollectionUtils:1014","type":"CtMethodImpl","sourcecode":"public static <I, O>java.util.Collection<O> collect(final java.util.Iterator<I> inputIterator, final org.apache.commons.collections4.Transformer<? super I, ? extends O> transformer) {\n    if (transformer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.CollectionUtils.collect(inputIterator, transformer, new java.util.ArrayList<O>());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"transform":"transformer"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:547","type":"CtBinaryOperatorImpl"},"failures":[87],"tindex":"3520fece-3f05-11e6-b5b1-511d8ae2c497","method":{"position":"org.apache.commons.collections4.bag.UnmodifiableBag:137","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean retainAll(final java.util.Collection<?> coll) {\n    if ((coll.size()) != (coll.size())) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"coll","b":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:784","type":"CtBinaryOperatorImpl"},"failures":[91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],"tindex":"3520fecf-3f05-11e6-b5b1-473d203118a1","method":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(final java.lang.Object key) {\n    if (key == null) {\n        {\n            purgeBeforeRead();\n            final java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> = getEntry(key);\n            if (entry == null) {\n                return false;\n            } \n            return (entry.getValue()) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"integerObject":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:1102","type":"CtBinaryOperatorImpl"},"failures":[128,129,130,131,132,133],"tindex":"3520fed0-3f05-11e6-b5b1-d35726b6b68a","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:229","type":"CtMethodImpl","sourcecode":"public E remove(final int index) {\n    if (index > 3) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = getNode(index, false);\n            final E E = node.getValue();\n            removeNode(node);\n            return oldValue;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:228","type":"CtBinaryOperatorImpl"},"failures":[134,135],"tindex":"3520fed1-3f05-11e6-b5b1-a5e4ba507ea8","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:351","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj != null) {\n        {\n            if (obj == (org.apache.commons.collections4.list.AbstractLinkedList.this)) {\n                return true;\n            } \n            if ((obj instanceof java.util.List) == false) {\n                return false;\n            } \n            final java.util.List<?> java.util.List<?> = ((java.util.List<?>)(obj));\n            if ((other.size()) != (size())) {\n                return false;\n            } \n            final java.util.ListIterator<?> java.util.ListIterator<?> = listIterator();\n            final java.util.ListIterator<?> java.util.ListIterator<?> = other.listIterator();\n            while ((it1.hasNext()) && (it2.hasNext())) {\n                final java.lang.Object java.lang.Object = it1.next();\n                final java.lang.Object java.lang.Object = it2.next();\n                if (!(o1 == null ? o2 == null : o1.equals(o2))) {\n                    return false;\n                } \n            }\n            return !((it1.hasNext()) || (it2.hasNext()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key2":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:410","type":"CtBinaryOperatorImpl"},"failures":[21],"tindex":"3520fed2-3f05-11e6-b5b1-c90ab310fcc5","method":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:141","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean retainAll(final java.util.Collection<?> coll) {\n    if ((coll.size()) < (coll.size())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (coll != null) {\n                boolean boolean = false;\n                final java.util.Iterator<E> java.util.Iterator<E> = iterator();\n                while (e.hasNext()) {\n                    if (!(coll.contains(e.next()))) {\n                        e.remove();\n                        modified = true;\n                    } \n                }\n                return modified;\n            } else {\n                return decorated().retainAll(null);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll2":"coll","coll1":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:726","type":"CtBinaryOperatorImpl"},"failures":[136,137],"tindex":"352125e3-3f05-11e6-b5b1-590bad8edf1a","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2363","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> findNext(final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> prior) {\n    if ((prior != prior) && (org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>))) {\n        {\n            return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.nextEntryInSubtree(prior, org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"prior","current":"prior","previous":"prior","right":"prior"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.GrowthList:183","type":"CtBinaryOperatorImpl"},"failures":[138],"tindex":"352125e4-3f05-11e6-b5b1-ed9c3eb257f2","method":{"position":"org.apache.commons.collections4.ListUtils:654","type":"CtMethodImpl","sourcecode":"public static <T>java.util.List<java.util.List<T>> partition(final java.util.List<T> list, final int size) {\n    if (size >= size) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (list == null) {\n                throw new java.lang.IllegalArgumentException(\"List must not be null\");\n            } \n            if (size <= 0) {\n                throw new java.lang.IllegalArgumentException(\"Size must be greater than 0\");\n            } \n            return new org.apache.commons.collections4.ListUtils.Partition<T>(list , size);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"size","index":"size"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:320","type":"CtBinaryOperatorImpl"},"failures":[139,140,141,142,143,144],"tindex":"352125e5-3f05-11e6-b5b1-9750cfd80e1a","method":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:252","type":"CtMethodImpl","sourcecode":"private void buildScript(final int start1, final int end1, final int start2, final int end2, final org.apache.commons.collections4.sequence.EditScript<T> script) {\n    if (start1 == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.sequence.SequencesComparator.Snake org.apache.commons.collections4.sequence.SequencesComparator.Snake = getMiddleSnake(start1, end1, start2, end2);\n            if (((middle == null) || (((middle.getStart()) == end1) && ((middle.getDiag()) == (end1 - end2)))) || (((middle.getEnd()) == start1) && ((middle.getDiag()) == (start1 - start2)))) {\n                int int = start1;\n                int int = start2;\n                while ((i < end1) || (j < end2)) {\n                    if (((i < end1) && (j < end2)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(i), java.util.List<T>.get(j)))) {\n                        script.append(new org.apache.commons.collections4.sequence.KeepCommand<T>(java.util.List<T>.get(i)));\n                        ++i;\n                        ++j;\n                    } else {\n                        if ((end1 - start1) > (end2 - start2)) {\n                            script.append(new org.apache.commons.collections4.sequence.DeleteCommand<T>(java.util.List<T>.get(i)));\n                            ++i;\n                        } else {\n                            script.append(new org.apache.commons.collections4.sequence.InsertCommand<T>(java.util.List<T>.get(j)));\n                            ++j;\n                        }\n                    }\n                }\n            } else {\n                buildScript(start1, middle.getStart(), start2, ((middle.getStart()) - (middle.getDiag())), script);\n                for (int int = middle.getStart() ; i < (middle.getEnd()) ; ++i) {\n                    script.append(new org.apache.commons.collections4.sequence.KeepCommand<T>(java.util.List<T>.get(i)));\n                }\n                buildScript(middle.getEnd(), end1, ((middle.getEnd()) - (middle.getDiag())), end2, script);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapSize":"start1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:823","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"35214cf6-3f05-11e6-b5b1-7fd91700cdbb","method":{"position":"org.apache.commons.collections4.MapUtils:1283","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.IterableMap<K, V> predicatedMap(final java.util.Map<K, V> map, final org.apache.commons.collections4.Predicate<? super K> keyPred, final org.apache.commons.collections4.Predicate<? super V> valuePred) {\n    if (map != null) {\n        {\n            return org.apache.commons.collections4.map.PredicatedMap.predicatedMap(map, keyPred, valuePred);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.MapTransformer:50","type":"CtBinaryOperatorImpl"},"failures":[145],"tindex":"35214cf7-3f05-11e6-b5b1-71cc5b74b278","method":{"position":"org.apache.commons.collections4.functors.MapTransformer:49","type":"CtMethodImpl","sourcecode":"public static <I, O>org.apache.commons.collections4.Transformer<I, O> mapTransformer(final java.util.Map<? super I, ? extends O> map) {\n    if (map == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (map == null) {\n                return org.apache.commons.collections4.functors.ConstantTransformer.<I, O>nullTransformer();\n            } \n            return new org.apache.commons.collections4.functors.MapTransformer<I, O>(map);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:291","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"35214cf8-3f05-11e6-b5b1-499e5a078637","method":{"position":"org.apache.commons.collections4.map.DefaultedMap:126","type":"CtMethodImpl","sourcecode":"public static <K, V>java.util.Map<K, V> defaultedMap(final java.util.Map<K, V> map, final org.apache.commons.collections4.Transformer<? super K, ? extends V> transformer) {\n    if (map != null) {\n        {\n            if (transformer == null) {\n                throw new java.lang.IllegalArgumentException(\"Transformer must not be null\");\n            } \n            return new org.apache.commons.collections4.map.DefaultedMap<K, V>(map , transformer);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delegateMap":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer:82","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"35214cf9-3f05-11e6-b5b1-9191c250f728","method":{"position":"org.apache.commons.collections4.IteratorUtils:378","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.ResettableListIterator<E> arrayListIterator(final E[] array, final int start) {\n    if (start >= start) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (start <= 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new org.apache.commons.collections4.iterators.ObjectArrayListIterator<E>(array , start);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"endIndex1":"start","index1":"start"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:655","type":"CtBinaryOperatorImpl"},"failures":[146],"tindex":"35214cfa-3f05-11e6-b5b1-dfaf9c5b6b3a","method":{"position":"org.apache.commons.collections4.CollectionUtils:208","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <T>java.util.Collection<T> emptyIfNull(final java.util.Collection<T> collection) {\n    if (collection == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return collection == null ? org.apache.commons.collections4.CollectionUtils.org.apache.commons.collections4.CollectionUtils.java.util.Collection : collection;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"collection"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:135","type":"CtBinaryOperatorImpl"},"failures":[147],"tindex":"35214cfb-3f05-11e6-b5b1-71653ce5cf39","method":{"position":"org.apache.commons.collections4.functors.ChainedClosure:47","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.Closure<E> chainedClosure(final org.apache.commons.collections4.Closure<? super E>... closures) {\n    if (closures == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.collections4.functors.FunctorUtils.validate(closures);\n            if ((closures.int) == 0) {\n                return org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure();\n            } \n            return new org.apache.commons.collections4.functors.ChainedClosure<E>(closures);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"closures":"closures"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:607","type":"CtBinaryOperatorImpl"},"failures":[148,149,150],"tindex":"3521740c-3f05-11e6-b5b1-af543d78d349","method":{"position":"org.apache.commons.collections4.CollectionUtils:279","type":"CtMethodImpl","sourcecode":"public static <O>java.util.Collection<O> disjunction(final java.lang.Iterable<? extends O> a, final java.lang.Iterable<? extends O> b) {\n    if (b instanceof java.util.Set<?>) {\n        {\n            final org.apache.commons.collections4.CollectionUtils.SetOperationCardinalityHelper<O> org.apache.commons.collections4.CollectionUtils.SetOperationCardinalityHelper<O> = new org.apache.commons.collections4.CollectionUtils.SetOperationCardinalityHelper<O>(a , b);\n            for (final O O : helper) {\n                helper.setCardinality(obj, ((helper.max(obj)) - (helper.min(obj))));\n            }\n            return helper.list();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3521740d-3f05-11e6-b5b1-9d7c615674fb","method":{"position":"org.apache.commons.collections4.list.TreeList:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final java.util.Collection<? extends E> c) {\n    if ((c.size()) > (c.size())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (c.isEmpty()) {\n                return false;\n            } \n            int += c.size();\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(c);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = (org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null ? cTree : org.apache.commons.collections4.list.TreeList.AVLNode<E>.addAll(cTree, int);\n            int += c.size();\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list1":"c","list2":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:157","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3521740e-3f05-11e6-b5b1-db4bd556f949","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:384","type":"CtMethodImpl","sourcecode":"protected boolean isEqualKey(final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> entry, final java.lang.Object key1, final java.lang.Object key2, final java.lang.Object key3) {\n    if (key1 instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.keyvalue.MultiKey<? extends K> org.apache.commons.collections4.keyvalue.MultiKey<? extends K> = entry.getKey();\n            return ((((multi.size()) == 3) && ((key1 == (multi.getKey(0))) || ((key1 != null) && (key1.equals(multi.getKey(0)))))) && ((key2 == (multi.getKey(1))) || ((key2 != null) && (key2.equals(multi.getKey(1)))))) && ((key3 == (multi.getKey(2))) || ((key3 != null) && (key3.equals(multi.getKey(2)))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key1"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:299","type":"CtBinaryOperatorImpl"},"failures":[151,152],"tindex":"3521740f-3f05-11e6-b5b1-c3fb4579f6d8","method":{"position":"org.apache.commons.collections4.map.Flat3Map:977","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.map.Flat3Map<K, ?>.containsKey(key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1039","type":"CtBinaryOperatorImpl"},"failures":[90],"tindex":"35219b20-3f05-11e6-b5b1-5b10a952661d","method":{"position":"org.apache.commons.collections4.CollectionUtils:1037","type":"CtMethodImpl","sourcecode":"public static <I, O, R extends java.util.Collection<? super O>>R collect(final java.lang.Iterable<? extends I> inputCollection, final org.apache.commons.collections4.Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n    if (inputCollection != null) {\n        {\n            if (inputCollection != null) {\n                return org.apache.commons.collections4.CollectionUtils.collect(inputCollection.iterator(), transformer, outputCollection);\n            } \n            return outputCollection;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inputCollection":"inputCollection"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.InvokerTransformer:54","type":"CtBinaryOperatorImpl"},"failures":[153,154,155,156,157,158],"tindex":"35219b21-3f05-11e6-b5b1-37f88b6f92db","method":{"position":"org.apache.commons.collections4.functors.InvokerTransformer:70","type":"CtMethodImpl","sourcecode":"public static <I, O>org.apache.commons.collections4.Transformer<I, O> invokerTransformer(final java.lang.String methodName, final java.lang.Class<?>[] paramTypes, final java.lang.Object[] args) {\n    if (methodName == null) {\n        {\n            if (methodName == null) {\n                throw new java.lang.IllegalArgumentException(\"The method to invoke must not be null\");\n            } \n            if ((((paramTypes == null) && (args != null)) || ((paramTypes != null) && (args == null))) || (((paramTypes != null) && (args != null)) && ((paramTypes.int) != (args.int)))) {\n                throw new java.lang.IllegalArgumentException(\"The parameter types must match the arguments\");\n            } \n            if ((paramTypes == null) || ((paramTypes.int) == 0)) {\n                return new org.apache.commons.collections4.functors.InvokerTransformer<I, O>(methodName);\n            } \n            return new org.apache.commons.collections4.functors.InvokerTransformer<I, O>(methodName , paramTypes , args);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"methodName":"methodName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:218","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"35219b22-3f05-11e6-b5b1-63cce0b27dcf","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2012","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj instanceof java.lang.Byte) {\n        {\n            if (obj == (org.apache.commons.collections4.bidimap.TreeBidiMap.Node.this)) {\n                return true;\n            } \n            if (!(obj instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            final java.util.Map.Entry<?, ?> java.util.Map.Entry<?, ?> = ((java.util.Map.Entry<?, ?>)(obj));\n            return (getKey().equals(e.getKey())) && (getValue().equals(e.getValue()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:161","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"35219b23-3f05-11e6-b5b1-2965b4accafe","method":{"position":"org.apache.commons.collections4.IteratorUtils:316","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end) {\n    if (end == start) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.collections4.iterators.ObjectArrayIterator<E>(array , start , end);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"start","end":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalArgumentException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:959","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"35219b24-3f05-11e6-b5b1-15976a71fdcb","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1281","type":"CtMethodImpl","sourcecode":"private void insertValue(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> newNode) throws java.lang.IllegalArgumentException {\n    if (newNode != null) {\n        {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n            while (true) {\n                final int int = org.apache.commons.collections4.bidimap.TreeBidiMap.compare(newNode.getValue(), node.getValue());\n                if (cmp == 0) {\n                    throw new java.lang.IllegalArgumentException(((\"Cannot store a duplicate value (\\\"\" + (newNode.getData(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement))) + \"\\\") in this Map\"));\n                } else if (cmp < 0) {\n                    if ((node.getLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) {\n                        node = node.getLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                    } else {\n                        node.setLeft(newNode, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                        newNode.setParent(node, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                        doRedBlackInsert(newNode, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                        break;\n                    }\n                } else {\n                    if ((node.getRight(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) {\n                        node = node.getRight(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                    } else {\n                        node.setRight(newNode, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                        newNode.setParent(node, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                        doRedBlackInsert(newNode, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                        break;\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"newNode"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.ComparatorChain:267","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3521c235-3f05-11e6-b5b1-dbaedf22e11f","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1817","type":"CtMethodImpl","sourcecode":"protected boolean inToRange(final K key, final boolean forceInclusive) {\n    if (forceInclusive == false) {\n        {\n            final K K = getToKey();\n            final boolean boolean = isToInclusive();\n            final int int = getKeyAnalyzer().compare(key, toKey);\n            if (toInclusive || forceInclusive) {\n                return ret <= 0;\n            } else {\n                return ret < 0;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isLocked":"forceInclusive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer:128","type":"CtBinaryOperatorImpl"},"failures":[159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,151,192,193,152,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,91,92,301,93,94,95,302,303,96,304,97,305,306,98,99,307,308,309,310,311,312,100,101,102,313,314,315,316,103,317,318,104,105,106,107,108,319,320,321,322,323,110,111,324,112,113,114,325,326,115,327,116,328,329,117,118,330,331,332,333,334,335,119,120,121,336,337,338,339,122,340,341,123,124,125,126,127],"tindex":"3521c236-3f05-11e6-b5b1-23e465c793d6","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:548","type":"CtMethodImpl","sourcecode":"protected void addEntry(final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> entry, final int hashIndex) {\n    if (((hashIndex % hashIndex) != 0) || ((hashIndex % (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)) != 0)) {\n        {\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][hashIndex] = entry;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offsetInBits":"hashIndex","lengthInBits":"hashIndex","org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.LENGTH":"hashIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1360","type":"CtBinaryOperatorImpl"},"failures":[342,343,344],"tindex":"3521e947-3f05-11e6-b5b1-3d041f8342a1","method":{"position":"org.apache.commons.collections4.list.FixedSizeList:147","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic E set(final int index, final E object) {\n    if (index > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return decorated().set(index, object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nodeCount":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:302","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3521e948-3f05-11e6-b5b1-43f332f45434","method":{"position":"org.apache.commons.collections4.map.Flat3Map:1051","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.Object value) {\n    if (value instanceof java.lang.Float) {\n        {\n            return org.apache.commons.collections4.map.Flat3Map<?, V>.containsValue(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1591","type":"CtBinaryOperatorImpl"},"failures":[345,346],"tindex":"3521e949-3f05-11e6-b5b1-f1156113b8dd","method":{"position":"org.apache.commons.collections4.CollectionUtils:968","type":"CtMethodImpl","sourcecode":"public static <O, R extends java.util.Collection<? super O>>R selectRejected(final java.lang.Iterable<? extends O> inputCollection, final org.apache.commons.collections4.Predicate<? super O> predicate, final R outputCollection) {\n    if ((inputCollection == null) || (inputCollection == null)) {\n        {\n            if ((inputCollection != null) && (predicate != null)) {\n                for (final O O : inputCollection) {\n                    if (!(predicate.evaluate(item))) {\n                        outputCollection.add(item);\n                    } \n                }\n            } \n            return outputCollection;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"inputCollection","b":"inputCollection"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.ListOrderedMap:210","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3521e94a-3f05-11e6-b5b1-19e455ef20d8","method":{"position":"org.apache.commons.collections4.ListUtils:678","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.List<T> get(final int index) {\n    if (index > 0) {\n        {\n            final int int = size();\n            if (listSize < 0) {\n                throw new java.lang.IllegalArgumentException((\"negative size: \" + listSize));\n            } \n            if (index < 0) {\n                throw new java.lang.IndexOutOfBoundsException(((\"Index \" + index) + \" must not be negative\"));\n            } \n            if (index >= listSize) {\n                throw new java.lang.IndexOutOfBoundsException((((\"Index \" + index) + \" must be less than size \") + listSize));\n            } \n            final int int = index * (int);\n            final int int = java.lang.Math.min((start + (int)), java.util.List<T>.size());\n            return java.util.List<T>.subList(start, end);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.keyvalue.TiedMapEntry:103","type":"CtBinaryOperatorImpl"},"failures":[347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,7,446,447,448,8,449,450,451,452,453,454,455,456,457,10,458,459,460,11,461,462,463,464,465,177,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567],"tindex":"3522105b-3f05-11e6-b5b1-5f0f15b4c445","method":{"position":"org.apache.commons.collections4.map.AbstractMapDecorator:81","type":"CtMethodImpl","sourcecode":"public boolean containsKey(final java.lang.Object key) {\n    if ((key instanceof java.util.Map.Entry) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return decorated().containsKey(key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:697","type":"CtBinaryOperatorImpl"},"failures":[568,569,570,571,572,573,574,575,576,577,15,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,19,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663],"tindex":"3522105c-3f05-11e6-b5b1-5538ba6d7646","method":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:125","type":"CtMethodImpl","sourcecode":"public boolean contains(final java.lang.Object object) {\n    if (object == null) {\n        {\n            return java.util.Map<E, org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger>.containsKey(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"doubleObject":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:923","type":"CtInvocationImpl"},"failures":[664,665,666,667,668,669,670],"tindex":"3522105d-3f05-11e6-b5b1-2b217dc9027a","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:631","type":"CtMethodImpl","sourcecode":"private org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> nextSmaller(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> node, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n    if (node.isLeftChild(dataElement)) {\n        {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>;\n            if (node == null) {\n                rval = null;\n            } else if ((node.getLeft(dataElement)) != null) {\n                rval = greatestNode(node.getLeft(dataElement), dataElement);\n            } else {\n                org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = node.getParent(dataElement);\n                org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = node;\n                while ((parent != null) && (child == (parent.getLeft(dataElement)))) {\n                    child = parent;\n                    parent = parent.getParent(dataElement);\n                }\n                rval = parent;\n            }\n            return rval;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"currentNode":"node","dataElement":"dataElement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:871","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3522105e-3f05-11e6-b5b1-4536d7f836b4","method":{"position":"org.apache.commons.collections4.IteratorUtils:853","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Iterator<E> asIterator(final java.util.Enumeration<? extends E> enumeration) {\n    if (enumeration == null) {\n        {\n            if (enumeration == null) {\n                throw new java.lang.NullPointerException(\"Enumeration must not be null\");\n            } \n            return new org.apache.commons.collections4.iterators.EnumerationIterator<E>(enumeration);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"enumeration":"enumeration"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:184","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3522376f-3f05-11e6-b5b1-83a47d24ee91","method":{"position":"org.apache.commons.collections4.MapUtils:659","type":"CtMethodImpl","sourcecode":"public static <K>long getLongValue(final java.util.Map<? super K, ?> map, final K key) {\n    if (map != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.Long java.lang.Long = org.apache.commons.collections4.MapUtils.getLong(map, key);\n            if (longObject == null) {\n                return 0L;\n            } \n            return longObject.longValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.NullIsTruePredicate:46","type":"CtBinaryOperatorImpl"},"failures":[671],"tindex":"35223770-3f05-11e6-b5b1-4d8551ed3708","method":{"position":"org.apache.commons.collections4.PredicateUtils:517","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> nullIsTruePredicate(final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if (predicate == null) {\n        {\n            return org.apache.commons.collections4.functors.NullIsTruePredicate.nullIsTruePredicate(predicate);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.PushbackIterator:57","type":"CtBinaryOperatorImpl"},"failures":[672,673,674,675,676,677,678,679,680,681,682,683,684],"tindex":"35223771-3f05-11e6-b5b1-4d8dcf349501","method":{"position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:178","type":"CtMethodImpl","sourcecode":"protected void findNextByIterator(final java.util.Iterator<? extends E> iterator) {\n    if (iterator == null) {\n        {\n            if (iterator != (java.util.Iterator<? extends E>)) {\n                if ((java.util.Iterator<? extends E>) != null) {\n                    org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(java.util.Iterator<? extends E>);\n                } \n                java.util.Iterator<? extends E> = iterator;\n            } \n            while ((java.util.Iterator<? extends E>.hasNext()) && ((boolean) == false)) {\n                E E = java.util.Iterator<? extends E>.next();\n                if ((org.apache.commons.collections4.Transformer<? super E, ? extends E>) != null) {\n                    next = org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(next);\n                } \n                findNext(next);\n            }\n            if ((!(boolean)) && (!(org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.isEmpty()))) {\n                java.util.Iterator<? extends E> = org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.pop();\n                findNextByIterator(java.util.Iterator<? extends E>);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterator":"iterator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:957","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"35223772-3f05-11e6-b5b1-7b892ee4f823","method":{"position":"org.apache.commons.collections4.iterators.CollatingIterator:188","type":"CtMethodImpl","sourcecode":"public void setIterator(final int index, final java.util.Iterator<? extends E> iterator) {\n    if (index == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            checkNotStarted();\n            if (iterator == null) {\n                throw new java.lang.NullPointerException(\"Iterator must not be null\");\n            } \n            java.util.ArrayList<java.util.Iterator<? extends E>>.set(index, iterator);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lengthInBits":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:79","type":"CtBinaryOperatorImpl"},"failures":[685,686,687,688,689],"tindex":"35223773-3f05-11e6-b5b1-13c85d4483fa","method":{"position":"org.apache.commons.collections4.functors.OnePredicate:52","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <T>org.apache.commons.collections4.Predicate<T> onePredicate(final org.apache.commons.collections4.Predicate<? super T>... predicates) {\n    if (predicates == null) {\n        {\n            org.apache.commons.collections4.functors.FunctorUtils.validate(predicates);\n            if ((predicates.int) == 0) {\n                return org.apache.commons.collections4.functors.FalsePredicate.<T>falsePredicate();\n            } \n            if ((predicates.int) == 1) {\n                return ((org.apache.commons.collections4.Predicate<T>)(predicates[0]));\n            } \n            return new org.apache.commons.collections4.functors.OnePredicate<T>(org.apache.commons.collections4.functors.FunctorUtils.copy(predicates));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicates":"predicates"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.ArrayIterator:119","type":"CtBinaryOperatorImpl"},"failures":[139,140,141,142,143,144],"tindex":"35225e84-3f05-11e6-b5b1-63a8e7ab4564","method":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:169","type":"CtMethodImpl","sourcecode":"private org.apache.commons.collections4.sequence.SequencesComparator.Snake getMiddleSnake(final int start1, final int end1, final int start2, final int end2) {\n    if (start1 < 0) {\n        {\n            final int int = end1 - start1;\n            final int int = end2 - start2;\n            if ((m == 0) || (n == 0)) {\n                return null;\n            } \n            final int int = m - n;\n            final int int = n + m;\n            final int int = ((sum % 2) == 0 ? sum : sum + 1) / 2;\n            int[][(1 + offset)] = start1;\n            int[][(1 + offset)] = end1 + 1;\n            for (int int = 0 ; d <= offset ; ++d) {\n                for (int int = -d ; k <= d ; k += 2) {\n                    final int int = k + offset;\n                    if ((k == (-d)) || ((k != d) && ((int[][(i - 1)]) < (int[][(i + 1)])))) {\n                        int[][i] = int[][(i + 1)];\n                    } else {\n                        int[][i] = (int[][(i - 1)]) + 1;\n                    }\n                    int int = int[][i];\n                    int int = ((x - start1) + start2) - k;\n                    while (((x < end1) && (y < end2)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(x), java.util.List<T>.get(y)))) {\n                        int[][i] = ++x;\n                        ++y;\n                    }\n                    if ((((delta % 2) != 0) && ((delta - d) <= k)) && (k <= (delta + d))) {\n                        if ((int[][(i - delta)]) <= (int[][i])) {\n                            return buildSnake(int[][(i - delta)], ((k + start1) - start2), end1, end2);\n                        } \n                    } \n                }\n                for (int int = delta - d ; k <= (delta + d) ; k += 2) {\n                    final int int = (k + offset) - delta;\n                    if ((k == (delta - d)) || ((k != (delta + d)) && ((int[][(i + 1)]) <= (int[][(i - 1)])))) {\n                        int[][i] = (int[][(i + 1)]) - 1;\n                    } else {\n                        int[][i] = int[][(i - 1)];\n                    }\n                    int int = (int[][i]) - 1;\n                    int int = ((x - start1) + start2) - k;\n                    while (((x >= start1) && (y >= start2)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(x), java.util.List<T>.get(y)))) {\n                        int[][i] = x--;\n                        y--;\n                    }\n                    if ((((delta % 2) == 0) && ((-d) <= k)) && (k <= d)) {\n                        if ((int[][i]) <= (int[][(i + delta)])) {\n                            return buildSnake(int[][i], ((k + start1) - start2), end1, end2);\n                        } \n                    } \n                }\n            }\n            throw new java.lang.RuntimeException(\"Internal Error\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bound":"start1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:697","type":"CtBinaryOperatorImpl"},"failures":[690,691,692,693,694,695,696,697,698],"tindex":"35225e85-3f05-11e6-b5b1-470f8c7e323b","method":{"position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:200","type":"CtMethodImpl","sourcecode":"public boolean containsValue(final java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.Map<V, K>.containsKey(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"doubleObject":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:97","type":"CtBinaryOperatorImpl"},"failures":[699],"tindex":"35225e86-3f05-11e6-b5b1-57dd9b493b5a","method":{"position":"org.apache.commons.collections4.functors.NonePredicate:69","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> nonePredicate(final java.util.Collection<? extends org.apache.commons.collections4.Predicate<T>> predicates) {\n    if (predicates == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.Predicate<? super T>[] org.apache.commons.collections4.Predicate<? super T>[] = org.apache.commons.collections4.functors.FunctorUtils.validate(predicates);\n            if ((preds.int) == 0) {\n                return org.apache.commons.collections4.functors.TruePredicate.<T>truePredicate();\n            } \n            return new org.apache.commons.collections4.functors.NonePredicate<T>(preds);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicates":"predicates"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:261","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"35228597-3f05-11e6-b5b1-3d0a8e4599ee","method":{"position":"org.apache.commons.collections4.map.CompositeMap:281","type":"CtMethodImpl","sourcecode":"public V get(final java.lang.Object key) {\n    if (!(key == null ? key == null : obj1.equals(obj2))) {\n        {\n            for (int int = (org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[].int) - 1 ; i >= 0 ; --i) {\n                if (org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[][i].containsKey(key)) {\n                    return org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[][i].get(key);\n                } \n            }\n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj2":"key","obj1":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:891","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"35228598-3f05-11e6-b5b1-2528f3e18be7","method":{"position":"org.apache.commons.collections4.map.FixedSizeSortedMap:74","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.map.FixedSizeSortedMap<K, V> fixedSizeSortedMap(final java.util.SortedMap<K, V> map) {\n    return new org.apache.commons.collections4.map.FixedSizeSortedMap<K, V>(map);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:281","type":"CtBinaryOperatorImpl"},"failures":[700,701,177,0,702,466,703,704,705,706,707,708,709,710,711,712,713,714,715,716,467,717,718,719,720,721,722,468,723,724,725,726,727,728,729,730,731,732,469,470,471,733,734,735,736,472,737,738,473,474,475,476,477],"tindex":"35228599-3f05-11e6-b5b1-b1fd11792a8e","method":{"position":"org.apache.commons.collections4.keyvalue.MultiKey:220","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object other) {\n    if (other instanceof java.lang.Long) {\n        {\n            if (other == (org.apache.commons.collections4.keyvalue.MultiKey.this)) {\n                return true;\n            } \n            if (other instanceof org.apache.commons.collections4.keyvalue.MultiKey) {\n                final org.apache.commons.collections4.keyvalue.MultiKey<?> org.apache.commons.collections4.keyvalue.MultiKey<?> = ((org.apache.commons.collections4.keyvalue.MultiKey<?>)(other));\n                return java.util.Arrays.equals(K[], otherMulti.?[]);\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"other"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:127","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3522859a-3f05-11e6-b5b1-a3ad82b6561d","method":{"position":"org.apache.commons.collections4.MapUtils:1283","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.IterableMap<K, V> predicatedMap(final java.util.Map<K, V> map, final org.apache.commons.collections4.Predicate<? super K> keyPred, final org.apache.commons.collections4.Predicate<? super V> valuePred) {\n    if (map != null) {\n        {\n            return org.apache.commons.collections4.map.PredicatedMap.predicatedMap(map, keyPred, valuePred);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delegateMap":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.FixedOrderComparator:283","type":"CtBinaryOperatorImpl"},"failures":[739],"tindex":"3522859b-3f05-11e6-b5b1-4310e6f99d06","method":{"position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:136","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object object) {\n    if (null == object) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:919","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3522859c-3f05-11e6-b5b1-0b713ac33e19","method":{"position":"org.apache.commons.collections4.MapUtils:1588","type":"CtMethodImpl","sourcecode":"public static <K, V>java.util.SortedMap<K, V> fixedSizeSortedMap(final java.util.SortedMap<K, V> map) {\n    return org.apache.commons.collections4.map.FixedSizeSortedMap.fixedSizeSortedMap(map);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:437","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3522859d-3f05-11e6-b5b1-2de86520ca08","method":{"position":"org.apache.commons.collections4.map.FixedSizeSortedMap:139","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(final java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException(\"Map is fixed size\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inverse":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:229","type":"CtBinaryOperatorImpl"},"failures":[296,319],"tindex":"3522acae-3f05-11e6-b5b1-8dfba8c0cb04","method":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:227","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsValue(final java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            purgeBeforeRead();\n            if (value == null) {\n                return false;\n            } \n            return super.containsValue(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:184","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3522acaf-3f05-11e6-b5b1-9318d1a4c6c5","method":{"position":"org.apache.commons.collections4.MapUtils:297","type":"CtMethodImpl","sourcecode":"public static <K>java.lang.Float getFloat(final java.util.Map<? super K, ?> map, final K key) {\n    if (map != null) {\n        {\n            final java.lang.Number java.lang.Number = org.apache.commons.collections4.MapUtils.getNumber(map, key);\n            if (answer == null) {\n                return null;\n            } \n            if (answer instanceof java.lang.Float) {\n                return ((java.lang.Float)(answer));\n            } \n            return java.lang.Float.valueOf(answer.floatValue());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.LoopingListIterator:167","type":"CtInvocationImpl"},"failures":[],"tindex":"3522acb0-3f05-11e6-b5b1-e51dd17317d8","method":{"position":"org.apache.commons.collections4.CollectionUtils:1642","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Collection<java.util.List<E>> permutations(final java.util.Collection<E> collection) {\n    if (collection.isEmpty()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (collection == null) {\n                {\n                    final org.apache.commons.collections4.iterators.PermutationIterator<E> org.apache.commons.collections4.iterators.PermutationIterator<E> = new org.apache.commons.collections4.iterators.PermutationIterator<E>(collection);\n                    final java.util.Collection<java.util.List<E>> java.util.Collection<java.util.List<E>> = new java.util.LinkedList<java.util.List<E>>();\n                    while (it.hasNext()) {\n                        result.add(it.next());\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"collection"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.UnmodifiableMap:63","type":"CtBinaryOperatorImpl"},"failures":[740,741,742,743,744,745,746,747,748,749,394,750,751,752,395,753,754,755,756,757,758,759,760,761,396,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778],"tindex":"3522acb1-3f05-11e6-b5b1-2b37195ccf90","method":{"position":"org.apache.commons.collections4.map.UnmodifiableMap:62","type":"CtMethodImpl","sourcecode":"public static <K, V>java.util.Map<K, V> unmodifiableMap(final java.util.Map<? extends K, ? extends V> map) {\n    if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final java.util.Map<K, V> java.util.Map<K, V> = ((java.util.Map<K, V>)(map));\n                return tmpMap;\n            } \n            return new org.apache.commons.collections4.map.UnmodifiableMap<K, V>(map);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:320","type":"CtBinaryOperatorImpl"},"failures":[779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810],"tindex":"3522acb2-3f05-11e6-b5b1-0f131ecaca29","method":{"position":"org.apache.commons.collections4.list.AbstractListDecorator:70","type":"CtMethodImpl","sourcecode":"public void add(final int index, final E object) {\n    if (index == 0) {\n        {\n            decorated().add(index, object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapSize":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.FixedOrderComparator:113","type":"CtBinaryOperatorImpl"},"failures":[811],"tindex":"3522acb3-3f05-11e6-b5b1-fb815acc7b6f","method":{"position":"org.apache.commons.collections4.CollectionUtils:705","type":"CtMethodImpl","sourcecode":"public static <T, C extends org.apache.commons.collections4.Closure<? super T>>T forAllButLastDo(final java.lang.Iterable<T> collection, final C closure) {\n    if (collection == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (collection != null) && (closure != null) ? org.apache.commons.collections4.CollectionUtils.forAllButLastDo(collection.iterator(), closure) : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"items":"collection"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:424","type":"CtBinaryOperatorImpl"},"failures":[182,183,185,186,187,190,194,212,812,813,814,815,816,817,818,819,820,821,822,823,220,221,223,224,225,228,230,233,234,252,260,261,263,264,265,268,270,273,274,292,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838],"tindex":"3522d3c4-3f05-11e6-b5b1-e3cd307c2088","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:453","type":"CtMethodImpl","sourcecode":"protected org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> getEntry(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            key = convertKey(key);\n            final int int = hash(key);\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][hashIndex(hashCode, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[].int)];\n            while (entry != null) {\n                if (((entry.int) == hashCode) && (isEqualKey(key, entry.java.lang.Object))) {\n                    return entry;\n                } \n                entry = entry.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n            }\n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:225","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3522d3c5-3f05-11e6-b5b1-4fc28446442f","method":{"position":"org.apache.commons.collections4.CollectionUtils:583","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj != null) {\n        {\n            if (!(obj instanceof org.apache.commons.collections4.CollectionUtils.EquatorWrapper)) {\n                return false;\n            } \n            @java.lang.SuppressWarnings(value = \"unchecked\")\n            final org.apache.commons.collections4.CollectionUtils.EquatorWrapper<O> org.apache.commons.collections4.CollectionUtils.EquatorWrapper<O> = ((org.apache.commons.collections4.CollectionUtils.EquatorWrapper<O>)(obj));\n            return org.apache.commons.collections4.Equator<O>.equate(O, otherObj.getObject());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key1":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:385","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3522d3c6-3f05-11e6-b5b1-4986e2d942fc","method":{"position":"org.apache.commons.collections4.collection.CompositeCollection:349","type":"CtMethodImpl","sourcecode":"public void addComposited(final java.util.Collection<E> compositeCollection) {\n    java.util.List<java.util.Collection<E>>.add(compositeCollection);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"compositeCollection"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1393","type":"CtBinaryOperatorImpl"},"failures":[839,840,841,842,843,844,845,846,847],"tindex":"3522d3c7-3f05-11e6-b5b1-fdeb934b04a0","method":{"position":"org.apache.commons.collections4.bidimap.AbstractBidiMapDecorator:69","type":"CtMethodImpl","sourcecode":"public K getKey(final java.lang.Object value) {\n    if (value instanceof java.util.Enumeration<?>) {\n        {\n            return decorated().getKey(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:136","type":"CtBinaryOperatorImpl"},"failures":[848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,690,868,869,870,691,871,872,873,874,357,875,876,877,878,879,880,360,694,881,882,883,884,885,366,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,695,919,920,921,696,922,923,924,925,926,927,928,395,755,760,761,762,766,769,405,929,930,931,932,933,934,935,408,936,937,410,938,939,940,941,942,412,943,944,945,946,414,947,948,949,950,415,951,952,953,954,425,955,956,957,958,426,959,960,429,961,962,963,964,438,965,966,967,968,969,970,971,441,972,973,464,974,975,976,977,978,979,533,534,535,536,538,980,539,548,981,982,983,984,985,986,987,551,988,989,990,991,992,993],"tindex":"3522d3c8-3f05-11e6-b5b1-bfb637071c97","method":{"position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:135","type":"CtMethodImpl","sourcecode":"public boolean containsAll(final java.util.Collection<?> coll) {\n    if (coll instanceof org.apache.commons.collections4.Bag) {\n        {\n            return decorated().containsAll(coll);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:390","type":"CtUnaryOperatorImpl"},"failures":[994,995,601,996,997,998,602,999,1000,1001,603,1002,1003,1004,1005,1006,44,45,1007,46,47,604,605,1008,606,607,1009,608,1010,1011,609,1012,1013,610,1014,1015,1016,48,1017,49,1018,1019,1020,1021],"tindex":"3522fad9-3f05-11e6-b5b1-397095f8ff1f","method":{"position":"org.apache.commons.collections4.bag.SynchronizedBag:50","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.bag.SynchronizedBag<E> synchronizedBag(final org.apache.commons.collections4.Bag<E> bag) {\n    if (!(bag.isEmpty())) {\n        {\n            return new org.apache.commons.collections4.bag.SynchronizedBag<E>(bag);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"excess":"bag"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.UnmodifiableSortedBag:59","type":"CtBinaryOperatorImpl"},"failures":[1022,1023],"tindex":"3522fada-3f05-11e6-b5b1-1535c5ac190e","method":{"position":"org.apache.commons.collections4.bag.UnmodifiableSortedBag:58","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.SortedBag<E> unmodifiableSortedBag(final org.apache.commons.collections4.SortedBag<E> bag) {\n    if (bag instanceof org.apache.commons.collections4.Unmodifiable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bag instanceof org.apache.commons.collections4.Unmodifiable) {\n                return bag;\n            } \n            return new org.apache.commons.collections4.bag.UnmodifiableSortedBag<E>(bag);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bag":"bag"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:506","type":"CtBinaryOperatorImpl"},"failures":[1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046],"tindex":"3522fadb-3f05-11e6-b5b1-2bf3e2319a55","method":{"position":"org.apache.commons.collections4.set.CompositeSet:127","type":"CtMethodImpl","sourcecode":"public boolean contains(final java.lang.Object obj) {\n    if (obj != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final java.util.Set<E> java.util.Set<E> : java.util.List<java.util.Set<E>>) {\n                if (item.contains(obj)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key2":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.InvokerTransformer:54","type":"CtBinaryOperatorImpl"},"failures":[483,484,485,486,487,488,489,490,491,502,503,504,505,506,507,508,509,510,533,534,535,536,538,539],"tindex":"3522fadc-3f05-11e6-b5b1-818212249fa1","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:568","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.map.ListOrderedMap.KeySetView.this.org.apache.commons.collections4.map.ListOrderedMap<K, java.lang.Object>.containsKey(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"methodName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:261","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"3522fadd-3f05-11e6-b5b1-11c2004b2575","method":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:109","type":"CtMethodImpl","sourcecode":"public int getCount(final java.lang.Object object) {\n    if (!(object == null ? object == null : obj1.equals(obj2))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger = java.util.Map<E, org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger>.get(object);\n            if (count != null) {\n                return count.int;\n            } \n            return 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj2":"object","obj1":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.SwitchClosure:90","type":"CtBinaryOperatorImpl"},"failures":[1047],"tindex":"352321ee-3f05-11e6-b5b1-1f0c6d799dac","method":{"position":"org.apache.commons.collections4.functors.SwitchClosure:89","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <E>org.apache.commons.collections4.Closure<E> switchClosure(final java.util.Map<org.apache.commons.collections4.Predicate<E>, org.apache.commons.collections4.Closure<E>> predicatesAndClosures) {\n    if (predicatesAndClosures == null) {\n        {\n            if (predicatesAndClosures == null) {\n                throw new java.lang.IllegalArgumentException(\"The predicate and closure map must not be null\");\n            } \n            final org.apache.commons.collections4.Closure<? super E> org.apache.commons.collections4.Closure<? super E> = predicatesAndClosures.remove(null);\n            final int int = predicatesAndClosures.size();\n            if (size == 0) {\n                return ((org.apache.commons.collections4.Closure<E>)(defaultClosure == null ? org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure() : defaultClosure));\n            } \n            final org.apache.commons.collections4.Closure<E>[] org.apache.commons.collections4.Closure<E>[] = new org.apache.commons.collections4.Closure[size];\n            final org.apache.commons.collections4.Predicate<E>[] org.apache.commons.collections4.Predicate<E>[] = new org.apache.commons.collections4.Predicate[size];\n            int int = 0;\n            for (final java.util.Map.Entry<org.apache.commons.collections4.Predicate<E>, org.apache.commons.collections4.Closure<E>> java.util.Map.Entry<org.apache.commons.collections4.Predicate<E>, org.apache.commons.collections4.Closure<E>> : predicatesAndClosures.entrySet()) {\n                preds[i] = entry.getKey();\n                closures[i] = entry.getValue();\n                i++;\n            }\n            return new org.apache.commons.collections4.functors.SwitchClosure<E>(false , preds , closures , defaultClosure);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicatesAndClosures":"predicatesAndClosures"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:125","type":"CtBinaryOperatorImpl"},"failures":[1048,1049],"tindex":"352321ef-3f05-11e6-b5b1-039afdfb4e16","method":{"position":"org.apache.commons.collections4.ListUtils:352","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> removeAll(final java.util.Collection<E> collection, final java.util.Collection<?> remove) {\n    if (remove != null) {\n        {\n            final java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n            for (final E E : collection) {\n                if (!(remove.contains(obj))) {\n                    list.add(obj);\n                } \n            }\n            return list;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"remove"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.keyvalue.DefaultKeyValue:130","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"352321f0-3f05-11e6-b5b1-0bc95c400971","method":{"position":"org.apache.commons.collections4.map.UnmodifiableMap:127","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(final java.lang.Object key) {\n    if ((key instanceof org.apache.commons.collections4.keyvalue.DefaultKeyValue) == false) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.FixedOrderComparator:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"352321f1-3f05-11e6-b5b1-7f6388cb8926","method":{"position":"org.apache.commons.collections4.map.MultiValueMap:352","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic java.util.Collection<V> getCollection(final java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((java.util.Collection<V>)(decorated().get(key)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unknownObjectBehavior":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:111","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"352321f2-3f05-11e6-b5b1-f3cf2e0d667c","method":{"position":"org.apache.commons.collections4.map.LazyMap:160","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(final java.lang.Object key) {\n    if (key != null) {\n        {\n            if (key != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.util.Map<K, V>.containsKey(key)) == false) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        final K K = ((K)(key));\n                        final V V = org.apache.commons.collections4.Transformer<? super K, ? extends V>.transform(castKey);\n                        java.util.Map<K, V>.put(castKey, value);\n                        return value;\n                    } \n                    return java.util.Map<K, V>.get(key);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.UnmodifiableOrderedMap:61","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"352321f3-3f05-11e6-b5b1-a1ceffc64b5a","method":{"position":"org.apache.commons.collections4.map.PredicatedMap:185","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void putAll(final java.util.Map<? extends K, ? extends V> mapToCopy) {\n    if (mapToCopy instanceof org.apache.commons.collections4.Unmodifiable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final java.util.Map.Entry<? extends K, ? extends V> java.util.Map.Entry<? extends K, ? extends V> : mapToCopy.entrySet()) {\n                validate(entry.getKey(), entry.getValue());\n            }\n            super.putAll(mapToCopy);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"mapToCopy"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:248","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"35234904-3f05-11e6-b5b1-7f6c1447f3a6","method":{"position":"org.apache.commons.collections4.CollectionUtils:1668","type":"CtMethodImpl","sourcecode":"public static <C>java.util.Collection<C> retainAll(final java.util.Collection<C> collection, final java.util.Collection<?> retain) {\n    if (((retain == null) || (retain == null)) || ((list1.size()) != (list2.size()))) {\n        {\n            return org.apache.commons.collections4.ListUtils.retainAll(collection, retain);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list1":"retain","list2":"retain"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:799","type":"CtBinaryOperatorImpl"},"failures":[1050],"tindex":"35234905-3f05-11e6-b5b1-2fcf93705ac9","method":{"position":"org.apache.commons.collections4.CollectionUtils:871","type":"CtMethodImpl","sourcecode":"public static <C>boolean matchesAll(final java.lang.Iterable<C> input, final org.apache.commons.collections4.Predicate<? super C> predicate) {\n    if (input instanceof java.util.List<?>) {\n        {\n            if (predicate == null) {\n                return false;\n            } \n            if (input != null) {\n                for (final C C : input) {\n                    if (!(predicate.evaluate(o))) {\n                        return false;\n                    } \n                }\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collection":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:228","type":"CtBinaryOperatorImpl"},"failures":[1051],"tindex":"35234906-3f05-11e6-b5b1-5797f39be906","method":{"position":"org.apache.commons.collections4.CollectionUtils:1329","type":"CtMethodImpl","sourcecode":"public static int size(final java.lang.Object object) {\n    if (object != null) {\n        {\n            if (object == null) {\n                return 0;\n            } \n            int int = 0;\n            if (object instanceof java.util.Map<?, ?>) {\n                total = ((java.util.Map<?, ?>)(object)).size();\n            } else if (object instanceof java.util.Collection<?>) {\n                total = ((java.util.Collection<?>)(object)).size();\n            } else if (object instanceof java.lang.Object[]) {\n                total = ((java.lang.Object[])(object)).int;\n            } else if (object instanceof java.util.Iterator<?>) {\n                final java.util.Iterator<?> java.util.Iterator<?> = ((java.util.Iterator<?>)(object));\n                while (it.hasNext()) {\n                    total++;\n                    it.next();\n                }\n            } else if (object instanceof java.util.Enumeration<?>) {\n                final java.util.Enumeration<?> java.util.Enumeration<?> = ((java.util.Enumeration<?>)(object));\n                while (it.hasMoreElements()) {\n                    total++;\n                    it.nextElement();\n                }\n            } else {\n                try {\n                    total = java.lang.reflect.Array.getLength(object);\n                } catch (final java.lang.IllegalArgumentException ex) {\n                    throw new java.lang.IllegalArgumentException((\"Unsupported object type: \" + (object.getClass().getName())));\n                }\n            }\n            return total;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467317342777/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key2":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"}}
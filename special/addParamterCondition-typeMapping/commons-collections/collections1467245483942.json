{"failureDictionary":{"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRetainAll":880,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetClearChangesMap":418,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListGetByIndex":524,"org.apache.commons.collections4.list.PredicatedListTest.testListIndexOf":172,"org.apache.commons.collections4.map.Flat3MapTest.testFailFastEntrySet":348,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastEntrySet":766,"org.apache.commons.collections4.map.LinkedMapTest.testMapPut":140,"org.apache.commons.collections4.map.HashedMapTest.testMapEquals":315,"org.apache.commons.collections4.CollectionUtilsTest.getNegative":895,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":859,"org.apache.commons.collections4.iterators.UnmodifiableIteratorTest.testSimpleSerialization":658,"org.apache.commons.collections4.PredicateUtilsTest.testOnePredicateEx1":463,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContains":645,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":800,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIterator":604,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapRemove":24,"org.apache.commons.collections4.trie.PatriciaTrieTest.testEntrySetRemove1":472,"org.apache.commons.collections4.map.FixedSizeMapTest.testKeySetIteratorRemoveChangesMap":751,"org.apache.commons.collections4.trie.PatriciaTrieTest.testEntrySetRemove2":473,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetRetainAll":298,"org.apache.commons.collections4.list.CursorableLinkedListTest.testAdd":510,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetEquals":588,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetRemoveAll":438,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorAdd":515,"org.apache.commons.collections4.map.LRUMapTest.testFailFastKeySet":73,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRetainAll":163,"org.apache.commons.collections4.set.UnmodifiableSetTest.testObjectHashCodeEqualsContract":587,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousAddByIterator":492,"org.apache.commons.collections4.set.CompositeSetTest.testObjectEqualsSelf":571,"org.apache.commons.collections4.CollectionUtilsTest.get":897,"org.apache.commons.collections4.map.Flat3MapTest.testValuesRetainAll":379,"org.apache.commons.collections4.PredicateUtilsTest.testNotPredicate":2,"org.apache.commons.collections4.map.HashedMapTest.testMapPutNullKey":321,"org.apache.commons.collections4.map.MultiKeyMapTest.testMakeMap":401,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapContainsKey":7,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedAdd":628,"org.apache.commons.collections4.map.LRUMapTest.testInternalState_Buckets":62,"org.apache.commons.collections4.map.CompositeMapTest.testObjectEqualsSelf":192,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetClearChangesMap":419,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetIteratorRemoveChangesMap":432,"org.apache.commons.collections4.ListUtilsTest.testLazyList":902,"org.apache.commons.collections4.comparators.ComparatorChainTest.testSimpleSerialization":873,"org.apache.commons.collections4.map.LinkedMapTest.testGetValueByIndex":120,"org.apache.commons.collections4.map.ReferenceMapTest.testValuesRemoveChangesMap":248,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testPutAll":260,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRetainAll":680,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContainsAll":4,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":442,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":759,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":750,"org.apache.commons.collections4.CollectionUtilsTest.containsAll":3,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemoveChangesMap":384,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedRemove":584,"org.apache.commons.collections4.functors.ComparatorPredicateTest.compareGreater":965,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIterator":570,"org.apache.commons.collections4.functors.ComparatorPredicateTest.compareGreaterOrEqual":964,"org.apache.commons.collections4.map.LinkedMapTest.testMapRemove":144,"org.apache.commons.collections4.map.LinkedMapTest.testKeySetRemoveAll":158,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIsEmpty":930,"org.apache.commons.collections4.map.LRUMapTest.testMapGet":83,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemoveAll":301,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetClearChangesMap":370,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionContainsAll":532,"org.apache.commons.collections4.map.Flat3MapTest.testMapIsEmpty":353,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetIteratorRemoveChangesMap":164,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":746,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetIteratorRemoveChangesMap":299,"org.apache.commons.collections4.map.CompositeMapTest.testMapSize":182,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextNextRemoveIndex1ByList":486,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIteratorAdd":481,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testMapContainsKey":29,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsKey":405,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove1":331,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove2":332,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove3":333,"org.apache.commons.collections4.map.SingletonMapTest.testMapSize":807,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testSerializeDeserializeThenCompare":844,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":719,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastKeySet":767,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":848,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorFailDoubleRemove":919,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToString":703,"org.apache.commons.collections4.map.StaticBucketMapTest.testValuesIteratorRemoveChangesMap":950,"org.apache.commons.collections4.map.HashedMapTest.testMapContainsValue":314,"org.apache.commons.collections4.IteratorUtilsTest.testUnmodifiableIteratorImmutability":634,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":760,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":113,"org.apache.commons.collections4.map.LRUMapTest.testKeySetClearChangesMap":93,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapGet":736,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRemoveAll":913,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemoveAll":457,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRetainAll":879,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testKeySetIteratorRemoveChangesMap":706,"org.apache.commons.collections4.map.LRUMapTest.testRemoveLRUFirstBlocksRemove":61,"org.apache.commons.collections4.map.Flat3MapTest.testMapClear":355,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetIteratorRemoveChangesMap":790,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToString":681,"org.apache.commons.collections4.comparators.ComparatorChainTest.testRandomListSort":866,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPutAll":12,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testValuesIteratorRemoveChangesMap":729,"org.apache.commons.collections4.CollectionUtilsTest.filterInverse":0,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIsEmpty":562,"org.apache.commons.collections4.ClosureUtilsTest.testSwitchClosure":171,"org.apache.commons.collections4.map.LinkedMapTest.testGetByIndex":119,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIterator":592,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetClearChangesMap":241,"org.apache.commons.collections4.map.Flat3MapTest.testMakeMap":352,"org.apache.commons.collections4.map.ReferenceMapTest.testMapClear":226,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains1":287,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesRemoveAll":294,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains2":288,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains3":289,"org.apache.commons.collections4.IteratorUtilsTest.testUnmodifiableIteratorIteration":633,"org.apache.commons.collections4.map.ReferenceMapTest.testValuesIteratorRemoveChangesMap":222,"org.apache.commons.collections4.MapUtilsTest.testIterableMap":216,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionAddAll":529,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":822,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove2":246,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove3":247,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove1":245,"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":220,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapSize":270,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemoveAll":385,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetIteratorRemoveChangesMap":448,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":758,"org.apache.commons.collections4.map.LRUMapTest.testKeySetRemoveChangesMap":104,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToString":836,"org.apache.commons.collections4.CollectionUtilsTest.testDisjunctionAsUnionMinusIntersection":948,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIterator":582,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRetainAll":435,"org.apache.commons.collections4.map.LinkedMapTest.testIndexOf":114,"org.apache.commons.collections4.map.Flat3MapTest.testSerialisation4":347,"org.apache.commons.collections4.map.Flat3MapTest.testKeySetClearChangesMap":369,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagAdd":910,"org.apache.commons.collections4.bag.PredicatedBagTest.testCanonicalEmptyCollectionExists":944,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemoveChangesMap":773,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIterator":916,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapRemove":416,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testLocaleIndependence":262,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsValue":406,"org.apache.commons.collections4.list.FixedSizeListTest.testListHashCode":606,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRemoveAll":427,"org.apache.commons.collections4.map.HashedMapTest.testFailFastValues":307,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionSize":557,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesIteratorRemoveChangesMap":826,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRetainAll":673,"org.apache.commons.collections4.map.LRUMapTest.testInternalState_getEntry_int":63,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemoveAll":934,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndexBoundsChecking":545,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":817,"org.apache.commons.collections4.MapUtilsTest.testVerbosePrintNullLabelAndMap":176,"org.apache.commons.collections4.map.LRUMapTest.testMakeMap":76,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapRemove":283,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEqualsHashBag":923,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testMapEquals":31,"org.apache.commons.collections4.map.LinkedMapTest.testMapPutNullKey":141,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedAdd":670,"org.apache.commons.collections4.bag.TransformedBagTest.testBagContainsAll":683,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetIteratorRemoveChangesMap":819,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":798,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionClear":208,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":761,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains1":420,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains2":421,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains3":422,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":860,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRemove":567,"org.apache.commons.collections4.list.CursorableLinkedListTest.testLongSerialization":508,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":733,"org.apache.commons.collections4.map.LinkedMapTest.testPreviousKey":124,"org.apache.commons.collections4.map.Flat3MapTest.testMapPutAll":366,"org.apache.commons.collections4.map.LRUMapTest.testRemoveLRUBlocksRemoveScan":60,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesRemoveChangesMap":828,"org.apache.commons.collections4.map.LinkedMapTest.testFirstKey":121,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastKeySet":398,"org.apache.commons.collections4.map.LRUMapTest.testMapClear":79,"org.apache.commons.collections4.map.CompositeMapTest.testMapRemove":190,"org.apache.commons.collections4.bag.PredicatedBagTest.testIllegalAdd":904,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":450,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToString":41,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemoveChangesMap":255,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemove":894,"org.apache.commons.collections4.bag.PredicatedBagTest.testObjectHashCodeEqualsSelfHashCode":942,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapGet":408,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRetainAll":702,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutAll":187,"org.apache.commons.collections4.list.CursorableLinkedListTest.testEmptyListSerialization":519,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagContains":914,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToString":682,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListEquals":522,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetRemoveAll":958,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextRemoveByIterator":488,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsValue":81,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":856,"org.apache.commons.collections4.map.HashedMapTest.testKeySetIteratorRemoveChangesMap":340,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIsEmpty":852,"org.apache.commons.collections4.map.Flat3MapTest.testFailFastKeySet":349,"org.apache.commons.collections4.map.LRUMapTest.testValuesRemoveChangesMap":101,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSerializationWithOpenCursor":507,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":757,"org.apache.commons.collections4.bag.PredicatedBagTest.testCanonicalFullCollectionExists":945,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":855,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testKeySetRemoveChangesMap":443,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testKeySetIteratorRemoveChangesMap":452,"org.apache.commons.collections4.bag.PredicatedBagTest.testObjectHashCodeEqualsContract":941,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSerializeDeserializeThenCompare":595,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesIteratorRemoveChangesMap":715,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContainsAll":642,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetClearChangesMap":240,"org.apache.commons.collections4.map.LRUMapTest.testFullMapCompatibility":86,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsValue":134,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSimpleSerialization":544,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetClearChangesMap":285,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromValues":67,"org.apache.commons.collections4.list.FixedSizeListTest.testListIndexOf":610,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToString":691,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove3":100,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove2":99,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove1":98,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetRemoveChangesMap":251,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRetainAll":687,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFailFastValues":467,"org.apache.commons.collections4.CollectionUtilsTest.getPositiveOutOfBounds":898,"org.apache.commons.collections4.set.CompositeSetTest.testSerializeDeserializeThenCompare":568,"org.apache.commons.collections4.map.LRUMapTest.testReset":54,"org.apache.commons.collections4.comparators.ComparatorChainTest.testObjectEqualsSelf":871,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRetainAll":679,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToString":668,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContains":928,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRetainAll":302,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":816,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapRemove":13,"org.apache.commons.collections4.map.LinkedMapTest.testMapSize":131,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToArray":569,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRemoveAll":430,"org.apache.commons.collections4.map.Flat3MapTest.testMapPutNullValue":365,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsValue":809,"org.apache.commons.collections4.map.LinkedMapTest.testFailFastKeySet":126,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemoveChangesMap":453,"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastValues":221,"org.apache.commons.collections4.iterators.UnmodifiableIteratorTest.testObjectHashCodeEqualsSelfHashCode":660,"org.apache.commons.collections4.map.Flat3MapTest.testValuesRemoveAll":378,"org.apache.commons.collections4.map.LRUMapTest.testFirstKey":68,"org.apache.commons.collections4.map.LinkedMapTest.testReset":115,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":267,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":731,"org.apache.commons.collections4.map.LRUMapTest.testMapHashCode":84,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemoveAll":162,"org.apache.commons.collections4.map.ReferenceMapTest.testMapRemove":238,"org.apache.commons.collections4.map.LRUMapTest.testValuesIteratorRemoveChangesMap":75,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapClear":404,"org.apache.commons.collections4.set.CompositeSetTest.testSimpleSerialization":575,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetRemoveAll":297,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemoveAll":781,"org.apache.commons.collections4.map.CompositeMapTest.testMapIsEmpty":186,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedRemove":669,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRetainAll":565,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContains":601,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetRemoveChangesMap":957,"org.apache.commons.collections4.list.CursorableLinkedListTest.testObjectHashCodeEqualsContract":542,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyPut":391,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorFailNoMore":918,"org.apache.commons.collections4.map.LRUMapTest.testValuesRetainAll":103,"org.apache.commons.collections4.list.CursorableLinkedListTest.testClear":511,"org.apache.commons.collections4.set.MapBackedSetTest.testSerializeDeserializeThenCompare":213,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":732,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionContains":44,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray2":937,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionAdd":528,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemoveAll":478,"org.apache.commons.collections4.list.CursorableLinkedListTest.testIterator":498,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextAddByIterator":493,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray2":599,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testKeySetIteratorRemoveChangesMap":802,"org.apache.commons.collections4.bag.PredicatedBagTest.testEmptyBagCompatibility":908,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousRemoveIndex1ByList":483,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiHeadMapContains":725,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFailFastKeySet":466,"org.apache.commons.collections4.map.LinkedMapTest.testValuesRemoveAll":155,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIteratorRemove":204,"org.apache.commons.collections4.map.HashedMapTest.testKeySetRemoveAll":338,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAdd":925,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapGet":275,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapGet":711,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedRemove":631,"org.apache.commons.collections4.map.HashedMapTest.testMapPut":320,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapSize":17,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiSubMapContains":727,"org.apache.commons.collections4.map.StaticBucketMapTest.testKeySetIteratorRemoveChangesMap":956,"org.apache.commons.collections4.BagUtilsTest.testPredicatedBag":903,"org.apache.commons.collections4.map.ReferenceMapTest.testValuesClearChangesMap":239,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListRemoveByIndex":518,"org.apache.commons.collections4.map.HashedMapTest.testMapContainsKey":313,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionContains":206,"org.apache.commons.collections4.map.HashedMapTest.testClone":304,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesIteratorRemoveChangesMap":705,"org.apache.commons.collections4.bag.PredicatedBagTest.testFullBagCompatibility":909,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsValue":191,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesClearChangesMap":417,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContains":589,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":723,"org.apache.commons.collections4.set.MapBackedSetTest.testSetEquals":198,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapHashCode":276,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":721,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":755,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapIsEmpty":269,"org.apache.commons.collections4.comparators.ComparatorChainTest.testSerializeDeserializeThenCompare":876,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemoveChangesMap":161,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testObjectHashCodeEqualsContract":597,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":708,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesClearChangesMap":284,"org.apache.commons.collections4.list.FixedSizeListTest.testListLastIndexOf":611,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":167,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIndexOf":525,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsValue":357,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToArray2":556,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromEntrySet":65,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIteratorRemove":559,"org.apache.commons.collections4.set.MapBackedSetTest.testSetHashCode":199,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedRemove":594,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":734,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedAdd":596,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddIndexed":890,"org.apache.commons.collections4.bag.PredicatedBagTest.testObjectEqualsSelf":940,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListRemove":505,"org.apache.commons.collections4.map.SingletonMapTest.testMapToString":812,"org.apache.commons.collections4.comparators.ComparatorChainTest.testComparatorIsSerializable":870,"org.apache.commons.collections4.map.Flat3MapTest.testMapPut":363,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContains":561,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetContains2":149,"org.apache.commons.collections4.functors.ComparatorPredicateTest.compareLessOrEqual":963,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetContains1":148,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContainsAll":626,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetContains3":150,"org.apache.commons.collections4.map.HashedMapTest.testMakeMap":309,"org.apache.commons.collections4.map.ReferenceMapTest.testValuesRetainAll":250,"org.apache.commons.collections4.map.LinkedMapTest.testFailFastEntrySet":125,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemoveChangesMap":341,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastValues":399,"org.apache.commons.collections4.map.LinkedMapTest.testMakeMap":129,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":850,"org.apache.commons.collections4.set.CompositeSetTest.testEqualsNull":573,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetIteratorRemoveChangesMap":436,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetRetainAll":439,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedAdd":637,"org.apache.commons.collections4.map.LinkedMapTest.testKeySetIteratorRemoveChangesMap":160,"org.apache.commons.collections4.map.LinkedMapTest.testKeySetRetainAll":159,"org.apache.commons.collections4.iterators.UnmodifiableIteratorTest.testFullIterator":652,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetRemoveAll":743,"org.apache.commons.collections4.map.LinkedMapTest.testInsertionOrder":118,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetIteratorRemoveChangesMap":387,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapGet":722,"org.apache.commons.collections4.map.LinkedMapTest.testClone":117,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesIteratorRemoveChangesMap":813,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll1":393,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagToArray":920,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetIteratorRemoveChangesMap":344,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutAll":415,"org.apache.commons.collections4.list.CursorableLinkedListTest.testEqualsAndHashCode":480,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapRemove":713,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRetainAll":428,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListListIteratorByIndex":476,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPutNullValue":281,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionClear":849,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll4":396,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll3":395,"org.apache.commons.collections4.map.LRUMapTest.testFailFastValues":74,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll2":394,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testValuesRemoveChangesMap":14,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetIteratorRemoveChangesMap":303,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesIteratorRemoveChangesMap":829,"org.apache.commons.collections4.map.HashedMapTest.testKeySetClearChangesMap":326,"org.apache.commons.collections4.map.LRUMapTest.testLastKey":69,"org.apache.commons.collections4.map.LRUMapTest.testAccessOrder":56,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveChangesMap":433,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":441,"org.apache.commons.collections4.map.HashedMapTest.testMapPutNullValue":322,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapIsEmpty":5,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIsEmpty":839,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":801,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":851,"org.apache.commons.collections4.iterators.UnmodifiableIteratorTest.testObjectEqualsSelf":654,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapHashCode":409,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRemoveAll":458,"org.apache.commons.collections4.map.Flat3MapTest.testValuesRemoveChangesMap":377,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapRemove":724,"org.apache.commons.collections4.map.LinkedMapTest.testFullMapCompatibility":139,"org.apache.commons.collections4.set.CompositeSetTest.testObjectHashCodeEqualsSelfHashCode":577,"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastEntrySet":219,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":815,"org.apache.commons.collections4.map.ReferenceMapTest.testFullMapCompatibility":233,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":709,"org.apache.commons.collections4.CollectionUtilsTest.filterInverseNullParameters":1,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionSize":935,"org.apache.commons.collections4.map.Flat3MapTest.testValuesIteratorRemoveChangesMap":351,"org.apache.commons.collections4.iterators.UnmodifiableIteratorTest.testRemove":653,"org.apache.commons.collections4.map.Flat3MapTest.testValuesClearChangesMap":368,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapRemove":804,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextRemoveByListSetByIterator":494,"org.apache.commons.collections4.map.CompositeMapTest.testValuesRemoveAll":789,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapContainsValue":8,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetIteratorRemoveChangesMap":716,"org.apache.commons.collections4.map.LRUMapTest.testNextKey":70,"org.apache.commons.collections4.TransformerUtilsTest.testInvokerTransformer":883,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToString":662,"org.apache.commons.collections4.list.FixedSizeListTest.testListEquals":607,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapGet":752,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexMid":509,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemove":212,"org.apache.commons.collections4.TransformerUtilsTest.testSwitchMapTransformer":464,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndexBoundsChecking2":546,"org.apache.commons.collections4.map.FixedSizeMapTest.testValuesIteratorRemoveChangesMap":742,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":707,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemove2":469,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":618,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemove1":468,"org.apache.commons.collections4.list.UnmodifiableListTest.testListHashCode":621,"org.apache.commons.collections4.functors.ComparatorPredicateTest.predicateSanityTests":966,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSerialization":506,"org.apache.commons.collections4.comparators.ComparatorChainTest.testComparatorChainOnMinvaluedCompatator":865,"org.apache.commons.collections4.map.ReferenceMapTest.testMapPut":234,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIterator":666,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndex":609,"org.apache.commons.collections4.map.HashedMapTest.testKeySetRemoveChangesMap":337,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionContainsAll":200,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionClear":530,"org.apache.commons.collections4.map.LinkedMapTest.testFailFastValues":127,"org.apache.commons.collections4.CollectionUtilsTest.getFromEnumeration":896,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorConcurrentModification":516,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testFirstKey":795,"org.apache.commons.collections4.map.StaticBucketMapTest.testValuesRemoveChangesMap":954,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsKey":356,"org.apache.commons.collections4.map.Flat3MapTest.testKeySetRetainAll":382,"org.apache.commons.collections4.comparators.ComparatorChainTest.testObjectHashCodeEqualsContract":874,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":748,"org.apache.commons.collections4.map.LRUMapTest.testLRU":55,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIterator":641,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRetainAll":878,"org.apache.commons.collections4.map.CompositeMapTest.testMapGet":188,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToString":697,"org.apache.commons.collections4.map.HashedMapTest.testMapPutAll":323,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIsEmpty":616,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRetainAll":257,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRetainAll":447,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRetainAll":842,"org.apache.commons.collections4.comparators.ComparatorChainTest.testComparatorCompatibility":869,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRetainAll":48,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemove":889,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray":936,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIsEmpty":45,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetClearChangesMap":94,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiKeySetValuesOrder":704,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray2":834,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionClear":563,"org.apache.commons.collections4.comparators.ComparatorChainTest.testReverseListSort":867,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapGet":803,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIterator":534,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapContainsValue":19,"org.apache.commons.collections4.map.HashedMapTest.testMapClear":312,"org.apache.commons.collections4.map.LRUMapTest.testValuesClearChangesMap":92,"org.apache.commons.collections4.MapUtilsTest.testVerbosePrintNullKeyToMap1":178,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromKeySet":66,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapRemove":951,"org.apache.commons.collections4.map.ReferenceMapTest.testMakeMap":223,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testKeySetIteratorRemoveChangesMap":444,"org.apache.commons.collections4.CollectionUtilsTest.disjunction":946,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":718,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":799,"org.apache.commons.collections4.MapUtilsTest.testVerbosePrintNullKeyToMap2":179,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIterator":632,"org.apache.commons.collections4.list.CursorableLinkedListTest.testContainsAll":512,"org.apache.commons.collections4.map.LRUMapTest.testMapRemove":91,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":440,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFailFastValues":266,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetClearChangesMap":286,"org.apache.commons.collections4.set.CompositeSetTest.testObjectHashCodeEqualsContract":576,"org.apache.commons.collections4.iterators.UnmodifiableIteratorTest.testObjectHashCodeEqualsContract":659,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveAll":434,"org.apache.commons.collections4.set.MapBackedSet2Test.testOrdering":35,"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":37,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexAddNext":864,"org.apache.commons.collections4.map.ReferenceMapTest.testMapPutAll":237,"org.apache.commons.collections4.map.HashedMapTest.testKeySetRetainAll":339,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyContainsKey":180,"org.apache.commons.collections4.map.LRUMapTest.testValuesRemoveAll":102,"org.apache.commons.collections4.map.LinkedMapTest.testValuesRemoveChangesMap":154,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":797,"org.apache.commons.collections4.map.LRUMapTest.testMapEquals":82,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesRemoveChangesMap":293,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testKeySetRemoveChangesMap":451,"org.apache.commons.collections4.map.HashedMapTest.testValuesIteratorRemoveChangesMap":308,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemoveAll":454,"org.apache.commons.collections4.map.HashedMapTest.testValuesRemoveChangesMap":334,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRetainAll":479,"org.apache.commons.collections4.map.CompositeMapTest.testMapClear":183,"org.apache.commons.collections4.list.FixedSizeListTest.testListIteratorSet":608,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetRetainAll":253,"org.apache.commons.collections4.CollectionUtilsTest.extractSingleton":882,"org.apache.commons.collections4.map.CompositeMapTest.testObjectHashCodeEqualsContract":194,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testMapContainsValue":30,"org.apache.commons.collections4.trie.PatriciaTrieTest.testValuesRemoveChangesMap":25,"org.apache.commons.collections4.map.SingletonMapTest.testMapIsEmpty":806,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedAdd":586,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRemoveChangesMap":426,"org.apache.commons.collections4.map.ReferenceMapTest.testMapIsEmpty":224,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutNullValue":784,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListHashCode":523,"org.apache.commons.collections4.map.LinkedMapTest.testMapClear":132,"org.apache.commons.collections4.map.LinkedMapTest.testMapGet":136,"org.apache.commons.collections4.map.ReferenceMapTest.testMapToString":232,"org.apache.commons.collections4.map.LinkedMapTest.testMapToString":138,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIsEmpty":639,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionAddAll":47,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":765,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray2":643,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAdd":566,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionAddAll":841,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIsEmpty":207,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagContainsAll":678,"org.apache.commons.collections4.ClosureUtilsTest.testChainedClosure":169,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapToString":410,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":710,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRetainAll":857,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionClear":927,"org.apache.commons.collections4.map.MultiKeyMapTest.testNullHandling":389,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetRetainAll":749,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapRemove":764,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedAdd":644,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIterator":931,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":830,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedAdd":699,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorSet":513,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.initializationError":823,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":805,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagSize":915,"org.apache.commons.collections4.map.HashedMapTest.testFailFastKeySet":306,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSet":477,"org.apache.commons.collections4.list.UnmodifiableListTest.testListLastIndexOf":625,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedSet":623,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetRemoveChangesMap":296,"org.apache.commons.collections4.bag.HashBagTest.testBagRetainAll":676,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesRemoveChangesMap":831,"org.apache.commons.collections4.iterators.UnmodifiableIteratorTest.testCanonicalFullCollectionExists":655,"org.apache.commons.collections4.map.ReferenceMapTest.testMapPutNullKey":235,"org.apache.commons.collections4.map.LRUMapTest.testKeySetRetainAll":106,"org.apache.commons.collections4.map.HashedMapTest.testMapToString":318,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapGet":763,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIterator":215,"org.apache.commons.collections4.map.LRUMapTest.testKeySetIteratorRemoveChangesMap":107,"org.apache.commons.collections4.trie.PatriciaTrieTest.testKeySetRemoveChangesMap":474,"org.apache.commons.collections4.functors.ComparatorPredicateTest.compareLess":962,"org.apache.commons.collections4.map.Flat3MapTest.testMapHashCode":360,"org.apache.commons.collections4.set.CompositeSetTest.testCanonicalFullCollectionExists":572,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet4":196,"org.apache.commons.collections4.map.CompositeMapTest.testValuesClearChangesMap":792,"org.apache.commons.collections4.map.ReferenceMapTest.testValuesRemoveAll":249,"org.apache.commons.collections4.map.ReferenceMapTest.testNullHandling":217,"org.apache.commons.collections4.map.Flat3MapTest.testKeySetRemoveAll":381,"org.apache.commons.collections4.map.LinkedMapTest.testMapEquals":135,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexAddBefore":863,"org.apache.commons.collections4.map.CompositeMapTest.testMapHashCode":775,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRemoveAll":43,"org.apache.commons.collections4.map.CompositeMapTest.testMapEquals":185,"org.apache.commons.collections4.map.ReferenceMapTest.testMapContainsValue":228,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetRetainAll":959,"org.apache.commons.collections4.list.FixedSizeListTest.testListGetByIndex":605,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemoveByIndex":500,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemove":933,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRetainAll":788,"org.apache.commons.collections4.map.HashedMapTest.testMapIsEmpty":310,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedRemove":647,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapToString":21,"org.apache.commons.collections4.map.ReferenceMapTest.testPurgeValues":218,"org.apache.commons.collections4.PredicateUtilsTest.testNullIsExceptionPredicateEx1":884,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove1":290,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIsEmpty":694,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRemoveAll":560,"org.apache.commons.collections4.map.LinkedMapTest.testMapHashCode":137,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastValues":768,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemoveChangesMap":445,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetIteratorRemoveChangesMap":258,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapRemove":821,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedRemove":603,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove3":292,"org.apache.commons.collections4.comparators.ComparatorChainTest.testEmptyListSort":868,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove2":291,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIterator":53,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetRetainAll":791,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToArray":214,"org.apache.commons.collections4.set.CompositeSetTest.testCanonicalEmptyCollectionExists":574,"org.apache.commons.collections4.map.MultiKeyMapTest.testFullMapCompatibility":411,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionContainsAll":38,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRetainAll":343,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapContainsKey":18,"org.apache.commons.collections4.set.CompositeSetTest.testAddCompositedCollision":550,"org.apache.commons.collections4.map.LRUMapTest.testPreviousKey":71,"org.apache.commons.collections4.map.LinkedMapTest.testKeySetClearChangesMap":146,"org.apache.commons.collections4.iterators.UnmodifiableIteratorTest.testCanonicalEmptyCollectionExists":657,"org.apache.commons.collections4.map.CompositeMapTest.testValuesRemoveChangesMap":780,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPut":11,"org.apache.commons.collections4.map.Flat3MapTest.testMapToString":361,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullKey":413,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRemove":536,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagContainsAll":689,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":712,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapIsEmpty":402,"org.apache.commons.collections4.CollectionUtilsTest.union":947,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIterator":695,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagToArrayPopulate":921,"org.apache.commons.collections4.list.UnmodifiableListTest.testListIndexOf":624,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagContainsAll":686,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":437,"org.apache.commons.collections4.map.LinkedMapTest.testRemoveByIndex":116,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapSize":403,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextSetByIterator":496,"org.apache.commons.collections4.set.CompositeSetTest.testFailedCollisionResolution":552,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMakeMap":268,"org.apache.commons.collections4.list.UnmodifiableListTest.testListEquals":622,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRetainAll":386,"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":168,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAddAll":564,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddRemove":886,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextAddIndex1ByList":490,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray2":583,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetContains2":243,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetContains1":242,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagRetainAll":701,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEquals":922,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetContains3":244,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedRemove":640,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsKey":808,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapSize":6,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove3":425,"org.apache.commons.collections4.map.LinkedMapTest.testMapPutNullValue":142,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove2":424,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove1":423,"org.apache.commons.collections4.comparators.ComparatorChainTest.testObjectHashCodeEqualsSelfHashCode":875,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemoveAll":888,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray2":696,"org.apache.commons.collections4.map.HashedMapTest.testMapRemove":324,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPutAll":282,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListAddBegin":503,"org.apache.commons.collections4.bag.SynchronizedBagTest.testFullBagCompatibility":847,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFailFastEntrySet":264,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousSetByIterator":495,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionToString":540,"org.apache.commons.collections4.map.LinkedMapTest.testLastKey":122,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContains":629,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":747,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetRemoveChangesMap":785,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRetainAll":174,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemoveAll":109,"org.apache.commons.collections4.map.LRUMapTest.testClone":57,"org.apache.commons.collections4.map.LinkedMapTest.testValuesIteratorRemoveChangesMap":128,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIteratorSet":482,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":449,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiKeySetValuesOrder":728,"org.apache.commons.collections4.map.HashedMapTest.testFullMapCompatibility":319,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetClearChangesMap":147,"org.apache.commons.collections4.map.Flat3MapTest.testMapRemove":367,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains3":741,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapRemove":754,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains1":739,"org.apache.commons.collections4.map.LRUMapTest.testFailFastEntrySet":72,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedAdd":614,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains2":740,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapEquals":20,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRemoveChangesMap":429,"org.apache.commons.collections4.ClosureUtilsTest.testSwitchMapClosure":170,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToString":674,"org.apache.commons.collections4.bag.TransformedBagTest.testBagRetainAll":684,"org.apache.commons.collections4.map.HashedMapTest.testValuesRemoveAll":335,"org.apache.commons.collections4.map.UnmodifiableMapTest.testValuesIteratorRemoveChangesMap":756,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testMapSize":28,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorRemove":514,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":818,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionSize":835,"org.apache.commons.collections4.map.LinkedMapTest.testKeySetRemoveChangesMap":157,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRetainAll":210,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains3":771,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContains":663,"org.apache.commons.collections4.bag.SynchronizedBagTest.testSerializeDeserializeThenCompare":861,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFailFastKeySet":265,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContainsAll":693,"org.apache.commons.collections4.bag.PredicatedBagTest.testIllegalDecorate":906,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains1":769,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains2":770,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContainsAll":929,"org.apache.commons.collections4.map.CompositeMapTest.testMapToString":184,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":853,"org.apache.commons.collections4.bag.PredicatedBagTest.testlegalAddRemove":905,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionContains":838,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":737,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemove":392,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddIndexed":885,"org.apache.commons.collections4.CollectionUtilsTest.getFromObject":901,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRetainAll":538,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetClearChangesMap":783,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemoveChangesMap":108,"org.apache.commons.collections4.map.HashedMapTest.testMapHashCode":317,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPut":412,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testKeySetIteratorRemoveChangesMap":730,"org.apache.commons.collections4.CollectionUtilsTest.cardinality":825,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListAddByIndex":862,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorRemoveProtectsInvariants":907,"org.apache.commons.collections4.bag.PredicatedBagTest.testSerializeDeserializeThenCompare":938,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetIteratorRemoveChangesMap":960,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnmodifiableIterator":619,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionContainsAll":833,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContainsAll":590,"org.apache.commons.collections4.map.ReferenceMapTest.testMapHashCode":231,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIsEmpty":533,"org.apache.commons.collections4.map.LinkedMapTest.testValuesRetainAll":156,"org.apache.commons.collections4.map.CompositeMapTest.testValuesRetainAll":774,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testLastKey":794,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetIteratorRemoveChangesMap":456,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemoveAll":893,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToString":685,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContainsAll":635,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetIteratorRemoveChangesMap":111,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapRemove":738,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContainsAll":555,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsKey":80,"org.apache.commons.collections4.map.HashedMapTest.testMapGet":316,"org.apache.commons.collections4.bag.TreeBagTest.testBagContainsAll":671,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionSize":202,"org.apache.commons.collections4.set.CompositeSetTest.testRemoveComposited":548,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPut":279,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionClear":46,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionClear":840,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":745,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionSize":40,"org.apache.commons.collections4.map.HashedMapTest.testFailFastEntrySet":305,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIterator":648,"org.apache.commons.collections4.map.UnmodifiableMapTest.testKeySetIteratorRemoveChangesMap":762,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListSetByIndex":527,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapPutAll":23,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove3":153,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRemove":50,"org.apache.commons.collections4.map.LinkedMapTest.testValuesClearChangesMap":145,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove2":152,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToString":203,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove1":151,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemove":843,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapIsEmpty":16,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesIteratorRemoveChangesMap":400,"org.apache.commons.collections4.functors.AllPredicateTest.nullArrayToGetInstance":459,"org.apache.commons.collections4.map.LinkedMapTest.testMapPutAll":143,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRetainAll":455,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetRemoveAll":252,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesRetainAll":295,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFullMapCompatibility":278,"org.apache.commons.collections4.set.CompositeSetTest.testRemoveUnderlying":547,"org.apache.commons.collections4.map.SingletonMapTest.testMapGet":811,"org.apache.commons.collections4.map.Flat3MapTest.testKeySetIteratorRemoveChangesMap":383,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIteratorRemove":499,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemoveAll":446,"org.apache.commons.collections4.set.MapBackedSet2Test.testSetEquals":36,"org.apache.commons.collections4.map.CompositeMapTest.testObjectHashCodeEqualsSelfHashCode":793,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemoveAll":342,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSetEquals":578,"org.apache.commons.collections4.map.LRUMapTest.testMapSize":78,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove1":374,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove2":375,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove3":376,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray":845,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetIteratorRemoveChangesMap":782,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextRemoveIndex1ByList":484,"org.apache.commons.collections4.TransformerUtilsTest.testSwitchTransformer":197,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemoveChangesMap":300,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapEquals":274,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIteratorRemove":837,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionToArray2":539,"org.apache.commons.collections4.set.CompositeSetTest.testAddComposited":551,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToString":677,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyGet":390,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSerializeDeserializeThenCompare":541,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToArray2":39,"org.apache.commons.collections4.map.TransformedMapTest.testFactory_decorateTransform":166,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContainsAll":580,"org.apache.commons.collections4.list.CursorableLinkedListTest.testObjectHashCodeEqualsSelfHashCode":543,"org.apache.commons.collections4.iterators.UnmodifiableIteratorTest.testEqualsNull":656,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemoveAll":256,"org.apache.commons.collections4.IteratorUtilsTest.testArrayListIterator":475,"org.apache.commons.collections4.map.LRUMapTest.testMapPutNullKey":88,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRetainAll":110,"org.apache.commons.collections4.bag.HashBagTest.testBagContainsAll":675,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapToString":277,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIteratorRemove":932,"org.apache.commons.collections4.MapUtilsTest.testVerbosePrintNullLabel":175,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastEntrySet":397,"org.apache.commons.collections4.map.HashedMapTest.testValuesClearChangesMap":325,"org.apache.commons.collections4.CollectionUtilsTest.addAllForEnumeration":877,"org.apache.commons.collections4.map.LinkedMapTest.testMapIsEmpty":130,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetIteratorRemoveChangesMap":744,"org.apache.commons.collections4.map.LRUMapTest.testKeySetRemoveAll":105,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorFail":917,"org.apache.commons.collections4.map.Flat3MapTest.testMapEquals":358,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray2":593,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsKey":181,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContains":638,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiKeySetValuesOrder":714,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionContains":531,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddRemove":891,"org.apache.commons.collections4.map.ReferenceMapTest.testMapSize":225,"org.apache.commons.collections4.CollectionUtilsTest.getFromPrimativeArray":900,"org.apache.commons.collections4.CollectionUtilsTest.cardinalityOfNull":824,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromMapIterator":64,"org.apache.commons.collections4.CollectionUtilsTest.predicatedCollection":33,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIteratorRemove":854,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToArray":52,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRetainAll":690,"org.apache.commons.collections4.bag.PredicatedBagTest.testEqualsNull":939,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionAdd":49,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullValue":414,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToArray2":201,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextRemoveIndex1ByList":485,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray2":613,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagHashCode":924,"org.apache.commons.collections4.map.Flat3MapTest.testMapGet":359,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":814,"org.apache.commons.collections4.bag.TreeBagTest.testBagRetainAll":672,"org.apache.commons.collections4.set.ListOrderedSetTest.testOrdering":887,"org.apache.commons.collections4.set.ListOrderedSet2Test.testOrdering":892,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testClone":259,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAddAll":926,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapToString":10,"org.apache.commons.collections4.set.CompositeSetTest.testContains":549,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIteratorRemove":42,"org.apache.commons.collections4.map.LRUMapTest.testMapPutAll":90,"org.apache.commons.collections4.map.HashedMapTest.testValuesRetainAll":336,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContainsAll":664,"org.apache.commons.collections4.map.LinkedMapTest.testNextKey":123,"org.apache.commons.collections4.CollectionUtilsTest.getFromObjectArray":899,"org.apache.commons.collections4.functors.ComparatorPredicateTest.compareEquals":961,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousAddIndex1ByList":489,"org.apache.commons.collections4.CollectionUtilsTest.testMatchesAll":967,"org.apache.commons.collections4.map.ReferenceMapTest.testMapContainsKey":227,"org.apache.commons.collections4.list.CursorableLinkedListTest.testIsEmpty":497,"org.apache.commons.collections4.comparators.ComparatorChainTest.testEqualsNull":872,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsValue":827,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagContainsAll":700,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToString":558,"org.apache.commons.collections4.trie.PatriciaTrieTest.testPrefixMapRemoval":832,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapClear":271,"org.apache.commons.collections4.map.HashedMapTest.testMapSize":311,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIsEmpty":646,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToString":688,"org.apache.commons.collections4.CollectionUtilsTest.testDisjunctionAsSymmetricDifference":949,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubList":501,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContains":579,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetClearChangesMap":779,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetRemoveAll":786,"org.apache.commons.collections4.PredicateUtilsTest.testInstanceOfPredicate":34,"org.apache.commons.collections4.list.CursorableLinkedListTest.testFullListSerialization":520,"org.apache.commons.collections4.map.StaticBucketMapTest.testKeySetRemoveChangesMap":955,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":615,"org.apache.commons.collections4.list.UnmodifiableListTest.testListGetByIndex":620,"org.apache.commons.collections4.trie.PatriciaTrieTest.testPrefixMap":471,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetRemove1":952,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetRemove2":953,"org.apache.commons.collections4.map.TransformedSortedMapTest.testFactory_decorateTransform":112,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousRemoveByIterator":487,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":717,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPutNullKey":280,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapEquals":9,"org.apache.commons.collections4.trie.PatriciaTrieTest.testEntrySetRemoveChangesMap":26,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":753,"org.apache.commons.collections4.PredicateUtilsTest.testAllPredicateEx1":462,"org.apache.commons.collections4.map.SingletonMapTest.testMapEquals":810,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIsEmpty":630,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetIteratorRemoveChangesMap":254,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":617,"org.apache.commons.collections4.MapUtilsTest.testVerbosePrintNullKey":177,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove1":776,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove3":778,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove2":777,"org.apache.commons.collections4.map.LRUMapTest.testMapIsEmpty":77,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testMapIsEmpty":27,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testMapToString":32,"org.apache.commons.collections4.map.Flat3MapTest.testClone4":346,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testValuesIteratorRemoveChangesMap":796,"org.apache.commons.collections4.map.Flat3MapTest.testKeySetRemoveChangesMap":380,"org.apache.commons.collections4.map.Flat3MapTest.testClone2":345,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray2":636,"org.apache.commons.collections4.map.ReferenceMapTest.testMapPutNullValue":236,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionSize":858,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContainsAll":612,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListLastIndexOf":526,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiTailMapContains":726,"org.apache.commons.collections4.map.ReferenceMapTest.testMapGet":230,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEqualsSelf":911,"org.apache.commons.collections4.map.ReferenceMapTest.testMapEquals":229,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRetainAll":881,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemoveChangesMap":15,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutNullKey":787,"org.apache.commons.collections4.bag.PredicatedBagTest.testSimpleSerialization":943,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIterator":846,"org.apache.commons.collections4.map.LRUMapTest.testMapPutNullValue":89,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRetainAll":431,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListAddMiddle":504,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetContains2":372,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFailFastEntrySet":465,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetContains3":373,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetContains1":371,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetClearChangesMap":327,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testNullHandling":263,"org.apache.commons.collections4.map.CompositeMapTest.testSerializeDeserializeThenCompare":195,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIsEmpty":602,"org.apache.commons.collections4.map.CompositeMapTest.testEqualsNull":193,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextAddIndex1ByList":491,"org.apache.commons.collections4.map.Flat3MapTest.testMapPutNullKey":364,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedRemove":698,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsKey":272,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRemoveAll":537,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testKeySetRemoveChangesMap":470,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetContains1":328,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetContains2":329,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIsEmpty":581,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListAddByIndex":521,"org.apache.commons.collections4.map.MultiKeyMapTest.testClone":388,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray2":627,"org.apache.commons.collections4.map.LRUMapTest.testMapPut":87,"org.apache.commons.collections4.iterators.UnmodifiableIteratorTest.testSerializeDeserializeThenCompare":661,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListAddEnd":502,"org.apache.commons.collections4.iterators.UnmodifiableIteratorTest.testDecorateFactory":649,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIsEmpty":665,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsValue":273,"org.apache.commons.collections4.map.Flat3MapTest.testMapSize":354,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedAdd":600,"org.apache.commons.collections4.map.Flat3MapTest.testFailFastValues":350,"org.apache.commons.collections4.map.Flat3MapTest.testFullMapCompatibility":362,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContainsAll":598,"org.apache.commons.collections4.PredicateUtilsTest.testAnyPredicateEx1":460,"org.apache.commons.collections4.iterators.UnmodifiableIteratorTest.testIterator":650,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionAddAll":209,"org.apache.commons.collections4.map.LRUMapTest.testRemoveLRU":58,"org.apache.commons.collections4.map.CompositeMapTest.testValuesIteratorRemoveChangesMap":772,"org.apache.commons.collections4.set.CompositeSetTest.testSetEquals":553,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":735,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":720,"org.apache.commons.collections4.set.CompositeSetTest.testSetHashCode":554,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains3":97,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIteratorRemove":535,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemove":517,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemoveAll":173,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSerializeDeserializeThenCompare":585,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRemove":912,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testCaseInsensitive":261,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapPut":22,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains1":95,"org.apache.commons.collections4.map.MultiKeyMapTest.testLRUMultiKeyMap":165,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains2":96,"org.apache.commons.collections4.PredicateUtilsTest.testNonePredicateEx1":461,"org.apache.commons.collections4.map.CompositeMapTest.testMapPut":189,"org.apache.commons.collections4.iterators.UnmodifiableIteratorTest.testEmptyIterator":651,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetContains3":330,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsKey":133,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemoveAll":205,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapEquals":407,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionAdd":211,"org.apache.commons.collections4.map.LRUMapTest.testRemoveLRUBlocksRemove":59,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIsEmpty":591,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray2":667,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContains":692,"org.apache.commons.collections4.set.MapBackedSet2Test.testSerializeDeserializeThenCompare":51,"org.apache.commons.collections4.map.LRUMapTest.testMapToString":85,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapGet":820},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.NullIsExceptionPredicate:47","type":"CtBinaryOperatorImpl","sourcecode":"predicate == null"},"failures":[0,1,2],"tindex":"2e3f0e81-3e57-11e6-b28d-1f6690c08e0c","method":{"position":"org.apache.commons.collections4.PredicateUtils:451","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> notPredicate(final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if (predicate == null) {\n        {\n            return org.apache.commons.collections4.functors.NotPredicate.notPredicate(predicate);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.set.CompositeSet:283","type":"CtBinaryOperatorImpl","sourcecode":"(coll.size()) == 0"},"failures":[3],"tindex":"2e3ff8e2-3e57-11e6-b28d-c10dc8bde842","method":{"position":"org.apache.commons.collections4.CollectionUtils:366","type":"CtMethodImpl","sourcecode":"public static boolean containsAll(final java.util.Collection<?> coll1, final java.util.Collection<?> coll2) {\n    if ((coll1.size()) == 0) {\n        {\n            if (coll2.isEmpty()) {\n                return true;\n            } else {\n                final java.util.Iterator<?> java.util.Iterator<?> = coll1.iterator();\n                final java.util.Set<java.lang.Object> java.util.Set<java.lang.Object> = new java.util.HashSet<java.lang.Object>();\n                for (final java.lang.Object java.lang.Object : coll2) {\n                    if (elementsAlreadySeen.contains(nextElement)) {\n                        continue;\n                    } \n                    boolean boolean = false;\n                    while (it.hasNext()) {\n                        final java.lang.Object java.lang.Object = it.next();\n                        elementsAlreadySeen.add(p);\n                        if (nextElement == null ? p == null : nextElement.equals(p)) {\n                            foundCurrentElement = true;\n                            break;\n                        } \n                    }\n                    if (foundCurrentElement) {\n                        continue;\n                    } else {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.set.CompositeSet:283","type":"CtBinaryOperatorImpl","sourcecode":"(coll.size()) == 0"},"failures":[4],"tindex":"2e401ff3-3e57-11e6-b28d-71cafa7dd943","method":{"position":"org.apache.commons.collections4.collection.IndexedCollection:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsAll(final java.util.Collection<?> coll) {\n    if ((coll.size()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final java.lang.Object java.lang.Object : coll) {\n                if (!(contains(o))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:806","type":"CtBinaryOperatorImpl","sourcecode":"node == null"},"failures":[],"tindex":"2e404704-3e57-11e6-b28d-9d42f57aab29","method":{"position":"org.apache.commons.collections4.iterators.ArrayListIterator:165","type":"CtMethodImpl","sourcecode":"public void add(final java.lang.Object o) {\n    if (o == null) {\n        {\n            if (o == null) {\n                {\n                    throw new java.lang.UnsupportedOperationException(\"add() method is not supported\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.SetUtils:120","type":"CtBinaryOperatorImpl","sourcecode":"((set1 == null) || (set2 == null)) || ((set1.size()) != (set2.size()))"},"failures":[],"tindex":"2e415875-3e57-11e6-b28d-0fc77f12094d","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:278","type":"CtMethodImpl","sourcecode":"public boolean retainAll(final java.util.Collection<?> coll) {\n    if (((coll == null) || (coll == null)) || ((set1.size()) != (set2.size()))) {\n        {\n            boolean boolean = false;\n            final java.util.Iterator<E> java.util.Iterator<E> = iterator();\n            while (it.hasNext()) {\n                if ((coll.contains(it.next())) == false) {\n                    it.remove();\n                    modified = true;\n                } \n            }\n            return modified;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set2":"coll","set1":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:448","type":"CtBinaryOperatorImpl","sourcecode":"answer == null"},"failures":[],"tindex":"2e417f86-3e57-11e6-b28d-3db4b9230088","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:178","type":"CtMethodImpl","sourcecode":"public boolean containsValue(final java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.collections4.bidimap.TreeBidiMap.checkValue(value);\n                    return (lookupValue(value)) != null;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.CompositeCollection:238","type":"CtBinaryOperatorImpl","sourcecode":"(mutator) == null"},"failures":[],"tindex":"2e417f87-3e57-11e6-b28d-4fed5687e3dd","method":{"position":"org.apache.commons.collections4.collection.CompositeCollection:340","type":"CtMethodImpl","sourcecode":"public void setMutator(final org.apache.commons.collections4.collection.CompositeCollection.CollectionMutator<E> mutator) {\n    if (mutator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.collections4.collection.CompositeCollection.this.org.apache.commons.collections4.collection.CompositeCollection.CollectionMutator<E> = mutator;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mutator":"mutator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:278","type":"CtBinaryOperatorImpl","sourcecode":"answer == null"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"tindex":"2e41a698-3e57-11e6-b28d-5b46f960b6e6","method":{"position":"org.apache.commons.collections4.trie.AbstractBitwiseTrie:140","type":"CtMethodImpl","sourcecode":"static boolean compare(final java.lang.Object a, final java.lang.Object b) {\n    if (a == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return a == null ? b == null : a.equals(b);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:186","type":"CtBinaryOperatorImpl","sourcecode":"answer != null"},"failures":[],"tindex":"2e41a699-3e57-11e6-b28d-858d3980eacd","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2031","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic boolean remove(final java.lang.Object o) {\n    if (o != null) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            final java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> = ((java.util.Map.Entry<K, V>)(o));\n            final K K = entry.getKey();\n            if (!(org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.inRange(key))) {\n                return false;\n            } \n            final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = getEntry(key);\n            if ((node != null) && (org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(node.getValue(), entry.getValue()))) {\n                removeEntry(node);\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.InstanceofPredicate:46","type":"CtBinaryOperatorImpl","sourcecode":"type == null"},"failures":[33,34],"tindex":"2e41cdaa-3e57-11e6-b28d-49728684880b","method":{"position":"org.apache.commons.collections4.functors.InstanceofPredicate:45","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.collections4.Predicate<java.lang.Object> instanceOfPredicate(final java.lang.Class<?> type) {\n    if (type == null) {\n        {\n            if (type == null) {\n                throw new java.lang.IllegalArgumentException(\"The type to check instanceof must not be null\");\n            } \n            return new org.apache.commons.collections4.functors.InstanceofPredicate(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:81","type":"CtBinaryOperatorImpl","sourcecode":"coll == null"},"failures":[],"tindex":"2e41cdab-3e57-11e6-b28d-83a6335b4642","method":{"position":"org.apache.commons.collections4.list.TreeList:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final java.util.Collection<? extends E> c) {\n    if (c == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (c.isEmpty()) {\n                return false;\n            } \n            int += c.size();\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(c);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = (org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null ? cTree : org.apache.commons.collections4.list.TreeList.AVLNode<E>.addAll(cTree, int);\n            int += c.size();\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:302","type":"CtBinaryOperatorImpl","sourcecode":"answer instanceof java.lang.Float"},"failures":[],"tindex":"2e41f4bc-3e57-11e6-b28d-2bc42d2909fa","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:208","type":"CtMethodImpl","sourcecode":"public K previousKey(final java.lang.Object key) {\n    if (key instanceof java.lang.Float) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = java.util.List<K>.indexOf(key);\n            if (index > 0) {\n                return java.util.List<K>.get((index - 1));\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:236","type":"CtBinaryOperatorImpl","sourcecode":"answer == null"},"failures":[],"tindex":"2e41f4bd-3e57-11e6-b28d-eff28cc35218","method":{"position":"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMap:95","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(final java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:236","type":"CtBinaryOperatorImpl","sourcecode":"index < ((size) / 2)"},"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168],"tindex":"2e41f4be-3e57-11e6-b28d-61b7d5cdae54","method":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:262","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void addEntry(final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> entry, final int hashIndex) {\n    if (hashIndex < (hashIndex / 2)) {\n        {\n            final org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = ((org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)(entry));\n            link.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n            link.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n            org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = link;\n            org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = link;\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][hashIndex] = link;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"hashIndex","index":"hashIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:135","type":"CtBinaryOperatorImpl","sourcecode":"closures == null"},"failures":[169,170,171],"tindex":"2e421bcf-3e57-11e6-b28d-eb9848674b75","method":{"position":"org.apache.commons.collections4.functors.FunctorUtils:134","type":"CtMethodImpl","sourcecode":"static void validate(final org.apache.commons.collections4.Closure<?>... closures) {\n    if (closures == null) {\n        {\n            if (closures == null) {\n                throw new java.lang.IllegalArgumentException(\"The closure array must not be null\");\n            } \n            for (int int = 0 ; i < (closures.int) ; i++) {\n                if ((closures[i]) == null) {\n                    throw new java.lang.IllegalArgumentException(((\"The closure array must not contain a null closure, index \" + i) + \" was null\"));\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"closures":"closures"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1261","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof java.util.Iterator<?>"},"failures":[172],"tindex":"2e4242e0-3e57-11e6-b28d-2d72c1abb9e6","method":{"position":"org.apache.commons.collections4.list.PredicatedList:98","type":"CtMethodImpl","sourcecode":"public int indexOf(final java.lang.Object object) {\n    if (object instanceof java.util.Iterator<?>) {\n        {\n            return decorated().indexOf(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.StaticBucketMap:702","type":"CtBinaryOperatorImpl","sourcecode":"r == null"},"failures":[],"tindex":"2e4242e1-3e57-11e6-b28d-172db22ca252","method":{"position":"org.apache.commons.collections4.queue.UnmodifiableQueue:122","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object object) {\n    if (object == null) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"r":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1204","type":"CtUnaryOperatorImpl","sourcecode":"!(o instanceof java.lang.Comparable)"},"failures":[173,174],"tindex":"2e4242e2-3e57-11e6-b28d-bd28efd827a3","method":{"position":"org.apache.commons.collections4.map.DefaultedMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.Override\n@java.lang.SuppressWarnings(value = \"unchecked\")\npublic V get(final java.lang.Object key) {\n    if (!(key instanceof java.lang.Comparable)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.util.Map<K, V>.containsKey(key)) == false) {\n                return org.apache.commons.collections4.Transformer<? super K, ? extends V>.transform(((K)(key)));\n            } \n            return java.util.Map<K, V>.get(key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:256","type":"CtBinaryOperatorImpl","sourcecode":"mut == null"},"failures":[175,176,177,178,179],"tindex":"2e4269f3-3e57-11e6-b28d-91f59bc9b25b","method":{"position":"org.apache.commons.collections4.MapUtils:915","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"deprecation\")\npublic static void verbosePrint(final java.io.PrintStream out, final java.lang.Object label, final java.util.Map<?, ?> map) {\n    if (label == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.collections4.MapUtils.verbosePrintInternal(out, label, map, new org.apache.commons.collections4.ArrayStack<java.util.Map<?, ?>>(), false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mut":"label"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.StaticBucketMap:702","type":"CtBinaryOperatorImpl","sourcecode":"r == null"},"failures":[],"tindex":"2e435454-3e57-11e6-b28d-43986119db96","method":{"position":"org.apache.commons.collections4.map.StaticBucketMap:708","type":"CtMethodImpl","sourcecode":"private void atomic(final java.lang.Runnable r, final int bucket) {\n    if (r == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bucket >= (org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>[].int)) {\n                r.run();\n                return ;\n            } \n            synchronized(org.apache.commons.collections4.map.StaticBucketMap.Lock[][bucket]) {\n                atomic(r, (bucket + 1));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"r":"r"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:179","type":"CtBinaryOperatorImpl","sourcecode":"iterator != (currentIterator)"},"failures":[],"tindex":"2e437b65-3e57-11e6-b28d-0357b25738d2","method":{"position":"org.apache.commons.collections4.IteratorUtils:695","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Iterator<E> filteredIterator(final java.util.Iterator<? extends E> iterator, final org.apache.commons.collections4.Predicate<? super E> predicate) {\n    if (iterator != iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (iterator == null) {\n                throw new java.lang.NullPointerException(\"Iterator must not be null\");\n            } \n            if (predicate == null) {\n                throw new java.lang.NullPointerException(\"Predicate must not be null\");\n            } \n            return new org.apache.commons.collections4.iterators.FilterIterator<E>(iterator , predicate);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterator":"iterator","currentIterator":"iterator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:299","type":"CtBinaryOperatorImpl","sourcecode":"answer == null"},"failures":[180],"tindex":"2e437b66-3e57-11e6-b28d-e9d804ce0631","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:154","type":"CtMethodImpl","sourcecode":"public boolean containsKey(final java.lang.Object key1, final java.lang.Object key2) {\n    if (key1 instanceof java.util.Map.Entry) {\n        {\n            if (key1 == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final int int = hash(key1, key2);\n                    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[][decorated().hashIndex(hashCode, decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[].int)];\n                    while (entry != null) {\n                        if (((entry.int) == hashCode) && (isEqualKey(entry, key1, key2))) {\n                            return true;\n                        } \n                        entry = entry.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n                    }\n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1391","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof java.util.Iterator<?>"},"failures":[181,182,183,184,185,186,187,188,189,190,191,192,193,194,195],"tindex":"2e43a277-3e57-11e6-b28d-f927d3056b7b","method":{"position":"org.apache.commons.collections4.map.CompositeMap:465","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj instanceof java.util.Iterator<?>) {\n        {\n            if (obj instanceof java.util.Map) {\n                final java.util.Map<?, ?> java.util.Map<?, ?> = ((java.util.Map<?, ?>)(obj));\n                return org.apache.commons.collections4.map.CompositeMap.this.entrySet().equals(map.entrySet());\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:1023","type":"CtBinaryOperatorImpl","sourcecode":"(delegateMap) != null"},"failures":[196],"tindex":"2e43a278-3e57-11e6-b28d-f9ece314b206","method":{"position":"org.apache.commons.collections4.map.DefaultedMap:126","type":"CtMethodImpl","sourcecode":"public static <K, V>java.util.Map<K, V> defaultedMap(final java.util.Map<K, V> map, final org.apache.commons.collections4.Transformer<? super K, ? extends V> transformer) {\n    if (map != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (transformer == null) {\n                throw new java.lang.IllegalArgumentException(\"Transformer must not be null\");\n            } \n            return new org.apache.commons.collections4.map.DefaultedMap<K, V>(map , transformer);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delegateMap":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.SwitchTransformer:95","type":"CtBinaryOperatorImpl","sourcecode":"map == null"},"failures":[197],"tindex":"2e43a279-3e57-11e6-b28d-bfdfb403dcca","method":{"position":"org.apache.commons.collections4.functors.SwitchTransformer:92","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <I, O>org.apache.commons.collections4.Transformer<I, O> switchTransformer(final java.util.Map<? extends org.apache.commons.collections4.Predicate<? super I>, ? extends org.apache.commons.collections4.Transformer<? super I, ? extends O>> map) {\n    if (map == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (map == null) {\n                throw new java.lang.IllegalArgumentException(\"The predicate and transformer map must not be null\");\n            } \n            if ((map.size()) == 0) {\n                return org.apache.commons.collections4.functors.ConstantTransformer.<I, O>nullTransformer();\n            } \n            final org.apache.commons.collections4.Transformer<? super I, ? extends O> org.apache.commons.collections4.Transformer<? super I, ? extends O> = map.remove(null);\n            final int int = map.size();\n            if (size == 0) {\n                return ((org.apache.commons.collections4.Transformer<I, O>)(defaultTransformer == null ? org.apache.commons.collections4.functors.ConstantTransformer.<I, O>nullTransformer() : defaultTransformer));\n            } \n            final org.apache.commons.collections4.Transformer<? super I, ? extends O>[] org.apache.commons.collections4.Transformer<? super I, ? extends O>[] = new org.apache.commons.collections4.Transformer[size];\n            final org.apache.commons.collections4.Predicate<? super I>[] org.apache.commons.collections4.Predicate<? super I>[] = new org.apache.commons.collections4.Predicate[size];\n            int int = 0;\n            for (final java.util.Map.Entry<? extends org.apache.commons.collections4.Predicate<? super I>, ? extends org.apache.commons.collections4.Transformer<? super I, ? extends O>> java.util.Map.Entry<? extends org.apache.commons.collections4.Predicate<? super I>, ? extends org.apache.commons.collections4.Transformer<? super I, ? extends O>> : map.entrySet()) {\n                preds[i] = entry.getKey();\n                transformers[i] = entry.getValue();\n                i++;\n            }\n            return new org.apache.commons.collections4.functors.SwitchTransformer<I, O>(false , preds , transformers , defaultTransformer);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ArrayStack:89","type":"CtBinaryOperatorImpl","sourcecode":"n <= 0"},"failures":[198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,216,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,180,391,392,393,394,395,396,165,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,166,167,168],"tindex":"2e43c98a-3e57-11e6-b28d-df856a00edf5","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:514","type":"CtMethodImpl","sourcecode":"protected void addMapping(final int hashIndex, final int hashCode, final K key, final V value) {\n    if (hashCode <= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            (int)++;\n            final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = createEntry(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][hashIndex], hashCode, key, value);\n            addEntry(entry, hashIndex);\n            (int)++;\n            checkCapacity();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"hashCode"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:1068","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.util.Map"},"failures":[357,363,377,351],"tindex":"2e43f09b-3e57-11e6-b28d-557d1aa1bf5d","method":{"position":"org.apache.commons.collections4.map.Flat3Map:244","type":"CtMethodImpl","sourcecode":"public boolean containsValue(final java.lang.Object value) {\n    if (value instanceof java.util.Map) {\n        {\n            if ((org.apache.commons.collections4.map.AbstractHashedMap<K, V>) != null) {\n                return org.apache.commons.collections4.map.AbstractHashedMap<K, V>.containsValue(value);\n            } \n            if (value == null) {\n                switch (int) {\n                    case 3 :\n                        if ((V) == null) {\n                            return true;\n                        } \n                    case 2 :\n                        if ((V) == null) {\n                            return true;\n                        } \n                    case 1 :\n                        if ((V) == null) {\n                            return true;\n                        } \n                }\n            } else {\n                switch (int) {\n                    case 3 :\n                        if (value.equals(V)) {\n                            return true;\n                        } \n                    case 2 :\n                        if (value.equals(V)) {\n                            return true;\n                        } \n                    case 1 :\n                        if (value.equals(V)) {\n                            return true;\n                        } \n                }\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:299","type":"CtBinaryOperatorImpl","sourcecode":"answer == null"},"failures":[437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456],"tindex":"2e4417ac-3e57-11e6-b28d-95175a3bafd6","method":{"position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:146","type":"CtMethodImpl","sourcecode":"public boolean containsKey(final java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.Map<K, V>.containsKey(key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:282","type":"CtBinaryOperatorImpl","sourcecode":"list == null"},"failures":[457,458],"tindex":"2e4417ad-3e57-11e6-b28d-6b40c828856f","method":{"position":"org.apache.commons.collections4.collection.SynchronizedCollection:174","type":"CtMethodImpl","sourcecode":"public boolean removeAll(final java.util.Collection<?> coll) {\n    if (coll == null) {\n        {\n            synchronized(java.lang.Object) {\n                return decorated().removeAll(coll);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:1150","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.util.Map.Entry"},"failures":[],"tindex":"2e4417ae-3e57-11e6-b28d-1578f757e1a3","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:154","type":"CtMethodImpl","sourcecode":"public boolean containsKey(final java.lang.Object key1, final java.lang.Object key2) {\n    if (key1 instanceof java.util.Map.Entry) {\n        {\n            if (key1 == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final int int = hash(key1, key2);\n                    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[][decorated().hashIndex(hashCode, decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[].int)];\n                    while (entry != null) {\n                        if (((entry.int) == hashCode) && (isEqualKey(entry, key1, key2))) {\n                            return true;\n                        } \n                        entry = entry.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n                    }\n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"key1"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:50","type":"CtBinaryOperatorImpl","sourcecode":"predicates == null"},"failures":[171,459,460,461,462,463,197],"tindex":"2e45773f-3e57-11e6-b28d-85d1af950bd9","method":{"position":"org.apache.commons.collections4.functors.FunctorUtils:78","type":"CtMethodImpl","sourcecode":"static void validate(final org.apache.commons.collections4.Predicate<?>... predicates) {\n    if (predicates == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (predicates == null) {\n                throw new java.lang.IllegalArgumentException(\"The predicate array must not be null\");\n            } \n            for (int int = 0 ; i < (predicates.int) ; i++) {\n                if ((predicates[i]) == null) {\n                    throw new java.lang.IllegalArgumentException(((\"The predicate array must not contain a null predicate, index \" + i) + \" was null\"));\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicates":"predicates"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.TransformerUtils:326","type":"CtBinaryOperatorImpl","sourcecode":"objectsAndTransformers == null"},"failures":[464],"tindex":"2e459e50-3e57-11e6-b28d-2b206d6d558a","method":{"position":"org.apache.commons.collections4.TransformerUtils:323","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <I, O>org.apache.commons.collections4.Transformer<I, O> switchMapTransformer(final java.util.Map<I, org.apache.commons.collections4.Transformer<I, O>> objectsAndTransformers) {\n    if (objectsAndTransformers == null) {\n        {\n            if (objectsAndTransformers == null) {\n                throw new java.lang.IllegalArgumentException(\"The object and transformer map must not be null\");\n            } \n            final org.apache.commons.collections4.Transformer<? super I, ? extends O> org.apache.commons.collections4.Transformer<? super I, ? extends O> = objectsAndTransformers.remove(null);\n            final int int = objectsAndTransformers.size();\n            final org.apache.commons.collections4.Transformer<? super I, ? extends O>[] org.apache.commons.collections4.Transformer<? super I, ? extends O>[] = new org.apache.commons.collections4.Transformer[size];\n            final org.apache.commons.collections4.Predicate<I>[] org.apache.commons.collections4.Predicate<I>[] = new org.apache.commons.collections4.Predicate[size];\n            int int = 0;\n            for (final java.util.Map.Entry<I, org.apache.commons.collections4.Transformer<I, O>> java.util.Map.Entry<I, org.apache.commons.collections4.Transformer<I, O>> : objectsAndTransformers.entrySet()) {\n                preds[i] = org.apache.commons.collections4.functors.EqualPredicate.<I>equalPredicate(entry.getKey());\n                trs[(i++)] = entry.getValue();\n            }\n            return org.apache.commons.collections4.TransformerUtils.<I, O>switchTransformer(preds, trs, def);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectsAndTransformers":"objectsAndTransformers"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.SetUtils:117","type":"CtBinaryOperatorImpl","sourcecode":"set1 == set2"},"failures":[],"tindex":"2e459e51-3e57-11e6-b28d-5344067a9f74","method":{"position":"org.apache.commons.collections4.queue.UnmodifiableQueue:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean retainAll(final java.util.Collection<?> coll) {\n    if (coll == coll) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (coll == coll) {\n                {\n                    throw new java.lang.UnsupportedOperationException();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set2":"coll","set1":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:488","type":"CtBinaryOperatorImpl","sourcecode":"(uniqueSet) == null"},"failures":[],"tindex":"2e45ec72-3e57-11e6-b28d-2b465d3f2c93","method":{"position":"org.apache.commons.collections4.SetUtils:178","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Set<E> synchronizedSet(final java.util.Set<E> set) {\n    if (set == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.Collections.synchronizedSet(set);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"uniqueSet":"set"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:528","type":"CtBinaryOperatorImpl","sourcecode":"answer == null"},"failures":[465,466,467,13,468,469,470,15,471,24,472,473,474,26],"tindex":"2e45ec73-3e57-11e6-b28d-db2fc05efc97","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:419","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(final java.lang.Object k) {\n    if (k == null) {\n        {\n            if (k == null) {\n                return null;\n            } \n            final K K = castKey(k);\n            final int int = lengthInBits(key);\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n            while (true) {\n                if ((current.int) <= (path.int)) {\n                    if ((!(current.isEmpty())) && (compareKeys(key, current.K))) {\n                        return removeEntry(current);\n                    } else {\n                        return null;\n                    }\n                } \n                path = current;\n                if (!(isBitSet(key, current.int, lengthInBits))) {\n                    current = current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                } else {\n                    current = current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"k"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.NodeCachingLinkedList:163","type":"CtInvocationImpl","sourcecode":"isCacheFull()"},"failures":[],"tindex":"2e461384-3e57-11e6-b28d-3b9cc2b87e37","method":{"position":"org.apache.commons.collections4.list.GrowthList:69","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.list.GrowthList<E> growthList(final java.util.List<E> list) {\n    return new org.apache.commons.collections4.list.GrowthList<E>(list);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"list"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:1056","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.util.Iterator"},"failures":[475],"tindex":"2e461385-3e57-11e6-b28d-295736834e4b","method":{"position":"org.apache.commons.collections4.IteratorUtils:396","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.ResettableListIterator<E> arrayListIterator(final java.lang.Object array, final int start) {\n    if (array instanceof java.util.Iterator) {\n        {\n            return new org.apache.commons.collections4.iterators.ArrayListIterator<E>(array , start);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1346","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof java.util.Enumeration<?>"},"failures":[392],"tindex":"2e463a96-3e57-11e6-b28d-f9f4b88f6e16","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:332","type":"CtMethodImpl","sourcecode":"public V removeMultiKey(final java.lang.Object key1, final java.lang.Object key2, final java.lang.Object key3) {\n    if (key2 instanceof java.util.Enumeration<?>) {\n        {\n            final int int = hash(key1, key2, key3);\n            final int int = decorated().hashIndex(hashCode, decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[].int);\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[][index];\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = null;\n            while (entry != null) {\n                if (((entry.int) == hashCode) && (isEqualKey(entry, key1, key2, key3))) {\n                    final V V = entry.getValue();\n                    decorated().removeMapping(entry, index, previous);\n                    return oldValue;\n                } \n                previous = entry;\n                entry = entry.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n            }\n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"key2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.PermutationIterator:124","type":"CtBinaryOperatorImpl","sourcecode":"largestKey == (-1)"},"failures":[476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544],"tindex":"2e463a97-3e57-11e6-b28d-71ec489e7cd9","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:126","type":"CtMethodImpl","sourcecode":"public java.util.ListIterator<E> listIterator(final int fromIndex) {\n    if (fromIndex == (-1)) {\n        {\n            return new org.apache.commons.collections4.list.AbstractLinkedList.LinkedListIterator<E>(org.apache.commons.collections4.list.AbstractLinkedList.this , fromIndex);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"largestKey":"fromIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:236","type":"CtBinaryOperatorImpl","sourcecode":"index < ((size) / 2)"},"failures":[545,546],"tindex":"2e4661a8-3e57-11e6-b28d-8bebb5f2321b","method":{"position":"org.apache.commons.collections4.list.TransformedList:131","type":"CtMethodImpl","sourcecode":"public E remove(final int index) {\n    if (index < (index / 2)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return getList().remove(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"index","index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.LazyIteratorChain:96","type":"CtBinaryOperatorImpl","sourcecode":"nextIterator != null"},"failures":[547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,437,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,181,786,182,787,183,184,185,788,186,789,187,790,188,189,190,191,791,792,192,194,793,195,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823],"tindex":"2e4661a9-3e57-11e6-b28d-5d044ffab14b","method":{"position":"org.apache.commons.collections4.iterators.UnmodifiableIterator:47","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Iterator<E> unmodifiableIterator(final java.util.Iterator<? extends E> iterator) {\n    if (iterator != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (iterator == null) {\n                throw new java.lang.IllegalArgumentException(\"Iterator must not be null\");\n            } \n            if (iterator instanceof org.apache.commons.collections4.Unmodifiable) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final java.util.Iterator<E> java.util.Iterator<E> = ((java.util.Iterator<E>)(iterator));\n                return tmpIterator;\n            } \n            return new org.apache.commons.collections4.iterators.UnmodifiableIterator<E>(iterator);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nextIterator":"iterator"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:607","type":"CtBinaryOperatorImpl","sourcecode":"coll instanceof java.util.Set<?>"},"failures":[824,825],"tindex":"2e4688ba-3e57-11e6-b28d-df249da2c0ab","method":{"position":"org.apache.commons.collections4.CollectionUtils:606","type":"CtMethodImpl","sourcecode":"public static <O>int cardinality(final O obj, final java.lang.Iterable<? super O> coll) {\n    if (coll instanceof java.util.Set<?>) {\n        {\n            if (coll instanceof java.util.Set<?>) {\n                return ((java.util.Set<? super O>)(coll)).contains(obj) ? 1 : 0;\n            } \n            if (coll instanceof org.apache.commons.collections4.Bag<?>) {\n                return ((org.apache.commons.collections4.Bag<? super O>)(coll)).getCount(obj);\n            } \n            int int = 0;\n            if (obj == null) {\n                for (final java.lang.Object java.lang.Object : coll) {\n                    if (element == null) {\n                        count++;\n                    } \n                }\n            } else {\n                for (final java.lang.Object java.lang.Object : coll) {\n                    if (obj.equals(element)) {\n                        count++;\n                    } \n                }\n            }\n            return count;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1326","type":"CtBinaryOperatorImpl","sourcecode":"(obj instanceof java.util.Map) == false"},"failures":[],"tindex":"2e4688bb-3e57-11e6-b28d-09c1a3849b1c","method":{"position":"org.apache.commons.collections4.SplitMapUtils:158","type":"CtMethodImpl","sourcecode":"public V get(final java.lang.Object key) {\n    if ((key instanceof java.util.Map) == false) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:512","type":"CtBinaryOperatorImpl","sourcecode":"key4 != null"},"failures":[709,826,827,442,828,829,830,450,831],"tindex":"2e4688bc-3e57-11e6-b28d-c11caff57ad5","method":{"position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:200","type":"CtMethodImpl","sourcecode":"public boolean containsValue(final java.lang.Object value) {\n    if (value != null) {\n        {\n            return java.util.Map<V, K>.containsKey(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key4":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:509","type":"CtBinaryOperatorImpl","sourcecode":"(parent.left) == h"},"failures":[832,471],"tindex":"2e46afcd-3e57-11e6-b28d-95a1c6c70659","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1240","type":"CtMethodImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> nextEntryInSubtree(final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> node, final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> parentOfSubtree) {\n    if (parentOfSubtree == node) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node == null) {\n                return firstEntry();\n            } else {\n                return nextEntryImpl(node.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, node, parentOfSubtree);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"node","left":"parentOfSubtree","h":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.LoopingIterator:55","type":"CtBinaryOperatorImpl","sourcecode":"coll == null"},"failures":[833,834,835,836,837,457,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,688,861],"tindex":"2e46afce-3e57-11e6-b28d-e3dfff0240d7","method":{"position":"org.apache.commons.collections4.collection.SynchronizedCollection:111","type":"CtMethodImpl","sourcecode":"public boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll == null) {\n        {\n            synchronized(java.lang.Object) {\n                return decorated().addAll(coll);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.SwitchTransformer:104","type":"CtBinaryOperatorImpl","sourcecode":"size == 0"},"failures":[862,510,516,863,864,503,521],"tindex":"2e46afcf-3e57-11e6-b28d-757c8d41b25d","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:210","type":"CtMethodImpl","sourcecode":"public void add(final int index, final E value) {\n    if (index == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = getNode(index, true);\n            addNodeBefore(node, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.FilterIterator:98","type":"CtUnaryOperatorImpl","sourcecode":"!(nextObjectSet)"},"failures":[865,866,867,868,869,870,871,872,873,874,875,876],"tindex":"2e46d6e0-3e57-11e6-b28d-5fab1491bde9","method":{"position":"org.apache.commons.collections4.comparators.ComparatorChain:149","type":"CtMethodImpl","sourcecode":"public void addComparator(final java.util.Comparator<E> comparator, final boolean reverse) {\n    if (!reverse) {\n        {\n            checkLocked();\n            java.util.List<java.util.Comparator<E>>.add(comparator);\n            if (reverse == true) {\n                java.util.BitSet.set(((java.util.List<java.util.Comparator<E>>.size()) - 1));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nextObjectSet":"reverse"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:726","type":"CtBinaryOperatorImpl","sourcecode":"(previous != (current.parent.right)) && (org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(current.parent.right, current.parent))"},"failures":[],"tindex":"2e46d6e1-3e57-11e6-b28d-536323e90d16","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:651","type":"CtMethodImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> nextEntryImpl(final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> start, final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> previous, final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> tree) {\n    if ((previous != previous) && (org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>))) {\n        {\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = start;\n            if ((previous == null) || (start != (previous.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>))) {\n                while (!(current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.isEmpty())) {\n                    if (previous == (current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n                        break;\n                    } \n                    if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, current)) {\n                        return current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                    } \n                    current = current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                }\n            } \n            if (current.isEmpty()) {\n                return null;\n            } \n            if ((current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == null) {\n                return null;\n            } \n            if (previous != (current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n                if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, current)) {\n                    return current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                } \n                return nextEntryImpl(current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, previous, tree);\n            } \n            while (current == (current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n                if (current == tree) {\n                    return null;\n                } \n                current = current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n            }\n            if (current == tree) {\n                return null;\n            } \n            if ((current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == null) {\n                return null;\n            } \n            if ((previous != (current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) && (org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>))) {\n                return current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n            } \n            if ((current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == (current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n                return null;\n            } \n            return nextEntryImpl(current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, previous, tree);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"tree","current":"start","previous":"previous","right":"previous"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.NodeCachingLinkedList:187","type":"CtBinaryOperatorImpl","sourcecode":"cachedNode == null"},"failures":[],"tindex":"2e472502-3e57-11e6-b28d-4d5d64a029cc","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:465","type":"CtMethodImpl","sourcecode":"protected void addNodeBefore(final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> node, final E value) {\n    if (node == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = createNode(value);\n            addNode(newNode, node);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cachedNode":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:921","type":"CtBinaryOperatorImpl","sourcecode":"iterator == null"},"failures":[],"tindex":"2e472503-3e57-11e6-b28d-c9d877e02ab7","method":{"position":"org.apache.commons.collections4.IteratorUtils:1017","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> toList(final java.util.Iterator<? extends E> iterator, final int estimatedSize) {\n    if (iterator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (iterator == null) {\n                throw new java.lang.NullPointerException(\"Iterator must not be null\");\n            } \n            if (estimatedSize < 1) {\n                throw new java.lang.IllegalArgumentException(\"Estimated size must be greater than 0\");\n            } \n            final java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>(estimatedSize);\n            while (iterator.hasNext()) {\n                list.add(iterator.next());\n            }\n            return list;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterator":"iterator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:799","type":"CtBinaryOperatorImpl","sourcecode":"collection instanceof java.util.List<?>"},"failures":[877],"tindex":"2e472504-3e57-11e6-b28d-198c214faf5e","method":{"position":"org.apache.commons.collections4.CollectionUtils:1137","type":"CtMethodImpl","sourcecode":"public static <C>boolean addAll(final java.util.Collection<C> collection, final java.util.Enumeration<? extends C> enumeration) {\n    if (collection instanceof java.util.List<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            while (enumeration.hasMoreElements()) {\n                changed |= collection.add(enumeration.nextElement());\n            }\n            return changed;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collection":"collection"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:362","type":"CtBinaryOperatorImpl","sourcecode":"coll instanceof org.apache.commons.collections4.Bag"},"failures":[878,879,880,857,881,698],"tindex":"2e474c15-3e57-11e6-b28d-5b29cc057e24","method":{"position":"org.apache.commons.collections4.bag.CollectionBag:141","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean retainAll(final java.util.Collection<?> coll) {\n    if (coll instanceof org.apache.commons.collections4.Bag) {\n        {\n            if (coll != null) {\n                boolean boolean = false;\n                final java.util.Iterator<E> java.util.Iterator<E> = iterator();\n                while (e.hasNext()) {\n                    if (!(coll.contains(e.next()))) {\n                        e.remove();\n                        modified = true;\n                    } \n                }\n                return modified;\n            } else {\n                return decorated().retainAll(null);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:376","type":"CtBinaryOperatorImpl","sourcecode":"size == 0"},"failures":[63,116,119,120],"tindex":"2e49bd16-3e57-11e6-b28d-5db66ccb45a3","method":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:228","type":"CtMethodImpl","sourcecode":"protected org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> getEntry(final int index) {\n    if (index == 0) {\n        {\n            if (index < 0) {\n                throw new java.lang.IndexOutOfBoundsException(((\"Index \" + index) + \" is less than zero\"));\n            } \n            if (index >= (int)) {\n                throw new java.lang.IndexOutOfBoundsException((((\"Index \" + index) + \" is invalid for size \") + (int)));\n            } \n            org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n            if (index < ((int) / 2)) {\n                entry = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                for (int int = 0 ; currentIndex < index ; currentIndex++) {\n                    entry = entry.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                }\n            } else {\n                entry = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                for (int int = int ; currentIndex > index ; currentIndex--) {\n                    entry = entry.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                }\n            }\n            return entry;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:94","type":"CtBinaryOperatorImpl","sourcecode":"(list1.size()) > (list2.size())"},"failures":[],"tindex":"2e49e427-3e57-11e6-b28d-3360fa3190e3","method":{"position":"org.apache.commons.collections4.ListUtils:162","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> union(final java.util.List<? extends E> list1, final java.util.List<? extends E> list2) {\n    if ((list2.size()) > (list2.size())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.ArrayList<E> java.util.ArrayList<E> = new java.util.ArrayList<E>(list1);\n            result.addAll(list2);\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list1":"list2","list2":"list2"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:126","type":"CtBinaryOperatorImpl","sourcecode":"map != null"},"failures":[],"tindex":"2e4a0b38-3e57-11e6-b28d-7b229ece4f66","method":{"position":"org.apache.commons.collections4.MapUtils:150","type":"CtMethodImpl","sourcecode":"public static <K>java.lang.Boolean getBoolean(final java.util.Map<? super K, ?> map, final K key) {\n    if (map != null) {\n        {\n            if (map != null) {\n                final java.lang.Object java.lang.Object = map.get(key);\n                if (answer != null) {\n                    if (answer instanceof java.lang.Boolean) {\n                        return ((java.lang.Boolean)(answer));\n                    } \n                    if (answer instanceof java.lang.String) {\n                        return java.lang.Boolean.valueOf(((java.lang.String)(answer)));\n                    } \n                    if (answer instanceof java.lang.Number) {\n                        final java.lang.Number java.lang.Number = ((java.lang.Number)(answer));\n                        return (n.intValue()) != 0 ? java.lang.Boolean.java.lang.Boolean.java.lang.Boolean : java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n                    } \n                } \n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1346","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof java.util.Enumeration<?>"},"failures":[],"tindex":"2e4a0b39-3e57-11e6-b28d-fb011660c79a","method":{"position":"org.apache.commons.collections4.map.Flat3Map:197","type":"CtMethodImpl","sourcecode":"public boolean containsKey(final java.lang.Object key) {\n    if (key instanceof java.util.Enumeration<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.collections4.map.AbstractHashedMap<K, V>) != null) {\n                return org.apache.commons.collections4.map.AbstractHashedMap<K, V>.containsKey(key);\n            } \n            if (key == null) {\n                switch (int) {\n                    case 3 :\n                        if ((K) == null) {\n                            return true;\n                        } \n                    case 2 :\n                        if ((K) == null) {\n                            return true;\n                        } \n                    case 1 :\n                        if ((K) == null) {\n                            return true;\n                        } \n                }\n            } else {\n                if ((int) > 0) {\n                    final int int = key.hashCode();\n                    switch (int) {\n                        case 3 :\n                            if (((int) == hashCode) && (key.equals(K))) {\n                                return true;\n                            } \n                        case 2 :\n                            if (((int) == hashCode) && (key.equals(K))) {\n                                return true;\n                            } \n                        case 1 :\n                            if (((int) == hashCode) && (key.equals(K))) {\n                                return true;\n                            } \n                    }\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:665","type":"CtBinaryOperatorImpl","sourcecode":"proposedCapacity > (org.apache.commons.collections4.map.AbstractHashedMap.MAXIMUM_CAPACITY)"},"failures":[475],"tindex":"2e4a324a-3e57-11e6-b28d-1d3cc9924e11","method":{"position":"org.apache.commons.collections4.IteratorUtils:412","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end) {\n    if (start > end) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.collections4.iterators.ObjectArrayListIterator<E>(array , start , end);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.collections4.map.AbstractHashedMap.MAXIMUM_CAPACITY":"end","proposedCapacity":"start"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.SynchronizedCollection:72","type":"CtBinaryOperatorImpl","sourcecode":"collection == null"},"failures":[882],"tindex":"2e4a324b-3e57-11e6-b28d-2bf94a550f1c","method":{"position":"org.apache.commons.collections4.CollectionUtils:1783","type":"CtMethodImpl","sourcecode":"public static <E>E extractSingleton(final java.util.Collection<E> collection) {\n    if (collection == null) {\n        {\n            if ((collection == null) || ((collection.size()) != 1)) {\n                throw new java.lang.IllegalArgumentException(\"Can extract singleton only when collection size == 1\");\n            } \n            return collection.iterator().next();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collection":"collection"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:248","type":"CtBinaryOperatorImpl","sourcecode":"((list1 == null) || (list2 == null)) || ((list1.size()) != (list2.size()))"},"failures":[],"tindex":"2e4a324c-3e57-11e6-b28d-fd49439f93ee","method":{"position":"org.apache.commons.collections4.CollectionUtils:494","type":"CtMethodImpl","sourcecode":"public static boolean isProperSubCollection(final java.util.Collection<?> a, final java.util.Collection<?> b) {\n    if (((a == null) || (a == null)) || ((list1.size()) != (list2.size()))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((a.size()) < (b.size())) && (org.apache.commons.collections4.CollectionUtils.isSubCollection(a, b));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list1":"a","list2":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:362","type":"CtBinaryOperatorImpl","sourcecode":"coll instanceof org.apache.commons.collections4.Bag"},"failures":[],"tindex":"2e4a595d-3e57-11e6-b28d-1ba3b24211ae","method":{"position":"org.apache.commons.collections4.list.FixedSizeList:137","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean removeAll(final java.util.Collection<?> coll) {\n    if (coll instanceof org.apache.commons.collections4.Bag) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException(\"List is fixed size\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:468","type":"CtBinaryOperatorImpl","sourcecode":"answer == null"},"failures":[],"tindex":"2e4a595e-3e57-11e6-b28d-23a86bc515b8","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:178","type":"CtMethodImpl","sourcecode":"public boolean containsValue(final java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.collections4.bidimap.TreeBidiMap.checkValue(value);\n                    return (lookupValue(value)) != null;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:278","type":"CtBinaryOperatorImpl","sourcecode":"answer == null"},"failures":[367],"tindex":"2e4a595f-3e57-11e6-b28d-43d3c5d0c68a","method":{"position":"org.apache.commons.collections4.map.Flat3Map:437","type":"CtMethodImpl","sourcecode":"public V remove(final java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.collections4.map.AbstractHashedMap<K, V>) != null) {\n                return org.apache.commons.collections4.map.AbstractHashedMap<K, V>.remove(key);\n            } \n            if ((int) == 0) {\n                return null;\n            } \n            if (key == null) {\n                switch (int) {\n                    case 3 :\n                        if ((K) == null) {\n                            final V V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 2;\n                            return old;\n                        } \n                        if ((K) == null) {\n                            final V V = V;\n                            int = int;\n                            K = K;\n                            V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 2;\n                            return old;\n                        } \n                        if ((K) == null) {\n                            final V V = V;\n                            int = int;\n                            K = K;\n                            V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 2;\n                            return old;\n                        } \n                        return null;\n                    case 2 :\n                        if ((K) == null) {\n                            final V V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 1;\n                            return old;\n                        } \n                        if ((K) == null) {\n                            final V V = V;\n                            int = int;\n                            K = K;\n                            V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 1;\n                            return old;\n                        } \n                        return null;\n                    case 1 :\n                        if ((K) == null) {\n                            final V V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 0;\n                            return old;\n                        } \n                }\n            } else {\n                if ((int) > 0) {\n                    final int int = key.hashCode();\n                    switch (int) {\n                        case 3 :\n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 2;\n                                return old;\n                            } \n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = int;\n                                K = K;\n                                V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 2;\n                                return old;\n                            } \n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = int;\n                                K = K;\n                                V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 2;\n                                return old;\n                            } \n                            return null;\n                        case 2 :\n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 1;\n                                return old;\n                            } \n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = int;\n                                K = K;\n                                V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 1;\n                                return old;\n                            } \n                            return null;\n                        case 1 :\n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 0;\n                                return old;\n                            } \n                    }\n                } \n            }\n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1027","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(bitIndex)"},"failures":[],"tindex":"2e4aa780-3e57-11e6-b28d-21a6e0c6c11a","method":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:708","type":"CtMethodImpl","sourcecode":"protected <T>java.lang.Object toReference(final org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength type, final T referent, final int hash) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(hash)) {\n        {\n            if (type == (org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength.org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength.org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength)) {\n                return referent;\n            } \n            if (type == (org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength.org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength.org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength)) {\n                return new org.apache.commons.collections4.map.AbstractReferenceMap.SoftRef<T>(hash , referent , org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.java.lang.ref.ReferenceQueue<java.lang.Object>);\n            } \n            if (type == (org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength.org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength.org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength)) {\n                return new org.apache.commons.collections4.map.AbstractReferenceMap.WeakRef<T>(hash , referent , org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.java.lang.ref.ReferenceQueue<java.lang.Object>);\n            } \n            throw new java.lang.Error();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"hash"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1330","type":"CtBinaryOperatorImpl","sourcecode":"object == null"},"failures":[669],"tindex":"2e4ace91-3e57-11e6-b28d-a3df5c29b205","method":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:119","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object object) {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return remove(object, 1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.LoopingListIterator:90","type":"CtBinaryOperatorImpl","sourcecode":"(iterator.hasNext()) == false"},"failures":[],"tindex":"2e4ace92-3e57-11e6-b28d-0dc47d4013df","method":{"position":"org.apache.commons.collections4.IteratorUtils:460","type":"CtMethodImpl","sourcecode":"public static <E>java.util.ListIterator<E> unmodifiableListIterator(final java.util.ListIterator<E> listIterator) {\n    if ((listIterator.hasNext()) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.iterators.UnmodifiableListIterator.umodifiableListIterator(listIterator);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterator":"listIterator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.ArrayIterator:119","type":"CtBinaryOperatorImpl","sourcecode":"bound < 0"},"failures":[],"tindex":"2e4ace93-3e57-11e6-b28d-19845c58ad02","method":{"position":"org.apache.commons.collections4.bag.UnmodifiableBag:148","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object object, final int count) {\n    if (count < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bound":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.InstanceofPredicate:46","type":"CtBinaryOperatorImpl","sourcecode":"type == null"},"failures":[33,34],"tindex":"2e4af5a4-3e57-11e6-b28d-eb337b4762b9","method":{"position":"org.apache.commons.collections4.PredicateUtils:174","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.collections4.Predicate<java.lang.Object> instanceofPredicate(final java.lang.Class<?> type) {\n    if (type == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type == null) {\n                {\n                    return org.apache.commons.collections4.functors.InstanceofPredicate.instanceOfPredicate(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:388","type":"CtBinaryOperatorImpl","sourcecode":"answer == null"},"failures":[883],"tindex":"2e4af5a5-3e57-11e6-b28d-3b95edba0aa6","method":{"position":"org.apache.commons.collections4.TransformerUtils:399","type":"CtMethodImpl","sourcecode":"public static <I, O>org.apache.commons.collections4.Transformer<I, O> invokerTransformer(final java.lang.String methodName) {\n    if (methodName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.functors.InvokerTransformer.<I, O>invokerTransformer(methodName, null, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"methodName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:1325","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2e4c2e26-3e57-11e6-b28d-412cfbf2a31c","method":{"position":"org.apache.commons.collections4.trie.AbstractBitwiseTrie:140","type":"CtMethodImpl","sourcecode":"static boolean compare(final java.lang.Object a, final java.lang.Object b) {\n    if (a == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return a == null ? b == null : a.equals(b);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:218","type":"CtBinaryOperatorImpl","sourcecode":"answer instanceof java.lang.Byte"},"failures":[],"tindex":"2e4c2e27-3e57-11e6-b28d-fd87ef280629","method":{"position":"org.apache.commons.collections4.map.Flat3Map:982","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object key) {\n    if (key instanceof java.lang.Byte) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = org.apache.commons.collections4.map.Flat3Map<K, ?>.containsKey(key);\n            org.apache.commons.collections4.map.Flat3Map<K, ?>.remove(key);\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.NullIsExceptionPredicate:47","type":"CtBinaryOperatorImpl","sourcecode":"predicate == null"},"failures":[884],"tindex":"2e4c5538-3e57-11e6-b28d-85e624c910c6","method":{"position":"org.apache.commons.collections4.functors.NullIsExceptionPredicate:46","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> nullIsExceptionPredicate(final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if (predicate == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (predicate == null) {\n                throw new java.lang.IllegalArgumentException(\"Predicate must not be null\");\n            } \n            return new org.apache.commons.collections4.functors.NullIsExceptionPredicate<T>(predicate);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1338","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof java.lang.Object[]"},"failures":[885,886,887,888,889,890,891,892,893,894],"tindex":"2e4c5539-3e57-11e6-b28d-db09bfe22d99","method":{"position":"org.apache.commons.collections4.set.ListOrderedSet:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object object) {\n    if (object instanceof java.lang.Object[]) {\n        {\n            final boolean boolean = decorated().remove(object);\n            if (result) {\n                java.util.List<E>.remove(object);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:123","type":"CtBinaryOperatorImpl","sourcecode":"closures == null"},"failures":[895,896,897,898,899,900,901],"tindex":"2e4d188a-3e57-11e6-b28d-4b048b0ebab8","method":{"position":"org.apache.commons.collections4.CollectionUtils:1250","type":"CtMethodImpl","sourcecode":"public static java.lang.Object get(final java.lang.Object object, final int index) {\n    if (object == null) {\n        {\n            int int = index;\n            if (i < 0) {\n                throw new java.lang.IndexOutOfBoundsException((\"Index cannot be negative: \" + i));\n            } \n            if (object instanceof java.util.Map<?, ?>) {\n                final java.util.Map<?, ?> java.util.Map<?, ?> = ((java.util.Map<?, ?>)(object));\n                final java.util.Iterator<?> java.util.Iterator<?> = map.entrySet().iterator();\n                return org.apache.commons.collections4.CollectionUtils.get(iterator, i);\n            } else if (object instanceof java.lang.Object[]) {\n                return ((java.lang.Object[])(object))[i];\n            } else if (object instanceof java.util.Iterator<?>) {\n                final java.util.Iterator<?> java.util.Iterator<?> = ((java.util.Iterator<?>)(object));\n                while (it.hasNext()) {\n                    i--;\n                    if (i == (-1)) {\n                        return it.next();\n                    } \n                    it.next();\n                }\n                throw new java.lang.IndexOutOfBoundsException((\"Entry does not exist: \" + i));\n            } else if (object instanceof java.util.Collection<?>) {\n                final java.util.Iterator<?> java.util.Iterator<?> = ((java.util.Collection<?>)(object)).iterator();\n                return org.apache.commons.collections4.CollectionUtils.get(iterator, i);\n            } else if (object instanceof java.util.Enumeration<?>) {\n                final java.util.Enumeration<?> java.util.Enumeration<?> = ((java.util.Enumeration<?>)(object));\n                while (it.hasMoreElements()) {\n                    i--;\n                    if (i == (-1)) {\n                        return it.nextElement();\n                    } else {\n                        it.nextElement();\n                    }\n                }\n                throw new java.lang.IndexOutOfBoundsException((\"Entry does not exist: \" + i));\n            } else if (object == null) {\n                throw new java.lang.IllegalArgumentException(\"Unsupported object type: null\");\n            } else {\n                try {\n                    return java.lang.reflect.Array.get(object, i);\n                } catch (final java.lang.IllegalArgumentException ex) {\n                    throw new java.lang.IllegalArgumentException((\"Unsupported object type: \" + (object.getClass().getName())));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"closures":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.ComparatorChain:336","type":"CtBinaryOperatorImpl","sourcecode":"null == object"},"failures":[594],"tindex":"2e4d3f9b-3e57-11e6-b28d-35cf1a9c05e5","method":{"position":"org.apache.commons.collections4.set.UnmodifiableSortedSet:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object object) {\n    if (null == object) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.UnmodifiableList:55","type":"CtBinaryOperatorImpl","sourcecode":"list instanceof org.apache.commons.collections4.Unmodifiable"},"failures":[],"tindex":"2e4d3f9c-3e57-11e6-b28d-f5c90c49cc67","method":{"position":"org.apache.commons.collections4.ListUtils:210","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> selectRejected(final java.util.Collection<? extends E> inputCollection, final org.apache.commons.collections4.Predicate<? super E> predicate) {\n    if (inputCollection instanceof org.apache.commons.collections4.Unmodifiable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.CollectionUtils.selectRejected(inputCollection, predicate, new java.util.ArrayList<E>(inputCollection.size()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"inputCollection"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:764","type":"CtBinaryOperatorImpl","sourcecode":"list == null"},"failures":[902],"tindex":"2e4d66ad-3e57-11e6-b28d-63e7859dbea0","method":{"position":"org.apache.commons.collections4.list.LazyList:78","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.list.LazyList<E> lazyList(final java.util.List<E> list, final org.apache.commons.collections4.Factory<? extends E> factory) {\n    if (list == null) {\n        {\n            return new org.apache.commons.collections4.list.LazyList<E>(list , factory);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"list"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:510","type":"CtBinaryOperatorImpl","sourcecode":"(size) > 0"},"failures":[],"tindex":"2e4d66ae-3e57-11e6-b28d-83ddde5c6b18","method":{"position":"org.apache.commons.collections4.bag.TransformedBag:125","type":"CtMethodImpl","sourcecode":"public boolean add(final E object, final int nCopies) {\n    if (nCopies > 0) {\n        {\n            return getBag().add(transform(object), nCopies);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"nCopies"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:627","type":"CtBinaryOperatorImpl","sourcecode":"newCapacity <= oldCapacity"},"failures":[],"tindex":"2e4d66af-3e57-11e6-b28d-c34670cbc64b","method":{"position":"org.apache.commons.collections4.list.PredicatedList:128","type":"CtMethodImpl","sourcecode":"public java.util.ListIterator<E> listIterator(final int i) {\n    if (i <= i) {\n        {\n            return new PredicatedListIterator(decorated().listIterator(i));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"oldCapacity":"i","newCapacity":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:700","type":"CtBinaryOperatorImpl","sourcecode":"predicate == null"},"failures":[903,904,905,906,907,908,909,910,911,912,913,914,689,915,690,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,881,935,936,937,691,938,939,940,941,942,943,944,945],"tindex":"2e4d66b0-3e57-11e6-b28d-ebd77a140d8b","method":{"position":"org.apache.commons.collections4.bag.PredicatedBag:60","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.bag.PredicatedBag<E> predicatedBag(final org.apache.commons.collections4.Bag<E> bag, final org.apache.commons.collections4.Predicate<? super E> predicate) {\n    if (predicate == null) {\n        {\n            return new org.apache.commons.collections4.bag.PredicatedBag<E>(bag , predicate);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:1001","type":"CtBinaryOperatorImpl","sourcecode":"(size()) == 0"},"failures":[],"tindex":"2e4d8dc1-3e57-11e6-b28d-9bde56b3d217","method":{"position":"org.apache.commons.collections4.MapUtils:1698","type":"CtMethodImpl","sourcecode":"public static <K, V, E>void populateMap(final java.util.Map<K, V> map, final java.lang.Iterable<? extends E> elements, final org.apache.commons.collections4.Transformer<E, K> keyTransformer, final org.apache.commons.collections4.Transformer<E, V> valueTransformer) {\n    final java.util.Iterator<? extends E> java.util.Iterator<? extends E> = elements.iterator();\n    while (iter.hasNext()) {\n        final E E = iter.next();\n        map.put(keyTransformer.transform(temp), valueTransformer.transform(temp));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:367","type":"CtInvocationImpl","sourcecode":"coll2.isEmpty()"},"failures":[833,686],"tindex":"2e4d8dc2-3e57-11e6-b28d-bd73369c85ad","method":{"position":"org.apache.commons.collections4.collection.SynchronizedCollection:129","type":"CtMethodImpl","sourcecode":"public boolean containsAll(final java.util.Collection<?> coll) {\n    if (coll.isEmpty()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.lang.Object) {\n                return decorated().containsAll(coll);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll2":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.ComparatorPredicate:126","type":"CtBinaryOperatorImpl","sourcecode":"criterion == null"},"failures":[],"tindex":"2e4d8dc3-3e57-11e6-b28d-6da5e5aa351a","method":{"position":"org.apache.commons.collections4.iterators.ArrayListIterator:165","type":"CtMethodImpl","sourcecode":"public void add(final java.lang.Object o) {\n    if (o == null) {\n        {\n            if (o == null) {\n                {\n                    throw new java.lang.UnsupportedOperationException(\"add() method is not supported\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"criterion":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:610","type":"CtBinaryOperatorImpl","sourcecode":"coll instanceof org.apache.commons.collections4.Bag<?>"},"failures":[],"tindex":"2e4d8dc4-3e57-11e6-b28d-b39ad6c57c69","method":{"position":"org.apache.commons.collections4.CollectionUtils:1527","type":"CtMethodImpl","sourcecode":"public static <O extends java.lang.Comparable<? super O>>java.util.List<O> collate(java.lang.Iterable<? extends O> a, java.lang.Iterable<? extends O> b) {\n    if (b instanceof org.apache.commons.collections4.Bag<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.CollectionUtils.collate(a, b, org.apache.commons.collections4.ComparatorUtils.<O>naturalComparator(), true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:568","type":"CtBinaryOperatorImpl","sourcecode":"answer == null"},"failures":[],"tindex":"2e4db4d5-3e57-11e6-b28d-490f879fded6","method":{"position":"org.apache.commons.collections4.MapUtils:566","type":"CtMethodImpl","sourcecode":"public static <K>java.util.Map<?, ?> getMap(final java.util.Map<? super K, ?> map, final K key, final java.util.Map<?, ?> defaultValue) {\n    if (defaultValue == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<?, ?> java.util.Map<?, ?> = org.apache.commons.collections4.MapUtils.getMap(map, key);\n            if (answer == null) {\n                answer = defaultValue;\n            } \n            return answer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"defaultValue"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:586","type":"CtBinaryOperatorImpl","sourcecode":"(delegateMap) != null"},"failures":[],"tindex":"2e4db4d6-3e57-11e6-b28d-eb0d5801971b","method":{"position":"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected org.apache.commons.collections4.BidiMap<V, K> createBidiMap(final java.util.Map<V, K> normalMap, final java.util.Map<K, V> reverseMap, final org.apache.commons.collections4.BidiMap<K, V> inverseBidiMap) {\n    if (reverseMap != null) {\n        {\n            return new org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap<V, K>(normalMap , reverseMap , inverseBidiMap);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delegateMap":"reverseMap"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:341","type":"CtBinaryOperatorImpl","sourcecode":"map != null"},"failures":[],"tindex":"2e4db4d7-3e57-11e6-b28d-67b77540533d","method":{"position":"org.apache.commons.collections4.MapUtils:276","type":"CtMethodImpl","sourcecode":"public static <K>java.lang.Long getLong(final java.util.Map<? super K, ?> map, final K key) {\n    if (map != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.Number java.lang.Number = org.apache.commons.collections4.MapUtils.getNumber(map, key);\n            if (answer == null) {\n                return null;\n            } \n            if (answer instanceof java.lang.Long) {\n                return ((java.lang.Long)(answer));\n            } \n            return java.lang.Long.valueOf(answer.longValue());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.keyvalue.MultiKey:224","type":"CtBinaryOperatorImpl","sourcecode":"other instanceof org.apache.commons.collections4.keyvalue.MultiKey"},"failures":[],"tindex":"2e4db4d8-3e57-11e6-b28d-a139f35e2fc2","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:852","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.Object entry) {\n    if (entry instanceof org.apache.commons.collections4.keyvalue.MultiKey) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (entry instanceof java.util.Map.Entry) {\n                final java.util.Map.Entry<?, ?> java.util.Map.Entry<?, ?> = ((java.util.Map.Entry<?, ?>)(entry));\n                final java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap<K, V>.getEntry(e.getKey());\n                return (match != null) && (match.equals(e));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"entry"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.InstanceofPredicate:46","type":"CtBinaryOperatorImpl","sourcecode":"type == null"},"failures":[],"tindex":"2e4ddbe9-3e57-11e6-b28d-cbd895c2bb59","method":{"position":"org.apache.commons.collections4.PredicateUtils:174","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.collections4.Predicate<java.lang.Object> instanceofPredicate(final java.lang.Class<?> type) {\n    if (type == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type == null) {\n                {\n                    return org.apache.commons.collections4.functors.InstanceofPredicate.instanceOfPredicate(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1137","type":"CtBinaryOperatorImpl","sourcecode":"y == xFormerParent"},"failures":[],"tindex":"2e4ddbea-3e57-11e6-b28d-ed104e7f33ca","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:948","type":"CtMethodImpl","sourcecode":"private void doRedBlackDelete(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> deletedNode) {\n    if (deletedNode == deletedNode) {\n        {\n            for (final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement : org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.values()) {\n                if (((deletedNode.getLeft(dataElement)) != null) && ((deletedNode.getRight(dataElement)) != null)) {\n                    swapPosition(nextGreater(deletedNode, dataElement), deletedNode, dataElement);\n                } \n                final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = (deletedNode.getLeft(dataElement)) != null ? deletedNode.getLeft(dataElement) : deletedNode.getRight(dataElement);\n                if (replacement != null) {\n                    replacement.setParent(deletedNode.getParent(dataElement), dataElement);\n                    if ((deletedNode.getParent(dataElement)) == null) {\n                        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][dataElement.ordinal()] = replacement;\n                    } else if (deletedNode == (deletedNode.getParent(dataElement).getLeft(dataElement))) {\n                        deletedNode.getParent(dataElement).setLeft(replacement, dataElement);\n                    } else {\n                        deletedNode.getParent(dataElement).setRight(replacement, dataElement);\n                    }\n                    deletedNode.setLeft(null, dataElement);\n                    deletedNode.setRight(null, dataElement);\n                    deletedNode.setParent(null, dataElement);\n                    if (org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(deletedNode, dataElement)) {\n                        doRedBlackDeleteFixup(replacement, dataElement);\n                    } \n                } else {\n                    if ((deletedNode.getParent(dataElement)) == null) {\n                        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][dataElement.ordinal()] = null;\n                    } else {\n                        if (org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(deletedNode, dataElement)) {\n                            doRedBlackDeleteFixup(deletedNode, dataElement);\n                        } \n                        if ((deletedNode.getParent(dataElement)) != null) {\n                            if (deletedNode == (deletedNode.getParent(dataElement).getLeft(dataElement))) {\n                                deletedNode.getParent(dataElement).setLeft(null, dataElement);\n                            } else {\n                                deletedNode.getParent(dataElement).setRight(null, dataElement);\n                            }\n                            deletedNode.setParent(null, dataElement);\n                        } \n                    }\n                }\n            }\n            shrink();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"y":"deletedNode","xFormerParent":"deletedNode"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:616","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[14,25],"tindex":"2e4eed5b-3e57-11e6-b28d-03f142fa328c","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1515","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object o) {\n    if (o == null) {\n        {\n            for (final java.util.Iterator<V> java.util.Iterator<V> = iterator() ; it.hasNext() ; ) {\n                final V V = it.next();\n                if (org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(value, o)) {\n                    it.remove();\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.ReverseComparator:113","type":"CtBinaryOperatorImpl","sourcecode":"null == object"},"failures":[946,947,948,949],"tindex":"2e4eed5c-3e57-11e6-b28d-dd2b2d2f1377","method":{"position":"org.apache.commons.collections4.CollectionUtils:80","type":"CtMethodImpl","sourcecode":"public final int max(final java.lang.Object obj) {\n    if (null == obj) {\n        {\n            return java.lang.Math.max(freqA(obj), freqB(obj));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1083","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey(bitIndex)"},"failures":[],"tindex":"2e4f146d-3e57-11e6-b28d-01e670254ea2","method":{"position":"org.apache.commons.collections4.bag.AbstractBagDecorator:72","type":"CtMethodImpl","sourcecode":"public boolean add(final E object, final int count) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey(count)) {\n        {\n            return decorated().add(object, count);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:184","type":"CtBinaryOperatorImpl","sourcecode":"map != null"},"failures":[],"tindex":"2e4f146e-3e57-11e6-b28d-d590cb215c00","method":{"position":"org.apache.commons.collections4.MapUtils:297","type":"CtMethodImpl","sourcecode":"public static <K>java.lang.Float getFloat(final java.util.Map<? super K, ?> map, final K key) {\n    if (map != null) {\n        {\n            final java.lang.Number java.lang.Number = org.apache.commons.collections4.MapUtils.getNumber(map, key);\n            if (answer == null) {\n                return null;\n            } \n            if (answer instanceof java.lang.Float) {\n                return ((java.lang.Float)(answer));\n            } \n            return java.lang.Float.valueOf(answer.floatValue());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1261","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof java.util.Iterator<?>"},"failures":[950,951,952,953,954,955,956,957,958,959,960],"tindex":"2e4f146f-3e57-11e6-b28d-2b74e758308e","method":{"position":"org.apache.commons.collections4.map.StaticBucketMap:316","type":"CtMethodImpl","sourcecode":"public V remove(final java.lang.Object key) {\n    if (key instanceof java.util.Iterator<?>) {\n        {\n            final int int = getHash(key);\n            synchronized(org.apache.commons.collections4.map.StaticBucketMap.Lock[][hash]) {\n                org.apache.commons.collections4.map.StaticBucketMap.Node<K, V> org.apache.commons.collections4.map.StaticBucketMap.Node<K, V> = org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>[][hash];\n                org.apache.commons.collections4.map.StaticBucketMap.Node<K, V> org.apache.commons.collections4.map.StaticBucketMap.Node<K, V> = null;\n                while (n != null) {\n                    if (((n.K) == key) || (((n.K) != null) && (n.K.equals(key)))) {\n                        if (null == prev) {\n                            org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>[][hash] = n.org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>;\n                        } else {\n                            prev.org.apache.commons.collections4.map.StaticBucketMap.Node<K, V> = n.org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>;\n                        }\n                        (org.apache.commons.collections4.map.StaticBucketMap.Lock[][hash].int)--;\n                        return n.V;\n                    } \n                    prev = n;\n                    n = n.org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>;\n                }\n            }\n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:204","type":"CtBinaryOperatorImpl","sourcecode":"(((delta % 2) != 0) && ((delta - d) <= k)) && (k <= (delta + d))"},"failures":[],"tindex":"2e4f3b80-3e57-11e6-b28d-3300d4243eb3","method":{"position":"org.apache.commons.collections4.ListUtils:654","type":"CtMethodImpl","sourcecode":"public static <T>java.util.List<java.util.List<T>> partition(final java.util.List<T> list, final int size) {\n    if ((((size % 2) != 0) && ((delta - size) <= size)) && (k <= (delta + d))) {\n        {\n            if (list == null) {\n                throw new java.lang.IllegalArgumentException(\"List must not be null\");\n            } \n            if (size <= 0) {\n                throw new java.lang.IllegalArgumentException(\"Size must be greater than 0\");\n            } \n            return new org.apache.commons.collections4.ListUtils.Partition<T>(list , size);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"size","delta":"size","k":"size"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.ComparatorPredicate:126","type":"CtBinaryOperatorImpl","sourcecode":"criterion == null"},"failures":[961,962,963,964,965,966],"tindex":"2e4f3b81-3e57-11e6-b28d-3dba51dd73f2","method":{"position":"org.apache.commons.collections4.functors.ComparatorPredicate:121","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> comparatorPredicate(final T object, final java.util.Comparator<T> comparator, final org.apache.commons.collections4.functors.ComparatorPredicate.Criterion criterion) {\n    if (criterion == null) {\n        {\n            if (comparator == null) {\n                throw new java.lang.IllegalArgumentException(\"Comparator must not be null.\");\n            } \n            if (criterion == null) {\n                throw new java.lang.IllegalArgumentException(\"Criterion must not be null.\");\n            } \n            return new org.apache.commons.collections4.functors.ComparatorPredicate<T>(object , comparator , criterion);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"criterion":"criterion"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:245","type":"CtBinaryOperatorImpl","sourcecode":"list1 == list2"},"failures":[],"tindex":"2e4f6292-3e57-11e6-b28d-e5d9985acb0c","method":{"position":"org.apache.commons.collections4.queue.UnmodifiableQueue:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean retainAll(final java.util.Collection<?> coll) {\n    if (coll == coll) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (coll == coll) {\n                {\n                    throw new java.lang.UnsupportedOperationException();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list1":"coll","list2":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:158","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(bitIndex))"},"failures":[],"tindex":"2e4f6293-3e57-11e6-b28d-f5998a5ca626","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:477","type":"CtMethodImpl","sourcecode":"public V remove(final int index) {\n    if (!(org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(index))) {\n        {\n            return remove(get(index));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:847","type":"CtBinaryOperatorImpl","sourcecode":"(input != null) && (predicate != null)"},"failures":[967],"tindex":"2e4f6294-3e57-11e6-b28d-7971060d1765","method":{"position":"org.apache.commons.collections4.CollectionUtils:871","type":"CtMethodImpl","sourcecode":"public static <C>boolean matchesAll(final java.lang.Iterable<C> input, final org.apache.commons.collections4.Predicate<? super C> predicate) {\n    if ((input != null) && (predicate != null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240069818/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (predicate == null) {\n                return false;\n            } \n            if (input != null) {\n                for (final C C : input) {\n                    if (!(predicate.evaluate(o))) {\n                        return false;\n                    } \n                }\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input","predicate":"predicate"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"}}
{"failureDictionary":{"org.apache.commons.collections4.map.ReferenceMapTest.testMapPutAll":379,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyContainsKey":442,"org.apache.commons.collections4.list.PredicatedListTest.testListIndexOf":498,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutAll":35,"org.apache.commons.collections4.map.LinkedMapTest.testMapPut":330,"org.apache.commons.collections4.map.HashedMapTest.testMapEquals":344,"org.apache.commons.collections4.map.LRUMapTest.testMapEquals":400,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testKeySetRemoveChangesMap":237,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionRemoveAll":558,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testCanonicalEmptyCollectionExists":145,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPut":191,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemoveAll":240,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testShadok":247,"org.apache.commons.collections4.PredicateUtilsTest.testOnePredicateEx2":419,"org.apache.commons.collections4.PredicateUtilsTest.testOnePredicateEx3":420,"org.apache.commons.collections4.PredicateUtilsTest.testOnePredicateEx4":54,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsKey":21,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray":475,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToString":505,"org.apache.commons.collections4.map.SingletonMapTest.testMapIsEmpty":93,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetRemoveAll":166,"org.apache.commons.collections4.map.ReferenceMapTest.testMapIsEmpty":372,"org.apache.commons.collections4.list.TreeListTest.testCollectionAddAll":451,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetRemoveChangesMap":81,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray2":463,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemove":473,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveAll":135,"org.apache.commons.collections4.list.PredicatedListTest.testListListIterator":486,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiTailMapContains":185,"org.apache.commons.collections4.map.ReferenceMapTest.testMapToString":377,"org.apache.commons.collections4.map.LRUMapTest.testInternalState_Buckets":415,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndexBoundsChecking":291,"org.apache.commons.collections4.map.LinkedMapTest.testMapToString":329,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRetainAll":134,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionAddAll":276,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsValue":387,"org.apache.commons.collections4.map.ReferenceMapTest.testValuesRemoveChangesMap":64,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPut":218,"org.apache.commons.collections4.comparators.BooleanComparatorTest.testStaticFactoryMethods":446,"org.apache.commons.collections4.CollectionUtilsTest.addAllForElements":562,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testSimpleSerialization":146,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRetainAll":543,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIsEmpty":257,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapToString":299,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapEquals":23,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionClear":519,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testFirstKey":114,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemove":214,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":155,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray2":503,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapRemove":76,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIsEmpty":469,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIterator":523,"org.apache.commons.collections4.map.SingletonMapTest.testFirstKey":89,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemoveChangesMap":323,"org.apache.commons.collections4.list.TreeListTest.testIterationOrderAfterAddAll":6,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMap":179,"org.apache.commons.collections4.map.LinkedMapTest.testMapRemove":332,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContains":468,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIsEmpty":522,"org.apache.commons.collections4.map.LRUMapTest.testMapGet":416,"org.apache.commons.collections4.map.Flat3MapTest.testMapIsEmpty":310,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesRemoveChangesMap":79,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsKey":30,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMapEntrySet":203,"org.apache.commons.collections4.comparators.BooleanComparatorTest.testReverseListSort":448,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAddAll":478,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetIteratorRemoveChangesMap":82,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testGetSetComparator":46,"org.apache.commons.collections4.map.HashedMapTest.testMapToString":345,"org.apache.commons.collections4.PredicateUtilsTest.testEitherPredicateEx":50,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIterator":264,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testUnmodifiable":112,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMakeMap":129,"org.apache.commons.collections4.ClosureUtilsTest.testInvokeClosure":437,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsKey":296,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove1":352,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove2":353,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapEquals":388,"org.apache.commons.collections4.map.SingletonMapTest.testMapSize":94,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove3":354,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIteratorRemove":540,"org.apache.commons.collections4.map.ReferenceMapTest.testNullHandling":57,"org.apache.commons.collections4.map.HashedMapTest.testMapContainsValue":343,"org.apache.commons.collections4.map.LinkedMapTest.testMapEquals":328,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToString":465,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearByHeadMap":209,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRemoveAll":272,"org.apache.commons.collections4.map.ReferenceMapTest.testMapContainsValue":375,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContains":536,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiRemove":229,"org.apache.commons.collections4.map.SingletonMapTest.testObjectEqualsSelf":105,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemoveChangesMap":285,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapToString":24,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemove":525,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveChangesMap":123,"org.apache.commons.collections4.map.HashedMapTest.testMapIsEmpty":340,"org.apache.commons.collections4.list.PredicatedListTest.testListHashCode":481,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove1":368,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToString":547,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemoveChangesMap":161,"org.apache.commons.collections4.map.SingletonMapTest.testEmptyMapCompatibility":101,"org.apache.commons.collections4.map.MultiValueMapTest.testKeyedIterator":426,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMap":206,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetIteratorRemoveChangesMap":71,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapRemove":140,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapIsEmpty":384,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove3":370,"org.apache.commons.collections4.map.SingletonMapTest.testSerializeDeserializeThenCompare":103,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove2":369,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIterator":281,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndexBoundsChecking2":497,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMapEntrySet":176,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToArray":263,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testPreviousKey":15,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByKeySet":215,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemove1":282,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemove3":284,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemove2":283,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionContainsAll":267,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains1":365,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains2":366,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains3":367,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiRemoveByKeySet":230,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRemoveAll":198,"org.apache.commons.collections4.map.ReferenceMapTest.testValuesIteratorRemoveChangesMap":65,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemove1":234,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemove2":235,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemove3":236,"org.apache.commons.collections4.set.PredicatedSetTest.testIllegalAddAll":459,"org.apache.commons.collections4.map.Flat3MapTest.testMapToString":315,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRemoveChangesMap":224,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testMinimal":245,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":42,"org.apache.commons.collections4.list.PredicatedListTest.testListLastIndexOf":499,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove2":63,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove3":383,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEmptyMapCompatibility":131,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove1":62,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testSerializeDeserializeThenCompare":548,"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":59,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetIteratorRemoveChangesMap":164,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapSize":357,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray2":546,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiRemoveByKeySet":152,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testFullBagCompatibility":533,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapIsEmpty":294,"org.apache.commons.collections4.list.TreeListTest.testCollectionRemoveAll":455,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":165,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiRemoveByEntrySet":153,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearBySubMap":205,"org.apache.commons.collections4.list.PredicatedListTest.testLegalAddAll":17,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapSize":295,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndex":483,"org.apache.commons.collections4.map.CompositeMapTest.testPutAll":43,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionSize":464,"org.apache.commons.collections4.list.TreeListTest.testInsertBefore":10,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapRemove":302,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemove":513,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsValue":297,"org.apache.commons.collections4.list.TreeListTest.testRemove":1,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapRemove":27,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetContains2":381,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetContains1":380,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAddAll":479,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemoveAll":526,"org.apache.commons.collections4.map.SingletonMapTest.testNextKey":91,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testCanonicalFullCollectionExists":143,"org.apache.commons.collections4.list.TreeListTest.testCollectionContains":452,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":40,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetContains3":382,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsKey":95,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove3":308,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testExecution":244,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove2":307,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapRemove":364,"org.apache.commons.collections4.CollectionUtilsTest.maxSize":444,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testMapEquals":47,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove1":306,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAddAll":511,"org.apache.commons.collections4.set.PredicatedSetTest.testSetHashCode":461,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetIteratorRemoveChangesMap":137,"org.apache.commons.collections4.map.HashedMapTest.testMapRemove":348,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPutAll":363,"org.apache.commons.collections4.list.PredicatedListTest.testFullListCompatibility":500,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapIsEmpty":28,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionClear":258,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains1":303,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsValue":22,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains2":304,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains3":305,"org.apache.commons.collections4.CollectionUtilsTest.forAllDoCollection":434,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutAll":26,"org.apache.commons.collections4.map.ListOrderedMap2Test.testPreviousKey":14,"org.apache.commons.collections4.map.SingletonMapTest.testEqualsNull":104,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":171,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testIllegalAddAll":457,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testKeySetRemoveChangesMap":222,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemoveAll":417,"org.apache.commons.collections4.map.LRUMapTest.testClone":413,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":232,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiHeadMapContains":181,"org.apache.commons.collections4.map.Flat3MapTest.testMapRemove":316,"org.apache.commons.collections4.CollectionUtilsTest.forAllDoIterator":432,"org.apache.commons.collections4.map.SingletonMapTest.testCanonicalEmptyCollectionExists":109,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapRemove":18,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testObjectHashCodeEqualsContract":147,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsKey":386,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":233,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemove1":156,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemove2":157,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemove3":158,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContainsAll":537,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemoveChangesMap":68,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToString":270,"org.apache.commons.collections4.list.TreeListTest.testCollectionIterator":454,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRetainAll":472,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testSerializeDeserializeThenCompare":149,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutAll":44,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":534,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":41,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRetainAll":260,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorNextRemovePrevious":493,"org.apache.commons.collections4.map.SingletonMapTest.testLastKey":90,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsValue":399,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":431,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRemoveAll":225,"org.apache.commons.collections4.map.SingletonMapTest.testMapHashCode":99,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemove":541,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":430,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRetainAll":512,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapHashCode":122,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContainsAll":521,"org.apache.commons.collections4.list.PredicatedListTest.testListGetByIndexBoundsChecking2":491,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemoveAll":84,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testKeySetRemoveChangesMap":159,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testKeySetIteratorRemoveChangesMap":238,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndex":292,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPutNullKey":130,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemove":440,"org.apache.commons.collections4.IteratorUtilsTest.testToList":425,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiTailMapContains":212,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndex":490,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList":290,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByEntrySet":189,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiHeadMapContains":208,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemoveChangesMap":411,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPut":300,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsValue":327,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetRemoveAll":172,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetIteratorRemoveChangesMap":227,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsKey":190,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testNullComparator":45,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRetainAll":141,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToString":531,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove3":410,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove2":409,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetRemoveChangesMap":66,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove1":408,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAddAll":458,"org.apache.commons.collections4.bag.PredicatedBagTest.testSerializeDeserializeThenCompare":532,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPutAll":136,"org.apache.commons.collections4.set.ListOrderedSetTest.testDecorator":423,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContains":520,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorNextRemoveNext":501,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":39,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiMapIteratorSet":213,"org.apache.commons.collections4.map.LinkedMapTest.testMapSize":325,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapClear":132,"org.apache.commons.collections4.list.TreeListTest.testIndexOf":2,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsValue":96,"org.apache.commons.collections4.functors.AllPredicateTest.nullCollectionToGetInstance":55,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetIteratorRemoveChangesMap":242,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemoveChangesMap":239,"org.apache.commons.collections4.CollectionUtilsTest.countMatches":412,"org.apache.commons.collections4.set.PredicatedSetTest.testSerializeDeserializeThenCompare":474,"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastValues":60,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testNullHandling":72,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":80,"org.apache.commons.collections4.ClosureUtilsTest.testWhileClosure":11,"org.apache.commons.collections4.map.SingletonMapTest.testMapPut":102,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIterator":476,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorByIndex":485,"org.apache.commons.collections4.list.TreeListTest.testBugCollections447":5,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapToString":389,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsKey":398,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray":545,"org.apache.commons.collections4.map.ReferenceMapTest.testMapRemove":61,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testLength":246,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPut":390,"org.apache.commons.collections4.list.TreeListTest.testListIteratorAdd":8,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRemoveAll":124,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIteratorRemove":466,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionSize":252,"org.apache.commons.collections4.comparators.BooleanComparatorTest.testRandomListSort":447,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMap":202,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPut":362,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionClear":275,"org.apache.commons.collections4.map.SingletonMapTest.testObjectHashCodeEqualsContract":106,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRemove1":192,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRemove2":193,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testFailFastEntrySet":73,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRemove3":194,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyPut":439,"org.apache.commons.collections4.comparators.BooleanComparatorTest.testConstructors":445,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapSize":385,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testNextKey":115,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRemove3":221,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRemove2":220,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionSize":269,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRemove1":219,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":542,"org.apache.commons.collections4.set.MapBackedSetTest.testSerializeDeserializeThenCompare":262,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray":515,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionContains":273,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionClear":510,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray2":530,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove3":338,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToString":253,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRemove":278,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove2":337,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemoveAll":507,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove1":336,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorAdd":487,"org.apache.commons.collections4.list.TreeListTest.testCollectionAdd":9,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemoveChangesMap":83,"org.apache.commons.collections4.map.LinkedMapTest.testMapPutAll":331,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapToString":33,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRetainAll":241,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testFailFastValues":75,"org.apache.commons.collections4.list.TreeListTest.testListAddByIndex":7,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiHeadMapContains":169,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIteratorRemove":254,"org.apache.commons.collections4.map.SingletonMapTest.testMapGet":98,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiRemove":151,"org.apache.commons.collections4.EnumerationUtilsTest.testToListWithHashtable":424,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemoveAll":162,"org.apache.commons.collections4.set.MapBackedSet2Test.testSetEquals":265,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionRetainAll":559,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEqualsNull":144,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndexBoundsChecking2":494,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testEqualsNull":48,"org.apache.commons.collections4.map.HashedMapTest.testMapPut":346,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiSubMapContains":168,"org.apache.commons.collections4.map.LRUMapTest.testMapSize":397,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testIllegalAddAll":477,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove1":320,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove2":321,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove3":322,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemoveChangesMap":371,"org.apache.commons.collections4.list.PredicatedListTest.testSerializeDeserializeThenCompare":514,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapEquals":360,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIsEmpty":509,"org.apache.commons.collections4.map.HashedMapTest.testMapContainsKey":342,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove1":77,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionContains":256,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRetainAll":226,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove2":78,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToArray2":268,"org.apache.commons.collections4.bag.PredicatedBagTest.testFullBagCompatibility":517,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove3":395,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapRemove":36,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPutAll":391,"org.apache.commons.collections4.comparators.BooleanComparatorTest.testComparatorCompatibility":449,"org.apache.commons.collections4.map.SingletonMapTest.testMakeMap":92,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapIsEmpty":19,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapSize":29,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemoveAll":69,"org.apache.commons.collections4.set.MapBackedSetTest.testSetEquals":248,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapIsEmpty":356,"org.apache.commons.collections4.map.LRUMapTest.testMapPutNullKey":428,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRetainAll":418,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemoveChangesMap":339,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByEntrySet":216,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapToString":361,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIteratorRemove":524,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsValue":313,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIsEmpty":538,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains1":116,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains3":118,"org.apache.commons.collections4.set.MapBackedSetTest.testSetHashCode":249,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains2":117,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testFullMapCompatibility":133,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiMapIteratorSet":186,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMapEntrySet":211,"org.apache.commons.collections4.map.LinkedMapTest.testMapIsEmpty":324,"org.apache.commons.collections4.map.Flat3MapTest.testMapEquals":314,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMapEntrySet":184,"org.apache.commons.collections4.map.SingletonMapTest.testMapToString":100,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIterator":539,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorPreviousRemoveNext":489,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiSubMapContains":177,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMapEntrySet":180,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMapEntrySet":207,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetContains2":334,"org.apache.commons.collections4.list.TreeListTest.testListIndexOf":450,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIterator":516,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetContains1":333,"org.apache.commons.collections4.map.ReferenceMapTest.testMapSize":373,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetContains3":335,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiRemoveByEntrySet":231,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemoveChangesMap":355,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToArray":280,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearByTailMap":201,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testObjectHashCodeEqualsSelfHashCode":148,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetRetainAll":167,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemove":187,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsKey":217,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError9":557,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToArray2":251,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError8":556,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testKeySetRemoveChangesMap":195,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":37,"org.apache.commons.collections4.list.PredicatedListTest.testListGetByIndex":480,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError5":553,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.initializationError":49,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError4":552,"org.apache.commons.collections4.CollectionUtilsTest.testRetainAll":443,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAddAll":518,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError7":555,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError6":554,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError1":549,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError3":551,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError2":550,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testKeySetIteratorRemoveChangesMap":196,"org.apache.commons.collections4.iterators.UnmodifiableMapIteratorTest.testFullMapIterator":243,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIteratorRemove":271,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorSet":488,"org.apache.commons.collections4.CollectionUtilsTest.isFull":561,"org.apache.commons.collections4.list.TreeListTest.testBug35258":4,"org.apache.commons.collections4.map.LRUMapTest.testMapPutAll":403,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorPreviousRemovePrevious":482,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRetainAll":121,"org.apache.commons.collections4.list.TreeListTest.testCollectionContainsAll":453,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesIteratorRemoveChangesMap":119,"org.apache.commons.collections4.map.ReferenceMapTest.testMapContainsKey":374,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionClear":470,"org.apache.commons.collections4.list.TreeListTest.testAddMultiple":3,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutAll":301,"org.apache.commons.collections4.map.HashedMapTest.testMapSize":341,"org.apache.commons.collections4.CollectionUtilsTest.forAllDoFailure":435,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains1":392,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains2":393,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains3":394,"org.apache.commons.collections4.set.PredicatedSetTest.testSetEquals":460,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetIteratorRemoveChangesMap":200,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll3":0,"org.apache.commons.collections4.list.TreeListTest.testCollectionToArray":456,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByKeySet":188,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionRemove":560,"org.apache.commons.collections4.map.LRUMapTest.testAccessOrder":414,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveChangesMap":309,"org.apache.commons.collections4.PredicateUtilsTest.testAllPredicateEx4":53,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":154,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemove3":288,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemove2":287,"org.apache.commons.collections4.list.PredicatedListTest.testListRemoveByIndexBoundsChecking2":496,"org.apache.commons.collections4.map.SingletonMapTest.testMapEquals":97,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetIteratorRemoveChangesMap":67,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPut":139,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemove1":286,"org.apache.commons.collections4.map.LRUMapTest.testMapIsEmpty":396,"org.apache.commons.collections4.ClosureUtilsTest.testTransformerClosure":438,"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastEntrySet":58,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContainsAll":462,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":38,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPut":25,"org.apache.commons.collections4.map.SingletonMapTest.testSimpleSerialization":108,"org.apache.commons.collections4.CollectionUtilsTest.filterInverseNullParameters":56,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiTailMapContains":170,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionSize":528,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPut":34,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRemoveChangesMap":197,"org.apache.commons.collections4.map.ReferenceMapTest.testMapEquals":376,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRetainAll":527,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveAll":128,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testFailFastKeySet":74,"org.apache.commons.collections4.map.LRUMapTest.testMapPutNullValue":429,"org.apache.commons.collections4.PredicateUtilsTest.testOnePredicate":422,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMap":175,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemove":261,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetContains2":318,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetContains3":319,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRetainAll":199,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testBasics":16,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetContains1":317,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsValue":31,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveChangesMap":127,"org.apache.commons.collections4.CollectionUtilsTest.forAllButLastDoCollection":433,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsKey":358,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMap":183,"org.apache.commons.collections4.list.PredicatedListTest.testFullListSerialization":492,"org.apache.commons.collections4.map.ReferenceMapTest.testMapPut":378,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionContainsAll":250,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetContains1":349,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetContains2":350,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsKey":312,"org.apache.commons.collections4.list.PredicatedListTest.testListRemoveByIndex":495,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearByHeadMap":182,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAddAll":471,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearByTailMap":174,"org.apache.commons.collections4.map.LRUMapTest.testMapPut":402,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testKeySetIteratorRemoveChangesMap":223,"org.apache.commons.collections4.map.ListOrderedMapTest.testPreviousKey":13,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndexBoundsChecking2":293,"org.apache.commons.collections4.map.LRUMapTest.testLRU":427,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapEquals":32,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPutNullValue":126,"org.apache.commons.collections4.CollectionUtilsTest.forAllButLastDoIterator":436,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsValue":359,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testObjectEqualsSelf":142,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearBySubMap":178,"org.apache.commons.collections4.map.Flat3MapTest.testMapSize":311,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testLastKey":113,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContainsAll":502,"org.apache.commons.collections4.map.HashedMapTest.testMapPutAll":347,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionSize":504,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRetainAll":70,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRetainAll":163,"org.apache.commons.collections4.map.SingletonMapTest.testPreviousKey":12,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRetainAll":277,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray":529,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIsEmpty":274,"org.apache.commons.collections4.map.SingletonMapTest.testObjectHashCodeEqualsSelfHashCode":107,"org.apache.commons.collections4.map.SingletonMapTest.testCanonicalFullCollectionExists":110,"org.apache.commons.collections4.PredicateUtilsTest.testAnyPredicateEx4":51,"org.apache.commons.collections4.ListUtilsTest.testLongestCommonSubsequenceWithString":88,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionAddAll":259,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapSize":20,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testDecorateFactory":111,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRemoveChangesMap":120,"org.apache.commons.collections4.ListUtilsTest.testLongestCommonSubsequence":87,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRetainAll":85,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains3":407,"org.apache.commons.collections4.PredicateUtilsTest.testEitherPredicate":421,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContains":508,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetRetainAll":173,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":228,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiSubMapContains":204,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMap":210,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains1":405,"org.apache.commons.collections4.map.MultiKeyMapTest.testLRUMultiKeyMap":441,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains2":406,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIteratorRemove":506,"org.apache.commons.collections4.PredicateUtilsTest.testNonePredicateEx4":52,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testKeySetIteratorRemoveChangesMap":160,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionSize":544,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetContains3":351,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemoveAll":467,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsKey":326,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetIteratorRemoveChangesMap":125,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemoveAll":255,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapEquals":298,"org.apache.commons.collections4.map.LRUMapTest.testMapRemove":404,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":150,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionClear":535,"org.apache.commons.collections4.list.PredicatedListTest.testListEquals":484,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetIteratorRemoveChangesMap":86,"org.apache.commons.collections4.set.MapBackedSet2Test.testSerializeDeserializeThenCompare":279,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemoveChangesMap":289,"org.apache.commons.collections4.map.LRUMapTest.testMapToString":401,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapGet":138,"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":266},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024bd12f-3f2d-11e6-a6dd-01152b23a6f9","method":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:108","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll instanceof org.apache.commons.collections4.collection.SynchronizedCollection) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            final java.util.Iterator<? extends E> java.util.Iterator<? extends E> = coll.iterator();\n            while (i.hasNext()) {\n                final boolean boolean = add(i.next(), 1);\n                changed = changed || added;\n            }\n            return changed;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:665","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"024c4660-3f2d-11e6-a6dd-e31526f3f203","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:764","type":"CtMethodImpl","sourcecode":"public boolean removeAll(final java.lang.Object key1, final java.lang.Object key2, final java.lang.Object key3) {\n    if (key3 != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            final org.apache.commons.collections4.MapIterator<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.MapIterator<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = mapIterator();\n            while (it.hasNext()) {\n                final org.apache.commons.collections4.keyvalue.MultiKey<? extends K> org.apache.commons.collections4.keyvalue.MultiKey<? extends K> = it.next();\n                if (((((multi.size()) >= 3) && (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))) && (key2 == null ? (multi.getKey(1)) == null : key2.equals(multi.getKey(1)))) && (key3 == null ? (multi.getKey(2)) == null : key3.equals(multi.getKey(2)))) {\n                    it.remove();\n                    modified = true;\n                } \n            }\n            return modified;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key3":"key3"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1017","type":"CtBinaryOperatorImpl"},"failures":[1,2,3,4,5,6,7,8,9],"tindex":"024c4661-3f2d-11e6-a6dd-dfee16746cac","method":{"position":"org.apache.commons.collections4.list.TreeList:493","type":"CtMethodImpl","sourcecode":"org.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n    if (index == 0) {\n        {\n            final int int = index - (int);\n            if (indexRelativeToMe <= 0) {\n                return insertOnLeft(indexRelativeToMe, obj);\n            } \n            return insertOnRight(indexRelativeToMe, obj);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lengthInBits":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:441","type":"CtBinaryOperatorImpl"},"failures":[1,3,10,7,8],"tindex":"024c4662-3f2d-11e6-a6dd-315a1191eafe","method":{"position":"org.apache.commons.collections4.list.TreeList:502","type":"CtMethodImpl","sourcecode":"private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isNullBitKey(indexRelativeToMe)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (indexRelativeToMe == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((getLeftSubTree()) == null) {\n                        setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>((-1) , obj , org.apache.commons.collections4.list.TreeList.AVLNode.this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n                    } else {\n                        setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(indexRelativeToMe, obj), null);\n                    }\n                    if ((int) >= 0) {\n                        (int)++;\n                    } \n                    final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = balance();\n                    recalcHeight();\n                    return ret;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"indexRelativeToMe"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.SetUtils:117","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024c6d73-3f2d-11e6-a6dd-dfb8ae52e72f","method":{"position":"org.apache.commons.collections4.collection.CompositeCollection:292","type":"CtMethodImpl","sourcecode":"public boolean removeAll(final java.util.Collection<?> coll) {\n    if (coll == coll) {\n        {\n            if ((coll.size()) == 0) {\n                return false;\n            } \n            boolean boolean = false;\n            for (final java.util.Collection<E> java.util.Collection<E> : java.util.List<java.util.Collection<E>>) {\n                changed |= item.removeAll(coll);\n            }\n            return changed;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set2":"coll","set1":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ArrayStack:157","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024c6d74-3f2d-11e6-a6dd-497363e48383","method":{"position":"org.apache.commons.collections4.map.MultiValueMap:235","type":"CtMethodImpl","sourcecode":"@java.lang.Override\n@java.lang.SuppressWarnings(value = \"unchecked\")\npublic boolean containsValue(final java.lang.Object value) {\n    if (((value == null) && (value == null)) || ((object != null) && (object.equals(current)))) {\n        {\n            final java.util.Set<java.util.Map.Entry<K, java.lang.Object>> java.util.Set<java.util.Map.Entry<K, java.lang.Object>> = decorated().entrySet();\n            if (pairs != null) {\n                for (final java.util.Map.Entry<K, java.lang.Object> java.util.Map.Entry<K, java.lang.Object> : pairs) {\n                    if (((java.util.Collection<V>)(entry.getValue())).contains(value)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"current":"value","object":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1037","type":"CtInvocationImpl"},"failures":[],"tindex":"024c9485-3f2d-11e6-a6dd-07892176d67d","method":{"position":"org.apache.commons.collections4.bag.UnmodifiableSortedBag:140","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean add(final E object, final int count) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey(count)) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.WhileClosure:58","type":"CtBinaryOperatorImpl"},"failures":[11],"tindex":"024c9486-3f2d-11e6-a6dd-cf9fe40249ee","method":{"position":"org.apache.commons.collections4.ClosureUtils:129","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.Closure<E> whileClosure(final org.apache.commons.collections4.Predicate<? super E> predicate, final org.apache.commons.collections4.Closure<? super E> closure) {\n    if (closure == null) {\n        {\n            return org.apache.commons.collections4.functors.WhileClosure.<E>whileClosure(predicate, closure, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"closure":"closure"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:230","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024c9487-3f2d-11e6-a6dd-037e946b04d2","method":{"position":"org.apache.commons.collections4.bag.PredicatedBag:92","type":"CtMethodImpl","sourcecode":"public boolean add(final E object, final int count) {\n    if ((((count % 2) == 0) && ((-count) <= count)) && (k <= d)) {\n        {\n            validate(object);\n            return decorated().add(object, count);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"count","delta":"count","k":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:979","type":"CtInvocationImpl"},"failures":[],"tindex":"024c9488-3f2d-11e6-a6dd-75bafbc7267a","method":{"position":"org.apache.commons.collections4.list.TreeList:502","type":"CtMethodImpl","sourcecode":"private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isNullBitKey(indexRelativeToMe)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (indexRelativeToMe == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((getLeftSubTree()) == null) {\n                        setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>((-1) , obj , org.apache.commons.collections4.list.TreeList.AVLNode.this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n                    } else {\n                        setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(indexRelativeToMe, obj), null);\n                    }\n                    if ((int) >= 0) {\n                        (int)++;\n                    } \n                    final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = balance();\n                    recalcHeight();\n                    return ret;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"indexRelativeToMe"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.CaseInsensitiveMap:124","type":"CtBinaryOperatorImpl"},"failures":[12,13,14,15],"tindex":"024cbb99-3f2d-11e6-a6dd-b5489c6ec9b5","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:208","type":"CtMethodImpl","sourcecode":"public K previousKey(final java.lang.Object key) {\n    if (key != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = java.util.List<K>.indexOf(key);\n            if (index > 0) {\n                return java.util.List<K>.get((index - 1));\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1078","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"024cbb9a-3f2d-11e6-a6dd-333e7d366d2b","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1240","type":"CtMethodImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> nextEntryInSubtree(final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> node, final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> parentOfSubtree) {\n    if (!(parentOfSubtree.isEmpty())) {\n        {\n            if (node == null) {\n                return firstEntry();\n            } else {\n                return nextEntryImpl(node.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, node, parentOfSubtree);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"parentOfSubtree"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:160","type":"CtBinaryOperatorImpl"},"failures":[16],"tindex":"024cbb9b-3f2d-11e6-a6dd-1f33a6b09585","method":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(final java.lang.Object key) {\n    if (key instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            purgeBeforeRead();\n            final java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> = getEntry(key);\n            if (entry == null) {\n                return false;\n            } \n            return (entry.getValue()) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1784","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024ce2ac-3f2d-11e6-a6dd-b5eabd2e1f9c","method":{"position":"org.apache.commons.collections4.collection.TransformedCollection:61","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.collection.TransformedCollection<E> transformingCollection(final java.util.Collection<E> coll, final org.apache.commons.collections4.Transformer<? super E, ? extends E> transformer) {\n    if ((coll == null) || ((collection.size()) != 1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.collections4.collection.TransformedCollection<E>(coll , transformer);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collection":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:548","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024ce2ad-3f2d-11e6-a6dd-5342f9689f4b","method":{"position":"org.apache.commons.collections4.collection.IndexedCollection:147","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic boolean contains(final java.lang.Object object) {\n    if (object == null) {\n        {\n            if (object == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.collections4.MultiMap<K, C>.containsKey(org.apache.commons.collections4.Transformer<C, K>.transform(((C)(object))));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1334","type":"CtBinaryOperatorImpl"},"failures":[17],"tindex":"024ce2ae-3f2d-11e6-a6dd-13dc791715ad","method":{"position":"org.apache.commons.collections4.list.PredicatedList:117","type":"CtMethodImpl","sourcecode":"public boolean addAll(final int index, final java.util.Collection<? extends E> coll) {\n    if (index > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final E E : coll) {\n                validate(aColl);\n            }\n            return decorated().addAll(index, coll);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nodeCount":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:804","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024ce2af-3f2d-11e6-a6dd-d950ad83d4d6","method":{"position":"org.apache.commons.collections4.MapUtils:506","type":"CtMethodImpl","sourcecode":"public static <K>java.lang.Long getLong(final java.util.Map<? super K, ?> map, final K key, final java.lang.Long defaultValue) {\n    if (defaultValue == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Long java.lang.Long = org.apache.commons.collections4.MapUtils.getLong(map, key);\n            if (answer == null) {\n                answer = defaultValue;\n            } \n            return answer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longObject":"defaultValue"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.SetUtils:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024ce2b0-3f2d-11e6-a6dd-0b6e10bd74dd","method":{"position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:346","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean removeAll(final java.util.Collection<?> coll) {\n    if (((coll == null) || (coll == null)) || ((set1.size()) != (set2.size()))) {\n        {\n            if ((org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V>.isEmpty()) || (coll.isEmpty())) {\n                return false;\n            } \n            boolean boolean = false;\n            final java.util.Iterator<?> java.util.Iterator<?> = coll.iterator();\n            while (it.hasNext()) {\n                modified |= remove(it.next());\n            }\n            return modified;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set2":"coll","set1":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:973","type":"CtBinaryOperatorImpl"},"failures":[18],"tindex":"024d09c1-3f2d-11e6-a6dd-bd5bc12d694c","method":{"position":"org.apache.commons.collections4.map.FixedSizeMap:139","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(final java.lang.Object key) {\n    if (key != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException(\"Map is fixed size\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"label":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.TransformingComparator:118","type":"CtBinaryOperatorImpl"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"tindex":"024d09c2-3f2d-11e6-a6dd-8b219f677e08","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:568","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.Object value) {\n    if (null == value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.map.ListOrderedMap.KeySetView.this.org.apache.commons.collections4.map.ListOrderedMap<K, java.lang.Object>.containsKey(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.UnmodifiableMap:63","type":"CtBinaryOperatorImpl"},"failures":[43,44],"tindex":"024d09c3-3f2d-11e6-a6dd-fded4b1b244d","method":{"position":"org.apache.commons.collections4.map.CompositeMap:381","type":"CtMethodImpl","sourcecode":"public void putAll(final java.util.Map<? extends K, ? extends V> map) {\n    if (map.isEmpty()) {\n        {\n            if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n                {\n                    if ((org.apache.commons.collections4.map.CompositeMap.this.org.apache.commons.collections4.map.CompositeMap.MapMutator<K, V>) == null) {\n                        throw new java.lang.UnsupportedOperationException(\"No mutator specified\");\n                    } \n                    org.apache.commons.collections4.map.CompositeMap.this.org.apache.commons.collections4.map.CompositeMap.MapMutator<K, V>.putAll(org.apache.commons.collections4.map.CompositeMap.this, org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[], map);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:217","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024d09c4-3f2d-11e6-a6dd-4deb6f627372","method":{"position":"org.apache.commons.collections4.map.MultiValueMap:429","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected java.util.Iterator<? extends java.util.Map.Entry<K, V>> nextIterator(int count) {\n    if (count > 0) {\n        {\n            if (!(keyIterator.hasNext())) {\n                return null;\n            } \n            final K K = keyIterator.next();\n            final org.apache.commons.collections4.Transformer<V, java.util.Map.Entry<K, V>> org.apache.commons.collections4.Transformer<V, java.util.Map.Entry<K, V>> = new org.apache.commons.collections4.Transformer<V, java.util.Map.Entry<K, V>>() {\n                public java.util.Map.Entry<K, V> transform(final V input) {\n                    return new java.util.Map.Entry<K, V>() {\n                        public K getKey() {\n                            return key;\n                        }\n\n                        public V getValue() {\n                            return input;\n                        }\n\n                        public V setValue(V value) {\n                            throw new java.lang.UnsupportedOperationException();\n                        }\n                    };\n                }\n            };\n            return new org.apache.commons.collections4.iterators.TransformIterator<V, java.util.Map.Entry<K, V>>(new ValuesIterator(key) , transformer);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.FixedOrderComparator:283","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024d30d5-3f2d-11e6-a6dd-cdf6e270b61e","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:645","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (null == obj) {\n        {\n            if (obj == (org.apache.commons.collections4.map.ListOrderedMap.EntrySetView.this)) {\n                return true;\n            } \n            return getEntrySet().equals(obj);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.CollatingIterator:365","type":"CtBinaryOperatorImpl"},"failures":[45,46],"tindex":"024d30d6-3f2d-11e6-a6dd-259e162e1a32","method":{"position":"org.apache.commons.collections4.iterators.CollatingIterator:224","type":"CtMethodImpl","sourcecode":"public void setComparator(final java.util.Comparator<? super E> comp) {\n    if (comp == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            checkNotStarted();\n            java.util.Comparator<? super E> = comp;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparator":"comp"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:985","type":"CtInvocationImpl"},"failures":[],"tindex":"024d30d7-3f2d-11e6-a6dd-af695abc4be5","method":{"position":"org.apache.commons.collections4.map.LRUMap:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void addMapping(final int hashIndex, final int hashCode, final K key, final V value) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(hashCode)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey(hashIndex)) {\n                {\n                    if (isFull()) {\n                        org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                        boolean boolean = false;\n                        if (boolean) {\n                            while ((reuse != (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) && (reuse != null)) {\n                                if (removeLRU(reuse)) {\n                                    removeLRUEntry = true;\n                                    break;\n                                } \n                                reuse = reuse.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                            }\n                            if (reuse == null) {\n                                throw new java.lang.IllegalStateException((((((((((((((\"Entry.after=null, header.after\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\") + key) + \" value=\") + value) + \" size=\") + (int)) + \" maxSize=\") + (int)) + \" Please check that your keys are immutable, and that you have used synchronization properly.\") + \" If so, then please report this to dev@commons.apache.org as a bug.\"));\n                            } \n                        } else {\n                            removeLRUEntry = removeLRU(reuse);\n                        }\n                        if (removeLRUEntry) {\n                            if (reuse == null) {\n                                throw new java.lang.IllegalStateException((((((((((((((\"reuse=null, header.after=\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\") + key) + \" value=\") + value) + \" size=\") + (int)) + \" maxSize=\") + (int)) + \" Please check that your keys are immutable, and that you have used synchronization properly.\") + \" If so, then please report this to dev@commons.apache.org as a bug.\"));\n                            } \n                            reuseMapping(reuse, hashIndex, hashCode, key, value);\n                        } else {\n                            super.addMapping(hashIndex, hashCode, key, value);\n                        }\n                    } else {\n                        super.addMapping(hashIndex, hashCode, key, value);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"hashIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:916","type":"CtInvocationImpl"},"failures":[],"tindex":"024d57e8-3f2d-11e6-a6dd-6f449324aa87","method":{"position":"org.apache.commons.collections4.list.PredicatedList:106","type":"CtMethodImpl","sourcecode":"public E remove(final int index) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isNullBitKey(index)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return decorated().remove(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:888","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024d57e9-3f2d-11e6-a6dd-ed7e76ec0abd","method":{"position":"org.apache.commons.collections4.list.UnmodifiableList:133","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic E remove(final int index) {\n    if (index == 0) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lengthInBits":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.TransformedMap:198","type":"CtInvocationImpl"},"failures":[],"tindex":"024d57ea-3f2d-11e6-a6dd-6fefb5fda3cb","method":{"position":"org.apache.commons.collections4.map.CompositeMap:381","type":"CtMethodImpl","sourcecode":"public void putAll(final java.util.Map<? extends K, ? extends V> map) {\n    if (map.isEmpty()) {\n        {\n            if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n                {\n                    if ((org.apache.commons.collections4.map.CompositeMap.this.org.apache.commons.collections4.map.CompositeMap.MapMutator<K, V>) == null) {\n                        throw new java.lang.UnsupportedOperationException(\"No mutator specified\");\n                    } \n                    org.apache.commons.collections4.map.CompositeMap.this.org.apache.commons.collections4.map.CompositeMap.MapMutator<K, V>.putAll(org.apache.commons.collections4.map.CompositeMap.this, org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[], map);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1326","type":"CtBinaryOperatorImpl"},"failures":[47,48],"tindex":"024d57eb-3f2d-11e6-a6dd-851c6a7db5e6","method":{"position":"org.apache.commons.collections4.trie.UnmodifiableTrie:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if ((obj instanceof java.util.Map) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.Trie<K, V>.equals(obj);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMap:58","type":"CtBinaryOperatorImpl"},"failures":[49],"tindex":"024d57ec-3f2d-11e6-a6dd-f3ed419740b3","method":{"position":"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMap:57","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.SortedBidiMap<K, V> unmodifiableSortedBidiMap(final org.apache.commons.collections4.SortedBidiMap<K, ? extends V> map) {\n    if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final org.apache.commons.collections4.SortedBidiMap<K, V> org.apache.commons.collections4.SortedBidiMap<K, V> = ((org.apache.commons.collections4.SortedBidiMap<K, V>)(map));\n                return tmpMap;\n            } \n            return new org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMap<K, V>(map);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.ListOrderedMap:359","type":"CtInvocationImpl"},"failures":[],"tindex":"024d7efd-3f2d-11e6-a6dd-c7fe7584c1c6","method":{"position":"org.apache.commons.collections4.MapUtils:1756","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.IterableMap<K, V> iterableMap(final java.util.Map<K, V> map) {\n    if (map == null) {\n        throw new java.lang.IllegalArgumentException(\"Map must not be null\");\n    } \n    return map instanceof org.apache.commons.collections4.IterableMap ? ((org.apache.commons.collections4.IterableMap<K, V>)(map)) : new org.apache.commons.collections4.map.AbstractMapDecorator<K, V>(map) {    };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024d7efe-3f2d-11e6-a6dd-878c05292f2d","method":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:251","type":"CtMethodImpl","sourcecode":"public boolean add(final E object, final int nCopies) {\n    if (nCopies < (nCopies / 2)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            (int)++;\n            if (nCopies > 0) {\n                final org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger = java.util.Map<E, org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger>.get(object);\n                int += nCopies;\n                if (mut == null) {\n                    java.util.Map<E, org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger>.put(object, new org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger(nCopies));\n                    return true;\n                } \n                mut.int += nCopies;\n                return false;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"nCopies","index":"nCopies"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.UnmodifiableList:55","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024d7eff-3f2d-11e6-a6dd-f740400304da","method":{"position":"org.apache.commons.collections4.ListUtils:162","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> union(final java.util.List<? extends E> list1, final java.util.List<? extends E> list2) {\n    if (list1 instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            final java.util.ArrayList<E> java.util.ArrayList<E> = new java.util.ArrayList<E>(list1);\n            result.addAll(list2);\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"list1"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.PredicateTransformer:48","type":"CtBinaryOperatorImpl"},"failures":[50],"tindex":"024d7f00-3f2d-11e6-a6dd-230da5a6c93a","method":{"position":"org.apache.commons.collections4.PredicateUtils:352","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> eitherPredicate(final org.apache.commons.collections4.Predicate<? super T> predicate1, final org.apache.commons.collections4.Predicate<? super T> predicate2) {\n    if (predicate2 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            @java.lang.SuppressWarnings(value = \"unchecked\")\n            final org.apache.commons.collections4.Predicate<T> org.apache.commons.collections4.Predicate<T> = org.apache.commons.collections4.PredicateUtils.<T>onePredicate(predicate1, predicate2);\n            return onePredicate;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:97","type":"CtBinaryOperatorImpl"},"failures":[51,52,53,54,55],"tindex":"024d7f01-3f2d-11e6-a6dd-41cbee442e83","method":{"position":"org.apache.commons.collections4.functors.FunctorUtils:96","type":"CtMethodImpl","sourcecode":"static <T>org.apache.commons.collections4.Predicate<T>[] validate(final java.util.Collection<? extends org.apache.commons.collections4.Predicate<T>> predicates) {\n    if (predicates == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (predicates == null) {\n                throw new java.lang.IllegalArgumentException(\"The predicate collection must not be null\");\n            } \n            @java.lang.SuppressWarnings(value = \"unchecked\")\n            final org.apache.commons.collections4.Predicate<T>[] org.apache.commons.collections4.Predicate<T>[] = new org.apache.commons.collections4.Predicate[predicates.size()];\n            int int = 0;\n            for (final org.apache.commons.collections4.Predicate<T> org.apache.commons.collections4.Predicate<T> : predicates) {\n                preds[i] = predicate;\n                if ((preds[i]) == null) {\n                    throw new java.lang.IllegalArgumentException(((\"The predicate collection must not contain a null predicate, index \" + i) + \" was null\"));\n                } \n                i++;\n            }\n            return preds;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicates":"predicates"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.NullIsExceptionPredicate:47","type":"CtBinaryOperatorImpl"},"failures":[56],"tindex":"024da612-3f2d-11e6-a6dd-2d00915befb1","method":{"position":"org.apache.commons.collections4.CollectionUtils:774","type":"CtMethodImpl","sourcecode":"public static <T>boolean filterInverse(final java.lang.Iterable<T> collection, final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if (predicate == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.CollectionUtils.filter(collection, (predicate == null ? null : org.apache.commons.collections4.PredicateUtils.notPredicate(predicate)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:291","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024da613-3f2d-11e6-a6dd-7f41deed2088","method":{"position":"org.apache.commons.collections4.map.CompositeMap:156","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic synchronized java.util.Map<K, V> removeComposited(final java.util.Map<K, V> map) {\n    if (map != null) {\n        {\n            final int int = org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[].int;\n            for (int int = 0 ; i < size ; ++i) {\n                if (org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[][i].equals(map)) {\n                    final java.util.Map<K, V>[] java.util.Map<K, V>[] = new java.util.Map[size - 1];\n                    java.lang.System.arraycopy(org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[], 0, temp, 0, i);\n                    java.lang.System.arraycopy(org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[], (i + 1), temp, i, ((size - i) - 1));\n                    org.apache.commons.collections4.map.CompositeMap.this.java.util.Map<K, V>[] = temp;\n                    return map;\n                } \n            }\n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delegateMap":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1340","type":"CtBinaryOperatorImpl"},"failures":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"tindex":"024da614-3f2d-11e6-a6dd-05940ecc5adf","method":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:281","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(final java.lang.Object key) {\n    if (key instanceof java.util.Iterator<?>) {\n        {\n            if (key == null) {\n                return null;\n            } \n            purgeBeforeWrite();\n            return super.remove(key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.InvokerTransformer:72","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024da615-3f2d-11e6-a6dd-d7a22397ef10","method":{"position":"org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer:51","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int lengthInBits(final java.lang.String key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return key != null ? (key.length()) * (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int) : 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"methodName":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:331","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024da616-3f2d-11e6-a6dd-03a80fb3de0c","method":{"position":"org.apache.commons.collections4.list.CursorableLinkedList:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void addNode(final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> nodeToInsert, final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> insertBeforeNode) {\n    if (insertBeforeNode == insertBeforeNode) {\n        {\n            super.addNode(nodeToInsert, insertBeforeNode);\n            broadcastNodeInserted(nodeToInsert);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"insertBeforeNode","header":"insertBeforeNode"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.LoopingListIterator:140","type":"CtInvocationImpl"},"failures":[87,88],"tindex":"024dcd27-3f2d-11e6-a6dd-530c91894d66","method":{"position":"org.apache.commons.collections4.ListUtils:546","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> longestCommonSubsequence(final java.util.List<E> a, final java.util.List<E> b, final org.apache.commons.collections4.Equator<? super E> equator) {\n    if (b.isEmpty()) {\n        {\n            if ((a == null) || (b == null)) {\n                throw new java.lang.IllegalArgumentException(\"List must not be null\");\n            } \n            if (equator == null) {\n                throw new java.lang.IllegalArgumentException(\"Equator must not be null\");\n            } \n            final org.apache.commons.collections4.sequence.SequencesComparator<E> org.apache.commons.collections4.sequence.SequencesComparator<E> = new org.apache.commons.collections4.sequence.SequencesComparator<E>(a , b , equator);\n            final org.apache.commons.collections4.sequence.EditScript<E> org.apache.commons.collections4.sequence.EditScript<E> = comparator.getScript();\n            final org.apache.commons.collections4.ListUtils.LcsVisitor<E> org.apache.commons.collections4.ListUtils.LcsVisitor<E> = new org.apache.commons.collections4.ListUtils.LcsVisitor<E>();\n            script.visit(visitor);\n            return visitor.getSubSequence();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap:57","type":"CtBinaryOperatorImpl"},"failures":[89,90,91,12,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,15,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,37,128,129,38,130,131,132,133,39,40,134,41,135,136,137,138,139,140,42,141,142,143,144,145,146,147,148,149],"tindex":"024dcd28-3f2d-11e6-a6dd-9d93ea970b54","method":{"position":"org.apache.commons.collections4.map.UnmodifiableOrderedMap:60","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.OrderedMap<K, V> unmodifiableOrderedMap(final org.apache.commons.collections4.OrderedMap<? extends K, ? extends V> map) {\n    if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final org.apache.commons.collections4.OrderedMap<K, V> org.apache.commons.collections4.OrderedMap<K, V> = ((org.apache.commons.collections4.OrderedMap<K, V>)(map));\n                return tmpMap;\n            } \n            return new org.apache.commons.collections4.map.UnmodifiableOrderedMap<K, V>(map);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.ReverseComparator:113","type":"CtBinaryOperatorImpl"},"failures":[150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243],"tindex":"024dcd29-3f2d-11e6-a6dd-0d22e993933c","method":{"position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:146","type":"CtMethodImpl","sourcecode":"public boolean containsKey(final java.lang.Object key) {\n    if (null == key) {\n        {\n            return java.util.Map<K, V>.containsKey(key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ArrayStack:122","type":"CtBinaryOperatorImpl"},"failures":[244,245,246,247,87,88],"tindex":"024df43a-3f2d-11e6-a6dd-3dab4f902ced","method":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:252","type":"CtMethodImpl","sourcecode":"private void buildScript(final int start1, final int end1, final int start2, final int end2, final org.apache.commons.collections4.sequence.EditScript<T> script) {\n    if (end1 <= 0) {\n        {\n            final org.apache.commons.collections4.sequence.SequencesComparator.Snake org.apache.commons.collections4.sequence.SequencesComparator.Snake = getMiddleSnake(start1, end1, start2, end2);\n            if (((middle == null) || (((middle.getStart()) == end1) && ((middle.getDiag()) == (end1 - end2)))) || (((middle.getEnd()) == start1) && ((middle.getDiag()) == (start1 - start2)))) {\n                int int = start1;\n                int int = start2;\n                while ((i < end1) || (j < end2)) {\n                    if (((i < end1) && (j < end2)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(i), java.util.List<T>.get(j)))) {\n                        script.append(new org.apache.commons.collections4.sequence.KeepCommand<T>(java.util.List<T>.get(i)));\n                        ++i;\n                        ++j;\n                    } else {\n                        if ((end1 - start1) > (end2 - start2)) {\n                            script.append(new org.apache.commons.collections4.sequence.DeleteCommand<T>(java.util.List<T>.get(i)));\n                            ++i;\n                        } else {\n                            script.append(new org.apache.commons.collections4.sequence.InsertCommand<T>(java.util.List<T>.get(j)));\n                            ++j;\n                        }\n                    }\n                }\n            } else {\n                buildScript(start1, middle.getStart(), start2, ((middle.getStart()) - (middle.getDiag())), script);\n                for (int int = middle.getStart() ; i < (middle.getEnd()) ; ++i) {\n                    script.append(new org.apache.commons.collections4.sequence.KeepCommand<T>(java.util.List<T>.get(i)));\n                }\n                buildScript(middle.getEnd(), end1, ((middle.getEnd()) - (middle.getDiag())), end2, script);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"end1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:94","type":"CtBinaryOperatorImpl"},"failures":[248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281],"tindex":"024df43b-3f2d-11e6-a6dd-65715c90af85","method":{"position":"org.apache.commons.collections4.set.MapBackedSet:122","type":"CtMethodImpl","sourcecode":"public boolean addAll(final java.util.Collection<? extends E> coll) {\n    if ((coll.size()) > (coll.size())) {\n        {\n            final int int = java.util.Map<E, ? super V>.size();\n            for (final E E : coll) {\n                java.util.Map<E, ? super V>.put(e, V);\n            }\n            return (java.util.Map<E, ? super V>.size()) != size;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list1":"coll","list2":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1383","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024df43c-3f2d-11e6-a6dd-7763f58be83f","method":{"position":"org.apache.commons.collections4.set.ListOrderedSet:285","type":"CtMethodImpl","sourcecode":"public int indexOf(final java.lang.Object object) {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<E>.indexOf(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.CollatingIterator:269","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024df43d-3f2d-11e6-a6dd-575f304ea5cf","method":{"position":"org.apache.commons.collections4.set.ListOrderedSet:344","type":"CtMethodImpl","sourcecode":"public java.lang.Object remove(final int index) {\n    if (index == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.Object java.lang.Object = java.util.List<E>.remove(index);\n            remove(obj);\n            return obj;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lastReturned":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:558","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024df43e-3f2d-11e6-a6dd-cd01475321dc","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:758","type":"CtMethodImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> followLeft(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> node) {\n    if (node == node) {\n        {\n            while (true) {\n                org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = node.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                if (child.isEmpty()) {\n                    child = node.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                } \n                if ((child.int) <= (node.int)) {\n                    return child;\n                } \n                node = child;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"node","parent":"node","left":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.ListIteratorWrapper:212","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024e1b4f-3f2d-11e6-a6dd-ab280ffd4d97","method":{"position":"org.apache.commons.collections4.list.NodeCachingLinkedList:113","type":"CtMethodImpl","sourcecode":"protected void setMaximumCacheSize(final int maximumCacheSize) {\n    if (maximumCacheSize == maximumCacheSize) {\n        {\n            org.apache.commons.collections4.list.NodeCachingLinkedList.this.int = maximumCacheSize;\n            shrinkCacheToMaximumSize();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"wrappedIteratorIndex":"maximumCacheSize","currentIndex":"maximumCacheSize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.NodeListIterator:73","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024e1b50-3f2d-11e6-a6dd-53424b3183ea","method":{"position":"org.apache.commons.collections4.bag.TransformedBag:119","type":"CtMethodImpl","sourcecode":"public boolean remove(final java.lang.Object object, final int nCopies) {\n    if ((object != null) && (nCopies < (org.w3c.dom.NodeList.getLength()))) {\n        {\n            return getBag().remove(object, nCopies);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"nCopies","nodeList":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:221","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024e1b51-3f2d-11e6-a6dd-a7e8b396b62a","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2215","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected boolean inToRange(final K key, final boolean forceInclusive) {\n    if (forceInclusive == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return getKeyAnalyzer().isPrefix(K, int, int, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"hasNext":"forceInclusive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.SetUtils:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024e1b52-3f2d-11e6-a6dd-c13d9fa2567e","method":{"position":"org.apache.commons.collections4.set.UnmodifiableSet:105","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean retainAll(final java.util.Collection<?> coll) {\n    if (((coll == null) || (coll == null)) || ((set1.size()) != (set2.size()))) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set2":"coll","set1":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.keyvalue.AbstractMapEntry:69","type":"CtBinaryOperatorImpl"},"failures":[282,283,284,285,286,287,288,289],"tindex":"024e1b53-3f2d-11e6-a6dd-b7b166e83769","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:627","type":"CtMethodImpl","sourcecode":"@java.lang.Override\n@java.lang.SuppressWarnings(value = \"unchecked\")\npublic boolean remove(final java.lang.Object obj) {\n    if ((obj instanceof java.util.Map.Entry) == false) {\n        {\n            if ((obj instanceof java.util.Map.Entry) == false) {\n                return false;\n            } \n            if (getEntrySet().contains(obj)) {\n                final java.lang.Object java.lang.Object = ((java.util.Map.Entry<K, V>)(obj)).getKey();\n                org.apache.commons.collections4.map.ListOrderedMap<K, V>.remove(key);\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.LoopingListIterator:112","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024e4164-3f2d-11e6-a6dd-0b0820cbc2e9","method":{"position":"org.apache.commons.collections4.IteratorUtils:446","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Iterator<E> unmodifiableIterator(final java.util.Iterator<E> iterator) {\n    if ((iterator.hasNext()) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.iterators.UnmodifiableIterator.unmodifiableIterator(iterator);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterator":"iterator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:236","type":"CtBinaryOperatorImpl"},"failures":[290,291,292,293],"tindex":"024e4165-3f2d-11e6-a6dd-c15be82fe203","method":{"position":"org.apache.commons.collections4.list.TransformedList:155","type":"CtMethodImpl","sourcecode":"public E set(final int index, E object) {\n    if (index >= index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            object = transform(object);\n            return getList().set(index, object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"maxElements":"index","end":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1027","type":"CtInvocationImpl"},"failures":[],"tindex":"024e4166-3f2d-11e6-a6dd-df04fb27dc7c","method":{"position":"org.apache.commons.collections4.map.LRUMap:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void addMapping(final int hashIndex, final int hashCode, final K key, final V value) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(hashCode)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey(hashIndex)) {\n                {\n                    if (isFull()) {\n                        org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                        boolean boolean = false;\n                        if (boolean) {\n                            while ((reuse != (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) && (reuse != null)) {\n                                if (removeLRU(reuse)) {\n                                    removeLRUEntry = true;\n                                    break;\n                                } \n                                reuse = reuse.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                            }\n                            if (reuse == null) {\n                                throw new java.lang.IllegalStateException((((((((((((((\"Entry.after=null, header.after\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\") + key) + \" value=\") + value) + \" size=\") + (int)) + \" maxSize=\") + (int)) + \" Please check that your keys are immutable, and that you have used synchronization properly.\") + \" If so, then please report this to dev@commons.apache.org as a bug.\"));\n                            } \n                        } else {\n                            removeLRUEntry = removeLRU(reuse);\n                        }\n                        if (removeLRUEntry) {\n                            if (reuse == null) {\n                                throw new java.lang.IllegalStateException((((((((((((((\"reuse=null, header.after=\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\") + key) + \" value=\") + value) + \" size=\") + (int)) + \" maxSize=\") + (int)) + \" Please check that your keys are immutable, and that you have used synchronization properly.\") + \" If so, then please report this to dev@commons.apache.org as a bug.\"));\n                            } \n                            reuseMapping(reuse, hashIndex, hashCode, key, value);\n                        } else {\n                            super.addMapping(hashIndex, hashCode, key, value);\n                        }\n                    } else {\n                        super.addMapping(hashIndex, hashCode, key, value);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"hashCode"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:764","type":"CtBinaryOperatorImpl"},"failures":[294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,61,380,381,382,62,63,383,68,384,385,386,387,388,389,390,391,76,392,393,394,77,78,395,83,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411],"tindex":"024e6877-3f2d-11e6-a6dd-6322dd267cf6","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:852","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.Object entry) {\n    if (entry == null) {\n        {\n            if (entry instanceof java.util.Map.Entry) {\n                final java.util.Map.Entry<?, ?> java.util.Map.Entry<?, ?> = ((java.util.Map.Entry<?, ?>)(entry));\n                final java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap<K, V>.getEntry(e.getKey());\n                return (match != null) && (match.equals(e));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"shortObject":"entry"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:79","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024e6878-3f2d-11e6-a6dd-ef2fdc96abc4","method":{"position":"org.apache.commons.collections4.PredicateUtils:273","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> allPredicate(final org.apache.commons.collections4.Predicate<? super T>... predicates) {\n    if (predicates == null) {\n        {\n            return org.apache.commons.collections4.functors.AllPredicate.allPredicate(predicates);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicates":"predicates"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:190","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024e6879-3f2d-11e6-a6dd-332e547e8163","method":{"position":"org.apache.commons.collections4.set.CompositeSet:425","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj instanceof java.util.Set) {\n                final java.util.Set<?> java.util.Set<?> = ((java.util.Set<?>)(obj));\n                return ((set.size()) == (org.apache.commons.collections4.set.CompositeSet.this.size())) && (set.containsAll(org.apache.commons.collections4.set.CompositeSet.this));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:799","type":"CtBinaryOperatorImpl"},"failures":[412],"tindex":"024e687a-3f2d-11e6-a6dd-8588817a8793","method":{"position":"org.apache.commons.collections4.CollectionUtils:823","type":"CtMethodImpl","sourcecode":"public static <C>int countMatches(final java.lang.Iterable<C> input, final org.apache.commons.collections4.Predicate<? super C> predicate) {\n    if (input instanceof java.util.List<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            if ((input != null) && (predicate != null)) {\n                for (final C C : input) {\n                    if (predicate.evaluate(o)) {\n                        count++;\n                    } \n                }\n            } \n            return count;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collection":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.NullComparator:170","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024e687b-3f2d-11e6-a6dd-f3afbebfb16b","method":{"position":"org.apache.commons.collections4.collection.IndexedCollection:147","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic boolean contains(final java.lang.Object object) {\n    if (object == null) {\n        {\n            if (object == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.collections4.MultiMap<K, C>.containsKey(org.apache.commons.collections4.Transformer<C, K>.transform(((C)(object))));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:1156","type":"CtBinaryOperatorImpl"},"failures":[413,414,415,416,417,418],"tindex":"024e8f8c-3f2d-11e6-a6dd-05a8c20590b4","method":{"position":"org.apache.commons.collections4.map.LRUMap:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(final java.lang.Object key) {\n    if (key instanceof org.apache.commons.collections4.KeyValue) {\n        {\n            final org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = getEntry(key);\n            if (entry == null) {\n                return null;\n            } \n            moveToMRU(entry);\n            return entry.getValue();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:245","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024e8f8d-3f2d-11e6-a6dd-35e562d95858","method":{"position":"org.apache.commons.collections4.list.UnmodifiableList:102","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean removeAll(final java.util.Collection<?> coll) {\n    if (coll == coll) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list1":"coll","list2":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1252","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024e8f8e-3f2d-11e6-a6dd-6ff8a00dece5","method":{"position":"org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer:126","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isPrefix(final java.lang.String prefix, final int offsetInBits, final int lengthInBits, final java.lang.String key) {\n    if (offsetInBits < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((offsetInBits % (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)) != 0) || ((lengthInBits % (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)) != 0)) {\n                throw new java.lang.IllegalArgumentException(\"Cannot determine prefix outside of Character boundaries\");\n            } \n            final java.lang.String java.lang.String = prefix.substring((offsetInBits / (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)), (lengthInBits / (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)));\n            return key.startsWith(s1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"offsetInBits"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.PermutationIterator:77","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024e8f8f-3f2d-11e6-a6dd-7f1635543c75","method":{"position":"org.apache.commons.collections4.ListUtils:210","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> selectRejected(final java.util.Collection<? extends E> inputCollection, final org.apache.commons.collections4.Predicate<? super E> predicate) {\n    if (inputCollection == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.CollectionUtils.selectRejected(inputCollection, predicate, new java.util.ArrayList<E>(inputCollection.size()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"inputCollection"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:1079","type":"CtInvocationImpl"},"failures":[97],"tindex":"024e8f90-3f2d-11e6-a6dd-85683aee3a6e","method":{"position":"org.apache.commons.collections4.map.SingletonMap:534","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj.getClass().isArray()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj == (org.apache.commons.collections4.map.SingletonMap.this)) {\n                return true;\n            } \n            if ((obj instanceof java.util.Map) == false) {\n                return false;\n            } \n            final java.util.Map<?, ?> java.util.Map<?, ?> = ((java.util.Map<?, ?>)(obj));\n            if ((other.size()) != 1) {\n                return false;\n            } \n            final java.util.Map.Entry<?, ?> java.util.Map.Entry<?, ?> = other.entrySet().iterator().next();\n            return (isEqualKey(entry.getKey())) && (isEqualValue(entry.getValue()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:50","type":"CtBinaryOperatorImpl"},"failures":[50,419,420,421,422],"tindex":"024e8f91-3f2d-11e6-a6dd-0f3c0e6643e9","method":{"position":"org.apache.commons.collections4.PredicateUtils:371","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> onePredicate(final org.apache.commons.collections4.Predicate<? super T>... predicates) {\n    if (predicates == null) {\n        {\n            return org.apache.commons.collections4.functors.OnePredicate.onePredicate(predicates);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicates":"predicates"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:871","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024eb6a2-3f2d-11e6-a6dd-736b6fff6113","method":{"position":"org.apache.commons.collections4.IteratorUtils:853","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Iterator<E> asIterator(final java.util.Enumeration<? extends E> enumeration) {\n    if (enumeration == null) {\n        {\n            if (enumeration == null) {\n                throw new java.lang.NullPointerException(\"Enumeration must not be null\");\n            } \n            return new org.apache.commons.collections4.iterators.EnumerationIterator<E>(enumeration);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"enumeration":"enumeration"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:548","type":"CtBinaryOperatorImpl"},"failures":[423],"tindex":"024eb6a3-3f2d-11e6-a6dd-4dde0c3e5295","method":{"position":"org.apache.commons.collections4.set.ListOrderedSet:76","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.set.ListOrderedSet<E> listOrderedSet(final java.util.Set<E> set, final java.util.List<E> list) {\n    if ((list == null) || (list == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (set == null) {\n                throw new java.lang.IllegalArgumentException(\"Set must not be null\");\n            } \n            if (list == null) {\n                throw new java.lang.IllegalArgumentException(\"List must not be null\");\n            } \n            if (((set.size()) > 0) || ((list.size()) > 0)) {\n                throw new java.lang.IllegalArgumentException(\"Set and List must be empty\");\n            } \n            return new org.apache.commons.collections4.set.ListOrderedSet<E>(set , list);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"list","b":"list"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.ListIteratorWrapper:97","type":"CtBinaryOperatorImpl"},"failures":[424,425,426],"tindex":"024eb6a4-3f2d-11e6-a6dd-a1476de0cfd2","method":{"position":"org.apache.commons.collections4.IteratorUtils:1000","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> toList(final java.util.Iterator<? extends E> iterator) {\n    if (iterator instanceof java.util.ListIterator) {\n        {\n            return org.apache.commons.collections4.IteratorUtils.toList(iterator, 10);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterator":"iterator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.LRUMap:208","type":"CtBinaryOperatorImpl"},"failures":[427,414,402,428,429],"tindex":"024eb6a5-3f2d-11e6-a6dd-1f61bfc6ca3e","method":{"position":"org.apache.commons.collections4.map.LRUMap:224","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void updateEntry(final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> entry, final V newValue) {\n    if (entry == entry) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            moveToMRU(((org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)(entry)));\n            entry.setValue(newValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"entry":"entry","header":"entry"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.SetUniqueList:217","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024eb6a6-3f2d-11e6-a6dd-914721d1ba1c","method":{"position":"org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer:41","type":"CtMethodImpl","sourcecode":"private static int mask(final int bit) {\n    if ((bit != (-1)) && (pos != bit)) {\n        {\n            return (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int) >>> bit;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"bit","index":"bit"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:1006","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024eb6a7-3f2d-11e6-a6dd-cb0a1e4c9d48","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:564","type":"CtMethodImpl","sourcecode":"protected void removeMapping(final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> entry, final int hashIndex, final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> previous) {\n    if (hashIndex == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            (int)++;\n            removeEntry(entry, hashIndex, previous);\n            (int)--;\n            destroyEntry(entry);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineageIndex":"hashIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024eb6a8-3f2d-11e6-a6dd-2f820e395e94","method":{"position":"org.apache.commons.collections4.map.UnmodifiableEntrySet:99","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean retainAll(final java.util.Collection<?> coll) {\n    if (coll instanceof org.apache.commons.collections4.Bag) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:506","type":"CtBinaryOperatorImpl"},"failures":[430,431],"tindex":"024eddb9-3f2d-11e6-a6dd-9f8b824f3be4","method":{"position":"org.apache.commons.collections4.bag.SynchronizedBag:93","type":"CtMethodImpl","sourcecode":"public boolean remove(final java.lang.Object object, final int count) {\n    if (object != null) {\n        {\n            synchronized(java.lang.Object) {\n                return getBag().remove(object, count);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key2":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.GrowthList:123","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024eddba-3f2d-11e6-a6dd-41e593b5afd9","method":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:228","type":"CtMethodImpl","sourcecode":"protected org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> getEntry(final int index) {\n    if (index > index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index < 0) {\n                throw new java.lang.IndexOutOfBoundsException(((\"Index \" + index) + \" is less than zero\"));\n            } \n            if (index >= (int)) {\n                throw new java.lang.IndexOutOfBoundsException((((\"Index \" + index) + \" is invalid for size \") + (int)));\n            } \n            org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n            if (index < ((int) / 2)) {\n                entry = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                for (int int = 0 ; currentIndex < index ; currentIndex++) {\n                    entry = entry.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                }\n            } else {\n                entry = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                for (int int = int ; currentIndex > index ; currentIndex--) {\n                    entry = entry.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                }\n            }\n            return entry;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"index","index":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:1071","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024eddbb-3f2d-11e6-a6dd-99adf3408b35","method":{"position":"org.apache.commons.collections4.SplitMapUtils:151","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj instanceof org.w3c.dom.NodeList) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj == (org.apache.commons.collections4.SplitMapUtils.WrappedPut.this)) {\n                return true;\n            } \n            return (obj instanceof org.apache.commons.collections4.SplitMapUtils.WrappedPut) && (((org.apache.commons.collections4.SplitMapUtils.WrappedPut<?, ?>)(obj)).org.apache.commons.collections4.Put<?, ?>.equals(org.apache.commons.collections4.SplitMapUtils.WrappedPut.this.org.apache.commons.collections4.Put<K, V>));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalArgumentException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1125","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024eddbc-3f2d-11e6-a6dd-e52cf33e04c0","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1281","type":"CtMethodImpl","sourcecode":"private void insertValue(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> newNode) throws java.lang.IllegalArgumentException {\n    if (newNode != null) {\n        {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n            while (true) {\n                final int int = org.apache.commons.collections4.bidimap.TreeBidiMap.compare(newNode.getValue(), node.getValue());\n                if (cmp == 0) {\n                    throw new java.lang.IllegalArgumentException(((\"Cannot store a duplicate value (\\\"\" + (newNode.getData(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement))) + \"\\\") in this Map\"));\n                } else if (cmp < 0) {\n                    if ((node.getLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) {\n                        node = node.getLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                    } else {\n                        node.setLeft(newNode, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                        newNode.setParent(node, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                        doRedBlackInsert(newNode, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                        break;\n                    }\n                } else {\n                    if ((node.getRight(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) {\n                        node = node.getRight(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                    } else {\n                        node.setRight(newNode, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                        newNode.setParent(node, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                        doRedBlackInsert(newNode, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                        break;\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"yFormerParent":"newNode"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.ListIteratorWrapper:142","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024f04cd-3f2d-11e6-a6dd-039963061ac2","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:1043","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.ListIterator<E> listIterator(final int index) {\n    if (index < index) {\n        {\n            rangeCheck(index, ((int) + 1));\n            checkModCount();\n            return org.apache.commons.collections4.list.AbstractLinkedList<E>.createSubListListIterator(org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList.this, index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"wrappedIteratorIndex":"index","currentIndex":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:50","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024f04ce-3f2d-11e6-a6dd-f199be9803c7","method":{"position":"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMap:119","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic K removeValue(final java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicates":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.TransformerClosure:49","type":"CtBinaryOperatorImpl"},"failures":[432,433,434,435,436,437,438],"tindex":"024f04cf-3f2d-11e6-a6dd-b1fe8c241a93","method":{"position":"org.apache.commons.collections4.ClosureUtils:97","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.Closure<E> asClosure(final org.apache.commons.collections4.Transformer<? super E, ?> transformer) {\n    if (transformer == null) {\n        {\n            return org.apache.commons.collections4.functors.TransformerClosure.transformerClosure(transformer);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"transformer":"transformer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:1084","type":"CtInvocationImpl"},"failures":[],"tindex":"024f2be0-3f2d-11e6-a6dd-51e858b8e8c7","method":{"position":"org.apache.commons.collections4.list.AbstractListDecorator:82","type":"CtMethodImpl","sourcecode":"public int indexOf(final java.lang.Object object) {\n    if (object.isAssignableFrom(object.getReturnType())) {\n        {\n            return decorated().indexOf(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Iterator.class":"object","method":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:257","type":"CtBinaryOperatorImpl"},"failures":[439,440,441,442],"tindex":"024f2be1-3f2d-11e6-a6dd-b70a9af45c25","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:154","type":"CtMethodImpl","sourcecode":"public boolean containsKey(final java.lang.Object key1, final java.lang.Object key2) {\n    if (key1 == null) {\n        {\n            final int int = hash(key1, key2);\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[][decorated().hashIndex(hashCode, decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[].int)];\n            while (entry != null) {\n                if (((entry.int) == hashCode) && (isEqualKey(entry, key1, key2))) {\n                    return true;\n                } \n                entry = entry.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:384","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024f2be2-3f2d-11e6-a6dd-5d278c7580bd","method":{"position":"org.apache.commons.collections4.list.PredicatedList:132","type":"CtMethodImpl","sourcecode":"public E set(final int index, final E object) {\n    if ((1 <= index) && (otherCount <= index)) {\n        {\n            validate(object);\n            return decorated().set(index, object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"myCount":"index","otherCount":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.CompositeCollection:293","type":"CtBinaryOperatorImpl"},"failures":[443],"tindex":"024f2be3-3f2d-11e6-a6dd-a967368f85e1","method":{"position":"org.apache.commons.collections4.CollectionUtils:1668","type":"CtMethodImpl","sourcecode":"public static <C>java.util.Collection<C> retainAll(final java.util.Collection<C> collection, final java.util.Collection<?> retain) {\n    if ((retain.size()) == 0) {\n        {\n            return org.apache.commons.collections4.ListUtils.retainAll(collection, retain);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"retain"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1470","type":"CtBinaryOperatorImpl"},"failures":[444],"tindex":"024f2be4-3f2d-11e6-a6dd-fb1f6e9038c3","method":{"position":"org.apache.commons.collections4.CollectionUtils:1497","type":"CtMethodImpl","sourcecode":"public static int maxSize(final java.util.Collection<? extends java.lang.Object> coll) {\n    if (coll instanceof org.apache.commons.collections4.BoundedCollection) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (coll == null) {\n                throw new java.lang.NullPointerException(\"The collection must not be null\");\n            } \n            if (coll instanceof org.apache.commons.collections4.BoundedCollection) {\n                return ((org.apache.commons.collections4.BoundedCollection<?>)(coll)).maxSize();\n            } \n            try {\n                final org.apache.commons.collections4.BoundedCollection<?> org.apache.commons.collections4.BoundedCollection<?> = org.apache.commons.collections4.collection.UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n                return bcoll.maxSize();\n            } catch (final java.lang.IllegalArgumentException ex) {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:724","type":"CtBinaryOperatorImpl"},"failures":[445,446,447,448,449],"tindex":"024f2be5-3f2d-11e6-a6dd-d598a8c2c64e","method":{"position":"org.apache.commons.collections4.comparators.BooleanComparator:137","type":"CtMethodImpl","sourcecode":"public int compare(final java.lang.Boolean b1, final java.lang.Boolean b2) {\n    if (b2 == null) {\n        {\n            final boolean boolean = b1.booleanValue();\n            final boolean boolean = b2.booleanValue();\n            return v1 ^ v2 ? v1 ^ (boolean) ? 1 : -1 : 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"booleanObject":"b2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:362","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024f52f6-3f2d-11e6-a6dd-535590cff63b","method":{"position":"org.apache.commons.collections4.bag.UnmodifiableBag:137","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean retainAll(final java.util.Collection<?> coll) {\n    if (coll instanceof org.apache.commons.collections4.Bag) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:859","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024f7a07-3f2d-11e6-a6dd-c79e7649dea0","method":{"position":"org.apache.commons.collections4.list.UnmodifiableList:138","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic E set(final int index, final E object) {\n    if (index == 0) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offsetLength":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1389","type":"CtBinaryOperatorImpl"},"failures":[2,450,9,451,452,453,454,455,456],"tindex":"024f7a08-3f2d-11e6-a6dd-e993383f422c","method":{"position":"org.apache.commons.collections4.list.TreeList:158","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int indexOf(final java.lang.Object object) {\n    if (object instanceof java.lang.Object[]) {\n        {\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                return -1;\n            } \n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(object, org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:148","type":"CtInvocationImpl"},"failures":[],"tindex":"024f7a09-3f2d-11e6-a6dd-0571066b4bcb","method":{"position":"org.apache.commons.collections4.map.LazySortedMap:91","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.map.LazySortedMap<K, V> lazySortedMap(final java.util.SortedMap<K, V> map, final org.apache.commons.collections4.Transformer<? super K, ? extends V> factory) {\n    return new org.apache.commons.collections4.map.LazySortedMap<K, V>(map , factory);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.EnumerationIterator:107","type":"CtBinaryOperatorImpl"},"failures":[457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548],"tindex":"024f7a0a-3f2d-11e6-a6dd-fd6e8f907545","method":{"position":"org.apache.commons.collections4.collection.PredicatedCollection:131","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final E E : coll) {\n                validate(item);\n            }\n            return decorated().addAll(coll);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collection":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024f7a0b-3f2d-11e6-a6dd-93be276ea3b4","method":{"position":"org.apache.commons.collections4.CollectionUtils:1427","type":"CtMethodImpl","sourcecode":"public static boolean isNotEmpty(final java.util.Collection<?> coll) {\n    if (coll instanceof org.apache.commons.collections4.Bag) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return !(org.apache.commons.collections4.CollectionUtils.isEmpty(coll));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.FixedOrderComparator:113","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024fa11c-3f2d-11e6-a6dd-b5686f0df39a","method":{"position":"org.apache.commons.collections4.CollectionUtils:1086","type":"CtMethodImpl","sourcecode":"public static <T>boolean addIgnoreNull(final java.util.Collection<T> collection, final T object) {\n    if (collection == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (collection == null) {\n                throw new java.lang.NullPointerException(\"The collection must not be null\");\n            } \n            return (object != null) && (collection.add(object));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"items":"collection"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.set.UnmodifiableSortedSet:56","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024fa11d-3f2d-11e6-a6dd-c9e30387d65d","method":{"position":"org.apache.commons.collections4.SetUtils:246","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Set<E> orderedSet(final java.util.Set<E> set) {\n    if (set instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            return org.apache.commons.collections4.set.ListOrderedSet.listOrderedSet(set);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set":"set"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:343","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024fa11e-3f2d-11e6-a6dd-bd0eecefb3d6","method":{"position":"org.apache.commons.collections4.CollectionUtils:111","type":"CtMethodImpl","sourcecode":"private final int getFreq(final java.lang.Object obj, final java.util.Map<?, java.lang.Integer> freqMap) {\n    if ((obj != null) && (answer instanceof java.util.Map)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.Integer java.lang.Integer = freqMap.get(obj);\n            if (count != null) {\n                return count.intValue();\n            } \n            return 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:671","type":"CtBinaryOperatorImpl"},"failures":[549,550,551,552,553,554,555,556,557,558,559,560,561,444],"tindex":"024fa11f-3f2d-11e6-a6dd-834f786c7879","method":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:339","type":"CtMethodImpl","sourcecode":"private int decrement(int index) {\n    if (index > index) {\n        {\n            index--;\n            if (index < 0) {\n                index = (int) - 1;\n            } \n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.collections4.map.AbstractHashedMap.MAXIMUM_CAPACITY":"index","newCapacity":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.set.TransformedSortedSet:80","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024fa120-3f2d-11e6-a6dd-9526abda4722","method":{"position":"org.apache.commons.collections4.SetUtils:230","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Set<E> transformedSet(final java.util.Set<E> set, final org.apache.commons.collections4.Transformer<? super E, ? extends E> transformer) {\n    if (((transformer != null) && (set != null)) && ((set.size()) > 0)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.set.TransformedSet.transformingSet(set, transformer);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set":"set","transformer":"transformer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:799","type":"CtBinaryOperatorImpl"},"failures":[562],"tindex":"024fa121-3f2d-11e6-a6dd-2f7165c78c56","method":{"position":"org.apache.commons.collections4.CollectionUtils:1154","type":"CtMethodImpl","sourcecode":"public static <C>boolean addAll(final java.util.Collection<C> collection, final C[] elements) {\n    if (collection instanceof java.util.List<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            for (final C C : elements) {\n                changed |= collection.add(element);\n            }\n            return changed;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collection":"collection"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiValueMap:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"024fa122-3f2d-11e6-a6dd-01e0d846d133","method":{"position":"org.apache.commons.collections4.MapUtils:641","type":"CtMethodImpl","sourcecode":"public static <K>int getIntValue(final java.util.Map<? super K, ?> map, final K key) {\n    if (map instanceof org.apache.commons.collections4.MultiMap) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.Integer java.lang.Integer = org.apache.commons.collections4.MapUtils.getInteger(map, key);\n            if (integerObject == null) {\n                return 0;\n            } \n            return integerObject.intValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"}}
{"failureDictionary":{"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiRemoveByEntrySet":338,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyContainsKey":381,"org.apache.commons.collections4.map.LRUMapTest.testValuesRemoveAll":567,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionContains":91,"org.apache.commons.collections4.map.Flat3MapTest.testFailFastEntrySet":106,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapGet":350,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetIteratorRemoveChangesMap":375,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesRemoveChangesMap":453,"org.apache.commons.collections4.map.LRUMapTest.testMapEquals":547,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionRemoveAll":90,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionContainsAll":86,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray":218,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testCanonicalEmptyCollectionExists":448,"org.apache.commons.collections4.list.CursorableLinkedListTest.testContains":636,"org.apache.commons.collections4.PredicateUtilsTest.testAndPredicateEx":122,"org.apache.commons.collections4.map.CompositeMapTest.testMapClear":243,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":37,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIterator":502,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndex":31,"org.apache.commons.collections4.map.CompositeMapTest.testObjectHashCodeEqualsContract":251,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapClear":346,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testFullIterator":133,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContains":193,"org.apache.commons.collections4.map.CompositeMapTest.testResolveCollision":474,"org.apache.commons.collections4.collection.CompositeCollectionTest.testRemoveComposited":118,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueRemove":181,"org.apache.commons.collections4.map.SingletonMapTest.testMapIsEmpty":389,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetEquals":256,"org.apache.commons.collections4.CollectionUtilsTest.addAllForIterable":467,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetClearChangesMap":360,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIterator":42,"org.apache.commons.collections4.map.LRUMapTest.testFailFastKeySet":539,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMakeMap":296,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testRemove":170,"org.apache.commons.collections4.set.CompositeSetTest.testObjectEqualsSelf":239,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapToString":352,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testFullMapCompatibility":353,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testFullMapCompatibility":306,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveAll":437,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionClear":213,"org.apache.commons.collections4.map.Flat3MapTest.testEquals1":608,"org.apache.commons.collections4.map.CompositeMapTest.testObjectEqualsSelf":250,"org.apache.commons.collections4.map.LRUMapTest.testInternalState_Buckets":527,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiClear":292,"org.apache.commons.collections4.map.Flat3MapTest.testEquals2":609,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionContains":647,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRemoveChangesMap":314,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRetainAll":435,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsValue":12,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIsEmpty":229,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSimpleSerialization":273,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testFailFastValues":342,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectEqualsSelf":171,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testLastKey":286,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testSimpleSerialization":449,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testDecorateFactory":284,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray2":188,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testFirstKey":411,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testSerializeDeserializeThenCompare":142,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapRemove":17,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAddAll":579,"org.apache.commons.collections4.map.MultiKeyMapTest.testNullHandling":601,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectHashCodeEqualsContract":140,"org.apache.commons.collections4.map.SingletonMapTest.testFirstKey":384,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemoveChangesMap":628,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiRemove":293,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testEqualsNull":149,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetRetainAll":374,"org.apache.commons.collections4.collection.CompositeCollectionTest.testAddAllMutator":119,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRetainAll":232,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToString":208,"org.apache.commons.collections4.map.LRUMapTest.testMapGet":548,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionContainsAll":641,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesRemoveChangesMap":22,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":40,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testEqualsNull":137,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAddAll":196,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedSet":515,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCircularFifoQueueRemove":68,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetContains2":363,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionContainsAll":648,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testCanonicalEmptyCollectionExists":162,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetContains3":364,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnmodifiable":486,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetContains1":362,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testSerializeDeserializeThenCompare":595,"org.apache.commons.collections4.CollectionUtilsTest.intersection":469,"org.apache.commons.collections4.map.LRUMapTest.testKeySetRetainAll":572,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testUnmodifiable":408,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapPutNullValue":356,"org.apache.commons.collections4.map.LRUMapTest.testKeySetIteratorRemoveChangesMap":573,"org.apache.commons.collections4.map.CompositeMapTest.testMapSize":242,"org.apache.commons.collections4.iterators.FilterIteratorTest.testEmptyIterator":179,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMakeMap":427,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapEquals":13,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapContainsKey":347,"org.apache.commons.collections4.map.SingletonMapTest.testMapSize":390,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":300,"org.apache.commons.collections4.map.ReferenceMapTest.testNullHandling":599,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":59,"org.apache.commons.collections4.queue.TransformedQueueTest.testFullQueueSerialization":186,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testSerializeDeserializeThenCompare":166,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListSerialization":45,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIterator":129,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testCanonicalEmptyCollectionExists":150,"org.apache.commons.collections4.map.CompositeMapTest.testMapEquals":245,"org.apache.commons.collections4.map.LRUMapTest.testKeySetClearChangesMap":558,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiMapIteratorSet":339,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorSet":30,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectHashCodeEqualsSelfHashCode":165,"org.apache.commons.collections4.comparators.FixedOrderComparatorTest.testObjectHashCodeEqualsContract":604,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiKeySetValuesOrder":336,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray":501,"org.apache.commons.collections4.map.SingletonMapTest.testObjectEqualsSelf":401,"org.apache.commons.collections4.map.CompositeMapTest.testPut":473,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapHashCode":304,"org.apache.commons.collections4.map.LRUMapTest.testRemoveLRUFirstBlocksRemove":526,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testFullQueueCompatibility":487,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemove":2,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveChangesMap":420,"org.apache.commons.collections4.map.CompositeMapTest.testGet":472,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testSimpleSerialization":507,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiClear":334,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionToArray":644,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemove":3,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetIteratorRemoveChangesMap":325,"org.apache.commons.collections4.map.SingletonMapTest.testEmptyMapCompatibility":397,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRetainAll":215,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapPut":354,"org.apache.commons.collections4.comparators.FixedOrderComparatorTest.testObjectEqualsSelf":603,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCanonicalEmptyCollectionExists":506,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectHashCodeEqualsSelfHashCode":153,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapRemove":442,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray":235,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedRemove":499,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapIsEmpty":9,"org.apache.commons.collections4.map.SingletonMapTest.testSerializeDeserializeThenCompare":399,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testSerializeDeserializeThenCompare":500,"org.apache.commons.collections4.queue.TransformedQueueTest.testSerializeDeserializeThenCompare":199,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIterator":262,"org.apache.commons.collections4.map.LinkedMapTest.testGetByIndex":607,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testPreviousKey":409,"org.apache.commons.collections4.set.CompositeSetTest.testAddCompositedCollision":461,"org.apache.commons.collections4.map.LRUMapTest.testPreviousKey":537,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testObjectHashCodeEqualsContract":508,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiInverse":333,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemoveAll":377,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesRemoveChangesMap":454,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemove":594,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullKey":602,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionAddAll":639,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorAdd":29,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":443,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionAddAll":646,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemove":4,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRetainAll":593,"org.apache.commons.collections4.queue.TransformedQueueTest.testFullQueueCompatibility":182,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEmptyMapCompatibility":430,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemoveAll":629,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetRetainAll":324,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemoveAll":633,"org.apache.commons.collections4.CollectionUtilsTest.union":468,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesRemoveAll":369,"org.apache.commons.collections4.map.LRUMapTest.testKeySetRemoveChangesMap":570,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIterator":597,"org.apache.commons.collections4.map.Flat3MapTest.testSerialisation2":612,"org.apache.commons.collections4.CollectionUtilsTest.testDisjunctionAsUnionMinusIntersection":470,"org.apache.commons.collections4.map.LinkedMapTest.testRemoveByIndex":606,"org.apache.commons.collections4.map.Flat3MapTest.testSerialisation4":613,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetClearChangesMap":361,"org.apache.commons.collections4.set.CompositeSetTest.testFailedCollisionResolution":463,"org.apache.commons.collections4.map.Flat3MapTest.testMapIteratorSetValue2":618,"org.apache.commons.collections4.map.Flat3MapTest.testMapIteratorSetValue3":619,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRetainAll":630,"org.apache.commons.collections4.list.SetUniqueListTest.testFactory":25,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapHashCode":351,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectHashCodeEqualsSelfHashCode":141,"org.apache.commons.collections4.map.CompositeMapTest.testPutAll":479,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testFullIterator":157,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapPutAll":357,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToString":58,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetRemoveChangesMap":372,"org.apache.commons.collections4.map.LRUMapTest.testInternalState_getEntry_int":528,"org.apache.commons.collections4.map.SingletonMapTest.testNextKey":386,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testSimpleSerialization":151,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testEqualsNull":161,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMakeMap":343,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testCanonicalFullCollectionExists":446,"org.apache.commons.collections4.map.Flat3MapTest.testMapIteratorSetValue1":617,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":434,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContains":211,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsKey":391,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedRemove":480,"org.apache.commons.collections4.CollectionUtilsTest.maxSize":101,"org.apache.commons.collections4.map.LRUMapTest.testMakeMap":541,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray2":223,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedAdd":598,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionIteratorRemove":89,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemoveAll":210,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetIteratorRemoveChangesMap":439,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCanonicalFullCollectionExists":504,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testFullQueueSerialization":491,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetRetainAll":320,"org.apache.commons.collections4.list.SetUniqueListTest.testSubListIsUnmodifiable":32,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapPutNullKey":355,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndexBoundsChecking2":44,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testFirstKey":326,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemove3":367,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemove2":366,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemove1":365,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetIteratorRemoveChangesMap":379,"org.apache.commons.collections4.map.SingletonMapTest.testEqualsNull":400,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetEquals":220,"org.apache.commons.collections4.map.Flat3MapTest.testMapPutAll":622,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionAdd":95,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemoveAll":575,"org.apache.commons.collections4.map.LRUMapTest.testClone":520,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionSize":585,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePeek":183,"org.apache.commons.collections4.map.Flat3MapTest.testMapRemove":109,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testEqualsNull":505,"org.apache.commons.collections4.map.LRUMapTest.testRemoveLRUBlocksRemoveScan":525,"org.apache.commons.collections4.map.SingletonMapTest.testCanonicalEmptyCollectionExists":405,"org.apache.commons.collections4.map.LRUMapTest.testMapClear":544,"org.apache.commons.collections4.map.CompositeMapTest.testMapRemove":248,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testObjectHashCodeEqualsContract":450,"org.apache.commons.collections4.map.LRUMapTest.testFailFastEntrySet":538,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsKey":11,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testQueuePeek":81,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionSize":494,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testObjectHashCodeEqualsSelfHashCode":272,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":51,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testSimpleSerialization":139,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemove":233,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testQueueElement":488,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray2":584,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testSerializeDeserializeThenCompare":452,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListCompatibility":53,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":580,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":436,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAddAll":231,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSerializeDeserializeThenCompare":234,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToString":190,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapClear":299,"org.apache.commons.collections4.map.SingletonMapTest.testLastKey":385,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsValue":546,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testPreviousKey":288,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapEquals":349,"org.apache.commons.collections4.CollectionUtilsTest.testRemoveAll":517,"org.apache.commons.collections4.map.Flat3MapTest.testFailFastKeySet":107,"org.apache.commons.collections4.TransformerUtilsTest.testChainedTransformer":383,"org.apache.commons.collections4.map.SingletonMapTest.testMapHashCode":395,"org.apache.commons.collections4.map.LRUMapTest.testValuesRemoveChangesMap":566,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionToString":88,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":5,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionSize":207,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContainsAll":205,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapHashCode":419,"org.apache.commons.collections4.map.CompositeMapTest.testMapToString":244,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionClear":591,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiRemove":335,"org.apache.commons.collections4.list.TreeListTest.testListSetByIndex":513,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPutNullKey":429,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSerializeDeserializeThenCompare":268,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesIteratorRemoveChangesMap":317,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnmodifiable":253,"org.apache.commons.collections4.PredicateUtilsTest.testAnyPredicate":116,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRemoveAll":315,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapIsEmpty":344,"org.apache.commons.collections4.map.LRUMapTest.testFullMapCompatibility":551,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemoveChangesMap":574,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemoveChangesMap":376,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiRemoveByKeySet":337,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectHashCodeEqualsSelfHashCode":177,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testEqualsNull":269,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromValues":533,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRepeatedSerialization":79,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionIterator":649,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRetainAll":444,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove3":565,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove2":564,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove1":563,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testFullIterator":169,"org.apache.commons.collections4.set.CompositeSetTest.testSerializeDeserializeThenCompare":238,"org.apache.commons.collections4.map.LRUMapTest.testReset":530,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":39,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPutAll":438,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiGetKeyInverse":290,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testSimpleSerialization":163,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray":66,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetRemoveAll":373,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContainsAll":260,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray":200,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIterator":236,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":433,"org.apache.commons.collections4.map.CompositeMapTest.testRemoveComposited":476,"org.apache.commons.collections4.map.CompositeMapTest.testRemoveFromUnderlying":475,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testIterator":168,"org.apache.commons.collections4.map.Flat3MapTest.testCollections261":105,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetHashCode":221,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testIterator":132,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray":596,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testDecorateFactory":485,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapClear":431,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionClear":62,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiGetKeyInverse":332,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsValue":392,"org.apache.commons.collections4.list.TreeListTest.testIndexOf":510,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemoveAll":227,"org.apache.commons.collections4.CollectionUtilsTest.countMatches":282,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionIterator":99,"org.apache.commons.collections4.ListUtilsTest.testRemoveAll":518,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testNullHandling":600,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":23,"org.apache.commons.collections4.map.SingletonMapTest.testMapPut":398,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetIteratorRemoveChangesMap":577,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContainsAll":237,"org.apache.commons.collections4.SetUtilsTest.testpredicatedSet":279,"org.apache.commons.collections4.map.LRUMapTest.testFirstKey":534,"org.apache.commons.collections4.QueueUtilsTest.testPredicatedQueue":483,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapToString":14,"org.apache.commons.collections4.ListUtilsTest.testHashCode":382,"org.apache.commons.collections4.QueueUtilsTest.testEmptyQueue":482,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsKey":545,"org.apache.commons.collections4.map.Flat3MapTest.testEntryIteratorSetValue2":615,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIterator":144,"org.apache.commons.collections4.map.Flat3MapTest.testEntryIteratorSetValue3":616,"org.apache.commons.collections4.map.LRUMapTest.testMapHashCode":549,"org.apache.commons.collections4.map.Flat3MapTest.testEntryIteratorSetValue1":614,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapContainsValue":348,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorByIndex":578,"org.apache.commons.collections4.map.LRUMapTest.testValuesIteratorRemoveChangesMap":569,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPut":15,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndexBoundsChecking2":49,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRemoveAll":421,"org.apache.commons.collections4.map.CompositeMapTest.testMapIsEmpty":246,"org.apache.commons.collections4.set.CompositeSetTest.testRemoveComposited":459,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContains":497,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":61,"org.apache.commons.collections4.map.SingletonMapTest.testObjectHashCodeEqualsContract":402,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":36,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyPut":652,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIteratorRemove":191,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":52,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapSize":10,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testNextKey":412,"org.apache.commons.collections4.map.LRUMapTest.testValuesRetainAll":568,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetHashCode":204,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionToArray":98,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testEqualsNull":173,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIsEmpty":590,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiGetKey":331,"org.apache.commons.collections4.collection.CompositeCollectionTest.testAddMutator":117,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionAdd":638,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRemove":104,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testRemove":146,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray2":493,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemoveChangesMap":24,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRetainAll":126,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testEmptyQueueCompatibility":490,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAddAll":592,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapPutNullKey":307,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testSimpleSerialization":175,"org.apache.commons.collections4.set.CompositeSetTest.testRemoveUnderlying":458,"org.apache.commons.collections4.collection.CompositeCollectionTest.testRemoveAll":121,"org.apache.commons.collections4.map.SingletonMapTest.testMapGet":394,"org.apache.commons.collections4.map.Flat3MapTest.testKeySetIteratorRemoveChangesMap":627,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionRetainAll":94,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEqualsNull":447,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemoveAll":588,"org.apache.commons.collections4.CollectionUtilsTest.testIsProperSubCollection":464,"org.apache.commons.collections4.map.LRUMapTest.testMapSize":543,"org.apache.commons.collections4.list.TransformedListTest.testListIndexOf":113,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove1":623,"org.apache.commons.collections4.map.CompositeMapTest.testRemoveFromComposited":477,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove2":624,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContainsAll":222,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove3":625,"org.apache.commons.collections4.QueueUtilsTest.testUnmodifiableQueue":481,"org.apache.commons.collections4.set.CompositeSetTest.testAddComposited":462,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemove":198,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnmodifiable":514,"org.apache.commons.collections4.PredicateUtilsTest.testNullIsExceptionPredicate":7,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyGet":380,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRetainAll":125,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove2":20,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove3":21,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCircularFifoQueueCircular":78,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsValue":249,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPutAll":16,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testNextKey":328,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testCanonicalEmptyCollectionExists":174,"org.apache.commons.collections4.map.SingletonMapTest.testMakeMap":388,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContains":259,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testObjectEqualsSelf":270,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRetainAll":378,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":305,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testFullIterator":145,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":302,"org.apache.commons.collections4.IteratorUtilsTest.testArrayListIterator":128,"org.apache.commons.collections4.map.LRUMapTest.testMapPutNullKey":553,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRetainAll":576,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":60,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionSize":57,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testObjectHashCodeEqualsContract":271,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":55,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndexBoundsChecking2":50,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemoveAll":192,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionClear":230,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromEntrySet":531,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains1":413,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testReset":131,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedRemove":267,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains3":415,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains2":414,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testFullMapCompatibility":432,"org.apache.commons.collections4.CollectionUtilsTest.intersectionUsesMethodEquals":465,"org.apache.commons.collections4.set.ListOrderedSetTest.testSerializeDeserializeThenCompare":217,"org.apache.commons.collections4.comparators.TransformingComparatorTest.testEqualsNull":1,"org.apache.commons.collections4.map.LRUMapTest.testKeySetRemoveAll":571,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedAdd":258,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testUnmodifiable":283,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray2":265,"org.apache.commons.collections4.map.SingletonMapTest.testMapToString":396,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testFullBagCompatibility":582,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToString":266,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionSize":224,"org.apache.commons.collections4.SetUtilsTest.testHashCode":276,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsKey":241,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiKeySetValuesOrder":294,"org.apache.commons.collections4.map.Flat3MapTest.testMapPut":621,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionContains":640,"org.apache.commons.collections4.QueueUtilsTest.testTransformedQueue":180,"org.apache.commons.collections4.map.CompositeMapTest.testAddComposited":478,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testFailFastKeySet":341,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionSize":189,"org.apache.commons.collections4.comparators.FixedOrderComparatorTest.testSerializeDeserializeThenCompare":605,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromMapIterator":529,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testCanonicalEmptyCollectionExists":138,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetHashCode":257,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionAdd":645,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testObjectHashCodeEqualsSelfHashCode":451,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testQueueOffer":84,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray":264,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetRemoveChangesMap":322,"org.apache.commons.collections4.MapUtilsTest.testLazyMapFactory":653,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiMapIteratorSet":295,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorNextRemovePrevious":46,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testNextKey":287,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError9":77,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError8":76,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError5":73,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":425,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError4":72,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError7":75,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError6":74,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError1":69,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testCanonicalFullCollectionExists":160,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testFullQueueSerialization":85,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError3":71,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError2":70,"org.apache.commons.collections4.set.CompositeSetTest.testContains":460,"org.apache.commons.collections4.CollectionUtilsTest.isFull":100,"org.apache.commons.collections4.list.TreeListTest.testListSetByIndexBoundsChecking2":512,"org.apache.commons.collections4.map.LRUMapTest.testMapPutAll":555,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAddAll":581,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetIteratorRemoveChangesMap":631,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesRemoveChangesMap":368,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIterator":219,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapGet":303,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionClear":195,"org.apache.commons.collections4.ListUtilsTest.testSelect":635,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorPreviousRemovePrevious":38,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionIsEmpty":92,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRetainAll":418,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesIteratorRemoveChangesMap":416,"org.apache.commons.collections4.list.SetUniqueListTest.testIntCollectionAddAll":34,"org.apache.commons.collections4.trie.PatriciaTrieTest.testPrefixMapRemoval":281,"org.apache.commons.collections4.IteratorUtilsTest.testArrayIterator":127,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testQueuePoll":82,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testPreviousKey":329,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains2":18,"org.apache.commons.collections4.CollectionUtilsTest.testDisjunctionAsSymmetricDifference":471,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains3":19,"org.apache.commons.collections4.map.LRUMapTest.testFailFastValues":540,"org.apache.commons.collections4.SplitMapUtilsTest.testReadableMap":111,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetRemoveAll":319,"org.apache.commons.collections4.map.StaticBucketMapTest.testKeySetRemoveChangesMap":455,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIteratorRemove":28,"org.apache.commons.collections4.PredicateUtilsTest.testNullIsTruePredicateEx1":110,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndexBoundsChecking2":47,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testCanonicalFullCollectionExists":148,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionRemove":96,"org.apache.commons.collections4.trie.PatriciaTrieTest.testPrefixMap":280,"org.apache.commons.collections4.map.LRUMapTest.testLastKey":535,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":297,"org.apache.commons.collections4.map.LRUMapTest.testAccessOrder":522,"org.apache.commons.collections4.SetUtilsTest.testEquals":277,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRetainAll":316,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapPutAll":309,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testDecorateFactory":254,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIteratorRemove":226,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetRemoveAll":323,"org.apache.commons.collections4.iterators.UnmodifiableMapIteratorTest.testDecorateFactory":516,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIndexedArray":143,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIsEmpty":194,"org.apache.commons.collections4.map.SingletonMapTest.testMapEquals":393,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiGetKey":289,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testRemove":158,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectHashCodeEqualsContract":152,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAllWithInitialList":26,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContains":589,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPut":441,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":48,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapRemove":310,"org.apache.commons.collections4.map.LRUMapTest.testMapIsEmpty":542,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCanonicalFullCollectionExists":275,"org.apache.commons.collections4.map.Flat3MapTest.testClone4":611,"org.apache.commons.collections4.map.Flat3MapTest.testKeySetRemoveChangesMap":626,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCanonicalEmptyCollectionExists":274,"org.apache.commons.collections4.map.Flat3MapTest.testClone2":610,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testQueueRemove":484,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray2":206,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":63,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testRemove":134,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorByIndex":41,"org.apache.commons.collections4.SetUtilsTest.testEmptyIfNull":278,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":428,"org.apache.commons.collections4.map.SingletonMapTest.testSimpleSerialization":404,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains3":313,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains2":312,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains1":311,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testReset":167,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetRemoveChangesMap":318,"org.apache.commons.collections4.collection.CompositeCollectionTest.testRemove":120,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testQueueRemove":80,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToString":225,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAddAll":214,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesRetainAll":370,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapRemove":358,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectEqualsSelf":159,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiPut":330,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRetainAll":197,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveAll":426,"org.apache.commons.collections4.list.SetUniqueListTest.testAddAll":35,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContains":228,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetIteratorRemoveChangesMap":321,"org.apache.commons.collections4.map.LRUMapTest.testMapPutNullValue":554,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testComparator":255,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectHashCodeEqualsContract":164,"org.apache.commons.collections4.map.LRUMapTest.testNextKey":536,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToString":586,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemove":102,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContainsAll":583,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRetainAll":124,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testBasics":8,"org.apache.commons.collections4.MapUtilsTest.testPopulateMap":202,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueElement":185,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveChangesMap":424,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorNextRemoveNext":54,"org.apache.commons.collections4.map.CompositeMapTest.testSerializeDeserializeThenCompare":252,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIsEmpty":498,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testSerializeDeserializeThenCompare":97,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesClearChangesMap":359,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testCanonicalFullCollectionExists":172,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToString":495,"org.apache.commons.collections4.list.SetUniqueListTest.testSerializeDeserializeThenCompare":65,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIteratorRemove":587,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContainsAll":187,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRemoveAll":643,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":67,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesIteratorRemoveChangesMap":371,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testObjectEqualsSelf":503,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":64,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIsEmpty":212,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapSize":345,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsKey":620,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorPreviousRemoveNext":43,"org.apache.commons.collections4.splitmap.TransformedSplitMapTest.testTransformedMap":112,"org.apache.commons.collections4.map.LRUMapTest.testMapPut":552,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiInverse":291,"org.apache.commons.collections4.map.LRUMapTest.testLRU":521,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIteratorSet":130,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testFirstKey":285,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPutNullValue":423,"org.apache.commons.collections4.map.CompositeMapTest.testMapGet":247,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testObjectEqualsSelf":445,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":33,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testObjectHashCodeEqualsSelfHashCode":509,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIteratorRemove":209,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testLastKey":410,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testSerializeDeserializeThenCompare":178,"org.apache.commons.collections4.list.TreeListTest.testListSetByIndexBoundsChecking":511,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRetainAll":123,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIndexedArray":155,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedAdd":496,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectEqualsSelf":147,"org.apache.commons.collections4.map.SingletonMapTest.testPreviousKey":387,"org.apache.commons.collections4.map.Flat3MapTest.testFailFastValues":108,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemove":216,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":56,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testQueueElement":83,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetClearChangesMap":559,"org.apache.commons.collections4.map.SingletonMapTest.testObjectHashCodeEqualsSelfHashCode":403,"org.apache.commons.collections4.PredicateUtilsTest.testAnyPredicateEx2":114,"org.apache.commons.collections4.map.SingletonMapTest.testCanonicalFullCollectionExists":406,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContainsAll":492,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectEqualsSelf":135,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testSerializeDeserializeThenCompare":154,"org.apache.commons.collections4.ListUtilsTest.testLongestCommonSubsequenceWithString":457,"org.apache.commons.collections4.PredicateUtilsTest.testAnyPredicateEx3":115,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionRemoveAll":650,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectHashCodeEqualsContract":176,"org.apache.commons.collections4.map.LRUMapTest.testRemoveLRU":523,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":301,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testDecorateFactory":407,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRemoveChangesMap":417,"org.apache.commons.collections4.ListUtilsTest.testLongestCommonSubsequence":456,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains3":562,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIterator":642,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testFailFastEntrySet":340,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testCanonicalFullCollectionExists":136,"org.apache.commons.collections4.map.MultiKeyMapTest.testLRUMultiKeyMap":519,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains1":560,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains2":561,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIterator":156,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testLastKey":327,"org.apache.commons.collections4.map.LRUMapTest.testValuesClearChangesMap":557,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionToArray2":87,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapGet":632,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromKeySet":532,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemove":6,"org.apache.commons.collections4.CollectionUtilsTest.disjunction":466,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapPutNullValue":308,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":298,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetIteratorRemoveChangesMap":422,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIterator":201,"org.apache.commons.collections4.PredicateUtilsTest.testAsPredicateTransformerEx1":0,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionToArray":651,"org.apache.commons.collections4.map.LRUMapTest.testRemoveLRUBlocksRemove":524,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRetainAll":634,"org.apache.commons.collections4.list.CursorableLinkedListTest.testContainsAll":637,"org.apache.commons.collections4.map.LRUMapTest.testMapRemove":556,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePoll":184,"org.apache.commons.collections4.set.CompositeSetTest.testObjectHashCodeEqualsContract":240,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionSize":263,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAllCollections427":27,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIsEmpty":261,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCollectionAddAll":93,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetEquals":203,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testEmptyQueueSerialization":489,"org.apache.commons.collections4.map.LRUMapTest.testMapToString":550,"org.apache.commons.collections4.set.MapBackedSet2Test.testOrdering":103,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapGet":440},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.LoopingListIterator:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e7e5175-3f2d-11e6-ae54-59fd666d1cc4","method":{"position":"org.apache.commons.collections4.set.ListOrderedSet:119","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.set.ListOrderedSet<E> listOrderedSet(final java.util.List<E> list) {\n    if (list == null) {\n        {\n            if (list == null) {\n                throw new java.lang.IllegalArgumentException(\"List must not be null\");\n            } \n            final java.util.Set<E> java.util.Set<E> = new java.util.HashSet<E>(list);\n            list.retainAll(set);\n            return new org.apache.commons.collections4.set.ListOrderedSet<E>(set , list);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"list"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.TransformerPredicate:48","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"8e7e9f96-3f2d-11e6-ae54-fdd9d91799f8","method":{"position":"org.apache.commons.collections4.functors.TransformerPredicate:47","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> transformerPredicate(final org.apache.commons.collections4.Transformer<? super T, java.lang.Boolean> transformer) {\n    if (transformer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (transformer == null) {\n                throw new java.lang.IllegalArgumentException(\"The transformer to call must not be null\");\n            } \n            return new org.apache.commons.collections4.functors.TransformerPredicate<T>(transformer);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"transformer":"transformer"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:269","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e7e9f97-3f2d-11e6-ae54-a7546feb118c","method":{"position":"org.apache.commons.collections4.list.LazyList:136","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.List<E> subList(final int fromIndex, final int toIndex) {\n    if ((toIndex - toIndex) > (toIndex - toIndex)) {\n        {\n            final java.util.List<E> java.util.List<E> = decorated().subList(fromIndex, toIndex);\n            return new org.apache.commons.collections4.list.LazyList<E>(sub , org.apache.commons.collections4.Factory<? extends E>);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start1":"toIndex","end2":"toIndex","end1":"toIndex","start2":"toIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:661","type":"CtBinaryOperatorImpl"},"failures":[1],"tindex":"8e7ec6a8-3f2d-11e6-ae54-a74116260cb9","method":{"position":"org.apache.commons.collections4.comparators.TransformingComparator:114","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object object) {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.collections4.comparators.TransformingComparator.this) == object) {\n                return true;\n            } \n            if (null == object) {\n                return false;\n            } \n            if (object.getClass().equals(org.apache.commons.collections4.comparators.TransformingComparator.this.getClass())) {\n                final org.apache.commons.collections4.comparators.TransformingComparator<?, ?> org.apache.commons.collections4.comparators.TransformingComparator<?, ?> = ((org.apache.commons.collections4.comparators.TransformingComparator<?, ?>)(object));\n                return null == (java.util.Comparator<O>) ? null == (comp.java.util.Comparator<?>) : (java.util.Comparator<O>.equals(comp.java.util.Comparator<?>)) && (null == (org.apache.commons.collections4.Transformer<? super I, ? extends O>)) ? null == (comp.org.apache.commons.collections4.Transformer<? super ?, ? extends ?>) : org.apache.commons.collections4.Transformer<? super I, ? extends O>.equals(comp.org.apache.commons.collections4.Transformer<? super ?, ? extends ?>);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longObject":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:420","type":"CtBinaryOperatorImpl"},"failures":[2,3,4,5,6],"tindex":"8e7ec6a9-3f2d-11e6-ae54-83725e15525d","method":{"position":"org.apache.commons.collections4.bag.CollectionBag:119","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object object) {\n    if (object == null) {\n        {\n            return remove(object, 1);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"k":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.OrPredicate:50","type":"CtBinaryOperatorImpl"},"failures":[7],"tindex":"8e7ec6aa-3f2d-11e6-ae54-87f1391f065a","method":{"position":"org.apache.commons.collections4.PredicateUtils:487","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> nullIsExceptionPredicate(final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if ((predicate == null) || (predicate == null)) {\n        {\n            return org.apache.commons.collections4.functors.NullIsExceptionPredicate.nullIsExceptionPredicate(predicate);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate1":"predicate","predicate2":"predicate"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.CollatingIterator:365","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e7eedbb-3f2d-11e6-ae54-03dfff29c544","method":{"position":"org.apache.commons.collections4.IteratorUtils:566","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Iterator<E> collatedIterator(final java.util.Comparator<? super E> comparator, final java.util.Iterator<? extends E>... iterators) {\n    if (comparator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.collections4.iterators.CollatingIterator<E>(comparator , iterators);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparator":"comparator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:1062","type":"CtBinaryOperatorImpl"},"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"8e7eedbc-3f2d-11e6-ae54-7996c30b3657","method":{"position":"org.apache.commons.collections4.map.ReferenceIdentityMap:219","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected boolean isEqualValue(final java.lang.Object value1, final java.lang.Object value2) {\n    if (value1 instanceof java.lang.Object[]) {\n        {\n            return value1 == value2;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"value1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.LoopingIterator:55","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e7eedbd-3f2d-11e6-ae54-43135d095dc1","method":{"position":"org.apache.commons.collections4.set.UnmodifiableSet:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1265","type":"CtBinaryOperatorImpl"},"failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"tindex":"8e7eedbe-3f2d-11e6-ae54-3d877b525a05","method":{"position":"org.apache.commons.collections4.list.AbstractListDecorator:74","type":"CtMethodImpl","sourcecode":"public boolean addAll(final int index, final java.util.Collection<? extends E> coll) {\n    if (index == (-1)) {\n        {\n            return decorated().addAll(index, coll);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:302","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e7f14cf-3f2d-11e6-ae54-ff73259f4335","method":{"position":"org.apache.commons.collections4.MapUtils:426","type":"CtMethodImpl","sourcecode":"public static <K>java.lang.Number getNumber(final java.util.Map<? super K, ?> map, final K key, final java.lang.Number defaultValue) {\n    if (defaultValue instanceof java.lang.Float) {\n        {\n            java.lang.Number java.lang.Number = org.apache.commons.collections4.MapUtils.getNumber(map, key);\n            if (answer == null) {\n                answer = defaultValue;\n            } \n            return answer;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"defaultValue"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:613","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e7f14d0-3f2d-11e6-ae54-815ce3acc5e8","method":{"position":"org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer:126","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isPrefix(final java.lang.String prefix, final int offsetInBits, final int lengthInBits, final java.lang.String key) {\n    if (lengthInBits == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((offsetInBits % (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)) != 0) || ((lengthInBits % (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)) != 0)) {\n                throw new java.lang.IllegalArgumentException(\"Cannot determine prefix outside of Character boundaries\");\n            } \n            final java.lang.String java.lang.String = prefix.substring((offsetInBits / (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)), (lengthInBits / (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)));\n            return key.startsWith(s1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"lengthInBits"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:184","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e7f14d1-3f2d-11e6-ae54-a1edf503b46e","method":{"position":"org.apache.commons.collections4.MapUtils:506","type":"CtMethodImpl","sourcecode":"public static <K>java.lang.Long getLong(final java.util.Map<? super K, ?> map, final K key, final java.lang.Long defaultValue) {\n    if (map != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Long java.lang.Long = org.apache.commons.collections4.MapUtils.getLong(map, key);\n            if (answer == null) {\n                answer = defaultValue;\n            } \n            return answer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ArrayStack:89","type":"CtBinaryOperatorImpl"},"failures":[68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"tindex":"8e7f14d2-3f2d-11e6-ae54-7912440d4930","method":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:325","type":"CtMethodImpl","sourcecode":"private int increment(int index) {\n    if (index <= 0) {\n        {\n            index++;\n            if (index >= (int)) {\n                index = 0;\n            } \n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:764","type":"CtBinaryOperatorImpl"},"failures":[102,103,104],"tindex":"8e7f3be3-3f2d-11e6-ae54-815321eac579","method":{"position":"org.apache.commons.collections4.set.MapBackedSet:130","type":"CtMethodImpl","sourcecode":"public boolean remove(final java.lang.Object obj) {\n    if (obj == null) {\n        {\n            final int int = java.util.Map<E, ? super V>.size();\n            java.util.Map<E, ? super V>.remove(obj);\n            return (java.util.Map<E, ? super V>.size()) != size;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"shortObject":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1255","type":"CtBinaryOperatorImpl"},"failures":[105,106,107,108,109],"tindex":"8e7f3be4-3f2d-11e6-ae54-8d4495e96514","method":{"position":"org.apache.commons.collections4.map.Flat3Map:437","type":"CtMethodImpl","sourcecode":"public V remove(final java.lang.Object key) {\n    if (key instanceof java.util.Map<?, ?>) {\n        {\n            if ((org.apache.commons.collections4.map.AbstractHashedMap<K, V>) != null) {\n                return org.apache.commons.collections4.map.AbstractHashedMap<K, V>.remove(key);\n            } \n            if ((int) == 0) {\n                return null;\n            } \n            if (key == null) {\n                switch (int) {\n                    case 3 :\n                        if ((K) == null) {\n                            final V V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 2;\n                            return old;\n                        } \n                        if ((K) == null) {\n                            final V V = V;\n                            int = int;\n                            K = K;\n                            V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 2;\n                            return old;\n                        } \n                        if ((K) == null) {\n                            final V V = V;\n                            int = int;\n                            K = K;\n                            V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 2;\n                            return old;\n                        } \n                        return null;\n                    case 2 :\n                        if ((K) == null) {\n                            final V V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 1;\n                            return old;\n                        } \n                        if ((K) == null) {\n                            final V V = V;\n                            int = int;\n                            K = K;\n                            V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 1;\n                            return old;\n                        } \n                        return null;\n                    case 1 :\n                        if ((K) == null) {\n                            final V V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 0;\n                            return old;\n                        } \n                }\n            } else {\n                if ((int) > 0) {\n                    final int int = key.hashCode();\n                    switch (int) {\n                        case 3 :\n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 2;\n                                return old;\n                            } \n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = int;\n                                K = K;\n                                V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 2;\n                                return old;\n                            } \n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = int;\n                                K = K;\n                                V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 2;\n                                return old;\n                            } \n                            return null;\n                        case 2 :\n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 1;\n                                return old;\n                            } \n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = int;\n                                K = K;\n                                V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 1;\n                                return old;\n                            } \n                            return null;\n                        case 1 :\n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 0;\n                                return old;\n                            } \n                    }\n                } \n            }\n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.ListIteratorWrapper:142","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e7f62f5-3f2d-11e6-ae54-43fd4fefcf63","method":{"position":"org.apache.commons.collections4.list.FixedSizeList:127","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic E remove(final int index) {\n    if (index < index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException(\"List is fixed size\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"wrappedIteratorIndex":"index","currentIndex":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.OrPredicate:50","type":"CtBinaryOperatorImpl"},"failures":[110],"tindex":"8e7f8a06-3f2d-11e6-ae54-b7aead72417e","method":{"position":"org.apache.commons.collections4.PredicateUtils:517","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> nullIsTruePredicate(final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if ((predicate == null) || (predicate == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.functors.NullIsTruePredicate.nullIsTruePredicate(predicate);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate1":"predicate","predicate2":"predicate"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.UnmodifiableMap:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e7f8a07-3f2d-11e6-ae54-2b2111a9c97e","method":{"position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected org.apache.commons.collections4.bidimap.DualTreeBidiMap<V, K> createBidiMap(final java.util.Map<V, K> normalMap, final java.util.Map<K, V> reverseMap, final org.apache.commons.collections4.BidiMap<K, V> inverseMap) {\n    if (reverseMap.isEmpty()) {\n        {\n            if (reverseMap instanceof org.apache.commons.collections4.IterableMap) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new org.apache.commons.collections4.bidimap.DualTreeBidiMap<V, K>(normalMap , reverseMap , inverseMap);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"reverseMap"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.CollectionBag:142","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e7f8a08-3f2d-11e6-ae54-4f6dda96c116","method":{"position":"org.apache.commons.collections4.map.LinkedMap:243","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsAll(final java.util.Collection<?> coll) {\n    if (coll != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.map.LinkedMap<K, ?>.keySet().containsAll(coll);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.NodeListIterator:48","type":"CtBinaryOperatorImpl"},"failures":[111,112],"tindex":"8e7f8a09-3f2d-11e6-ae54-918c04e6afe5","method":{"position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:79","type":"CtMethodImpl","sourcecode":"public V remove(final java.lang.Object key) {\n    if (key == null) {\n        {\n            return decorated().remove(key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:668","type":"CtBinaryOperatorImpl"},"failures":[113],"tindex":"8e7fb11a-3f2d-11e6-ae54-5d49472be0ab","method":{"position":"org.apache.commons.collections4.list.TransformedList:123","type":"CtMethodImpl","sourcecode":"public int indexOf(final java.lang.Object object) {\n    if (object != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return getList().indexOf(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key4":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:186","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e7fb11b-3f2d-11e6-ae54-cbea420aab90","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2014","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic boolean contains(final java.lang.Object o) {\n    if (o != null) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            final java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> = ((java.util.Map.Entry<K, V>)(o));\n            final K K = entry.getKey();\n            if (!(org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.inRange(key))) {\n                return false;\n            } \n            final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = getEntry(key);\n            return (node != null) && (org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(node.getValue(), entry.getValue()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:50","type":"CtBinaryOperatorImpl"},"failures":[114,115,116],"tindex":"8e7fb11c-3f2d-11e6-ae54-c398365b2cc1","method":{"position":"org.apache.commons.collections4.functors.AnyPredicate:52","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <T>org.apache.commons.collections4.Predicate<T> anyPredicate(final org.apache.commons.collections4.Predicate<? super T>... predicates) {\n    if (predicates == null) {\n        {\n            org.apache.commons.collections4.functors.FunctorUtils.validate(predicates);\n            if ((predicates.int) == 0) {\n                return org.apache.commons.collections4.functors.FalsePredicate.<T>falsePredicate();\n            } \n            if ((predicates.int) == 1) {\n                return ((org.apache.commons.collections4.Predicate<T>)(predicates[0]));\n            } \n            return new org.apache.commons.collections4.functors.AnyPredicate<T>(org.apache.commons.collections4.functors.FunctorUtils.copy(predicates));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicates":"predicates"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1467","type":"CtBinaryOperatorImpl"},"failures":[100],"tindex":"8e7fb11d-3f2d-11e6-ae54-0bfbe0ef7e4b","method":{"position":"org.apache.commons.collections4.CollectionUtils:1466","type":"CtMethodImpl","sourcecode":"public static boolean isFull(final java.util.Collection<? extends java.lang.Object> coll) {\n    if (coll == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (coll == null) {\n                throw new java.lang.NullPointerException(\"The collection must not be null\");\n            } \n            if (coll instanceof org.apache.commons.collections4.BoundedCollection) {\n                return ((org.apache.commons.collections4.BoundedCollection<?>)(coll)).isFull();\n            } \n            try {\n                final org.apache.commons.collections4.BoundedCollection<?> org.apache.commons.collections4.BoundedCollection<?> = org.apache.commons.collections4.collection.UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n                return bcoll.isFull();\n            } catch (final java.lang.IllegalArgumentException ex) {\n                return false;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.TreeList:86","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8e7fb11e-3f2d-11e6-ae54-0fd1585e507e","method":{"position":"org.apache.commons.collections4.list.TreeList:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final java.util.Collection<? extends E> c) {\n    if (!(c.isEmpty())) {\n        {\n            if (c.isEmpty()) {\n                return false;\n            } \n            int += c.size();\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(c);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = (org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null ? cTree : org.apache.commons.collections4.list.TreeList.AVLNode<E>.addAll(cTree, int);\n            int += c.size();\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:239","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e7fd82f-3f2d-11e6-ae54-b536fccada70","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2031","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic boolean remove(final java.lang.Object o) {\n    if (o instanceof java.lang.Short) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            final java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> = ((java.util.Map.Entry<K, V>)(o));\n            final K K = entry.getKey();\n            if (!(org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.inRange(key))) {\n                return false;\n            } \n            final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = getEntry(key);\n            if ((node != null) && (org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(node.getValue(), entry.getValue()))) {\n                removeEntry(node);\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:611","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e7fd830-3f2d-11e6-ae54-212982b1e429","method":{"position":"org.apache.commons.collections4.list.TreeList:100","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic E get(final int index) {\n    if (index >= index) {\n        {\n            checkInterval(index, 0, ((size()) - 1));\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(index).getValue();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"index","threshold":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.CompositeCollection:219","type":"CtBinaryOperatorImpl"},"failures":[117,118,119,120,121],"tindex":"8e7fd831-3f2d-11e6-ae54-755a35e63fbf","method":{"position":"org.apache.commons.collections4.collection.CompositeCollection:340","type":"CtMethodImpl","sourcecode":"public void setMutator(final org.apache.commons.collections4.collection.CompositeCollection.CollectionMutator<E> mutator) {\n    if (mutator == null) {\n        {\n            org.apache.commons.collections4.collection.CompositeCollection.this.org.apache.commons.collections4.collection.CompositeCollection.CollectionMutator<E> = mutator;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mutator":"mutator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.NullIsExceptionPredicate:47","type":"CtBinaryOperatorImpl"},"failures":[122],"tindex":"8e7fd832-3f2d-11e6-ae54-8d00a6eb64ab","method":{"position":"org.apache.commons.collections4.functors.AndPredicate:48","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> andPredicate(final org.apache.commons.collections4.Predicate<? super T> predicate1, final org.apache.commons.collections4.Predicate<? super T> predicate2) {\n    if (predicate1 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((predicate1 == null) || (predicate2 == null)) {\n                throw new java.lang.IllegalArgumentException(\"Predicate must not be null\");\n            } \n            return new org.apache.commons.collections4.functors.AndPredicate<T>(predicate1 , predicate2);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:448","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e7fff43-3f2d-11e6-ae54-1f1ba9ca7c63","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:565","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T extends java.lang.Comparable<T>>org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> lookup(final java.lang.Object data, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = null;\n            org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][dataElement.ordinal()];\n            while (node != null) {\n                final int int = org.apache.commons.collections4.bidimap.TreeBidiMap.compare(((T)(data)), ((T)(node.getData(dataElement))));\n                if (cmp == 0) {\n                    rval = node;\n                    break;\n                } else {\n                    node = cmp < 0 ? node.getLeft(dataElement) : node.getRight(dataElement);\n                }\n            }\n            return rval;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.SingletonMap:538","type":"CtBinaryOperatorImpl"},"failures":[123,124,125,126],"tindex":"8e7fff44-3f2d-11e6-ae54-f9cbc245f537","method":{"position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object object) {\n    if ((object instanceof java.util.Map) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == (org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator.this)) {\n                return true;\n            } \n            return java.util.Map.Entry<K, V>.equals(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:441","type":"CtBinaryOperatorImpl"},"failures":[127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179],"tindex":"8e7fff45-3f2d-11e6-ae54-c91264b27eea","method":{"position":"org.apache.commons.collections4.iterators.ArrayIterator:112","type":"CtMethodImpl","sourcecode":"protected void checkBound(final int bound, final int len, final java.lang.String type) {\n    if (len == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bound == 0) {\n                {\n                    if (bound > len) {\n                        throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + type) + \"s beyond the end of the array. \"));\n                    } \n                    if (bound < 0) {\n                        throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + type) + \"s before the start of the array. \"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"bound"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:1068","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e7fff46-3f2d-11e6-ae54-5b71a654d886","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:792","type":"CtMethodImpl","sourcecode":"public boolean removeAll(final java.lang.Object key1, final java.lang.Object key2, final java.lang.Object key3, final java.lang.Object key4) {\n    if (key4 instanceof java.util.Map) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            final org.apache.commons.collections4.MapIterator<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.MapIterator<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = mapIterator();\n            while (it.hasNext()) {\n                final org.apache.commons.collections4.keyvalue.MultiKey<? extends K> org.apache.commons.collections4.keyvalue.MultiKey<? extends K> = it.next();\n                if ((((((multi.size()) >= 4) && (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))) && (key2 == null ? (multi.getKey(1)) == null : key2.equals(multi.getKey(1)))) && (key3 == null ? (multi.getKey(2)) == null : key3.equals(multi.getKey(2)))) && (key4 == null ? (multi.getKey(3)) == null : key4.equals(multi.getKey(3)))) {\n                    it.remove();\n                    modified = true;\n                } \n            }\n            return modified;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"key4"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ArrayStack:107","type":"CtBinaryOperatorImpl"},"failures":[127],"tindex":"8e802657-3f2d-11e6-ae54-49b132285e24","method":{"position":"org.apache.commons.collections4.IteratorUtils:316","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end) {\n    if (start < 0) {\n        {\n            return new org.apache.commons.collections4.iterators.ObjectArrayIterator<E>(array , start , end);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"start"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.queue.TransformedQueue:77","type":"CtBinaryOperatorImpl"},"failures":[180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201],"tindex":"8e802658-3f2d-11e6-ae54-611283548e6d","method":{"position":"org.apache.commons.collections4.queue.TransformedQueue:53","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.queue.TransformedQueue<E> transformingQueue(final java.util.Queue<E> queue, final org.apache.commons.collections4.Transformer<? super E, ? extends E> transformer) {\n    if ((queue.size()) > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.collections4.queue.TransformedQueue<E>(queue , transformer);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"queue":"queue"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:863","type":"CtBinaryOperatorImpl"},"failures":[202],"tindex":"8e802659-3f2d-11e6-ae54-3b812b2e7e03","method":{"position":"org.apache.commons.collections4.MapUtils:1698","type":"CtMethodImpl","sourcecode":"public static <K, V, E>void populateMap(final java.util.Map<K, V> map, final java.lang.Iterable<? extends E> elements, final org.apache.commons.collections4.Transformer<E, K> keyTransformer, final org.apache.commons.collections4.Transformer<E, V> valueTransformer) {\n    if (map != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Iterator<? extends E> java.util.Iterator<? extends E> = elements.iterator();\n            while (iter.hasNext()) {\n                final E E = iter.next();\n                map.put(keyTransformer.transform(temp), valueTransformer.transform(temp));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:768","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e80265a-3f2d-11e6-ae54-67c3e2eec23b","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:767","type":"CtMethodImpl","sourcecode":"private static void makeBlack(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<?, ?> node, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n    if (node != null) {\n        {\n            if (node != null) {\n                node.setBlack(dataElement);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ComparatorUtils:153","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e80265b-3f2d-11e6-ae54-7919d16891ce","method":{"position":"org.apache.commons.collections4.ComparatorUtils:152","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <E>java.util.Comparator<E> nullLowComparator(java.util.Comparator<E> comparator) {\n    if (comparator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (comparator == null) {\n                comparator = org.apache.commons.collections4.ComparatorUtils.org.apache.commons.collections4.ComparatorUtils.java.util.Comparator;\n            } \n            return new org.apache.commons.collections4.comparators.NullComparator<E>(comparator , false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparator":"comparator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.set.UnmodifiableSet:53","type":"CtBinaryOperatorImpl"},"failures":[203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236],"tindex":"8e80265c-3f2d-11e6-ae54-07bfa01eee54","method":{"position":"org.apache.commons.collections4.set.ListOrderedSet:202","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll == null) {\n        {\n            if (coll instanceof org.apache.commons.collections4.Unmodifiable) {\n                {\n                    boolean boolean = false;\n                    for (final E E : coll) {\n                        result |= add(e);\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.set.CompositeSet:283","type":"CtBinaryOperatorImpl"},"failures":[237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252],"tindex":"8e804d6d-3f2d-11e6-ae54-cfb10be9991f","method":{"position":"org.apache.commons.collections4.set.CompositeSet:245","type":"CtMethodImpl","sourcecode":"public boolean containsAll(final java.util.Collection<?> coll) {\n    if ((coll.size()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final java.lang.Object java.lang.Object : coll) {\n                if ((contains(item)) == false) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1261","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e804d6e-3f2d-11e6-ae54-1bc63703d279","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:163","type":"CtMethodImpl","sourcecode":"public boolean containsKey(final java.lang.Object key) {\n    if (key instanceof java.util.Iterator<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.checkKey(key);\n            return (lookupKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.set.UnmodifiableSortedSet:56","type":"CtBinaryOperatorImpl"},"failures":[253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279],"tindex":"8e804d6f-3f2d-11e6-ae54-bb0412228868","method":{"position":"org.apache.commons.collections4.set.UnmodifiableSortedSet:55","type":"CtMethodImpl","sourcecode":"public static <E>java.util.SortedSet<E> unmodifiableSortedSet(final java.util.SortedSet<E> set) {\n    if (set instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            if (set instanceof org.apache.commons.collections4.Unmodifiable) {\n                return set;\n            } \n            return new org.apache.commons.collections4.set.UnmodifiableSortedSet<E>(set);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set":"set"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:980","type":"CtUnaryOperatorImpl"},"failures":[280,281],"tindex":"8e804d70-3f2d-11e6-ae54-cd1f0d4daac4","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1240","type":"CtMethodImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> nextEntryInSubtree(final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> node, final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> parentOfSubtree) {\n    if (!(node.isEmpty())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node == null) {\n                return firstEntry();\n            } else {\n                return nextEntryImpl(node.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, node, parentOfSubtree);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:799","type":"CtBinaryOperatorImpl"},"failures":[282],"tindex":"8e804d71-3f2d-11e6-ae54-ed9d8fd260e4","method":{"position":"org.apache.commons.collections4.CollectionUtils:823","type":"CtMethodImpl","sourcecode":"public static <C>int countMatches(final java.lang.Iterable<C> input, final org.apache.commons.collections4.Predicate<? super C> predicate) {\n    if (input instanceof java.util.List<?>) {\n        {\n            int int = 0;\n            if ((input != null) && (predicate != null)) {\n                for (final C C : input) {\n                    if (predicate.evaluate(o)) {\n                        count++;\n                    } \n                }\n            } \n            return count;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collection":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:257","type":"CtBinaryOperatorImpl"},"failures":[283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379],"tindex":"8e807482-3f2d-11e6-ae54-9b11421add0d","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1243","type":"CtMethodImpl","sourcecode":"private static void checkKeyAndValue(final java.lang.Object key, final java.lang.Object value) {\n    if (value == null) {\n        {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.checkKey(key);\n            org.apache.commons.collections4.bidimap.TreeBidiMap.checkValue(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:1084","type":"CtInvocationImpl"},"failures":[],"tindex":"8e807483-3f2d-11e6-ae54-29fd53335f47","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:568","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.Object value) {\n    if (value.isAssignableFrom(value.getReturnType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.map.ListOrderedMap.KeySetView.this.org.apache.commons.collections4.map.ListOrderedMap<K, java.lang.Object>.containsKey(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Iterator.class":"value","method":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.StaticBucketMap:154","type":"CtBinaryOperatorImpl"},"failures":[380,381],"tindex":"8e807484-3f2d-11e6-ae54-3db4d34c7832","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:692","type":"CtMethodImpl","sourcecode":"protected boolean isEqualKey(final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> entry, final java.lang.Object key1, final java.lang.Object key2, final java.lang.Object key3, final java.lang.Object key4, final java.lang.Object key5) {\n    if (key2 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.keyvalue.MultiKey<? extends K> org.apache.commons.collections4.keyvalue.MultiKey<? extends K> = entry.getKey();\n            return ((((((multi.size()) == 5) && ((key1 == (multi.getKey(0))) || ((key1 != null) && (key1.equals(multi.getKey(0)))))) && ((key2 == (multi.getKey(1))) || ((key2 != null) && (key2.equals(multi.getKey(1)))))) && ((key3 == (multi.getKey(2))) || ((key3 != null) && (key3.equals(multi.getKey(2)))))) && ((key4 == (multi.getKey(3))) || ((key4 != null) && (key4.equals(multi.getKey(3)))))) && ((key5 == (multi.getKey(4))) || ((key5 != null) && (key5.equals(multi.getKey(4)))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:161","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e807485-3f2d-11e6-ae54-593107a9d455","method":{"position":"org.apache.commons.collections4.comparators.ComparatorChain:196","type":"CtMethodImpl","sourcecode":"public void setForwardSort(final int index) {\n    if (index == index) {\n        {\n            checkLocked();\n            java.util.BitSet.clear(index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"index","end":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.SetUtils:117","type":"CtBinaryOperatorImpl"},"failures":[382],"tindex":"8e807486-3f2d-11e6-ae54-6dd715391656","method":{"position":"org.apache.commons.collections4.ListUtils:281","type":"CtMethodImpl","sourcecode":"public static int hashCodeForList(final java.util.Collection<?> list) {\n    if (list == list) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (list == null) {\n                return 0;\n            } \n            int int = 1;\n            final java.util.Iterator<?> java.util.Iterator<?> = list.iterator();\n            while (it.hasNext()) {\n                final java.lang.Object java.lang.Object = it.next();\n                hashCode = (31 * hashCode) + (obj == null ? 0 : obj.hashCode());\n            }\n            return hashCode;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set2":"list","set1":"list"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:172","type":"CtInvocationImpl"},"failures":[],"tindex":"8e809b97-3f2d-11e6-ae54-113154cc9e78","method":{"position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected org.apache.commons.collections4.bidimap.DualTreeBidiMap<V, K> createBidiMap(final java.util.Map<V, K> normalMap, final java.util.Map<K, V> reverseMap, final org.apache.commons.collections4.BidiMap<K, V> inverseMap) {\n    if (reverseMap.isEmpty()) {\n        {\n            if (reverseMap instanceof org.apache.commons.collections4.IterableMap) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new org.apache.commons.collections4.bidimap.DualTreeBidiMap<V, K>(normalMap , reverseMap , inverseMap);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"hm":"reverseMap"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.ChainedTransformer:71","type":"CtBinaryOperatorImpl"},"failures":[383],"tindex":"8e809b98-3f2d-11e6-ae54-278e28df6716","method":{"position":"org.apache.commons.collections4.functors.ChainedTransformer:70","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <T>org.apache.commons.collections4.Transformer<T, T> chainedTransformer(final java.util.Collection<? extends org.apache.commons.collections4.Transformer<T, T>> transformers) {\n    if (transformers == null) {\n        {\n            if (transformers == null) {\n                throw new java.lang.IllegalArgumentException(\"Transformer collection must not be null\");\n            } \n            if ((transformers.size()) == 0) {\n                return org.apache.commons.collections4.functors.NOPTransformer.<T>nopTransformer();\n            } \n            final org.apache.commons.collections4.Transformer<T, T>[] org.apache.commons.collections4.Transformer<T, T>[] = transformers.toArray(new org.apache.commons.collections4.Transformer[transformers.size()]);\n            org.apache.commons.collections4.functors.FunctorUtils.validate(cmds);\n            return new org.apache.commons.collections4.functors.ChainedTransformer<T>(false , cmds);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"transformers":"transformers"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.NodeListIterator:48","type":"CtBinaryOperatorImpl"},"failures":[335],"tindex":"8e809b99-3f2d-11e6-ae54-a1ec9ba6c414","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:300","type":"CtMethodImpl","sourcecode":"public K removeValue(final java.lang.Object value) {\n    if (value == null) {\n        {\n            return doRemoveValue(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.SetUtils:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e809b9a-3f2d-11e6-ae54-df3ee38c4590","method":{"position":"org.apache.commons.collections4.queue.UnmodifiableQueue:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean retainAll(final java.util.Collection<?> coll) {\n    if (((coll == null) || (coll == null)) || ((set1.size()) != (set2.size()))) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set2":"coll","set1":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.LoopingListIterator:86","type":"CtInvocationImpl"},"failures":[],"tindex":"8e809b9b-3f2d-11e6-ae54-7794940d94ba","method":{"position":"org.apache.commons.collections4.ListUtils:386","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> synchronizedList(final java.util.List<E> list) {\n    if (list.isEmpty()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.Collections.synchronizedList(list);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"list"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap:57","type":"CtBinaryOperatorImpl"},"failures":[384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452],"tindex":"8e809b9c-3f2d-11e6-ae54-e39cc05c934e","method":{"position":"org.apache.commons.collections4.map.UnmodifiableOrderedMap:60","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.OrderedMap<K, V> unmodifiableOrderedMap(final org.apache.commons.collections4.OrderedMap<? extends K, ? extends V> map) {\n    if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final org.apache.commons.collections4.OrderedMap<K, V> org.apache.commons.collections4.OrderedMap<K, V> = ((org.apache.commons.collections4.OrderedMap<K, V>)(map));\n                return tmpMap;\n            } \n            return new org.apache.commons.collections4.map.UnmodifiableOrderedMap<K, V>(map);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.ComparatorPredicate:126","type":"CtBinaryOperatorImpl"},"failures":[453,454],"tindex":"8e80c2ad-3f2d-11e6-ae54-31adf89d74d9","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:518","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.map.ListOrderedMap.ValuesView.this.org.apache.commons.collections4.map.ListOrderedMap<java.lang.Object, V>.containsValue(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"criterion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:320","type":"CtBinaryOperatorImpl"},"failures":[455],"tindex":"8e80c2ae-3f2d-11e6-ae54-e96a56add654","method":{"position":"org.apache.commons.collections4.map.StaticBucketMap:631","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object obj) {\n    if (obj == null) {\n        {\n            final int int = getHash(obj);\n            synchronized(org.apache.commons.collections4.map.StaticBucketMap.Lock[][hash]) {\n                for (org.apache.commons.collections4.map.StaticBucketMap.Node<K, V> org.apache.commons.collections4.map.StaticBucketMap.Node<K, V> = org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>[][hash] ; n != null ; n = n.org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>) {\n                    final java.lang.Object java.lang.Object = n.getKey();\n                    if ((k == obj) || ((k != null) && (k.equals(obj)))) {\n                        org.apache.commons.collections4.map.StaticBucketMap.this.remove(k);\n                        return true;\n                    } \n                }\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:278","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e80c2af-3f2d-11e6-ae54-7927e97c6da7","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1729","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(final java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(inRange(castKey(key)))) {\n                return null;\n            } \n            return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.get(key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:607","type":"CtBinaryOperatorImpl"},"failures":[112],"tindex":"8e80c2b0-3f2d-11e6-ae54-d30164fcdce4","method":{"position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:67","type":"CtMethodImpl","sourcecode":"public boolean containsValue(final java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return decorated().containsValue(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"byteObject":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.ComparatorChain:309","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e80c2b1-3f2d-11e6-ae54-a55f4a849919","method":{"position":"org.apache.commons.collections4.iterators.CollatingIterator:382","type":"CtMethodImpl","sourcecode":"private boolean anyValueSet(final java.util.BitSet set) {\n    if (null != set) {\n        {\n            for (int int = 0 ; i < (set.size()) ; i++) {\n                if (set.get(i)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"orderingBits":"set"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.LoopingListIterator:86","type":"CtInvocationImpl"},"failures":[456,457],"tindex":"8e80c2b2-3f2d-11e6-ae54-bdb609e96f76","method":{"position":"org.apache.commons.collections4.ListUtils:546","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> longestCommonSubsequence(final java.util.List<E> a, final java.util.List<E> b, final org.apache.commons.collections4.Equator<? super E> equator) {\n    if (a.isEmpty()) {\n        {\n            if ((a == null) || (b == null)) {\n                throw new java.lang.IllegalArgumentException(\"List must not be null\");\n            } \n            if (equator == null) {\n                throw new java.lang.IllegalArgumentException(\"Equator must not be null\");\n            } \n            final org.apache.commons.collections4.sequence.SequencesComparator<E> org.apache.commons.collections4.sequence.SequencesComparator<E> = new org.apache.commons.collections4.sequence.SequencesComparator<E>(a , b , equator);\n            final org.apache.commons.collections4.sequence.EditScript<E> org.apache.commons.collections4.sequence.EditScript<E> = comparator.getScript();\n            final org.apache.commons.collections4.ListUtils.LcsVisitor<E> org.apache.commons.collections4.ListUtils.LcsVisitor<E> = new org.apache.commons.collections4.ListUtils.LcsVisitor<E>();\n            script.visit(visitor);\n            return visitor.getSubSequence();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"a"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1105","type":"CtBinaryOperatorImpl"},"failures":[458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479],"tindex":"8e80e9c3-3f2d-11e6-ae54-8d7f99841122","method":{"position":"org.apache.commons.collections4.CollectionUtils:1104","type":"CtMethodImpl","sourcecode":"public static <C>boolean addAll(final java.util.Collection<C> collection, final java.lang.Iterable<? extends C> iterable) {\n    if (collection instanceof java.util.List<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (iterable instanceof java.util.Collection<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (iterable instanceof java.util.Collection<?>) {\n                        return collection.addAll(((java.util.Collection<? extends C>)(iterable)));\n                    } \n                    return org.apache.commons.collections4.CollectionUtils.addAll(collection, iterable.iterator());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterable":"iterable"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:344","type":"CtBinaryOperatorImpl"},"failures":[480],"tindex":"8e80e9c4-3f2d-11e6-ae54-a574ca65bd07","method":{"position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:146","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean retainAll(final java.util.Collection<?> coll) {\n    if (coll != null) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.FilterListIterator:129","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8e80e9c5-3f2d-11e6-ae54-3f24a5e061ce","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1802","type":"CtMethodImpl","sourcecode":"protected boolean inFromRange(final K key, final boolean forceInclusive) {\n    if (!forceInclusive) {\n        {\n            final K K = getFromKey();\n            final boolean boolean = isFromInclusive();\n            final int int = getKeyAnalyzer().compare(key, fromKey);\n            if (fromInclusive || forceInclusive) {\n                return ret >= 0;\n            } else {\n                return ret > 0;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nextObjectSet":"forceInclusive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.queue.UnmodifiableQueue:55","type":"CtBinaryOperatorImpl"},"failures":[481,482,180,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509],"tindex":"8e80e9c6-3f2d-11e6-ae54-25a1a19daa8e","method":{"position":"org.apache.commons.collections4.queue.UnmodifiableQueue:54","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Queue<E> unmodifiableQueue(final java.util.Queue<? extends E> queue) {\n    if (queue instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            if (queue instanceof org.apache.commons.collections4.Unmodifiable) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final java.util.Queue<E> java.util.Queue<E> = ((java.util.Queue<E>)(queue));\n                return tmpQueue;\n            } \n            return new org.apache.commons.collections4.queue.UnmodifiableQueue<E>(queue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"queue":"queue"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:256","type":"CtBinaryOperatorImpl"},"failures":[510,511,512,513],"tindex":"8e8110d7-3f2d-11e6-ae54-a7e59ef040ec","method":{"position":"org.apache.commons.collections4.list.TreeList:243","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic E set(final int index, final E obj) {\n    if ((index < 0) || (index >= index)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            checkInterval(index, 0, ((size()) - 1));\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(index);\n            final E E = node.E;\n            node.setValue(obj);\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sz":"index","index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.UnmodifiableBag:59","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e8110d8-3f2d-11e6-ae54-f557cfc843df","method":{"position":"org.apache.commons.collections4.IteratorUtils:744","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.ResettableIterator<E> loopingIterator(final java.util.Collection<? extends E> coll) {\n    if (coll instanceof org.apache.commons.collections4.Unmodifiable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (coll == null) {\n                throw new java.lang.NullPointerException(\"Collection must not be null\");\n            } \n            return new org.apache.commons.collections4.iterators.LoopingIterator<E>(coll);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bag":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:320","type":"CtBinaryOperatorImpl"},"failures":[514,515],"tindex":"8e8110d9-3f2d-11e6-ae54-2d086e54b743","method":{"position":"org.apache.commons.collections4.list.UnmodifiableList:138","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic E set(final int index, final E object) {\n    if (index == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapSize":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:215","type":"CtBinaryOperatorImpl"},"failures":[128],"tindex":"8e8110da-3f2d-11e6-ae54-85455870b831","method":{"position":"org.apache.commons.collections4.IteratorUtils:364","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.ResettableListIterator<E> arrayListIterator(final java.lang.Object array) {\n    if (array == null) {\n        {\n            return new org.apache.commons.collections4.iterators.ArrayListIterator<E>(array);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.UnmodifiableMapIterator:50","type":"CtBinaryOperatorImpl"},"failures":[516],"tindex":"8e8110db-3f2d-11e6-ae54-bd0ea1fb8bf5","method":{"position":"org.apache.commons.collections4.iterators.UnmodifiableMapIterator:45","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.MapIterator<K, V> unmodifiableMapIterator(final org.apache.commons.collections4.MapIterator<? extends K, ? extends V> iterator) {\n    if (iterator instanceof org.apache.commons.collections4.Unmodifiable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (iterator == null) {\n                throw new java.lang.IllegalArgumentException(\"MapIterator must not be null\");\n            } \n            if (iterator instanceof org.apache.commons.collections4.Unmodifiable) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final org.apache.commons.collections4.MapIterator<K, V> org.apache.commons.collections4.MapIterator<K, V> = ((org.apache.commons.collections4.MapIterator<K, V>)(iterator));\n                return tmpIterator;\n            } \n            return new org.apache.commons.collections4.iterators.UnmodifiableMapIterator<K, V>(iterator);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterator":"iterator"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap:57","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e8110dc-3f2d-11e6-ae54-c5f89c70de3f","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:238","type":"CtMethodImpl","sourcecode":"public void putAll(final java.util.Map<? extends K, ? extends V> map) {\n    if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final java.util.Map.Entry<? extends K, ? extends V> java.util.Map.Entry<? extends K, ? extends V> : map.entrySet()) {\n                put(e.getKey(), e.getValue());\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.SynchronizedCollection:72","type":"CtBinaryOperatorImpl"},"failures":[517,518],"tindex":"8e8137ed-3f2d-11e6-ae54-ddcb81c6d825","method":{"position":"org.apache.commons.collections4.ListUtils:352","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> removeAll(final java.util.Collection<E> collection, final java.util.Collection<?> remove) {\n    if (collection == null) {\n        {\n            final java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n            for (final E E : collection) {\n                if (!(remove.contains(obj))) {\n                    list.add(obj);\n                } \n            }\n            return list;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collection":"collection"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:658","type":"CtBinaryOperatorImpl"},"failures":[519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577],"tindex":"8e8137ee-3f2d-11e6-ae54-73babe4f3f29","method":{"position":"org.apache.commons.collections4.map.LRUMap:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void addMapping(final int hashIndex, final int hashCode, final K key, final V value) {\n    if (hashCode <= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (isFull()) {\n                org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                boolean boolean = false;\n                if (boolean) {\n                    while ((reuse != (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) && (reuse != null)) {\n                        if (removeLRU(reuse)) {\n                            removeLRUEntry = true;\n                            break;\n                        } \n                        reuse = reuse.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                    }\n                    if (reuse == null) {\n                        throw new java.lang.IllegalStateException((((((((((((((\"Entry.after=null, header.after\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\") + key) + \" value=\") + value) + \" size=\") + (int)) + \" maxSize=\") + (int)) + \" Please check that your keys are immutable, and that you have used synchronization properly.\") + \" If so, then please report this to dev@commons.apache.org as a bug.\"));\n                    } \n                } else {\n                    removeLRUEntry = removeLRU(reuse);\n                }\n                if (removeLRUEntry) {\n                    if (reuse == null) {\n                        throw new java.lang.IllegalStateException((((((((((((((\"reuse=null, header.after=\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\") + key) + \" value=\") + value) + \" size=\") + (int)) + \" maxSize=\") + (int)) + \" Please check that your keys are immutable, and that you have used synchronization properly.\") + \" If so, then please report this to dev@commons.apache.org as a bug.\"));\n                    } \n                    reuseMapping(reuse, hashIndex, hashCode, key, value);\n                } else {\n                    super.addMapping(hashIndex, hashCode, key, value);\n                }\n            } else {\n                super.addMapping(hashIndex, hashCode, key, value);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"hashCode"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.InstantiateFactory:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e8137ef-3f2d-11e6-ae54-331ffa1d8672","method":{"position":"org.apache.commons.collections4.functors.InstantiateFactory:55","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Factory<T> instantiateFactory(final java.lang.Class<T> classToInstantiate, final java.lang.Class<?>[] paramTypes, final java.lang.Object[] args) {\n    if (classToInstantiate == null) {\n        {\n            if (classToInstantiate == null) {\n                throw new java.lang.IllegalArgumentException(\"Class to instantiate must not be null\");\n            } \n            if ((((paramTypes == null) && (args != null)) || ((paramTypes != null) && (args == null))) || (((paramTypes != null) && (args != null)) && ((paramTypes.int) != (args.int)))) {\n                throw new java.lang.IllegalArgumentException(\"Parameter types must match the arguments\");\n            } \n            if ((paramTypes == null) || ((paramTypes.int) == 0)) {\n                return new org.apache.commons.collections4.functors.InstantiateFactory<T>(classToInstantiate);\n            } \n            return new org.apache.commons.collections4.functors.InstantiateFactory<T>(classToInstantiate , paramTypes , args);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classToInstantiate":"classToInstantiate"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.CollatingIterator:252","type":"CtBinaryOperatorImpl"},"failures":[41,578],"tindex":"8e815f00-3f2d-11e6-ae54-d140ac49c3c5","method":{"position":"org.apache.commons.collections4.list.AbstractListDecorator:94","type":"CtMethodImpl","sourcecode":"public java.util.ListIterator<E> listIterator(final int index) {\n    if (index == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return decorated().listIterator(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"leastIndex":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:92","type":"CtBinaryOperatorImpl"},"failures":[579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598],"tindex":"8e815f01-3f2d-11e6-ae54-13ca58987c5a","method":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:108","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll instanceof org.apache.commons.collections4.collection.SynchronizedCollection) {\n        {\n            boolean boolean = false;\n            final java.util.Iterator<? extends E> java.util.Iterator<? extends E> = coll.iterator();\n            while (i.hasNext()) {\n                final boolean boolean = add(i.next(), 1);\n                changed = changed || added;\n            }\n            return changed;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.LRUMap:128","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e815f02-3f2d-11e6-ae54-0765018f6e5e","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:350","type":"CtMethodImpl","sourcecode":"private boolean selectR(final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> h, final int bitIndex, final K key, final int lengthInBits, final org.apache.commons.collections4.trie.AbstractPatriciaTrie.Reference<java.util.Map.Entry<K, V>> reference) {\n    if (lengthInBits < 1) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((h.int) <= bitIndex) {\n                if (!(h.isEmpty())) {\n                    reference.set(h);\n                    return false;\n                } \n                return true;\n            } \n            if (!(isBitSet(key, h.int, lengthInBits))) {\n                if (selectR(h.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, h.int, key, lengthInBits, reference)) {\n                    return selectR(h.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, h.int, key, lengthInBits, reference);\n                } \n            } else {\n                if (selectR(h.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, h.int, key, lengthInBits, reference)) {\n                    return selectR(h.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, h.int, key, lengthInBits, reference);\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"maxSize":"lengthInBits"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:320","type":"CtBinaryOperatorImpl"},"failures":[599,600],"tindex":"8e815f03-3f2d-11e6-ae54-372428480acb","method":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:227","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsValue(final java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            purgeBeforeRead();\n            if (value == null) {\n                return false;\n            } \n            return super.containsValue(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:97","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e815f04-3f2d-11e6-ae54-f55df172a186","method":{"position":"org.apache.commons.collections4.PredicateUtils:289","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> allPredicate(final java.util.Collection<? extends org.apache.commons.collections4.Predicate<T>> predicates) {\n    if (predicates == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.functors.AllPredicate.allPredicate(predicates);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicates":"predicates"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:181","type":"CtBinaryOperatorImpl"},"failures":[383],"tindex":"8e815f05-3f2d-11e6-ae54-9928f2f6cd51","method":{"position":"org.apache.commons.collections4.functors.FunctorUtils:180","type":"CtMethodImpl","sourcecode":"static void validate(final org.apache.commons.collections4.Transformer<?, ?>... transformers) {\n    if (transformers == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (transformers == null) {\n                throw new java.lang.IllegalArgumentException(\"The transformer array must not be null\");\n            } \n            for (int int = 0 ; i < (transformers.int) ; i++) {\n                if ((transformers[i]) == null) {\n                    throw new java.lang.IllegalArgumentException(((\"The transformer array must not contain a null transformer, index \" + i) + \" was null\"));\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"transformers":"transformers"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap:57","type":"CtBinaryOperatorImpl"},"failures":[438],"tindex":"8e818616-3f2d-11e6-ae54-5fc64c6b97e4","method":{"position":"org.apache.commons.collections4.map.UnmodifiableOrderedMap:126","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void putAll(final java.util.Map<? extends K, ? extends V> mapToCopy) {\n    if (mapToCopy instanceof org.apache.commons.collections4.Unmodifiable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"mapToCopy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:816","type":"CtBinaryOperatorImpl"},"failures":[601,602],"tindex":"8e818617-3f2d-11e6-ae54-bf36774d63d5","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:815","type":"CtMethodImpl","sourcecode":"protected void checkKey(final org.apache.commons.collections4.keyvalue.MultiKey<?> key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                throw new java.lang.NullPointerException(\"Key must not be null\");\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:420","type":"CtBinaryOperatorImpl"},"failures":[603,604,605],"tindex":"8e818618-3f2d-11e6-ae54-9f7a077e7ab0","method":{"position":"org.apache.commons.collections4.comparators.FixedOrderComparator:279","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object object) {\n    if (object == null) {\n        {\n            if ((org.apache.commons.collections4.comparators.FixedOrderComparator.this) == object) {\n                return true;\n            } \n            if (null == object) {\n                return false;\n            } \n            if (object.getClass().equals(org.apache.commons.collections4.comparators.FixedOrderComparator.this.getClass())) {\n                final org.apache.commons.collections4.comparators.FixedOrderComparator<?> org.apache.commons.collections4.comparators.FixedOrderComparator<?> = ((org.apache.commons.collections4.comparators.FixedOrderComparator<?>)(object));\n                return null == (java.util.Map<T, java.lang.Integer>) ? null == (comp.java.util.Map<?, java.lang.Integer>) : (java.util.Map<T, java.lang.Integer>.equals(comp.java.util.Map<?, java.lang.Integer>)) && (null == (org.apache.commons.collections4.comparators.FixedOrderComparator.UnknownObjectBehavior)) ? null == (comp.org.apache.commons.collections4.comparators.FixedOrderComparator.UnknownObjectBehavior) : ((((org.apache.commons.collections4.comparators.FixedOrderComparator.UnknownObjectBehavior) == (comp.org.apache.commons.collections4.comparators.FixedOrderComparator.UnknownObjectBehavior)) && ((int) == (comp.int))) && ((boolean) == (comp.boolean))) && ((org.apache.commons.collections4.comparators.FixedOrderComparator.UnknownObjectBehavior) == (comp.org.apache.commons.collections4.comparators.FixedOrderComparator.UnknownObjectBehavior));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"k":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1330","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e818619-3f2d-11e6-ae54-c1ec92515e15","method":{"position":"org.apache.commons.collections4.map.MultiValueMap:210","type":"CtMethodImpl","sourcecode":"public boolean removeMapping(final java.lang.Object key, final java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Collection<V> java.util.Collection<V> = getCollection(key);\n            if (valuesForKey == null) {\n                return false;\n            } \n            final boolean boolean = valuesForKey.remove(value);\n            if (removed == false) {\n                return false;\n            } \n            if (valuesForKey.isEmpty()) {\n                remove(key);\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:546","type":"CtBinaryOperatorImpl"},"failures":[606,607],"tindex":"8e81861a-3f2d-11e6-ae54-073a8d69eec9","method":{"position":"org.apache.commons.collections4.map.LinkedMap:143","type":"CtMethodImpl","sourcecode":"public K get(final int index) {\n    if (index > index) {\n        {\n            return getEntry(index).getKey();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"index","index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:218","type":"CtBinaryOperatorImpl"},"failures":[608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631],"tindex":"8e81861b-3f2d-11e6-ae54-7183553ccba5","method":{"position":"org.apache.commons.collections4.map.Flat3Map:197","type":"CtMethodImpl","sourcecode":"public boolean containsKey(final java.lang.Object key) {\n    if (key instanceof java.lang.Byte) {\n        {\n            if ((org.apache.commons.collections4.map.AbstractHashedMap<K, V>) != null) {\n                return org.apache.commons.collections4.map.AbstractHashedMap<K, V>.containsKey(key);\n            } \n            if (key == null) {\n                switch (int) {\n                    case 3 :\n                        if ((K) == null) {\n                            return true;\n                        } \n                    case 2 :\n                        if ((K) == null) {\n                            return true;\n                        } \n                    case 1 :\n                        if ((K) == null) {\n                            return true;\n                        } \n                }\n            } else {\n                if ((int) > 0) {\n                    final int int = key.hashCode();\n                    switch (int) {\n                        case 3 :\n                            if (((int) == hashCode) && (key.equals(K))) {\n                                return true;\n                            } \n                        case 2 :\n                            if (((int) == hashCode) && (key.equals(K))) {\n                                return true;\n                            } \n                        case 1 :\n                            if (((int) == hashCode) && (key.equals(K))) {\n                                return true;\n                            } \n                    }\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:278","type":"CtBinaryOperatorImpl"},"failures":[632,633,634],"tindex":"8e81ad2c-3f2d-11e6-ae54-395ad8b01fc7","method":{"position":"org.apache.commons.collections4.map.PassiveExpiringMap:377","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(final java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            removeIfExpired(key, now());\n            return super.get(key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.CompositeCollection:293","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e81ad2d-3f2d-11e6-ae54-8594bfba0f86","method":{"position":"org.apache.commons.collections4.ListUtils:318","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> retainAll(final java.util.Collection<E> collection, final java.util.Collection<?> retain) {\n    if ((retain.size()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>(java.lang.Math.min(collection.size(), retain.size()));\n            for (final E E : collection) {\n                if (retain.contains(obj)) {\n                    list.add(obj);\n                } \n            }\n            return list;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"retain"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:97","type":"CtBinaryOperatorImpl"},"failures":[635],"tindex":"8e81ad2e-3f2d-11e6-ae54-797c61bfad74","method":{"position":"org.apache.commons.collections4.ListUtils:186","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> select(final java.util.Collection<? extends E> inputCollection, final org.apache.commons.collections4.Predicate<? super E> predicate) {\n    if ((inputCollection instanceof org.apache.commons.collections4.BoundedCollection) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.CollectionUtils.select(inputCollection, predicate, new java.util.ArrayList<E>(inputCollection.size()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"inputCollection"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:799","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e81ad2f-3f2d-11e6-ae54-ebb1b430ce1b","method":{"position":"org.apache.commons.collections4.CollectionUtils:1104","type":"CtMethodImpl","sourcecode":"public static <C>boolean addAll(final java.util.Collection<C> collection, final java.lang.Iterable<? extends C> iterable) {\n    if (collection instanceof java.util.List<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (iterable instanceof java.util.Collection<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (iterable instanceof java.util.Collection<?>) {\n                        return collection.addAll(((java.util.Collection<? extends C>)(iterable)));\n                    } \n                    return org.apache.commons.collections4.CollectionUtils.addAll(collection, iterable.iterator());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collection":"collection"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1377","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e81ad30-3f2d-11e6-ae54-495af23a03fb","method":{"position":"org.apache.commons.collections4.iterators.ArrayIterator:112","type":"CtMethodImpl","sourcecode":"protected void checkBound(final int bound, final int len, final java.lang.String type) {\n    if (len == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bound == 0) {\n                {\n                    if (bound > len) {\n                        throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + type) + \"s beyond the end of the array. \"));\n                    } \n                    if (bound < 0) {\n                        throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + type) + \"s before the start of the array. \"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nodeCount":"len"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:318","type":"CtBinaryOperatorImpl"},"failures":[636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651],"tindex":"8e81d441-3f2d-11e6-ae54-dd3cfdb1ce73","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:154","type":"CtMethodImpl","sourcecode":"public boolean contains(final java.lang.Object value) {\n    if (value == null) {\n        {\n            return (indexOf(value)) != (-1);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mut":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:239","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e81d442-3f2d-11e6-ae54-516173d6e4a1","method":{"position":"org.apache.commons.collections4.SplitMapUtils:63","type":"CtMethodImpl","sourcecode":"public boolean containsValue(final java.lang.Object value) {\n    if (value instanceof java.lang.Short) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.Get<K, V>.containsValue(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1255","type":"CtBinaryOperatorImpl"},"failures":[380,652],"tindex":"8e81d443-3f2d-11e6-ae54-eb0777fc2994","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:134","type":"CtMethodImpl","sourcecode":"public V get(final java.lang.Object key1, final java.lang.Object key2) {\n    if (key1 instanceof java.util.Map<?, ?>) {\n        {\n            final int int = hash(key1, key2);\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[][decorated().hashIndex(hashCode, decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[].int)];\n            while (entry != null) {\n                if (((entry.int) == hashCode) && (isEqualKey(entry, key1, key2))) {\n                    return entry.getValue();\n                } \n                entry = entry.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n            }\n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"key1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.ClosureTransformer:48","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e81d444-3f2d-11e6-ae54-71d1c978f976","method":{"position":"org.apache.commons.collections4.functors.FunctorUtils:157","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic <T>org.apache.commons.collections4.Closure<T> coerce(final org.apache.commons.collections4.Closure<? super T> closure) {\n    if (closure == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((org.apache.commons.collections4.Closure<T>)(closure));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"closure":"closure"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.LoopingIterator:55","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e81d445-3f2d-11e6-ae54-cba8b0670a25","method":{"position":"org.apache.commons.collections4.set.ListOrderedSet:202","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll == null) {\n        {\n            if (coll instanceof org.apache.commons.collections4.Unmodifiable) {\n                {\n                    boolean boolean = false;\n                    for (final E E : coll) {\n                        result |= add(e);\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:1191","type":"CtBinaryOperatorImpl"},"failures":[653],"tindex":"8e81d446-3f2d-11e6-ae54-4dbe6f2f96ec","method":{"position":"org.apache.commons.collections4.MapUtils:1363","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.IterableMap<K, V> lazyMap(final java.util.Map<K, V> map, final org.apache.commons.collections4.Factory<? extends V> factory) {\n    if (map != null) {\n        {\n            return org.apache.commons.collections4.map.LazyMap.lazyMap(map, factory);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delegateMap":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:607","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8e81fb57-3f2d-11e6-ae54-1571ffb68f31","method":{"position":"org.apache.commons.collections4.CollectionUtils:326","type":"CtMethodImpl","sourcecode":"public static <O>java.util.Collection<O> subtract(final java.lang.Iterable<? extends O> a, final java.lang.Iterable<? extends O> b, final org.apache.commons.collections4.Predicate<O> p) {\n    if (b instanceof java.util.Set<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.ArrayList<O> java.util.ArrayList<O> = new java.util.ArrayList<O>();\n            final org.apache.commons.collections4.bag.HashBag<O> org.apache.commons.collections4.bag.HashBag<O> = new org.apache.commons.collections4.bag.HashBag<O>();\n            for (final O O : b) {\n                if (p.evaluate(element)) {\n                    bag.add(element);\n                } \n            }\n            for (final O O : a) {\n                if (!(bag.remove(element, 1))) {\n                    list.add(element);\n                } \n            }\n            return list;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.IteratorChain:213","type":"CtInvocationImpl"},"failures":[],"tindex":"8e81fb58-3f2d-11e6-ae54-e714b81218ae","method":{"position":"org.apache.commons.collections4.IteratorUtils:521","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Iterator<E> chainedIterator(final java.util.Collection<java.util.Iterator<? extends E>> iterators) {\n    if (iterators.isEmpty()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334594189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.collections4.iterators.IteratorChain<E>(iterators);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iteratorChain":"iterators"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"}}
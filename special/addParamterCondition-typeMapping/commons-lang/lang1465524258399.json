{"failureDictionary":{"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":42,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":28,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":44,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":122,"org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBoolean":15,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":38,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":41,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":73,"org.apache.commons.lang3.tuple.ImmutablePairTest.testEquals":139,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticField":52,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":13,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":104,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_charArray":145,"org.apache.commons.lang3.BooleanUtilsTest.test_toStringYesNo_Boolean":78,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":36,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":127,"org.apache.commons.lang3.tuple.MutablePairTest.testEquals":137,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":1,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":129,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticField":67,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":5,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":117,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer":167,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":119,"org.apache.commons.lang3.ValidateTest.testInclusiveBetweenDouble":158,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNull":146,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":101,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOfLang294":76,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":69,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":112,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":29,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementCharArray":151,"org.apache.commons.lang3.builder.EqualsBuilderTest.testCyclicalObjectReferences":131,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":123,"org.apache.commons.lang3.ArrayUtilsTest.testReverseObjectRange":98,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":46,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":30,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException3":54,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":114,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Object":168,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException4":64,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException1":63,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":103,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":3,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException2":53,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":125,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":34,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":105,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":113,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":24,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapPrefixSuffix":155,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_short_short":163,"org.apache.commons.lang3.mutable.MutableShortTest.testGetSet":0,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":6,"org.apache.commons.lang3.StringUtilsTest.testSplitByWholeSeparatorPreserveAllTokens_StringStringInt":14,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteCharAt":157,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_String":77,"org.apache.commons.lang3.text.StrBuilderTest.testEndsWith":161,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":4,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":120,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":35,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":102,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":37,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray":60,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":121,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":32,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetField":62,"org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetSuffix":74,"org.apache.commons.lang3.RandomUtilsTest.testZeroLengthNextBytes":152,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":19,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":43,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":110,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":111,"org.apache.commons.lang3.StringUtilsTest.testReplaceOnce_StringStringString":160,"org.apache.commons.lang3.ClassUtilsTest.test_getPackageName_Object":72,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":51,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":108,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticFieldForceAccess":58,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":31,"org.apache.commons.lang3.StringUtilsTest.testReverseDelimited_StringChar":96,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":115,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":124,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":20,"org.apache.commons.lang3.text.StrTokenizerTest.test8":93,"org.apache.commons.lang3.RandomUtilsTest.testNextBytesNegative":153,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_String_int":159,"org.apache.commons.lang3.text.StrTokenizerTest.test5":90,"org.apache.commons.lang3.text.StrTokenizerTest.test4":89,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":16,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":21,"org.apache.commons.lang3.text.StrTokenizerTest.test7":92,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":22,"org.apache.commons.lang3.text.StrTokenizerTest.test6":91,"org.apache.commons.lang3.text.StrTokenizerTest.test1":86,"org.apache.commons.lang3.ClassUtilsTest.test_getSimpleName_Object":154,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldIllegalArgumentException2":66,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":7,"org.apache.commons.lang3.text.StrTokenizerTest.test3":88,"org.apache.commons.lang3.tuple.MutablePairTest.testSerialization":136,"org.apache.commons.lang3.tuple.ImmutablePairTest.testSerialization":138,"org.apache.commons.lang3.text.StrTokenizerTest.test2":87,"org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfDoubles":141,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedFieldForceAccess":59,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapFull":156,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":8,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":50,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":40,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEquals":130,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":27,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":109,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":107,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetRootCauseStackTrace_Throwable":71,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals":133,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithNullText":166,"org.apache.commons.lang3.builder.EqualsBuilderTest.testSuper":140,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":25,"org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStringBuilder":70,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char_char":148,"org.apache.commons.lang3.reflect.FieldUtilsTest.testAmbig":65,"org.apache.commons.lang3.tuple.PairTest.testCompatibilityBetweenPairs":134,"org.apache.commons.lang3.ArrayUtilsTest.testReverseByteRange":142,"org.apache.commons.lang3.tuple.PairTest.testMapEntry":135,"org.apache.commons.lang3.builder.EqualsBuilderTest.testBooleanArray":162,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldForceAccessIllegalArgumentException3":57,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1":79,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldForceAccessIllegalArgumentException2":56,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsExcludeFields":132,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3":81,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char":144,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldForceAccess":61,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2":80,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5":83,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4":82,"org.apache.commons.lang3.ObjectUtilsTest.testConstMethods":165,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7":85,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":23,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":39,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6":84,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1":95,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":106,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":118,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":26,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":45,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedField":55,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":116,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":47,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxInt_nullArray":99,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":18,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":10,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4":94,"org.apache.commons.lang3.StringUtilsTest.testRemovePattern":164,"org.apache.commons.lang3.text.StrTokenizerTest.testChaining":75,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher":126,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping":2,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementCharArray":150,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray":147,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayToObjectArray":143,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":48,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber":68,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":11,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":128,"org.apache.commons.lang3.ArrayUtilsTest.testCloneChar":149,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":17,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":33,"org.apache.commons.lang3.ArrayUtilsTest.testReverse":97,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":49,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":9,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":12,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":100},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1244","type":"CtBinaryOperatorImpl","sourcecode":"c > a"},"failures":[],"tindex":"a3d701db-2eaf-11e6-a922-93bbadbcd335","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:536","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final short lhs, final short rhs) {\n    if (rhs > rhs) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            boolean = lhs == rhs;\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"rhs","c":"rhs"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1244","type":"CtBinaryOperatorImpl","sourcecode":"c > a"},"failures":[0],"tindex":"a3d8134c-2eaf-11e6-a922-ad037e82882d","method":{"position":"org.apache.commons.lang3.mutable.MutableShort:96","type":"CtMethodImpl","sourcecode":"public void setValue(final short value) {\n    if (value > value) {\n        {\n            org.apache.commons.lang3.mutable.MutableShort.this.short = value;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"value","c":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3720","type":"CtBinaryOperatorImpl","sourcecode":"i > startIndex"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13],"tindex":"a3d8134d-2eaf-11e6-a922-61352becfbff","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:534","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(java.lang.CharSequence source, int offset, int length) {\n    if (offset > length) {\n        {\n            if (source == null) {\n                return null;\n            } \n            org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(length).append(source, offset, length);\n            substitute(buf, 0, length);\n            return buf.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"length","i":"offset"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSequenceUtils:121","type":"CtBinaryOperatorImpl","sourcecode":"start < 0"},"failures":[14,15],"tindex":"a3d83a5e-2eaf-11e6-a922-d796f70d5c60","method":{"position":"org.apache.commons.lang3.StringUtils:2803","type":"CtMethodImpl","sourcecode":"private static java.lang.String[] splitByWholeSeparatorWorker(final java.lang.String str, final java.lang.String separator, final int max, final boolean preserveAllTokens) {\n    if (max < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            final int int = str.length();\n            if (len == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.String[];\n            } \n            if ((separator == null) || (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String.equals(separator))) {\n                return org.apache.commons.lang3.StringUtils.splitWorker(str, null, max, preserveAllTokens);\n            } \n            final int int = separator.length();\n            final java.util.ArrayList<java.lang.String> java.util.ArrayList<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            int int = 0;\n            int int = 0;\n            int int = 0;\n            while (end < len) {\n                end = str.indexOf(separator, beg);\n                if (end > (-1)) {\n                    if (end > beg) {\n                        numberOfSubstrings += 1;\n                        if (numberOfSubstrings == max) {\n                            end = len;\n                            substrings.add(str.substring(beg));\n                        } else {\n                            substrings.add(str.substring(beg, end));\n                            beg = end + separatorLength;\n                        }\n                    } else {\n                        if (preserveAllTokens) {\n                            numberOfSubstrings += 1;\n                            if (numberOfSubstrings == max) {\n                                end = len;\n                                substrings.add(str.substring(beg));\n                            } else {\n                                substrings.add(org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String);\n                            }\n                        } \n                        beg = end + separatorLength;\n                    }\n                } else {\n                    substrings.add(str.substring(beg));\n                    end = len;\n                }\n            }\n            return substrings.toArray(new java.lang.String[substrings.size()]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"max"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1669","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable<?>"},"failures":[],"tindex":"a3d8887f-2eaf-11e6-a922-c9f0c5d1b1f5","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:349","type":"CtMethodImpl","sourcecode":"public static java.lang.String toStringExclude(final java.lang.Object object, final java.lang.String... excludeFieldNames) {\n    if (org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(object)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object instanceof java.lang.reflect.TypeVariable<?>) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new org.apache.commons.lang3.builder.ReflectionToStringBuilder(object).setExcludeFieldNames(excludeFieldNames).toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"object"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:203","type":"CtBinaryOperatorImpl","sourcecode":"length < (size)"},"failures":[],"tindex":"a3d8af90-2eaf-11e6-a922-d351cc387358","method":{"position":"org.apache.commons.lang3.StringUtils:2063","type":"CtMethodImpl","sourcecode":"public static java.lang.String substring(final java.lang.String str, int start) {\n    if (start < start) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (start < 0) {\n                start = (str.length()) + start;\n            } \n            if (start < 0) {\n                start = 0;\n            } \n            if (start > (str.length())) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            return str.substring(start);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"start","length":"start"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5163","type":"CtBinaryOperatorImpl","sourcecode":"index == (org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND)"},"failures":[],"tindex":"a3d8af91-2eaf-11e6-a922-8bfffbf16588","method":{"position":"org.apache.commons.lang3.text.StrBuilder:808","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final int value) {\n    if (value == value) {\n        {\n            return append(java.lang.String.valueOf(value));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND":"value","index":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:425","type":"CtBinaryOperatorImpl","sourcecode":"customPattern != null"},"failures":[16,16,17,17,18,19,19,20,21,22,23,24,25,26,27,28,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"tindex":"a3d8d6a2-2eaf-11e6-a922-175bebacd69c","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:717","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final short value) {\n    if (fieldName != null) {\n        {\n            buffer.append(value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"customPattern":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4320","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))"},"failures":[52,53,54,55,56,57,58,59],"tindex":"a3d8fdb3-2eaf-11e6-a922-374732b1955e","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Field getField(final java.lang.Class<?> cls, final java.lang.String fieldName, final boolean forceAccess) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(fieldName)) || (org.apache.commons.lang3.StringUtils.isEmpty(fieldName))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.isTrue((cls != null), \"The class must not be null\");\n            org.apache.commons.lang3.Validate.isTrue(org.apache.commons.lang3.StringUtils.isNotBlank(fieldName), \"The field name must not be blank/empty\");\n            for (java.lang.Class<?> java.lang.Class<?> = cls ; acls != null ; acls = acls.getSuperclass()) {\n                try {\n                    final java.lang.reflect.Field java.lang.reflect.Field = acls.getDeclaredField(fieldName);\n                    if (!(java.lang.reflect.Modifier.isPublic(field.getModifiers()))) {\n                        if (forceAccess) {\n                            field.setAccessible(true);\n                        } else {\n                            continue;\n                        }\n                    } \n                    return field;\n                } catch (final java.lang.NoSuchFieldException ex) {\n                }\n            }\n            java.lang.reflect.Field java.lang.reflect.Field = null;\n            for (final java.lang.Class<?> java.lang.Class<?> : org.apache.commons.lang3.ClassUtils.getAllInterfaces(cls)) {\n                try {\n                    final java.lang.reflect.Field java.lang.reflect.Field = class1.getField(fieldName);\n                    org.apache.commons.lang3.Validate.isTrue((match == null), (\"Reference to field %s is ambiguous relative to %s\" + \"; a matching field exists on two or more implemented interfaces.\"), fieldName, cls);\n                    match = test;\n                } catch (final java.lang.NoSuchFieldException ex) {\n                }\n            }\n            return match;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName","remove":"fieldName"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1623","type":"CtBinaryOperatorImpl","sourcecode":"((nBools - 1) + srcPos) >= 16"},"failures":[],"tindex":"a3d924c4-2eaf-11e6-a922-21f317e98c87","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1417","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(final int value, final int width, final char padChar) {\n    if (((value - 1) + width) >= 16) {\n        {\n            return appendFixedWidthPadLeft(java.lang.String.valueOf(value), width, padChar);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"value","srcPos":"width"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:517","type":"CtBinaryOperatorImpl","sourcecode":"classArray == null"},"failures":[60],"tindex":"a3d94bd5-2eaf-11e6-a922-c566e95989b8","method":{"position":"org.apache.commons.lang3.ClassUtils:477","type":"CtMethodImpl","sourcecode":"public static boolean isAssignable(final java.lang.Class<?>[] classArray, final java.lang.Class<?>... toClassArray) {\n    if (classArray == null) {\n        {\n            return org.apache.commons.lang3.ClassUtils.isAssignable(classArray, toClassArray, org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion.org.apache.commons.lang3.JavaVersion.org.apache.commons.lang3.JavaVersion));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classArray":"classArray"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:931","type":"CtBinaryOperatorImpl","sourcecode":"(toProperString) == null"},"failures":[61,62,63,54,64,65,66,67],"tindex":"a3d94bd6-2eaf-11e6-a922-a342ea1d1054","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:61","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Field getField(final java.lang.Class<?> cls, final java.lang.String fieldName) {\n    if (fieldName == null) {\n        {\n            final java.lang.reflect.Field java.lang.reflect.Field = org.apache.commons.lang3.reflect.FieldUtils.getField(cls, fieldName, false);\n            org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(field);\n            return field;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toProperString":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.NumberFormatException","condition":{"position":"org.apache.commons.lang3.ClassUtils:1121","type":"CtInvocationImpl","sourcecode":"className.startsWith(\"L\")"},"failures":[68,69],"tindex":"a3d972e7-2eaf-11e6-a922-a3ac24ebfab1","method":{"position":"org.apache.commons.lang3.math.NumberUtils:450","type":"CtMethodImpl","sourcecode":"public static java.lang.Number createNumber(final java.lang.String str) throws java.lang.NumberFormatException {\n    if (str.startsWith(\"L\")) {\n        throw new java.lang.NumberFormatException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (org.apache.commons.lang3.StringUtils.isBlank(str)) {\n                throw new java.lang.NumberFormatException(\"A blank string is not a valid number\");\n            } \n            final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"0x\" , \"0X\" , \"-0x\" , \"-0X\" , \"#\" , \"-#\" };\n            int int = 0;\n            for (final java.lang.String java.lang.String : hex_prefixes) {\n                if (str.startsWith(pfx)) {\n                    pfxLen += pfx.length();\n                    break;\n                } \n            }\n            if (pfxLen > 0) {\n                char char = 0;\n                for (int int = pfxLen ; i < (str.length()) ; i++) {\n                    firstSigDigit = str.charAt(i);\n                    if (firstSigDigit == '0') {\n                        pfxLen++;\n                    } else {\n                        break;\n                    }\n                }\n                final int int = (str.length()) - pfxLen;\n                if ((hexDigits > 16) || ((hexDigits == 16) && (firstSigDigit > '7'))) {\n                    return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n                } \n                if ((hexDigits > 8) || ((hexDigits == 8) && (firstSigDigit > '7'))) {\n                    return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n                } \n                return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n            } \n            final char char = str.charAt(((str.length()) - 1));\n            java.lang.String java.lang.String;\n            java.lang.String java.lang.String;\n            java.lang.String java.lang.String;\n            final int int = str.indexOf('.');\n            final int int = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;\n            int int = 0;\n            if (decPos > (-1)) {\n                if (expPos > (-1)) {\n                    if ((expPos < decPos) || (expPos > (str.length()))) {\n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                    } \n                    dec = str.substring((decPos + 1), expPos);\n                } else {\n                    dec = str.substring((decPos + 1));\n                }\n                mant = str.substring(0, decPos);\n                numDecimals = dec.length();\n            } else {\n                if (expPos > (-1)) {\n                    if (expPos > (str.length())) {\n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                    } \n                    mant = str.substring(0, expPos);\n                } else {\n                    mant = str;\n                }\n                dec = null;\n            }\n            if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {\n                if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {\n                    exp = str.substring((expPos + 1), ((str.length()) - 1));\n                } else {\n                    exp = null;\n                }\n                final java.lang.String java.lang.String = str.substring(0, ((str.length()) - 1));\n                final boolean boolean = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));\n                switch (lastChar) {\n                    case 'l' :\n                    case 'L' :\n                        if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {\n                            try {\n                                return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);\n                            } catch (final java.lang.NumberFormatException nfe) {\n                            }\n                            return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);\n                        } \n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                    case 'f' :\n                    case 'F' :\n                        try {\n                            final java.lang.Float java.lang.Float = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);\n                            if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {\n                                return f;\n                            } \n                        } catch (final java.lang.NumberFormatException nfe) {\n                        }\n                    case 'd' :\n                    case 'D' :\n                        try {\n                            final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);\n                            if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {\n                                return d;\n                            } \n                        } catch (final java.lang.NumberFormatException nfe) {\n                        }\n                        try {\n                            return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);\n                        } catch (final java.lang.NumberFormatException e) {\n                        }\n                    default :\n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                }\n            } \n            if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {\n                exp = str.substring((expPos + 1), str.length());\n            } else {\n                exp = null;\n            }\n            if ((dec == null) && (exp == null)) {\n                try {\n                    return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n                } catch (final java.lang.NumberFormatException nfe) {\n                }\n                try {\n                    return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n                } catch (final java.lang.NumberFormatException nfe) {\n                }\n                return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n            } \n            final boolean boolean = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));\n            try {\n                if (numDecimals <= 7) {\n                    final java.lang.Float java.lang.Float = org.apache.commons.lang3.math.NumberUtils.createFloat(str);\n                    if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {\n                        return f;\n                    } \n                } \n            } catch (final java.lang.NumberFormatException nfe) {\n            }\n            try {\n                if (numDecimals <= 16) {\n                    final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.createDouble(str);\n                    if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {\n                        return d;\n                    } \n                } \n            } catch (final java.lang.NumberFormatException nfe) {\n            }\n            return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:496","type":"CtBinaryOperatorImpl","sourcecode":"seq == null"},"failures":[70],"tindex":"a3da0f28-2eaf-11e6-a922-dbf6c5066132","method":{"position":"org.apache.commons.lang3.ObjectUtils:364","type":"CtMethodImpl","sourcecode":"public static void identityToString(final java.lang.StringBuilder builder, final java.lang.Object object) {\n    if (object == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                throw new java.lang.NullPointerException(\"Cannot get the toString of a null identity\");\n            } \n            builder.append(object.getClass().getName()).append('@').append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(object)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"seq":"object"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:456","type":"CtBinaryOperatorImpl","sourcecode":"throwable == null"},"failures":[71],"tindex":"a3da3639-2eaf-11e6-a922-f117cc1b793f","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:516","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] getRootCauseStackTrace(final java.lang.Throwable throwable) {\n    if (throwable == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (throwable == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.String[];\n            } \n            final java.lang.Throwable[] java.lang.Throwable[] = org.apache.commons.lang3.exception.ExceptionUtils.getThrowables(throwable);\n            final int int = throwables.int;\n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            java.util.List<java.lang.String> java.util.List<java.lang.String> = org.apache.commons.lang3.exception.ExceptionUtils.getStackFrameList(throwables[(count - 1)]);\n            for (int int = count ; (--i) >= 0 ; ) {\n                final java.util.List<java.lang.String> java.util.List<java.lang.String> = nextTrace;\n                if (i != 0) {\n                    nextTrace = org.apache.commons.lang3.exception.ExceptionUtils.getStackFrameList(throwables[(i - 1)]);\n                    org.apache.commons.lang3.exception.ExceptionUtils.removeCommonFrames(trace, nextTrace);\n                } \n                if (i == (count - 1)) {\n                    frames.add(throwables[i].toString());\n                } else {\n                    frames.add(((org.apache.commons.lang3.exception.ExceptionUtils.org.apache.commons.lang3.exception.ExceptionUtils.java.lang.String) + (throwables[i].toString())));\n                }\n                for (int int = 0 ; j < (trace.size()) ; j++) {\n                    frames.add(trace.get(j));\n                }\n            }\n            return frames.toArray(new java.lang.String[frames.size()]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwable":"throwable"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:771","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[],"tindex":"a3da363a-2eaf-11e6-a922-edc3d7ae2095","method":{"position":"org.apache.commons.lang3.ArrayUtils:4232","type":"CtMethodImpl","sourcecode":"public static short[] add(final short[] array, final short element) {\n    if (array == array) {\n        {\n            final short[] short[] = ((short[])(org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(array, java.lang.Short.java.lang.Short.java.lang.Class<java.lang.Short>)));\n            newArray[((newArray.int) - 1)] = element;\n            return newArray;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:768","type":"CtInvocationImpl","sourcecode":"str.trim().startsWith(\"--\")"},"failures":[],"tindex":"a3da5d4b-2eaf-11e6-a922-078dfea9271d","method":{"position":"org.apache.commons.lang3.text.StrBuilder:863","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final java.lang.String str) {\n    if (str.trim().startsWith(\"--\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return append(str).appendNewLine();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:829","type":"CtBinaryOperatorImpl","sourcecode":"(str1 == null) || (str2 == null)"},"failures":[72],"tindex":"a3da5d4c-2eaf-11e6-a922-ef746c93ea5b","method":{"position":"org.apache.commons.lang3.ClassUtils:267","type":"CtMethodImpl","sourcecode":"public static java.lang.String getPackageName(final java.lang.Object object, final java.lang.String valueIfNull) {\n    if ((object == null) || (object == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                return valueIfNull;\n            } \n            return org.apache.commons.lang3.ClassUtils.getPackageName(object.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str1":"object","str2":"object"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:131","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[73,73],"tindex":"a3da5d4d-2eaf-11e6-a922-d746234d8807","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1394","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final boolean[] array, final java.lang.Boolean fullDetail) {\n    if (fieldName == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (array == null) {\n                appendNullText(buffer, fieldName);\n            } else if (isFullDetail(fullDetail)) {\n                appendDetail(buffer, fieldName, array);\n            } else {\n                appendSummary(buffer, fieldName, array);\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:611","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"a3da845e-2eaf-11e6-a922-6b09bb3f4ca5","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:600","type":"CtMethodImpl","sourcecode":"protected java.lang.StringBuffer applyRules(final java.util.Calendar calendar, final java.lang.StringBuffer buf) {\n    if (buf == null) {\n        {\n            return org.apache.commons.lang3.time.FastDatePrinter.applyRules(calendar, buf);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"buf"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:957","type":"CtBinaryOperatorImpl","sourcecode":"ignored != null"},"failures":[74],"tindex":"a3da845f-2eaf-11e6-a922-33795354f676","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1039","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrSubstitutor setVariableSuffixMatcher(final org.apache.commons.lang3.text.StrMatcher suffixMatcher) {\n    if (suffixMatcher != null) {\n        {\n            if (suffixMatcher == null) {\n                throw new java.lang.IllegalArgumentException(\"Variable suffix matcher must not be null!\");\n            } \n            org.apache.commons.lang3.text.StrSubstitutor.this.org.apache.commons.lang3.text.StrMatcher = suffixMatcher;\n            return org.apache.commons.lang3.text.StrSubstitutor.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ignored":"suffixMatcher"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:607","type":"CtBinaryOperatorImpl","sourcecode":"((((ch0 == 't') || (ch0 == 'T')) && ((ch1 == 'r') || (ch1 == 'R'))) && ((ch2 == 'u') || (ch2 == 'U'))) && ((ch3 == 'e') || (ch3 == 'E'))"},"failures":[],"tindex":"a3da8460-2eaf-11e6-a922-cfdf994fe351","method":{"position":"org.apache.commons.lang3.CharRange:113","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.CharRange isIn(final char start, final char end) {\n    if (((((start == 't') || (ch0 == 'T')) && ((end == 'r') || (ch1 == 'R'))) && ((start == 'u') || (ch2 == 'U'))) && ((end == 'e') || (ch3 == 'E'))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.lang3.CharRange(start , end , false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch0":"start","ch2":"start","ch1":"end","ch3":"end"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:339","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"a3daaa71-2eaf-11e6-a922-cb3a292899c7","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1378","type":"CtMethodImpl","sourcecode":"protected void appendSummary(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final float[] array) {\n    if (fieldName == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendSummarySize(buffer, fieldName, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1138","type":"CtBinaryOperatorImpl","sourcecode":"c < a"},"failures":[],"tindex":"a3daaa72-2eaf-11e6-a922-194fb3473c81","method":{"position":"org.apache.commons.lang3.BitField:227","type":"CtMethodImpl","sourcecode":"public short setShort(final short holder) {\n    if (holder < holder) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((short)(set(holder)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"holder","c":"holder"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:325","type":"CtBinaryOperatorImpl","sourcecode":"pos >= 0"},"failures":[],"tindex":"a3daaa73-2eaf-11e6-a922-d5a2db999006","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:951","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final void appendTo(final java.lang.StringBuffer buffer, final int value) {\n    if (value >= 0) {\n        {\n            buffer.append(((char)((value / 10) + '0')));\n            buffer.append(((char)((value % 10) + '0')));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1040","type":"CtBinaryOperatorImpl","sourcecode":"suffixMatcher == null"},"failures":[75],"tindex":"a3dad184-2eaf-11e6-a922-6181b133041f","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:859","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer setDelimiterMatcher(final org.apache.commons.lang3.text.StrMatcher delim) {\n    if (delim == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (delim == null) {\n                org.apache.commons.lang3.text.StrTokenizer.this.org.apache.commons.lang3.text.StrMatcher = org.apache.commons.lang3.text.StrMatcher.noneMatcher();\n            } else {\n                org.apache.commons.lang3.text.StrTokenizer.this.org.apache.commons.lang3.text.StrMatcher = delim;\n            }\n            return org.apache.commons.lang3.text.StrTokenizer.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"suffixMatcher":"delim"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.JavaVersion:146","type":"CtInvocationImpl","sourcecode":"\"1.7\".equals(nom)"},"failures":[76,77],"tindex":"a3dad185-2eaf-11e6-a922-05f0d7c1d128","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2322","type":"CtMethodImpl","sourcecode":"public int indexOf(final java.lang.String str) {\n    if (\"1.7\".equals(str)) {\n        {\n            return indexOf(str, 0);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4284","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))"},"failures":[],"tindex":"a3dad186-2eaf-11e6-a922-e7c8119ace61","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:380","type":"CtMethodImpl","sourcecode":"public static int reflectionHashCode(final java.lang.Object object, final boolean testTransients) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(object)) || (org.apache.commons.lang3.StringUtils.isEmpty(object))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.HashCodeBuilder.reflectionHashCode(17, 37, object, testTransients, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"object","remove":"object"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:466","type":"CtBinaryOperatorImpl","sourcecode":"bool == null"},"failures":[78],"tindex":"a3daf897-2eaf-11e6-a922-397bc86db63c","method":{"position":"org.apache.commons.lang3.BooleanUtils:792","type":"CtMethodImpl","sourcecode":"public static java.lang.String toStringYesNo(final java.lang.Boolean bool) {\n    if (bool == null) {\n        {\n            return org.apache.commons.lang3.BooleanUtils.toString(bool, \"yes\", \"no\", null);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"bool"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1430","type":"CtBinaryOperatorImpl","sourcecode":"0 == nHexs"},"failures":[79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95],"tindex":"a3daf898-2eaf-11e6-a922-9bcd9c1902df","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:831","type":"CtMethodImpl","sourcecode":"private boolean isQuote(final char[] srcChars, final int pos, final int len, final int quoteStart, final int quoteLen) {\n    if (0 == pos) {\n        {\n            for (int int = 0 ; i < quoteLen ; i++) {\n                if (((pos + i) >= len) || ((srcChars[(pos + i)]) != (srcChars[(quoteStart + i)]))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nHexs":"pos"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3566","type":"CtBinaryOperatorImpl","sourcecode":"noOfItems <= 0"},"failures":[96,97,98],"tindex":"a3db1fa9-2eaf-11e6-a922-57f51ef48df6","method":{"position":"org.apache.commons.lang3.ArrayUtils:1818","type":"CtMethodImpl","sourcecode":"public static void reverse(final java.lang.Object[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (endIndexExclusive <= 0) {\n        {\n            if (array == null) {\n                return ;\n            } \n            int int = startIndexInclusive < 0 ? 0 : startIndexInclusive;\n            int int = (java.lang.Math.min(array.int, endIndexExclusive)) - 1;\n            java.lang.Object java.lang.Object;\n            while (j > i) {\n                tmp = array[j];\n                array[j] = array[i];\n                array[i] = tmp;\n                j--;\n                i++;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"noOfItems":"endIndexExclusive"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:629","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[],"tindex":"a3db1faa-2eaf-11e6-a922-79d899ca94d1","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:211","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.reflect.Field> getAllFieldsList(java.lang.Class<?> cls) {\n    if (cls == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.isTrue((cls != null), \"The class must not be null\");\n            final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = new java.util.ArrayList<java.lang.reflect.Field>();\n            java.lang.Class<?> java.lang.Class<?> = cls;\n            while (currentClass != null) {\n                final java.lang.reflect.Field[] java.lang.reflect.Field[] = currentClass.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : declaredFields) {\n                    allFields.add(field);\n                }\n                currentClass = currentClass.getSuperclass();\n            }\n            return allFields;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3879","type":"CtBinaryOperatorImpl","sourcecode":"array1 == null"},"failures":[99],"tindex":"a3db46bb-2eaf-11e6-a922-191e08e73f88","method":{"position":"org.apache.commons.lang3.math.NumberUtils:959","type":"CtMethodImpl","sourcecode":"public static int max(final int[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.math.NumberUtils.validateArray(array);\n            int int = array[0];\n            for (int int = 1 ; j < (array.int) ; j++) {\n                if ((array[j]) > max) {\n                    max = array[j];\n                } \n            }\n            return max;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:517","type":"CtBinaryOperatorImpl","sourcecode":"classArray == null"},"failures":[100,101,102,103,104,105,106,106,107,108,108,16,16,109,109,110,110,111,111,112,113,114,115,116,117,19,20,29,29,30,31,32,39,39,40,41,41,42,118,119,120,121,122,123,124,125],"tindex":"a3db46bc-2eaf-11e6-a922-43c4da58402c","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:485","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.Object[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classArray":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:975","type":"CtBinaryOperatorImpl","sourcecode":"prefixMatcher == null"},"failures":[126],"tindex":"a3db6dcd-2eaf-11e6-a922-53ddf289e7f0","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2375","type":"CtMethodImpl","sourcecode":"public int indexOf(final org.apache.commons.lang3.text.StrMatcher matcher) {\n    if (matcher == null) {\n        {\n            return indexOf(matcher, 0);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefixMatcher":"matcher"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1083","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.reflect.Array.getLength(array)) == 0"},"failures":[127,128,129,130,131,132,133,134,135,136,137,138,139],"tindex":"a3db6dce-2eaf-11e6-a922-8d504436fc0e","method":{"position":"org.apache.commons.lang3.tuple.Pair:130","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"deprecation\")\n@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if ((java.lang.reflect.Array.getLength(obj)) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj == (org.apache.commons.lang3.tuple.Pair.this)) {\n                return true;\n            } \n            if (obj instanceof java.util.Map.Entry<?, ?>) {\n                final java.util.Map.Entry<?, ?> java.util.Map.Entry<?, ?> = ((java.util.Map.Entry<?, ?>)(obj));\n                return (org.apache.commons.lang3.ObjectUtils.equals(getKey(), other.getKey())) && (org.apache.commons.lang3.ObjectUtils.equals(getValue(), other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1367","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(type)"},"failures":[],"tindex":"a3db94df-2eaf-11e6-a922-ff4ba4dfe9b8","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:349","type":"CtMethodImpl","sourcecode":"public static java.lang.String toStringExclude(final java.lang.Object object, final java.lang.String... excludeFieldNames) {\n    if (org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(object)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object instanceof java.lang.reflect.TypeVariable<?>) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new org.apache.commons.lang3.builder.ReflectionToStringBuilder(object).setExcludeFieldNames(excludeFieldNames).toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"object"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2848","type":"CtVariableReadImpl","sourcecode":"preserveAllTokens"},"failures":[140],"tindex":"a3db94e0-2eaf-11e6-a922-0bce3a315f28","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:433","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder appendSuper(final boolean superEquals) {\n    if (superEquals) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            boolean = superEquals;\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"preserveAllTokens":"superEquals"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2251","type":"CtBinaryOperatorImpl","sourcecode":"pos < 0"},"failures":[141],"tindex":"a3db94e1-2eaf-11e6-a922-a17f676636c9","method":{"position":"org.apache.commons.lang3.StringUtils:3857","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final double[] array, final char separator, final int startIndex, final int endIndex) {\n    if (startIndex < 0) {\n        {\n            if (array == null) {\n                return null;\n            } \n            final int int = endIndex - startIndex;\n            if (noOfItems <= 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((noOfItems * 16));\n            for (int int = startIndex ; i < endIndex ; i++) {\n                if (i > startIndex) {\n                    buf.append(separator);\n                } \n                buf.append(array[i]);\n            }\n            return buf.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"startIndex"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:221","type":"CtBinaryOperatorImpl","sourcecode":"innerIdx != (-1)"},"failures":[142],"tindex":"a3dbbbf2-2eaf-11e6-a922-470161c5c68d","method":{"position":"org.apache.commons.lang3.ArrayUtils:1608","type":"CtMethodImpl","sourcecode":"public static void reverse(final byte[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (startIndexInclusive != (-1)) {\n        {\n            if (array == null) {\n                return ;\n            } \n            int int = startIndexInclusive < 0 ? 0 : startIndexInclusive;\n            int int = (java.lang.Math.min(array.int, endIndexExclusive)) - 1;\n            byte byte;\n            while (j > i) {\n                tmp = array[j];\n                array[j] = array[i];\n                array[i] = tmp;\n                j--;\n                i++;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"innerIdx":"startIndexInclusive"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5890","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))"},"failures":[143],"tindex":"a3dbbbf3-2eaf-11e6-a922-3bc9652ccfae","method":{"position":"org.apache.commons.lang3.ArrayUtils:3965","type":"CtMethodImpl","sourcecode":"public static double[] addAll(final double[] array1, final double... array2) {\n    if ((org.apache.commons.lang3.ArrayUtils.isEmpty(array2)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(array2))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array1 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array2);\n            } else if (array2 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array1);\n            } \n            final double[] double[] = new double[(array1.int) + (array2.int)];\n            java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n            java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n            return joinedArray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array2","values":"array2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:770","type":"CtBinaryOperatorImpl","sourcecode":"(lhs == null) || (rhs == null)"},"failures":[144,145,146,147,148,149,150,151],"tindex":"a3dbe304-2eaf-11e6-a922-93fd1a4bf88a","method":{"position":"org.apache.commons.lang3.ArrayUtils:386","type":"CtMethodImpl","sourcecode":"public static char[] clone(final char[] array) {\n    if ((array == null) || (array == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            return array.clone();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1178","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[152,153],"tindex":"a3dbe305-2eaf-11e6-a922-eb9d35bb0490","method":{"position":"org.apache.commons.lang3.RandomUtils:62","type":"CtMethodImpl","sourcecode":"public static byte[] nextBytes(int count) {\n    if (count > 0) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((count >= 0), \"Count cannot be negative.\");\n            byte[] byte[] = new byte[count];\n            org.apache.commons.lang3.RandomUtils.org.apache.commons.lang3.RandomUtils.java.util.Random.nextBytes(result);\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"count"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:403","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[154],"tindex":"a3dc0a16-2eaf-11e6-a922-e3e240fdb073","method":{"position":"org.apache.commons.lang3.ClassUtils:251","type":"CtMethodImpl","sourcecode":"public static java.lang.String getSimpleName(final java.lang.Object object, final java.lang.String valueIfNull) {\n    if (object == null) {\n        {\n            if (object == null) {\n                return valueIfNull;\n            } \n            return org.apache.commons.lang3.ClassUtils.getSimpleName(object.getClass());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"object"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:295","type":"CtBinaryOperatorImpl","sourcecode":"i == 25"},"failures":[1,2,4,155,11,156,157],"tindex":"a3dc0a17-2eaf-11e6-a922-1fdde5252e0f","method":{"position":"org.apache.commons.lang3.text.StrBuilder:342","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder deleteCharAt(final int index) {\n    if (index == 25) {\n        {\n            if ((index < 0) || (index >= (int))) {\n                throw new java.lang.StringIndexOutOfBoundsException(index);\n            } \n            deleteImpl(index, (index + 1), 1);\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:1127","type":"CtBinaryOperatorImpl","sourcecode":"(value <= start) || (value >= end)"},"failures":[158],"tindex":"a3dc0a18-2eaf-11e6-a922-15da916cebf7","method":{"position":"org.apache.commons.lang3.Validate:987","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"boxing\")\npublic static void inclusiveBetween(double start, double end, double value) {\n    if ((end <= end) || (value >= end)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value < start) || (value > end)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, value, start, end));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"end","end":"end","value":"end"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1686","type":"CtBinaryOperatorImpl","sourcecode":"0 == nBytes"},"failures":[159],"tindex":"a3dc3129-2eaf-11e6-a922-436322395521","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2459","type":"CtMethodImpl","sourcecode":"public int lastIndexOf(final java.lang.String str, int startIndex) {\n    if (0 == startIndex) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            startIndex = startIndex >= (int) ? (int) - 1 : startIndex;\n            if ((str == null) || (startIndex < 0)) {\n                return -1;\n            } \n            final int int = str.length();\n            if ((strLen > 0) && (strLen <= (int))) {\n                if (strLen == 1) {\n                    return lastIndexOf(str.charAt(0), startIndex);\n                } \n                outer : for (int int = (startIndex - strLen) + 1 ; i >= 0 ; i--) {\n                    for (int int = 0 ; j < strLen ; j++) {\n                        if ((str.charAt(j)) != (char[][(i + j)])) {\n                            continue outer;\n                        } \n                    }\n                    return i;\n                }\n            } else if (strLen == 0) {\n                return startIndex;\n            } \n            return -1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBytes":"startIndex"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:199","type":"CtBinaryOperatorImpl","sourcecode":"(tmp.length()) != (duration.length())"},"failures":[160],"tindex":"a3dc312a-2eaf-11e6-a922-9f3d80311b1d","method":{"position":"org.apache.commons.lang3.StringUtils:4417","type":"CtMethodImpl","sourcecode":"public static java.lang.String replaceOnce(final java.lang.String text, final java.lang.String searchString, final java.lang.String replacement) {\n    if ((searchString.length()) != (replacement.length())) {\n        {\n            return org.apache.commons.lang3.StringUtils.replace(text, searchString, replacement, 1);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"replacement","tmp":"searchString"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:2034","type":"CtBinaryOperatorImpl","sourcecode":"sizeEndText == null"},"failures":[161],"tindex":"a3dc583b-2eaf-11e6-a922-c3dafd76bce9","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2099","type":"CtMethodImpl","sourcecode":"public boolean endsWith(final java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return false;\n            } \n            final int int = str.length();\n            if (len == 0) {\n                return true;\n            } \n            if (len > (int)) {\n                return false;\n            } \n            int int = (int) - len;\n            for (int int = 0 ; i < len ; i++ , pos++) {\n                if ((char[][pos]) != (str.charAt(i))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sizeEndText":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:860","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[],"tindex":"a3dc583c-2eaf-11e6-a922-ddcbad49251d","method":{"position":"org.apache.commons.lang3.ArrayUtils:3409","type":"CtMethodImpl","sourcecode":"public static java.lang.Float[] toObject(final float[] array) {\n    if (array == array) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Float[];\n            } \n            final java.lang.Float[] java.lang.Float[] = new java.lang.Float[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = java.lang.Float.valueOf(array[i]);\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1397","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[162],"tindex":"a3dc583d-2eaf-11e6-a922-c3a2bd1d4cbc","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:887","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {\n    if (rhs == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs == null) || (rhs == null)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && (boolean) ; ++i) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"rhs"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1135","type":"CtBinaryOperatorImpl","sourcecode":"b < a"},"failures":[163],"tindex":"a3dc7f4e-2eaf-11e6-a922-037b98280268","method":{"position":"org.apache.commons.lang3.ArrayUtils:3183","type":"CtMethodImpl","sourcecode":"public static short[] toPrimitive(final java.lang.Short[] array, final short valueForNull) {\n    if (valueForNull < valueForNull) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.short[];\n            } \n            final short[] short[] = new short[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Short java.lang.Short = array[i];\n                result[i] = b == null ? valueForNull : b.shortValue();\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"valueForNull","b":"valueForNull"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"newLineStr == null"},"failures":[],"tindex":"a3dc7f4f-2eaf-11e6-a922-3d34ccbdce38","method":{"position":"org.apache.commons.lang3.time.FormatCache:69","type":"CtMethodImpl","sourcecode":"public F getInstance(final java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {\n    if (pattern == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (pattern == null) {\n                throw new java.lang.NullPointerException(\"pattern must not be null\");\n            } \n            if (timeZone == null) {\n                timeZone = java.util.TimeZone.getDefault();\n            } \n            if (locale == null) {\n                locale = java.util.Locale.getDefault();\n            } \n            final org.apache.commons.lang3.time.FormatCache.MultipartKey org.apache.commons.lang3.time.FormatCache.MultipartKey = new org.apache.commons.lang3.time.FormatCache.MultipartKey(pattern , timeZone , locale);\n            F F = java.util.concurrent.ConcurrentMap<org.apache.commons.lang3.time.FormatCache.MultipartKey, F>.get(key);\n            if (format == null) {\n                format = createInstance(pattern, timeZone, locale);\n                final F F = java.util.concurrent.ConcurrentMap<org.apache.commons.lang3.time.FormatCache.MultipartKey, F>.putIfAbsent(key, format);\n                if (previousValue != null) {\n                    format = previousValue;\n                } \n            } \n            return format;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"newLineStr":"pattern"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.JavaVersion:132","type":"CtInvocationImpl","sourcecode":"\"0.9\".equals(nom)"},"failures":[164],"tindex":"a3dca660-2eaf-11e6-a922-6db44e6b0783","method":{"position":"org.apache.commons.lang3.StringUtils:4457","type":"CtMethodImpl","sourcecode":"public static java.lang.String removePattern(final java.lang.String source, final java.lang.String regex) {\n    if (\"0.9\".equals(source)) {\n        {\n            return org.apache.commons.lang3.StringUtils.replacePattern(source, regex, org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:472","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Float.floatToIntBits(lhs)) != (java.lang.Float.floatToIntBits(rhs))"},"failures":[165],"tindex":"a3dca661-2eaf-11e6-a922-13dbd4cc3bf1","method":{"position":"org.apache.commons.lang3.ObjectUtils:915","type":"CtMethodImpl","sourcecode":"public static float CONST(final float v) {\n    if ((java.lang.Float.floatToIntBits(v)) != (java.lang.Float.floatToIntBits(v))) {\n        {\n            return v;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"v","rhs":"v"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:83","type":"CtBinaryOperatorImpl","sourcecode":"(ex == null) || ((ex.getCause()) == null)"},"failures":[],"tindex":"a3dccd72-2eaf-11e6-a922-67e34841604c","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:455","type":"CtMethodImpl","sourcecode":"public static void printRootCauseStackTrace(final java.lang.Throwable throwable, final java.io.PrintStream stream) {\n    if ((throwable == null) || ((ex.getCause()) == null)) {\n        {\n            if (throwable == null) {\n                return ;\n            } \n            if (stream == null) {\n                throw new java.lang.IllegalArgumentException(\"The PrintStream must not be null\");\n            } \n            final java.lang.String[] java.lang.String[] = org.apache.commons.lang3.exception.ExceptionUtils.getRootCauseStackTrace(throwable);\n            for (final java.lang.String java.lang.String : trace) {\n                stream.println(element);\n            }\n            stream.flush();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ex":"throwable"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:596","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[166,167,168],"tindex":"a3dccd73-2eaf-11e6-a922-3bfd72817dd0","method":{"position":"org.apache.commons.lang3.text.StrBuilder:572","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final java.lang.StringBuffer str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return appendNull();\n            } \n            final int int = str.length();\n            if (strLen > 0) {\n                final int int = length();\n                ensureCapacity((len + strLen));\n                str.getChars(0, strLen, char[], len);\n                int += strLen;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":57,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":233,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":159,"org.apache.commons.lang3.CharSetUtilsTest.testCount_StringString":61,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":160,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":155,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":158,"org.apache.commons.lang3.time.DateUtilsTest.testSetYears":178,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedFieldForceAccess":194,"org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testConstantFuture_null":30,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringAfter_StringString":69,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatUTC":13,"org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP":21,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":234,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedField":195,"org.apache.commons.lang3.CharSetTest.testHashCode":49,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":314,"org.apache.commons.lang3.ArrayUtilsTest.testContainsLong":66,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedStaticField":215,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":2,"org.apache.commons.lang3.time.DateUtilsTest.testAddDays":306,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDifferingStyles":73,"org.apache.commons.lang3.time.DateUtilsTest.testAddSeconds":307,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddDash":41,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":135,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_AD":276,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":318,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":209,"org.apache.commons.lang3.ClassPathUtilsTest.testToFullyQualifiedPathClassNullString":86,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDefaults":72,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":12,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":197,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":241,"org.apache.commons.lang3.time.DateUtilsTest.testAddMonths":172,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiShortArray":286,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testByteArrayAsObject":287,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":130,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteFieldForceAccess":191,"org.apache.commons.lang3.ArrayUtilsTest.testContainsFloat":24,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":316,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArrayRemoveNone":76,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":231,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml10":324,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml11":325,"org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringStringarray":60,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testGetContextValues":90,"org.apache.commons.lang3.builder.EqualsBuilderTest.testCyclicalObjectReferences":252,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":207,"org.apache.commons.lang3.ClassPathUtilsTest.testToFullyQualifiedPathClass":85,"org.apache.commons.lang3.time.DateUtilsTest.testSetMonths":174,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":188,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":162,"org.apache.commons.lang3.builder.CompareToBuilderTest.testCharArray":293,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":11,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":147,"org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testConstantFuture_Integer":29,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":151,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredField":225,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":203,"org.apache.commons.lang3.StringUtilsTest.testOverlay_StringStringIntInt":36,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":131,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":141,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":319,"org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemoverTest.testInvalidCharacters":323,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementFloatArray":22,"org.apache.commons.lang3.math.NumberUtilsTest.testMaximumShort":37,"org.apache.commons.lang3.ArrayUtilsTest.testReverseIntRange":65,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":118,"org.apache.commons.lang3.CharSetTest.testEquals_Object":44,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":200,"org.apache.commons.lang3.builder.CompareToBuilderTest.testShortArray":285,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfFloat":25,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArrayOutOfBoundsIndex":75,"org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringStringarray":57,"org.apache.commons.lang3.exception.ContextedExceptionTest.testAddContextValue":95,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":154,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringString":54,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_AD":282,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDateDefaults":71,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":199,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO":18,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":181,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":136,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":129,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":167,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":183,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseLongShort":275,"org.apache.commons.lang3.ArrayUtilsTest.testSameLengthByte":299,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":133,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO":14,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":107,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":315,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":238,"org.apache.commons.lang3.time.DateUtilsTest.testAddWeeks":309,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":15,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":4,"org.apache.commons.lang3.CharSetTest.testConstructor_String_simple":43,"org.apache.commons.lang3.AnnotationUtilsTest.testBothArgsNull":35,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":126,"org.apache.commons.lang3.time.FastDateParserTest.testShortDateStyleWithLocales":278,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":187,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":166,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":157,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":186,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":243,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":108,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":144,"org.apache.commons.lang3.exception.ContextedExceptionTest.testSetContextValue":96,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":115,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear":320,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals":254,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":247,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormat":19,"org.apache.commons.lang3.AnnotationUtilsTest.testOneArgNull":33,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":184,"org.apache.commons.lang3.time.FastDateParserTest.testDayOf":279,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsExcludeFields":253,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":125,"org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringString":56,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":236,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":250,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":110,"org.apache.commons.lang3.CharSetTest.testContains_Char":45,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripAccents":67,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":140,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":180,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":189,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":206,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":120,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger":261,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":3,"org.apache.commons.lang3.ArrayUtilsTest.testReverseInt":64,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":143,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":161,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":134,"org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemoverTest.testValidCharacters":322,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteField":190,"org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_String_String_String_String":28,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testSetContextValue":88,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":113,"org.apache.commons.lang3.CharSetUtilsTest.testContainsAny_StringString":59,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOfAny_StringStringArray":82,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture":259,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":182,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_int":292,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":312,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":210,"org.apache.commons.lang3.StringUtilsIsTest.testIsNumeric":32,"org.apache.commons.lang3.CharSetUtilsTest.testCount_StringStringarray":58,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber":265,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":208,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":121,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedStaticFieldForceAccess":213,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_String_String":300,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":237,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":198,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":150,"org.apache.commons.lang3.time.DateUtilsTest.testSetHours":177,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":8,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testTrimToNull":291,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":6,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testAddContextValue":87,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":145,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":230,"org.apache.commons.lang3.ArrayUtilsTest.testReverseDouble":99,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":128,"org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBoolean":263,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection":84,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":5,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedField":192,"org.apache.commons.lang3.time.FastDateParserTest.testParseLongShort":281,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticField":211,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testPerson":103,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":232,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":109,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":248,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":153,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_1":268,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedFieldForceAccess":193,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":111,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_4":269,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArrayNegativeIndex":77,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":245,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":124,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":242,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_StrMatcher_String":288,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testTrim":290,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":123,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementFloatArray":23,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO":17,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfFloatWithStartIndex":26,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldForceAccess":226,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testShortDateStyleWithLocales":272,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":112,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":0,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadField":220,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":267,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":146,"org.apache.commons.lang3.AnnotationUtilsTest.testAnnotationsOfDifferingTypes":34,"org.apache.commons.lang3.time.DateUtilsTest.testAddYears":310,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":244,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":185,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_String_int":303,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":132,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":201,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementByteArray":229,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":205,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByteObjectNull":102,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex":298,"org.apache.commons.lang3.StringUtilsTest.testGetJaroWinklerDistance_StringString":27,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance":74,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testGetFirstContextValue":89,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":204,"org.apache.commons.lang3.CharSetTest.testGetInstance_Stringarray":50,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadFieldForceAccess":227,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":104,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO":16,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":240,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_char_int":304,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":152,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_String":79,"org.apache.commons.lang3.CharSetTest.testSerialization":42,"org.apache.commons.lang3.math.FractionTest.testAdd":83,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":311,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastOrdinalIndexOf":80,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArray":78,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldAccessIllegalArgumentException1":221,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddNegate":51,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray":101,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":149,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldAccessIllegalArgumentException4":223,"org.apache.commons.lang3.time.DateUtilsTest.testWeekIterator":173,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldAccessIllegalArgumentException3":222,"org.apache.commons.lang3.ArrayUtilsTest.testToObject_double":297,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":9,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":122,"org.apache.commons.lang3.math.NumberUtilsTest.testToFloatString":289,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_StrMatcher":68,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_String":302,"org.apache.commons.lang3.time.DateUtilsTest.testMonthIterator":168,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_AD":280,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareExcludeFields":255,"org.apache.commons.lang3.CharSetTest.testStatics":53,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetFirstContextValue":93,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":106,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":239,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":148,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddCombinations":47,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":137,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":321,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrChar":196,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedField":212,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_AD":274,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGenericArrayType":295,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":138,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":179,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":139,"org.apache.commons.lang3.ClassUtilsTest.test_getSimpleName_Object":301,"org.apache.commons.lang3.ConversionTest.testIntToShortArray":262,"org.apache.commons.lang3.CharSetTest.testGetInstance":52,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":114,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testIntegerWithTransients":258,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayLong":100,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":246,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetFirstContextValue":97,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert":264,"org.apache.commons.lang3.time.DateUtilsTest.testSetDays":175,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareTransients":257,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetAccessibleConstructorFromDescription":38,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":1,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetContextValues":98,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetAccessibleConstructor":40,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldForceAccessIllegalArgumentException1":216,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEquals":251,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldForceAccessIllegalArgumentException3":217,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":105,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldForceAccessIllegalArgumentException4":218,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetContextValues":94,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedStaticFieldForceAccess":224,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testAddContextValue":91,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":249,"org.apache.commons.lang3.math.NumberUtilsTest.testStringCreateNumberEnsureNoPrecisionLoss":270,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":142,"org.apache.commons.lang3.builder.CompareToBuilderTest.testShortArrayHiddenByObject":284,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":235,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":202,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringStringarray":63,"org.apache.commons.lang3.time.DateUtilsTest.testAddMilliseconds":176,"org.apache.commons.lang3.CharSetTest.testConstructor_String_combo":46,"org.apache.commons.lang3.time.DateUtilsTest.testAddMinutes":305,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixtureWithTransients":260,"org.apache.commons.lang3.mutable.MutableLongTest.testGetSet":20,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeExactConstructor":39,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":156,"org.apache.commons.lang3.time.FastDateParserTest.testParses":283,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":317,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateDouble":271,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance":70,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":127,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":163,"org.apache.commons.lang3.RangeTest.testIsAfterRange":31,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":117,"org.apache.commons.lang3.time.DateUtilsTest.testTruncateLang59":170,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParses":277,"org.apache.commons.lang3.text.StrBuilderTest.testEquals":228,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompare":256,"org.apache.commons.lang3.ConversionTest.testBinaryToHexDigit":294,"org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringString":55,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":10,"org.apache.commons.lang3.CharSetUtilsTest.testContainsAny_StringStringarray":62,"org.apache.commons.lang3.CharSetTest.testConstructor_String_comboNegated":48,"org.apache.commons.lang3.time.DateUtilsTest.testAddHours":308,"org.apache.commons.lang3.time.DateUtilsTest.testTruncate":169,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":164,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":119,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_StringInt":81,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":313,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testDayOf":273,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedFieldForceAccess":214,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedStaticField":219,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testSetContextValue":92,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":7,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":116,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberMagnitude":266,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":165,"org.apache.commons.lang3.time.DateUtilsTest.testSetSeconds":171,"org.apache.commons.lang3.ArrayUtilsTest.testToObject_short":296},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:338","type":"CtBinaryOperatorImpl","sourcecode":"toType instanceof java.lang.reflect.WildcardType"},"failures":[0,1,2,3,4,4,5,6,7,8,9,9,10,11,12],"tindex":"b6892381-3e82-11e6-be18-0bf1edc4696e","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:862","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final java.lang.Object obj, final boolean fullDetail) {\n    if (obj instanceof java.lang.reflect.WildcardType) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, obj, java.lang.Boolean.valueOf(fullDetail));\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toType":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:201","type":"CtBinaryOperatorImpl","sourcecode":"(locale.getCountry().length()) > 0"},"failures":[13,14,15,16,17,18,19],"tindex":"b689e6d2-3e82-11e6-be18-b96dc8fd243c","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:302","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Date date, final java.lang.String pattern, final java.util.TimeZone timeZone, final java.util.Locale locale) {\n    if ((locale.getCountry().length()) > 0) {\n        {\n            final org.apache.commons.lang3.time.FastDateFormat org.apache.commons.lang3.time.FastDateFormat = org.apache.commons.lang3.time.FastDateFormat.getInstance(pattern, timeZone, locale);\n            return df.format(date);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"locale":"locale"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5982","type":"CtBinaryOperatorImpl","sourcecode":"count == null"},"failures":[20],"tindex":"b68a0de3-3e82-11e6-be18-29ff9c631f71","method":{"position":"org.apache.commons.lang3.mutable.MutableLong:107","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setValue(final java.lang.Number value) {\n    if (value == null) {\n        {\n            org.apache.commons.lang3.mutable.MutableLong.this.long = value.longValue();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:525","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[21],"tindex":"b68a34f4-3e82-11e6-be18-d3ddb2bf2c22","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:289","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final long millis, final java.lang.String pattern, final java.util.TimeZone timeZone, final java.util.Locale locale) {\n    if (pattern == null) {\n        {\n            return org.apache.commons.lang3.time.DateFormatUtils.format(new java.util.Date(millis), pattern, timeZone, locale);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:117","type":"CtBinaryOperatorImpl","sourcecode":"len < 5"},"failures":[22,23,24,25,26],"tindex":"b68a34f5-3e82-11e6-be18-6b50bd20e771","method":{"position":"org.apache.commons.lang3.ArrayUtils:2765","type":"CtMethodImpl","sourcecode":"public static int indexOf(final float[] array, final float valueToFind, int startIndex) {\n    if (startIndex < 5) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                startIndex = 0;\n            } \n            for (int int = startIndex ; i < (array.int) ; i++) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"startIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:671","type":"CtInvocationImpl","sourcecode":"str.equals(nullString)"},"failures":[27],"tindex":"b68a5c06-3e82-11e6-be18-ab7756b2f83d","method":{"position":"org.apache.commons.lang3.StringUtils:7112","type":"CtMethodImpl","sourcecode":"private static int transpositions(java.lang.CharSequence first, java.lang.CharSequence second) {\n    if (second.equals(second)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            for (int int = 0 ; i < (first.length()) ; i++) {\n                if ((first.charAt(i)) != (second.charAt(i))) {\n                    transpositions++;\n                } \n            }\n            return transpositions / 2;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"second","nullString":"second"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:674","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"b68a8317-3e82-11e6-be18-47e78b0fc52a","method":{"position":"org.apache.commons.lang3.time.FastDateParser:660","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nboolean addRegex(final org.apache.commons.lang3.time.FastDateParser parser, final java.lang.StringBuilder regex) {\n    if (regex == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (parser.isNextNumber()) {\n                regex.append(\"(\\\\p{Nd}{\").append(parser.getFieldWidth()).append(\"}+)\");\n            } else {\n                regex.append(\"(\\\\p{Nd}++)\");\n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"regex"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:192","type":"CtBinaryOperatorImpl","sourcecode":"(duration.length()) != 0"},"failures":[28],"tindex":"b68aaa28-3e82-11e6-be18-bf1973553c3e","method":{"position":"org.apache.commons.lang3.BooleanUtils:656","type":"CtMethodImpl","sourcecode":"public static java.lang.Boolean toBooleanObject(final java.lang.String str, final java.lang.String trueString, final java.lang.String falseString, final java.lang.String nullString) {\n    if ((trueString.length()) != 0) {\n        {\n            if (str == null) {\n                if (trueString == null) {\n                    return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n                } \n                if (falseString == null) {\n                    return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n                } \n                if (nullString == null) {\n                    return null;\n                } \n            } else if (str.equals(trueString)) {\n                return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n            } else if (str.equals(falseString)) {\n                return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n            } else if (str.equals(nullString)) {\n                return null;\n            } \n            throw new java.lang.IllegalArgumentException(\"The String did not match any specified value\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"trueString"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:896","type":"CtBinaryOperatorImpl","sourcecode":"first < second"},"failures":[29,30],"tindex":"b68ad139-3e82-11e6-be18-51c726773a6a","method":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:370","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T get(final long timeout, final java.util.concurrent.TimeUnit unit) {\n    if (timeout < timeout) {\n        {\n            return T;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"first":"timeout","second":"timeout"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Range:369","type":"CtBinaryOperatorImpl","sourcecode":"otherRange == null"},"failures":[31],"tindex":"b68af84a-3e82-11e6-be18-8bb4a646d807","method":{"position":"org.apache.commons.lang3.Range:331","type":"CtMethodImpl","sourcecode":"public boolean isAfterRange(final org.apache.commons.lang3.Range<T> otherRange) {\n    if (otherRange == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (otherRange == null) {\n                return false;\n            } \n            return isAfter(otherRange.T);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"otherRange":"otherRange"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:435","type":"CtBinaryOperatorImpl","sourcecode":"(newLine) == null"},"failures":[],"tindex":"b68af84b-3e82-11e6-be18-63af1210625a","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final void applyPattern(final java.lang.String pattern) {\n    if (pattern == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.util.Map<java.lang.String, ? extends org.apache.commons.lang3.text.FormatFactory>) == null) {\n                super.applyPattern(pattern);\n                java.lang.String = super.toPattern();\n                return ;\n            } \n            final java.util.ArrayList<java.text.Format> java.util.ArrayList<java.text.Format> = new java.util.ArrayList<java.text.Format>();\n            final java.util.ArrayList<java.lang.String> java.util.ArrayList<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(pattern.length());\n            final java.text.ParsePosition java.text.ParsePosition = new java.text.ParsePosition(0);\n            final char[] char[] = pattern.toCharArray();\n            int int = 0;\n            while ((pos.getIndex()) < (pattern.length())) {\n                switch (c[pos.getIndex()]) {\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        appendQuotedString(pattern, pos, stripCustom, true);\n                        break;\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        fmtCount++;\n                        seekNonWs(pattern, pos);\n                        final int int = pos.getIndex();\n                        final int int = readArgumentIndex(pattern, next(pos));\n                        stripCustom.append(org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char).append(index);\n                        seekNonWs(pattern, pos);\n                        java.text.Format java.text.Format = null;\n                        java.lang.String java.lang.String = null;\n                        if ((c[pos.getIndex()]) == (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char)) {\n                            formatDescription = parseFormatDescription(pattern, next(pos));\n                            format = getFormat(formatDescription);\n                            if (format == null) {\n                                stripCustom.append(org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char).append(formatDescription);\n                            } \n                        } \n                        foundFormats.add(format);\n                        foundDescriptions.add((format == null ? null : formatDescription));\n                        org.apache.commons.lang3.Validate.isTrue(((foundFormats.size()) == fmtCount));\n                        org.apache.commons.lang3.Validate.isTrue(((foundDescriptions.size()) == fmtCount));\n                        if ((c[pos.getIndex()]) != (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char)) {\n                            throw new java.lang.IllegalArgumentException((\"Unreadable format element at position \" + start));\n                        } \n                    default :\n                        stripCustom.append(c[pos.getIndex()]);\n                        next(pos);\n                }\n            }\n            super.applyPattern(stripCustom.toString());\n            java.lang.String = insertFormats(super.toPattern(), foundDescriptions);\n            if (containsElements(foundFormats)) {\n                final java.text.Format[] java.text.Format[] = getFormats();\n                int int = 0;\n                for (final java.util.Iterator<java.text.Format> java.util.Iterator<java.text.Format> = foundFormats.iterator() ; it.hasNext() ; i++) {\n                    final java.text.Format java.text.Format = it.next();\n                    if (f != null) {\n                        origFormats[i] = f;\n                    } \n                }\n                super.setFormats(origFormats);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"newLine":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:591","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[32],"tindex":"b68b6d7c-3e82-11e6-be18-1dc9c30f383f","method":{"position":"org.apache.commons.lang3.StringUtils:6033","type":"CtMethodImpl","sourcecode":"public static boolean isNumeric(final java.lang.CharSequence cs) {\n    if (cs == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(cs)) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if ((java.lang.Character.isDigit(cs.charAt(i))) == false) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.AnnotationUtils:126","type":"CtBinaryOperatorImpl","sourcecode":"(a1 == null) || (a2 == null)"},"failures":[33,34,35],"tindex":"b68b6d7d-3e82-11e6-be18-892a861565cb","method":{"position":"org.apache.commons.lang3.AnnotationUtils:122","type":"CtMethodImpl","sourcecode":"public static boolean equals(final java.lang.annotation.Annotation a1, final java.lang.annotation.Annotation a2) {\n    if ((a1 == null) || (a1 == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (a1 == a2) {\n                return true;\n            } \n            if ((a1 == null) || (a2 == null)) {\n                return false;\n            } \n            final java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.Class<? extends java.lang.annotation.Annotation> = a1.annotationType();\n            final java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.Class<? extends java.lang.annotation.Annotation> = a2.annotationType();\n            org.apache.commons.lang3.Validate.notNull(type, \"Annotation %s with null annotationType()\", a1);\n            org.apache.commons.lang3.Validate.notNull(type2, \"Annotation %s with null annotationType()\", a2);\n            if (!(type.equals(type2))) {\n                return false;\n            } \n            try {\n                for (final java.lang.reflect.Method java.lang.reflect.Method : type.getDeclaredMethods()) {\n                    if (((m.getParameterTypes().int) == 0) && (org.apache.commons.lang3.AnnotationUtils.isValidAnnotationMemberType(m.getReturnType()))) {\n                        final java.lang.Object java.lang.Object = m.invoke(a1);\n                        final java.lang.Object java.lang.Object = m.invoke(a2);\n                        if (!(org.apache.commons.lang3.AnnotationUtils.memberEquals(m.getReturnType(), v1, v2))) {\n                            return false;\n                        } \n                    } \n                }\n            } catch (final java.lang.IllegalAccessException ex) {\n                return false;\n            } catch (final java.lang.reflect.InvocationTargetException ex) {\n                return false;\n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a1":"a1","a2":"a1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1040","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[],"tindex":"b68bbb9e-3e82-11e6-be18-b5df3c2ee6f6","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:735","type":"CtMethodImpl","sourcecode":"private int readWithQuotes(final char[] srcChars, final int start, final int len, final org.apache.commons.lang3.text.StrBuilder workArea, final java.util.List<java.lang.String> tokenList, final int quoteStart, final int quoteLen) {\n    if (quoteStart < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            workArea.clear();\n            int int = start;\n            boolean boolean = quoteLen > 0;\n            int int = 0;\n            while (pos < len) {\n                if (quoting) {\n                    if (isQuote(srcChars, pos, len, quoteStart, quoteLen)) {\n                        if (isQuote(srcChars, (pos + quoteLen), len, quoteStart, quoteLen)) {\n                            workArea.append(srcChars, pos, quoteLen);\n                            pos += quoteLen * 2;\n                            trimStart = workArea.size();\n                            continue;\n                        } \n                        quoting = false;\n                        pos += quoteLen;\n                        continue;\n                    } \n                    workArea.append(srcChars[(pos++)]);\n                    trimStart = workArea.size();\n                } else {\n                    final int int = getDelimiterMatcher().isMatch(srcChars, pos, start, len);\n                    if (delimLen > 0) {\n                        addToken(tokenList, workArea.substring(0, trimStart));\n                        return pos + delimLen;\n                    } \n                    if ((quoteLen > 0) && (isQuote(srcChars, pos, len, quoteStart, quoteLen))) {\n                        quoting = true;\n                        pos += quoteLen;\n                        continue;\n                    } \n                    final int int = getIgnoredMatcher().isMatch(srcChars, pos, start, len);\n                    if (ignoredLen > 0) {\n                        pos += ignoredLen;\n                        continue;\n                    } \n                    final int int = getTrimmerMatcher().isMatch(srcChars, pos, start, len);\n                    if (trimmedLen > 0) {\n                        workArea.append(srcChars, pos, trimmedLen);\n                        pos += trimmedLen;\n                        continue;\n                    } \n                    workArea.append(srcChars[(pos++)]);\n                    trimStart = workArea.size();\n                }\n            }\n            addToken(tokenList, workArea.substring(0, trimStart));\n            return -1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"quoteStart"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1870","type":"CtBinaryOperatorImpl","sourcecode":"fieldNameValueSeparator == null"},"failures":[],"tindex":"b68be2af-3e82-11e6-be18-b99155a6e236","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:212","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final long millis, final java.lang.String pattern, final java.util.TimeZone timeZone) {\n    if (pattern == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateFormatUtils.format(new java.util.Date(millis), pattern, timeZone, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldNameValueSeparator":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:481","type":"CtVariableReadImpl","sourcecode":"detail"},"failures":[],"tindex":"b68c08c0-3e82-11e6-be18-65d01eaa02fb","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:65","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setUseClassName(final boolean useClassName) {\n    if (useClassName) {\n        {\n            super.setUseClassName(useClassName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"detail":"useClassName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5016","type":"CtBinaryOperatorImpl","sourcecode":"last != (org.apache.commons.lang3.CharUtils.CR)"},"failures":[],"tindex":"b68c08c1-3e82-11e6-be18-fb4bb6003f5c","method":{"position":"org.apache.commons.lang3.StringUtils:3399","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final short[] array, final char separator) {\n    if (separator != separator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            return org.apache.commons.lang3.StringUtils.join(array, separator, 0, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"separator","org.apache.commons.lang3.CharUtils.CR":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:995","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[36],"tindex":"b68c2fd2-3e82-11e6-be18-59caf7be8def","method":{"position":"org.apache.commons.lang3.StringUtils:4937","type":"CtMethodImpl","sourcecode":"public static java.lang.String overlay(final java.lang.String str, java.lang.String overlay, int start, int end) {\n    if (start > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (overlay == null) {\n                overlay = org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = str.length();\n            if (start < 0) {\n                start = 0;\n            } \n            if (start > len) {\n                start = len;\n            } \n            if (end < 0) {\n                end = 0;\n            } \n            if (end > len) {\n                end = len;\n            } \n            if (start > end) {\n                final int int = start;\n                start = end;\n                end = temp;\n            } \n            return new java.lang.StringBuilder(((((len + start) - end) + (overlay.length())) + 1)).append(str.substring(0, start)).append(overlay).append(str.substring(end)).toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"start"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.JavaVersion:136","type":"CtInvocationImpl","sourcecode":"\"1.2\".equals(nom)"},"failures":[],"tindex":"b68c56e3-3e82-11e6-be18-2544045aae44","method":{"position":"org.apache.commons.lang3.StringUtils:1842","type":"CtMethodImpl","sourcecode":"public static boolean containsOnly(final java.lang.CharSequence cs, final java.lang.String validChars) {\n    if (\"1.2\".equals(cs)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((cs == null) || (validChars == null)) {\n                return false;\n            } \n            return org.apache.commons.lang3.StringUtils.containsOnly(cs, validChars.toCharArray());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"cs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:724","type":"CtBinaryOperatorImpl","sourcecode":"lhs != rhs"},"failures":[37],"tindex":"b68c56e4-3e82-11e6-be18-1df8db60cc9b","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1240","type":"CtMethodImpl","sourcecode":"public static short max(short a, final short b, final short c) {\n    if (b != c) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b > a) {\n                a = b;\n            } \n            if (c > a) {\n                a = c;\n            } \n            return a;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"b","rhs":"c"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:778","type":"CtBinaryOperatorImpl","sourcecode":"classes == null"},"failures":[38,39,40],"tindex":"b68c56e5-3e82-11e6-be18-a5a3aed3e6a2","method":{"position":"org.apache.commons.lang3.reflect.ConstructorUtils:196","type":"CtMethodImpl","sourcecode":"public static <T>java.lang.reflect.Constructor<T> getAccessibleConstructor(final java.lang.Class<T> cls, final java.lang.Class<?>... parameterTypes) {\n    if (parameterTypes == null) {\n        {\n            org.apache.commons.lang3.Validate.notNull(cls, \"class cannot be null\");\n            try {\n                return org.apache.commons.lang3.reflect.ConstructorUtils.getAccessibleConstructor(cls.getConstructor(parameterTypes));\n            } catch (final java.lang.NoSuchMethodException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classes":"parameterTypes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3850","type":"CtBinaryOperatorImpl","sourcecode":"array1 == null"},"failures":[],"tindex":"b68c7df6-3e82-11e6-be18-596a2f708483","method":{"position":"org.apache.commons.lang3.ArrayUtils:5444","type":"CtMethodImpl","sourcecode":"public static short[] removeElements(final short[] array, final short... values) {\n    if (values == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            final java.util.HashMap<java.lang.Short, org.apache.commons.lang3.mutable.MutableInt> java.util.HashMap<java.lang.Short, org.apache.commons.lang3.mutable.MutableInt> = new java.util.HashMap<java.lang.Short, org.apache.commons.lang3.mutable.MutableInt>(values.int);\n            for (final short short : values) {\n                final java.lang.Short java.lang.Short = java.lang.Short.valueOf(v);\n                final org.apache.commons.lang3.mutable.MutableInt org.apache.commons.lang3.mutable.MutableInt = occurrences.get(boxed);\n                if (count == null) {\n                    occurrences.put(boxed, new org.apache.commons.lang3.mutable.MutableInt(1));\n                } else {\n                    count.increment();\n                }\n            }\n            final java.util.BitSet java.util.BitSet = new java.util.BitSet();\n            for (final java.util.Map.Entry<java.lang.Short, org.apache.commons.lang3.mutable.MutableInt> java.util.Map.Entry<java.lang.Short, org.apache.commons.lang3.mutable.MutableInt> : occurrences.entrySet()) {\n                final java.lang.Short java.lang.Short = e.getKey();\n                int int = 0;\n                for (int int = 0, int int = e.getValue().intValue() ; i < ct ; i++) {\n                    found = org.apache.commons.lang3.ArrayUtils.indexOf(array, v.shortValue(), found);\n                    if (found < 0) {\n                        break;\n                    } \n                    toRemove.set((found++));\n                }\n            }\n            return ((short[])(org.apache.commons.lang3.ArrayUtils.removeAll(array, toRemove)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"values"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5553","type":"CtBinaryOperatorImpl","sourcecode":"found < 0"},"failures":[],"tindex":"b68c7df7-3e82-11e6-be18-4f76abfd57fa","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:256","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getTimeInstance(final int style, final java.util.Locale locale) {\n    if (style < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FormatCache<org.apache.commons.lang3.time.FastDateFormat>.getTimeInstance(style, null, locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"found":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:111","type":"CtBinaryOperatorImpl","sourcecode":"(!(java.lang.Character.isUpperCase(ch1))) || (!(java.lang.Character.isUpperCase(ch2)))"},"failures":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"tindex":"b68ca508-3e82-11e6-be18-b11325366253","method":{"position":"org.apache.commons.lang3.CharRange:113","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.CharRange isIn(final char start, final char end) {\n    if ((!(java.lang.Character.isUpperCase(start))) || (!(java.lang.Character.isUpperCase(start)))) {\n        {\n            return new org.apache.commons.lang3.CharRange(start , end , false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch2":"start","ch1":"start"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1744","type":"CtBinaryOperatorImpl","sourcecode":"len > 0"},"failures":[64,65],"tindex":"b68ca509-3e82-11e6-be18-fd4d0bc05b8e","method":{"position":"org.apache.commons.lang3.ArrayUtils:1748","type":"CtMethodImpl","sourcecode":"public static void reverse(final int[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (endIndexExclusive > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return ;\n            } \n            int int = startIndexInclusive < 0 ? 0 : startIndexInclusive;\n            int int = (java.lang.Math.min(array.int, endIndexExclusive)) - 1;\n            int int;\n            while (j > i) {\n                tmp = array[j];\n                array[j] = array[i];\n                array[i] = tmp;\n                j--;\n                i++;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"endIndexExclusive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3613","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[66],"tindex":"b68ccc1a-3e82-11e6-be18-912413463dbe","method":{"position":"org.apache.commons.lang3.ArrayUtils:2090","type":"CtMethodImpl","sourcecode":"public static boolean contains(final long[] array, final long valueToFind) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1247","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[67],"tindex":"b68ccc1b-3e82-11e6-be18-d77a15d10c28","method":{"position":"org.apache.commons.lang3.StringUtils:761","type":"CtMethodImpl","sourcecode":"public static java.lang.String stripAccents(final java.lang.String input) {\n    if (input != null) {\n        {\n            if (input == null) {\n                return null;\n            } \n            final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\");\n            final java.lang.String java.lang.String = java.text.Normalizer.normalize(input, java.text.Normalizer.Form.java.text.Normalizer.Form.java.text.Normalizer.Form);\n            return pattern.matcher(decomposed).replaceAll(\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:913","type":"CtBinaryOperatorImpl","sourcecode":"quote != null"},"failures":[68],"tindex":"b68cf32c-3e82-11e6-be18-7fb727ebc03d","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1796","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder deleteFirst(final org.apache.commons.lang3.text.StrMatcher matcher) {\n    if (matcher != null) {\n        {\n            return replace(matcher, null, 0, int, 1);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"quote":"matcher"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSetUtils:244","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isNotEmpty(s)"},"failures":[69],"tindex":"b68cf32d-3e82-11e6-be18-39f442952e5b","method":{"position":"org.apache.commons.lang3.StringUtils:2331","type":"CtMethodImpl","sourcecode":"public static java.lang.String substringAfter(final java.lang.String str, final java.lang.String separator) {\n    if (org.apache.commons.lang3.StringUtils.isNotEmpty(str)) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                return str;\n            } \n            if (separator == null) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = str.indexOf(separator);\n            if (pos == (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            return str.substring((pos + (separator.length())));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"s":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7059","type":"CtBinaryOperatorImpl","sourcecode":"(m1.length()) != (m2.length())"},"failures":[],"tindex":"b68cf32e-3e82-11e6-be18-639c2a0ae923","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:355","type":"CtMethodImpl","sourcecode":"public void appendToString(final java.lang.StringBuffer buffer, final java.lang.String toString) {\n    if ((toString.length()) != (toString.length())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (toString != null) {\n                final int int = (toString.indexOf(java.lang.String)) + (java.lang.String.length());\n                final int int = toString.lastIndexOf(java.lang.String);\n                if (((pos1 != pos2) && (pos1 >= 0)) && (pos2 >= 0)) {\n                    final java.lang.String java.lang.String = toString.substring(pos1, pos2);\n                    if (boolean) {\n                        removeLastFieldSeparator(buffer);\n                    } \n                    buffer.append(data);\n                    appendFieldSeparator(buffer);\n                } \n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m1":"toString","m2":"toString"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1623","type":"CtBinaryOperatorImpl","sourcecode":"((nBools - 1) + srcPos) >= 16"},"failures":[],"tindex":"b68d1a3f-3e82-11e6-be18-d12dfe38d6c8","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1623","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, final int value) {\n    if (((index - 1) + index) >= 16) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return insert(index, java.lang.String.valueOf(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"index","srcPos":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:761","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"b68d1a40-3e82-11e6-be18-2309f00bdd71","method":{"position":"org.apache.commons.lang3.exception.ContextedRuntimeException:199","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.List<java.lang.Object> getContextValues(final java.lang.String label) {\n    if (label == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.exception.ContextedRuntimeException.this.org.apache.commons.lang3.exception.ExceptionContext.getContextValues(label);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"label"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2080","type":"CtBinaryOperatorImpl","sourcecode":"len > (size)"},"failures":[70,71,72,73,74],"tindex":"b68d1a41-3e82-11e6-be18-6f48f14d3d53","method":{"position":"org.apache.commons.lang3.time.FormatCache:142","type":"CtMethodImpl","sourcecode":"F getDateTimeInstance(final int dateStyle, final int timeStyle, final java.util.TimeZone timeZone, java.util.Locale locale) {\n    if (dateStyle > timeStyle) {\n        {\n            return getDateTimeInstance(java.lang.Integer.valueOf(dateStyle), java.lang.Integer.valueOf(timeStyle), timeZone, locale);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"dateStyle","size":"timeStyle"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:554","type":"CtBinaryOperatorImpl","sourcecode":"str == \"true\""},"failures":[],"tindex":"b68d4152-3e82-11e6-be18-3156b6948ec6","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:336","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Method getAccessibleMethod(final java.lang.Class<?> cls, final java.lang.String methodName, final java.lang.Class<?>... parameterTypes) {\n    if (methodName == null) {\n        {\n            if (methodName == \"true\") {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethod(cls.getMethod(methodName, parameterTypes));\n                    } catch (final java.lang.NoSuchMethodException e) {\n                        return null;\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"methodName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:677","type":"CtBinaryOperatorImpl","sourcecode":"(lhs == null) || (rhs == null)"},"failures":[75,76,77,78],"tindex":"b68ddd93-3e82-11e6-be18-d7d06b670388","method":{"position":"org.apache.commons.lang3.ArrayUtils:5680","type":"CtMethodImpl","sourcecode":"public static long[] removeAll(final long[] array, final int... indices) {\n    if ((array == null) || (array == null)) {\n        {\n            return ((long[])(org.apache.commons.lang3.ArrayUtils.removeAll(((java.lang.Object)(array)), org.apache.commons.lang3.ArrayUtils.clone(indices))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:573","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"b68e04a4-3e82-11e6-be18-4db0b13be8a2","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:982","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if (buffer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendTo(buffer, ((calendar.get(java.util.Calendar.java.util.Calendar.int)) + 1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"buffer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.StringUtils:3720","type":"CtBinaryOperatorImpl","sourcecode":"i > startIndex"},"failures":[],"tindex":"b68e04a5-3e82-11e6-be18-1915ae4dc1e9","method":{"position":"org.apache.commons.lang3.text.translate.NumericEntityUnescaper:78","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int translate(final java.lang.CharSequence input, final int index, final java.io.Writer out) throws java.io.IOException {\n    if (index > index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            final int int = input.length();\n            if ((((input.charAt(index)) == '&') && (index < (seqEnd - 2))) && ((input.charAt((index + 1))) == '#')) {\n                int int = index + 2;\n                boolean boolean = false;\n                final char char = input.charAt(start);\n                if ((firstChar == 'x') || (firstChar == 'X')) {\n                    start++;\n                    isHex = true;\n                    if (start == seqEnd) {\n                        return 0;\n                    } \n                } \n                int int = start;\n                while ((end < seqEnd) && (((((input.charAt(end)) >= '0') && ((input.charAt(end)) <= '9')) || (((input.charAt(end)) >= 'a') && ((input.charAt(end)) <= 'f'))) || (((input.charAt(end)) >= 'A') && ((input.charAt(end)) <= 'F')))) {\n                    end++;\n                }\n                final boolean boolean = (end != seqEnd) && ((input.charAt(end)) == ';');\n                if (!semiNext) {\n                    if (isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION.org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION.org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION)) {\n                        return 0;\n                    } else if (isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION.org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION.org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION)) {\n                        throw new java.lang.IllegalArgumentException(\"Semi-colon required at end of numeric entity\");\n                    } \n                } \n                int int;\n                try {\n                    if (isHex) {\n                        entityValue = java.lang.Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                    } else {\n                        entityValue = java.lang.Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                    }\n                } catch (final java.lang.NumberFormatException nfe) {\n                    return 0;\n                }\n                if (entityValue > 65535) {\n                    final char[] char[] = java.lang.Character.toChars(entityValue);\n                    out.write(chrs[0]);\n                    out.write(chrs[1]);\n                } else {\n                    out.write(entityValue);\n                }\n                return (((2 + end) - start) + (isHex ? 1 : 0)) + (semiNext ? 1 : 0);\n            } \n            return 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"index","i":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:634","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[79,80,81,82],"tindex":"b68e2bb6-3e82-11e6-be18-2d8485332454","method":{"position":"org.apache.commons.lang3.CharSequenceUtils:144","type":"CtMethodImpl","sourcecode":"static int lastIndexOf(final java.lang.CharSequence cs, final java.lang.CharSequence searchChar, final int start) {\n    if (searchChar == null) {\n        {\n            return cs.toString().lastIndexOf(searchChar.toString(), start);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"searchChar"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:705","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[],"tindex":"b68e2bb7-3e82-11e6-be18-2d8ece88f138","method":{"position":"org.apache.commons.lang3.ArrayUtils:3878","type":"CtMethodImpl","sourcecode":"public static int[] addAll(final int[] array1, final int... array2) {\n    if (array2 == array1) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array1 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array2);\n            } else if (array2 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array1);\n            } \n            final int[] int[] = new int[(array1.int) + (array2.int)];\n            java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n            java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n            return joinedArray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array2","rhs":"array1"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:797","type":"CtBinaryOperatorImpl","sourcecode":"fraction == null"},"failures":[83],"tindex":"b68e52c8-3e82-11e6-be18-3519469095e9","method":{"position":"org.apache.commons.lang3.math.Fraction:712","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.math.Fraction add(final org.apache.commons.lang3.math.Fraction fraction) {\n    if (fraction == null) {\n        {\n            return addSub(fraction, true);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fraction":"fraction"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:726","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[84],"tindex":"b68e52c9-3e82-11e6-be18-9d9f4077065b","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1154","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendWithSeparators(final java.lang.Iterable<?> iterable, final java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (iterable != null) {\n                @java.lang.SuppressWarnings(value = \"deprecation\")\n                final java.lang.String java.lang.String = org.apache.commons.lang3.ObjectUtils.toString(separator);\n                final java.util.Iterator<?> java.util.Iterator<?> = iterable.iterator();\n                while (it.hasNext()) {\n                    append(it.next());\n                    if (it.hasNext()) {\n                        append(sep);\n                    } \n                }\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:507","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[85,86],"tindex":"b68e79da-3e82-11e6-be18-3b7ceb1168a2","method":{"position":"org.apache.commons.lang3.ClassPathUtils:106","type":"CtMethodImpl","sourcecode":"public static java.lang.String toFullyQualifiedPath(final java.lang.Class<?> context, final java.lang.String resourceName) {\n    if (resourceName == null) {\n        {\n            org.apache.commons.lang3.Validate.notNull(context, \"Parameter '%s' must not be null!\", \"context\");\n            org.apache.commons.lang3.Validate.notNull(resourceName, \"Parameter '%s' must not be null!\", \"resourceName\");\n            return org.apache.commons.lang3.ClassPathUtils.toFullyQualifiedPath(context.getPackage(), resourceName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"resourceName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5001","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 1"},"failures":[27],"tindex":"b68e79db-3e82-11e6-be18-45f2104a4fc5","method":{"position":"org.apache.commons.lang3.StringUtils:7129","type":"CtMethodImpl","sourcecode":"private static int commonPrefixLength(java.lang.CharSequence first, java.lang.CharSequence second) {\n    if ((first.length()) == 1) {\n        {\n            final int int = org.apache.commons.lang3.StringUtils.getCommonPrefix(first.toString(), second.toString()).length();\n            return result > 4 ? 4 : result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"first"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:244","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof java.util.Map.Entry<?, ?>"},"failures":[],"tindex":"b68e79dc-3e82-11e6-be18-2d811784ac6a","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:592","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(final java.lang.Object source) {\n    if (source instanceof java.util.Map.Entry<?, ?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return null;\n            } \n            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder().append(source);\n            substitute(buf, 0, buf.length());\n            return buf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.JavaVersion:144","type":"CtInvocationImpl","sourcecode":"\"1.6\".equals(nom)"},"failures":[87,88,89,90,91,92,93,94,95,96,97,98],"tindex":"b68ea0ed-3e82-11e6-be18-a91932465894","method":{"position":"org.apache.commons.lang3.exception.DefaultExceptionContext:91","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object getFirstContextValue(final java.lang.String label) {\n    if (\"1.6\".equals(label)) {\n        {\n            for (final org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object> org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object> : java.util.List<org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object>>) {\n                if (org.apache.commons.lang3.StringUtils.equals(label, pair.getKey())) {\n                    return pair.getValue();\n                } \n            }\n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"label"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:598","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Arrays.equals(lhs, rhs))"},"failures":[],"tindex":"b68ea0ee-3e82-11e6-be18-d5cefff48df4","method":{"position":"org.apache.commons.lang3.ArrayUtils:5769","type":"CtMethodImpl","sourcecode":"public static float[] removeAll(final float[] array, final int... indices) {\n    if (!(java.util.Arrays.equals(indices, indices))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((float[])(org.apache.commons.lang3.ArrayUtils.removeAll(((java.lang.Object)(array)), org.apache.commons.lang3.ArrayUtils.clone(indices))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"indices","rhs":"indices"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2591","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[99],"tindex":"b68ec7ff-3e82-11e6-be18-bdc367309d7b","method":{"position":"org.apache.commons.lang3.ArrayUtils:1519","type":"CtMethodImpl","sourcecode":"public static void reverse(final double[] array) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return ;\n            } \n            org.apache.commons.lang3.ArrayUtils.reverse(array, 0, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:796","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[100],"tindex":"b68ec800-3e82-11e6-be18-c9615e401389","method":{"position":"org.apache.commons.lang3.ArrayUtils:4205","type":"CtMethodImpl","sourcecode":"public static long[] add(final long[] array, final long element) {\n    if (array == null) {\n        {\n            final long[] long[] = ((long[])(org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(array, java.lang.Long.java.lang.Long.java.lang.Class<java.lang.Long>)));\n            newArray[((newArray.int) - 1)] = element;\n            return newArray;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.InheritanceUtils:61","type":"CtBinaryOperatorImpl","sourcecode":"d == 1"},"failures":[],"tindex":"b68eef11-3e82-11e6-be18-971093a0e8d2","method":{"position":"org.apache.commons.lang3.text.translate.NumericEntityEscaper:95","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.translate.NumericEntityEscaper outsideOf(final int codepointLow, final int codepointHigh) {\n    if (codepointLow == 1) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.lang3.text.translate.NumericEntityEscaper(codepointLow , codepointHigh , false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"codepointLow"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1663","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"b68eef12-3e82-11e6-be18-8dfe673bf0d9","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1363","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type unrollVariables(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeArguments, final java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeArguments == null) {\n                typeArguments = java.util.Collections.<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>emptyMap();\n            } \n            if (org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(type)) {\n                if (type instanceof java.lang.reflect.TypeVariable<?>) {\n                    return org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(typeArguments, typeArguments.get(type));\n                } \n                if (type instanceof java.lang.reflect.ParameterizedType) {\n                    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n                    final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>;\n                    if ((p.getOwnerType()) == null) {\n                        parameterizedTypeArguments = typeArguments;\n                    } else {\n                        parameterizedTypeArguments = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>(typeArguments);\n                        parameterizedTypeArguments.putAll(org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(p));\n                    }\n                    final java.lang.reflect.Type[] java.lang.reflect.Type[] = p.getActualTypeArguments();\n                    for (int int = 0 ; i < (args.int) ; i++) {\n                        final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(parameterizedTypeArguments, args[i]);\n                        if (unrolled != null) {\n                            args[i] = unrolled;\n                        } \n                    }\n                    return org.apache.commons.lang3.reflect.TypeUtils.parameterizeWithOwner(p.getOwnerType(), ((java.lang.Class<?>)(p.getRawType())), args);\n                } \n                if (type instanceof java.lang.reflect.WildcardType) {\n                    final java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n                    return org.apache.commons.lang3.reflect.TypeUtils.wildcardType().withUpperBounds(org.apache.commons.lang3.reflect.TypeUtils.unrollBounds(typeArguments, wild.getUpperBounds())).withLowerBounds(org.apache.commons.lang3.reflect.TypeUtils.unrollBounds(typeArguments, wild.getLowerBounds())).build();\n                } \n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1436","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"b68f1623-3e82-11e6-be18-b3d11b53e330","method":{"position":"org.apache.commons.lang3.Validate:1010","type":"CtMethodImpl","sourcecode":"public static void inclusiveBetween(double start, double end, double value, java.lang.String message) {\n    if (message == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value < start) || (value > end)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomUtils:142","type":"CtBinaryOperatorImpl","sourcecode":"startInclusive == endInclusive"},"failures":[],"tindex":"b68f1624-3e82-11e6-be18-33eb2cc88960","method":{"position":"org.apache.commons.lang3.mutable.MutableDouble:177","type":"CtMethodImpl","sourcecode":"public void subtract(final double operand) {\n    if (operand == operand) {\n        {\n            org.apache.commons.lang3.mutable.MutableDouble.this.double -= operand;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startInclusive":"operand","endInclusive":"operand"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:514","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.ArrayUtils.isSameLength(classArray, toClassArray)) == false"},"failures":[101],"tindex":"b68f3d35-3e82-11e6-be18-0bcab1d0be87","method":{"position":"org.apache.commons.lang3.ClassUtils:477","type":"CtMethodImpl","sourcecode":"public static boolean isAssignable(final java.lang.Class<?>[] classArray, final java.lang.Class<?>... toClassArray) {\n    if ((org.apache.commons.lang3.ArrayUtils.isSameLength(toClassArray, toClassArray)) == false) {\n        {\n            return org.apache.commons.lang3.ClassUtils.isAssignable(classArray, toClassArray, org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion.org.apache.commons.lang3.JavaVersion.org.apache.commons.lang3.JavaVersion));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toClassArray":"toClassArray","classArray":"toClassArray"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3230","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[102],"tindex":"b68f3d36-3e82-11e6-be18-15621d8b7699","method":{"position":"org.apache.commons.lang3.ArrayUtils:772","type":"CtMethodImpl","sourcecode":"public static java.lang.Byte[] nullToEmpty(final java.lang.Byte[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Byte[];\n            } \n            return array;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:702","type":"CtBinaryOperatorImpl","sourcecode":"(isEquals) == false"},"failures":[103,104,105,105,106,4,5,6,6,7,7,8,107,108,109,110,111,112,112,113,113,114,115,116,117,117,118,119,120,121,121,122,123,124,125,125,126,126,127,127,128,129,130,130,131,131,132,132,133,134,135,135,136,136,137,138,139,140,140,141,141,142,142,143,144,144,145,146,147,148,148,149,149,150,151,151,152,153,153,154,155,156,157,157,158,159,159,9,160,161,161,162,162,163,164,164,165,165,166,167,167],"tindex":"b68f6447-3e82-11e6-be18-13df8fcb7057","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:623","type":"CtMethodImpl","sourcecode":"public void setAppendStatics(final boolean appendStatics) {\n    if (appendStatics == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.boolean = appendStatics;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEquals":"appendStatics"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:548","type":"CtBinaryOperatorImpl","sourcecode":"(comparison) != 0"},"failures":[168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189],"tindex":"b68f8b58-3e82-11e6-be18-5d4bc7051f82","method":{"position":"org.apache.commons.lang3.time.DateUtils:957","type":"CtMethodImpl","sourcecode":"private static void modify(final java.util.Calendar val, final int field, final int modType) {\n    if (modType != 0) {\n        {\n            if ((val.get(java.util.Calendar.java.util.Calendar.int)) > 280000000) {\n                throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n            } \n            if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                return ;\n            } \n            final java.util.Date java.util.Date = val.getTime();\n            long long = date.getTime();\n            boolean boolean = false;\n            final int int = val.get(java.util.Calendar.java.util.Calendar.int);\n            if (((org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int) == modType) || (millisecs < 500)) {\n                time = time - millisecs;\n            } \n            if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                done = true;\n            } \n            final int int = val.get(java.util.Calendar.java.util.Calendar.int);\n            if ((!done) && (((org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int) == modType) || (seconds < 30))) {\n                time = time - (seconds * 1000L);\n            } \n            if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                done = true;\n            } \n            final int int = val.get(java.util.Calendar.java.util.Calendar.int);\n            if ((!done) && (((org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int) == modType) || (minutes < 30))) {\n                time = time - (minutes * 60000L);\n            } \n            if ((date.getTime()) != time) {\n                date.setTime(time);\n                val.setTime(date);\n            } \n            boolean boolean = false;\n            for (final int[] int[] : org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int[][]) {\n                for (final int int : aField) {\n                    if (element == field) {\n                        if ((modType == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) || ((modType == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) && roundUp)) {\n                            if (field == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) {\n                                if ((val.get(java.util.Calendar.java.util.Calendar.int)) == 1) {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 15);\n                                } else {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, (-15));\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 1);\n                                }\n                            } else if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                                if ((val.get(java.util.Calendar.java.util.Calendar.int)) == 0) {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 12);\n                                } else {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, (-12));\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 1);\n                                }\n                            } else {\n                                val.add(aField[0], 1);\n                            }\n                        } \n                        return ;\n                    } \n                }\n                int int = 0;\n                boolean boolean = false;\n                switch (field) {\n                    case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                        if ((aField[0]) == (java.util.Calendar.java.util.Calendar.int)) {\n                            offset = (val.get(java.util.Calendar.java.util.Calendar.int)) - 1;\n                            if (offset >= 15) {\n                                offset -= 15;\n                            } \n                            roundUp = offset > 7;\n                            offsetSet = true;\n                        } \n                        break;\n                    case java.util.Calendar.java.util.Calendar.int :\n                        if ((aField[0]) == (java.util.Calendar.java.util.Calendar.int)) {\n                            offset = val.get(java.util.Calendar.java.util.Calendar.int);\n                            if (offset >= 12) {\n                                offset -= 12;\n                            } \n                            roundUp = offset >= 6;\n                            offsetSet = true;\n                        } \n                        break;\n                    default :\n                        break;\n                }\n                if (!offsetSet) {\n                    final int int = val.getActualMinimum(aField[0]);\n                    final int int = val.getActualMaximum(aField[0]);\n                    offset = (val.get(aField[0])) - min;\n                    roundUp = offset > ((max - min) / 2);\n                } \n                if (offset != 0) {\n                    val.set(aField[0], ((val.get(aField[0])) - offset));\n                } \n            }\n            throw new java.lang.IllegalArgumentException(((\"The field \" + field) + \" is not supported\"));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"modType"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.StringUtils:1843","type":"CtBinaryOperatorImpl","sourcecode":"(cs == null) || (validChars == null)"},"failures":[190,191,192,193,194,195],"tindex":"b68fb269-3e82-11e6-be18-9fb5ce703ca4","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:641","type":"CtMethodImpl","sourcecode":"public static void writeField(final java.lang.reflect.Field field, final java.lang.Object target, final java.lang.Object value, final boolean forceAccess) throws java.lang.IllegalAccessException {\n    if ((value == null) || (target == null)) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((field != null), \"The field must not be null\");\n            if (forceAccess && (!(field.isAccessible()))) {\n                field.setAccessible(true);\n            } else {\n                org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(field);\n            }\n            field.set(target, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"value","validChars":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2210","type":"CtBinaryOperatorImpl","sourcecode":"len < 0"},"failures":[196],"tindex":"b68fd97a-3e82-11e6-be18-53a7efb9cc41","method":{"position":"org.apache.commons.lang3.ArrayUtils:1034","type":"CtMethodImpl","sourcecode":"public static char[] subarray(final char[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (endIndexExclusive < 0) {\n        {\n            if (array == null) {\n                return null;\n            } \n            if (startIndexInclusive < 0) {\n                startIndexInclusive = 0;\n            } \n            if (endIndexExclusive > (array.int)) {\n                endIndexExclusive = array.int;\n            } \n            final int int = endIndexExclusive - startIndexInclusive;\n            if (newSize <= 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.char[];\n            } \n            final char[] char[] = new char[newSize];\n            java.lang.System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n            return subarray;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"endIndexExclusive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:222","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[197,198,199,200,201,202,203,204,113,113,114,115,116,117,118,119,120,121,122,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,9,160,161,162,163,164,165,166,167,205,206,207,208,209,210],"tindex":"b68fd97b-3e82-11e6-be18-b7c2f2375814","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:992","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final long[] array) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.math.Fraction:931","type":"CtBinaryOperatorImpl","sourcecode":"(toProperString) == null"},"failures":[211],"tindex":"b690008c-3e82-11e6-be18-1d2e5c574e0f","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:274","type":"CtMethodImpl","sourcecode":"public static java.lang.Object readStaticField(final java.lang.Class<?> cls, final java.lang.String fieldName) throws java.lang.IllegalAccessException {\n    if (fieldName == null) {\n        {\n            return org.apache.commons.lang3.reflect.FieldUtils.readStaticField(cls, fieldName, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toProperString":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3966","type":"CtBinaryOperatorImpl","sourcecode":"array1 == null"},"failures":[],"tindex":"b690008d-3e82-11e6-be18-5bf6ebd2f6d6","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:488","type":"CtMethodImpl","sourcecode":"public static void writeStaticField(final java.lang.reflect.Field field, final java.lang.Object value) throws java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            org.apache.commons.lang3.reflect.FieldUtils.writeStaticField(field, value, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalArgumentException","condition":{"position":"org.apache.commons.lang3.reflect.FieldUtils:172","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.lang3.reflect.MemberUtils.isAccessible(field))"},"failures":[],"tindex":"b690008e-3e82-11e6-be18-09454aba2f10","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:573","type":"CtMethodImpl","sourcecode":"protected java.lang.Object getValue(final java.lang.reflect.Field field) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException {\n    if (!(org.apache.commons.lang3.reflect.MemberUtils.isAccessible(field))) {\n        {\n            return field.get(org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.getObject());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:151","type":"CtBinaryOperatorImpl","sourcecode":"methodName != null"},"failures":[212,213,214,215,216,217,218,193,219,220,221,222,223,224,195,225,226,227],"tindex":"b690279f-3e82-11e6-be18-490a1f4f5ff2","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:166","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Field getDeclaredField(final java.lang.Class<?> cls, final java.lang.String fieldName, final boolean forceAccess) {\n    if (fieldName != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.isTrue((cls != null), \"The class must not be null\");\n            org.apache.commons.lang3.Validate.isTrue(org.apache.commons.lang3.StringUtils.isNotBlank(fieldName), \"The field name must not be blank/empty\");\n            try {\n                final java.lang.reflect.Field java.lang.reflect.Field = cls.getDeclaredField(fieldName);\n                if (!(org.apache.commons.lang3.reflect.MemberUtils.isAccessible(field))) {\n                    if (forceAccess) {\n                        field.setAccessible(true);\n                    } else {\n                        return null;\n                    }\n                } \n                return field;\n            } catch (final java.lang.NoSuchFieldException e) {\n            }\n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"methodName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6541","type":"CtBinaryOperatorImpl","sourcecode":"cs1 == cs2"},"failures":[228],"tindex":"b69027a0-3e82-11e6-be18-db061af2d8d5","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2702","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj == obj) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj instanceof org.apache.commons.lang3.text.StrBuilder) {\n                return equals(((org.apache.commons.lang3.text.StrBuilder)(obj)));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs1":"obj","cs2":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1153","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[229],"tindex":"b6904eb1-3e82-11e6-be18-8739f1cae785","method":{"position":"org.apache.commons.lang3.ArrayUtils:5355","type":"CtMethodImpl","sourcecode":"public static byte[] removeElements(final byte[] array, final byte... values) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            final java.util.HashMap<java.lang.Byte, org.apache.commons.lang3.mutable.MutableInt> java.util.HashMap<java.lang.Byte, org.apache.commons.lang3.mutable.MutableInt> = new java.util.HashMap<java.lang.Byte, org.apache.commons.lang3.mutable.MutableInt>(values.int);\n            for (final byte byte : values) {\n                final java.lang.Byte java.lang.Byte = java.lang.Byte.valueOf(v);\n                final org.apache.commons.lang3.mutable.MutableInt org.apache.commons.lang3.mutable.MutableInt = occurrences.get(boxed);\n                if (count == null) {\n                    occurrences.put(boxed, new org.apache.commons.lang3.mutable.MutableInt(1));\n                } else {\n                    count.increment();\n                }\n            }\n            final java.util.BitSet java.util.BitSet = new java.util.BitSet();\n            for (final java.util.Map.Entry<java.lang.Byte, org.apache.commons.lang3.mutable.MutableInt> java.util.Map.Entry<java.lang.Byte, org.apache.commons.lang3.mutable.MutableInt> : occurrences.entrySet()) {\n                final java.lang.Byte java.lang.Byte = e.getKey();\n                int int = 0;\n                for (int int = 0, int int = e.getValue().intValue() ; i < ct ; i++) {\n                    found = org.apache.commons.lang3.ArrayUtils.indexOf(array, v.byteValue(), found);\n                    if (found < 0) {\n                        break;\n                    } \n                    toRemove.set((found++));\n                }\n            }\n            return ((byte[])(org.apache.commons.lang3.ArrayUtils.removeAll(array, toRemove)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:803","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261],"tindex":"b69075c2-3e82-11e6-be18-bd08dddb5995","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:134","type":"CtMethodImpl","sourcecode":"static org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> getRegisterPair(final java.lang.Object lhs, final java.lang.Object rhs) {\n    if (lhs == lhs) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.lang3.builder.IDKey org.apache.commons.lang3.builder.IDKey = new org.apache.commons.lang3.builder.IDKey(lhs);\n            final org.apache.commons.lang3.builder.IDKey org.apache.commons.lang3.builder.IDKey = new org.apache.commons.lang3.builder.IDKey(rhs);\n            return org.apache.commons.lang3.tuple.Pair.of(left, right);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"lhs","rhs":"lhs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1223","type":"CtBinaryOperatorImpl","sourcecode":"0 == nShorts"},"failures":[262],"tindex":"b6909cd3-3e82-11e6-be18-4b82163b9e47","method":{"position":"org.apache.commons.lang3.Conversion:1255","type":"CtMethodImpl","sourcecode":"public static short[] intToShortArray(final int src, final int srcPos, final short[] dst, final int dstPos, final int nShorts) {\n    if (0 == dstPos) {\n        {\n            if (0 == nShorts) {\n                return dst;\n            } \n            if ((((nShorts - 1) * 16) + srcPos) >= 32) {\n                throw new java.lang.IllegalArgumentException(\"(nShorts-1)*16+srcPos is greather or equal to than 32\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nShorts ; i++) {\n                shift = (i * 16) + srcPos;\n                dst[(dstPos + i)] = ((short)(65535 & (src >> shift)));\n            }\n            return dst;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nShorts":"dstPos"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:131","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[263],"tindex":"b6909cd4-3e82-11e6-be18-c10c520673be","method":{"position":"org.apache.commons.lang3.StringUtils:2692","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] splitByWholeSeparator(final java.lang.String str, final java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(str, separator, (-1), false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:520","type":"CtBinaryOperatorImpl","sourcecode":"toGenericArrayType == null"},"failures":[],"tindex":"b6909cd5-3e82-11e6-be18-c3a8e094b8af","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1825","type":"CtMethodImpl","sourcecode":"private static java.lang.String genericArrayTypeToString(java.lang.reflect.GenericArrayType g) {\n    if (g == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.String.format(\"%s[]\", org.apache.commons.lang3.reflect.TypeUtils.toString(g.getGenericComponentType()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericArrayType":"g"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6621","type":"CtBinaryOperatorImpl","sourcecode":"shortestStrLen == 0"},"failures":[264],"tindex":"b690c3e6-3e82-11e6-be18-5b646a37169d","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1606","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, final char value) {\n    if (index == 0) {\n        {\n            validateIndex(index);\n            ensureCapacity(((int) + 1));\n            java.lang.System.arraycopy(char[], index, char[], (index + 1), ((int) - index));\n            char[][index] = value;\n            (int)++;\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"shortestStrLen":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1896","type":"CtBinaryOperatorImpl","sourcecode":"fieldSeparator == null"},"failures":[265,266,267,268,269,270,271],"tindex":"b690c3e7-3e82-11e6-be18-5d3ff222727e","method":{"position":"org.apache.commons.lang3.math.NumberUtils:671","type":"CtMethodImpl","sourcecode":"public static java.lang.Double createDouble(final java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return java.lang.Double.valueOf(str);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldSeparator":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3617","type":"CtBinaryOperatorImpl","sourcecode":"noOfItems <= 0"},"failures":[272,273,274,275,276,277,278,279,280,281,282,283],"tindex":"b690c3e8-3e82-11e6-be18-bd2b83fa2d13","method":{"position":"org.apache.commons.lang3.time.FastDateParser:391","type":"CtMethodImpl","sourcecode":"private int adjustYear(final int twoDigitYear) {\n    if (twoDigitYear <= 0) {\n        {\n            int int = (int) + twoDigitYear;\n            return twoDigitYear >= (int) ? trial : trial + 100;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"noOfItems":"twoDigitYear"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:771","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[284,285,286],"tindex":"b690eaf9-3e82-11e6-be18-dddd8f7ad6c4","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:767","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final short[] lhs, final short[] rhs) {\n    if (lhs == rhs) {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"lhs","rhs":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:877","type":"CtFieldReadImpl","sourcecode":"objectsTriviallyEqual"},"failures":[264],"tindex":"b690eafa-3e82-11e6-be18-21f1c7df9071","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1575","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(int index, final boolean value) {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            validateIndex(index);\n            if (value) {\n                ensureCapacity(((int) + 4));\n                java.lang.System.arraycopy(char[], index, char[], (index + 4), ((int) - index));\n                char[][(index++)] = 't';\n                char[][(index++)] = 'r';\n                char[][(index++)] = 'u';\n                char[][index] = 'e';\n                int += 4;\n            } else {\n                ensureCapacity(((int) + 5));\n                java.lang.System.arraycopy(char[], index, char[], (index + 5), ((int) - index));\n                char[][(index++)] = 'f';\n                char[][(index++)] = 'a';\n                char[][(index++)] = 'l';\n                char[][(index++)] = 's';\n                char[][index] = 'e';\n                int += 5;\n            }\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectsTriviallyEqual":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:425","type":"CtBinaryOperatorImpl","sourcecode":"lhs instanceof byte[]"},"failures":[287],"tindex":"b691602b-3e82-11e6-be18-158f6336155a","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:815","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final java.lang.Object object) {\n    if (object instanceof byte[]) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                int = (int) * (int);\n            } else {\n                if (object.getClass().isArray()) {\n                    if (object instanceof long[]) {\n                        append(((long[])(object)));\n                    } else if (object instanceof int[]) {\n                        append(((int[])(object)));\n                    } else if (object instanceof short[]) {\n                        append(((short[])(object)));\n                    } else if (object instanceof char[]) {\n                        append(((char[])(object)));\n                    } else if (object instanceof byte[]) {\n                        append(((byte[])(object)));\n                    } else if (object instanceof double[]) {\n                        append(((double[])(object)));\n                    } else if (object instanceof float[]) {\n                        append(((float[])(object)));\n                    } else if (object instanceof boolean[]) {\n                        append(((boolean[])(object)));\n                    } else {\n                        append(((java.lang.Object[])(object)));\n                    }\n                } else {\n                    int = ((int) * (int)) + (object.hashCode());\n                }\n            }\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5414","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(padStr)"},"failures":[115,115],"tindex":"b691602c-3e82-11e6-be18-bbe318a1570b","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:829","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final float value) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(fieldName)) {\n        {\n            buffer.append(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"padStr":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:633","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[288],"tindex":"b691873d-3e82-11e6-be18-6b90a2c816dd","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1948","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder replaceFirst(final org.apache.commons.lang3.text.StrMatcher matcher, final java.lang.String replaceStr) {\n    if (replaceStr == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return replace(matcher, replaceStr, 0, int, 1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"replaceStr"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:682","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Arrays.equals(lhs, rhs))"},"failures":[198,200,202,204,143,143,144,206,208,210],"tindex":"b691873e-3e82-11e6-be18-e545473a13d5","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:457","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final long[] array) {\n    if (!(java.util.Arrays.equals(array, array))) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:173","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[289],"tindex":"b691873f-3e82-11e6-be18-bbbd0f5d46be","method":{"position":"org.apache.commons.lang3.math.NumberUtils:221","type":"CtMethodImpl","sourcecode":"public static float toFloat(final java.lang.String str, final float defaultValue) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return defaultValue;\n            } \n            try {\n                return java.lang.Float.parseFloat(str);\n            } catch (final java.lang.NumberFormatException nfe) {\n                return defaultValue;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1434","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"b691d560-3e82-11e6-be18-af6c3601a600","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:512","type":"CtMethodImpl","sourcecode":"private static boolean isAssignable(final java.lang.reflect.Type type, final java.lang.reflect.GenericArrayType toGenericArrayType, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeVarAssigns) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type == null) {\n                return true;\n            } \n            if (toGenericArrayType == null) {\n                return false;\n            } \n            if (toGenericArrayType.equals(type)) {\n                return true;\n            } \n            final java.lang.reflect.Type java.lang.reflect.Type = toGenericArrayType.getGenericComponentType();\n            if (type instanceof java.lang.Class<?>) {\n                final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n                return (cls.isArray()) && (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns));\n            } \n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.isAssignable(((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType(), toComponentType, typeVarAssigns);\n            } \n            if (type instanceof java.lang.reflect.WildcardType) {\n                for (final java.lang.reflect.Type java.lang.reflect.Type : org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(((java.lang.reflect.WildcardType)(type)))) {\n                    if (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(bound, toGenericArrayType)) {\n                        return true;\n                    } \n                }\n                return false;\n            } \n            if (type instanceof java.lang.reflect.TypeVariable<?>) {\n                for (final java.lang.reflect.Type java.lang.reflect.Type : org.apache.commons.lang3.reflect.TypeUtils.getImplicitBounds(((java.lang.reflect.TypeVariable<?>)(type)))) {\n                    if (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(bound, toGenericArrayType)) {\n                        return true;\n                    } \n                }\n                return false;\n            } \n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                return false;\n            } \n            throw new java.lang.IllegalStateException((\"found an unhandled type: \" + type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:484","type":"CtBinaryOperatorImpl","sourcecode":"lhs instanceof float[]"},"failures":[],"tindex":"b691d561-3e82-11e6-be18-bfbd6a702623","method":{"position":"org.apache.commons.lang3.ClassUtils:1013","type":"CtMethodImpl","sourcecode":"public static java.lang.String getShortCanonicalName(final java.lang.Object object, final java.lang.String valueIfNull) {\n    if (object instanceof float[]) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                return valueIfNull;\n            } \n            return org.apache.commons.lang3.ClassUtils.getShortCanonicalName(object.getClass().getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:187","type":"CtBinaryOperatorImpl","sourcecode":"(tmp.length()) != (duration.length())"},"failures":[290,291],"tindex":"b691fc72-3e82-11e6-be18-8d9af68316f3","method":{"position":"org.apache.commons.lang3.StringUtils:417","type":"CtMethodImpl","sourcecode":"public static java.lang.String trim(final java.lang.String str) {\n    if (\"1.8\".equals(str)) {\n        {\n            if ((str.length()) != (str.length())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return str == null ? null : str.trim();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"str","tmp":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3116","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[292],"tindex":"b691fc73-3e82-11e6-be18-f1d9d0b14425","method":{"position":"org.apache.commons.lang3.ArrayUtils:3093","type":"CtMethodImpl","sourcecode":"public static int[] toPrimitive(final java.lang.Integer[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int[];\n            } \n            final int[] int[] = new int[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = array[i].intValue();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1102","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b691fc74-3e82-11e6-be18-a97f41ca932b","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1297","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final double[] array) {\n    if (fieldName == null) {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1492","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[293],"tindex":"b6922385-3e82-11e6-be18-9f620d20c8d4","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:807","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final char[] lhs, final char[] rhs) {\n    if (lhs == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"lhs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6502","type":"CtBinaryOperatorImpl","sourcecode":"str1 == null"},"failures":[],"tindex":"b6922386-3e82-11e6-be18-d3644f0ae7c6","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:336","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Method getAccessibleMethod(final java.lang.Class<?> cls, final java.lang.String methodName, final java.lang.Class<?>... parameterTypes) {\n    if (methodName == null) {\n        {\n            if (methodName == \"true\") {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethod(cls.getMethod(methodName, parameterTypes));\n                    } catch (final java.lang.NoSuchMethodException e) {\n                        return null;\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str1":"methodName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:974","type":"CtBinaryOperatorImpl","sourcecode":"lhs == null"},"failures":[294],"tindex":"b6924a97-3e82-11e6-be18-bdda44a156bf","method":{"position":"org.apache.commons.lang3.Conversion:283","type":"CtMethodImpl","sourcecode":"public static char binaryToHexDigit(final boolean[] src) {\n    if (src == null) {\n        {\n            return org.apache.commons.lang3.Conversion.binaryToHexDigit(src, 0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:596","type":"CtBinaryOperatorImpl","sourcecode":"toWildcardType == null"},"failures":[295],"tindex":"b6924a98-3e82-11e6-be18-eb11c6d7470a","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1807","type":"CtMethodImpl","sourcecode":"private static java.lang.String wildcardTypeToString(java.lang.reflect.WildcardType w) {\n    if (w == null) {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder().append('?');\n            final java.lang.reflect.Type[] java.lang.reflect.Type[] = w.getLowerBounds();\n            final java.lang.reflect.Type[] java.lang.reflect.Type[] = w.getUpperBounds();\n            if ((lowerBounds.int) > 0) {\n                org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(buf.append(\" super \"), \" & \", lowerBounds);\n            } else if (!(((upperBounds.int) == 1) && (java.lang.Object.java.lang.Object.java.lang.Class.equals(upperBounds[0])))) {\n                org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(buf.append(\" extends \"), \" & \", upperBounds);\n            } \n            return buf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toWildcardType":"w"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2228","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[296],"tindex":"b6930de9-3e82-11e6-be18-3596d36faf2c","method":{"position":"org.apache.commons.lang3.ArrayUtils:3205","type":"CtMethodImpl","sourcecode":"public static java.lang.Short[] toObject(final short[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Short[];\n            } \n            final java.lang.Short[] java.lang.Short[] = new java.lang.Short[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = java.lang.Short.valueOf(array[i]);\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3528","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[297,250],"tindex":"b6930dea-3e82-11e6-be18-01bd768f6681","method":{"position":"org.apache.commons.lang3.ArrayUtils:3341","type":"CtMethodImpl","sourcecode":"public static java.lang.Double[] toObject(final double[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Double[];\n            } \n            final java.lang.Double[] java.lang.Double[] = new java.lang.Double[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = java.lang.Double.valueOf(array[i]);\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5975","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))"},"failures":[298],"tindex":"b69334fb-3e82-11e6-be18-1175d36c30fd","method":{"position":"org.apache.commons.lang3.ArrayUtils:4326","type":"CtMethodImpl","sourcecode":"public static boolean[] add(final boolean[] array, final int index, final boolean element) {\n    if ((org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(array))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((boolean[])(org.apache.commons.lang3.ArrayUtils.add(array, index, java.lang.Boolean.valueOf(element), java.lang.Boolean.java.lang.Boolean.java.lang.Class<java.lang.Boolean>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array","values":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3432","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[299],"tindex":"b69334fc-3e82-11e6-be18-ebd25080f585","method":{"position":"org.apache.commons.lang3.ArrayUtils:1317","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final byte[] array1, final byte[] array2) {\n    if (array2 == null) {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1436","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[300],"tindex":"b69334fd-3e82-11e6-be18-459282a9b22e","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1889","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder replaceAll(final java.lang.String searchStr, final java.lang.String replaceStr) {\n    if (replaceStr == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = searchStr == null ? 0 : searchStr.length();\n            if (searchLen > 0) {\n                final int int = replaceStr == null ? 0 : replaceStr.length();\n                int int = indexOf(searchStr, 0);\n                while (index >= 0) {\n                    replaceImpl(index, (index + searchLen), searchLen, replaceStr, replaceLen);\n                    index = indexOf(searchStr, (index + replaceLen));\n                }\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"replaceStr"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1792","type":"CtBinaryOperatorImpl","sourcecode":"arraySeparator == null"},"failures":[301],"tindex":"b6935c0e-3e82-11e6-be18-b33f0ff3e907","method":{"position":"org.apache.commons.lang3.ClassUtils:251","type":"CtMethodImpl","sourcecode":"public static java.lang.String getSimpleName(final java.lang.Object object, final java.lang.String valueIfNull) {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                return valueIfNull;\n            } \n            return org.apache.commons.lang3.ClassUtils.getSimpleName(object.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arraySeparator":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:479","type":"CtBinaryOperatorImpl","sourcecode":"(comparison) != 0"},"failures":[302,300,303,304],"tindex":"b6935c0f-3e82-11e6-be18-2f10d5696413","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2300","type":"CtMethodImpl","sourcecode":"public int indexOf(final char ch, int startIndex) {\n    if (startIndex != 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            startIndex = startIndex < 0 ? 0 : startIndex;\n            if (startIndex >= (int)) {\n                return -1;\n            } \n            final char[] char[] = char[];\n            for (int int = startIndex ; i < (int) ; i++) {\n                if ((thisBuf[i]) == ch) {\n                    return i;\n                } \n            }\n            return -1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"startIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1364","type":"CtBinaryOperatorImpl","sourcecode":"length >= 0"},"failures":[305,306,307,308,309,310,172,176,311,312,313,314,315,179,180,316,181,317,318,319,320,182,183,184,321,185,186,187,188,189],"tindex":"b6935c10-3e82-11e6-be18-898c68393e8c","method":{"position":"org.apache.commons.lang3.time.DateUtils:517","type":"CtMethodImpl","sourcecode":"private static java.util.Date add(final java.util.Date date, final int calendarField, final int amount) {\n    if (calendarField >= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n            c.setTime(date);\n            c.add(calendarField, amount);\n            return c.getTime();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"calendarField"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:661","type":"CtBinaryOperatorImpl","sourcecode":"falseString == null"},"failures":[],"tindex":"b6938321-3e82-11e6-be18-03abb179c2d6","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:416","type":"CtMethodImpl","sourcecode":"public static int reflectionHashCode(final java.lang.Object object, final java.util.Collection<java.lang.String> excludeFields) {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.HashCodeBuilder.reflectionHashCode(object, org.apache.commons.lang3.builder.ReflectionToStringBuilder.toNoNullStringArray(excludeFields));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"falseString":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.JavaVersion:148","type":"CtInvocationImpl","sourcecode":"\"1.8\".equals(nom)"},"failures":[],"tindex":"b6938322-3e82-11e6-be18-95e1f410ceb7","method":{"position":"org.apache.commons.lang3.StringUtils:417","type":"CtMethodImpl","sourcecode":"public static java.lang.String trim(final java.lang.String str) {\n    if (\"1.8\".equals(str)) {\n        {\n            if ((str.length()) != (str.length())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return str == null ? null : str.trim();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2207","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"b6938323-3e82-11e6-be18-857e36ea5a9f","method":{"position":"org.apache.commons.lang3.builder.RecursiveToStringStyle:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void appendDetail(java.lang.StringBuffer buffer, java.lang.String fieldName, java.util.Collection<?> coll) {\n    if (fieldName == null) {\n        {\n            appendClassName(buffer, coll);\n            appendIdentityHashCode(buffer, coll);\n            appendDetail(buffer, fieldName, coll.toArray());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.StringUtils:6907","type":"CtBinaryOperatorImpl","sourcecode":"m == 0"},"failures":[322,323,324,325],"tindex":"b693aa34-3e82-11e6-be18-efab4668fb67","method":{"position":"org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemover:33","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean translate(int codepoint, java.io.Writer out) throws java.io.IOException {\n    if (codepoint == 0) {\n        {\n            if ((codepoint >= (java.lang.Character.java.lang.Character.char)) && (codepoint <= (java.lang.Character.java.lang.Character.char))) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257154249/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"codepoint"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":47,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":223,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":256,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties":340,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Boolean":341,"org.apache.commons.lang3.BooleanUtilsTest.test_toStringTrueFalse_Boolean":0,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":217,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray":281,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":239,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatUTC":420,"org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP":423,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_charArray":310,"org.apache.commons.lang3.time.FastDatePrinterTest.testMilleniumBug":430,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_StrMatcher_String":78,"org.apache.commons.lang3.text.StrTokenizerTest.testReset":309,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArrayEqualAsObject":244,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddDash":19,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":197,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":458,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":234,"org.apache.commons.lang3.text.StrBuilderTest.testContains_StrMatcher":80,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfMonthWithDate":382,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":236,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":115,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":243,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray":280,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":455,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":45,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":255,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxShort":349,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVEmpty":288,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude":282,"org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringStringarray":38,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":259,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiLongArray":408,"org.apache.commons.lang3.CharRangeTest.testContains_Char":13,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":209,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":261,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException2":65,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_String":321,"org.apache.commons.lang3.RandomStringUtilsTest.testExceptions":6,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMixedArray":406,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":213,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char":323,"org.apache.commons.lang3.text.StrTokenizerTest.testListArray":313,"org.apache.commons.lang3.event.EventUtilsTest.testAddEventListenerWithPrivateAddMethod":362,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher_int":77,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":180,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxShort_emptyArray":348,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":216,"org.apache.commons.lang3.ArrayUtilsTest.testSameLengthShort":469,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringString":32,"org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected":432,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":251,"org.apache.commons.lang3.math.FractionTest.testDivide":418,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO":426,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":198,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":191,"org.apache.commons.lang3.ClassUtilsTest.test_getPackageName_Object":290,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeStartText":146,"org.apache.commons.lang3.CharRangeTest.testHashCode":15,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":461,"org.apache.commons.lang3.AnnotationUtilsTest.testNonEquivalentAnnotationsOfSameType":110,"org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStrBuilder":347,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticFieldForceAccess":68,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testBlank":121,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO":421,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeMethod":367,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":452,"org.apache.commons.lang3.AnnotationUtilsTest.testSameInstance":104,"org.apache.commons.lang3.StringUtilsTest.testUnescapeSurrogatePairs":91,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":422,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testInvalidFragmentWithDate":384,"org.apache.commons.lang3.CharSetTest.testConstructor_String_simple":21,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull":276,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassOutputChange":312,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":188,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":466,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":119,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":53,"org.apache.commons.lang3.AnnotationUtilsTest.testEquivalence":105,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyClass":358,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByteObject":73,"org.apache.commons.lang3.time.DateUtilsTest.testLang530":447,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentEnd":145,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":462,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testHourOfDayFragmentInLargerUnitWithDate":394,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":187,"org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringString":34,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":172,"org.apache.commons.lang3.CharSetTest.testContains_Char":23,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":202,"org.apache.commons.lang3.RandomUtilsTest.testNextFloatNegative":398,"org.apache.commons.lang3.CharRangeTest.testSerialization":11,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":268,"org.apache.commons.lang3.text.StrMatcherTest.testCharMatcher_char":74,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":241,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinuteFragmentInLargerUnitWithDate":376,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":142,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":224,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson":126,"org.apache.commons.lang3.math.FractionTest.testReducedFactory_int_int":413,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":175,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String":355,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":449,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":460,"org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer":345,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":233,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfMonthWithDate":377,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":129,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char":344,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":240,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":116,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":166,"org.apache.commons.lang3.CharRangeTest.testIterator":18,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfYearWithDate":390,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":165,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testPerson":118,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":137,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":171,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang303":442,"org.apache.commons.lang3.builder.EqualsBuilderTest.testByteArrayHiddenByObject":61,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testArrayList":272,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":186,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":52,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testBlank":138,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":185,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO":425,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection":275,"org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntChar":3,"org.apache.commons.lang3.text.StrBuilderTest.testAsReader":2,"org.apache.commons.lang3.builder.DiffResultTest.testNullStyle":133,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":306,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":174,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang538":443,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":208,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":464,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testDayOfYearFragmentInLargerUnitWithDate":386,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":123,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":159,"org.apache.commons.lang3.StringUtilsTest.testIsNotBlank":85,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":267,"org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isIn_Normal":14,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullLhs":246,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testBlank":265,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectEndText":156,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsOfDayWithDate":388,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int":343,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":242,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":283,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":214,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfSecondWithDate":383,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance":350,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":448,"org.apache.commons.lang3.builder.DiffBuilderTest.testSameObjectIgnoresAppends":245,"org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives":412,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":211,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":222,"org.apache.commons.lang3.BooleanUtilsTest.test_toStringTrueFalse_boolean":300,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeExactStaticMethod":368,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":250,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArraySeparator":154,"org.apache.commons.lang3.text.StrTokenizerTest.testIteration":307,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset":337,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":163,"org.apache.commons.lang3.text.StrTokenizerTest.testTSVEmpty":287,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":51,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testIsNotBlank":86,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddCombinations":25,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":266,"org.apache.commons.lang3.ConversionTest.testBinaryToHexDigit_2args":411,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testDateFragmentInLargerUnitWithDate":379,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":453,"org.apache.commons.lang3.CharSetTest.testGetInstance":30,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testLinkedList":274,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxByte":403,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang645":435,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":56,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedFieldForceAccess":69,"org.apache.commons.lang3.event.EventUtilsTest.testBindFilteredEventsToMethod":363,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":253,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang538":434,"org.apache.commons.lang3.event.EventUtilsTest.testAddEventListenerWithNoAddMethod":359,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testMilleniumBug":439,"org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntString":4,"org.apache.commons.lang3.AnnotationUtilsTest.testGeneratedAnnotationEquivalentToRealAnnotation":108,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":59,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":204,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testDaysOfMonthWithDate":393,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":48,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray":277,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringStringarray":41,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":238,"org.apache.commons.lang3.CharSetTest.testConstructor_String_combo":24,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsOfMonthWithDate":387,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1":314,"org.apache.commons.lang3.mutable.MutableDoubleTest.testGetSet":8,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3":316,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2":315,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5":318,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4":317,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7":320,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":218,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6":319,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":457,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetRootCause_Throwable":71,"org.apache.commons.lang3.ClassUtilsTest.test_convertClassesToClassNames_List":83,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedField":66,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang645":444,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":189,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":249,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":226,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":179,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsofMinuteWithDate":381,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher":81,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldNameValueSeparator":150,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher":76,"org.apache.commons.lang3.CharSetUtilsTest.testContainsAny_StringStringarray":40,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxByte_emptyArray":402,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray":325,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testHoursOfYearWithDate":373,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson":270,"org.apache.commons.lang3.StringUtilsIsTest.testIsAsciiPrintable_String":293,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils":7,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvString":92,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":167,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":158,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeEndText":149,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO":351,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":228,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson":143,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfMinuteWithDate":396,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":221,"org.apache.commons.lang3.CharSetUtilsTest.testCount_StringString":39,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":220,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong":139,"org.apache.commons.lang3.CharSetTest.testHashCode":27,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":451,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson":262,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":125,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":132,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfDayWithDate":378,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testSimpleDate":437,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher_int":82,"org.apache.commons.lang3.CharRangeTest.testEquals_Object":12,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":254,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":285,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":192,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testCalendarTimezoneRespected":441,"org.apache.commons.lang3.builder.DiffResultTest.testNullRhs":136,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":467,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":225,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethodWithEvent":364,"org.apache.commons.lang3.ConversionTest.testShortToHex":1,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfHourWithDate":392,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":140,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":193,"org.apache.commons.lang3.builder.CompareToBuilderTest.testLongArray":407,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":203,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":459,"org.apache.commons.lang3.math.FractionTest.testMultiply":419,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang303":433,"org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getRootCauseMessage_Throwable":70,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethod":361,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":248,"org.apache.commons.lang3.CharSetTest.testEquals_Object":22,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":252,"org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringStringarray":35,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":120,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char_char":308,"org.apache.commons.lang3.time.FastDatePrinterTest.testSimpleDate":428,"org.apache.commons.lang3.text.StrMatcherTest.testStringMatcher_String":294,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISOMethod":352,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":456,"org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArray":409,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":157,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":230,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testBlank":257,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testFormat":445,"org.apache.commons.lang3.CharSequenceUtilsTest.testSubSequence":295,"org.apache.commons.lang3.RandomUtilsTest.testNextFloat":400,"org.apache.commons.lang3.event.EventUtilsTest.testAddEventListener":360,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":195,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":264,"org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiByteArray":63,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":169,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic1":332,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":50,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":164,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic2":333,"org.apache.commons.lang3.AnnotationUtilsTest.testBothArgsNull":109,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic3":334,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic4":335,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic5":336,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":258,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":229,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetNullText":148,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":219,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":465,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":170,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":206,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":177,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":237,"org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isIn_Reversed":10,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContains_Char":84,"org.apache.commons.lang3.text.StrBuilderTest.testAsWriter":346,"org.apache.commons.lang3.time.FastDatePrinterTest.testShortDateStyleWithLocales":429,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":57,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char_char":326,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormat":427,"org.apache.commons.lang3.AnnotationUtilsTest.testOneArgNull":102,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls":284,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":289,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsofHourWithDate":391,"org.apache.commons.lang3.time.FastDatePrinterTest.testFormat":436,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByteObjectEmptyArray":72,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldForceAccessIllegalArgumentException2":67,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":49,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":60,"org.apache.commons.lang3.builder.EqualsBuilderTest.testByteArray":62,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":454,"org.apache.commons.lang3.builder.DiffResultTest.testNullList":130,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfDayWithDate":389,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":468,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":182,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":231,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":205,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":196,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher":79,"org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isIn_Same":17,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeStaticMethod":365,"org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_boolean":299,"org.apache.commons.lang3.CharSetUtilsTest.testContainsAny_StringString":37,"org.apache.commons.lang3.time.FastDatePrinterTest.testLowYearPadding":431,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":235,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testBlank":113,"org.apache.commons.lang3.CharSetUtilsTest.testCount_StringStringarray":36,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":260,"org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterTypeCamelCase":353,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testDaysOfYearWithDate":397,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":183,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":134,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":212,"org.apache.commons.lang3.builder.DiffResultTest.testNoDifferencesString":131,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":168,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_byte":354,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testBlank":232,"org.apache.commons.lang3.math.NumberUtilsTest.testToIntString":297,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":207,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":44,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":190,"org.apache.commons.lang3.ArrayUtilsTest.testIsEquals":43,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":271,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticField":64,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":46,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":58,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":122,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":215,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":173,"org.apache.commons.lang3.text.StrTokenizerTest.testToString":311,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":55,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_StrMatcher_String":75,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxLong":296,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection":278,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":128,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsOfYearWithDate":372,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":117,"org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntString":5,"org.apache.commons.lang3.AnnotationUtilsTest.testAnnotationsOfDifferingTypes":106,"org.apache.commons.lang3.math.FractionTest.testFactory_double":415,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":54,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char":342,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testCopyOnWriteArrayList":273,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":194,"org.apache.commons.lang3.builder.DiffResultTest.testNullLhs":135,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":286,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex":298,"org.apache.commons.lang3.CharUtilsTest.testToString_Character":356,"org.apache.commons.lang3.ArrayUtilsTest.testToString":101,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":141,"org.apache.commons.lang3.RandomUtilsTest.testExtremeRangeFloat":401,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentStart":147,"org.apache.commons.lang3.CharSetTest.testGetInstance_Stringarray":28,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed1":338,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed2":339,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":160,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO":424,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLong":114,"org.apache.commons.lang3.CharSetTest.testSerialization":20,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldAccessIllegalArgumentException2":90,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty1":303,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayByte":42,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty2":304,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddNegate":29,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondFragmentInLargerUnitWithDate":385,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectStartText":152,"org.apache.commons.lang3.AnnotationUtilsTest.testHashCode":107,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":184,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":127,"org.apache.commons.lang3.CharSetTest.testStatics":31,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":279,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":210,"org.apache.commons.lang3.builder.CompareToBuilderTest.testLongArrayHiddenByObject":405,"org.apache.commons.lang3.text.StrTokenizerTest.test8":100,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":199,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeExactMethod":366,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":463,"org.apache.commons.lang3.text.StrTokenizerTest.test5":97,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedField":87,"org.apache.commons.lang3.text.StrTokenizerTest.test4":96,"org.apache.commons.lang3.text.StrTokenizerTest.test7":99,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":200,"org.apache.commons.lang3.text.StrTokenizerTest.test6":98,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":201,"org.apache.commons.lang3.text.StrTokenizerTest.test1":93,"org.apache.commons.lang3.text.StrTokenizerTest.test3":95,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String":322,"org.apache.commons.lang3.text.StrTokenizerTest.test2":94,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfYearWithDate":380,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":176,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldSeparator":153,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":263,"org.apache.commons.lang3.AnnotationUtilsTest.testIsValidAnnotationMemberType":111,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testHoursOfMonthWithDate":371,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":144,"org.apache.commons.lang3.time.FastDateFormatTest.testParseSync":446,"org.apache.commons.lang3.CharRangeTest.testContains_Charrange":16,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim1":301,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim2":302,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyClassEmptyArray":357,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldForceAccessIllegalArgumentException2":89,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":162,"org.apache.commons.lang3.ClassUtilsTest.test_getPackageName_Class":291,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementByteArray":292,"org.apache.commons.lang3.math.FractionTest.testToProperString":416,"org.apache.commons.lang3.math.FractionTest.testPow":414,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":124,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayEnd":151,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char":305,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testHoursOfDayWithDate":375,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullRhs":247,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeExactConstructor":370,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":161,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1":331,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfHourWithDate":395,"org.apache.commons.lang3.RandomUtilsTest.testNextFloatLowerGreaterUpper":399,"org.apache.commons.lang3.math.FractionTest.testFactory_String_double":417,"org.apache.commons.lang3.builder.CompareToBuilderTest.testRaggedArray":404,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLowYearPadding":440,"org.apache.commons.lang3.ConversionTest.testBinaryToHexDigit":410,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayStart":155,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassInputChange":324,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed3":329,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed2":328,"org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringString":33,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4":330,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed1":327,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":269,"org.apache.commons.lang3.CharSetTest.testConstructor_String_comboNegated":26,"org.apache.commons.lang3.JavaVersionTest.testGetJavaVersion":470,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":227,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":181,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":450,"org.apache.commons.lang3.AnnotationUtilsTest.testToString":103,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeConstructor":369,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedFieldForceAccess":88,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testShortDateStyleWithLocales":438,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":178,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondFragmentInLargerUnitWithDate":374,"org.apache.commons.lang3.time.DateUtilsTest.testSetSeconds":9,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":112},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:466","type":"CtBinaryOperatorImpl","sourcecode":"bool == null"},"failures":[0],"tindex":"8e0f61f9-2ec0-11e6-8782-b31fa9f0acbd","method":{"position":"org.apache.commons.lang3.BooleanUtils:758","type":"CtMethodImpl","sourcecode":"public static java.lang.String toStringTrueFalse(final java.lang.Boolean bool) {\n    if (bool == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.BooleanUtils.toString(bool, \"true\", \"false\", null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"bool"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:183","type":"CtBinaryOperatorImpl","sourcecode":"(tmp.length()) != (duration.length())"},"failures":[],"tindex":"8e10254a-2ec0-11e6-8782-8d9dcc028632","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:539","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final boolean[] array) {\n    if ((fieldName.length()) != (fieldName.length())) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"fieldName","tmp":"fieldName"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:211","type":"CtBinaryOperatorImpl","sourcecode":"tokenLen == 2"},"failures":[1],"tindex":"8e104c5b-2ec0-11e6-8782-fd8aa423f27e","method":{"position":"org.apache.commons.lang3.Conversion:1469","type":"CtMethodImpl","sourcecode":"public static java.lang.String shortToHex(final short src, final int srcPos, final java.lang.String dstInit, final int dstPos, final int nHexs) {\n    if (nHexs == 2) {\n        {\n            if (0 == nHexs) {\n                return dstInit;\n            } \n            if ((((nHexs - 1) * 4) + srcPos) >= 16) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+srcPos is greather or equal to than 16\");\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(dstInit);\n            int int = 0;\n            int int = sb.length();\n            for (int int = 0 ; i < nHexs ; i++) {\n                shift = (i * 4) + srcPos;\n                final int int = 15 & (src >> shift);\n                if ((dstPos + i) == append) {\n                    ++append;\n                    sb.append(org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                } else {\n                    sb.setCharAt((dstPos + i), org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                }\n            }\n            return sb.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"tokenLen":"nHexs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2171","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[2],"tindex":"8e10736c-2ec0-11e6-8782-b7bccdafa118","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2873","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(final char[] b, final int off, int len) {\n    if (off < 0) {\n        {\n            if (((((off < 0) || (len < 0)) || (off > (b.int))) || ((off + len) > (b.int))) || ((off + len) < 0)) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } \n            if (len == 0) {\n                return 0;\n            } \n            if ((int) >= (org.apache.commons.lang3.text.StrBuilder.this.size())) {\n                return -1;\n            } \n            if (((int) + len) > (size())) {\n                len = (org.apache.commons.lang3.text.StrBuilder.this.size()) - (int);\n            } \n            org.apache.commons.lang3.text.StrBuilder.this.getChars(int, ((int) + len), b, off);\n            int += len;\n            return len;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"off"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:94","type":"CtInvocationImpl","sourcecode":"str.isEmpty()"},"failures":[3,4,5],"tindex":"8e109a7d-2ec0-11e6-8782-cbc3dae06249","method":{"position":"org.apache.commons.lang3.StringUtils:5298","type":"CtMethodImpl","sourcecode":"public static java.lang.String rightPad(final java.lang.String str, final int size, java.lang.String padStr) {\n    if (str.isEmpty()) {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (org.apache.commons.lang3.StringUtils.isEmpty(padStr)) {\n                padStr = org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = padStr.length();\n            final int int = str.length();\n            final int int = size - strLen;\n            if (pads <= 0) {\n                return str;\n            } \n            if ((padLen == 1) && (pads <= (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int))) {\n                return org.apache.commons.lang3.StringUtils.rightPad(str, size, padStr.charAt(0));\n            } \n            if (pads == padLen) {\n                return str.concat(padStr);\n            } else if (pads < padLen) {\n                return str.concat(padStr.substring(0, pads));\n            } else {\n                final char[] char[] = new char[pads];\n                final char[] char[] = padStr.toCharArray();\n                for (int int = 0 ; i < pads ; i++) {\n                    padding[i] = padChars[(i % padLen)];\n                }\n                return str.concat(new java.lang.String(padding));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7364","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"8e10c18e-2ec0-11e6-8782-67b933f59774","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:875","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final java.lang.Object[] lhs, final java.lang.Object[] rhs) {\n    if (fieldName == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (!(java.util.Arrays.equals(lhs, rhs))) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Object[]>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Object[] getLeft() {\n                        return lhs;\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Object[] getRight() {\n                        return rhs;\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:261","type":"CtBinaryOperatorImpl","sourcecode":"countryCode == null"},"failures":[],"tindex":"8e10e89f-2ec0-11e6-8782-85f57ddb980e","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:719","type":"CtMethodImpl","sourcecode":"public static void writeField(final java.lang.Object target, final java.lang.String fieldName, final java.lang.Object value) throws java.lang.IllegalAccessException {\n    if (fieldName == null) {\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            org.apache.commons.lang3.reflect.FieldUtils.writeField(target, fieldName, value, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"countryCode":"fieldName"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:694","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"8e110fb0-2ec0-11e6-8782-a19b79a32e52","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:247","type":"CtMethodImpl","sourcecode":"public static boolean reflectionEquals(final java.lang.Object lhs, final java.lang.Object rhs, final java.util.Collection<java.lang.String> excludeFields) {\n    if (lhs == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(lhs, rhs, org.apache.commons.lang3.builder.ReflectionToStringBuilder.toNoNullStringArray(excludeFields));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"lhs"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4938","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"8e110fb1-2ec0-11e6-8782-694dcd35ed25","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1317","type":"CtMethodImpl","sourcecode":"protected void appendSummary(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final double[] array) {\n    if (fieldName == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendSummarySize(buffer, fieldName, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1267","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"8e1136c2-2ec0-11e6-8782-8162628ac126","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:233","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final java.lang.Object object, final org.apache.commons.lang3.builder.ToStringStyle style, final boolean outputTransients, final boolean outputStatics) {\n    if (object instanceof java.lang.Class<?>) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(object, style, outputTransients, outputStatics, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"object"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4705","type":"CtBinaryOperatorImpl","sourcecode":"searchLength != replacementLength"},"failures":[6,7],"tindex":"8e1136c3-2ec0-11e6-8782-b516041a08eb","method":{"position":"org.apache.commons.lang3.RandomStringUtils:309","type":"CtMethodImpl","sourcecode":"public static java.lang.String random(final int count, final java.lang.String chars) {\n    if (count != count) {\n        {\n            if (chars == null) {\n                return org.apache.commons.lang3.RandomStringUtils.random(count, 0, 0, false, false, null, org.apache.commons.lang3.RandomStringUtils.org.apache.commons.lang3.RandomStringUtils.java.util.Random);\n            } \n            return org.apache.commons.lang3.RandomStringUtils.random(count, chars.toCharArray());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacementLength":"count","searchLength":"count"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:989","type":"CtBinaryOperatorImpl","sourcecode":"(value < start) || (value > end)"},"failures":[8],"tindex":"8e115dd4-2ec0-11e6-8782-694268fba5dd","method":{"position":"org.apache.commons.lang3.mutable.MutableDouble:96","type":"CtMethodImpl","sourcecode":"public void setValue(final double value) {\n    if ((value < value) || (value > value)) {\n        {\n            org.apache.commons.lang3.mutable.MutableDouble.this.double = value;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"value","end":"value","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1620","type":"CtBinaryOperatorImpl","sourcecode":"0 == nBools"},"failures":[9],"tindex":"8e1184e5-2ec0-11e6-8782-3f4659011927","method":{"position":"org.apache.commons.lang3.time.DateUtils:614","type":"CtMethodImpl","sourcecode":"public static java.util.Date setSeconds(final java.util.Date date, final int amount) {\n    if (0 == amount) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.set(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"amount"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:353","type":"CtBinaryOperatorImpl","sourcecode":"ch < 16"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"tindex":"8e1184e6-2ec0-11e6-8782-a99300c8fa6b","method":{"position":"org.apache.commons.lang3.CharRange:113","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.CharRange isIn(final char start, final char end) {\n    if (end < 16) {\n        {\n            return new org.apache.commons.lang3.CharRange(start , end , false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"end"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:262","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Arrays.equals(lhs, rhs))"},"failures":[42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"tindex":"8e11abf7-2ec0-11e6-8782-eba1e771ecb0","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:794","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final byte[] lhs, final byte[] rhs) {\n    if (!(java.util.Arrays.equals(lhs, rhs))) {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs == null) || (rhs == null)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && (boolean) ; ++i) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"lhs","rhs":"rhs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:733","type":"CtInvocationImpl","sourcecode":"str.equals(trueString)"},"failures":[64,65,66,67,68,69],"tindex":"8e11d308-2ec0-11e6-8782-1d32ee344b1f","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Field getField(final java.lang.Class<?> cls, final java.lang.String fieldName, final boolean forceAccess) {\n    if (fieldName.equals(fieldName)) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((cls != null), \"The class must not be null\");\n            org.apache.commons.lang3.Validate.isTrue(org.apache.commons.lang3.StringUtils.isNotBlank(fieldName), \"The field name must not be blank/empty\");\n            for (java.lang.Class<?> java.lang.Class<?> = cls ; acls != null ; acls = acls.getSuperclass()) {\n                try {\n                    final java.lang.reflect.Field java.lang.reflect.Field = acls.getDeclaredField(fieldName);\n                    if (!(java.lang.reflect.Modifier.isPublic(field.getModifiers()))) {\n                        if (forceAccess) {\n                            field.setAccessible(true);\n                        } else {\n                            continue;\n                        }\n                    } \n                    return field;\n                } catch (final java.lang.NoSuchFieldException ex) {\n                }\n            }\n            java.lang.reflect.Field java.lang.reflect.Field = null;\n            for (final java.lang.Class<?> java.lang.Class<?> : org.apache.commons.lang3.ClassUtils.getAllInterfaces(cls)) {\n                try {\n                    final java.lang.reflect.Field java.lang.reflect.Field = class1.getField(fieldName);\n                    org.apache.commons.lang3.Validate.isTrue((match == null), (\"Reference to field %s is ambiguous relative to %s\" + \"; a matching field exists on two or more implemented interfaces.\"), fieldName, cls);\n                    match = test;\n                } catch (final java.lang.NoSuchFieldException ex) {\n                }\n            }\n            return match;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName","trueString":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.ClassNotFoundException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:800","type":"CtFieldReadImpl","sourcecode":"objectsTriviallyEqual"},"failures":[],"tindex":"8e11fa19-2ec0-11e6-8782-f9d6fb26ada7","method":{"position":"org.apache.commons.lang3.ClassUtils:891","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getClass(final java.lang.String className, final boolean initialize) throws java.lang.ClassNotFoundException {\n    if (initialize) {\n        {\n            final java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread.currentThread().getContextClassLoader();\n            final java.lang.ClassLoader java.lang.ClassLoader = contextCL == null ? org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.lang.Class.getClassLoader() : contextCL;\n            return org.apache.commons.lang3.ClassUtils.getClass(loader, className, initialize);\n        }\n    } else {\n        throw new java.lang.ClassNotFoundException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectsTriviallyEqual":"initialize"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:456","type":"CtBinaryOperatorImpl","sourcecode":"throwable == null"},"failures":[70,71],"tindex":"8e12212a-2ec0-11e6-8782-6d157e89d3b2","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:179","type":"CtMethodImpl","sourcecode":"public static java.lang.Throwable getRootCause(final java.lang.Throwable throwable) {\n    if (throwable == null) {\n        {\n            final java.util.List<java.lang.Throwable> java.util.List<java.lang.Throwable> = org.apache.commons.lang3.exception.ExceptionUtils.getThrowableList(throwable);\n            return (list.size()) < 2 ? null : ((java.lang.Throwable)(list.get(((list.size()) - 1))));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwable":"throwable"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:378","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"8e12212b-2ec0-11e6-8782-63689cfbb8b6","method":{"position":"org.apache.commons.lang3.ArrayUtils:994","type":"CtMethodImpl","sourcecode":"public static short[] subarray(final short[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (endIndexExclusive == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            if (startIndexInclusive < 0) {\n                startIndexInclusive = 0;\n            } \n            if (endIndexExclusive > (array.int)) {\n                endIndexExclusive = array.int;\n            } \n            final int int = endIndexExclusive - startIndexInclusive;\n            if (newSize <= 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.short[];\n            } \n            final short[] short[] = new short[newSize];\n            java.lang.System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n            return subarray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"endIndexExclusive"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6505","type":"CtBinaryOperatorImpl","sourcecode":"str2 == null"},"failures":[],"tindex":"8e12483c-2ec0-11e6-8782-1178895842a2","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:941","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final short[] array, final boolean fullDetail) {\n    if (fieldName == null) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, java.lang.Boolean.valueOf(fullDetail));\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str2":"fieldName"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:579","type":"CtBinaryOperatorImpl","sourcecode":"(u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))"},"failures":[],"tindex":"8e126f4d-2ec0-11e6-8782-3ba1afc1cbf4","method":{"position":"org.apache.commons.lang3.ArrayUtils:2193","type":"CtMethodImpl","sourcecode":"public static boolean contains(final int[] array, final int valueToFind) {\n    if ((valueToFind == valueToFind) || (valueToFind == (java.lang.Integer.java.lang.Integer.int))) {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"u":"valueToFind","java.lang.Integer.MIN_VALUE":"valueToFind","v":"valueToFind"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3252","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[72,73],"tindex":"8e126f4e-2ec0-11e6-8782-9f1749b8656f","method":{"position":"org.apache.commons.lang3.ArrayUtils:772","type":"CtMethodImpl","sourcecode":"public static java.lang.Byte[] nullToEmpty(final java.lang.Byte[] array) {\n    if (array == null) {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Byte[];\n            } \n            return array;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:97","type":"CtInvocationImpl","sourcecode":"str.contains(\"#\")"},"failures":[],"tindex":"8e126f4f-2ec0-11e6-8782-19abe5bae03b","method":{"position":"org.apache.commons.lang3.StringUtils:4441","type":"CtMethodImpl","sourcecode":"public static java.lang.String replacePattern(final java.lang.String source, final java.lang.String regex, final java.lang.String replacement) {\n    if (source.contains(\"#\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.regex.Pattern.compile(regex, java.util.regex.Pattern.java.util.regex.Pattern.int).matcher(source).replaceAll(replacement);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:467","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLowerCase(ch)"},"failures":[74,75,76,77,78,79,80,81,82],"tindex":"8e129660-2ec0-11e6-8782-8b2348890886","method":{"position":"org.apache.commons.lang3.text.StrMatcher:163","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.StrMatcher charMatcher(final char ch) {\n    if (java.lang.Character.isLowerCase(ch)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.lang3.text.StrMatcher.CharMatcher(ch);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:183","type":"CtBinaryOperatorImpl","sourcecode":"(tmp.length()) != (duration.length())"},"failures":[],"tindex":"8e129661-2ec0-11e6-8782-d367d2928b1b","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:328","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setFieldNameValueSeparator(final java.lang.String fieldNameValueSeparator) {\n    if ((fieldNameValueSeparator.length()) != (fieldNameValueSeparator.length())) {\n        {\n            super.setFieldNameValueSeparator(fieldNameValueSeparator);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"fieldNameValueSeparator","tmp":"fieldNameValueSeparator"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:547","type":"CtBinaryOperatorImpl","sourcecode":"power == 1"},"failures":[],"tindex":"8e129662-2ec0-11e6-8782-dbc9f6c0dd77","method":{"position":"org.apache.commons.lang3.Conversion:1685","type":"CtMethodImpl","sourcecode":"public static byte[] uuidToByteArray(final java.util.UUID src, final byte[] dst, final int dstPos, final int nBytes) {\n    if (dstPos == 1) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nBytes) {\n                return dst;\n            } \n            if (nBytes > 16) {\n                throw new java.lang.IllegalArgumentException(\"nBytes is greather than 16\");\n            } \n            org.apache.commons.lang3.Conversion.longToByteArray(src.getMostSignificantBits(), 0, dst, dstPos, (nBytes > 8 ? 8 : nBytes));\n            if (nBytes >= 8) {\n                org.apache.commons.lang3.Conversion.longToByteArray(src.getLeastSignificantBits(), 0, dst, (dstPos + 8), (nBytes - 8));\n            } \n            return dst;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"power":"dstPos"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:425","type":"CtBinaryOperatorImpl","sourcecode":"classes == null"},"failures":[83],"tindex":"8e12bd73-2ec0-11e6-8782-1f3b346a89ee","method":{"position":"org.apache.commons.lang3.ClassUtils:424","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> convertClassesToClassNames(final java.util.List<java.lang.Class<?>> classes) {\n    if (classes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (classes == null) {\n                return null;\n            } \n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>(classes.size());\n            for (final java.lang.Class<?> java.lang.Class<?> : classes) {\n                if (cls == null) {\n                    classNames.add(null);\n                } else {\n                    classNames.add(cls.getName());\n                }\n            }\n            return classNames;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classes":"classes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3813","type":"CtBinaryOperatorImpl","sourcecode":"noOfItems <= 0"},"failures":[84],"tindex":"8e12e484-2ec0-11e6-8782-c505585fc32c","method":{"position":"org.apache.commons.lang3.StringUtils:1415","type":"CtMethodImpl","sourcecode":"public static boolean contains(final java.lang.CharSequence seq, final int searchChar) {\n    if (searchChar <= 0) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n                return false;\n            } \n            return (org.apache.commons.lang3.CharSequenceUtils.indexOf(seq, searchChar, 0)) >= 0;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"noOfItems":"searchChar"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:205","type":"CtBinaryOperatorImpl","sourcecode":"(tmp.length()) != (duration.length())"},"failures":[85,86,87,64,88,65,89,66,67,68,90,69],"tindex":"8e12e485-2ec0-11e6-8782-ef793a786fc2","method":{"position":"org.apache.commons.lang3.StringUtils:336","type":"CtMethodImpl","sourcecode":"public static boolean isNotBlank(final java.lang.CharSequence cs) {\n    if ((cs.length()) != (cs.length())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return !(org.apache.commons.lang3.StringUtils.isBlank(cs));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"cs","tmp":"cs"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4320","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))"},"failures":[91,92],"tindex":"8e12e486-2ec0-11e6-8782-49a5bcb3e158","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:801","type":"CtMethodImpl","sourcecode":"public static final java.lang.String unescapeCsv(final java.lang.String input) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(input)) || (org.apache.commons.lang3.StringUtils.isEmpty(input))) {\n        {\n            return org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(input);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input","remove":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:495","type":"CtVariableReadImpl","sourcecode":"detail"},"failures":[93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,129,130,131,132,133,134,135,136,137,137,138,138,139,139,140,140,141,141,142,142,143,143,144,144,145,146,147,148,149,150,151,152,153,154,155,156,157,157,158,158,159,159,160,160,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,168,169,169,170,170,171,171,172,172,173,173,174,174,175,175,176,176,177,177,178,178,179,179,180,180,181,181,182,182,183,183,184,184,185,185,186,186,187,187,188,188,189,189,190,190,191,191,192,192,193,193,194,194,195,195,196,196,197,197,198,198,199,199,200,200,201,201,202,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,210,210,211,211,212,212,213,213,214,214,215,215,216,216,217,217,218,218,219,219,220,220,221,221,222,222,223,223,224,224,225,225,226,226,227,227,228,228,229,229,230,230,231,231,232,232,233,233,234,234,235,235,236,236,237,237,238,238,44,45,46,47,239,48,49,240,50,51,241,242,243,52,53,244,54,55,56,245,57,58,59,246,247,60,248,249,250,251,252,253,254,255,256,256,257,257,258,258,259,259,260,260,261,261,262,262,263,263,264,264,265,265,266,266,267,267,268,268,269,269,270,270,271,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285],"tindex":"8e130b97-2ec0-11e6-8782-c3cf871950d0","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1634","type":"CtMethodImpl","sourcecode":"protected void setUseShortClassName(final boolean useShortClassName) {\n    if (useShortClassName) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.this.boolean = useShortClassName;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"detail":"useShortClassName"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5179","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || (separator == null)"},"failures":[286,287,288,289],"tindex":"8e1332a8-2ec0-11e6-8782-77f5507a24aa","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:164","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.StrTokenizer getCSVInstance(final java.lang.String input) {\n    if ((input == null) || (input == null)) {\n        {\n            final org.apache.commons.lang3.text.StrTokenizer org.apache.commons.lang3.text.StrTokenizer = org.apache.commons.lang3.text.StrTokenizer.getCSVClone();\n            tok.reset(input);\n            return tok;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input","separator":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:203","type":"CtBinaryOperatorImpl","sourcecode":"length < (size)"},"failures":[],"tindex":"8e1332a9-2ec0-11e6-8782-b1623442b137","method":{"position":"org.apache.commons.lang3.Conversion:1255","type":"CtMethodImpl","sourcecode":"public static short[] intToShortArray(final int src, final int srcPos, final short[] dst, final int dstPos, final int nShorts) {\n    if (srcPos < srcPos) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nShorts) {\n                return dst;\n            } \n            if ((((nShorts - 1) * 16) + srcPos) >= 32) {\n                throw new java.lang.IllegalArgumentException(\"(nShorts-1)*16+srcPos is greather or equal to than 32\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nShorts ; i++) {\n                shift = (i * 16) + srcPos;\n                dst[(dstPos + i)] = ((short)(65535 & (src >> shift)));\n            }\n            return dst;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"srcPos","length":"srcPos"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:818","type":"CtBinaryOperatorImpl","sourcecode":"rhs == null"},"failures":[93,94,95,96,97,98,99,100,101],"tindex":"8e1359ba-2ec0-11e6-8782-6976542a49ea","method":{"position":"org.apache.commons.lang3.ArrayUtils:174","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final java.lang.Object array, final java.lang.String stringIfNull) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return stringIfNull;\n            } \n            return new org.apache.commons.lang3.builder.ToStringBuilder(array , org.apache.commons.lang3.builder.ToStringStyle.org.apache.commons.lang3.builder.ToStringStyle.org.apache.commons.lang3.builder.ToStringStyle).append(array).toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rhs":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1491","type":"CtBinaryOperatorImpl","sourcecode":"(raw.getEnclosingClass()) == null"},"failures":[290,291],"tindex":"8e1359bb-2ec0-11e6-8782-532144de70d6","method":{"position":"org.apache.commons.lang3.ClassUtils:280","type":"CtMethodImpl","sourcecode":"public static java.lang.String getPackageName(final java.lang.Class<?> cls) {\n    if ((cls.getEnclosingClass()) == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cls == null) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            return org.apache.commons.lang3.ClassUtils.getPackageName(cls.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"cls"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:262","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Arrays.equals(lhs, rhs))"},"failures":[292],"tindex":"8e1359bc-2ec0-11e6-8782-43c3ce403e83","method":{"position":"org.apache.commons.lang3.ArrayUtils:4771","type":"CtMethodImpl","sourcecode":"public static byte[] removeElement(final byte[] array, final byte element) {\n    if (!(java.util.Arrays.equals(array, array))) {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1913","type":"CtBinaryOperatorImpl","sourcecode":"index >= 0"},"failures":[],"tindex":"8e1380cd-2ec0-11e6-8782-7d9b685bcb96","method":{"position":"org.apache.commons.lang3.text.StrBuilder:375","type":"CtMethodImpl","sourcecode":"public char[] toCharArray(final int startIndex, int endIndex) {\n    if (endIndex >= 0) {\n        {\n            endIndex = validateRange(startIndex, endIndex);\n            final int int = endIndex - startIndex;\n            if (len == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.char[];\n            } \n            final char[] char[] = new char[len];\n            java.lang.System.arraycopy(char[], startIndex, chars, 0, len);\n            return chars;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"endIndex"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:435","type":"CtBinaryOperatorImpl","sourcecode":"(newLine) == null"},"failures":[293],"tindex":"8e1380ce-2ec0-11e6-8782-c10d9b64a4a6","method":{"position":"org.apache.commons.lang3.StringUtils:5990","type":"CtMethodImpl","sourcecode":"public static boolean isAsciiPrintable(final java.lang.CharSequence cs) {\n    if (cs == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cs == null) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if ((org.apache.commons.lang3.CharUtils.isAsciiPrintable(cs.charAt(i))) == false) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"newLine":"cs"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1496","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[294],"tindex":"8e1380cf-2ec0-11e6-8782-0947c2ff9fee","method":{"position":"org.apache.commons.lang3.text.StrMatcher:205","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.StrMatcher stringMatcher(final java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                return org.apache.commons.lang3.text.StrMatcher.org.apache.commons.lang3.text.StrMatcher.org.apache.commons.lang3.text.StrMatcher;\n            } \n            return new org.apache.commons.lang3.text.StrMatcher.StringMatcher(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3456","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"8e13a7e0-2ec0-11e6-8782-c7718d90f260","method":{"position":"org.apache.commons.lang3.Validate:505","type":"CtMethodImpl","sourcecode":"public static <T>T[] noNullElements(final T[] array, final java.lang.String message, final java.lang.Object... values) {\n    if (values == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.notNull(array);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if ((array[i]) == null) {\n                    final java.lang.Object[] java.lang.Object[] = org.apache.commons.lang3.ArrayUtils.add(values, java.lang.Integer.valueOf(i));\n                    throw new java.lang.IllegalArgumentException(java.lang.String.format(message, values2));\n                } \n            }\n            return array;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"values"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2171","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[295],"tindex":"8e13a7e1-2ec0-11e6-8782-6b42038726b2","method":{"position":"org.apache.commons.lang3.CharSequenceUtils:55","type":"CtMethodImpl","sourcecode":"public static java.lang.CharSequence subSequence(final java.lang.CharSequence cs, final int start) {\n    if (start < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return cs == null ? null : cs.subSequence(start, cs.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"start"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5712","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))"},"failures":[296],"tindex":"8e13a7e2-2ec0-11e6-8782-8bed53199843","method":{"position":"org.apache.commons.lang3.math.NumberUtils:936","type":"CtMethodImpl","sourcecode":"public static long max(final long[] array) {\n    if ((org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(array))) {\n        {\n            org.apache.commons.lang3.math.NumberUtils.validateArray(array);\n            long long = array[0];\n            for (int int = 1 ; j < (array.int) ; j++) {\n                if ((array[j]) > max) {\n                    max = array[j];\n                } \n            }\n            return max;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array","values":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:2002","type":"CtBinaryOperatorImpl","sourcecode":"sizeStartText == null"},"failures":[297],"tindex":"8e13cef3-2ec0-11e6-8782-41ff40d19759","method":{"position":"org.apache.commons.lang3.math.NumberUtils:99","type":"CtMethodImpl","sourcecode":"public static int toInt(final java.lang.String str) {\n    if (str == null) {\n        {\n            return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sizeStartText":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:726","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[298],"tindex":"8e13cef4-2ec0-11e6-8782-0b1743fc69d8","method":{"position":"org.apache.commons.lang3.ArrayUtils:4559","type":"CtMethodImpl","sourcecode":"private static java.lang.Object add(final java.lang.Object array, final int index, final java.lang.Object element, final java.lang.Class<?> clss) {\n    if (array == null) {\n        {\n            if (array == null) {\n                if (index != 0) {\n                    throw new java.lang.IndexOutOfBoundsException(((\"Index: \" + index) + \", Length: 0\"));\n                } \n                final java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(clss, 1);\n                java.lang.reflect.Array.set(joinedArray, 0, element);\n                return joinedArray;\n            } \n            final int int = java.lang.reflect.Array.getLength(array);\n            if ((index > length) || (index < 0)) {\n                throw new java.lang.IndexOutOfBoundsException((((\"Index: \" + index) + \", Length: \") + length));\n            } \n            final java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(clss, (length + 1));\n            java.lang.System.arraycopy(array, 0, result, 0, index);\n            java.lang.reflect.Array.set(result, index, element);\n            if (index < length) {\n                java.lang.System.arraycopy(array, index, result, (index + 1), (length - index));\n            } \n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.NumericEntityEscaper:109","type":"CtBinaryOperatorImpl","sourcecode":"(codepoint >= (below)) && (codepoint <= (above))"},"failures":[],"tindex":"8e13cef5-2ec0-11e6-8782-ade0137cec4a","method":{"position":"org.apache.commons.lang3.BooleanUtils:216","type":"CtMethodImpl","sourcecode":"public static java.lang.Boolean toBooleanObject(final int value) {\n    if ((value >= value) && (codepoint <= value)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == 0 ? java.lang.Boolean.java.lang.Boolean.java.lang.Boolean : java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"codepoint":"value","below":"value","above":"value"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:154","type":"CtBinaryOperatorImpl","sourcecode":"expression == false"},"failures":[299],"tindex":"8e13f606-2ec0-11e6-8782-fdf34265cb92","method":{"position":"org.apache.commons.lang3.BooleanUtils:408","type":"CtMethodImpl","sourcecode":"public static java.lang.Integer toIntegerObject(final boolean bool) {\n    if (bool == false) {\n        {\n            return bool ? org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.java.lang.Integer : org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.java.lang.Integer;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"expression":"bool"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:896","type":"CtBinaryOperatorImpl","sourcecode":"first < second"},"failures":[],"tindex":"8e13f607-2ec0-11e6-8782-c12b6ca05422","method":{"position":"org.apache.commons.lang3.ArrayUtils:2046","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final long[] array, final long valueToFind) {\n    if (valueToFind < valueToFind) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ArrayUtils.lastIndexOf(array, valueToFind, java.lang.Integer.java.lang.Integer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"first":"valueToFind","second":"valueToFind"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3478","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"8e13f608-2ec0-11e6-8782-f19bfca8d85b","method":{"position":"org.apache.commons.lang3.Conversion:384","type":"CtMethodImpl","sourcecode":"public static char binaryToHexDigitMsb0_4bits(final boolean[] src) {\n    if (src == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.Conversion.binaryToHexDigitMsb0_4bits(src, 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"src"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:623","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"8e141d19-2ec0-11e6-8782-5f0dda600f86","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:619","type":"CtMethodImpl","sourcecode":"public static void writeField(final java.lang.reflect.Field field, final java.lang.Object target, final java.lang.Object value) throws java.lang.IllegalAccessException {\n    if (target == null) {\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            org.apache.commons.lang3.reflect.FieldUtils.writeField(field, target, value, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"target"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:877","type":"CtVariableReadImpl","sourcecode":"top"},"failures":[300],"tindex":"8e141d1a-2ec0-11e6-8782-217ce371fce5","method":{"position":"org.apache.commons.lang3.BooleanUtils:832","type":"CtMethodImpl","sourcecode":"public static java.lang.String toStringTrueFalse(final boolean bool) {\n    if (bool) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.BooleanUtils.toString(bool, \"true\", \"false\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"top":"bool"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5003","type":"CtBinaryOperatorImpl","sourcecode":"(ch == (org.apache.commons.lang3.CharUtils.CR)) || (ch == (org.apache.commons.lang3.CharUtils.LF))"},"failures":[286,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,93,94,95,96,97,98,99,100,323,324,325,326,289,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347],"tindex":"8e141d1b-2ec0-11e6-8782-b5868749e456","method":{"position":"org.apache.commons.lang3.text.StrBuilder:795","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic org.apache.commons.lang3.text.StrBuilder append(final char ch) {\n    if ((ch == ch) || (ch == ch)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = length();\n            ensureCapacity((len + 1));\n            char[][((int)++)] = ch;\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch","org.apache.commons.lang3.CharUtils.LF":"ch","org.apache.commons.lang3.CharUtils.CR":"ch"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1854","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[348,349],"tindex":"8e14442c-2ec0-11e6-8782-4fea889b666e","method":{"position":"org.apache.commons.lang3.math.NumberUtils:982","type":"CtMethodImpl","sourcecode":"public static short max(final short[] array) {\n    if (array == null) {\n        {\n            org.apache.commons.lang3.math.NumberUtils.validateArray(array);\n            short short = array[0];\n            for (int int = 1 ; i < (array.int) ; i++) {\n                if ((array[i]) > max) {\n                    max = array[i];\n                } \n            }\n            return max;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:542","type":"CtBinaryOperatorImpl","sourcecode":"(multiplierOddNumber % 2) == 0"},"failures":[350],"tindex":"8e14442d-2ec0-11e6-8782-bf0a4b14bf54","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:179","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getDateInstance(final int style) {\n    if ((style % 2) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FormatCache<org.apache.commons.lang3.time.FastDateFormat>.getDateInstance(style, null, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"multiplierOddNumber":"style"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:82","type":"CtBinaryOperatorImpl","sourcecode":"digit < 0"},"failures":[],"tindex":"8e14442e-2ec0-11e6-8782-e125317b7aac","method":{"position":"org.apache.commons.lang3.time.FormatCache:142","type":"CtMethodImpl","sourcecode":"F getDateTimeInstance(final int dateStyle, final int timeStyle, final java.util.TimeZone timeZone, java.util.Locale locale) {\n    if (dateStyle < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return getDateTimeInstance(java.lang.Integer.valueOf(dateStyle), java.lang.Integer.valueOf(timeStyle), timeZone, locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"digit":"dateStyle"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:259","type":"CtFieldReadImpl","sourcecode":"objectsTriviallyEqual"},"failures":[351,352],"tindex":"8e146b3f-2ec0-11e6-8782-11d598646994","method":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:270","type":"CtMethodImpl","sourcecode":"public static java.lang.String formatPeriod(final long startMillis, final long endMillis, final java.lang.String format, final boolean padWithZeros, final java.util.TimeZone timezone) {\n    if (padWithZeros) {\n        {\n            final org.apache.commons.lang3.time.DurationFormatUtils.Token[] org.apache.commons.lang3.time.DurationFormatUtils.Token[] = org.apache.commons.lang3.time.DurationFormatUtils.lexx(format);\n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance(timezone);\n            start.setTime(new java.util.Date(startMillis));\n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance(timezone);\n            end.setTime(new java.util.Date(endMillis));\n            int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n            int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n            int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n            int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n            int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n            int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n            int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n            while (milliseconds < 0) {\n                milliseconds += 1000;\n                seconds -= 1;\n            }\n            while (seconds < 0) {\n                seconds += 60;\n                minutes -= 1;\n            }\n            while (minutes < 0) {\n                minutes += 60;\n                hours -= 1;\n            }\n            while (hours < 0) {\n                hours += 24;\n                days -= 1;\n            }\n            if (org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object)) {\n                while (days < 0) {\n                    days += start.getActualMaximum(java.util.Calendar.java.util.Calendar.int);\n                    months -= 1;\n                    start.add(java.util.Calendar.java.util.Calendar.int, 1);\n                }\n                while (months < 0) {\n                    months += 12;\n                    years -= 1;\n                }\n                if ((!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) && (years != 0)) {\n                    while (years != 0) {\n                        months += 12 * years;\n                        years = 0;\n                    }\n                } \n            } else {\n                if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) {\n                    int int = end.get(java.util.Calendar.java.util.Calendar.int);\n                    if (months < 0) {\n                        target -= 1;\n                    } \n                    while ((start.get(java.util.Calendar.java.util.Calendar.int)) != target) {\n                        days += (start.getActualMaximum(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                        if (((start instanceof java.util.GregorianCalendar) && ((start.get(java.util.Calendar.java.util.Calendar.int)) == (java.util.Calendar.java.util.Calendar.int))) && ((start.get(java.util.Calendar.java.util.Calendar.int)) == 29)) {\n                            days += 1;\n                        } \n                        start.add(java.util.Calendar.java.util.Calendar.int, 1);\n                        days += start.get(java.util.Calendar.java.util.Calendar.int);\n                    }\n                    years = 0;\n                } \n                while ((start.get(java.util.Calendar.java.util.Calendar.int)) != (end.get(java.util.Calendar.java.util.Calendar.int))) {\n                    days += start.getActualMaximum(java.util.Calendar.java.util.Calendar.int);\n                    start.add(java.util.Calendar.java.util.Calendar.int, 1);\n                }\n                months = 0;\n                while (days < 0) {\n                    days += start.getActualMaximum(java.util.Calendar.java.util.Calendar.int);\n                    months -= 1;\n                    start.add(java.util.Calendar.java.util.Calendar.int, 1);\n                }\n            }\n            if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) {\n                hours += 24 * days;\n                days = 0;\n            } \n            if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) {\n                minutes += 60 * hours;\n                hours = 0;\n            } \n            if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) {\n                seconds += 60 * minutes;\n                minutes = 0;\n            } \n            if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) {\n                milliseconds += 1000 * seconds;\n                seconds = 0;\n            } \n            return org.apache.commons.lang3.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectsTriviallyEqual":"padWithZeros"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:585","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[353],"tindex":"8e14e070-2ec0-11e6-8782-49ed85b4d8cc","method":{"position":"org.apache.commons.lang3.StringUtils:3203","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] splitByCharacterTypeCamelCase(final java.lang.String str) {\n    if (str == null) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.lang3.StringUtils.splitByCharacterType(str, true);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1102","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8e14e071-2ec0-11e6-8782-b73d38a262e0","method":{"position":"org.apache.commons.lang3.StringUtils:3203","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] splitByCharacterTypeCamelCase(final java.lang.String str) {\n    if (str == null) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.lang3.StringUtils.splitByCharacterType(str, true);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3230","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[354],"tindex":"8e150782-2ec0-11e6-8782-7fdb74d9d96b","method":{"position":"org.apache.commons.lang3.ArrayUtils:3229","type":"CtMethodImpl","sourcecode":"public static byte[] toPrimitive(final java.lang.Byte[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.byte[];\n            } \n            final byte[] byte[] = new byte[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = array[i].byteValue();\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2293","type":"CtInvocationImpl","sourcecode":"separator.isEmpty()"},"failures":[355],"tindex":"8e150783-2ec0-11e6-8782-05192ca19731","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1245","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendSeparator(final java.lang.String standard, final java.lang.String defaultIfEmpty) {\n    if (standard.isEmpty()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.String java.lang.String = isEmpty() ? defaultIfEmpty : standard;\n            if (str != null) {\n                append(str);\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"standard"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:173","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[117,125,142,164,164,165,166,167,168,213,213,214,215,216,217,218,219,220,221,222,222,223,224,225,226,227,228,229,230,236,253,261,269],"tindex":"8e150784-2ec0-11e6-8782-1f3194cdc844","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:898","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.lang.Object[] array) {\n    if (fieldName == null) {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Object java.lang.Object = array[i];\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                if (item == null) {\n                    appendNullText(buffer, fieldName);\n                } else {\n                    appendInternal(buffer, fieldName, item, boolean);\n                }\n            }\n            buffer.append(java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:150","type":"CtBinaryOperatorImpl","sourcecode":"ch == null"},"failures":[356],"tindex":"8e152e95-2ec0-11e6-8782-6f705bb66714","method":{"position":"org.apache.commons.lang3.CharUtils:331","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final java.lang.Character ch) {\n    if (ch == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ch == null) {\n                return null;\n            } \n            return org.apache.commons.lang3.CharUtils.toString(ch.charValue());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:728","type":"CtBinaryOperatorImpl","sourcecode":"classes == null"},"failures":[357,358,359,360,361,362,363,364,365,366,367,368,369,370],"tindex":"8e152e96-2ec0-11e6-8782-dfd664367a48","method":{"position":"org.apache.commons.lang3.ArrayUtils:492","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?>[] nullToEmpty(final java.lang.Class<?>[] array) {\n    if (array == null) {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Class<?>[];\n            } \n            return array;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classes":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:742","type":"CtBinaryOperatorImpl","sourcecode":"(lhs.length) != (rhs.length)"},"failures":[298],"tindex":"8e152e97-2ec0-11e6-8782-e5bb3eeb3310","method":{"position":"org.apache.commons.lang3.ArrayUtils:4451","type":"CtMethodImpl","sourcecode":"public static int[] add(final int[] array, final int index, final int element) {\n    if (index != (array.int)) {\n        {\n            return ((int[])(org.apache.commons.lang3.ArrayUtils.add(array, index, java.lang.Integer.valueOf(element), java.lang.Integer.java.lang.Integer.java.lang.Class<java.lang.Integer>)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","length":"index","rhs":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5033","type":"CtBinaryOperatorImpl","sourcecode":"index == (org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND)"},"failures":[],"tindex":"8e1555a8-2ec0-11e6-8782-9bc2dcd8ca26","method":{"position":"org.apache.commons.lang3.math.Fraction:657","type":"CtMethodImpl","sourcecode":"private static int mulPosAndCheck(final int x, final int y) {\n    if (y == y) {\n        {\n            final long long = ((long)(x)) * ((long)(y));\n            if (m > (java.lang.Integer.java.lang.Integer.int)) {\n                throw new java.lang.ArithmeticException(\"overflow: mulPos\");\n            } \n            return ((int)(m));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND":"y","index":"y"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:804","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397],"tindex":"8e1555a9-2ec0-11e6-8782-6bf0363d2e21","method":{"position":"org.apache.commons.lang3.time.DateUtils:1647","type":"CtMethodImpl","sourcecode":"private static long getFragment(final java.util.Date date, final int fragment, final java.util.concurrent.TimeUnit unit) {\n    if (date == null) {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n            calendar.setTime(date);\n            return org.apache.commons.lang3.time.DateUtils.getFragment(calendar, fragment, unit);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:472","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Float.floatToIntBits(lhs)) != (java.lang.Float.floatToIntBits(rhs))"},"failures":[398,399,400,401],"tindex":"8e1555aa-2ec0-11e6-8782-a1718388700e","method":{"position":"org.apache.commons.lang3.RandomUtils:163","type":"CtMethodImpl","sourcecode":"public static float nextFloat(float startInclusive, float endInclusive) {\n    if ((java.lang.Float.floatToIntBits(startInclusive)) != (java.lang.Float.floatToIntBits(endInclusive))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.isTrue((endInclusive >= startInclusive), \"Start value must be smaller or equal to end value.\");\n            org.apache.commons.lang3.Validate.isTrue((startInclusive >= 0), \"Both range values must be non-negative.\");\n            if (startInclusive == endInclusive) {\n                return startInclusive;\n            } \n            return startInclusive + ((endInclusive - startInclusive) * (org.apache.commons.lang3.RandomUtils.org.apache.commons.lang3.RandomUtils.java.util.Random.nextFloat()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"startInclusive","rhs":"endInclusive"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:187","type":"CtBinaryOperatorImpl","sourcecode":"(tmp.length()) != (duration.length())"},"failures":[],"tindex":"8e157cbb-2ec0-11e6-8782-4badb7b994b4","method":{"position":"org.apache.commons.lang3.time.FastDateParser:298","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object parseObject(final java.lang.String source, final java.text.ParsePosition pos) {\n    if ((source.length()) != (source.length())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return parse(source, pos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"source","tmp":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:854","type":"CtBinaryOperatorImpl","sourcecode":"lhs == null"},"failures":[402,403],"tindex":"8e157cbc-2ec0-11e6-8782-c1ca64dfc6b3","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1005","type":"CtMethodImpl","sourcecode":"public static byte max(final byte[] array) {\n    if (array == null) {\n        {\n            org.apache.commons.lang3.math.NumberUtils.validateArray(array);\n            byte byte = array[0];\n            for (int int = 1 ; i < (array.int) ; i++) {\n                if ((array[i]) > max) {\n                    max = array[i];\n                } \n            }\n            return max;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1450","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[404,405,406,407,408],"tindex":"8e157cbd-2ec0-11e6-8782-650c8e4c1b2d","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:687","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final long[] lhs, final long[] rhs) {\n    if (rhs == null) {\n        {\n            if (rhs == null) {\n                {\n                    if ((int) != 0) {\n                        return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                    } \n                    if (lhs == rhs) {\n                        return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                    } \n                    if (lhs == null) {\n                        int = -1;\n                        return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                    } \n                    if (rhs == null) {\n                        int = +1;\n                        return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                    } \n                    if ((lhs.int) != (rhs.int)) {\n                        int = (lhs.int) < (rhs.int) ? -1 : +1;\n                        return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                    } \n                    for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                        append(lhs[i], rhs[i]);\n                    }\n                    return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"rhs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1630","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isHighSurrogate(ch)"},"failures":[],"tindex":"8e15a3ce-2ec0-11e6-8782-cdbef1ea4f3a","method":{"position":"org.apache.commons.lang3.ArrayUtils:2358","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final char[] array, final char valueToFind) {\n    if (java.lang.Character.isHighSurrogate(valueToFind)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ArrayUtils.lastIndexOf(array, valueToFind, java.lang.Integer.java.lang.Integer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"valueToFind"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:187","type":"CtBinaryOperatorImpl","sourcecode":"(tmp.length()) != (duration.length())"},"failures":[],"tindex":"8e15a3cf-2ec0-11e6-8782-7915e985d0c1","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:553","type":"CtMethodImpl","sourcecode":"public static void writeStaticField(final java.lang.Class<?> cls, final java.lang.String fieldName, final java.lang.Object value, final boolean forceAccess) throws java.lang.IllegalAccessException {\n    if ((fieldName.length()) != (value.length())) {\n        {\n            final java.lang.reflect.Field java.lang.reflect.Field = org.apache.commons.lang3.reflect.FieldUtils.getField(cls, fieldName, forceAccess);\n            org.apache.commons.lang3.Validate.isTrue((field != null), \"Cannot locate field %s on %s\", fieldName, cls);\n            org.apache.commons.lang3.reflect.FieldUtils.writeStaticField(field, value, false);\n        }\n    } else {\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"value","tmp":"fieldName"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3760","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"8e15cae0-2ec0-11e6-8782-35968ad3a4a3","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:178","type":"CtMethodImpl","sourcecode":"public static java.lang.String reflectionToString(final java.lang.Object object, final org.apache.commons.lang3.builder.ToStringStyle style, final boolean outputTransients) {\n    if (object == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(object, style, outputTransients, false, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"object"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:591","type":"CtBinaryOperatorImpl","sourcecode":"lhs == false"},"failures":[409],"tindex":"8e15cae1-2ec0-11e6-8782-edc7d37ebfc1","method":{"position":"org.apache.commons.lang3.StringUtils:4684","type":"CtMethodImpl","sourcecode":"private static java.lang.String replaceEach(final java.lang.String text, final java.lang.String[] searchList, final java.lang.String[] replacementList, final boolean repeat, final int timeToLive) {\n    if (repeat == false) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((((((text == null) || (text.isEmpty())) || (searchList == null)) || ((searchList.int) == 0)) || (replacementList == null)) || ((replacementList.int) == 0)) {\n                return text;\n            } \n            if (timeToLive < 0) {\n                throw new java.lang.IllegalStateException((\"Aborting to protect against StackOverflowError - \" + \"output of one loop is the input of another\"));\n            } \n            final int int = searchList.int;\n            final int int = replacementList.int;\n            if (searchLength != replacementLength) {\n                throw new java.lang.IllegalArgumentException((((\"Search and Replace array lengths don't match: \" + searchLength) + \" vs \") + replacementLength));\n            } \n            final boolean[] boolean[] = new boolean[searchLength];\n            int int = -1;\n            int int = -1;\n            int int = -1;\n            for (int int = 0 ; i < searchLength ; i++) {\n                if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || (searchList[i].isEmpty())) || ((replacementList[i]) == null)) {\n                    continue;\n                } \n                tempIndex = text.indexOf(searchList[i]);\n                if (tempIndex == (-1)) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if ((textIndex == (-1)) || (tempIndex < textIndex)) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    } \n                }\n            }\n            if (textIndex == (-1)) {\n                return text;\n            } \n            int int = 0;\n            int int = 0;\n            for (int int = 0 ; i < (searchList.int) ; i++) {\n                if (((searchList[i]) == null) || ((replacementList[i]) == null)) {\n                    continue;\n                } \n                final int int = (replacementList[i].length()) - (searchList[i].length());\n                if (greater > 0) {\n                    increase += 3 * greater;\n                } \n            }\n            increase = java.lang.Math.min(increase, ((text.length()) / 5));\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((text.length()) + increase));\n            while (textIndex != (-1)) {\n                for (int int = start ; i < textIndex ; i++) {\n                    buf.append(text.charAt(i));\n                }\n                buf.append(replacementList[replaceIndex]);\n                start = textIndex + (searchList[replaceIndex].length());\n                textIndex = -1;\n                replaceIndex = -1;\n                tempIndex = -1;\n                for (int int = 0 ; i < searchLength ; i++) {\n                    if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || (searchList[i].isEmpty())) || ((replacementList[i]) == null)) {\n                        continue;\n                    } \n                    tempIndex = text.indexOf(searchList[i], start);\n                    if (tempIndex == (-1)) {\n                        noMoreMatchesForReplIndex[i] = true;\n                    } else {\n                        if ((textIndex == (-1)) || (tempIndex < textIndex)) {\n                            textIndex = tempIndex;\n                            replaceIndex = i;\n                        } \n                    }\n                }\n            }\n            final int int = text.length();\n            for (int int = start ; i < textLength ; i++) {\n                buf.append(text.charAt(i));\n            }\n            final java.lang.String java.lang.String = buf.toString();\n            if (!repeat) {\n                return result;\n            } \n            return org.apache.commons.lang3.StringUtils.replaceEach(result, searchList, replacementList, repeat, (timeToLive - 1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"repeat"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSet:174","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[248,249,250,251,252,253,254,255],"tindex":"8e15f1f2-2ec0-11e6-8782-cf6c8e2eabf6","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1969","type":"CtMethodImpl","sourcecode":"protected void setNullText(java.lang.String nullText) {\n    if (nullText == null) {\n        {\n            if (nullText == null) {\n                nullText = \"\";\n            } \n            org.apache.commons.lang3.builder.ToStringStyle.this.java.lang.String = nullText;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"nullText"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1450","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"8e15f1f3-2ec0-11e6-8782-51a98a2b3d68","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:687","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final long[] lhs, final long[] rhs) {\n    if (rhs == null) {\n        {\n            if (rhs == null) {\n                {\n                    if ((int) != 0) {\n                        return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                    } \n                    if (lhs == rhs) {\n                        return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                    } \n                    if (lhs == null) {\n                        int = -1;\n                        return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                    } \n                    if (rhs == null) {\n                        int = +1;\n                        return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                    } \n                    if ((lhs.int) != (rhs.int)) {\n                        int = (lhs.int) < (rhs.int) ? -1 : +1;\n                        return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                    } \n                    for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                        append(lhs[i], rhs[i]);\n                    }\n                    return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"rhs"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3274","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[173,173,174,175],"tindex":"8e161904-2ec0-11e6-8782-952d46222a8c","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1150","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final byte[] array, final java.lang.Boolean fullDetail) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (array == null) {\n                appendNullText(buffer, fieldName);\n            } else if (isFullDetail(fullDetail)) {\n                appendDetail(buffer, fieldName, array);\n            } else {\n                appendSummary(buffer, fieldName, array);\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MemberUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"(destClass.isInterface()) && (org.apache.commons.lang3.ClassUtils.isAssignable(srcClass, destClass))"},"failures":[],"tindex":"8e161905-2ec0-11e6-8782-f10728373a1b","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1470","type":"CtMethodImpl","sourcecode":"public static final java.lang.reflect.ParameterizedType parameterize(final java.lang.Class<?> raw, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeArgMappings) {\n    if ((raw.isInterface()) && (org.apache.commons.lang3.ClassUtils.isAssignable(raw, destClass))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.notNull(raw, \"raw class is null\");\n            org.apache.commons.lang3.Validate.notNull(typeArgMappings, \"typeArgMappings is null\");\n            return org.apache.commons.lang3.reflect.TypeUtils.parameterizeWithOwner(null, raw, org.apache.commons.lang3.reflect.TypeUtils.extractTypeArgumentsFrom(typeArgMappings, raw.getTypeParameters()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcClass":"raw","destClass":"raw"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:438","type":"CtArrayReadImpl","sourcecode":"src[srcPos]"},"failures":[410,411],"tindex":"8e164016-2ec0-11e6-8782-e9dda0b6313a","method":{"position":"org.apache.commons.lang3.Conversion:302","type":"CtMethodImpl","sourcecode":"public static char binaryToHexDigit(final boolean[] src, final int srcPos) {\n    if (src[srcPos]) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((src.int) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Cannot convert an empty array.\");\n            } \n            if (((src.int) > (srcPos + 3)) && (src[(srcPos + 3)])) {\n                if (((src.int) > (srcPos + 2)) && (src[(srcPos + 2)])) {\n                    if (((src.int) > (srcPos + 1)) && (src[(srcPos + 1)])) {\n                        if (src[srcPos]) {\n                            return 'f';\n                        } else {\n                            return 'e';\n                        }\n                    } else {\n                        if (src[srcPos]) {\n                            return 'd';\n                        } else {\n                            return 'c';\n                        }\n                    }\n                } else {\n                    if (((src.int) > (srcPos + 1)) && (src[(srcPos + 1)])) {\n                        if (src[srcPos]) {\n                            return 'b';\n                        } else {\n                            return 'a';\n                        }\n                    } else {\n                        if (src[srcPos]) {\n                            return '9';\n                        } else {\n                            return '8';\n                        }\n                    }\n                }\n            } else {\n                if (((src.int) > (srcPos + 2)) && (src[(srcPos + 2)])) {\n                    if (((src.int) > (srcPos + 1)) && (src[(srcPos + 1)])) {\n                        if (src[srcPos]) {\n                            return '7';\n                        } else {\n                            return '6';\n                        }\n                    } else {\n                        if (src[srcPos]) {\n                            return '5';\n                        } else {\n                            return '4';\n                        }\n                    }\n                } else {\n                    if (((src.int) > (srcPos + 1)) && (src[(srcPos + 1)])) {\n                        if (src[srcPos]) {\n                            return '3';\n                        } else {\n                            return '2';\n                        }\n                    } else {\n                        if (src[srcPos]) {\n                            return '1';\n                        } else {\n                            return '0';\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcPos":"srcPos","src":"src"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:1042","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[412],"tindex":"8e164017-2ec0-11e6-8782-7788f20ba38c","method":{"position":"org.apache.commons.lang3.ArrayUtils:3687","type":"CtMethodImpl","sourcecode":"public static boolean isNotEmpty(final boolean[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (array != null) && ((array.int) != 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:558","type":"CtVariableReadImpl","sourcecode":"detail"},"failures":[],"tindex":"8e164018-2ec0-11e6-8782-35582528be56","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:895","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final java.lang.Object[] array, final boolean fullDetail) {\n    if (fullDetail) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, java.lang.Boolean.valueOf(fullDetail));\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"detail":"fullDetail"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:119","type":"CtBinaryOperatorImpl","sourcecode":"codepoint > 255"},"failures":[413,414,415,416,417,418,419],"tindex":"8e166729-2ec0-11e6-8782-05a9a9d626db","method":{"position":"org.apache.commons.lang3.math.Fraction:209","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.math.Fraction getReducedFraction(int numerator, int denominator) {\n    if (numerator > 255) {\n        {\n            if (denominator == 0) {\n                throw new java.lang.ArithmeticException(\"The denominator must not be zero\");\n            } \n            if (numerator == 0) {\n                return org.apache.commons.lang3.math.Fraction.org.apache.commons.lang3.math.Fraction.org.apache.commons.lang3.math.Fraction;\n            } \n            if ((denominator == (java.lang.Integer.java.lang.Integer.int)) && ((numerator & 1) == 0)) {\n                numerator /= 2;\n                denominator /= 2;\n            } \n            if (denominator < 0) {\n                if ((numerator == (java.lang.Integer.java.lang.Integer.int)) || (denominator == (java.lang.Integer.java.lang.Integer.int))) {\n                    throw new java.lang.ArithmeticException(\"overflow: can't negate\");\n                } \n                numerator = -numerator;\n                denominator = -denominator;\n            } \n            final int int = org.apache.commons.lang3.math.Fraction.greatestCommonDivisor(numerator, denominator);\n            numerator /= gcd;\n            denominator /= gcd;\n            return new org.apache.commons.lang3.math.Fraction(numerator , denominator);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"codepoint":"numerator"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:202","type":"CtBinaryOperatorImpl","sourcecode":"(tmp.length()) != (duration.length())"},"failures":[158,158,159,159,160,181,181,215,215,216,217,218,219,220,220,221,222,223,224,225,226,227,228,229,230],"tindex":"8e16672a-2ec0-11e6-8782-635f4cf6cdcf","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:773","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final char value) {\n    if ((fieldName.length()) != (fieldName.length())) {\n        {\n            buffer.append(value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"fieldName","tmp":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1156","type":"CtBinaryOperatorImpl","sourcecode":"focus == null"},"failures":[420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,351,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468],"tindex":"8e168e3b-2ec0-11e6-8782-0f9f546a221b","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:473","type":"CtMethodImpl","sourcecode":"protected java.lang.StringBuffer applyRules(final java.util.Calendar calendar, final java.lang.StringBuffer buf) {\n    if (calendar == null) {\n        {\n            for (final org.apache.commons.lang3.time.FastDatePrinter.Rule org.apache.commons.lang3.time.FastDatePrinter.Rule : org.apache.commons.lang3.time.FastDatePrinter.Rule[]) {\n                rule.appendTo(buf, calendar);\n            }\n            return buf;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"focus":"calendar"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1092","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[469],"tindex":"8e168e3c-2ec0-11e6-8782-634bcff2f3c1","method":{"position":"org.apache.commons.lang3.ArrayUtils:1281","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final short[] array1, final short[] array2) {\n    if (array2 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4171","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[470],"tindex":"8e168e3d-2ec0-11e6-8782-079260ba8549","method":{"position":"org.apache.commons.lang3.JavaVersion:118","type":"CtMethodImpl","sourcecode":"static org.apache.commons.lang3.JavaVersion getJavaVersion(final java.lang.String nom) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(nom)) {\n        {\n            return org.apache.commons.lang3.JavaVersion.get(nom);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"nom"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1496","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[78],"tindex":"8e168e3e-2ec0-11e6-8782-1d4649b46bb3","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1933","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder replaceAll(final org.apache.commons.lang3.text.StrMatcher matcher, final java.lang.String replaceStr) {\n    if (replaceStr == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return replace(matcher, replaceStr, 0, int, (-1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"replaceStr"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":86,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":268,"org.apache.commons.lang3.time.FastDatePrinterTest.testToStringContainsName":336,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":216,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":224,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":210,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray":234,"org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP":81,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":269,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatUTC":330,"org.apache.commons.lang3.time.FastDatePrinterTest.testMilleniumBug":109,"org.apache.commons.lang3.ValidateTest.testIsTrue1":300,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":317,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":95,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":190,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_AD":379,"org.apache.commons.lang3.time.FastDatePrinterTest.testEquals":337,"org.apache.commons.lang3.text.StrBuilderTest.testContains_StrMatcher":5,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDefaults":352,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultIsExceptionUnknown":19,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":137,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang708":58,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":276,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray":233,"org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses2D":304,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":92,"org.apache.commons.lang3.ArrayUtilsTest.testContainsFloat":326,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetMatchingAccessibleMethod":411,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":34,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml10":54,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":266,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml11":55,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude":235,"org.apache.commons.lang3.builder.EqualsBuilderTest.testCyclicalObjectReferences":292,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":202,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":225,"org.apache.commons.lang3.time.FastDatePrinterTest.testTimeZoneMatches":338,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":315,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEqualsHashcode":254,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":206,"org.apache.commons.lang3.StringUtilsTest.testChomp":298,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_BC":380,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedFormats":258,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testTimeZoneMatches":344,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeEcmaScript":61,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondFragmentInLargerUnitWithCalendar":426,"org.apache.commons.lang3.mutable.MutableShortTest.testGetSet":70,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJavaWithSlash":53,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testTimeZoneMatches":383,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher_int":4,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":173,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfFloat":327,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":209,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringString":2,"org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected":111,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":30,"org.apache.commons.lang3.math.FractionTest.testDivide":311,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO":84,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477":256,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinuteFragmentInLargerUnitWithCalendar":424,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":191,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":184,"org.apache.commons.lang3.StringEscapeUtilsTest.testStandaloneAmphersand":48,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeEx":15,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":98,"org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStrBuilder":419,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO":79,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeMethod":412,"org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiCharArray":388,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfMonthWithCalendar":425,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":89,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeUnknownEntity":66,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":319,"org.apache.commons.lang3.StringUtilsTest.testUnescapeSurrogatePairs":44,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testToStringContainsName":342,"org.apache.commons.lang3.ConversionTest.testByteArrayToUuid":75,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":80,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfHourWithCalendar":423,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull":229,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":181,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfDayWithCalendar":428,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":320,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":103,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":131,"org.apache.commons.lang3.time.FastDatePrinterTest.testLocaleMatches":334,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":278,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear":333,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxByte_nullArray":398,"org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphanumeric_char":252,"org.apache.commons.lang3.time.DateUtilsTest.testLang530":329,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":99,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseNumerics":368,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":180,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":165,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang538":370,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":195,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":395,"org.apache.commons.lang3.time.DateFormatUtilsTest.testConstructor":332,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":147,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":217,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson":134,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":168,"org.apache.commons.lang3.text.StrTokenizerTest.testChaining":421,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang720":59,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":86,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":97,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang303":369,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testPatternMatches":345,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char":10,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":141,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHexCharsHtml":63,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters":64,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfByte":72,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":272,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":392,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Unboxing_Widening":405,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":159,"org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayString":415,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":158,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testPerson":130,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":146,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_BC":378,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":164,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang303":120,"org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfBytes":413,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":179,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":277,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLocaleMatches":340,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":178,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO":83,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection":228,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Autoboxing":407,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":167,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_AD":377,"org.apache.commons.lang3.StringUtilsTest.testJoin_Objectarray":416,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang538":121,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsOnly_CharArray":422,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":201,"org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayCharSeparator":418,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.test_Equality_Hash":373,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":101,"org.apache.commons.lang3.ArrayUtilsTest.testCloneByte":124,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementByteArray":126,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":152,"org.apache.commons.lang3.StringUtilsTest.testGetJaroWinklerDistance_StringString":420,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHtml4":49,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":318,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":316,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":275,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":236,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":207,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance":23,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable":400,"org.apache.commons.lang3.math.FractionTest.testAdd":309,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":85,"org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives":11,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testPatternMatches":384,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray":404,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJava":51,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":204,"org.apache.commons.lang3.ClassUtilsTest.testGetClassByNormalNameArrays2D":305,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":215,"org.apache.commons.lang3.ClassUtilsTest.testWithInterleavingWhitespace":306,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":29,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":156,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":274,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang911":60,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_AD":374,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":90,"org.apache.commons.lang3.ClassUtilsTest.testGetClassInvalidArguments":307,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayObject":414,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang645":335,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":281,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert":21,"org.apache.commons.lang3.ClassUtilsTest.testGetClassClassNotFound":308,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetMatchingAccessibleMethod":409,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":32,"org.apache.commons.lang3.time.FastDateFormatTest.testLang954":348,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang538":113,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_BC":375,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlAllCharacters":46,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testMilleniumBug":117,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_BC":367,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArray":22,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":284,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":197,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testInvalidFragmentWithCalendar":430,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlHighUnicode":62,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":270,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray":230,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringStringarray":3,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetExceptionUnknown":13,"org.apache.commons.lang3.time.DateUtilsTest.testAddMilliseconds":42,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":139,"org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitive":401,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixtureWithTransients":288,"org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitives":249,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":211,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":94,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfByteWithStartIndex":73,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang645":341,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":28,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":182,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance":346,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringCharArray":8,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":219,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testSpecialCharacters":358,"org.apache.commons.lang3.math.FractionTest.testEquals":261,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":172,"org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables":299,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher":6,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats":259,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray_Autoboxing":402,"org.apache.commons.lang3.time.DateUtilsTest.testAddHours":39,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson":144,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone_Locale":349,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testDayOf":362,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvString":76,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testMilleniumBug":360,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":160,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":151,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO":106,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testQuotes":382,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":221,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":321,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson":148,"org.apache.commons.lang3.math.IEEE754rUtilsTest.testLang381":25,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":214,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":213,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone":354,"org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitivesNull":250,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":88,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson":226,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":133,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String":351,"org.apache.commons.lang3.time.DateUtilsTest.testAddDays":37,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testSimpleDate":115,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDifferingStyles":353,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":313,"org.apache.commons.lang3.time.DateUtilsTest.testAddSeconds":38,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHiragana":67,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":33,"org.apache.commons.lang3.ClassUtilsTest.testGetClassByNormalNameArrays":301,"org.apache.commons.lang3.time.DateUtilsTest.testAddMonths":41,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":238,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlVersions":65,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice":257,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":185,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testCalendarTimezoneRespected":119,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDefaults":357,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":104,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":218,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat":255,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_AD":366,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":186,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":196,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":96,"org.apache.commons.lang3.math.FractionTest.testMultiply":312,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang303":112,"org.apache.commons.lang3.BitFieldTest.testByte":253,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":27,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawType":399,"org.apache.commons.lang3.time.FastDateFormatTest.testDateDefaults":24,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":31,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":132,"org.apache.commons.lang3.time.FastDatePrinterTest.testSimpleDate":107,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDateDefaults":350,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":93,"org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairsLang858":45,"org.apache.commons.lang3.LocaleUtilsTest.testCountriesByLanguage":123,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":150,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":223,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testFormat":122,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBeforeLast_StringString":35,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionArrays":290,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBetween_StringString":385,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseLongShort":376,"org.apache.commons.lang3.mutable.MutableBooleanTest.testSetNull":9,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":188,"org.apache.commons.lang3.StringUtilsTest.testReverseDelimited_StringChar":417,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":142,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":162,"org.apache.commons.lang3.time.DateUtilsTest.testAddWeeks":0,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":273,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":157,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtml":50,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":222,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":212,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":102,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":163,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":199,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":170,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":138,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals":294,"org.apache.commons.lang3.time.FastDatePrinterTest.testShortDateStyleWithLocales":108,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetResultObjectUnknown":18,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":282,"org.apache.commons.lang3.builder.EqualsBuilderTest.testCharArrayHiddenByObject":389,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormat":331,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls":237,"org.apache.commons.lang3.ClassUtilsTest.testGetInnerClass":302,"org.apache.commons.lang3.time.FastDatePrinterTest.testFormat":114,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":69,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsExcludeFields":293,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":271,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":285,"org.apache.commons.lang3.ObjectUtilsTest.testConstMethods":78,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_DefaultUnboxing_Widening":403,"org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitivesEmpty":251,"org.apache.commons.lang3.builder.EqualsBuilderTest.testCharArray":387,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":91,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testNullCalendar":427,"org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses":303,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":105,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":175,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger":289,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":136,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseZone":363,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":198,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":189,"org.apache.commons.lang3.math.IEEE754rUtilsTest.testEnforceExceptions":26,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvWriter":77,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondFragmentInLargerUnitWithCalendar":429,"org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairs":43,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":322,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeStaticMethod":410,"org.apache.commons.lang3.math.FractionTest.testReduce":262,"org.apache.commons.lang3.time.FastDatePrinterTest.testLowYearPadding":110,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture":287,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping":314,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testToStringContainsName":371,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":394,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayToObjectArray":71,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":397,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":176,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":205,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":161,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":324,"org.apache.commons.lang3.math.NumberUtilsTest.testToIntString":1,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":200,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang313":57,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":265,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":183,"org.apache.commons.lang3.ArrayUtilsTest.testIsEquals":391,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":145,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":267,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":325,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":283,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":208,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":166,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":280,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementFloatArray":328,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection":231,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testShortDateStyleWithLocales":359,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlSupplementaryCharacters":56,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeExternalExec":17,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":140,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":129,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadField":432,"org.apache.commons.lang3.time.DateUtilsTest.testAddYears":40,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":279,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_Locale":355,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":187,"org.apache.commons.lang3.ValidateTest.testInclusiveBetweenLong":127,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testEquals":381,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex":431,"org.apache.commons.lang3.ArrayUtilsTest.testToString":239,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance":356,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":396,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstring_StringInt":264,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":153,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO":82,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testAmPm":364,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldAccessIllegalArgumentException2":263,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":177,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":135,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareExcludeFields":295,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeJava":47,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":232,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":203,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":192,"org.apache.commons.lang3.text.StrTokenizerTest.test8":248,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":100,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeExactMethod":386,"org.apache.commons.lang3.text.StrTokenizerTest.test5":245,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLowYearPadding":365,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLANG_832":372,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrChar":390,"org.apache.commons.lang3.text.StrTokenizerTest.test4":244,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":193,"org.apache.commons.lang3.text.StrTokenizerTest.test7":247,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":194,"org.apache.commons.lang3.text.StrTokenizerTest.test6":246,"org.apache.commons.lang3.text.StrTokenizerTest.test1":241,"org.apache.commons.lang3.text.StrTokenizerTest.test3":243,"org.apache.commons.lang3.text.StrTokenizerTest.test2":242,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":169,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testIntegerWithTransients":286,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml":68,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":227,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":149,"org.apache.commons.lang3.time.FastDateFormatTest.testParseSync":347,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareTransients":297,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultInitializerNamesModify":12,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJson":52,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEquals":291,"org.apache.commons.lang3.math.FractionTest.testSubtract":310,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":155,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementByteArray":125,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testEquals":343,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetInitializerUnknown":16,"org.apache.commons.lang3.math.FractionTest.testPow":260,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":393,"org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitiveNoWrapper":406,"org.apache.commons.lang3.ConversionTest.testHexToLong":7,"org.apache.commons.lang3.time.DateUtilsTest.testAddMinutes":36,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":154,"org.apache.commons.lang3.ConversionTest.testByteArrayToLong":74,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLowYearPadding":118,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompare":296,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeTempExec":14,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":143,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":220,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":174,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":87,"org.apache.commons.lang3.AnnotationUtilsTest.testToString":240,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeConstructor":408,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocaleMatches":361,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":323,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testShortDateStyleWithLocales":116,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsertWithNullText":20,"org.apache.commons.lang3.time.FastDatePrinterTest.testPatternMatches":339,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":171,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":128},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:891","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6224d679-3f25-11e6-9d30-432bd8ed5b3d","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:967","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {\n    if (rhs == rhs) {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs","rhs":"rhs"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1123","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"622572ba-3f25-11e6-9d30-97c29ecba7bc","method":{"position":"org.apache.commons.lang3.time.DateUtils:432","type":"CtMethodImpl","sourcecode":"public static java.util.Date addWeeks(final java.util.Date date, final int amount) {\n    if (date == null) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.add(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"focus":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1096","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"622572bb-3f25-11e6-9d30-d1deb1cc760e","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1594","type":"CtMethodImpl","sourcecode":"private static boolean equals(java.lang.reflect.ParameterizedType p, java.lang.reflect.Type t) {\n    if (t == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (t instanceof java.lang.reflect.ParameterizedType) {\n                final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(t));\n                if ((org.apache.commons.lang3.reflect.TypeUtils.equals(p.getRawType(), other.getRawType())) && (org.apache.commons.lang3.reflect.TypeUtils.equals(p.getOwnerType(), other.getOwnerType()))) {\n                    return org.apache.commons.lang3.reflect.TypeUtils.equals(p.getActualTypeArguments(), other.getActualTypeArguments());\n                } \n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"t"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:976","type":"CtBinaryOperatorImpl"},"failures":[1],"tindex":"622599cc-3f25-11e6-9d30-d11f08dd1bcc","method":{"position":"org.apache.commons.lang3.math.NumberUtils:120","type":"CtMethodImpl","sourcecode":"public static int toInt(final java.lang.String str, final int defaultValue) {\n    if ((((defaultValue - 1) * 4) + defaultValue) >= 16) {\n        {\n            if (str == null) {\n                return defaultValue;\n            } \n            try {\n                return java.lang.Integer.parseInt(str);\n            } catch (final java.lang.NumberFormatException nfe) {\n                return defaultValue;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"defaultValue","nHex":"defaultValue"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSetUtils:206","type":"CtBinaryOperatorImpl"},"failures":[2,3],"tindex":"622599cd-3f25-11e6-9d30-bd169619c702","method":{"position":"org.apache.commons.lang3.CharSetUtils:64","type":"CtMethodImpl","sourcecode":"public static java.lang.String squeeze(final java.lang.String str, final java.lang.String... set) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.CharSetUtils.deepEmpty(set))) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.CharSetUtils.deepEmpty(set))) {\n                return str;\n            } \n            final org.apache.commons.lang3.CharSet org.apache.commons.lang3.CharSet = org.apache.commons.lang3.CharSet.getInstance(set);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length());\n            final char[] char[] = str.toCharArray();\n            final int int = chrs.int;\n            char char = ' ';\n            char char = ' ';\n            for (int int = 0 ; i < sz ; i++) {\n                ch = chrs[i];\n                if (((ch == lastChar) && (i != 0)) && (chars.contains(ch))) {\n                    continue;\n                } \n                buffer.append(ch);\n                lastChar = ch;\n            }\n            return buffer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str","set":"set"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:183","type":"CtBinaryOperatorImpl"},"failures":[4,5,6],"tindex":"6225c0de-3f25-11e6-9d30-6b4cb891d53c","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2391","type":"CtMethodImpl","sourcecode":"public int indexOf(final org.apache.commons.lang3.text.StrMatcher matcher, int startIndex) {\n    if (startIndex < 0) {\n        {\n            startIndex = startIndex < 0 ? 0 : startIndex;\n            if ((matcher == null) || (startIndex >= (int))) {\n                return -1;\n            } \n            final int int = int;\n            final char[] char[] = char[];\n            for (int int = startIndex ; i < len ; i++) {\n                if ((matcher.isMatch(buf, i, startIndex, len)) > 0) {\n                    return i;\n                } \n            }\n            return -1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"whole":"startIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6907","type":"CtBinaryOperatorImpl"},"failures":[7],"tindex":"6225c0df-3f25-11e6-9d30-55365534b31e","method":{"position":"org.apache.commons.lang3.Conversion:904","type":"CtMethodImpl","sourcecode":"public static long hexToLong(final java.lang.String src, final int srcPos, final long dstInit, final int dstPos, final int nHex) {\n    if (dstPos == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nHex) {\n                return dstInit;\n            } \n            if ((((nHex - 1) * 4) + dstPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+dstPos is greather or equal to than 64\");\n            } \n            long long = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nHex ; i++) {\n                shift = (i * 4) + dstPos;\n                final long long = (15L & (org.apache.commons.lang3.Conversion.hexDigitToInt(src.charAt((i + srcPos))))) << shift;\n                final long long = 15L << shift;\n                out = (out & (~mask)) | bits;\n            }\n            return out;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"dstPos"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3794","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6225e7f0-3f25-11e6-9d30-71c1ea5e622e","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:179","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.StrTokenizer getCSVInstance(final char[] input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.lang3.text.StrTokenizer org.apache.commons.lang3.text.StrTokenizer = org.apache.commons.lang3.text.StrTokenizer.getCSVClone();\n            tok.reset(input);\n            return tok;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array2":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:131","type":"CtBinaryOperatorImpl"},"failures":[8],"tindex":"6225e7f1-3f25-11e6-9d30-f39faaf5336a","method":{"position":"org.apache.commons.lang3.StringUtils:1709","type":"CtMethodImpl","sourcecode":"public static int indexOfAnyBut(final java.lang.CharSequence cs, final char... searchChars) {\n    if (cs == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars))) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            final int int = cs.length();\n            final int int = csLen - 1;\n            final int int = searchChars.int;\n            final int int = searchLen - 1;\n            outer : for (int int = 0 ; i < csLen ; i++) {\n                final char char = cs.charAt(i);\n                for (int int = 0 ; j < searchLen ; j++) {\n                    if ((searchChars[j]) == ch) {\n                        if (((i < csLast) && (j < searchLast)) && (java.lang.Character.isHighSurrogate(ch))) {\n                            if ((searchChars[(j + 1)]) == (cs.charAt((i + 1)))) {\n                                continue outer;\n                            } \n                        } else {\n                            continue outer;\n                        }\n                    } \n                }\n                return i;\n            }\n            return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:466","type":"CtBinaryOperatorImpl"},"failures":[9],"tindex":"62260f02-3f25-11e6-9d30-cf0fd73a7727","method":{"position":"org.apache.commons.lang3.mutable.MutableBoolean:116","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setValue(final java.lang.Boolean value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableBoolean.this.boolean = value.booleanValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5012","type":"CtBinaryOperatorImpl"},"failures":[10],"tindex":"62260f03-3f25-11e6-9d30-57dfd200bae1","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1272","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendSeparator(final char separator) {\n    if (separator == separator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((size()) > 0) {\n                append(separator);\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"separator","org.apache.commons.lang3.CharUtils.LF":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2127","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"62260f04-3f25-11e6-9d30-43e86fbab14f","method":{"position":"org.apache.commons.lang3.Conversion:1152","type":"CtMethodImpl","sourcecode":"public static byte binaryToByte(final boolean[] src, final int srcPos, final byte dstInit, final int dstPos, final int nBools) {\n    if (srcPos < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((((src.int) == 0) && (srcPos == 0)) || (0 == nBools)) {\n                return dstInit;\n            } \n            if (((nBools - 1) + dstPos) >= 8) {\n                throw new java.lang.IllegalArgumentException(\"nBools-1+dstPos is greather or equal to than 8\");\n            } \n            byte byte = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nBools ; i++) {\n                shift = (i * 1) + dstPos;\n                final int int = (src[(i + srcPos)] ? 1 : 0) << shift;\n                final int int = 1 << shift;\n                out = ((byte)((out & (~mask)) | bits));\n            }\n            return out;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"srcPos"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:387","type":"CtBinaryOperatorImpl"},"failures":[11],"tindex":"62263615-3f25-11e6-9d30-7bf60f69dbae","method":{"position":"org.apache.commons.lang3.ArrayUtils:3643","type":"CtMethodImpl","sourcecode":"public static boolean isNotEmpty(final char[] array) {\n    if (array == null) {\n        {\n            return (array != null) && ((array.int) != 0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:530","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"62263616-3f25-11e6-9d30-b3938d262190","method":{"position":"org.apache.commons.lang3.tuple.Pair:176","type":"CtMethodImpl","sourcecode":"public java.lang.String toString(final java.lang.String format) {\n    if (((format == null) && (format == null)) && ((((format.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {\n        {\n            return java.lang.String.format(format, getLeft(), getRight());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dec":"format","numeric":"format","exp":"format"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:514","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"62265d27-3f25-11e6-9d30-ff621b796c20","method":{"position":"org.apache.commons.lang3.reflect.MemberUtils:100","type":"CtMethodImpl","sourcecode":"static int compareParameterTypes(final java.lang.Class<?>[] left, final java.lang.Class<?>[] right, final java.lang.Class<?>[] actual) {\n    if ((org.apache.commons.lang3.ArrayUtils.isSameLength(left, actual)) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final float float = org.apache.commons.lang3.reflect.MemberUtils.getTotalTransformationCost(actual, left);\n            final float float = org.apache.commons.lang3.reflect.MemberUtils.getTotalTransformationCost(actual, right);\n            return leftCost < rightCost ? -1 : rightCost < leftCost ? 1 : 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toClassArray":"actual","classArray":"left"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:448","type":"CtBinaryOperatorImpl"},"failures":[12,13,14,15,16,17,18,19],"tindex":"62265d28-3f25-11e6-9d30-69ca8400b2d8","method":{"position":"org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:307","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.concurrent.ConcurrentException getException(final java.lang.String name) {\n    if (name == null) {\n        {\n            checkName(name);\n            return java.util.Map<java.lang.String, org.apache.commons.lang3.concurrent.ConcurrentException>.get(name);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nullText":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:705","type":"CtBinaryOperatorImpl"},"failures":[20,21],"tindex":"62268439-3f25-11e6-9d30-1bad8a9aa77f","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1521","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, final char[] chars) {\n    if (index > 0) {\n        {\n            validateIndex(index);\n            if (chars == null) {\n                return insert(index, java.lang.String);\n            } \n            final int int = chars.int;\n            if (len > 0) {\n                ensureCapacity(((int) + len));\n                java.lang.System.arraycopy(char[], index, char[], (index + len), ((int) - index));\n                java.lang.System.arraycopy(chars, 0, char[], index, len);\n                int += len;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1106","type":"CtBinaryOperatorImpl"},"failures":[22],"tindex":"6226843a-3f25-11e6-9d30-b50964b2edf1","method":{"position":"org.apache.commons.lang3.StringUtils:1536","type":"CtMethodImpl","sourcecode":"public static int indexOfAny(final java.lang.CharSequence cs, final char... searchChars) {\n    if (cs != null) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars))) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            final int int = cs.length();\n            final int int = csLen - 1;\n            final int int = searchChars.int;\n            final int int = searchLen - 1;\n            for (int int = 0 ; i < csLen ; i++) {\n                final char char = cs.charAt(i);\n                for (int int = 0 ; j < searchLen ; j++) {\n                    if ((searchChars[j]) == ch) {\n                        if (((i < csLast) && (j < searchLast)) && (java.lang.Character.isHighSurrogate(ch))) {\n                            if ((searchChars[(j + 1)]) == (cs.charAt((i + 1)))) {\n                                return i;\n                            } \n                        } else {\n                            return i;\n                        }\n                    } \n                }\n            }\n            return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prior":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:556","type":"CtBinaryOperatorImpl"},"failures":[23,24],"tindex":"6226ab4b-3f25-11e6-9d30-7b30b98f24ac","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:194","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getDateInstance(final int style, final java.util.Locale locale) {\n    if (style != style) {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FormatCache<org.apache.commons.lang3.time.FastDateFormat>.getDateInstance(style, null, locale);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"style","rhs":"style"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2335","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6226ab4c-3f25-11e6-9d30-a9dabb769988","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1378","type":"CtMethodImpl","sourcecode":"protected void appendSummary(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final float[] array) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendSummarySize(buffer, fieldName, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:514","type":"CtUnaryOperatorImpl"},"failures":[25,26],"tindex":"6226ab4d-3f25-11e6-9d30-513be0b9c76f","method":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:62","type":"CtMethodImpl","sourcecode":"public static float min(final float[] array) {\n    if (!(java.util.Arrays.equals(array, array))) {\n        {\n            if (array == null) {\n                throw new java.lang.IllegalArgumentException(\"The Array must not be null\");\n            } else if ((array.int) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Array cannot be empty.\");\n            } \n            float float = array[0];\n            for (int int = 1 ; i < (array.int) ; i++) {\n                min = org.apache.commons.lang3.math.IEEE754rUtils.min(array[i], min);\n            }\n            return min;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:1121","type":"CtInvocationImpl"},"failures":[27,28,29,30,31,32,33,34],"tindex":"6226ab4e-3f25-11e6-9d30-1f169b683424","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:203","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setArrayStart(final java.lang.String arrayStart) {\n    if (arrayStart.startsWith(\"L\")) {\n        {\n            super.setArrayStart(arrayStart);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"arrayStart"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6765","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6226d25f-3f25-11e6-9d30-3f43e3aab69e","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:210","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getDateInstance(final int style, final java.util.TimeZone timeZone) {\n    if (style == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FormatCache<org.apache.commons.lang3.time.FastDateFormat>.getDateInstance(style, timeZone, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.EnumUtils:114","type":"CtBinaryOperatorImpl"},"failures":[35],"tindex":"6226d260-3f25-11e6-9d30-3b1503a0ddc8","method":{"position":"org.apache.commons.lang3.StringUtils:2372","type":"CtMethodImpl","sourcecode":"public static java.lang.String substringBeforeLast(final java.lang.String str, final java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(separator))) {\n                return str;\n            } \n            final int int = str.lastIndexOf(separator);\n            if (pos == (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) {\n                return str;\n            } \n            return str.substring(0, pos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"enumName":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:210","type":"CtBinaryOperatorImpl"},"failures":[36,37,38,39,0,40,41,42],"tindex":"6226d261-3f25-11e6-9d30-d94ae76ffbb6","method":{"position":"org.apache.commons.lang3.time.DateUtils:517","type":"CtMethodImpl","sourcecode":"private static java.util.Date add(final java.util.Date date, final int calendarField, final int amount) {\n    if (amount == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n            c.setTime(date);\n            c.add(calendarField, amount);\n            return c.getTime();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"denominator":"amount"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:907","type":"CtInvocationImpl"},"failures":[],"tindex":"6226d262-3f25-11e6-9d30-07c68d3b6c00","method":{"position":"org.apache.commons.lang3.Validate:1225","type":"CtMethodImpl","sourcecode":"public static void isAssignableFrom(final java.lang.Class<?> superType, final java.lang.Class<?> type) {\n    if (superType.isPrimitive()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((superType.isAssignableFrom(type)) == false) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, (type == null ? \"null\" : type.getName()), superType.getName()));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toClass":"superType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.StringUtils:3666","type":"CtBinaryOperatorImpl"},"failures":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"tindex":"6226f973-3f25-11e6-9d30-17514a430b2b","method":{"position":"org.apache.commons.lang3.text.translate.AggregateTranslator:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int translate(final java.lang.CharSequence input, final int index, final java.io.Writer out) throws java.io.IOException {\n    if (index <= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            for (final org.apache.commons.lang3.text.translate.CharSequenceTranslator org.apache.commons.lang3.text.translate.CharSequenceTranslator : org.apache.commons.lang3.text.translate.CharSequenceTranslator[]) {\n                final int int = translator.translate(input, index, out);\n                if (consumed != 0) {\n                    return consumed;\n                } \n            }\n            return 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"noOfItems":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1241","type":"CtBinaryOperatorImpl"},"failures":[70],"tindex":"6226f974-3f25-11e6-9d30-0f9027b066c7","method":{"position":"org.apache.commons.lang3.mutable.MutableShort:96","type":"CtMethodImpl","sourcecode":"public void setValue(final short value) {\n    if (value > value) {\n        {\n            org.apache.commons.lang3.mutable.MutableShort.this.short = value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"value","b":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:434","type":"CtBinaryOperatorImpl"},"failures":[71],"tindex":"6226f975-3f25-11e6-9d30-d5c3183c4569","method":{"position":"org.apache.commons.lang3.ArrayUtils:3791","type":"CtMethodImpl","sourcecode":"public static char[] addAll(final char[] array1, final char... array2) {\n    if (array1 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array1 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array2);\n            } else if (array2 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array1);\n            } \n            final char[] char[] = new char[(array1.int) + (array2.int)];\n            java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n            java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n            return joinedArray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"array1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1364","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"62272086-3f25-11e6-9d30-311cb692d5f8","method":{"position":"org.apache.commons.lang3.time.DateUtils:1761","type":"CtMethodImpl","sourcecode":"public static int truncatedCompareTo(final java.util.Calendar cal1, final java.util.Calendar cal2, final int field) {\n    if (field >= 0) {\n        {\n            final java.util.Calendar java.util.Calendar = org.apache.commons.lang3.time.DateUtils.truncate(cal1, field);\n            final java.util.Calendar java.util.Calendar = org.apache.commons.lang3.time.DateUtils.truncate(cal2, field);\n            return truncatedCal1.compareTo(truncatedCal2);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4757","type":"CtBinaryOperatorImpl"},"failures":[72,73],"tindex":"62272087-3f25-11e6-9d30-9718051b5b63","method":{"position":"org.apache.commons.lang3.ArrayUtils:2481","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {\n    if (startIndex > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } else if (startIndex >= (array.int)) {\n                startIndex = (array.int) - 1;\n            } \n            for (int int = startIndex ; i >= 0 ; i--) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"greater":"startIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:183","type":"CtBinaryOperatorImpl"},"failures":[74,75],"tindex":"62272088-3f25-11e6-9d30-21f38f54c049","method":{"position":"org.apache.commons.lang3.Conversion:796","type":"CtMethodImpl","sourcecode":"public static long byteArrayToLong(final byte[] src, final int srcPos, final long dstInit, final int dstPos, final int nBytes) {\n    if (srcPos < 0) {\n        {\n            if ((((src.int) == 0) && (srcPos == 0)) || (0 == nBytes)) {\n                return dstInit;\n            } \n            if ((((nBytes - 1) * 8) + dstPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"(nBytes-1)*8+dstPos is greather or equal to than 64\");\n            } \n            long long = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nBytes ; i++) {\n                shift = (i * 8) + dstPos;\n                final long long = (255L & (src[(i + srcPos)])) << shift;\n                final long long = 255L << shift;\n                out = (out & (~mask)) | bits;\n            }\n            return out;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"whole":"srcPos"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.StringUtils:6109","type":"CtBinaryOperatorImpl"},"failures":[44,76,77],"tindex":"62272089-3f25-11e6-9d30-37c3ff37bbb8","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:393","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int translate(final java.lang.CharSequence input, final int index, final java.io.Writer out) throws java.io.IOException {\n    if ((java.lang.Character.isWhitespace(input.charAt(index))) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (index != 0) {\n                throw new java.lang.IllegalStateException(\"CsvUnescaper should never reach the [1] index\");\n            } \n            if (((input.charAt(0)) != (org.apache.commons.lang3.StringEscapeUtils.CsvUnescaper.org.apache.commons.lang3.StringEscapeUtils.CsvUnescaper.char)) || ((input.charAt(((input.length()) - 1))) != (org.apache.commons.lang3.StringEscapeUtils.CsvUnescaper.org.apache.commons.lang3.StringEscapeUtils.CsvUnescaper.char))) {\n                out.write(input.toString());\n                return java.lang.Character.codePointCount(input, 0, input.length());\n            } \n            final java.lang.String java.lang.String = input.subSequence(1, ((input.length()) - 1)).toString();\n            if (org.apache.commons.lang3.StringUtils.containsAny(quoteless, org.apache.commons.lang3.StringEscapeUtils.CsvUnescaper.org.apache.commons.lang3.StringEscapeUtils.CsvUnescaper.char[])) {\n                out.write(org.apache.commons.lang3.StringUtils.replace(quoteless, ((org.apache.commons.lang3.StringEscapeUtils.CsvUnescaper.org.apache.commons.lang3.StringEscapeUtils.CsvUnescaper.java.lang.String) + (org.apache.commons.lang3.StringEscapeUtils.CsvUnescaper.org.apache.commons.lang3.StringEscapeUtils.CsvUnescaper.java.lang.String)), org.apache.commons.lang3.StringEscapeUtils.CsvUnescaper.org.apache.commons.lang3.StringEscapeUtils.CsvUnescaper.java.lang.String));\n            } else {\n                out.write(input.toString());\n            }\n            return java.lang.Character.codePointCount(input, 0, input.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"input","i":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1135","type":"CtBinaryOperatorImpl"},"failures":[78],"tindex":"6227479a-3f25-11e6-9d30-5f618d99b84d","method":{"position":"org.apache.commons.lang3.ObjectUtils:830","type":"CtMethodImpl","sourcecode":"public static short CONST(final short v) {\n    if (v < v) {\n        {\n            return v;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"v","b":"v"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:738","type":"CtBinaryOperatorImpl"},"failures":[79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122],"tindex":"6227479b-3f25-11e6-9d30-2186084e4a0f","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:461","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer format(final java.util.Calendar calendar, final java.lang.StringBuffer buf) {\n    if (calendar == null) {\n        {\n            return applyRules(calendar, buf);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"calendar"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4218","type":"CtInvocationImpl"},"failures":[],"tindex":"62276eac-3f25-11e6-9d30-d97504c7155c","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:328","type":"CtMethodImpl","sourcecode":"private int readArgumentIndex(final java.lang.String pattern, final java.text.ParsePosition pos) {\n    if (pattern.startsWith(pattern)) {\n        {\n            final int int = pos.getIndex();\n            seekNonWs(pattern, pos);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            boolean boolean = false;\n            for ( ; (!error) && ((pos.getIndex()) < (pattern.length())) ; next(pos)) {\n                char char = pattern.charAt(pos.getIndex());\n                if (java.lang.Character.isWhitespace(c)) {\n                    seekNonWs(pattern, pos);\n                    c = pattern.charAt(pos.getIndex());\n                    if ((c != (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char)) && (c != (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char))) {\n                        error = true;\n                        continue;\n                    } \n                } \n                if (((c == (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char)) || (c == (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char))) && ((result.length()) > 0)) {\n                    try {\n                        return java.lang.Integer.parseInt(result.toString());\n                    } catch (final java.lang.NumberFormatException e) {\n                    }\n                } \n                error = !(java.lang.Character.isDigit(c));\n                result.append(c);\n            }\n            if (error) {\n                throw new java.lang.IllegalArgumentException((((\"Invalid format argument index at position \" + start) + \": \") + (pattern.substring(start, pos.getIndex()))));\n            } \n            throw new java.lang.IllegalArgumentException((\"Unterminated format element at position \" + start));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"pattern","remove":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:195","type":"CtInvocationImpl"},"failures":[123],"tindex":"62276ead-3f25-11e6-9d30-6d5e8427f3f2","method":{"position":"org.apache.commons.lang3.LocaleUtils:292","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.util.Locale> countriesByLanguage(final java.lang.String languageCode) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(languageCode)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (languageCode == null) {\n                return java.util.Collections.emptyList();\n            } \n            java.util.List<java.util.Locale> java.util.List<java.util.Locale> = org.apache.commons.lang3.LocaleUtils.org.apache.commons.lang3.LocaleUtils.java.util.concurrent.ConcurrentMap<java.lang.String, java.util.List<java.util.Locale>>.get(languageCode);\n            if (countries == null) {\n                countries = new java.util.ArrayList<java.util.Locale>();\n                final java.util.List<java.util.Locale> java.util.List<java.util.Locale> = org.apache.commons.lang3.LocaleUtils.availableLocaleList();\n                for (int int = 0 ; i < (locales.size()) ; i++) {\n                    final java.util.Locale java.util.Locale = locales.get(i);\n                    if (((languageCode.equals(locale.getLanguage())) && ((locale.getCountry().length()) != 0)) && (locale.getVariant().isEmpty())) {\n                        countries.add(locale);\n                    } \n                }\n                countries = java.util.Collections.unmodifiableList(countries);\n                org.apache.commons.lang3.LocaleUtils.org.apache.commons.lang3.LocaleUtils.java.util.concurrent.ConcurrentMap<java.lang.String, java.util.List<java.util.Locale>>.putIfAbsent(languageCode, countries);\n                countries = org.apache.commons.lang3.LocaleUtils.org.apache.commons.lang3.LocaleUtils.java.util.concurrent.ConcurrentMap<java.lang.String, java.util.List<java.util.Locale>>.get(languageCode);\n            } \n            return countries;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"languageCode"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:975","type":"CtBinaryOperatorImpl"},"failures":[5],"tindex":"622795be-3f25-11e6-9d30-539b7dba44f0","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2278","type":"CtMethodImpl","sourcecode":"public boolean contains(final org.apache.commons.lang3.text.StrMatcher matcher) {\n    if (matcher == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (indexOf(matcher, 0)) >= 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefixMatcher":"matcher"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1145","type":"CtInvocationImpl"},"failures":[],"tindex":"622795bf-3f25-11e6-9d30-abcbe53cc470","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:337","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final char[] lhs, final char[] rhs) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(fieldName)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (!(java.util.Arrays.equals(lhs, rhs))) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Character[]>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Character[] getLeft() {\n                        return org.apache.commons.lang3.ArrayUtils.toObject(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Character[] getRight() {\n                        return org.apache.commons.lang3.ArrayUtils.toObject(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"valueDelimiter":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3711","type":"CtBinaryOperatorImpl"},"failures":[124,71,125,126],"tindex":"622795c0-3f25-11e6-9d30-6d059bc55844","method":{"position":"org.apache.commons.lang3.ArrayUtils:402","type":"CtMethodImpl","sourcecode":"public static byte[] clone(final byte[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } \n            return array.clone();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:640","type":"CtBinaryOperatorImpl"},"failures":[127],"tindex":"6227bcd1-3f25-11e6-9d30-333c5895999a","method":{"position":"org.apache.commons.lang3.Validate:943","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"boxing\")\npublic static void inclusiveBetween(long start, long end, long value) {\n    if (end != value) {\n        {\n            if ((value < start) || (value > end)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, value, start, end));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"end","rhs":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:854","type":"CtBinaryOperatorImpl"},"failures":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,150,151,152,152,153,154,155,155,156,156,157,157,158,158,159,159,160,160,161,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,176,177,178,178,179,180,181,181,182,182,183,184,185,185,186,186,187,188,188,189,189,190,190,191,192,193,194,195,195,196,196,197,198,199,200,201,202,202,203,204,205,205,206,206,207,208,209,210,211,212,212,213,214,215,215,216,216,217,217,218,218,219,220,220,221,221,222,223,27,32,33,34,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248],"tindex":"6227bcd2-3f25-11e6-9d30-372a19bdca72","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:594","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.lang.Object value) {\n    if (value == null) {\n        {\n            buffer.append(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:728","type":"CtBinaryOperatorImpl"},"failures":[249,250,251],"tindex":"6227bcd3-3f25-11e6-9d30-37462644331c","method":{"position":"org.apache.commons.lang3.ClassUtils:777","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?>[] wrappersToPrimitives(final java.lang.Class<?>... classes) {\n    if (classes == null) {\n        {\n            if (classes == null) {\n                return null;\n            } \n            if ((classes.int) == 0) {\n                return classes;\n            } \n            final java.lang.Class<?>[] java.lang.Class<?>[] = new java.lang.Class[classes.int];\n            for (int int = 0 ; i < (classes.int) ; i++) {\n                convertedClasses[i] = org.apache.commons.lang3.ClassUtils.wrapperToPrimitive(classes[i]);\n            }\n            return convertedClasses;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classes":"classes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:573","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6227e3e4-3f25-11e6-9d30-bdc90fd286c1","method":{"position":"org.apache.commons.lang3.text.StrBuilder:902","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final java.lang.StringBuffer str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return append(str).appendNewLine();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:240","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6227e3e5-3f25-11e6-9d30-e153c4f0cad6","method":{"position":"org.apache.commons.lang3.ArrayUtils:4836","type":"CtMethodImpl","sourcecode":"public static char[] removeElement(final char[] array, final char element) {\n    if ((org.apache.commons.lang3.CharUtils.isAsciiNumeric(element)) == false) {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:183","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6227e3e6-3f25-11e6-9d30-57b505053d1e","method":{"position":"org.apache.commons.lang3.text.translate.UnicodeUnescaper:36","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int translate(final java.lang.CharSequence input, final int index, final java.io.Writer out) throws java.io.IOException {\n    if ((input.length()) != (input.length())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((((input.charAt(index)) == '\\\\') && ((index + 1) < (input.length()))) && ((input.charAt((index + 1))) == 'u')) {\n                int int = 2;\n                while (((index + i) < (input.length())) && ((input.charAt((index + i))) == 'u')) {\n                    i++;\n                }\n                if (((index + i) < (input.length())) && ((input.charAt((index + i))) == '+')) {\n                    i++;\n                } \n                if (((index + i) + 4) <= (input.length())) {\n                    final java.lang.CharSequence java.lang.CharSequence = input.subSequence((index + i), ((index + i) + 4));\n                    try {\n                        final int int = java.lang.Integer.parseInt(unicode.toString(), 16);\n                        out.write(((char)(value)));\n                    } catch (final java.lang.NumberFormatException nfe) {\n                        throw new java.lang.IllegalArgumentException((\"Unable to parse unicode value: \" + unicode) , nfe);\n                    }\n                    return i + 4;\n                } else {\n                    throw new java.lang.IllegalArgumentException(((\"Less than 4 hex digits in unicode value: '\" + (input.subSequence(index, input.length()))) + \"' due to end of CharSequence\"));\n                }\n            } \n            return 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"input","tmp":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:308","type":"CtBinaryOperatorImpl"},"failures":[252],"tindex":"6227e3e7-3f25-11e6-9d30-5de02d2a6a01","method":{"position":"org.apache.commons.lang3.CharUtils:535","type":"CtMethodImpl","sourcecode":"public static boolean isAsciiAlphanumeric(final char ch) {\n    if (ch < 128) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.lang3.CharUtils.isAsciiAlpha(ch)) || (org.apache.commons.lang3.CharUtils.isAsciiNumeric(ch));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1156","type":"CtBinaryOperatorImpl"},"failures":[253],"tindex":"62280af8-3f25-11e6-9d30-affeac3a0d2f","method":{"position":"org.apache.commons.lang3.BitField:203","type":"CtMethodImpl","sourcecode":"public byte clearByte(final byte holder) {\n    if (holder < holder) {\n        {\n            return ((byte)(clear(holder)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"holder","c":"holder"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2949","type":"CtBinaryOperatorImpl"},"failures":[254,255,256,257,258,259],"tindex":"62280af9-3f25-11e6-9d30-33a836fa9d5f","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:304","type":"CtMethodImpl","sourcecode":"private java.text.Format getFormat(final java.lang.String desc) {\n    if (desc == null) {\n        {\n            if ((java.util.Map<java.lang.String, ? extends org.apache.commons.lang3.text.FormatFactory>) != null) {\n                java.lang.String java.lang.String = desc;\n                java.lang.String java.lang.String = null;\n                final int int = desc.indexOf(org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char);\n                if (i > 0) {\n                    name = desc.substring(0, i).trim();\n                    args = desc.substring((i + 1)).trim();\n                } \n                final org.apache.commons.lang3.text.FormatFactory org.apache.commons.lang3.text.FormatFactory = java.util.Map<java.lang.String, ? extends org.apache.commons.lang3.text.FormatFactory>.get(name);\n                if (factory != null) {\n                    return factory.getFormat(name, args, getLocale());\n                } \n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"desc"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:761","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"62280afa-3f25-11e6-9d30-0d913d618e32","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:572","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final byte value) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:494","type":"CtBinaryOperatorImpl"},"failures":[260,261,262],"tindex":"62280afb-3f25-11e6-9d30-5ddfeae6dc40","method":{"position":"org.apache.commons.lang3.math.Fraction:844","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj instanceof long[]) {\n        {\n            if (obj == (org.apache.commons.lang3.math.Fraction.this)) {\n                return true;\n            } \n            if ((obj instanceof org.apache.commons.lang3.math.Fraction) == false) {\n                return false;\n            } \n            final org.apache.commons.lang3.math.Fraction org.apache.commons.lang3.math.Fraction = ((org.apache.commons.lang3.math.Fraction)(obj));\n            return ((getNumerator()) == (other.getNumerator())) && ((getDenominator()) == (other.getDenominator()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4938","type":"CtBinaryOperatorImpl"},"failures":[263],"tindex":"6228320c-3f25-11e6-9d30-43bc190a3c17","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:146","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Field getDeclaredField(final java.lang.Class<?> cls, final java.lang.String fieldName) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.reflect.FieldUtils.getDeclaredField(cls, fieldName, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3132","type":"CtBinaryOperatorImpl"},"failures":[264],"tindex":"6228320d-3f25-11e6-9d30-6bd7e3facb2b","method":{"position":"org.apache.commons.lang3.StringUtils:2063","type":"CtMethodImpl","sourcecode":"public static java.lang.String substring(final java.lang.String str, int start) {\n    if ((str.indexOf(str.charAt(start))) >= 0) {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (start < 0) {\n                start = (str.length()) + start;\n            } \n            if (start < 0) {\n                start = 0;\n            } \n            if (start > (str.length())) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            return str.substring(start);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str","separatorChars":"str","i":"start"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:669","type":"CtInvocationImpl"},"failures":[],"tindex":"6228320e-3f25-11e6-9d30-57769a74e9cb","method":{"position":"org.apache.commons.lang3.StringUtils:4457","type":"CtMethodImpl","sourcecode":"public static java.lang.String removePattern(final java.lang.String source, final java.lang.String regex) {\n    if ((source.charAt(3)) != '_') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source.equals(regex)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.lang3.StringUtils.replacePattern(source, regex, org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source","falseString":"regex"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:732","type":"CtBinaryOperatorImpl"},"failures":[265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297],"tindex":"6228591f-3f25-11e6-9d30-ef6cdf42b01b","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:324","type":"CtMethodImpl","sourcecode":"public static boolean reflectionEquals(final java.lang.Object lhs, final java.lang.Object rhs, final boolean testTransients, final java.lang.Class<?> reflectUpToClass, final java.lang.String... excludeFields) {\n    if (rhs != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (lhs == rhs) {\n                return true;\n            } \n            if ((lhs == null) || (rhs == null)) {\n                return false;\n            } \n            final java.lang.Class<?> java.lang.Class<?> = lhs.getClass();\n            final java.lang.Class<?> java.lang.Class<?> = rhs.getClass();\n            java.lang.Class<?> java.lang.Class<?>;\n            if (lhsClass.isInstance(rhs)) {\n                testClass = lhsClass;\n                if (!(rhsClass.isInstance(lhs))) {\n                    testClass = rhsClass;\n                } \n            } else if (rhsClass.isInstance(lhs)) {\n                testClass = rhsClass;\n                if (!(lhsClass.isInstance(rhs))) {\n                    testClass = lhsClass;\n                } \n            } else {\n                return false;\n            }\n            final org.apache.commons.lang3.builder.EqualsBuilder org.apache.commons.lang3.builder.EqualsBuilder = new org.apache.commons.lang3.builder.EqualsBuilder();\n            try {\n                if (testClass.isArray()) {\n                    equalsBuilder.append(lhs, rhs);\n                } else {\n                    org.apache.commons.lang3.builder.EqualsBuilder.reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);\n                    while (((testClass.getSuperclass()) != null) && (testClass != reflectUpToClass)) {\n                        testClass = testClass.getSuperclass();\n                        org.apache.commons.lang3.builder.EqualsBuilder.reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);\n                    }\n                }\n            } catch (final java.lang.IllegalArgumentException e) {\n                return false;\n            }\n            return equalsBuilder.isEquals();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.reflect.InvocationTargetException","condition":{"position":"org.apache.commons.lang3.CharSet:139","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"62285920-3f25-11e6-9d30-7fafa3f6efc5","method":{"position":"org.apache.commons.lang3.reflect.ConstructorUtils:108","type":"CtMethodImpl","sourcecode":"public static <T>T invokeConstructor(final java.lang.Class<T> cls, java.lang.Object[] args, java.lang.Class<?>[] parameterTypes) throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (args == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.reflect.InvocationTargetException();\n    } else {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            parameterTypes = org.apache.commons.lang3.ArrayUtils.nullToEmpty(parameterTypes);\n            final java.lang.reflect.Constructor<T> java.lang.reflect.Constructor<T> = org.apache.commons.lang3.reflect.ConstructorUtils.getMatchingAccessibleConstructor(cls, parameterTypes);\n            if (ctor == null) {\n                throw new java.lang.NoSuchMethodException((\"No such accessible constructor on object: \" + (cls.getName())));\n            } \n            return ctor.newInstance(args);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"setStrs":"args"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:709","type":"CtBinaryOperatorImpl"},"failures":[298],"tindex":"62288031-3f25-11e6-9d30-4d82ae2da347","method":{"position":"org.apache.commons.lang3.StringUtils:4996","type":"CtMethodImpl","sourcecode":"public static java.lang.String chomp(final java.lang.String str) {\n    if (str == null) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                return str;\n            } \n            if ((str.length()) == 1) {\n                final char char = str.charAt(0);\n                if ((ch == (org.apache.commons.lang3.CharUtils.org.apache.commons.lang3.CharUtils.char)) || (ch == (org.apache.commons.lang3.CharUtils.org.apache.commons.lang3.CharUtils.char))) {\n                    return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n                } \n                return str;\n            } \n            int int = (str.length()) - 1;\n            final char char = str.charAt(lastIdx);\n            if (last == (org.apache.commons.lang3.CharUtils.org.apache.commons.lang3.CharUtils.char)) {\n                if ((str.charAt((lastIdx - 1))) == (org.apache.commons.lang3.CharUtils.org.apache.commons.lang3.CharUtils.char)) {\n                    lastIdx--;\n                } \n            } else if (last != (org.apache.commons.lang3.CharUtils.org.apache.commons.lang3.CharUtils.char)) {\n                lastIdx++;\n            } \n            return str.substring(0, lastIdx);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:596","type":"CtBinaryOperatorImpl"},"failures":[69,299],"tindex":"62288032-3f25-11e6-9d30-bd7e4b4974be","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1178","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getImplicitUpperBounds(final java.lang.reflect.WildcardType wildcardType) {\n    if (wildcardType == null) {\n        {\n            org.apache.commons.lang3.Validate.notNull(wildcardType, \"wildcardType is null\");\n            final java.lang.reflect.Type[] java.lang.reflect.Type[] = wildcardType.getUpperBounds();\n            return (bounds.int) == 0 ? new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } : org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(bounds);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toWildcardType":"wildcardType"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1056","type":"CtBinaryOperatorImpl"},"failures":[20,21],"tindex":"62288033-3f25-11e6-9d30-6d8deb2110fd","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1494","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, java.lang.String str) {\n    if (index > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            validateIndex(index);\n            if (str == null) {\n                str = java.lang.String;\n            } \n            if (str != null) {\n                final int int = str.length();\n                if (strLen > 0) {\n                    final int int = (int) + strLen;\n                    ensureCapacity(newSize);\n                    java.lang.System.arraycopy(char[], index, char[], (index + strLen), ((int) - index));\n                    int = newSize;\n                    str.getChars(0, strLen, char[], index);\n                } \n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSequenceUtils:204","type":"CtUnaryOperatorImpl"},"failures":[300],"tindex":"6228a744-3f25-11e6-9d30-355f1af36769","method":{"position":"org.apache.commons.lang3.Validate:178","type":"CtMethodImpl","sourcecode":"public static void isTrue(final boolean expression) {\n    if (!expression) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (expression == false) {\n                throw new java.lang.IllegalArgumentException(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ignoreCase":"expression"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2020","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6228a745-3f25-11e6-9d30-4de3f166d431","method":{"position":"org.apache.commons.lang3.RandomUtils:84","type":"CtMethodImpl","sourcecode":"public static int nextInt(int startInclusive, int endExclusive) {\n    if (endExclusive == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.isTrue((endExclusive >= startInclusive), \"Start value must be smaller or equal to end value.\");\n            org.apache.commons.lang3.Validate.isTrue((startInclusive >= 0), \"Both range values must be non-negative.\");\n            if (startInclusive == endExclusive) {\n                return startInclusive;\n            } \n            return startInclusive + (org.apache.commons.lang3.RandomUtils.org.apache.commons.lang3.RandomUtils.java.util.Random.nextInt((endExclusive - startInclusive)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"endExclusive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.text.ParseException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1740","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6228a746-3f25-11e6-9d30-4f0af9f1894f","method":{"position":"org.apache.commons.lang3.time.DateUtils:267","type":"CtMethodImpl","sourcecode":"public static java.util.Date parseDate(final java.lang.String str, final java.lang.String... parsePatterns) throws java.text.ParseException {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.text.ParseException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.parseDate(str, null, parsePatterns);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayStart":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:2002","type":"CtBinaryOperatorImpl"},"failures":[52],"tindex":"6228a747-3f25-11e6-9d30-c76f4f07feee","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:511","type":"CtMethodImpl","sourcecode":"public static final java.lang.String escapeJson(final java.lang.String input) {\n    if (input == null) {\n        {\n            return org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(input);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sizeStartText":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5302","type":"CtInvocationImpl"},"failures":[301,302,303,304,305,306,307,308],"tindex":"6228ce58-3f25-11e6-9d30-9548099f11a0","method":{"position":"org.apache.commons.lang3.ClassUtils:959","type":"CtMethodImpl","sourcecode":"private static java.lang.String toCanonicalName(java.lang.String className) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(className)) {\n        {\n            className = org.apache.commons.lang3.StringUtils.deleteWhitespace(className);\n            if (className == null) {\n                throw new java.lang.NullPointerException(\"className must not be null.\");\n            } else if (className.endsWith(\"[]\")) {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                while (className.endsWith(\"[]\")) {\n                    className = className.substring(0, ((className.length()) - 2));\n                    classNameBuffer.append(\"[\");\n                }\n                final java.lang.String java.lang.String = org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.util.Map<java.lang.String, java.lang.String>.get(className);\n                if (abbreviation != null) {\n                    classNameBuffer.append(abbreviation);\n                } else {\n                    classNameBuffer.append(\"L\").append(className).append(\";\");\n                }\n                className = classNameBuffer.toString();\n            } \n            return className;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"padStr":"className"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:667","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6228ce59-3f25-11e6-9d30-01e354e97cec","method":{"position":"org.apache.commons.lang3.Conversion:1469","type":"CtMethodImpl","sourcecode":"public static java.lang.String shortToHex(final short src, final int srcPos, final java.lang.String dstInit, final int dstPos, final int nHexs) {\n    if (dstInit == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nHexs) {\n                return dstInit;\n            } \n            if ((((nHexs - 1) * 4) + srcPos) >= 16) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+srcPos is greather or equal to than 16\");\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(dstInit);\n            int int = 0;\n            int int = sb.length();\n            for (int int = 0 ; i < nHexs ; i++) {\n                shift = (i * 4) + srcPos;\n                final int int = 15 & (src >> shift);\n                if ((dstPos + i) == append) {\n                    ++append;\n                    sb.append(org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                } else {\n                    sb.setCharAt((dstPos + i), org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                }\n            }\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stripChars":"dstInit"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.StopWatch:397","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6228ce5a-3f25-11e6-9d30-53fcd5f37d57","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:171","type":"CtMethodImpl","sourcecode":"static void register(final java.lang.Object lhs, final java.lang.Object rhs) {\n    if (lhs == lhs) {\n        {\n            synchronized(org.apache.commons.lang3.builder.EqualsBuilder.org.apache.commons.lang3.builder.EqualsBuilder.java.lang.Class) {\n                if ((org.apache.commons.lang3.builder.EqualsBuilder.getRegistry()) == null) {\n                    org.apache.commons.lang3.builder.EqualsBuilder.org.apache.commons.lang3.builder.EqualsBuilder.java.lang.ThreadLocal<java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>>>.set(new java.util.HashSet<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>>());\n                } \n            }\n            final java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>> java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>> = org.apache.commons.lang3.builder.EqualsBuilder.getRegistry();\n            final org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> = org.apache.commons.lang3.builder.EqualsBuilder.getRegisterPair(lhs, rhs);\n            registry.add(pair);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runningState":"lhs","org.apache.commons.lang3.time.StopWatch.State.UNSTARTED":"lhs"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:6025","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6228f56b-3f25-11e6-9d30-e77af41d8803","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1081","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final int value) {\n    if (value >= value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.time.FastDatePrinter.NumberRule.appendTo(buffer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prevIndex":"value","index":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSetUtils:65","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6228f56c-3f25-11e6-9d30-25e24647764c","method":{"position":"org.apache.commons.lang3.Validate:1060","type":"CtMethodImpl","sourcecode":"public static <T>void exclusiveBetween(final T start, final T end, final java.lang.Comparable<T> value, final java.lang.String message, final java.lang.Object... values) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(message)) || (org.apache.commons.lang3.CharSetUtils.deepEmpty(values))) {\n        {\n            if (((value.compareTo(start)) <= 0) || ((value.compareTo(end)) >= 0)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message, values));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"message","set":"values"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6687","type":"CtBinaryOperatorImpl"},"failures":[309,260,310,311,312],"tindex":"6228f56d-3f25-11e6-9d30-9d57a1aea29e","method":{"position":"org.apache.commons.lang3.math.Fraction:657","type":"CtMethodImpl","sourcecode":"private static int mulPosAndCheck(final int x, final int y) {\n    if (y == x) {\n        {\n            final long long = ((long)(x)) * ((long)(y));\n            if (m > (java.lang.Integer.java.lang.Integer.int)) {\n                throw new java.lang.ArithmeticException(\"overflow: mulPos\");\n            } \n            return ((int)(m));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND":"x","smallestIndexOfDiff":"y"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:674","type":"CtBinaryOperatorImpl"},"failures":[313,314,315,316,317,318,319,320,321,322,323,324,325],"tindex":"6228f56e-3f25-11e6-9d30-a91d215a0826","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:652","type":"CtMethodImpl","sourcecode":"public boolean replaceIn(java.lang.StringBuilder source) {\n    if (source == null) {\n        {\n            if (source == null) {\n                return false;\n            } \n            return replaceIn(source, 0, source.length());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2809","type":"CtInvocationImpl"},"failures":[326,327,328],"tindex":"62291c7f-3f25-11e6-9d30-b7e498856568","method":{"position":"org.apache.commons.lang3.ArrayUtils:2747","type":"CtMethodImpl","sourcecode":"public static int indexOf(final float[] array, final float valueToFind) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        {\n            return org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind, 0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:963","type":"CtInvocationImpl"},"failures":[329,330,79,80,81,82,83,84,331,332,85,86,87,88,89,90,91,92,93,94,95,96,333,97,98,99,100,101,102,103,104,105,106,107,108,109,334,110,111,112,113,335,336,337,114,338,339,115,116,117,340,118,119,120,121,341,342,343,122,344,345,346,347,348,349,23,350,351,24,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384],"tindex":"62291c80-3f25-11e6-9d30-95d468fc6582","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:298","type":"CtMethodImpl","sourcecode":"protected java.lang.String parseToken(final java.lang.String pattern, final int[] indexRef) {\n    if (pattern.endsWith(\"[]\")) {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = indexRef[0];\n            final int int = pattern.length();\n            char char = pattern.charAt(i);\n            if (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {\n                buf.append(c);\n                while ((i + 1) < length) {\n                    final char char = pattern.charAt((i + 1));\n                    if (peek == c) {\n                        buf.append(c);\n                        i++;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                buf.append('\\'');\n                boolean boolean = false;\n                for ( ; i < length ; i++) {\n                    c = pattern.charAt(i);\n                    if (c == '\\'') {\n                        if (((i + 1) < length) && ((pattern.charAt((i + 1))) == '\\'')) {\n                            i++;\n                            buf.append(c);\n                        } else {\n                            inLiteral = !inLiteral;\n                        }\n                    } else if ((!inLiteral) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {\n                        i--;\n                        break;\n                    } else {\n                        buf.append(c);\n                    }\n                }\n            }\n            indexRef[0] = i;\n            return buf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6451","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"62291c81-3f25-11e6-9d30-7b02ef1a0b32","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1175","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final byte[] array) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(fieldName)) || (org.apache.commons.lang3.StringUtils.isEmpty(fieldName))) {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName","middle":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.text.ParseException","condition":{"position":"org.apache.commons.lang3.StringUtils:4250","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"62294392-3f25-11e6-9d30-03883cd783b0","method":{"position":"org.apache.commons.lang3.time.DateUtils:353","type":"CtMethodImpl","sourcecode":"private static java.util.Date parseDateWithLeniency(final java.lang.String str, final java.util.Locale locale, final java.lang.String[] parsePatterns, final boolean lenient) throws java.text.ParseException {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(str))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.text.ParseException();\n    } else {\n        {\n            if ((str == null) || (parsePatterns == null)) {\n                throw new java.lang.IllegalArgumentException(\"Date and Patterns must not be null\");\n            } \n            java.text.SimpleDateFormat java.text.SimpleDateFormat;\n            if (locale == null) {\n                parser = new java.text.SimpleDateFormat();\n            } else {\n                parser = new java.text.SimpleDateFormat(\"\" , locale);\n            }\n            parser.setLenient(lenient);\n            final java.text.ParsePosition java.text.ParsePosition = new java.text.ParsePosition(0);\n            for (final java.lang.String java.lang.String : parsePatterns) {\n                java.lang.String java.lang.String = parsePattern;\n                if (parsePattern.endsWith(\"ZZ\")) {\n                    pattern = pattern.substring(0, ((pattern.length()) - 1));\n                } \n                parser.applyPattern(pattern);\n                pos.setIndex(0);\n                java.lang.String java.lang.String = str;\n                if (parsePattern.endsWith(\"ZZ\")) {\n                    str2 = str.replaceAll(\"([-+][0-9][0-9]):([0-9][0-9])$\", \"$1$2\");\n                } \n                final java.util.Date java.util.Date = parser.parse(str2, pos);\n                if ((date != null) && ((pos.getIndex()) == (str2.length()))) {\n                    return date;\n                } \n            }\n            throw new java.text.ParseException((\"Unable to parse the date: \" + str) , (-1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str","remove":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:514","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"62294393-3f25-11e6-9d30-e7c2e3cbb4c8","method":{"position":"org.apache.commons.lang3.CharSet:246","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (!(java.util.Arrays.equals(obj, obj))) {\n        {\n            if (obj == (org.apache.commons.lang3.CharSet.this)) {\n                return true;\n            } \n            if ((obj instanceof org.apache.commons.lang3.CharSet) == false) {\n                return false;\n            } \n            final org.apache.commons.lang3.CharSet org.apache.commons.lang3.CharSet = ((org.apache.commons.lang3.CharSet)(obj));\n            return java.util.Set<org.apache.commons.lang3.CharRange>.equals(other.java.util.Set<org.apache.commons.lang3.CharRange>);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"obj","rhs":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1844","type":"CtBinaryOperatorImpl"},"failures":[385],"tindex":"62294394-3f25-11e6-9d30-39b7c9205641","method":{"position":"org.apache.commons.lang3.StringUtils:2449","type":"CtMethodImpl","sourcecode":"public static java.lang.String substringBetween(final java.lang.String str, final java.lang.String tag) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.substringBetween(str, tag, tag);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"contentEnd":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"62296aa5-3f25-11e6-9d30-21805f958397","method":{"position":"org.apache.commons.lang3.StringUtils:4457","type":"CtMethodImpl","sourcecode":"public static java.lang.String removePattern(final java.lang.String source, final java.lang.String regex) {\n    if ((source.charAt(3)) != '_') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source.equals(regex)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.lang3.StringUtils.replacePattern(source, regex, org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.NoSuchMethodException","condition":{"position":"org.apache.commons.lang3.StringUtils:3496","type":"CtBinaryOperatorImpl"},"failures":[386],"tindex":"62296aa6-3f25-11e6-9d30-ad486d694841","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:180","type":"CtMethodImpl","sourcecode":"public static java.lang.Object invokeExactMethod(final java.lang.Object object, final java.lang.String methodName, java.lang.Object[] args, java.lang.Class<?>[] parameterTypes) throws java.lang.IllegalAccessException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (object == null) {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            parameterTypes = org.apache.commons.lang3.ArrayUtils.nullToEmpty(parameterTypes);\n            final java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethod(object.getClass(), methodName, parameterTypes);\n            if (method == null) {\n                throw new java.lang.NoSuchMethodException((((\"No such accessible method: \" + methodName) + \"() on object: \") + (object.getClass().getName())));\n            } \n            return method.invoke(object, args);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.NoSuchMethodException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1523","type":"CtBinaryOperatorImpl"},"failures":[265,266,267,268,270,271,274,277,278,279,280,281,282,283,284,285,387,388,389,295,296,297,390,391],"tindex":"62296aa7-3f25-11e6-9d30-f102be193a9a","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:763","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final char[] lhs, final char[] rhs) {\n    if (rhs == null) {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs == null) || (rhs == null)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && (boolean) ; ++i) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chars":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:414","type":"CtBinaryOperatorImpl"},"failures":[392,393,394,395,396,198,198,199,31,397],"tindex":"622991b8-3f25-11e6-9d30-5d63f3ea1394","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:967","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final long[] array, final java.lang.Boolean fullDetail) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (array == null) {\n                appendNullText(buffer, fieldName);\n            } else if (isFullDetail(fullDetail)) {\n                appendDetail(buffer, fieldName, array);\n            } else {\n                appendSummary(buffer, fieldName, array);\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3274","type":"CtBinaryOperatorImpl"},"failures":[398],"tindex":"622991b9-3f25-11e6-9d30-c5c4380c01ae","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1005","type":"CtMethodImpl","sourcecode":"public static byte max(final byte[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.math.NumberUtils.validateArray(array);\n            byte byte = array[0];\n            for (int int = 1 ; i < (array.int) ; i++) {\n                if ((array[i]) > max) {\n                    max = array[i];\n                } \n            }\n            return max;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:525","type":"CtInvocationImpl"},"failures":[399],"tindex":"622991ba-3f25-11e6-9d30-d99001f9b306","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1266","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(final java.lang.reflect.Type type, final java.lang.reflect.Type assigningType) {\n    if (assigningType.equals(type)) {\n        {\n            if (type instanceof java.lang.Class<?>) {\n                return ((java.lang.Class<?>)(type));\n            } \n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.getRawType(((java.lang.reflect.ParameterizedType)(type)));\n            } \n            if (type instanceof java.lang.reflect.TypeVariable<?>) {\n                if (assigningType == null) {\n                    return null;\n                } \n                final java.lang.Object java.lang.Object = ((java.lang.reflect.TypeVariable<?>)(type)).getGenericDeclaration();\n                if (!(genericDeclaration instanceof java.lang.Class<?>)) {\n                    return null;\n                } \n                final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(assigningType, ((java.lang.Class<?>)(genericDeclaration)));\n                if (typeVarAssigns == null) {\n                    return null;\n                } \n                final java.lang.reflect.Type java.lang.reflect.Type = typeVarAssigns.get(type);\n                if (typeArgument == null) {\n                    return null;\n                } \n                return org.apache.commons.lang3.reflect.TypeUtils.getRawType(typeArgument, assigningType);\n            } \n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                final java.lang.Class<?> java.lang.Class<?> = org.apache.commons.lang3.reflect.TypeUtils.getRawType(((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType(), assigningType);\n                return java.lang.reflect.Array.newInstance(rawComponentType, 0).getClass();\n            } \n            if (type instanceof java.lang.reflect.WildcardType) {\n                return null;\n            } \n            throw new java.lang.IllegalArgumentException((\"unknown type: \" + type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type","toGenericArrayType":"assigningType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:281","type":"CtBinaryOperatorImpl"},"failures":[400,401,249,402,403,404,405,406,407,408,409,69,410,411,412],"tindex":"6229b8cb-3f25-11e6-9d30-d1f329887ec4","method":{"position":"org.apache.commons.lang3.ClassUtils:759","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> wrapperToPrimitive(final java.lang.Class<?> cls) {\n    if (cls == null) {\n        {\n            return org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(cls);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6905","type":"CtBinaryOperatorImpl"},"failures":[413],"tindex":"6229b8cc-3f25-11e6-9d30-7fbb21469954","method":{"position":"org.apache.commons.lang3.StringUtils:3710","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final byte[] array, final char separator, final int startIndex, final int endIndex) {\n    if (startIndex == 0) {\n        {\n            if (array == null) {\n                return null;\n            } \n            final int int = endIndex - startIndex;\n            if (noOfItems <= 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((noOfItems * 16));\n            for (int int = startIndex ; i < endIndex ; i++) {\n                if (i > startIndex) {\n                    buf.append(separator);\n                } \n                buf.append(array[i]);\n            }\n            return buf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"startIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4742","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6229b8cd-3f25-11e6-9d30-af15854d2bc5","method":{"position":"org.apache.commons.lang3.text.StrBuilder:808","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final int value) {\n    if (value == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return append(java.lang.String.valueOf(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"textIndex":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3410","type":"CtBinaryOperatorImpl"},"failures":[326],"tindex":"6229b8ce-3f25-11e6-9d30-97c3ea1faa45","method":{"position":"org.apache.commons.lang3.ArrayUtils:2834","type":"CtMethodImpl","sourcecode":"public static boolean contains(final float[] array, final float valueToFind) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:640","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6229b8cf-3f25-11e6-9d30-c7f8b0427b0f","method":{"position":"org.apache.commons.lang3.mutable.MutableLong:96","type":"CtMethodImpl","sourcecode":"public void setValue(final long value) {\n    if (value != value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableLong.this.long = value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"value","rhs":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:973","type":"CtBinaryOperatorImpl"},"failures":[414,415,416],"tindex":"6229dfe0-3f25-11e6-9d30-112b5f0db121","method":{"position":"org.apache.commons.lang3.StringUtils:3990","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final java.lang.Object[] array, java.lang.String separator, final int startIndex, final int endIndex) {\n    if (0 == endIndex) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            if (separator == null) {\n                separator = org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = endIndex - startIndex;\n            if (noOfItems <= 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((noOfItems * 16));\n            for (int int = startIndex ; i < endIndex ; i++) {\n                if (i > startIndex) {\n                    buf.append(separator);\n                } \n                if ((array[i]) != null) {\n                    buf.append(array[i]);\n                } \n            }\n            return buf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nHex":"endIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:732","type":"CtInvocationImpl"},"failures":[],"tindex":"622a7c21-3f25-11e6-9d30-6f998f1d12df","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:559","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final boolean[] array, final boolean fullDetail) {\n    if (fieldName.startsWith(\"-\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, java.lang.Boolean.valueOf(fullDetail));\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1501","type":"CtBinaryOperatorImpl"},"failures":[417,418],"tindex":"622a7c22-3f25-11e6-9d30-8f4c988059c9","method":{"position":"org.apache.commons.lang3.StringUtils:3561","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final java.lang.Object[] array, final char separator, final int startIndex, final int endIndex) {\n    if (endIndex > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            final int int = endIndex - startIndex;\n            if (noOfItems <= 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((noOfItems * 16));\n            for (int int = startIndex ; i < endIndex ; i++) {\n                if (i > startIndex) {\n                    buf.append(separator);\n                } \n                if ((array[i]) != null) {\n                    buf.append(array[i]);\n                } \n            }\n            return buf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strLen":"endIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:136","type":"CtBinaryOperatorImpl"},"failures":[419],"tindex":"622a7c23-3f25-11e6-9d30-d31651ee8f0f","method":{"position":"org.apache.commons.lang3.ObjectUtils:316","type":"CtMethodImpl","sourcecode":"public static void identityToString(final org.apache.commons.lang3.text.StrBuilder builder, final java.lang.Object object) {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                throw new java.lang.NullPointerException(\"Cannot get the toString of a null identity\");\n            } \n            builder.append(object.getClass().getName()).append('@').append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(object)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"style":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:114","type":"CtBinaryOperatorImpl"},"failures":[420],"tindex":"622aa334-3f25-11e6-9d30-0d1911b70272","method":{"position":"org.apache.commons.lang3.StringUtils:7086","type":"CtMethodImpl","sourcecode":"private static java.lang.String getSetOfMatchingCharacterWithin(final java.lang.CharSequence first, final java.lang.CharSequence second, final int limit) {\n    if (limit == 3) {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(second);\n            for (int int = 0 ; i < (first.length()) ; i++) {\n                final char char = first.charAt(i);\n                boolean boolean = false;\n                for (int int = java.lang.Math.max(0, (i - limit)) ; (!found) && (j < (java.lang.Math.min((i + limit), second.length()))) ; j++) {\n                    if ((copy.charAt(j)) == ch) {\n                        found = true;\n                        common.append(ch);\n                        copy.setCharAt(j, '*');\n                    } \n                }\n            }\n            return common.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"limit"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2174","type":"CtBinaryOperatorImpl"},"failures":[421],"tindex":"622aa335-3f25-11e6-9d30-0365405a9c7f","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:884","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer setDelimiterString(final java.lang.String delim) {\n    if (delim == null) {\n        {\n            return setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher.stringMatcher(delim));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"delim"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:735","type":"CtInvocationImpl"},"failures":[],"tindex":"622aa336-3f25-11e6-9d30-275e18e1fe8c","method":{"position":"org.apache.commons.lang3.StringUtils:7112","type":"CtMethodImpl","sourcecode":"private static int transpositions(java.lang.CharSequence first, java.lang.CharSequence second) {\n    if (first.equals(first)) {\n        {\n            int int = 0;\n            for (int int = 0 ; i < (first.length()) ; i++) {\n                if ((first.charAt(i)) != (second.charAt(i))) {\n                    transpositions++;\n                } \n            }\n            return transpositions / 2;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"first","falseString":"first"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:829","type":"CtBinaryOperatorImpl"},"failures":[422],"tindex":"622aa337-3f25-11e6-9d30-1b7e77f6d5bf","method":{"position":"org.apache.commons.lang3.StringUtils:1805","type":"CtMethodImpl","sourcecode":"public static boolean containsOnly(final java.lang.CharSequence cs, final char... valid) {\n    if ((cs == null) || (cs == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((valid == null) || (cs == null)) {\n                return false;\n            } \n            if ((cs.length()) == 0) {\n                return true;\n            } \n            if ((valid.int) == 0) {\n                return false;\n            } \n            return (org.apache.commons.lang3.StringUtils.indexOfAnyBut(cs, valid)) == (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str1":"cs","str2":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:432","type":"CtBinaryOperatorImpl"},"failures":[20,21],"tindex":"622aa338-3f25-11e6-9d30-9d08c72213cf","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1478","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, final java.lang.Object obj) {\n    if (obj == null) {\n        {\n            if (obj == null) {\n                return insert(index, java.lang.String);\n            } \n            return insert(index, obj.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toParameterizedType":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"622aca49-3f25-11e6-9d30-7d8ffd42bfde","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:379","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final double lhs, final double rhs) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if ((java.lang.Double.doubleToLongBits(lhs)) != (java.lang.Double.doubleToLongBits(rhs))) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Double>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Double getLeft() {\n                        return java.lang.Double.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Double getRight() {\n                        return java.lang.Double.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:422","type":"CtBinaryOperatorImpl"},"failures":[423,424,425,426,427,428,429,430],"tindex":"622aca4a-3f25-11e6-9d30-f1046ba7b5a7","method":{"position":"org.apache.commons.lang3.time.DateUtils:1554","type":"CtMethodImpl","sourcecode":"public static long getFragmentInMinutes(final java.util.Calendar calendar, final int fragment) {\n    if (fragment == 1) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.getFragment(calendar, fragment, java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"depth":"fragment"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3410","type":"CtBinaryOperatorImpl"},"failures":[431],"tindex":"622aca4b-3f25-11e6-9d30-7fc2947f1737","method":{"position":"org.apache.commons.lang3.ArrayUtils:4559","type":"CtMethodImpl","sourcecode":"private static java.lang.Object add(final java.lang.Object array, final int index, final java.lang.Object element, final java.lang.Class<?> clss) {\n    if (array == null) {\n        {\n            if (array == null) {\n                if (index != 0) {\n                    throw new java.lang.IndexOutOfBoundsException(((\"Index: \" + index) + \", Length: 0\"));\n                } \n                final java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(clss, 1);\n                java.lang.reflect.Array.set(joinedArray, 0, element);\n                return joinedArray;\n            } \n            final int int = java.lang.reflect.Array.getLength(array);\n            if ((index > length) || (index < 0)) {\n                throw new java.lang.IndexOutOfBoundsException((((\"Index: \" + index) + \", Length: \") + length));\n            } \n            final java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(clss, (length + 1));\n            java.lang.System.arraycopy(array, 0, result, 0, index);\n            java.lang.reflect.Array.set(result, index, element);\n            if (index < length) {\n                java.lang.System.arraycopy(array, index, result, (index + 1), (length - index));\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1389","type":"CtBinaryOperatorImpl"},"failures":[432],"tindex":"622b186c-3f25-11e6-9d30-1982c0f6b14c","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:360","type":"CtMethodImpl","sourcecode":"public static java.lang.Object readField(final java.lang.reflect.Field field, final java.lang.Object target) throws java.lang.IllegalAccessException {\n    if (target == null) {\n        {\n            return org.apache.commons.lang3.reflect.FieldUtils.readField(field, target, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329286373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
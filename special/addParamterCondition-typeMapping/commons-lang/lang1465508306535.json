{"failureDictionary":{"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson":52,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":226,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":37,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":39,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":33,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":36,"org.apache.commons.lang3.text.StrBuilderTest.testSubstringInt":72,"org.apache.commons.lang3.time.DateUtilsTest.testSetYears":129,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeRuntimeEx":101,"org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitivesNull":257,"org.apache.commons.lang3.LocaleUtilsTest.testLocaleLookupList_LocaleLocale":83,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_charArray":162,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":133,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson":50,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayBoolean":208,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":232,"org.apache.commons.lang3.text.StrTokenizerTest.testReset":161,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":236,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":140,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":7,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultIsExceptionUnknown":112,"org.apache.commons.lang3.text.StrBuilderTest.testGetSetNewLineText":74,"org.apache.commons.lang3.time.DateUtilsTest.testAddMonths":123,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice":4,"org.apache.commons.lang3.EnumUtilsTest.test_processBitVectors":54,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":137,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVEmpty":188,"org.apache.commons.lang3.time.DateUtilsTest.testSetMonths":125,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":150,"org.apache.commons.lang3.LocaleUtilsTest.testToLocale_1Part":85,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":41,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":25,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfLong":69,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":234,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_String":174,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEqualsHashcode":1,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfLongWithStartIndex":70,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":29,"org.apache.commons.lang3.EnumUtilsTest.test_processBitVectors_nullClass":55,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat":2,"org.apache.commons.lang3.CharEncodingTest.testSupported":259,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char":186,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedFormats":5,"org.apache.commons.lang3.text.StrTokenizerTest.testListArray":165,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":141,"org.apache.commons.lang3.math.FractionTest.testMultiply":219,"org.apache.commons.lang3.BitFieldTest.testByte":211,"org.apache.commons.lang3.time.FastDateFormatTest.testDateDefaults":253,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher_int":99,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":32,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char_char":160,"org.apache.commons.lang3.text.FormattableUtilsTest.testDefaultAppend":71,"org.apache.commons.lang3.ValidateTest.testIsInstanceOf":209,"org.apache.commons.lang3.math.FractionTest.testDivide":218,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477":3,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testJavaSerialization":248,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISOMethod":92,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":138,"org.apache.commons.lang3.LocaleUtilsTest.testCountriesByLanguage":80,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":8,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":46,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeEx":106,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":144,"org.apache.commons.lang3.CharEncodingTest.testNotSupported":260,"org.apache.commons.lang3.BooleanUtilsTest.testOr_object_validInput_3items":64,"org.apache.commons.lang3.BooleanUtilsTest.testAnd_object_nullElementInput":57,"org.apache.commons.lang3.ArrayUtilsTest.testContainsDoubleTolerance":53,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":134,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic1":197,"org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetValueDelimiter":224,"org.apache.commons.lang3.BooleanUtilsTest.testOr_object_validInput_2items":63,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":238,"org.apache.commons.lang3.ArrayUtilsTest.testContainsByte":0,"org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetActiveExecutorExternal":113,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendNewLine":73,"org.apache.commons.lang3.CharEncodingTest.testWorksOnJava1_1_8":261,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeNested":104,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic2":198,"org.apache.commons.lang3.ConversionTest.testUuidToByteArray":264,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassOutputChange":164,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic3":199,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":18,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic4":200,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic5":201,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":239,"org.apache.commons.lang3.LocaleUtilsTest.testThreeCharsLocale":81,"org.apache.commons.lang3.CharEncodingTest.testMustBeSupportedJava1_3_1":258,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":149,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":45,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":35,"org.apache.commons.lang3.LocaleUtilsTest.testToLocale_2Part":86,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":148,"org.apache.commons.lang3.LocaleUtilsTest.testConstructor":89,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":15,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":22,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear":142,"org.apache.commons.lang3.ConversionTest.testLongToByteArray":265,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":49,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Iterator":96,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithNullText":229,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetResultObjectUnknown":111,"org.apache.commons.lang3.ArrayUtilsTest.testContains":263,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char_char":190,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":191,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":145,"org.apache.commons.lang3.CharEncodingTest.testWorksOnJava1_2_2":262,"org.apache.commons.lang3.ValidateTest.testIsInstanceOfExceptionMessage":210,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":222,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":17,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNotSupportedException":173,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":136,"org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetInterruptedException":114,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":151,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":21,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":40,"org.apache.commons.lang3.math.IEEE754rUtilsTest.testEnforceExceptions":98,"org.apache.commons.lang3.LocaleUtilsTest.testToLocale_3Part":87,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson":47,"org.apache.commons.lang3.math.FractionTest.testReducedFactory_int_int":212,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":241,"org.apache.commons.lang3.math.FractionTest.testReduce":220,"org.apache.commons.lang3.LocaleUtilsTest.testLanguagesByCountry":84,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsArrayGenericTypes":95,"org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testSetExternalExecutor":115,"org.apache.commons.lang3.text.StrTokenizerTest.testChaining":206,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":131,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":143,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping":233,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeResultsIsSuccessfulFalse":108,"org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer":207,"org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_3items":59,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":48,"org.apache.commons.lang3.BooleanUtilsTest.testAnd_object_validInput_3items":61,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":28,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer":228,"org.apache.commons.lang3.time.DateUtilsTest.testSetHours":128,"org.apache.commons.lang3.LocaleUtilsTest.testLang865":79,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":243,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":23,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":19,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":244,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":31,"org.apache.commons.lang3.text.StrTokenizerTest.testToString":163,"org.apache.commons.lang3.time.DateUtilsTest.testRoundLang346":118,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":16,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer":230,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNull":177,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":158,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeExternalExec":110,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsInstance":221,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":24,"org.apache.commons.lang3.math.FractionTest.testFactory_double":216,"org.apache.commons.lang3.mutable.MutableBooleanTest.testCompareTo":250,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":147,"org.apache.commons.lang3.LocaleUtilsTest.testLang328":78,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Object":231,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":10,"org.apache.commons.lang3.BooleanUtilsTest.testXor_object_nullElementInput":62,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeResultsIsSuccessfulTrue":102,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":152,"org.apache.commons.lang3.LocaleUtilsTest.testLocaleLookupList_Locale":88,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed1":204,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed2":205,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_short_short":93,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":11,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":237,"org.apache.commons.lang3.EnumUtilsTest.test_processBitVector":56,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":235,"org.apache.commons.lang3.BooleanUtilsTest.testAnd_object_validInput_2items":60,"org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_2items":58,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":30,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance":252,"org.apache.commons.lang3.math.FractionTest.testAdd":213,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":130,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty1":155,"org.apache.commons.lang3.text.StrTokenizerTest.testGetContent":202,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty2":156,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_boolean":66,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":227,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":27,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedException":246,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetField":254,"org.apache.commons.lang3.time.DateUtilsTest.testWeekIterator":124,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":38,"org.apache.commons.lang3.BooleanUtilsTest.testOr_object_nullElementInput":65,"org.apache.commons.lang3.math.NumberUtilsTest.testToFloatString":97,"org.apache.commons.lang3.LocaleUtilsTest.testAvailableLocaleSet":75,"org.apache.commons.lang3.time.DateUtilsTest.testMonthIterator":117,"org.apache.commons.lang3.text.StrTokenizerTest.testIteration":159,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset":203,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":14,"org.apache.commons.lang3.text.StrTokenizerTest.testTSVEmpty":175,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":26,"org.apache.commons.lang3.time.DateUtilsTest.testCeil":121,"org.apache.commons.lang3.text.StrTokenizerTest.test8":185,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":146,"org.apache.commons.lang3.time.DateUtilsTest.testRound":120,"org.apache.commons.lang3.text.StrTokenizerTest.test5":182,"org.apache.commons.lang3.text.StrTokenizerTest.test4":181,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":135,"org.apache.commons.lang3.text.StrTokenizerTest.test7":184,"org.apache.commons.lang3.text.StrTokenizerTest.test6":183,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeChildWithExecutor":109,"org.apache.commons.lang3.text.StrTokenizerTest.test1":178,"org.apache.commons.lang3.LocaleUtilsTest.testParseAllLocales":82,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String":176,"org.apache.commons.lang3.text.StrTokenizerTest.test3":180,"org.apache.commons.lang3.text.StrTokenizerTest.test2":179,"org.apache.commons.lang3.StringUtilsTest.testCaseFunctions":67,"org.apache.commons.lang3.time.DateUtilsTest.testSetDays":126,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim1":153,"org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitiveNull":256,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim2":154,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultInitializerNamesModify":100,"org.apache.commons.lang3.math.FractionTest.testSubtract":215,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":13,"org.apache.commons.lang3.LocaleUtilsTest.testIsAvailableLocale":76,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testAddContextValue":247,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":20,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsArrayTypeClasses":94,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetInitializerUnknown":107,"org.apache.commons.lang3.math.FractionTest.testPow":214,"org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_Object":116,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetExceptionUnknown":103,"org.apache.commons.lang3.time.DateUtilsTest.testAddMilliseconds":127,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1":166,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char":157,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3":168,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2":167,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5":170,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4":169,"org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitives":255,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7":172,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":34,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6":171,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":12,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":139,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1":196,"org.apache.commons.lang3.LocaleUtilsTest.testAvailableLocaleList":77,"org.apache.commons.lang3.math.FractionTest.testFactory_String_double":217,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":42,"org.apache.commons.lang3.time.DateUtilsTest.testTruncateLang59":122,"org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables":223,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassInputChange":187,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed3":194,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed2":193,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeTempExec":105,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4":195,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats":6,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed1":192,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray":189,"org.apache.commons.lang3.time.DateUtilsTest.testTruncate":119,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":43,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson":51,"org.apache.commons.lang3.mutable.MutableBooleanTest.testGetSet":251,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":132,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayInt":68,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":242,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstring_StringIntInt":225,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testSetContextValue":249,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":9,"org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_String":245,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO":91,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":44,"org.apache.commons.lang3.time.DateUtilsTest.testSetSeconds":90,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":240},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3821","type":"CtBinaryOperatorImpl","sourcecode":"array1 == null"},"failures":[0],"tindex":"7fcacbcb-2e8a-11e6-a840-4b25e392d7ed","method":{"position":"org.apache.commons.lang3.ArrayUtils:2507","type":"CtMethodImpl","sourcecode":"public static boolean contains(final byte[] array, final byte valueToFind) {\n    if (array == null) {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:173","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[1,2,3,4,5,6],"tindex":"7fcbb62c-2e8a-11e6-a840-516eb3243be5","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:404","type":"CtMethodImpl","sourcecode":"private java.lang.String insertFormats(final java.lang.String pattern, final java.util.ArrayList<java.lang.String> customPatterns) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(pattern)) {\n        {\n            if (!(containsElements(customPatterns))) {\n                return pattern;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((pattern.length()) * 2));\n            final java.text.ParsePosition java.text.ParsePosition = new java.text.ParsePosition(0);\n            int int = -1;\n            int int = 0;\n            while ((pos.getIndex()) < (pattern.length())) {\n                final char char = pattern.charAt(pos.getIndex());\n                switch (c) {\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        appendQuotedString(pattern, pos, sb, false);\n                        break;\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        depth++;\n                        sb.append(org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char).append(readArgumentIndex(pattern, next(pos)));\n                        if (depth == 1) {\n                            fe++;\n                            final java.lang.String java.lang.String = customPatterns.get(fe);\n                            if (customPattern != null) {\n                                sb.append(org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char).append(customPattern);\n                            } \n                        } \n                        break;\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        depth--;\n                    default :\n                        sb.append(c);\n                        next(pos);\n                }\n            }\n            return sb.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"pattern"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:275","type":"CtBinaryOperatorImpl","sourcecode":"(sub.length()) == 1"},"failures":[7,8,9,10,10,11,12,13,14,15,15,16,16,17,18,19,19,20,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"tindex":"7fcbdd3d-2e8a-11e6-a840-81cebf9ff998","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:857","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final boolean value) {\n    if ((fieldName.length()) == 1) {\n        {\n            buffer.append(value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sub":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:898","type":"CtBinaryOperatorImpl","sourcecode":"rhs == null"},"failures":[53],"tindex":"7fcc044e-2e8a-11e6-a840-6996ebd483b8","method":{"position":"org.apache.commons.lang3.ArrayUtils:2731","type":"CtMethodImpl","sourcecode":"public static boolean contains(final double[] array, final double valueToFind, final double tolerance) {\n    if (array == null) {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind, 0, tolerance)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rhs":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1672","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"7fcc044f-2e8a-11e6-a840-2100fdd2429b","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1611","type":"CtMethodImpl","sourcecode":"private static boolean equals(java.lang.reflect.GenericArrayType a, java.lang.reflect.Type t) {\n    if (t instanceof java.lang.reflect.GenericArrayType) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (t instanceof java.lang.reflect.GenericArrayType) && (org.apache.commons.lang3.reflect.TypeUtils.equals(a.getGenericComponentType(), ((java.lang.reflect.GenericArrayType)(t)).getGenericComponentType()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"t"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:698","type":"CtBinaryOperatorImpl","sourcecode":"rhs == null"},"failures":[54,55,56],"tindex":"7fcc5270-2e8a-11e6-a840-8b4c1d99beb6","method":{"position":"org.apache.commons.lang3.EnumUtils:267","type":"CtMethodImpl","sourcecode":"public static <E extends java.lang.Enum<E>>java.util.EnumSet<E> processBitVectors(final java.lang.Class<E> enumClass, final long... values) {\n    if (values == null) {\n        {\n            final java.util.EnumSet<E> java.util.EnumSet<E> = java.util.EnumSet.noneOf(org.apache.commons.lang3.EnumUtils.asEnum(enumClass));\n            long[] long[] = org.apache.commons.lang3.ArrayUtils.clone(org.apache.commons.lang3.Validate.notNull(values));\n            org.apache.commons.lang3.ArrayUtils.reverse(lvalues);\n            for (final E E : enumClass.getEnumConstants()) {\n                final int int = (constant.ordinal()) / (java.lang.Long.java.lang.Long.int);\n                if ((block < (lvalues.int)) && (((lvalues[block]) & (1 << ((constant.ordinal()) % (java.lang.Long.java.lang.Long.int)))) != 0)) {\n                    results.add(constant);\n                } \n            }\n            return results;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rhs":"values"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:1074","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[57,58,59,60,61,62,63,64,65,66],"tindex":"7fcca091-2e8a-11e6-a840-c98362be79c4","method":{"position":"org.apache.commons.lang3.ArrayUtils:3433","type":"CtMethodImpl","sourcecode":"public static boolean[] toPrimitive(final java.lang.Boolean[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.boolean[];\n            } \n            final boolean[] boolean[] = new boolean[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = array[i].booleanValue();\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2805","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[67],"tindex":"7fcca092-2e8a-11e6-a840-111f4984ba07","method":{"position":"org.apache.commons.lang3.StringUtils:5610","type":"CtMethodImpl","sourcecode":"public static java.lang.String upperCase(final java.lang.String str, final java.util.Locale locale) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return str.toUpperCase(locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1244","type":"CtBinaryOperatorImpl","sourcecode":"c > a"},"failures":[],"tindex":"7fcca093-2e8a-11e6-a840-095bcbc677d6","method":{"position":"org.apache.commons.lang3.mutable.MutableShort:96","type":"CtMethodImpl","sourcecode":"public void setValue(final short value) {\n    if (value > value) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableShort.this.short = value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"value","c":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4945","type":"CtBinaryOperatorImpl","sourcecode":"start < 0"},"failures":[68],"tindex":"7fccc7a4-2e8a-11e6-a840-3f1609da9378","method":{"position":"org.apache.commons.lang3.ArrayUtils:954","type":"CtMethodImpl","sourcecode":"public static int[] subarray(final int[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (startIndexInclusive < 0) {\n        {\n            if (array == null) {\n                return null;\n            } \n            if (startIndexInclusive < 0) {\n                startIndexInclusive = 0;\n            } \n            if (endIndexExclusive > (array.int)) {\n                endIndexExclusive = array.int;\n            } \n            final int int = endIndexExclusive - startIndexInclusive;\n            if (newSize <= 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int[];\n            } \n            final int[] int[] = new int[newSize];\n            java.lang.System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n            return subarray;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"startIndexInclusive"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:382","type":"CtBinaryOperatorImpl","sourcecode":"depth == 0"},"failures":[69,70],"tindex":"7fcceeb5-2e8a-11e6-a840-7169e9ccee7c","method":{"position":"org.apache.commons.lang3.ArrayUtils:2064","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final long[] array, final long valueToFind, int startIndex) {\n    if (startIndex == 0) {\n        {\n            if (array == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } else if (startIndex >= (array.int)) {\n                startIndex = (array.int) - 1;\n            } \n            for (int int = startIndex ; i >= 0 ; i--) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"depth":"startIndex"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1117","type":"CtBinaryOperatorImpl","sourcecode":"b < a"},"failures":[71],"tindex":"7fcceeb6-2e8a-11e6-a840-65cd58403f93","method":{"position":"org.apache.commons.lang3.text.FormattableUtils:81","type":"CtMethodImpl","sourcecode":"public static java.util.Formatter append(final java.lang.CharSequence seq, final java.util.Formatter formatter, final int flags, final int width, final int precision) {\n    if (precision < width) {\n        {\n            return org.apache.commons.lang3.text.FormattableUtils.append(seq, formatter, flags, width, precision, ' ', null);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"width","b":"precision"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1552","type":"CtBinaryOperatorImpl","sourcecode":"0 == nBools"},"failures":[72],"tindex":"7fcd15c7-2e8a-11e6-a840-0b98675a3348","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2145","type":"CtMethodImpl","sourcecode":"public java.lang.String substring(final int start) {\n    if (0 == start) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return substring(start, int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"start"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomUtils:89","type":"CtBinaryOperatorImpl","sourcecode":"startInclusive == endExclusive"},"failures":[],"tindex":"7fcd15c8-2e8a-11e6-a840-a5f297dffc01","method":{"position":"org.apache.commons.lang3.time.DateUtils:460","type":"CtMethodImpl","sourcecode":"public static java.util.Date addHours(final java.util.Date date, final int amount) {\n    if (amount == amount) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.add(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startInclusive":"amount","endExclusive":"amount"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2119","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[73,74],"tindex":"7fcd15c9-2e8a-11e6-a840-bd013cc96773","method":{"position":"org.apache.commons.lang3.text.StrBuilder:151","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder setNewLineText(final java.lang.String newLine) {\n    if (newLine == null) {\n        {\n            org.apache.commons.lang3.text.StrBuilder.this.java.lang.String = newLine;\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"newLine"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDateParser:119","type":"CtInvocationImpl","sourcecode":"locale.equals(org.apache.commons.lang3.time.FastDateParser.JAPANESE_IMPERIAL)"},"failures":[75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"tindex":"7fcd3cda-2e8a-11e6-a840-c95b76aa43e3","method":{"position":"org.apache.commons.lang3.LocaleUtils:246","type":"CtMethodImpl","sourcecode":"public static boolean isAvailableLocale(final java.util.Locale locale) {\n    if (locale.equals(locale)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.LocaleUtils.availableLocaleList().contains(locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"locale":"locale","org.apache.commons.lang3.time.FastDateParser.JAPANESE_IMPERIAL":"locale"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1239","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[90],"tindex":"7fcd3cdb-2e8a-11e6-a840-0181e3c6b894","method":{"position":"org.apache.commons.lang3.time.DateUtils:614","type":"CtMethodImpl","sourcecode":"public static java.util.Date setSeconds(final java.util.Date date, final int amount) {\n    if (amount > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.set(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"amount"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:509","type":"CtVariableReadImpl","sourcecode":"detail"},"failures":[91,92],"tindex":"7fcd3cdc-2e8a-11e6-a840-abe9df97867a","method":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:270","type":"CtMethodImpl","sourcecode":"public static java.lang.String formatPeriod(final long startMillis, final long endMillis, final java.lang.String format, final boolean padWithZeros, final java.util.TimeZone timezone) {\n    if (format == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (padWithZeros) {\n                {\n                    final org.apache.commons.lang3.time.DurationFormatUtils.Token[] org.apache.commons.lang3.time.DurationFormatUtils.Token[] = org.apache.commons.lang3.time.DurationFormatUtils.lexx(format);\n                    final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance(timezone);\n                    start.setTime(new java.util.Date(startMillis));\n                    final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance(timezone);\n                    end.setTime(new java.util.Date(endMillis));\n                    int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                    int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                    int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                    int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                    int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                    int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                    int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                    while (milliseconds < 0) {\n                        milliseconds += 1000;\n                        seconds -= 1;\n                    }\n                    while (seconds < 0) {\n                        seconds += 60;\n                        minutes -= 1;\n                    }\n                    while (minutes < 0) {\n                        minutes += 60;\n                        hours -= 1;\n                    }\n                    while (hours < 0) {\n                        hours += 24;\n                        days -= 1;\n                    }\n                    if (org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object)) {\n                        while (days < 0) {\n                            days += start.getActualMaximum(java.util.Calendar.java.util.Calendar.int);\n                            months -= 1;\n                            start.add(java.util.Calendar.java.util.Calendar.int, 1);\n                        }\n                        while (months < 0) {\n                            months += 12;\n                            years -= 1;\n                        }\n                        if ((!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) && (years != 0)) {\n                            while (years != 0) {\n                                months += 12 * years;\n                                years = 0;\n                            }\n                        } \n                    } else {\n                        if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) {\n                            int int = end.get(java.util.Calendar.java.util.Calendar.int);\n                            if (months < 0) {\n                                target -= 1;\n                            } \n                            while ((start.get(java.util.Calendar.java.util.Calendar.int)) != target) {\n                                days += (start.getActualMaximum(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                                if (((start instanceof java.util.GregorianCalendar) && ((start.get(java.util.Calendar.java.util.Calendar.int)) == (java.util.Calendar.java.util.Calendar.int))) && ((start.get(java.util.Calendar.java.util.Calendar.int)) == 29)) {\n                                    days += 1;\n                                } \n                                start.add(java.util.Calendar.java.util.Calendar.int, 1);\n                                days += start.get(java.util.Calendar.java.util.Calendar.int);\n                            }\n                            years = 0;\n                        } \n                        while ((start.get(java.util.Calendar.java.util.Calendar.int)) != (end.get(java.util.Calendar.java.util.Calendar.int))) {\n                            days += start.getActualMaximum(java.util.Calendar.java.util.Calendar.int);\n                            start.add(java.util.Calendar.java.util.Calendar.int, 1);\n                        }\n                        months = 0;\n                        while (days < 0) {\n                            days += start.getActualMaximum(java.util.Calendar.java.util.Calendar.int);\n                            months -= 1;\n                            start.add(java.util.Calendar.java.util.Calendar.int, 1);\n                        }\n                    }\n                    if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) {\n                        hours += 24 * days;\n                        days = 0;\n                    } \n                    if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) {\n                        minutes += 60 * hours;\n                        hours = 0;\n                    } \n                    if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) {\n                        seconds += 60 * minutes;\n                        minutes = 0;\n                    } \n                    if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) {\n                        milliseconds += 1000 * seconds;\n                        seconds = 0;\n                    } \n                    return org.apache.commons.lang3.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"detail":"padWithZeros"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3162","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[93],"tindex":"7fcd8afd-2e8a-11e6-a840-eb9ba65f4254","method":{"position":"org.apache.commons.lang3.ArrayUtils:3183","type":"CtMethodImpl","sourcecode":"public static short[] toPrimitive(final java.lang.Short[] array, final short valueForNull) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.short[];\n            } \n            final short[] short[] = new short[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Short java.lang.Short = array[i];\n                result[i] = b == null ? valueForNull : b.shortValue();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1383","type":"CtBinaryOperatorImpl","sourcecode":"unrolled != null"},"failures":[94,95],"tindex":"7fcd8afe-2e8a-11e6-a840-71f7de847e12","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1335","type":"CtMethodImpl","sourcecode":"public static boolean isArrayType(final java.lang.reflect.Type type) {\n    if (type != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (type instanceof java.lang.reflect.GenericArrayType) || ((type instanceof java.lang.Class<?>) && (((java.lang.Class<?>)(type)).isArray()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unrolled":"type"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1180","type":"CtBinaryOperatorImpl","sourcecode":"it != null"},"failures":[96],"tindex":"7fcdb20f-2e8a-11e6-a840-e529d6f5dd22","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1111","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendAll(final java.util.Iterator<?> it) {\n    if (it != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (it != null) {\n                while (it.hasNext()) {\n                    append(it.next());\n                }\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"it":"it"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:297","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(className)"},"failures":[],"tindex":"7fcdb210-2e8a-11e6-a840-35b1e8b9fe1b","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:494","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date parse(final java.lang.String source, final java.text.ParsePosition pos) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(source)) {\n        {\n            return org.apache.commons.lang3.time.FastDateParser.parse(source, pos);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"source"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4835","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[97],"tindex":"7fcf37b1-2e8a-11e6-a840-efabfde35eeb","method":{"position":"org.apache.commons.lang3.math.NumberUtils:221","type":"CtMethodImpl","sourcecode":"public static float toFloat(final java.lang.String str, final float defaultValue) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return defaultValue;\n            } \n            try {\n                return java.lang.Float.parseFloat(str);\n            } catch (final java.lang.NumberFormatException nfe) {\n                return defaultValue;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3496","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[98],"tindex":"7fcf37b2-2e8a-11e6-a840-ddeafc6d9b6b","method":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:62","type":"CtMethodImpl","sourcecode":"public static float min(final float[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                throw new java.lang.IllegalArgumentException(\"The Array must not be null\");\n            } else if ((array.int) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Array cannot be empty.\");\n            } \n            float float = array[0];\n            for (int int = 1 ; i < (array.int) ; i++) {\n                min = org.apache.commons.lang3.math.IEEE754rUtils.min(array[i], min);\n            }\n            return min;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2332","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[],"tindex":"7fcf37b3-2e8a-11e6-a840-212c1170badf","method":{"position":"org.apache.commons.lang3.SystemUtils:1317","type":"CtMethodImpl","sourcecode":"private static boolean getOSMatches(final java.lang.String osNamePrefix, final java.lang.String osVersionPrefix) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(osVersionPrefix)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.org.apache.commons.lang3.SystemUtils.java.lang.String, org.apache.commons.lang3.SystemUtils.org.apache.commons.lang3.SystemUtils.java.lang.String, osNamePrefix, osVersionPrefix);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"osVersionPrefix"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:378","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[99],"tindex":"7fcf5ec4-2e8a-11e6-a840-9339150208cc","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2391","type":"CtMethodImpl","sourcecode":"public int indexOf(final org.apache.commons.lang3.text.StrMatcher matcher, int startIndex) {\n    if (startIndex == 0) {\n        {\n            startIndex = startIndex < 0 ? 0 : startIndex;\n            if ((matcher == null) || (startIndex >= (int))) {\n                return -1;\n            } \n            final int int = int;\n            final char[] char[] = char[];\n            for (int int = startIndex ; i < len ; i++) {\n                if ((matcher.isMatch(buf, i, startIndex, len)) > 0) {\n                    return i;\n                } \n            }\n            return -1;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"startIndex"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.TimedSemaphore:211","type":"CtBinaryOperatorImpl","sourcecode":"service != null"},"failures":[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115],"tindex":"7fcf5ec5-2e8a-11e6-a840-0f4906936fe5","method":{"position":"org.apache.commons.lang3.concurrent.BackgroundInitializer:290","type":"CtMethodImpl","sourcecode":"private java.util.concurrent.Callable<T> createTask(final java.util.concurrent.ExecutorService execDestroy) {\n    if (execDestroy != null) {\n        {\n            return new InitializationTask(execDestroy);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"service":"execDestroy"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6071","type":"CtBinaryOperatorImpl","sourcecode":"cs == null"},"failures":[116],"tindex":"7fcf5ec6-2e8a-11e6-a840-89dfc3e76ce0","method":{"position":"org.apache.commons.lang3.ClassUtils:1057","type":"CtMethodImpl","sourcecode":"public static java.lang.String getPackageCanonicalName(final java.lang.Object object, final java.lang.String valueIfNull) {\n    if (object == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                return valueIfNull;\n            } \n            return org.apache.commons.lang3.ClassUtils.getPackageCanonicalName(object.getClass().getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"object"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:113","type":"CtBinaryOperatorImpl","sourcecode":"initialCapacity <= 0"},"failures":[117,118,119,120,121,122,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151],"tindex":"7fcf85d7-2e8a-11e6-a840-05eef1aabed0","method":{"position":"org.apache.commons.lang3.time.DateUtils:957","type":"CtMethodImpl","sourcecode":"private static void modify(final java.util.Calendar val, final int field, final int modType) {\n    if (field <= 0) {\n        {\n            if ((val.get(java.util.Calendar.java.util.Calendar.int)) > 280000000) {\n                throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n            } \n            if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                return ;\n            } \n            final java.util.Date java.util.Date = val.getTime();\n            long long = date.getTime();\n            boolean boolean = false;\n            final int int = val.get(java.util.Calendar.java.util.Calendar.int);\n            if (((org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int) == modType) || (millisecs < 500)) {\n                time = time - millisecs;\n            } \n            if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                done = true;\n            } \n            final int int = val.get(java.util.Calendar.java.util.Calendar.int);\n            if ((!done) && (((org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int) == modType) || (seconds < 30))) {\n                time = time - (seconds * 1000L);\n            } \n            if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                done = true;\n            } \n            final int int = val.get(java.util.Calendar.java.util.Calendar.int);\n            if ((!done) && (((org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int) == modType) || (minutes < 30))) {\n                time = time - (minutes * 60000L);\n            } \n            if ((date.getTime()) != time) {\n                date.setTime(time);\n                val.setTime(date);\n            } \n            boolean boolean = false;\n            for (final int[] int[] : org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int[][]) {\n                for (final int int : aField) {\n                    if (element == field) {\n                        if ((modType == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) || ((modType == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) && roundUp)) {\n                            if (field == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) {\n                                if ((val.get(java.util.Calendar.java.util.Calendar.int)) == 1) {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 15);\n                                } else {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, (-15));\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 1);\n                                }\n                            } else if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                                if ((val.get(java.util.Calendar.java.util.Calendar.int)) == 0) {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 12);\n                                } else {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, (-12));\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 1);\n                                }\n                            } else {\n                                val.add(aField[0], 1);\n                            }\n                        } \n                        return ;\n                    } \n                }\n                int int = 0;\n                boolean boolean = false;\n                switch (field) {\n                    case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                        if ((aField[0]) == (java.util.Calendar.java.util.Calendar.int)) {\n                            offset = (val.get(java.util.Calendar.java.util.Calendar.int)) - 1;\n                            if (offset >= 15) {\n                                offset -= 15;\n                            } \n                            roundUp = offset > 7;\n                            offsetSet = true;\n                        } \n                        break;\n                    case java.util.Calendar.java.util.Calendar.int :\n                        if ((aField[0]) == (java.util.Calendar.java.util.Calendar.int)) {\n                            offset = val.get(java.util.Calendar.java.util.Calendar.int);\n                            if (offset >= 12) {\n                                offset -= 12;\n                            } \n                            roundUp = offset >= 6;\n                            offsetSet = true;\n                        } \n                        break;\n                    default :\n                        break;\n                }\n                if (!offsetSet) {\n                    final int int = val.getActualMinimum(aField[0]);\n                    final int int = val.getActualMaximum(aField[0]);\n                    offset = (val.get(aField[0])) - min;\n                    roundUp = offset > ((max - min) / 2);\n                } \n                if (offset != 0) {\n                    val.set(aField[0], ((val.get(aField[0])) - offset));\n                } \n            }\n            throw new java.lang.IllegalArgumentException(((\"The field \" + field) + \" is not supported\"));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"initialCapacity":"field"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1436","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"7fcface8-2e8a-11e6-a840-c12991139abd","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1095","type":"CtMethodImpl","sourcecode":"public static boolean isInstance(final java.lang.Object value, final java.lang.reflect.Type type) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type == null) {\n                return false;\n            } \n            return value == null ? (!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive())) : org.apache.commons.lang3.reflect.TypeUtils.isAssignable(value.getClass(), type, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5179","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || (separator == null)"},"failures":[119,135,136,138,143,144,145,147,148,149,150,151],"tindex":"7fcface9-2e8a-11e6-a840-d53963444f33","method":{"position":"org.apache.commons.lang3.time.DateUtils:853","type":"CtMethodImpl","sourcecode":"public static java.util.Date truncate(final java.lang.Object date, final int field) {\n    if ((date == null) || (date == null)) {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            if (date instanceof java.util.Date) {\n                return org.apache.commons.lang3.time.DateUtils.truncate(((java.util.Date)(date)), field);\n            } else if (date instanceof java.util.Calendar) {\n                return org.apache.commons.lang3.time.DateUtils.truncate(((java.util.Calendar)(date)), field).getTime();\n            } else {\n                throw new java.lang.ClassCastException((\"Could not truncate \" + date));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"date","separator":"date"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1368","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable<?>"},"failures":[],"tindex":"7fcfd3fa-2e8a-11e6-a840-378a51d0fd66","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:588","type":"CtMethodImpl","sourcecode":"private static boolean isAssignable(final java.lang.reflect.Type type, final java.lang.reflect.WildcardType toWildcardType, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeVarAssigns) {\n    if (type instanceof java.lang.reflect.TypeVariable<?>) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type == null) {\n                return true;\n            } \n            if (toWildcardType == null) {\n                return false;\n            } \n            if (toWildcardType.equals(type)) {\n                return true;\n            } \n            final java.lang.reflect.Type[] java.lang.reflect.Type[] = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(toWildcardType);\n            final java.lang.reflect.Type[] java.lang.reflect.Type[] = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(toWildcardType);\n            if (type instanceof java.lang.reflect.WildcardType) {\n                final java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n                final java.lang.reflect.Type[] java.lang.reflect.Type[] = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType);\n                final java.lang.reflect.Type[] java.lang.reflect.Type[] = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType);\n                for (java.lang.reflect.Type java.lang.reflect.Type : toUpperBounds) {\n                    toBound = org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(toBound, typeVarAssigns);\n                    for (final java.lang.reflect.Type java.lang.reflect.Type : upperBounds) {\n                        if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(bound, toBound, typeVarAssigns))) {\n                            return false;\n                        } \n                    }\n                }\n                for (java.lang.reflect.Type java.lang.reflect.Type : toLowerBounds) {\n                    toBound = org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(toBound, typeVarAssigns);\n                    for (final java.lang.reflect.Type java.lang.reflect.Type : lowerBounds) {\n                        if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(toBound, bound, typeVarAssigns))) {\n                            return false;\n                        } \n                    }\n                }\n                return true;\n            } \n            for (final java.lang.reflect.Type java.lang.reflect.Type : toUpperBounds) {\n                if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type, org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(toBound, typeVarAssigns), typeVarAssigns))) {\n                    return false;\n                } \n            }\n            for (final java.lang.reflect.Type java.lang.reflect.Type : toLowerBounds) {\n                if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(toBound, typeVarAssigns), type, typeVarAssigns))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:361","type":"CtFieldReadImpl","sourcecode":"fieldSeparatorAtStart"},"failures":[152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207],"tindex":"7fcfd3fb-2e8a-11e6-a840-d1520dc63134","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:1048","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer setIgnoreEmptyTokens(final boolean ignoreEmptyTokens) {\n    if (ignoreEmptyTokens) {\n        {\n            org.apache.commons.lang3.text.StrTokenizer.this.boolean = ignoreEmptyTokens;\n            return org.apache.commons.lang3.text.StrTokenizer.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldSeparatorAtStart":"ignoreEmptyTokens"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2204","type":"CtBinaryOperatorImpl","sourcecode":"length >= (size)"},"failures":[],"tindex":"7fcffb0c-2e8a-11e6-a840-0f2733d62adc","method":{"position":"org.apache.commons.lang3.Conversion:405","type":"CtMethodImpl","sourcecode":"public static char binaryToHexDigitMsb0_4bits(final boolean[] src, final int srcPos) {\n    if (srcPos >= srcPos) {\n        {\n            if ((src.int) > 8) {\n                throw new java.lang.IllegalArgumentException((\"src.length>8: src.length=\" + (src.int)));\n            } \n            if (((src.int) - srcPos) < 4) {\n                throw new java.lang.IllegalArgumentException((((\"src.length-srcPos<4: src.length=\" + (src.int)) + \", srcPos=\") + srcPos));\n            } \n            if (src[(srcPos + 3)]) {\n                if (src[(srcPos + 2)]) {\n                    if (src[(srcPos + 1)]) {\n                        if (src[srcPos]) {\n                            return 'f';\n                        } else {\n                            return '7';\n                        }\n                    } else {\n                        if (src[srcPos]) {\n                            return 'b';\n                        } else {\n                            return '3';\n                        }\n                    }\n                } else {\n                    if (src[(srcPos + 1)]) {\n                        if (src[srcPos]) {\n                            return 'd';\n                        } else {\n                            return '5';\n                        }\n                    } else {\n                        if (src[srcPos]) {\n                            return '9';\n                        } else {\n                            return '1';\n                        }\n                    }\n                }\n            } else {\n                if (src[(srcPos + 2)]) {\n                    if (src[(srcPos + 1)]) {\n                        if (src[srcPos]) {\n                            return 'e';\n                        } else {\n                            return '6';\n                        }\n                    } else {\n                        if (src[srcPos]) {\n                            return 'a';\n                        } else {\n                            return '2';\n                        }\n                    }\n                } else {\n                    if (src[(srcPos + 1)]) {\n                        if (src[srcPos]) {\n                            return 'c';\n                        } else {\n                            return '4';\n                        }\n                    } else {\n                        if (src[srcPos]) {\n                            return '8';\n                        } else {\n                            return '0';\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"srcPos","length":"srcPos"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:877","type":"CtVariableReadImpl","sourcecode":"top"},"failures":[208],"tindex":"7fd15a9d-2e8a-11e6-a840-619e475197f8","method":{"position":"org.apache.commons.lang3.ArrayUtils:4043","type":"CtMethodImpl","sourcecode":"public static boolean[] add(final boolean[] array, final boolean element) {\n    if (element) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean[] boolean[] = ((boolean[])(org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(array, java.lang.Boolean.java.lang.Boolean.java.lang.Class<java.lang.Boolean>)));\n            newArray[((newArray.int) - 1)] = element;\n            return newArray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"top":"element"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7203","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || (prefix == null)"},"failures":[209,210],"tindex":"7fd15a9e-2e8a-11e6-a840-c7196a383240","method":{"position":"org.apache.commons.lang3.Validate:1174","type":"CtMethodImpl","sourcecode":"public static void isInstanceOf(final java.lang.Class<?> type, final java.lang.Object obj) {\n    if ((obj == null) || (obj == null)) {\n        {\n            if ((type.isInstance(obj)) == false) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, type.getName(), (obj == null ? \"null\" : obj.getClass().getName())));\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"obj","prefix":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:105","type":"CtBinaryOperatorImpl","sourcecode":"expression == false"},"failures":[211],"tindex":"7fd181af-2e8a-11e6-a840-2beab9cc2717","method":{"position":"org.apache.commons.lang3.BitField:279","type":"CtMethodImpl","sourcecode":"public byte setByteBoolean(final byte holder, final boolean flag) {\n    if (flag == false) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return flag ? setByte(holder) : clearByte(holder);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"expression":"flag"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:220","type":"CtBinaryOperatorImpl","sourcecode":"lhs != rhs"},"failures":[211],"tindex":"7fd181b0-2e8a-11e6-a840-cb63cbee1f65","method":{"position":"org.apache.commons.lang3.BitField:240","type":"CtMethodImpl","sourcecode":"public byte setByte(final byte holder) {\n    if (holder != holder) {\n        {\n            return ((byte)(set(holder)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"holder","rhs":"holder"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:221","type":"CtInvocationImpl","sourcecode":"java.lang.Double.isNaN(a)"},"failures":[],"tindex":"7fd181b1-2e8a-11e6-a840-69ee76df9bec","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1174","type":"CtMethodImpl","sourcecode":"public static double min(final double a, final double b, final double c) {\n    if (java.lang.Double.isNaN(b)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.Math.min(java.lang.Math.min(a, b), c);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5464","type":"CtBinaryOperatorImpl","sourcecode":"found < 0"},"failures":[212,213,214,215,216,217,218,219,220],"tindex":"7fd181b2-2e8a-11e6-a840-5d3e770bb570","method":{"position":"org.apache.commons.lang3.math.Fraction:576","type":"CtMethodImpl","sourcecode":"private static int greatestCommonDivisor(int u, int v) {\n    if (u < 0) {\n        {\n            if ((u == 0) || (v == 0)) {\n                if ((u == (java.lang.Integer.java.lang.Integer.int)) || (v == (java.lang.Integer.java.lang.Integer.int))) {\n                    throw new java.lang.ArithmeticException(\"overflow: gcd is 2^31\");\n                } \n                return (java.lang.Math.abs(u)) + (java.lang.Math.abs(v));\n            } \n            if (((java.lang.Math.abs(u)) == 1) || ((java.lang.Math.abs(v)) == 1)) {\n                return 1;\n            } \n            if (u > 0) {\n                u = -u;\n            } \n            if (v > 0) {\n                v = -v;\n            } \n            int int = 0;\n            while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {\n                u /= 2;\n                v /= 2;\n                k++;\n            }\n            if (k == 31) {\n                throw new java.lang.ArithmeticException(\"overflow: gcd is 2^31\");\n            } \n            int int = (u & 1) == 1 ? v : -(u / 2);\n            do {\n                while ((t & 1) == 0) {\n                    t /= 2;\n                }\n                if (t > 0) {\n                    u = -t;\n                } else {\n                    v = t;\n                }\n                t = (v - u) / 2;\n            } while (t != 0 );\n            return (-u) * (1 << k);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"found":"u"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:674","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[],"tindex":"7fd1a8c3-2e8a-11e6-a840-7d381e9c6353","method":{"position":"org.apache.commons.lang3.exception.ContextedRuntimeException:190","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic org.apache.commons.lang3.exception.ContextedRuntimeException setContextValue(final java.lang.String label, final java.lang.Object value) {\n    if (value == value) {\n        {\n            org.apache.commons.lang3.exception.ExceptionContext.setContextValue(label, value);\n            return org.apache.commons.lang3.exception.ContextedRuntimeException.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"value","rhs":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1443","type":"CtBinaryOperatorImpl","sourcecode":"(dstPos + i) == append"},"failures":[],"tindex":"7fd1a8c4-2e8a-11e6-a840-7ff71f3017f4","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:798","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final void appendTo(final java.lang.StringBuffer buffer, final int value) {\n    if ((value + value) == value) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value < 10) {\n                buffer.append(((char)(value + '0')));\n            } else {\n                buffer.append(((char)((value / 10) + '0')));\n                buffer.append(((char)((value % 10) + '0')));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"value","i":"value","append":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:426","type":"CtBinaryOperatorImpl","sourcecode":"type == null"},"failures":[221,222,223],"tindex":"7fd1a8c5-2e8a-11e6-a840-39f578dd022e","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:324","type":"CtMethodImpl","sourcecode":"private static boolean isAssignable(final java.lang.reflect.Type type, final java.lang.reflect.Type toType, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeVarAssigns) {\n    if (type == null) {\n        {\n            if ((toType == null) || (toType instanceof java.lang.Class<?>)) {\n                return org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type, ((java.lang.Class<?>)(toType)));\n            } \n            if (toType instanceof java.lang.reflect.ParameterizedType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type, ((java.lang.reflect.ParameterizedType)(toType)), typeVarAssigns);\n            } \n            if (toType instanceof java.lang.reflect.GenericArrayType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type, ((java.lang.reflect.GenericArrayType)(toType)), typeVarAssigns);\n            } \n            if (toType instanceof java.lang.reflect.WildcardType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type, ((java.lang.reflect.WildcardType)(toType)), typeVarAssigns);\n            } \n            if (toType instanceof java.lang.reflect.TypeVariable<?>) {\n                return org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type, ((java.lang.reflect.TypeVariable<?>)(toType)), typeVarAssigns);\n            } \n            throw new java.lang.IllegalStateException((\"found an unhandled type: \" + toType));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDateParser:360","type":"CtBinaryOperatorImpl","sourcecode":"c == 'E'"},"failures":[224],"tindex":"7fd1cfd6-2e8a-11e6-a840-17704d6045a9","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1126","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrSubstitutor setValueDelimiter(final char valueDelimiter) {\n    if (valueDelimiter == 'E') {\n        {\n            return setValueDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher.charMatcher(valueDelimiter));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"valueDelimiter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1766","type":"CtBinaryOperatorImpl","sourcecode":"arrayEnd == null"},"failures":[],"tindex":"7fd1cfd7-2e8a-11e6-a840-5f2ef5ed734b","method":{"position":"org.apache.commons.lang3.Validate:966","type":"CtMethodImpl","sourcecode":"public static void inclusiveBetween(long start, long end, long value, java.lang.String message) {\n    if (message == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value < start) || (value > end)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayEnd":"message"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomStringUtils:225","type":"CtBinaryOperatorImpl","sourcecode":"count == 0"},"failures":[],"tindex":"7fd1cfd8-2e8a-11e6-a840-65aa32520bea","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:455","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(final char[] source, final int offset, final int length) {\n    if (length == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return null;\n            } \n            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(length).append(source, offset, length);\n            substitute(buf, 0, length);\n            return buf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"length"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:109","type":"CtBinaryOperatorImpl","sourcecode":"(codepoint >= (below)) && (codepoint <= (above))"},"failures":[],"tindex":"7fd1f6e9-2e8a-11e6-a840-aff9aa6ec23d","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:735","type":"CtMethodImpl","sourcecode":"private int readWithQuotes(final char[] srcChars, final int start, final int len, final org.apache.commons.lang3.text.StrBuilder workArea, final java.util.List<java.lang.String> tokenList, final int quoteStart, final int quoteLen) {\n    if ((quoteStart >= quoteStart) && (codepoint <= quoteLen)) {\n        {\n            workArea.clear();\n            int int = start;\n            boolean boolean = quoteLen > 0;\n            int int = 0;\n            while (pos < len) {\n                if (quoting) {\n                    if (isQuote(srcChars, pos, len, quoteStart, quoteLen)) {\n                        if (isQuote(srcChars, (pos + quoteLen), len, quoteStart, quoteLen)) {\n                            workArea.append(srcChars, pos, quoteLen);\n                            pos += quoteLen * 2;\n                            trimStart = workArea.size();\n                            continue;\n                        } \n                        quoting = false;\n                        pos += quoteLen;\n                        continue;\n                    } \n                    workArea.append(srcChars[(pos++)]);\n                    trimStart = workArea.size();\n                } else {\n                    final int int = getDelimiterMatcher().isMatch(srcChars, pos, start, len);\n                    if (delimLen > 0) {\n                        addToken(tokenList, workArea.substring(0, trimStart));\n                        return pos + delimLen;\n                    } \n                    if ((quoteLen > 0) && (isQuote(srcChars, pos, len, quoteStart, quoteLen))) {\n                        quoting = true;\n                        pos += quoteLen;\n                        continue;\n                    } \n                    final int int = getIgnoredMatcher().isMatch(srcChars, pos, start, len);\n                    if (ignoredLen > 0) {\n                        pos += ignoredLen;\n                        continue;\n                    } \n                    final int int = getTrimmerMatcher().isMatch(srcChars, pos, start, len);\n                    if (trimmedLen > 0) {\n                        workArea.append(srcChars, pos, trimmedLen);\n                        pos += trimmedLen;\n                        continue;\n                    } \n                    workArea.append(srcChars[(pos++)]);\n                    trimStart = workArea.size();\n                }\n            }\n            addToken(tokenList, workArea.substring(0, trimStart));\n            return -1;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"codepoint":"quoteStart","below":"quoteStart","above":"quoteLen"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2204","type":"CtBinaryOperatorImpl","sourcecode":"length >= (size)"},"failures":[225],"tindex":"7fd1f6ea-2e8a-11e6-a840-2f0469ccfcc6","method":{"position":"org.apache.commons.lang3.StringUtils:2118","type":"CtMethodImpl","sourcecode":"public static java.lang.String substring(final java.lang.String str, int start, int end) {\n    if (start >= end) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (end < 0) {\n                end = (str.length()) + end;\n            } \n            if (start < 0) {\n                start = (str.length()) + start;\n            } \n            if (end > (str.length())) {\n                end = str.length();\n            } \n            if (start > end) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            if (start < 0) {\n                start = 0;\n            } \n            if (end < 0) {\n                end = 0;\n            } \n            return str.substring(start, end);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"end","length":"start"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:596","type":"CtBinaryOperatorImpl","sourcecode":"toWildcardType == null"},"failures":[226,227],"tindex":"7fd21dfb-2e8a-11e6-a840-35da7eb55c2e","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1427","type":"CtMethodImpl","sourcecode":"public static boolean containsTypeVariables(java.lang.reflect.Type type) {\n    if (type == null) {\n        {\n            if (type instanceof java.lang.reflect.TypeVariable<?>) {\n                return true;\n            } \n            if (type instanceof java.lang.Class<?>) {\n                return (((java.lang.Class<?>)(type)).getTypeParameters().int) > 0;\n            } \n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                for (java.lang.reflect.Type java.lang.reflect.Type : ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()) {\n                    if (org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(arg)) {\n                        return true;\n                    } \n                }\n                return false;\n            } \n            if (type instanceof java.lang.reflect.WildcardType) {\n                java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n                return (org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wild)[0])) || (org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wild)[0]));\n            } \n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toWildcardType":"type"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1153","type":"CtBinaryOperatorImpl","sourcecode":"b < a"},"failures":[],"tindex":"7fd21dfc-2e8a-11e6-a840-bd8224c43ac9","method":{"position":"org.apache.commons.lang3.ObjectUtils:765","type":"CtMethodImpl","sourcecode":"public static byte CONST(final byte v) {\n    if (v < v) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return v;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"v","b":"v"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:573","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244],"tindex":"7fd21dfd-2e8a-11e6-a840-a3a51a847349","method":{"position":"org.apache.commons.lang3.text.StrBuilder:572","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final java.lang.StringBuffer str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return appendNull();\n            } \n            final int int = str.length();\n            if (strLen > 0) {\n                final int int = length();\n                ensureCapacity((len + strLen));\n                str.getChars(0, strLen, char[], len);\n                int += strLen;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2559","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[],"tindex":"7fd2450e-2e8a-11e6-a840-97859bfbed30","method":{"position":"org.apache.commons.lang3.event.EventUtils:75","type":"CtMethodImpl","sourcecode":"public static <L>void bindEventsToMethod(final java.lang.Object target, final java.lang.String methodName, final java.lang.Object eventSource, final java.lang.Class<L> listenerType, final java.lang.String... eventTypes) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(eventSource)) {\n        {\n            final L L = listenerType.cast(java.lang.reflect.Proxy.newProxyInstance(target.getClass().getClassLoader(), new java.lang.Class[]{ listenerType }, new org.apache.commons.lang3.event.EventUtils.EventBindingInvocationHandler(target , methodName , eventTypes)));\n            org.apache.commons.lang3.event.EventUtils.addEventListener(eventSource, listenerType, listener);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"eventSource"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:2098","type":"CtBinaryOperatorImpl","sourcecode":"summaryObjectEndText == null"},"failures":[245],"tindex":"7fd2450f-2e8a-11e6-a840-1386107c5dc9","method":{"position":"org.apache.commons.lang3.StringUtils:2894","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] splitPreserveAllTokens(final java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.splitWorker(str, null, (-1), true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"summaryObjectEndText":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:70","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"7fd24510-2e8a-11e6-a840-9de0192ae9a6","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:676","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final double[] array) {\n    if (fieldName == null) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"fieldName"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.JavaVersion:148","type":"CtInvocationImpl","sourcecode":"\"1.8\".equals(nom)"},"failures":[],"tindex":"7fd26c21-2e8a-11e6-a840-1138b7f29c57","method":{"position":"org.apache.commons.lang3.exception.ContextedException:207","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object getFirstContextValue(final java.lang.String label) {\n    if (\"1.8\".equals(label)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.exception.ContextedException.this.org.apache.commons.lang3.exception.ExceptionContext.getFirstContextValue(label);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"label"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:357","type":"CtBinaryOperatorImpl","sourcecode":"ch < 4096"},"failures":[],"tindex":"7fd26c22-2e8a-11e6-a840-f973e59fb05f","method":{"position":"org.apache.commons.lang3.CharSet:223","type":"CtMethodImpl","sourcecode":"public boolean contains(final char ch) {\n    if (ch < 4096) {\n        {\n            for (final org.apache.commons.lang3.CharRange org.apache.commons.lang3.CharRange : java.util.Set<org.apache.commons.lang3.CharRange>) {\n                if (range.contains(ch)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:261","type":"CtBinaryOperatorImpl","sourcecode":"countryCode == null"},"failures":[246,247,248,249],"tindex":"7fd26c23-2e8a-11e6-a840-ef463445df83","method":{"position":"org.apache.commons.lang3.exception.ContextedRuntimeException:253","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String getFormattedExceptionMessage(final java.lang.String baseMessage) {\n    if (baseMessage == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.exception.ExceptionContext.getFormattedExceptionMessage(baseMessage);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"countryCode":"baseMessage"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomStringUtils:234","type":"CtBinaryOperatorImpl","sourcecode":"(start == 0) && (end == 0)"},"failures":[],"tindex":"7fd3a4a4-2e8a-11e6-a840-73cdbb269188","method":{"position":"org.apache.commons.lang3.StringUtils:1262","type":"CtMethodImpl","sourcecode":"public static int lastOrdinalIndexOf(final java.lang.CharSequence str, final java.lang.CharSequence searchStr, final int ordinal) {\n    if ((ordinal == 0) && (ordinal == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.ordinalIndexOf(str, searchStr, ordinal, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"ordinal","end":"ordinal"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:576","type":"CtBinaryOperatorImpl","sourcecode":"((ch0 == 'o') || (ch0 == 'O')) && ((ch1 == 'n') || (ch1 == 'N'))"},"failures":[],"tindex":"7fd3cbb5-2e8a-11e6-a840-f11f59650d69","method":{"position":"org.apache.commons.lang3.CharUtils:421","type":"CtMethodImpl","sourcecode":"public static boolean isAsciiPrintable(final char ch) {\n    if (((ch == 'o') || (ch0 == 'O')) && ((ch == 'n') || (ch1 == 'N'))) {\n        {\n            return (ch >= 32) && (ch < 127);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch0":"ch","ch1":"ch"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:137","type":"CtBinaryOperatorImpl","sourcecode":"(((org.apache.commons.lang3.StringUtils.isAllLowerCase(split[0])) && (((split[0].length()) == 2) || ((split[0].length()) == 3))) && ((split[1].length()) == 2)) && (org.apache.commons.lang3.StringUtils.isAllUpperCase(split[1]))"},"failures":[],"tindex":"7fd3cbb6-2e8a-11e6-a840-49a359c93f80","method":{"position":"org.apache.commons.lang3.StringUtils:258","type":"CtMethodImpl","sourcecode":"public static boolean isAnyEmpty(java.lang.CharSequence... css) {\n    if ((((org.apache.commons.lang3.StringUtils.isAllLowerCase(css[0])) && (((split[0].length()) == 2) || ((split[0].length()) == 3))) && ((split[1].length()) == 2)) && (org.apache.commons.lang3.StringUtils.isAllUpperCase(split[1]))) {\n        {\n            if (org.apache.commons.lang3.ArrayUtils.isEmpty(css)) {\n                return true;\n            } \n            for (java.lang.CharSequence java.lang.CharSequence : css) {\n                if (org.apache.commons.lang3.StringUtils.isEmpty(cs)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"split":"css"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2974","type":"CtBinaryOperatorImpl","sourcecode":"match || (preserveAllTokens && lastMatch)"},"failures":[250,251],"tindex":"7fd3cbb7-2e8a-11e6-a840-d33a3c5092db","method":{"position":"org.apache.commons.lang3.mutable.MutableBoolean:87","type":"CtMethodImpl","sourcecode":"public void setValue(final boolean value) {\n    if (value || (value && value)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableBoolean.this.boolean = value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"preserveAllTokens":"value","lastMatch":"value","match":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:525","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"7fd3f2c8-2e8a-11e6-a840-0bdaeafb42f9","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1297","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final double[] array) {\n    if (fieldName == null) {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1010","type":"CtBinaryOperatorImpl","sourcecode":"(((nHex - 1) * 4) + dstPos) >= 8"},"failures":[252,253],"tindex":"7fd3f2c9-2e8a-11e6-a840-37ced0a0f64f","method":{"position":"org.apache.commons.lang3.time.FormatCache:159","type":"CtMethodImpl","sourcecode":"F getDateInstance(final int dateStyle, final java.util.TimeZone timeZone, java.util.Locale locale) {\n    if ((((dateStyle - 1) * 4) + dateStyle) >= 8) {\n        {\n            return getDateTimeInstance(java.lang.Integer.valueOf(dateStyle), null, timeZone, locale);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"dateStyle","nHex":"dateStyle"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MethodUtils:291","type":"CtBinaryOperatorImpl","sourcecode":"method == null"},"failures":[254],"tindex":"7fd3f2ca-2e8a-11e6-a840-cb35d9db533b","method":{"position":"org.apache.commons.lang3.reflect.MemberUtils:54","type":"CtMethodImpl","sourcecode":"static boolean setAccessibleWorkaround(final java.lang.reflect.AccessibleObject o) {\n    if (o == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((o == null) || (o.isAccessible())) {\n                return false;\n            } \n            final java.lang.reflect.Member java.lang.reflect.Member = ((java.lang.reflect.Member)(o));\n            if (((!(o.isAccessible())) && (java.lang.reflect.Modifier.isPublic(m.getModifiers()))) && (org.apache.commons.lang3.reflect.MemberUtils.isPackageAccess(m.getDeclaringClass().getModifiers()))) {\n                try {\n                    o.setAccessible(true);\n                    return true;\n                } catch (final java.lang.SecurityException e) {\n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"method":"o"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:255","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"7fd419db-2e8a-11e6-a840-dd831dc96a24","method":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:270","type":"CtMethodImpl","sourcecode":"public static java.lang.String formatPeriod(final long startMillis, final long endMillis, final java.lang.String format, final boolean padWithZeros, final java.util.TimeZone timezone) {\n    if (format == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (padWithZeros) {\n                {\n                    final org.apache.commons.lang3.time.DurationFormatUtils.Token[] org.apache.commons.lang3.time.DurationFormatUtils.Token[] = org.apache.commons.lang3.time.DurationFormatUtils.lexx(format);\n                    final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance(timezone);\n                    start.setTime(new java.util.Date(startMillis));\n                    final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance(timezone);\n                    end.setTime(new java.util.Date(endMillis));\n                    int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                    int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                    int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                    int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                    int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                    int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                    int int = (end.get(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                    while (milliseconds < 0) {\n                        milliseconds += 1000;\n                        seconds -= 1;\n                    }\n                    while (seconds < 0) {\n                        seconds += 60;\n                        minutes -= 1;\n                    }\n                    while (minutes < 0) {\n                        minutes += 60;\n                        hours -= 1;\n                    }\n                    while (hours < 0) {\n                        hours += 24;\n                        days -= 1;\n                    }\n                    if (org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object)) {\n                        while (days < 0) {\n                            days += start.getActualMaximum(java.util.Calendar.java.util.Calendar.int);\n                            months -= 1;\n                            start.add(java.util.Calendar.java.util.Calendar.int, 1);\n                        }\n                        while (months < 0) {\n                            months += 12;\n                            years -= 1;\n                        }\n                        if ((!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) && (years != 0)) {\n                            while (years != 0) {\n                                months += 12 * years;\n                                years = 0;\n                            }\n                        } \n                    } else {\n                        if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) {\n                            int int = end.get(java.util.Calendar.java.util.Calendar.int);\n                            if (months < 0) {\n                                target -= 1;\n                            } \n                            while ((start.get(java.util.Calendar.java.util.Calendar.int)) != target) {\n                                days += (start.getActualMaximum(java.util.Calendar.java.util.Calendar.int)) - (start.get(java.util.Calendar.java.util.Calendar.int));\n                                if (((start instanceof java.util.GregorianCalendar) && ((start.get(java.util.Calendar.java.util.Calendar.int)) == (java.util.Calendar.java.util.Calendar.int))) && ((start.get(java.util.Calendar.java.util.Calendar.int)) == 29)) {\n                                    days += 1;\n                                } \n                                start.add(java.util.Calendar.java.util.Calendar.int, 1);\n                                days += start.get(java.util.Calendar.java.util.Calendar.int);\n                            }\n                            years = 0;\n                        } \n                        while ((start.get(java.util.Calendar.java.util.Calendar.int)) != (end.get(java.util.Calendar.java.util.Calendar.int))) {\n                            days += start.getActualMaximum(java.util.Calendar.java.util.Calendar.int);\n                            start.add(java.util.Calendar.java.util.Calendar.int, 1);\n                        }\n                        months = 0;\n                        while (days < 0) {\n                            days += start.getActualMaximum(java.util.Calendar.java.util.Calendar.int);\n                            months -= 1;\n                            start.add(java.util.Calendar.java.util.Calendar.int, 1);\n                        }\n                    }\n                    if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) {\n                        hours += 24 * days;\n                        days = 0;\n                    } \n                    if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) {\n                        minutes += 60 * hours;\n                        hours = 0;\n                    } \n                    if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) {\n                        seconds += 60 * minutes;\n                        minutes = 0;\n                    } \n                    if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object))) {\n                        milliseconds += 1000 * seconds;\n                        seconds = 0;\n                    } \n                    return org.apache.commons.lang3.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"format"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1267","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"7fd440ec-2e8a-11e6-a840-735ae2949c67","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1623","type":"CtMethodImpl","sourcecode":"private static boolean equals(java.lang.reflect.WildcardType w, java.lang.reflect.Type t) {\n    if (t instanceof java.lang.Class<?>) {\n        {\n            if (t instanceof java.lang.reflect.WildcardType) {\n                final java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(t));\n                return (org.apache.commons.lang3.reflect.TypeUtils.equals(w.getLowerBounds(), other.getLowerBounds())) && (org.apache.commons.lang3.reflect.TypeUtils.equals(org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(w), org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(other)));\n            } \n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"t"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:1028","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[255,256,257],"tindex":"7fd467fd-2e8a-11e6-a840-a90bfa7e8acb","method":{"position":"org.apache.commons.lang3.ClassUtils:759","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> wrapperToPrimitive(final java.lang.Class<?> cls) {\n    if (cls == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(cls);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:423","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[258,259,260,261,262],"tindex":"7fd467fe-2e8a-11e6-a840-dbe6962ba5d7","method":{"position":"org.apache.commons.lang3.CharEncoding:94","type":"CtMethodImpl","sourcecode":"public static boolean isSupported(final java.lang.String name) {\n    if (name == null) {\n        {\n            if (name == null) {\n                return false;\n            } \n            try {\n                return java.nio.charset.Charset.isSupported(name);\n            } catch (final java.nio.charset.IllegalCharsetNameException ex) {\n                return false;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"name"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:556","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable<?>"},"failures":[],"tindex":"7fd467ff-2e8a-11e6-a840-39a764a0fea7","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1344","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(final java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable<?>) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.Class<?>) {\n                final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n                return clazz.isArray() ? clazz.getComponentType() : null;\n            } \n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                return ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:932","type":"CtBinaryOperatorImpl","sourcecode":"item == null"},"failures":[263],"tindex":"7fd48f10-2e8a-11e6-a840-db55884b319a","method":{"position":"org.apache.commons.lang3.ArrayUtils:1987","type":"CtMethodImpl","sourcecode":"public static boolean contains(final java.lang.Object[] array, final java.lang.Object objectToFind) {\n    if (objectToFind == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, objectToFind)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"item":"objectToFind"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.NumericEntityUnescaper:91","type":"CtBinaryOperatorImpl","sourcecode":"start == seqEnd"},"failures":[264,265],"tindex":"7fd48f11-2e8a-11e6-a840-9f95ee3f5fb4","method":{"position":"org.apache.commons.lang3.Conversion:1289","type":"CtMethodImpl","sourcecode":"public static byte[] longToByteArray(final long src, final int srcPos, final byte[] dst, final int dstPos, final int nBytes) {\n    if (nBytes == dstPos) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nBytes) {\n                return dst;\n            } \n            if ((((nBytes - 1) * 8) + srcPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"(nBytes-1)*8+srcPos is greather or equal to than 64\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nBytes ; i++) {\n                shift = (i * 8) + srcPos;\n                dst[(dstPos + i)] = ((byte)(255 & (src >> shift)));\n            }\n            return dst;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"nBytes","seqEnd":"dstPos"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2517","type":"CtBinaryOperatorImpl","sourcecode":"((str == null) || (org.apache.commons.lang3.StringUtils.isEmpty(open))) || (org.apache.commons.lang3.StringUtils.isEmpty(close))"},"failures":[],"tindex":"7fd50442-2e8a-11e6-a840-9fa47e0b7c71","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1837","type":"CtMethodImpl","sourcecode":"private static java.lang.StringBuilder appendAllTo(java.lang.StringBuilder buf, java.lang.String sep, java.lang.reflect.Type... types) {\n    if (((sep == null) || (org.apache.commons.lang3.StringUtils.isEmpty(sep))) || (org.apache.commons.lang3.StringUtils.isEmpty(sep))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.notEmpty(org.apache.commons.lang3.Validate.noNullElements(types));\n            if ((types.int) > 0) {\n                buf.append(org.apache.commons.lang3.reflect.TypeUtils.toString(types[0]));\n                for (int int = 1 ; i < (types.int) ; i++) {\n                    buf.append(sep).append(org.apache.commons.lang3.reflect.TypeUtils.toString(types[i]));\n                }\n            } \n            return buf;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"sep","close":"sep","open":"sep"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2104","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[120,130,131,132,133,134,137,139,140,141,142,146],"tindex":"7fd50443-2e8a-11e6-a840-e94afb99b69f","method":{"position":"org.apache.commons.lang3.time.DateUtils:774","type":"CtMethodImpl","sourcecode":"public static java.util.Date round(final java.lang.Object date, final int field) {\n    if (field == 0) {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            if (date instanceof java.util.Date) {\n                return org.apache.commons.lang3.time.DateUtils.round(((java.util.Date)(date)), field);\n            } else if (date instanceof java.util.Calendar) {\n                return org.apache.commons.lang3.time.DateUtils.round(((java.util.Calendar)(date)), field).getTime();\n            } else {\n                throw new java.lang.ClassCastException((\"Could not round \" + date));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"field"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.ClassNotFoundException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1499","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[],"tindex":"7fd50444-2e8a-11e6-a840-f7622aa6f61b","method":{"position":"org.apache.commons.lang3.ClassUtils:861","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getClass(final java.lang.ClassLoader classLoader, final java.lang.String className) throws java.lang.ClassNotFoundException {\n    if (className != null) {\n        throw new java.lang.ClassNotFoundException();\n    } else {\n        {\n            return org.apache.commons.lang3.ClassUtils.getClass(classLoader, className, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"className"},"type":"special","returnInThen":false,"status":0}],"header":{"groupId":"org.apache.commons","transformationCount":74,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
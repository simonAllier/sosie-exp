{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":93,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":181,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":216,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":177,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray":199,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":94,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_String":344,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_charArray":280,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteStaticFieldForceAccess":267,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_StrMatcher_String":386,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementLongArray":365,"org.apache.commons.lang3.text.StrTokenizerTest.testReset":279,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArrayEqualAsObject":105,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":30,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":333,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":227,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":229,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultIsExceptionUnknown":255,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":74,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":102,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray":198,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":331,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":89,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":91,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVEmpty":298,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude":200,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":219,"org.apache.commons.lang3.ClassPathUtilsTest.testToFullyQualifiedNamePackageNull":384,"org.apache.commons.lang3.builder.CompareToBuilderTest.testCharArray":385,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":174,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":221,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_String":292,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEqualsHashcode":259,"org.apache.commons.lang3.RandomStringUtilsTest.testExceptions":262,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":38,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char":296,"org.apache.commons.lang3.text.StrTokenizerTest.testListArray":283,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownMultipleTimes":9,"org.apache.commons.lang3.reflect.TypeLiteralTest.testEquals":246,"org.apache.commons.lang3.EnumUtilsTest.test_getEnum":353,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementFloatArray":367,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":158,"org.apache.commons.lang3.reflect.TypeLiteralTest.testBasic":244,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":52,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringString":321,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":85,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":31,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":165,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeStartText":205,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeEx":251,"org.apache.commons.lang3.AnnotationUtilsTest.testNonEquivalentAnnotationsOfSameType":60,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testBlank":126,"org.apache.commons.lang3.ConversionTest.testLongToShortArray":387,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":330,"org.apache.commons.lang3.AnnotationUtilsTest.testSameInstance":54,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":347,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull":194,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassOutputChange":282,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":25,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_char":51,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":78,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":104,"org.apache.commons.lang3.AnnotationUtilsTest.testEquivalence":55,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear":335,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentEnd":204,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringAfterLast_StringString":15,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":24,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":153,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementShortArray":372,"org.apache.commons.lang3.builder.EqualsBuilderTest.testRaggedArray":339,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":32,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":189,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":100,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":138,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":182,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementBooleanArray":380,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson":131,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":21,"org.apache.commons.lang3.text.StrTokenizerTest.testChaining":316,"org.apache.commons.lang3.builder.EqualsBuilderTest.testLongArrayHiddenByObject":340,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testGetAvailablePermits":14,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":327,"org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer":269,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":226,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber":323,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testInit":5,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":117,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":97,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":75,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testPassAfterShutdown":1,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":18,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":148,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testPerson":77,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":133,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":152,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testArrayList":79,"org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfBytes":383,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":163,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":103,"org.apache.commons.lang3.ObjectUtilsTest.testNotEqual":260,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testBlank":134,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":162,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection":193,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNull":295,"org.apache.commons.lang3.builder.DiffResultTest.testNullStyle":121,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":276,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":20,"org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testPutIfAbsentNullMap":379,"org.apache.commons.lang3.ArrayUtilsTest.testContainsChar":359,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":173,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvString":375,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":128,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":143,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementByteArray":370,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":188,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullLhs":113,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testBlank":186,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectEndText":215,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":101,"org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterize":242,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":201,"org.apache.commons.lang3.mutable.MutableShortTest.testSubtractValueObject":258,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":176,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownSharedExecutorTask":8,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":326,"org.apache.commons.lang3.builder.DiffBuilderTest.testSameObjectIgnoresAppends":109,"org.apache.commons.lang3.text.StrTokenizerTest.testGetContent":312,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":37,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedException":355,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":180,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":84,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArraySeparator":213,"org.apache.commons.lang3.text.StrTokenizerTest.testIteration":277,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset":313,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":146,"org.apache.commons.lang3.text.StrTokenizerTest.testTSVEmpty":293,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":99,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":187,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testLinkedList":81,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":108,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":87,"org.apache.commons.lang3.AnnotationUtilsTest.testGeneratedAnnotationEquivalentToRealAnnotation":58,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":112,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":34,"org.apache.commons.lang3.builder.CompareToBuilderTest.testShortArrayHiddenByObject":317,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":95,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray":195,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringStringarray":322,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetExceptionUnknown":248,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":231,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1":284,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3":286,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2":285,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5":288,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4":287,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7":290,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":178,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6":289,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":332,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":26,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":83,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":183,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":22,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldNameValueSeparator":209,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher":241,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray":299,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson":191,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils":263,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedStaticField":265,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayDouble":378,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testSetContextValue":358,"org.apache.commons.lang3.ArrayUtilsTest.testContainsBoolean":382,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":19,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":142,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeEndText":208,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayLong":337,"org.apache.commons.lang3.builder.EqualsBuilderTest.testMixedArray":341,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":44,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson":139,"org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfShorts":320,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":41,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfBoolean":381,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":179,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementBooleanArray":366,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong":135,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":329,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson":222,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":120,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":130,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":88,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":203,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiShortArray":319,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testAcquireLimit":12,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":27,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementCharArray":369,"org.apache.commons.lang3.builder.DiffResultTest.testNullRhs":124,"org.apache.commons.lang3.StringUtilsTest.testRightPad_StringInt":389,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":42,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionCompareEx1":235,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":136,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":28,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testAcquireMultiplePeriods":3,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":33,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":334,"org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getRootCauseMessage_Throwable":361,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":82,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":86,"org.apache.commons.lang3.builder.CompareToBuilderTest.testShortArray":318,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":125,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char_char":278,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionCompare":234,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testJavaSerialization":357,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testGetAverageCallsPerPeriod":4,"org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleStringD":257,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementIntArray":368,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementDoubleArray":371,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":45,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":141,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testBlank":217,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testFormat":346,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionCompareEx2":236,"org.apache.commons.lang3.ArrayUtilsTest.testSameLengthByte":324,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":166,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":185,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":150,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic1":307,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":98,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeNested":249,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":147,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic2":308,"org.apache.commons.lang3.AnnotationUtilsTest.testBothArgsNull":59,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic3":309,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic4":310,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic5":311,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":218,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":184,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":40,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetNullText":207,"org.apache.commons.lang3.text.StrBuilderTest.testGetChars":50,"org.apache.commons.lang3.ArrayUtilsTest.testToObject_float":352,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":35,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":151,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":156,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":230,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testAcquireMultipleThreads":2,"org.apache.commons.lang3.time.FastDatePrinterTest.testShortDateStyleWithLocales":349,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":110,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetResultObjectUnknown":254,"org.apache.commons.lang3.text.translate.OctalUnescaperTest.testBetween":360,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char_char":300,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormat":348,"org.apache.commons.lang3.AnnotationUtilsTest.testOneArgNull":53,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls":202,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":301,"org.apache.commons.lang3.time.FastDatePrinterTest.testFormat":350,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":96,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":115,"org.apache.commons.lang3.ObjectUtilsTest.testConstMethods":16,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNotSupportedException":291,"org.apache.commons.lang3.builder.DiffResultTest.testNullList":118,"org.apache.commons.lang3.SystemUtilsTest.testJavaVersionMatches":49,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":160,"org.apache.commons.lang3.ArrayUtilsTest.testReverseByte":351,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":224,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":171,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":167,"org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairs":373,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":228,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testBlank":72,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":220,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":23,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":122,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":175,"org.apache.commons.lang3.builder.DiffResultTest.testNoDifferencesString":119,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":149,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testBlank":225,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":172,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":90,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":164,"org.apache.commons.lang3.ArrayUtilsTest.testIsEquals":338,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":192,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":92,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":111,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":127,"org.apache.commons.lang3.reflect.TypeLiteralTest.testTyped":245,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":39,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":154,"org.apache.commons.lang3.text.StrTokenizerTest.testToString":281,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":107,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsHomog":374,"org.apache.commons.lang3.ConversionTest.testHexToInt":261,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection":196,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":116,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeExternalExec":253,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownOwnExecutor":7,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":76,"org.apache.commons.lang3.AnnotationUtilsTest.testAnnotationsOfDifferingTypes":56,"org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntString":376,"org.apache.commons.lang3.math.FractionTest.testFactory_double":238,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":106,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testCopyOnWriteArrayList":80,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":29,"org.apache.commons.lang3.builder.DiffResultTest.testNullLhs":123,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":270,"org.apache.commons.lang3.ArrayUtilsTest.testToString":62,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":137,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentStart":206,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed1":314,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed2":315,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":144,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLong":73,"org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleString":256,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty1":273,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty2":274,"org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getMessage_Throwable":362,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectStartText":211,"org.apache.commons.lang3.AnnotationUtilsTest.testHashCode":57,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":161,"org.apache.commons.lang3.math.NumberUtilsTest.testToFloatString":354,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":132,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareExcludeFields":232,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementShortArray":47,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":197,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":36,"org.apache.commons.lang3.text.StrTokenizerTest.test8":70,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":168,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":336,"org.apache.commons.lang3.time.DateUtilsTest.testRound":325,"org.apache.commons.lang3.text.StrTokenizerTest.test5":67,"org.apache.commons.lang3.text.StrTokenizerTest.test4":66,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGenericArrayType":243,"org.apache.commons.lang3.text.StrTokenizerTest.test7":69,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":169,"org.apache.commons.lang3.text.StrTokenizerTest.test6":68,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":170,"org.apache.commons.lang3.text.StrTokenizerTest.test1":63,"org.apache.commons.lang3.text.StrTokenizerTest.test3":65,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String":294,"org.apache.commons.lang3.text.StrTokenizerTest.test2":64,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":155,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldSeparator":212,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":223,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedStaticFieldForceAccess":264,"org.apache.commons.lang3.AnnotationUtilsTest.testIsValidAnnotationMemberType":61,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":140,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteStaticField":268,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim1":271,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareTransients":237,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim2":272,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultInitializerNamesModify":247,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":17,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownSharedExecutorNoTask":11,"org.apache.commons.lang3.math.FractionTest.testToProperString":239,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testAddContextValue":356,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetInitializerUnknown":252,"org.apache.commons.lang3.math.FractionTest.testPow":388,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":129,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveShortArray":46,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testStartTimer":13,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayEnd":210,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char":275,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullRhs":114,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":145,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1":306,"org.apache.commons.lang3.HashSetvBitSetTest.testTimesExtractOrBitset":363,"org.apache.commons.lang3.math.FractionTest.testFactory_String_double":240,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testInitDefaultService":6,"org.apache.commons.lang3.ConversionTest.testByteToHex":0,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedStaticField":266,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testAcquireNoLimit":10,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompare":233,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayStart":214,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassInputChange":297,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed3":304,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed2":303,"org.apache.commons.lang3.builder.EqualsBuilderTest.testLongArray":342,"org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiLongArray":343,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeTempExec":250,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4":305,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed1":302,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":190,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":43,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":159,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_StringInt":377,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":328,"org.apache.commons.lang3.AnnotationUtilsTest.testToString":48,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementsObjectArray":364,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testShortDateStyleWithLocales":345,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":157,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":71},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4788","type":"CtBinaryOperatorImpl","sourcecode":"tempIndex == (-1)"},"failures":[0],"tindex":"24743f6f-3e51-11e6-a517-51a7754a64ed","method":{"position":"org.apache.commons.lang3.Conversion:1509","type":"CtMethodImpl","sourcecode":"public static java.lang.String byteToHex(final byte src, final int srcPos, final java.lang.String dstInit, final int dstPos, final int nHexs) {\n    if (nHexs == (-1)) {\n        {\n            if (0 == nHexs) {\n                return dstInit;\n            } \n            if ((((nHexs - 1) * 4) + srcPos) >= 8) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+srcPos is greather or equal to than 8\");\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(dstInit);\n            int int = 0;\n            int int = sb.length();\n            for (int int = 0 ; i < nHexs ; i++) {\n                shift = (i * 4) + srcPos;\n                final int int = 15 & (src >> shift);\n                if ((dstPos + i) == append) {\n                    ++append;\n                    sb.append(org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                } else {\n                    sb.setCharAt((dstPos + i), org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                }\n            }\n            return sb.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"tempIndex":"nHexs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:835","type":"CtBinaryOperatorImpl","sourcecode":"lastDotIndex != (-1)"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14],"tindex":"247529d0-3e51-11e6-a517-0d58b161c86e","method":{"position":"org.apache.commons.lang3.concurrent.TimedSemaphore:247","type":"CtMethodImpl","sourcecode":"public final synchronized void setLimit(final int limit) {\n    if (limit != (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.concurrent.TimedSemaphore.this.int = limit;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lastDotIndex":"limit"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1273","type":"CtBinaryOperatorImpl","sourcecode":"(size()) > 0"},"failures":[],"tindex":"247550e1-3e51-11e6-a517-9ba476f07b68","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:552","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(final org.apache.commons.lang3.text.StrBuilder source) {\n    if (source == null) {\n        return null;\n    } \n    final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(source.length()).append(source);\n    substitute(buf, 0, buf.length());\n    return buf.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4941","type":"CtBinaryOperatorImpl","sourcecode":"overlay == null"},"failures":[15],"tindex":"247577f2-3e51-11e6-a517-b3c8df7049d7","method":{"position":"org.apache.commons.lang3.StringUtils:2412","type":"CtMethodImpl","sourcecode":"public static java.lang.String substringAfterLast(final java.lang.String str, final java.lang.String separator) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                return str;\n            } \n            if (org.apache.commons.lang3.StringUtils.isEmpty(separator)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = str.lastIndexOf(separator);\n            if ((pos == (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) || (pos == ((str.length()) - (separator.length())))) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            return str.substring((pos + (separator.length())));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"overlay":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1259","type":"CtBinaryOperatorImpl","sourcecode":"b > a"},"failures":[16],"tindex":"24759f03-3e51-11e6-a517-9331f97c5bb2","method":{"position":"org.apache.commons.lang3.ObjectUtils:765","type":"CtMethodImpl","sourcecode":"public static byte CONST(final byte v) {\n    if (v > v) {\n        {\n            return v;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"v","b":"v"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.NumericEntityUnescaper:91","type":"CtBinaryOperatorImpl","sourcecode":"start == seqEnd"},"failures":[],"tindex":"24759f04-3e51-11e6-a517-97d4d2c51dab","method":{"position":"org.apache.commons.lang3.ArrayUtils:1853","type":"CtMethodImpl","sourcecode":"public static void reverse(final short[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (startIndexInclusive == endIndexExclusive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return ;\n            } \n            int int = startIndexInclusive < 0 ? 0 : startIndexInclusive;\n            int int = (java.lang.Math.min(array.int, endIndexExclusive)) - 1;\n            short short;\n            while (j > i) {\n                tmp = array[j];\n                array[j] = array[i];\n                array[i] = tmp;\n                j--;\n                i++;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"startIndexInclusive","seqEnd":"endIndexExclusive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:825","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof int[]"},"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"tindex":"2475c615-3e51-11e6-a517-77eab7967153","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:151","type":"CtMethodImpl","sourcecode":"public static java.lang.String reflectionToString(final java.lang.Object object) {\n    if (object instanceof int[]) {\n        {\n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:598","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Arrays.equals(lhs, rhs))"},"failures":[],"tindex":"2475ed26-3e51-11e6-a517-3d3ad783e0ba","method":{"position":"org.apache.commons.lang3.ArrayUtils:5031","type":"CtMethodImpl","sourcecode":"public static int[] removeElement(final int[] array, final int element) {\n    if (!(java.util.Arrays.equals(array, array))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:474","type":"CtBinaryOperatorImpl","sourcecode":"gcd == 1"},"failures":[46,47],"tindex":"2475ed27-3e51-11e6-a517-395046fa6e80","method":{"position":"org.apache.commons.lang3.ArrayUtils:5132","type":"CtMethodImpl","sourcecode":"public static short[] remove(final short[] array, final int index) {\n    if (index == 1) {\n        {\n            return ((short[])(org.apache.commons.lang3.ArrayUtils.remove(((java.lang.Object)(array)), index)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"gcd":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:525","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[48],"tindex":"24761438-3e51-11e6-a517-a13d68188e03","method":{"position":"org.apache.commons.lang3.AnnotationUtils:91","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, java.lang.Object value) {\n    if (value == null) {\n        {\n            if (value instanceof java.lang.annotation.Annotation) {\n                value = org.apache.commons.lang3.AnnotationUtils.toString(((java.lang.annotation.Annotation)(value)));\n            } \n            super.appendDetail(buffer, fieldName, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2949","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[49],"tindex":"24763b49-3e51-11e6-a517-5531fab803ce","method":{"position":"org.apache.commons.lang3.SystemUtils:1428","type":"CtMethodImpl","sourcecode":"static boolean isJavaVersionMatch(final java.lang.String version, final java.lang.String versionPrefix) {\n    if (version == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (version == null) {\n                return false;\n            } \n            return version.startsWith(versionPrefix);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"version"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:989","type":"CtBinaryOperatorImpl","sourcecode":"(value < start) || (value > end)"},"failures":[],"tindex":"2476625a-3e51-11e6-a517-2746b07f2ff0","method":{"position":"org.apache.commons.lang3.ArrayUtils:3319","type":"CtMethodImpl","sourcecode":"public static double[] toPrimitive(final java.lang.Double[] array, final double valueForNull) {\n    if (java.lang.Double.isNaN(valueForNull)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((valueForNull < valueForNull) || (value > valueForNull)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (array == null) {\n                        return null;\n                    } else if ((array.int) == 0) {\n                        return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.double[];\n                    } \n                    final double[] double[] = new double[array.int];\n                    for (int int = 0 ; i < (array.int) ; i++) {\n                        final java.lang.Double java.lang.Double = array[i];\n                        result[i] = b == null ? valueForNull : b.doubleValue();\n                    }\n                    return result;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"valueForNull","end":"valueForNull","value":"valueForNull"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:434","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[50],"tindex":"2476896b-3e51-11e6-a517-a1ba3d88910b","method":{"position":"org.apache.commons.lang3.text.StrBuilder:392","type":"CtMethodImpl","sourcecode":"public char[] getChars(char[] destination) {\n    if (destination == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = length();\n            if ((destination == null) || ((destination.int) < len)) {\n                destination = new char[len];\n            } \n            java.lang.System.arraycopy(char[], 0, destination, 0, len);\n            return destination;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"destination"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:803","type":"CtBinaryOperatorImpl","sourcecode":"trimmedLen > 0"},"failures":[51],"tindex":"2476896c-3e51-11e6-a517-23210dd5d50e","method":{"position":"org.apache.commons.lang3.StringUtils:862","type":"CtMethodImpl","sourcecode":"public static int indexOf(final java.lang.CharSequence seq, final int searchChar) {\n    if (searchChar > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.indexOf(seq, searchChar, 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"trimmedLen":"searchChar"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.NoSuchMethodException","condition":{"position":"org.apache.commons.lang3.StringUtils:4835","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"2476b07d-3e51-11e6-a517-1574f40863cf","method":{"position":"org.apache.commons.lang3.ClassUtils:921","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Method getPublicMethod(final java.lang.Class<?> cls, final java.lang.String methodName, final java.lang.Class<?>... parameterTypes) throws java.lang.NoSuchMethodException, java.lang.SecurityException {\n    if (methodName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.NoSuchMethodException();\n    } else {\n        {\n            final java.lang.reflect.Method java.lang.reflect.Method = cls.getMethod(methodName, parameterTypes);\n            if (java.lang.reflect.Modifier.isPublic(declaredMethod.getDeclaringClass().getModifiers())) {\n                return declaredMethod;\n            } \n            final java.util.List<java.lang.Class<?>> java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>>();\n            candidateClasses.addAll(org.apache.commons.lang3.ClassUtils.getAllInterfaces(cls));\n            candidateClasses.addAll(org.apache.commons.lang3.ClassUtils.getAllSuperclasses(cls));\n            for (final java.lang.Class<?> java.lang.Class<?> : candidateClasses) {\n                if (!(java.lang.reflect.Modifier.isPublic(candidateClass.getModifiers()))) {\n                    continue;\n                } \n                java.lang.reflect.Method java.lang.reflect.Method;\n                try {\n                    candidateMethod = candidateClass.getMethod(methodName, parameterTypes);\n                } catch (final java.lang.NoSuchMethodException ex) {\n                    continue;\n                }\n                if (java.lang.reflect.Modifier.isPublic(candidateMethod.getDeclaringClass().getModifiers())) {\n                    return candidateMethod;\n                } \n            }\n            throw new java.lang.NoSuchMethodException((((\"Can't find a public method for \" + methodName) + \" \") + (org.apache.commons.lang3.ArrayUtils.toString(parameterTypes))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"methodName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:355","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[52,52],"tindex":"2476d78e-3e51-11e6-a517-b7dde6e1ec22","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:429","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final int[] array) {\n    if (array == null) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:805","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"2476d78f-3e51-11e6-a517-71f5e44c6d35","method":{"position":"org.apache.commons.lang3.ArrayUtils:4641","type":"CtMethodImpl","sourcecode":"public static <T>T[] removeElement(final T[] array, final java.lang.Object element) {\n    if (element instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:339","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"2476fea0-3e51-11e6-a517-6bd4c2095436","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1258","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey.this) == obj) {\n                return true;\n            } \n            if (obj instanceof org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey) {\n                final org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey = ((org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey)(obj));\n                return ((java.util.TimeZone.equals(other.java.util.TimeZone)) && ((int) == (other.int))) && (java.util.Locale.equals(other.java.util.Locale));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:104","type":"CtFieldReadImpl","sourcecode":"between"},"failures":[53,48,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,142,143,143,144,144,145,145,17,17,146,146,147,147,148,148,18,18,19,19,149,149,150,150,151,151,152,152,153,153,154,154,20,20,21,21,155,155,156,156,157,157,22,22,158,158,159,159,160,160,23,23,161,161,162,162,163,163,24,24,25,25,26,26,164,164,165,165,27,27,28,28,29,29,166,166,167,167,30,30,31,31,168,168,169,169,170,170,32,32,33,33,34,34,171,171,35,35,172,172,173,173,174,174,36,36,37,37,175,175,38,38,176,176,39,39,52,52,177,177,178,178,40,40,179,179,41,41,180,180,181,181,182,182,42,42,183,183,43,43,44,44,184,184,45,45,185,185,186,186,187,187,188,188,189,189,190,190,191,191,192,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,216,217,217,218,218,219,219,220,220,221,221,222,222,223,223,224,224,225,225,226,226,227,227,228,228,229,229,230,230,231,231],"tindex":"247725b1-3e51-11e6-a517-950f9b08e2b9","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1654","type":"CtMethodImpl","sourcecode":"protected void setUseIdentityHashCode(final boolean useIdentityHashCode) {\n    if (useIdentityHashCode) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.this.boolean = useIdentityHashCode;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"between":"useIdentityHashCode"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:537","type":"CtVariableReadImpl","sourcecode":"detail"},"failures":[232,233,234,235,236,237],"tindex":"24774cc2-3e51-11e6-a517-ad65ab1d2ccd","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:268","type":"CtMethodImpl","sourcecode":"public static int reflectionCompare(final java.lang.Object lhs, final java.lang.Object rhs, final boolean compareTransients, final java.lang.Class<?> reflectUpToClass, final java.lang.String... excludeFields) {\n    if (compareTransients) {\n        {\n            if (lhs == rhs) {\n                return 0;\n            } \n            if ((lhs == null) || (rhs == null)) {\n                throw new java.lang.NullPointerException();\n            } \n            java.lang.Class<?> java.lang.Class<?> = lhs.getClass();\n            if (!(lhsClazz.isInstance(rhs))) {\n                throw new java.lang.ClassCastException();\n            } \n            final org.apache.commons.lang3.builder.CompareToBuilder org.apache.commons.lang3.builder.CompareToBuilder = new org.apache.commons.lang3.builder.CompareToBuilder();\n            org.apache.commons.lang3.builder.CompareToBuilder.reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);\n            while (((lhsClazz.getSuperclass()) != null) && (lhsClazz != reflectUpToClass)) {\n                lhsClazz = lhsClazz.getSuperclass();\n                org.apache.commons.lang3.builder.CompareToBuilder.reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);\n            }\n            return compareToBuilder.toComparison();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"detail":"compareTransients"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:989","type":"CtBinaryOperatorImpl","sourcecode":"(value < start) || (value > end)"},"failures":[238,239,240],"tindex":"247773d3-3e51-11e6-a517-25f482c411ae","method":{"position":"org.apache.commons.lang3.math.Fraction:249","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.math.Fraction getFraction(double value) {\n    if ((value < value) || (value > value)) {\n        {\n            final int int = value < 0 ? -1 : 1;\n            value = java.lang.Math.abs(value);\n            if ((value > (java.lang.Integer.java.lang.Integer.int)) || (java.lang.Double.isNaN(value))) {\n                throw new java.lang.ArithmeticException(\"The value must not be greater than Integer.MAX_VALUE or NaN\");\n            } \n            final int int = ((int)(value));\n            value -= wholeNumber;\n            int int = 0;\n            int int = 1;\n            int int = 1;\n            int int = 0;\n            int int = 0;\n            int int = 0;\n            int int = ((int)(value));\n            int int = 0;\n            double double = 1;\n            double double = 0;\n            double double = value - a1;\n            double double = 0;\n            double double;\n            double double = java.lang.Double.java.lang.Double.double;\n            double double;\n            int int = 1;\n            do {\n                delta1 = delta2;\n                a2 = ((int)(x1 / y1));\n                x2 = y1;\n                y2 = x1 - (a2 * y1);\n                numer2 = (a1 * numer1) + numer0;\n                denom2 = (a1 * denom1) + denom0;\n                fraction = ((double)(numer2)) / ((double)(denom2));\n                delta2 = java.lang.Math.abs((value - fraction));\n                a1 = a2;\n                x1 = x2;\n                y1 = y2;\n                numer0 = numer1;\n                denom0 = denom1;\n                numer1 = numer2;\n                denom1 = denom2;\n                i++;\n            } while ((((delta1 > delta2) && (denom2 <= 10000)) && (denom2 > 0)) && (i < 25) );\n            if (i == 25) {\n                throw new java.lang.ArithmeticException(\"Unable to convert double to fraction\");\n            } \n            return org.apache.commons.lang3.math.Fraction.getReducedFraction(((numer0 + (wholeNumber * denom0)) * sign), denom0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"value","end":"value","value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1040","type":"CtBinaryOperatorImpl","sourcecode":"suffixMatcher == null"},"failures":[241],"tindex":"247773d4-3e51-11e6-a517-cd6152c22e47","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2375","type":"CtMethodImpl","sourcecode":"public int indexOf(final org.apache.commons.lang3.text.StrMatcher matcher) {\n    if (matcher == null) {\n        {\n            return indexOf(matcher, 0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"suffixMatcher":"matcher"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6509","type":"CtBinaryOperatorImpl","sourcecode":"at == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)"},"failures":[],"tindex":"24779ae5-3e51-11e6-a517-6b2782afa04b","method":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:461","type":"CtMethodImpl","sourcecode":"private static java.lang.String paddedValue(final long value, final boolean padWithZeros, final int count) {\n    if (count == count) {\n        {\n            final java.lang.String java.lang.String = java.lang.Long.toString(value);\n            return padWithZeros ? org.apache.commons.lang3.StringUtils.leftPad(longString, count, '0') : longString;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND":"count","at":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:382","type":"CtInvocationImpl","sourcecode":"parsePattern.endsWith(\"ZZ\")"},"failures":[242,243,244,245,246],"tindex":"24779ae6-3e51-11e6-a517-1da9f7943246","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1837","type":"CtMethodImpl","sourcecode":"private static java.lang.StringBuilder appendAllTo(java.lang.StringBuilder buf, java.lang.String sep, java.lang.reflect.Type... types) {\n    if (sep.endsWith(\"ZZ\")) {\n        {\n            org.apache.commons.lang3.Validate.notEmpty(org.apache.commons.lang3.Validate.noNullElements(types));\n            if ((types.int) > 0) {\n                buf.append(org.apache.commons.lang3.reflect.TypeUtils.toString(types[0]));\n                for (int int = 1 ; i < (types.int) ; i++) {\n                    buf.append(sep).append(org.apache.commons.lang3.reflect.TypeUtils.toString(types[i]));\n                }\n            } \n            return buf;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parsePattern":"sep"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2332","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[247,248,249,250,251,252,253,254,255],"tindex":"24779ae7-3e51-11e6-a517-d5278c59197a","method":{"position":"org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:342","type":"CtMethodImpl","sourcecode":"private org.apache.commons.lang3.concurrent.BackgroundInitializer<?> checkName(final java.lang.String name) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(name)) {\n        {\n            final org.apache.commons.lang3.concurrent.BackgroundInitializer<?> org.apache.commons.lang3.concurrent.BackgroundInitializer<?> = java.util.Map<java.lang.String, org.apache.commons.lang3.concurrent.BackgroundInitializer<?>>.get(name);\n            if (init == null) {\n                throw new java.util.NoSuchElementException((\"No child initializer with name \" + name));\n            } \n            return init;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1792","type":"CtBinaryOperatorImpl","sourcecode":"arraySeparator == null"},"failures":[256,257],"tindex":"2477c1f8-3e51-11e6-a517-a99aad03aa97","method":{"position":"org.apache.commons.lang3.math.NumberUtils:273","type":"CtMethodImpl","sourcecode":"public static double toDouble(final java.lang.String str, final double defaultValue) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return defaultValue;\n            } \n            try {\n                return java.lang.Double.parseDouble(str);\n            } catch (final java.lang.NumberFormatException nfe) {\n                return defaultValue;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arraySeparator":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5541","type":"CtBinaryOperatorImpl","sourcecode":"count == null"},"failures":[258],"tindex":"2477c1f9-3e51-11e6-a517-e39f98f91472","method":{"position":"org.apache.commons.lang3.mutable.MutableShort:169","type":"CtMethodImpl","sourcecode":"public void subtract(final java.lang.Number operand) {\n    if (operand == null) {\n        {\n            org.apache.commons.lang3.mutable.MutableShort.this.short -= operand.shortValue();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"operand"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:326","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[259,260],"tindex":"2477c1fa-3e51-11e6-a517-03c92bde0243","method":{"position":"org.apache.commons.lang3.ObjectUtils:185","type":"CtMethodImpl","sourcecode":"public static boolean notEqual(final java.lang.Object object1, final java.lang.Object object2) {\n    if (object2 == object2) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.lang3.ObjectUtils.equals(object1, object2)) == false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"object2","rhs":"object2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:577","type":"CtBinaryOperatorImpl","sourcecode":"strLen > 0"},"failures":[261],"tindex":"2477e90b-3e51-11e6-a517-29e616c4ff43","method":{"position":"org.apache.commons.lang3.Conversion:938","type":"CtMethodImpl","sourcecode":"public static int hexToInt(final java.lang.String src, final int srcPos, final int dstInit, final int dstPos, final int nHex) {\n    if (srcPos > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nHex) {\n                return dstInit;\n            } \n            if ((((nHex - 1) * 4) + dstPos) >= 32) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+dstPos is greather or equal to than 32\");\n            } \n            int int = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nHex ; i++) {\n                shift = (i * 4) + dstPos;\n                final int int = (15 & (org.apache.commons.lang3.Conversion.hexDigitToInt(src.charAt((i + srcPos))))) << shift;\n                final int int = 15 << shift;\n                out = (out & (~mask)) | bits;\n            }\n            return out;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strLen":"srcPos"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1080","type":"CtUnaryOperatorImpl","sourcecode":"!offsetSet"},"failures":[],"tindex":"2477e90c-3e51-11e6-a517-27e09431dbf9","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:941","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final short[] array, final boolean fullDetail) {\n    if (!fullDetail) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, java.lang.Boolean.valueOf(fullDetail));\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offsetSet":"fullDetail"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6771","type":"CtBinaryOperatorImpl","sourcecode":"n > m"},"failures":[262,263],"tindex":"2478101d-3e51-11e6-a517-9bf97490f0d6","method":{"position":"org.apache.commons.lang3.RandomStringUtils:309","type":"CtMethodImpl","sourcecode":"public static java.lang.String random(final int count, final java.lang.String chars) {\n    if (count > count) {\n        {\n            if (chars == null) {\n                return org.apache.commons.lang3.RandomStringUtils.random(count, 0, 0, false, false, null, org.apache.commons.lang3.RandomStringUtils.org.apache.commons.lang3.RandomStringUtils.java.util.Random);\n            } \n            return org.apache.commons.lang3.RandomStringUtils.random(count, chars.toCharArray());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"count","n":"count"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.mutable.MutableShort:246","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof org.apache.commons.lang3.mutable.MutableShort"},"failures":[264,265,266,267,268],"tindex":"2478101e-3e51-11e6-a517-397672176b35","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:508","type":"CtMethodImpl","sourcecode":"public static void writeStaticField(final java.lang.reflect.Field field, final java.lang.Object value, final boolean forceAccess) throws java.lang.IllegalAccessException {\n    if (value instanceof org.apache.commons.lang3.mutable.MutableShort) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((field != null), \"The field must not be null\");\n            org.apache.commons.lang3.Validate.isTrue(java.lang.reflect.Modifier.isStatic(field.getModifiers()), \"The field %s.%s is not static\", field.getDeclaringClass().getName(), field.getName());\n            org.apache.commons.lang3.reflect.FieldUtils.writeField(field, ((java.lang.Object)(null)), value, forceAccess);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:1001","type":"CtBinaryOperatorImpl","sourcecode":"trimmer != null"},"failures":[269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,63,64,65,66,67,68,69,70,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316],"tindex":"2478101f-3e51-11e6-a517-f1daa2b3d04f","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:912","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer setQuoteMatcher(final org.apache.commons.lang3.text.StrMatcher quote) {\n    if (quote != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (quote != null) {\n                org.apache.commons.lang3.text.StrTokenizer.this.org.apache.commons.lang3.text.StrMatcher = quote;\n            } \n            return org.apache.commons.lang3.text.StrTokenizer.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"trimmer":"quote"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3400","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[317,318,319],"tindex":"24783730-3e51-11e6-a517-fbe3b2ad4419","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:767","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final short[] lhs, final short[] rhs) {\n    if (rhs == null) {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1092","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[320],"tindex":"24783731-3e51-11e6-a517-edb44b3d6857","method":{"position":"org.apache.commons.lang3.StringUtils:3399","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final short[] array, final char separator) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } \n            return org.apache.commons.lang3.StringUtils.join(array, separator, 0, array.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1049","type":"CtInvocationImpl","sourcecode":"superClass.isInterface()"},"failures":[],"tindex":"24785e42-3e51-11e6-a517-21d01cb8d378","method":{"position":"org.apache.commons.lang3.ClassUtils:1071","type":"CtMethodImpl","sourcecode":"public static java.lang.String getPackageCanonicalName(final java.lang.Class<?> cls) {\n    if (cls.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cls == null) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            return org.apache.commons.lang3.ClassUtils.getPackageCanonicalName(cls.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superClass":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.SystemUtils:1429","type":"CtBinaryOperatorImpl","sourcecode":"version == null"},"failures":[321,322],"tindex":"24785e43-3e51-11e6-a517-33e4149f11d7","method":{"position":"org.apache.commons.lang3.CharSetUtils:64","type":"CtMethodImpl","sourcecode":"public static java.lang.String squeeze(final java.lang.String str, final java.lang.String... set) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.CharSetUtils.deepEmpty(set))) {\n                return str;\n            } \n            final org.apache.commons.lang3.CharSet org.apache.commons.lang3.CharSet = org.apache.commons.lang3.CharSet.getInstance(set);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length());\n            final char[] char[] = str.toCharArray();\n            final int int = chrs.int;\n            char char = ' ';\n            char char = ' ';\n            for (int int = 0 ; i < sz ; i++) {\n                ch = chrs[i];\n                if (((ch == lastChar) && (i != 0)) && (chars.contains(ch))) {\n                    continue;\n                } \n                buffer.append(ch);\n                lastChar = ch;\n            }\n            return buffer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.NumberFormatException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:391","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[323],"tindex":"24785e44-3e51-11e6-a517-01045708571b","method":{"position":"org.apache.commons.lang3.math.NumberUtils:450","type":"CtMethodImpl","sourcecode":"public static java.lang.Number createNumber(final java.lang.String str) throws java.lang.NumberFormatException {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.NumberFormatException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (org.apache.commons.lang3.StringUtils.isBlank(str)) {\n                throw new java.lang.NumberFormatException(\"A blank string is not a valid number\");\n            } \n            final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"0x\" , \"0X\" , \"-0x\" , \"-0X\" , \"#\" , \"-#\" };\n            int int = 0;\n            for (final java.lang.String java.lang.String : hex_prefixes) {\n                if (str.startsWith(pfx)) {\n                    pfxLen += pfx.length();\n                    break;\n                } \n            }\n            if (pfxLen > 0) {\n                char char = 0;\n                for (int int = pfxLen ; i < (str.length()) ; i++) {\n                    firstSigDigit = str.charAt(i);\n                    if (firstSigDigit == '0') {\n                        pfxLen++;\n                    } else {\n                        break;\n                    }\n                }\n                final int int = (str.length()) - pfxLen;\n                if ((hexDigits > 16) || ((hexDigits == 16) && (firstSigDigit > '7'))) {\n                    return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n                } \n                if ((hexDigits > 8) || ((hexDigits == 8) && (firstSigDigit > '7'))) {\n                    return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n                } \n                return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n            } \n            final char char = str.charAt(((str.length()) - 1));\n            java.lang.String java.lang.String;\n            java.lang.String java.lang.String;\n            java.lang.String java.lang.String;\n            final int int = str.indexOf('.');\n            final int int = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;\n            int int = 0;\n            if (decPos > (-1)) {\n                if (expPos > (-1)) {\n                    if ((expPos < decPos) || (expPos > (str.length()))) {\n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                    } \n                    dec = str.substring((decPos + 1), expPos);\n                } else {\n                    dec = str.substring((decPos + 1));\n                }\n                mant = str.substring(0, decPos);\n                numDecimals = dec.length();\n            } else {\n                if (expPos > (-1)) {\n                    if (expPos > (str.length())) {\n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                    } \n                    mant = str.substring(0, expPos);\n                } else {\n                    mant = str;\n                }\n                dec = null;\n            }\n            if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {\n                if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {\n                    exp = str.substring((expPos + 1), ((str.length()) - 1));\n                } else {\n                    exp = null;\n                }\n                final java.lang.String java.lang.String = str.substring(0, ((str.length()) - 1));\n                final boolean boolean = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));\n                switch (lastChar) {\n                    case 'l' :\n                    case 'L' :\n                        if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {\n                            try {\n                                return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);\n                            } catch (final java.lang.NumberFormatException nfe) {\n                            }\n                            return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);\n                        } \n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                    case 'f' :\n                    case 'F' :\n                        try {\n                            final java.lang.Float java.lang.Float = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);\n                            if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {\n                                return f;\n                            } \n                        } catch (final java.lang.NumberFormatException nfe) {\n                        }\n                    case 'd' :\n                    case 'D' :\n                        try {\n                            final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);\n                            if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {\n                                return d;\n                            } \n                        } catch (final java.lang.NumberFormatException nfe) {\n                        }\n                        try {\n                            return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);\n                        } catch (final java.lang.NumberFormatException e) {\n                        }\n                    default :\n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                }\n            } \n            if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {\n                exp = str.substring((expPos + 1), str.length());\n            } else {\n                exp = null;\n            }\n            if ((dec == null) && (exp == null)) {\n                try {\n                    return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n                } catch (final java.lang.NumberFormatException nfe) {\n                }\n                try {\n                    return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n                } catch (final java.lang.NumberFormatException nfe) {\n                }\n                return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n            } \n            final boolean boolean = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));\n            try {\n                if (numDecimals <= 7) {\n                    final java.lang.Float java.lang.Float = org.apache.commons.lang3.math.NumberUtils.createFloat(str);\n                    if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {\n                        return f;\n                    } \n                } \n            } catch (final java.lang.NumberFormatException nfe) {\n            }\n            try {\n                if (numDecimals <= 16) {\n                    final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.createDouble(str);\n                    if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {\n                        return d;\n                    } \n                } \n            } catch (final java.lang.NumberFormatException nfe) {\n            }\n            return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5374","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"2478ac65-3e51-11e6-a517-47c3c1bd7995","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:302","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Date date, final java.lang.String pattern, final java.util.TimeZone timeZone, final java.util.Locale locale) {\n    if (pattern == null) {\n        {\n            if (pattern == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final org.apache.commons.lang3.time.FastDateFormat org.apache.commons.lang3.time.FastDateFormat = org.apache.commons.lang3.time.FastDateFormat.getInstance(pattern, timeZone, locale);\n                    return df.format(date);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1818","type":"CtBinaryOperatorImpl","sourcecode":"contentStart == null"},"failures":[71,74,75,76,82,85,86,87,125,128,129,130,133,136,137,138,142,142,143,143,144,145,145,17,146,146,147,147,148,18,19,149,150,150,151,151,152,152,154,154,20,21,161,161,164,164,165,165,27,28,29,166,167,30,31,168,171,171,35,172,172,173,173,174,36,37,52,52,178,178,40,179,179,41,180,180,184,184,45,185,188,189,190,216,219,220,221,224,227,228,229],"tindex":"2478d376-3e51-11e6-a517-712572bf3533","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:471","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.Object obj) {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, obj, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"contentStart":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1291","type":"CtBinaryOperatorImpl","sourcecode":"(size()) > 0"},"failures":[],"tindex":"2478d377-3e51-11e6-a517-a709734239d6","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2651","type":"CtMethodImpl","sourcecode":"public boolean equalsIgnoreCase(final org.apache.commons.lang3.text.StrBuilder other) {\n    if ((org.apache.commons.lang3.text.StrBuilder.this) == other) {\n        return true;\n    } \n    if ((org.apache.commons.lang3.text.StrBuilder.this.int) != (other.int)) {\n        return false;\n    } \n    final char[] char[] = org.apache.commons.lang3.text.StrBuilder.this.char[];\n    final char[] char[] = other.char[];\n    for (int int = (int) - 1 ; i >= 0 ; i--) {\n        final char char = thisBuf[i];\n        final char char = otherBuf[i];\n        if ((c1 != c2) && ((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2)))) {\n            return false;\n        } \n    }\n    return true;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.SerializationUtils:265","type":"CtBinaryOperatorImpl","sourcecode":"objectData == null"},"failures":[324],"tindex":"2478fa88-3e51-11e6-a517-cb4c62bdda59","method":{"position":"org.apache.commons.lang3.ArrayUtils:1317","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final byte[] array1, final byte[] array2) {\n    if (array1 == null) {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectData":"array1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:931","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[],"tindex":"2478fa89-3e51-11e6-a517-314b435350bb","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:401","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final float[] array) {\n    if (array == array) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2020","type":"CtBinaryOperatorImpl","sourcecode":"(size) == 0"},"failures":[325,326,327,328,329,330,331,332,333,334,335,336],"tindex":"2478fa8a-3e51-11e6-a517-c1010a2326ab","method":{"position":"org.apache.commons.lang3.time.DateUtils:774","type":"CtMethodImpl","sourcecode":"public static java.util.Date round(final java.lang.Object date, final int field) {\n    if (field == 0) {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            if (date instanceof java.util.Date) {\n                return org.apache.commons.lang3.time.DateUtils.round(((java.util.Date)(date)), field);\n            } else if (date instanceof java.util.Calendar) {\n                return org.apache.commons.lang3.time.DateUtils.round(((java.util.Calendar)(date)), field).getTime();\n            } else {\n                throw new java.lang.ClassCastException((\"Could not round \" + date));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:474","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"2479219b-3e51-11e6-a517-e34be7432189","method":{"position":"org.apache.commons.lang3.event.EventUtils:75","type":"CtMethodImpl","sourcecode":"public static <L>void bindEventsToMethod(final java.lang.Object target, final java.lang.String methodName, final java.lang.Object eventSource, final java.lang.Class<L> listenerType, final java.lang.String... eventTypes) {\n    if (target == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final L L = listenerType.cast(java.lang.reflect.Proxy.newProxyInstance(target.getClass().getClassLoader(), new java.lang.Class[]{ listenerType }, new org.apache.commons.lang3.event.EventUtils.EventBindingInvocationHandler(target , methodName , eventTypes)));\n            org.apache.commons.lang3.event.EventUtils.addEventListener(eventSource, listenerType, listener);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:936","type":"CtBinaryOperatorImpl","sourcecode":"(numerator) == ((-1) * (denominator))"},"failures":[],"tindex":"2479219c-3e51-11e6-a517-61ca623ac458","method":{"position":"org.apache.commons.lang3.time.DateUtils:700","type":"CtMethodImpl","sourcecode":"public static java.util.Date round(final java.util.Date date, final int field) {\n    if (field == ((-1) * field)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n            gval.setTime(date);\n            org.apache.commons.lang3.time.DateUtils.modify(gval, field, org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int);\n            return gval.getTime();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"numerator":"field","denominator":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5712","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))"},"failures":[337,338,91,96,103,104,106,107,108,112,339,340,341,342,343],"tindex":"247948ad-3e51-11e6-a517-2b07435f7fdf","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:670","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final long[] lhs, final long[] rhs) {\n    if ((org.apache.commons.lang3.ArrayUtils.isEmpty(lhs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(rhs))) {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs == null) || (rhs == null)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && (boolean) ; ++i) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"lhs","values":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.text.ParseException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:173","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"247948ae-3e51-11e6-a517-dd0e5d914a42","method":{"position":"org.apache.commons.lang3.time.DateUtils:310","type":"CtMethodImpl","sourcecode":"public static java.util.Date parseDateStrictly(final java.lang.String str, final java.lang.String... parsePatterns) throws java.text.ParseException {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.text.ParseException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.parseDateStrictly(str, null, parsePatterns);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2335","type":"CtBinaryOperatorImpl","sourcecode":"separator == null"},"failures":[344],"tindex":"24796fbf-3e51-11e6-a517-4557098ef75d","method":{"position":"org.apache.commons.lang3.StringUtils:1927","type":"CtMethodImpl","sourcecode":"public static boolean containsNone(final java.lang.CharSequence cs, final java.lang.String invalidChars) {\n    if (invalidChars == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((cs == null) || (invalidChars == null)) {\n                return true;\n            } \n            return org.apache.commons.lang3.StringUtils.containsNone(cs, invalidChars.toCharArray());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"invalidChars"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.reflect.InvocationTargetException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:554","type":"CtBinaryOperatorImpl","sourcecode":"str == \"true\""},"failures":[],"tindex":"24796fc0-3e51-11e6-a517-1b8f08a466ef","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:253","type":"CtMethodImpl","sourcecode":"public static java.lang.Object invokeStaticMethod(final java.lang.Class<?> cls, final java.lang.String methodName, java.lang.Object... args) throws java.lang.IllegalAccessException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (methodName == \"true\") {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            final java.lang.Class<?>[] java.lang.Class<?>[] = org.apache.commons.lang3.ClassUtils.toClass(args);\n            return org.apache.commons.lang3.reflect.MethodUtils.invokeStaticMethod(cls, methodName, args, parameterTypes);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.reflect.InvocationTargetException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"methodName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:239","type":"CtBinaryOperatorImpl","sourcecode":"(cal1 == null) || (cal2 == null)"},"failures":[345,346,347,348,349,350],"tindex":"24796fc1-3e51-11e6-a517-cb9f65dd02d9","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:744","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if ((calendar == null) || (calendar == null)) {\n        {\n            appendTo(buffer, calendar.get(int));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cal2":"calendar","cal1":"calendar"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:854","type":"CtBinaryOperatorImpl","sourcecode":"lhs == null"},"failures":[351],"tindex":"24796fc2-3e51-11e6-a517-b50b63cd7a8b","method":{"position":"org.apache.commons.lang3.ArrayUtils:1505","type":"CtMethodImpl","sourcecode":"public static void reverse(final byte[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return ;\n            } \n            org.apache.commons.lang3.ArrayUtils.reverse(array, 0, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:595","type":"CtBinaryOperatorImpl","sourcecode":"(((ch0 == 'o') || (ch0 == 'O')) && ((ch1 == 'f') || (ch1 == 'F'))) && ((ch2 == 'f') || (ch2 == 'F'))"},"failures":[],"tindex":"247996d3-3e51-11e6-a517-b3f030e57f95","method":{"position":"org.apache.commons.lang3.StringUtils:3527","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final double[] array, final char separator) {\n    if ((((separator == 'o') || (ch0 == 'O')) && ((separator == 'f') || (ch1 == 'F'))) && ((separator == 'f') || (ch2 == 'F'))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            return org.apache.commons.lang3.StringUtils.join(array, separator, 0, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch0":"separator","ch2":"separator","ch1":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2809","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[352,92],"tindex":"247996d4-3e51-11e6-a517-cb714cade317","method":{"position":"org.apache.commons.lang3.ArrayUtils:3409","type":"CtMethodImpl","sourcecode":"public static java.lang.Float[] toObject(final float[] array) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Float[];\n            } \n            final java.lang.Float[] java.lang.Float[] = new java.lang.Float[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = java.lang.Float.valueOf(array[i]);\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:274","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[353],"tindex":"2479bde5-3e51-11e6-a517-efda75e7c480","method":{"position":"org.apache.commons.lang3.EnumUtils:113","type":"CtMethodImpl","sourcecode":"public static <E extends java.lang.Enum<E>>E getEnum(final java.lang.Class<E> enumClass, final java.lang.String enumName) {\n    if (enumName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (enumName == null) {\n                return null;\n            } \n            try {\n                return java.lang.Enum.valueOf(enumClass, enumName);\n            } catch (final java.lang.IllegalArgumentException ex) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"enumName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MethodUtils:360","type":"CtInvocationImpl","sourcecode":"java.lang.reflect.Modifier.isPublic(cls.getModifiers())"},"failures":[],"tindex":"2479bde6-3e51-11e6-a517-f9312e2c7862","method":{"position":"org.apache.commons.lang3.ClassUtils:1161","type":"CtMethodImpl","sourcecode":"public static java.lang.Iterable<java.lang.Class<?>> hierarchy(final java.lang.Class<?> type, org.apache.commons.lang3.ClassUtils.Interfaces interfacesBehavior) {\n    if (java.lang.reflect.Modifier.isPublic(type.getModifiers())) {\n        {\n            final java.lang.Iterable<java.lang.Class<?>> java.lang.Iterable<java.lang.Class<?>> = new java.lang.Iterable<java.lang.Class<?>>() {\n                @java.lang.Override\n                public java.util.Iterator<java.lang.Class<?>> iterator() {\n                    final org.apache.commons.lang3.mutable.MutableObject<java.lang.Class<?>> org.apache.commons.lang3.mutable.MutableObject<java.lang.Class<?>> = new org.apache.commons.lang3.mutable.MutableObject<java.lang.Class<?>>(type);\n                    return new java.util.Iterator<java.lang.Class<?>>() {\n                        @java.lang.Override\n                        public boolean hasNext() {\n                            return (next.getValue()) != null;\n                        }\n\n                        @java.lang.Override\n                        public java.lang.Class<?> next() {\n                            final java.lang.Class<?> java.lang.Class<?> = next.getValue();\n                            next.setValue(result.getSuperclass());\n                            return result;\n                        }\n\n                        @java.lang.Override\n                        public void remove() {\n                            throw new java.lang.UnsupportedOperationException();\n                        }\n                    };\n                }\n            };\n            if (interfacesBehavior != (org.apache.commons.lang3.ClassUtils.Interfaces.org.apache.commons.lang3.ClassUtils.Interfaces.org.apache.commons.lang3.ClassUtils.Interfaces)) {\n                return classes;\n            } \n            return new java.lang.Iterable<java.lang.Class<?>>() {\n                @java.lang.Override\n                public java.util.Iterator<java.lang.Class<?>> iterator() {\n                    final java.util.Set<java.lang.Class<?>> java.util.Set<java.lang.Class<?>> = new java.util.HashSet<java.lang.Class<?>>();\n                    final java.util.Iterator<java.lang.Class<?>> java.util.Iterator<java.lang.Class<?>> = classes.iterator();\n                    return new java.util.Iterator<java.lang.Class<?>>() {\n                        java.util.Iterator<java.lang.Class<?>> interfaces = java.util.Collections.<java.lang.Class<?>>emptySet().iterator();\n\n                        @java.lang.Override\n                        public boolean hasNext() {\n                            return (java.util.Iterator<java.lang.Class<?>>.hasNext()) || (wrapped.hasNext());\n                        }\n\n                        @java.lang.Override\n                        public java.lang.Class<?> next() {\n                            if (java.util.Iterator<java.lang.Class<?>>.hasNext()) {\n                                final java.lang.Class<?> java.lang.Class<?> = java.util.Iterator<java.lang.Class<?>>.next();\n                                seenInterfaces.add(nextInterface);\n                                return nextInterface;\n                            } \n                            final java.lang.Class<?> java.lang.Class<?> = wrapped.next();\n                            final java.util.Set<java.lang.Class<?>> java.util.Set<java.lang.Class<?>> = new java.util.LinkedHashSet<java.lang.Class<?>>();\n                            walkInterfaces(currentInterfaces, nextSuperclass);\n                            java.util.Iterator<java.lang.Class<?>> = currentInterfaces.iterator();\n                            return nextSuperclass;\n                        }\n\n                        private void walkInterfaces(java.util.Set<java.lang.Class<?>> addTo, java.lang.Class<?> c) {\n                            for (java.lang.Class<?> java.lang.Class<?> : c.getInterfaces()) {\n                                if (!(seenInterfaces.contains(iface))) {\n                                    addTo.add(iface);\n                                } \n                                walkInterfaces(addTo, iface);\n                            }\n                        }\n\n                        @java.lang.Override\n                        public void remove() {\n                            throw new java.lang.UnsupportedOperationException();\n                        }\n                    };\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:195","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(className)"},"failures":[354],"tindex":"247a0c07-3e51-11e6-a517-f5c82c948e65","method":{"position":"org.apache.commons.lang3.math.NumberUtils:221","type":"CtMethodImpl","sourcecode":"public static float toFloat(final java.lang.String str, final float defaultValue) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return defaultValue;\n            } \n            try {\n                return java.lang.Float.parseFloat(str);\n            } catch (final java.lang.NumberFormatException nfe) {\n                return defaultValue;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2335","type":"CtBinaryOperatorImpl","sourcecode":"separator == null"},"failures":[355,356,357,358],"tindex":"247a0c08-3e51-11e6-a517-3b6607e23012","method":{"position":"org.apache.commons.lang3.exception.ContextedRuntimeException:253","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String getFormattedExceptionMessage(final java.lang.String baseMessage) {\n    if (baseMessage == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.exception.ExceptionContext.getFormattedExceptionMessage(baseMessage);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"baseMessage"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDateParser:360","type":"CtBinaryOperatorImpl","sourcecode":"c == 'E'"},"failures":[359],"tindex":"247a0c09-3e51-11e6-a517-0967f03504ba","method":{"position":"org.apache.commons.lang3.ArrayUtils:2404","type":"CtMethodImpl","sourcecode":"public static boolean contains(final char[] array, final char valueToFind) {\n    if (valueToFind == 'E') {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"valueToFind"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:576","type":"CtBinaryOperatorImpl","sourcecode":"((ch0 == 'o') || (ch0 == 'O')) && ((ch1 == 'n') || (ch1 == 'N'))"},"failures":[],"tindex":"247a0c0a-3e51-11e6-a517-c9153a1c3995","method":{"position":"org.apache.commons.lang3.CharRange:170","type":"CtMethodImpl","sourcecode":"public boolean contains(final char ch) {\n    if (((ch == 'o') || (ch0 == 'O')) && ((ch == 'n') || (ch1 == 'N'))) {\n        {\n            return ((ch >= (char)) && (ch <= (char))) != (boolean);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch0":"ch","ch1":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:304","type":"CtBinaryOperatorImpl","sourcecode":"lhs != rhs"},"failures":[360],"tindex":"247a331b-3e51-11e6-a517-a198253d196a","method":{"position":"org.apache.commons.lang3.text.translate.OctalUnescaper:77","type":"CtMethodImpl","sourcecode":"private boolean isZeroToThree(char ch) {\n    if (ch != ch) {\n        {\n            return (ch >= '0') && (ch <= '3');\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"ch","rhs":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:456","type":"CtBinaryOperatorImpl","sourcecode":"throwable == null"},"failures":[361,362],"tindex":"247a331c-3e51-11e6-a517-611dc7e46d27","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:671","type":"CtMethodImpl","sourcecode":"public static java.lang.String getMessage(final java.lang.Throwable th) {\n    if (th == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (th == null) {\n                return \"\";\n            } \n            final java.lang.String java.lang.String = org.apache.commons.lang3.ClassUtils.getShortClassName(th, null);\n            final java.lang.String java.lang.String = th.getMessage();\n            return (clsName + \": \") + (org.apache.commons.lang3.StringUtils.defaultString(msg));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwable":"th"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:455","type":"CtInvocationImpl","sourcecode":"fromTypeVarAssigns.isEmpty()"},"failures":[],"tindex":"247a331d-3e51-11e6-a517-03d3f8808514","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1531","type":"CtMethodImpl","sourcecode":"private static java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> mappings, java.lang.reflect.TypeVariable<?>[] variables) {\n    if (mappings.isEmpty()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.reflect.Type[] java.lang.reflect.Type[] = new java.lang.reflect.Type[variables.int];\n            int int = 0;\n            for (java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> : variables) {\n                org.apache.commons.lang3.Validate.isTrue(mappings.containsKey(var), \"missing argument mapping for %s\", org.apache.commons.lang3.reflect.TypeUtils.toString(var));\n                result[(index++)] = mappings.get(var);\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fromTypeVarAssigns":"mappings"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:224","type":"CtInvocationImpl","sourcecode":"java.lang.Double.isNaN(b)"},"failures":[],"tindex":"247a5a2e-3e51-11e6-a517-171d1933e243","method":{"position":"org.apache.commons.lang3.ArrayUtils:3319","type":"CtMethodImpl","sourcecode":"public static double[] toPrimitive(final java.lang.Double[] array, final double valueForNull) {\n    if (java.lang.Double.isNaN(valueForNull)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((valueForNull < valueForNull) || (value > valueForNull)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (array == null) {\n                        return null;\n                    } else if ((array.int) == 0) {\n                        return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.double[];\n                    } \n                    final double[] double[] = new double[array.int];\n                    for (int int = 0 ; i < (array.int) ; i++) {\n                        final java.lang.Double java.lang.Double = array[i];\n                        result[i] = b == null ? valueForNull : b.doubleValue();\n                    }\n                    return result;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"valueForNull"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:804","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[363,364,365,366,367,368,369,370,371,372],"tindex":"247a5a2f-3e51-11e6-a517-fb0a682c4a76","method":{"position":"org.apache.commons.lang3.ArrayUtils:6062","type":"CtMethodImpl","sourcecode":"static java.lang.Object removeAll(final java.lang.Object array, final java.util.BitSet indices) {\n    if (array == null) {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.getLength(array);\n            final int int = indices.cardinality();\n            final java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(array.getClass().getComponentType(), (srcLength - removals));\n            int int = 0;\n            int int = 0;\n            int int;\n            int int;\n            while ((set = indices.nextSetBit(srcIndex)) != (-1)) {\n                count = set - srcIndex;\n                if (count > 0) {\n                    java.lang.System.arraycopy(array, srcIndex, result, destIndex, count);\n                    destIndex += count;\n                } \n                srcIndex = indices.nextClearBit(set);\n            }\n            count = srcLength - srcIndex;\n            if (count > 0) {\n                java.lang.System.arraycopy(array, srcIndex, result, destIndex, count);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1291","type":"CtBinaryOperatorImpl","sourcecode":"(size()) > 0"},"failures":[],"tindex":"247a8140-3e51-11e6-a517-e18b546239fa","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:134","type":"CtMethodImpl","sourcecode":"public static int reflectionCompare(final java.lang.Object lhs, final java.lang.Object rhs) {\n    return org.apache.commons.lang3.builder.CompareToBuilder.reflectionCompare(lhs, rhs, false, null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"lhs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrMatcher:206","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[],"tindex":"247a8141-3e51-11e6-a517-910d31cc30c5","method":{"position":"org.apache.commons.lang3.Validate:1174","type":"CtMethodImpl","sourcecode":"public static void isInstanceOf(final java.lang.Class<?> type, final java.lang.Object obj) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(obj)) {\n        {\n            if ((type.isInstance(obj)) == false) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, type.getName(), (obj == null ? \"null\" : obj.getClass().getName())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:137","type":"CtBinaryOperatorImpl","sourcecode":"(((org.apache.commons.lang3.StringUtils.isAllLowerCase(split[0])) && (((split[0].length()) == 2) || ((split[0].length()) == 3))) && ((split[1].length()) == 2)) && (org.apache.commons.lang3.StringUtils.isAllUpperCase(split[1]))"},"failures":[],"tindex":"247a8142-3e51-11e6-a517-a35e45c92891","method":{"position":"org.apache.commons.lang3.ArrayUtils:1227","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final java.lang.Object[] array1, final java.lang.Object[] array2) {\n    if ((((org.apache.commons.lang3.StringUtils.isAllLowerCase(array2[0])) && (((split[0].length()) == 2) || ((split[0].length()) == 3))) && ((split[1].length()) == 2)) && (org.apache.commons.lang3.StringUtils.isAllUpperCase(split[1]))) {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"split":"array2"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:733","type":"CtInvocationImpl","sourcecode":"str.equals(trueString)"},"failures":[373,374,375],"tindex":"247aa853-3e51-11e6-a517-0bca13ce2c7b","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:776","type":"CtMethodImpl","sourcecode":"public static final java.lang.String escapeCsv(final java.lang.String input) {\n    if (input.equals(input)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(input);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input","trueString":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:445","type":"CtBinaryOperatorImpl","sourcecode":"value == (org.apache.commons.lang3.time.DurationFormatUtils.S)"},"failures":[],"tindex":"247aa854-3e51-11e6-a517-b3e50059faa6","method":{"position":"org.apache.commons.lang3.exception.DefaultExceptionContext:62","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic org.apache.commons.lang3.exception.DefaultExceptionContext setContextValue(final java.lang.String label, final java.lang.Object value) {\n    if (value == value) {\n        {\n            for (final java.util.Iterator<org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object>> java.util.Iterator<org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object>> = java.util.List<org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object>>.iterator() ; iter.hasNext() ; ) {\n                final org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object> org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object> = iter.next();\n                if (org.apache.commons.lang3.StringUtils.equals(label, p.getKey())) {\n                    iter.remove();\n                } \n            }\n            addContextValue(label, value);\n            return org.apache.commons.lang3.exception.DefaultExceptionContext.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.time.DurationFormatUtils.S":"value","value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.JavaVersion:146","type":"CtInvocationImpl","sourcecode":"\"1.7\".equals(nom)"},"failures":[],"tindex":"247aa855-3e51-11e6-a517-81cac89991bb","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:584","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final byte[] array) {\n    if (\"1.7\".equals(fieldName)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:214","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[104,105,112],"tindex":"247acf66-3e51-11e6-a517-b9d9bdef3460","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:797","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final java.lang.Object lhs, final java.lang.Object rhs) {\n    if (rhs == null) {\n        {\n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            java.lang.Object java.lang.Object;\n            if (lhs != null) {\n                objectToTest = lhs;\n            } else {\n                objectToTest = rhs;\n            }\n            if (objectToTest.getClass().isArray()) {\n                if (objectToTest instanceof boolean[]) {\n                    return append(fieldName, ((boolean[])(lhs)), ((boolean[])(rhs)));\n                } \n                if (objectToTest instanceof byte[]) {\n                    return append(fieldName, ((byte[])(lhs)), ((byte[])(rhs)));\n                } \n                if (objectToTest instanceof char[]) {\n                    return append(fieldName, ((char[])(lhs)), ((char[])(rhs)));\n                } \n                if (objectToTest instanceof double[]) {\n                    return append(fieldName, ((double[])(lhs)), ((double[])(rhs)));\n                } \n                if (objectToTest instanceof float[]) {\n                    return append(fieldName, ((float[])(lhs)), ((float[])(rhs)));\n                } \n                if (objectToTest instanceof int[]) {\n                    return append(fieldName, ((int[])(lhs)), ((int[])(rhs)));\n                } \n                if (objectToTest instanceof long[]) {\n                    return append(fieldName, ((long[])(lhs)), ((long[])(rhs)));\n                } \n                if (objectToTest instanceof short[]) {\n                    return append(fieldName, ((short[])(lhs)), ((short[])(rhs)));\n                } \n                return append(fieldName, ((java.lang.Object[])(lhs)), ((java.lang.Object[])(rhs)));\n            } \n            java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Object>(fieldName) {\n                private static final long serialVersionUID = 1L;\n\n                @java.lang.Override\n                public java.lang.Object getLeft() {\n                    return lhs;\n                }\n\n                @java.lang.Override\n                public java.lang.Object getRight() {\n                    return rhs;\n                }\n            });\n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3162","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[76,87,130,138,147,147,148,18,19,149,180,180,190,221,229],"tindex":"247acf67-3e51-11e6-a517-599b2209ffc2","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:951","type":"CtMethodImpl","sourcecode":"protected void appendSummary(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.lang.Object[] array) {\n    if (array == null) {\n        {\n            appendSummarySize(buffer, fieldName, array.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1403","type":"CtBinaryOperatorImpl","sourcecode":"(dstPos + i) == append"},"failures":[376],"tindex":"247af678-3e51-11e6-a517-1dab20c28394","method":{"position":"org.apache.commons.lang3.StringUtils:5549","type":"CtMethodImpl","sourcecode":"public static java.lang.String center(java.lang.String str, final int size, java.lang.String padStr) {\n    if ((size + size) == size) {\n        {\n            if ((str == null) || (size <= 0)) {\n                return str;\n            } \n            if (org.apache.commons.lang3.StringUtils.isEmpty(padStr)) {\n                padStr = org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = str.length();\n            final int int = size - strLen;\n            if (pads <= 0) {\n                return str;\n            } \n            str = org.apache.commons.lang3.StringUtils.leftPad(str, (strLen + (pads / 2)), padStr);\n            str = org.apache.commons.lang3.StringUtils.rightPad(str, size, padStr);\n            return str;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"size","i":"size","append":"size"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6853","type":"CtBinaryOperatorImpl","sourcecode":"threshold < 0"},"failures":[377],"tindex":"247af679-3e51-11e6-a517-e7507ae481c2","method":{"position":"org.apache.commons.lang3.StringUtils:1302","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final java.lang.CharSequence seq, final java.lang.CharSequence searchSeq, final int startPos) {\n    if (startPos < 0) {\n        {\n            if ((seq == null) || (searchSeq == null)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"threshold":"startPos"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1520","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[378],"tindex":"247b1d8a-3e51-11e6-a517-79b38a7175d1","method":{"position":"org.apache.commons.lang3.ArrayUtils:4124","type":"CtMethodImpl","sourcecode":"public static double[] add(final double[] array, final double element) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final double[] double[] = ((double[])(org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(array, java.lang.Double.java.lang.Double.java.lang.Class<java.lang.Double>)));\n            newArray[((newArray.int) - 1)] = element;\n            return newArray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:244","type":"CtBinaryOperatorImpl","sourcecode":"map == null"},"failures":[379],"tindex":"247b1d8b-3e51-11e6-a517-53f7f641fdf4","method":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:243","type":"CtMethodImpl","sourcecode":"public static <K, V>V putIfAbsent(final java.util.concurrent.ConcurrentMap<K, V> map, final K key, final V value) {\n    if (map == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (map == null) {\n                return null;\n            } \n            final V V = map.putIfAbsent(key, value);\n            return result != null ? result : value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:811","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[],"tindex":"247b1d8c-3e51-11e6-a517-affc0cd9635c","method":{"position":"org.apache.commons.lang3.ArrayUtils:1299","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final char[] array1, final char[] array2) {\n    if (array1 == array1) {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array1","rhs":"array1"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1389","type":"CtBinaryOperatorImpl","sourcecode":"hasDecPoint || hasExp"},"failures":[380,381,382],"tindex":"247b1d8d-3e51-11e6-a517-f3043647068c","method":{"position":"org.apache.commons.lang3.ArrayUtils:2850","type":"CtMethodImpl","sourcecode":"public static int indexOf(final boolean[] array, final boolean valueToFind) {\n    if (valueToFind || valueToFind) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind, 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"hasDecPoint":"valueToFind","hasExp":"valueToFind"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:262","type":"CtBinaryOperatorImpl","sourcecode":"value == trueValue"},"failures":[],"tindex":"247b449e-3e51-11e6-a517-436368d1f379","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:218","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setFormat(final int formatElementIndex, final java.text.Format newFormat) {\n    if (formatElementIndex == formatElementIndex) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"trueValue":"formatElementIndex","value":"formatElementIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:383","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.util.Calendar"},"failures":[],"tindex":"247b449f-3e51-11e6-a517-69d8ba0415ed","method":{"position":"org.apache.commons.lang3.ArrayUtils:4559","type":"CtMethodImpl","sourcecode":"private static java.lang.Object add(final java.lang.Object array, final int index, final java.lang.Object element, final java.lang.Class<?> clss) {\n    if (element instanceof java.util.Calendar) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                if (index != 0) {\n                    throw new java.lang.IndexOutOfBoundsException(((\"Index: \" + index) + \", Length: 0\"));\n                } \n                final java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(clss, 1);\n                java.lang.reflect.Array.set(joinedArray, 0, element);\n                return joinedArray;\n            } \n            final int int = java.lang.reflect.Array.getLength(array);\n            if ((index > length) || (index < 0)) {\n                throw new java.lang.IndexOutOfBoundsException((((\"Index: \" + index) + \", Length: \") + length));\n            } \n            final java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(clss, (length + 1));\n            java.lang.System.arraycopy(array, 0, result, 0, index);\n            java.lang.reflect.Array.set(result, index, element);\n            if (index < length) {\n                java.lang.System.arraycopy(array, index, result, (index + 1), (length - index));\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6765","type":"CtBinaryOperatorImpl","sourcecode":"n == 0"},"failures":[383],"tindex":"247b44a0-3e51-11e6-a517-81075af2a77c","method":{"position":"org.apache.commons.lang3.StringUtils:3710","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final byte[] array, final char separator, final int startIndex, final int endIndex) {\n    if (endIndex == 0) {\n        {\n            if (array == null) {\n                return null;\n            } \n            final int int = endIndex - startIndex;\n            if (noOfItems <= 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((noOfItems * 16));\n            for (int int = startIndex ; i < endIndex ; i++) {\n                if (i > startIndex) {\n                    buf.append(separator);\n                } \n                buf.append(array[i]);\n            }\n            return buf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"endIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:1110","type":"CtBinaryOperatorImpl","sourcecode":"className == null"},"failures":[384],"tindex":"247b6bb1-3e51-11e6-a517-d18fcc1021f3","method":{"position":"org.apache.commons.lang3.ClassPathUtils:80","type":"CtMethodImpl","sourcecode":"public static java.lang.String toFullyQualifiedName(final java.lang.Package context, final java.lang.String resourceName) {\n    if (resourceName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.notNull(context, \"Parameter '%s' must not be null!\", \"context\");\n            org.apache.commons.lang3.Validate.notNull(resourceName, \"Parameter '%s' must not be null!\", \"resourceName\");\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            sb.append(context.getName());\n            sb.append(\".\");\n            sb.append(resourceName);\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"resourceName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:833","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof double[]"},"failures":[],"tindex":"247b6bb2-3e51-11e6-a517-9b7370bb1a32","method":{"position":"org.apache.commons.lang3.ArrayUtils:189","type":"CtMethodImpl","sourcecode":"public static int hashCode(final java.lang.Object array) {\n    if (array instanceof double[]) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.lang3.builder.HashCodeBuilder().append(array).toHashCode();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2517","type":"CtBinaryOperatorImpl","sourcecode":"((str == null) || (org.apache.commons.lang3.StringUtils.isEmpty(open))) || (org.apache.commons.lang3.StringUtils.isEmpty(close))"},"failures":[],"tindex":"247b6bb3-3e51-11e6-a517-0fc3177e0709","method":{"position":"org.apache.commons.lang3.ObjectUtils:340","type":"CtMethodImpl","sourcecode":"public static void identityToString(final java.lang.StringBuffer buffer, final java.lang.Object object) {\n    if (((object == null) || (org.apache.commons.lang3.StringUtils.isEmpty(object))) || (org.apache.commons.lang3.StringUtils.isEmpty(object))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                throw new java.lang.NullPointerException(\"Cannot get the toString of a null identity\");\n            } \n            buffer.append(object.getClass().getName()).append('@').append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(object)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"object","close":"object","open":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.LookupTranslator:53","type":"CtBinaryOperatorImpl","sourcecode":"sz < _shortest"},"failures":[],"tindex":"247b92c4-3e51-11e6-a517-2b50f3a738d4","method":{"position":"org.apache.commons.lang3.ArrayUtils:2227","type":"CtMethodImpl","sourcecode":"public static int indexOf(final short[] array, final short valueToFind, int startIndex) {\n    if (startIndex < startIndex) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                startIndex = 0;\n            } \n            for (int int = startIndex ; i < (array.int) ; i++) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"_shortest":"startIndex","sz":"startIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6689","type":"CtBinaryOperatorImpl","sourcecode":"(strs[0]) == null"},"failures":[193,194,196,198,199,201,202,203],"tindex":"247b92c5-3e51-11e6-a517-93b655db6371","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:646","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ReflectionToStringBuilder setExcludeFieldNames(final java.lang.String... excludeFieldNamesParam) {\n    if ((excludeFieldNamesParam[0]) == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (excludeFieldNamesParam == null) {\n                org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.java.lang.String[] = null;\n            } else {\n                org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.java.lang.String[] = org.apache.commons.lang3.builder.ReflectionToStringBuilder.toNoNullStringArray(excludeFieldNamesParam);\n                java.util.Arrays.sort(org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.java.lang.String[]);\n            }\n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strs":"excludeFieldNamesParam"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:593","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"247bb9d6-3e51-11e6-a517-c38acad01c97","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:488","type":"CtMethodImpl","sourcecode":"public static void writeStaticField(final java.lang.reflect.Field field, final java.lang.Object value) throws java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            org.apache.commons.lang3.reflect.FieldUtils.writeStaticField(field, value, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:236","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[],"tindex":"247bb9d7-3e51-11e6-a517-c3a0d21d0ee9","method":{"position":"org.apache.commons.lang3.Validate:1225","type":"CtMethodImpl","sourcecode":"public static void isAssignableFrom(final java.lang.Class<?> superType, final java.lang.Class<?> type) {\n    if (superType == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((superType.isAssignableFrom(type)) == false) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, (type == null ? \"null\" : type.getName()), superType.getName()));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"superType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5262","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"247bb9d8-3e51-11e6-a517-c900bfeb5328","method":{"position":"org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:307","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.concurrent.ConcurrentException getException(final java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            checkName(name);\n            return java.util.Map<java.lang.String, org.apache.commons.lang3.concurrent.ConcurrentException>.get(name);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:900","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(cls, toClass))"},"failures":[],"tindex":"247be0e9-3e51-11e6-a517-37732cacfe53","method":{"position":"org.apache.commons.lang3.ClassUtils:759","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> wrapperToPrimitive(final java.lang.Class<?> cls) {\n    if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(cls, cls))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(cls);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toClass":"cls","cls":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1523","type":"CtBinaryOperatorImpl","sourcecode":"chars == null"},"failures":[385],"tindex":"247be0ea-3e51-11e6-a517-fb38782577f5","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:807","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final char[] lhs, final char[] rhs) {\n    if (rhs == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chars":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3908","type":"CtBinaryOperatorImpl","sourcecode":"array1 == null"},"failures":[],"tindex":"247c07fb-3e51-11e6-a517-85563ec86e60","method":{"position":"org.apache.commons.lang3.EnumUtils:267","type":"CtMethodImpl","sourcecode":"public static <E extends java.lang.Enum<E>>java.util.EnumSet<E> processBitVectors(final java.lang.Class<E> enumClass, final long... values) {\n    if (values == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.EnumSet<E> java.util.EnumSet<E> = java.util.EnumSet.noneOf(org.apache.commons.lang3.EnumUtils.asEnum(enumClass));\n            long[] long[] = org.apache.commons.lang3.ArrayUtils.clone(org.apache.commons.lang3.Validate.notNull(values));\n            org.apache.commons.lang3.ArrayUtils.reverse(lvalues);\n            for (final E E : enumClass.getEnumConstants()) {\n                final int int = (constant.ordinal()) / (java.lang.Long.java.lang.Long.int);\n                if ((block < (lvalues.int)) && (((lvalues[block]) & (1 << ((constant.ordinal()) % (java.lang.Long.java.lang.Long.int)))) != 0)) {\n                    results.add(constant);\n                } \n            }\n            return results;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"values"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:829","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[],"tindex":"247c07fc-3e51-11e6-a517-e950a2039653","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:434","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String format(final java.util.Calendar calendar) {\n    if (calendar == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.FastDatePrinter.format(calendar);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"calendar"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:765","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isBlank(str)"},"failures":[],"tindex":"247c07fd-3e51-11e6-a517-f3a4d05951c5","method":{"position":"org.apache.commons.lang3.reflect.TypeLiteral:99","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object obj) {\n    if (org.apache.commons.lang3.StringUtils.isBlank(obj)) {\n        {\n            if (obj == (org.apache.commons.lang3.reflect.TypeLiteral.this)) {\n                return true;\n            } \n            if ((obj instanceof org.apache.commons.lang3.reflect.TypeLiteral) == false) {\n                return false;\n            } \n            final org.apache.commons.lang3.reflect.TypeLiteral<?> org.apache.commons.lang3.reflect.TypeLiteral<?> = ((org.apache.commons.lang3.reflect.TypeLiteral<?>)(obj));\n            return org.apache.commons.lang3.reflect.TypeUtils.equals(java.lang.reflect.Type, other.java.lang.reflect.Type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSetUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[386],"tindex":"247c2f0e-3e51-11e6-a517-b90cbbf99191","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1933","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder replaceAll(final org.apache.commons.lang3.text.StrMatcher matcher, final java.lang.String replaceStr) {\n    if (replaceStr == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return replace(matcher, replaceStr, 0, int, (-1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"replaceStr"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:6033","type":"CtBinaryOperatorImpl","sourcecode":"diff < length"},"failures":[387],"tindex":"247c2f0f-3e51-11e6-a517-af316b47b787","method":{"position":"org.apache.commons.lang3.Conversion:1221","type":"CtMethodImpl","sourcecode":"public static short[] longToShortArray(final long src, final int srcPos, final short[] dst, final int dstPos, final int nShorts) {\n    if (dstPos < srcPos) {\n        {\n            if (0 == nShorts) {\n                return dst;\n            } \n            if ((((nShorts - 1) * 16) + srcPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"(nShorts-1)*16+srcPos is greather or equal to than 64\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nShorts ; i++) {\n                shift = (i * 16) + srcPos;\n                dst[(dstPos + i)] = ((short)(65535 & (src >> shift)));\n            }\n            return dst;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"srcPos","diff":"dstPos"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:357","type":"CtBinaryOperatorImpl","sourcecode":"(size) == 0"},"failures":[388],"tindex":"247c2f10-3e51-11e6-a517-03d187e4ddd0","method":{"position":"org.apache.commons.lang3.math.Fraction:546","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.math.Fraction pow(final int power) {\n    if (power == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (power == 1) {\n                return org.apache.commons.lang3.math.Fraction.this;\n            } else if (power == 0) {\n                return org.apache.commons.lang3.math.Fraction.org.apache.commons.lang3.math.Fraction.org.apache.commons.lang3.math.Fraction;\n            } else if (power < 0) {\n                if (power == (java.lang.Integer.java.lang.Integer.int)) {\n                    return org.apache.commons.lang3.math.Fraction.this.invert().pow(2).pow((-(power / 2)));\n                } \n                return org.apache.commons.lang3.math.Fraction.this.invert().pow((-power));\n            } else {\n                final org.apache.commons.lang3.math.Fraction org.apache.commons.lang3.math.Fraction = org.apache.commons.lang3.math.Fraction.this.multiplyBy(org.apache.commons.lang3.math.Fraction.this);\n                if ((power % 2) == 0) {\n                    return f.pow((power / 2));\n                } else {\n                    return f.pow((power / 2)).multiplyBy(org.apache.commons.lang3.math.Fraction.this);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"power"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1089","type":"CtBinaryOperatorImpl","sourcecode":"offset != 0"},"failures":[389],"tindex":"247c5621-3e51-11e6-a517-4375e0756d5e","method":{"position":"org.apache.commons.lang3.StringUtils:5236","type":"CtMethodImpl","sourcecode":"public static java.lang.String rightPad(final java.lang.String str, final int size) {\n    if (size != 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.rightPad(str, size, ' ');\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"size"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:465","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"247c5622-3e51-11e6-a517-73b9bbafdd6b","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:302","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Date date, final java.lang.String pattern, final java.util.TimeZone timeZone, final java.util.Locale locale) {\n    if (pattern == null) {\n        {\n            if (pattern == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final org.apache.commons.lang3.time.FastDateFormat org.apache.commons.lang3.time.FastDateFormat = org.apache.commons.lang3.time.FastDateFormat.getInstance(pattern, timeZone, locale);\n                    return df.format(date);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236082830/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
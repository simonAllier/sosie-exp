{"failureDictionary":{"org.apache.commons.lang3.StringEscapeUtilsTest.testLang911":23,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldForceAccessIllegalArgumentException1":31,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":30,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang313":20,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeUnknownEntity":27,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHtml4":12,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeEcmaScript":24,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml":29,"org.apache.commons.lang3.ArrayUtilsTest.testIsEmptyPrimitives":3,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJavaWithSlash":16,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementLongArray":2,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtml":13,"org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairs":4,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_char":35,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJson":15,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHiragana":28,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringString":33,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBefore_StringString":6,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang720":22,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringStringWithSupplementaryChars":32,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJava":14,"org.apache.commons.lang3.AnnotationUtilsTest.testHashCode":0,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlSupplementaryCharacters":19,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang708":21,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlAllCharacters":9,"org.apache.commons.lang3.BooleanUtilsTest.testOr_primitive_nullInput":7,"org.apache.commons.lang3.StringEscapeUtilsTest.testStandaloneAmphersand":11,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContains_Char":34,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeJava":10,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHexCharsHtml":25,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters":26,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml10":17,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml11":18,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvString":5,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_charInt":36,"org.apache.commons.lang3.LocaleUtilsTest.testToLocale_1Part":1,"org.apache.commons.lang3.ValidateTest.testInclusiveBetweenDouble_withMessage":8},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.AnnotationUtils:126","type":"CtBinaryOperatorImpl","sourcecode":"(a1 == null) || (a2 == null)"},"failures":[0],"tindex":"a81139b7-2e6e-11e6-99ed-8151e4f00714","method":{"position":"org.apache.commons.lang3.AnnotationUtils:167","type":"CtMethodImpl","sourcecode":"public static int hashCode(final java.lang.annotation.Annotation a) {\n    if ((a == null) || (a == null)) {\n        {\n            int int = 0;\n            final java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.Class<? extends java.lang.annotation.Annotation> = a.annotationType();\n            for (final java.lang.reflect.Method java.lang.reflect.Method : type.getDeclaredMethods()) {\n                try {\n                    final java.lang.Object java.lang.Object = m.invoke(a);\n                    if (value == null) {\n                        throw new java.lang.IllegalStateException(java.lang.String.format(\"Annotation method %s returned null\", m));\n                    } \n                    result += org.apache.commons.lang3.AnnotationUtils.hashMember(m.getName(), value);\n                } catch (final java.lang.RuntimeException ex) {\n                    throw ex;\n                } catch (final java.lang.Exception ex) {\n                    throw new java.lang.RuntimeException(ex);\n                }\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a1":"a","a2":"a"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:381","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[1],"tindex":"a8122418-2e6e-11e6-99ed-bf49b49f1696","method":{"position":"org.apache.commons.lang3.LocaleUtils:90","type":"CtMethodImpl","sourcecode":"public static java.util.Locale toLocale(final java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (str.isEmpty()) {\n                return new java.util.Locale(\"\" , \"\");\n            } \n            if (str.contains(\"#\")) {\n                throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n            } \n            final int int = str.length();\n            if (len < 2) {\n                throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n            } \n            final char char = str.charAt(0);\n            if (ch0 == '_') {\n                if (len < 3) {\n                    throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n                } \n                final char char = str.charAt(1);\n                final char char = str.charAt(2);\n                if ((!(java.lang.Character.isUpperCase(ch1))) || (!(java.lang.Character.isUpperCase(ch2)))) {\n                    throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n                } \n                if (len == 3) {\n                    return new java.util.Locale(\"\" , str.substring(1, 3));\n                } \n                if (len < 5) {\n                    throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n                } \n                if ((str.charAt(3)) != '_') {\n                    throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n                } \n                return new java.util.Locale(\"\" , str.substring(1, 3) , str.substring(4));\n            } \n            java.lang.String[] java.lang.String[] = str.split(\"_\", (-1));\n            int int = (split.int) - 1;\n            switch (occurrences) {\n                case 0 :\n                    if ((org.apache.commons.lang3.StringUtils.isAllLowerCase(str)) && ((len == 2) || (len == 3))) {\n                        return new java.util.Locale(str);\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n                    }\n                case 1 :\n                    if ((((org.apache.commons.lang3.StringUtils.isAllLowerCase(split[0])) && (((split[0].length()) == 2) || ((split[0].length()) == 3))) && ((split[1].length()) == 2)) && (org.apache.commons.lang3.StringUtils.isAllUpperCase(split[1]))) {\n                        return new java.util.Locale(split[0] , split[1]);\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n                    }\n                case 2 :\n                    if ((((org.apache.commons.lang3.StringUtils.isAllLowerCase(split[0])) && (((split[0].length()) == 2) || ((split[0].length()) == 3))) && (((split[1].length()) == 0) || (((split[1].length()) == 2) && (org.apache.commons.lang3.StringUtils.isAllUpperCase(split[1]))))) && ((split[2].length()) > 0)) {\n                        return new java.util.Locale(split[0] , split[1] , split[2]);\n                    } \n                default :\n                    throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:343","type":"CtBinaryOperatorImpl","sourcecode":"(index < 0) || (index >= (size))"},"failures":[],"tindex":"a8124b29-2e6e-11e6-99ed-5737401bc6a6","method":{"position":"org.apache.commons.lang3.CharSequenceUtils:116","type":"CtMethodImpl","sourcecode":"static int lastIndexOf(final java.lang.CharSequence cs, final int searchChar, int start) {\n    if ((start < 0) || (index >= start)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cs instanceof java.lang.String) {\n                return ((java.lang.String)(cs)).lastIndexOf(searchChar, start);\n            } else {\n                final int int = cs.length();\n                if (start < 0) {\n                    return -1;\n                } \n                if (start >= sz) {\n                    start = sz - 1;\n                } \n                for (int int = start ; i >= 0 ; --i) {\n                    if ((cs.charAt(i)) == searchChar) {\n                        return i;\n                    } \n                }\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"start","index":"start"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:915","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[2,3],"tindex":"a812723a-2e6e-11e6-99ed-43d597c84aa1","method":{"position":"org.apache.commons.lang3.ArrayUtils:3509","type":"CtMethodImpl","sourcecode":"public static boolean isEmpty(final long[] array) {\n    if (array == null) {\n        {\n            return (array == null) || ((array.int) == 0);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:510","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[4,5],"tindex":"a812723b-2e6e-11e6-99ed-a36e7332cdeb","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:776","type":"CtMethodImpl","sourcecode":"public static final java.lang.String escapeCsv(final java.lang.String input) {\n    if (input == null) {\n        {\n            return org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(input);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:208","type":"CtBinaryOperatorImpl","sourcecode":"previous != null"},"failures":[6],"tindex":"a8130e7c-2e6e-11e6-99ed-19623c4fbc0b","method":{"position":"org.apache.commons.lang3.StringUtils:2289","type":"CtMethodImpl","sourcecode":"public static java.lang.String substringBefore(final java.lang.String str, final java.lang.String separator) {\n    if (separator != null) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (separator == null)) {\n                return str;\n            } \n            if (separator.isEmpty()) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = str.indexOf(separator);\n            if (pos == (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) {\n                return str;\n            } \n            return str.substring(0, pos);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"separator"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:667","type":"CtBinaryOperatorImpl","sourcecode":"stripChars == null"},"failures":[],"tindex":"a813358d-2e6e-11e6-99ed-35d57d2e50f4","method":{"position":"org.apache.commons.lang3.ClassUtils:1043","type":"CtMethodImpl","sourcecode":"public static java.lang.String getShortCanonicalName(final java.lang.String canonicalName) {\n    if (canonicalName == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ClassUtils.getShortClassName(org.apache.commons.lang3.ClassUtils.getCanonicalName(canonicalName));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stripChars":"canonicalName"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1548","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[7],"tindex":"a8135c9e-2e6e-11e6-99ed-5166023af8f8","method":{"position":"org.apache.commons.lang3.BooleanUtils:972","type":"CtMethodImpl","sourcecode":"public static boolean or(final boolean... array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                throw new java.lang.IllegalArgumentException(\"The Array must not be null\");\n            } \n            if ((array.int) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Array is empty\");\n            } \n            for (final boolean boolean : array) {\n                if (element) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2293","type":"CtInvocationImpl","sourcecode":"separator.isEmpty()"},"failures":[8],"tindex":"a8135c9f-2e6e-11e6-99ed-612600ebda4d","method":{"position":"org.apache.commons.lang3.Validate:1010","type":"CtMethodImpl","sourcecode":"public static void inclusiveBetween(double start, double end, double value, java.lang.String message) {\n    if (message.isEmpty()) {\n        {\n            if ((value < start) || (value > end)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message));\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"message"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:461","type":"CtInvocationImpl","sourcecode":"str.startsWith(pfx)"},"failures":[],"tindex":"a81382b0-2e6e-11e6-99ed-4d95b32a92a8","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:924","type":"CtMethodImpl","sourcecode":"protected void reflectionAppendArrayDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.lang.Object array) {\n    if (array.startsWith(array)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(java.lang.String);\n            final int int = java.lang.reflect.Array.getLength(array);\n            for (int int = 0 ; i < length ; i++) {\n                final java.lang.Object java.lang.Object = java.lang.reflect.Array.get(array, i);\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                if (item == null) {\n                    appendNullText(buffer, fieldName);\n                } else {\n                    appendInternal(buffer, fieldName, item, boolean);\n                }\n            }\n            buffer.append(java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"array","pfx":"array"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:495","type":"CtBinaryOperatorImpl","sourcecode":"decPos > (-1)"},"failures":[],"tindex":"a81382b1-2e6e-11e6-99ed-93f94c350156","method":{"position":"org.apache.commons.lang3.Conversion:1006","type":"CtMethodImpl","sourcecode":"public static byte hexToByte(final java.lang.String src, final int srcPos, final byte dstInit, final int dstPos, final int nHex) {\n    if (nHex > (-1)) {\n        {\n            if (0 == nHex) {\n                return dstInit;\n            } \n            if ((((nHex - 1) * 4) + dstPos) >= 8) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+dstPos is greather or equal to than 8\");\n            } \n            byte byte = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nHex ; i++) {\n                shift = (i * 4) + dstPos;\n                final int int = (15 & (org.apache.commons.lang3.Conversion.hexDigitToInt(src.charAt((i + srcPos))))) << shift;\n                final int int = 15 << shift;\n                out = ((byte)((out & (~mask)) | bits));\n            }\n            return out;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"decPos":"nHex"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:1190","type":"CtBinaryOperatorImpl","sourcecode":"interfacesBehavior != (org.apache.commons.lang3.ClassUtils.Interfaces.INCLUDE)"},"failures":[],"tindex":"a813a9c2-2e6e-11e6-99ed-5fc3786e0b69","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:512","type":"CtMethodImpl","sourcecode":"public static java.util.Set<java.lang.reflect.Method> getOverrideHierarchy(final java.lang.reflect.Method method, org.apache.commons.lang3.ClassUtils.Interfaces interfacesBehavior) {\n    if (interfacesBehavior != interfacesBehavior) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.notNull(method);\n            final java.util.Set<java.lang.reflect.Method> java.util.Set<java.lang.reflect.Method> = new java.util.LinkedHashSet<java.lang.reflect.Method>();\n            result.add(method);\n            final java.lang.Class<?>[] java.lang.Class<?>[] = method.getParameterTypes();\n            final java.lang.Class<?> java.lang.Class<?> = method.getDeclaringClass();\n            final java.util.Iterator<java.lang.Class<?>> java.util.Iterator<java.lang.Class<?>> = org.apache.commons.lang3.ClassUtils.hierarchy(declaringClass, interfacesBehavior).iterator();\n            hierarchy.next();\n            hierarchyTraversal : while (hierarchy.hasNext()) {\n                final java.lang.Class<?> java.lang.Class<?> = hierarchy.next();\n                final java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.getMatchingAccessibleMethod(c, method.getName(), parameterTypes);\n                if (m == null) {\n                    continue;\n                } \n                if (java.util.Arrays.equals(m.getParameterTypes(), parameterTypes)) {\n                    result.add(m);\n                    continue;\n                } \n                final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(declaringClass, m.getDeclaringClass());\n                for (int int = 0 ; i < (parameterTypes.int) ; i++) {\n                    final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(typeArguments, method.getGenericParameterTypes()[i]);\n                    final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(typeArguments, m.getGenericParameterTypes()[i]);\n                    if (!(org.apache.commons.lang3.reflect.TypeUtils.equals(childType, parentType))) {\n                        continue hierarchyTraversal;\n                    } \n                }\n                result.add(m);\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.ClassUtils.Interfaces.INCLUDE":"interfacesBehavior","interfacesBehavior":"interfacesBehavior"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:797","type":"CtBinaryOperatorImpl","sourcecode":"fraction == null"},"failures":[],"tindex":"a813d0d3-2e6e-11e6-99ed-75a23da074d3","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:233","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final java.lang.Object object, final org.apache.commons.lang3.builder.ToStringStyle style, final boolean outputTransients, final boolean outputStatics) {\n    if (object == null) {\n        {\n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(object, style, outputTransients, outputStatics, null);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fraction":"object"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:623","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"a813d0d4-2e6e-11e6-99ed-3f8a9bf5c6f9","method":{"position":"org.apache.commons.lang3.time.FastDateParser:577","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nboolean addRegex(final org.apache.commons.lang3.time.FastDateParser parser, final java.lang.StringBuilder regex) {\n    if (regex == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.time.FastDateParser.escapeRegex(regex, java.lang.String, true);\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"regex"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:517","type":"CtBinaryOperatorImpl","sourcecode":"classArray == null"},"failures":[],"tindex":"a813d0d5-2e6e-11e6-99ed-edd216d33e00","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1125","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] normalizeUpperBounds(final java.lang.reflect.Type[] bounds) {\n    if (bounds == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.notNull(bounds, \"null value specified for bounds array\");\n            if ((bounds.int) < 2) {\n                return bounds;\n            } \n            final java.util.Set<java.lang.reflect.Type> java.util.Set<java.lang.reflect.Type> = new java.util.HashSet<java.lang.reflect.Type>(bounds.int);\n            for (final java.lang.reflect.Type java.lang.reflect.Type : bounds) {\n                boolean boolean = false;\n                for (final java.lang.reflect.Type java.lang.reflect.Type : bounds) {\n                    if ((type1 != type2) && (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type2, type1, null))) {\n                        subtypeFound = true;\n                        break;\n                    } \n                }\n                if (!subtypeFound) {\n                    types.add(type1);\n                } \n            }\n            return types.toArray(new java.lang.reflect.Type[types.size()]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classArray":"bounds"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:183","type":"CtBinaryOperatorImpl","sourcecode":"(tmp.length()) != (duration.length())"},"failures":[],"tindex":"a813f7e6-2e6e-11e6-99ed-31069589446e","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:641","type":"CtMethodImpl","sourcecode":"public static void writeField(final java.lang.reflect.Field field, final java.lang.Object target, final java.lang.Object value, final boolean forceAccess) throws java.lang.IllegalAccessException {\n    if ((value.length()) != (target.length())) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((field != null), \"The field must not be null\");\n            if (forceAccess && (!(field.isAccessible()))) {\n                field.setAccessible(true);\n            } else {\n                org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(field);\n            }\n            field.set(target, value);\n        }\n    } else {\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"target","tmp":"value"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.Conversion:1358","type":"CtBinaryOperatorImpl","sourcecode":"0 == nBytes"},"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],"tindex":"a813f7e7-2e6e-11e6-99ed-cb58b7c13c55","method":{"position":"org.apache.commons.lang3.text.translate.AggregateTranslator:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int translate(final java.lang.CharSequence input, final int index, final java.io.Writer out) throws java.io.IOException {\n    if (0 == index) {\n        {\n            for (final org.apache.commons.lang3.text.translate.CharSequenceTranslator org.apache.commons.lang3.text.translate.CharSequenceTranslator : org.apache.commons.lang3.text.translate.CharSequenceTranslator[]) {\n                final int int = translator.translate(input, index, out);\n                if (consumed != 0) {\n                    return consumed;\n                } \n            }\n            return 0;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBytes":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:537","type":"CtBinaryOperatorImpl","sourcecode":"(isEquals) == false"},"failures":[31],"tindex":"a8141ef8-2e6e-11e6-99ed-03ad6421b727","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:254","type":"CtMethodImpl","sourcecode":"public static java.lang.Object readStaticField(final java.lang.reflect.Field field, final boolean forceAccess) throws java.lang.IllegalAccessException {\n    if (forceAccess == false) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((field != null), \"The field must not be null\");\n            org.apache.commons.lang3.Validate.isTrue(java.lang.reflect.Modifier.isStatic(field.getModifiers()), \"The field '%s' is not static\", field.getName());\n            return org.apache.commons.lang3.reflect.FieldUtils.readField(field, ((java.lang.Object)(null)), forceAccess);\n        }\n    } else {\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEquals":"forceAccess"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2521","type":"CtBinaryOperatorImpl","sourcecode":"strLen == 0"},"failures":[32,33,34,35,36],"tindex":"a8141ef9-2e6e-11e6-99ed-3f80f7316967","method":{"position":"org.apache.commons.lang3.CharSequenceUtils:69","type":"CtMethodImpl","sourcecode":"static int indexOf(final java.lang.CharSequence cs, final int searchChar, int start) {\n    if (start == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cs instanceof java.lang.String) {\n                return ((java.lang.String)(cs)).indexOf(searchChar, start);\n            } else {\n                final int int = cs.length();\n                if (start < 0) {\n                    start = 0;\n                } \n                for (int int = start ; i < sz ; i++) {\n                    if ((cs.charAt(i)) == searchChar) {\n                        return i;\n                    } \n                }\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strLen":"start"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1979","type":"CtBinaryOperatorImpl","sourcecode":"tmp == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)"},"failures":[],"tindex":"a8141efa-2e6e-11e6-99ed-5345aeb334f0","method":{"position":"org.apache.commons.lang3.BitField:94","type":"CtMethodImpl","sourcecode":"public int getRawValue(final int holder) {\n    if (holder == holder) {\n        {\n            return holder & (int);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND":"holder","tmp":"holder"},"type":"special","returnInThen":true,"status":0}],"header":{"groupId":"org.apache.commons","transformationCount":20,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
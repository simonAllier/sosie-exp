{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":70,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":89,"org.apache.commons.lang3.math.IEEE754rUtilsTest.testLang381":26,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties":128,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Boolean":129,"org.apache.commons.lang3.reflect.TypeUtilsTest.testToLongString":95,"org.apache.commons.lang3.math.NumberUtilsTest.testLang381":114,"org.apache.commons.lang3.time.StopWatchTest.testStopWatchSplit":214,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":71,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_charArray":145,"org.apache.commons.lang3.CharSetTest.testHashCode":38,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":2,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":62,"org.apache.commons.lang3.text.StrTokenizerTest.testReset":144,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripAll":118,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":0,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":78,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":52,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice":20,"org.apache.commons.lang3.reflect.TypeUtilsTest.testWildcardType":99,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":68,"org.apache.commons.lang3.builder.DiffResultTest.testNullRhs":66,"org.apache.commons.lang3.CharRangeTest.testContains_Char":41,"org.apache.commons.lang3.StringUtilsTest.testRightPad_StringInt":203,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":11,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationISO":219,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_String":156,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEqualsHashcode":17,"org.apache.commons.lang3.StringUtilsTest.testPrependIfMissingIgnoreCase":197,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat":18,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char":166,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedFormats":21,"org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isNotIn_Normal":44,"org.apache.commons.lang3.text.StrTokenizerTest.testListArray":148,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDoubleWithStartIndexTolerance":48,"org.apache.commons.lang3.math.FractionTest.testMultiply":190,"org.apache.commons.lang3.reflect.TypeLiteralTest.testEquals":94,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawType":109,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetArrayComponentType":110,"org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntString":206,"org.apache.commons.lang3.CharSetTest.testEquals_Object":34,"org.apache.commons.lang3.reflect.TypeLiteralTest.testBasic":92,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char_char":143,"org.apache.commons.lang3.ValidateTest.testIsInstanceOf":112,"org.apache.commons.lang3.math.FractionTest.testDivide":189,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_int_int_String":191,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477":19,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISOMethod":221,"org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleStringD":127,"org.apache.commons.lang3.reflect.TypeUtilsTest.testLang820":101,"org.apache.commons.lang3.ClassUtilsTest.test_getPackageName_Object":59,"org.apache.commons.lang3.StringUtilsTest.testCenter_StringInt":207,"org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStrBuilder":184,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic1":176,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWithIgnoreCase":200,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":75,"org.apache.commons.lang3.StringUtilsTest.testAbbreviateMiddle":204,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":4,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigInteger":227,"org.apache.commons.lang3.CharSetTest.testConstructor_String_simple":33,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic2":177,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassOutputChange":147,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic3":178,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic4":179,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic5":180,"org.apache.commons.lang3.CharUtilsTest.testToIntValue_char_int":31,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLANG982":216,"org.apache.commons.lang3.builder.DiffTest.testCannotModify":87,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithNullText":23,"org.apache.commons.lang3.text.StrBuilderTest.testAsWriter":134,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":81,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char_char":169,"org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntChar":205,"org.apache.commons.lang3.StringUtilsTest.testPrependIfMissing":196,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":170,"org.apache.commons.lang3.ValidateTest.testIsInstanceOfExceptionMessage":113,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":103,"org.apache.commons.lang3.reflect.TypeUtilsTest.testDetermineTypeVariableAssignments":107,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":73,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":84,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWith":201,"org.apache.commons.lang3.CharSetTest.testContains_Char":35,"org.apache.commons.lang3.CharRangeTest.testSerialization":40,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray_NoAutoboxing":27,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":1,"org.apache.commons.lang3.math.FractionTest.testReducedFactory_int_int":185,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsArrayGenericTypes":111,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testBugzilla38401":223,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments":96,"org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer":133,"org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_3items":56,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":61,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char":132,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfByte":124,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_String_String":193,"org.apache.commons.lang3.CharUtilsTest.testToIntValue_Character_int":30,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":64,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":74,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":8,"org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterizeWithOwner":102,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":6,"org.apache.commons.lang3.CharRangeTest.testIterator":43,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":67,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":5,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripToNull_String":119,"org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isNotIn_Reversed":45,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":69,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":82,"org.apache.commons.lang3.reflect.TypeLiteralTest.testTyped":93,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testArrayList":13,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testJiraLang281":225,"org.apache.commons.lang3.text.StrTokenizerTest.testToString":146,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":80,"org.apache.commons.lang3.StringUtilsTest.testRepeat_StringInt":54,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOfType_ThrowableClassInt":29,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer":24,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection":49,"org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntChar":209,"org.apache.commons.lang3.builder.DiffResultTest.testNullStyle":63,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":141,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":60,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsInstance":98,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriod":215,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":10,"org.apache.commons.lang3.StringUtilsTest.testRepeat_StringStringInt":53,"org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntString":212,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetPrimitiveArrayComponentType":104,"org.apache.commons.lang3.math.FractionTest.testFactory_double":187,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":79,"org.apache.commons.lang3.RangeTest.testIntersectionWith":115,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char":130,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testCopyOnWriteArrayList":14,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_String_int":194,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Object":25,"org.apache.commons.lang3.BooleanUtilsTest.testXor_object_nullElementInput":57,"org.apache.commons.lang3.builder.DiffResultTest.testNullLhs":65,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":135,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStrip_StringString":120,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed1":182,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed2":183,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDuration":224,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWithAny":199,"org.apache.commons.lang3.reflect.TypeUtilsTest.testWrap":97,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int":131,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":77,"org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_2items":55,"org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterize":100,"org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleString":126,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_char_int":195,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":51,"org.apache.commons.lang3.StringUtilsTest.testLANG666":117,"org.apache.commons.lang3.CharSetTest.testSerialization":32,"org.apache.commons.lang3.builder.DiffTest.testGetFieldName":85,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty1":138,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty2":139,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddNegate":39,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":90,"org.apache.commons.lang3.mutable.MutableShortTest.testAddValuePrimitive":202,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":9,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_String":192,"org.apache.commons.lang3.BooleanUtilsTest.testXor_object_emptyInput":58,"org.apache.commons.lang3.text.StrTokenizerTest.testIteration":142,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_long":226,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset":181,"org.apache.commons.lang3.builder.DiffTest.testGetType":88,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLexx":217,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":50,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":76,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddCombinations":36,"org.apache.commons.lang3.text.StrTokenizerTest.test8":165,"org.apache.commons.lang3.text.StrTokenizerTest.test5":162,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGenericArrayType":108,"org.apache.commons.lang3.text.StrTokenizerTest.test4":161,"org.apache.commons.lang3.text.StrTokenizerTest.test7":164,"org.apache.commons.lang3.text.StrTokenizerTest.test6":163,"org.apache.commons.lang3.text.StrTokenizerTest.test1":158,"org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntChar":208,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String":157,"org.apache.commons.lang3.text.StrTokenizerTest.test3":160,"org.apache.commons.lang3.text.StrTokenizerTest.test2":159,"org.apache.commons.lang3.builder.DiffTest.testToString":86,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testLinkedList":15,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveCharArray":46,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripToEmpty_String":121,"org.apache.commons.lang3.CharRangeTest.testContains_Charrange":42,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim1":136,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim2":137,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":3,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testEdgeDurations":222,"org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntString":211,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOfType_ThrowableClass":28,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":83,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsArrayTypeClasses":106,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripEnd_StringString":122,"org.apache.commons.lang3.math.FractionTest.testPow":186,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":72,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1":149,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_char_char":16,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char":140,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3":151,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2":150,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5":153,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4":152,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationHMS":218,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7":155,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6":154,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1":175,"org.apache.commons.lang3.RangeTest.testEqualsObject":116,"org.apache.commons.lang3.math.FractionTest.testFactory_String_double":188,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfByteWithStartIndex":125,"org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables":105,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassInputChange":167,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed3":173,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed2":172,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4":174,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats":22,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed1":171,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":12,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementCharArray":47,"org.apache.commons.lang3.CharSetTest.testConstructor_String_comboNegated":37,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray":168,"org.apache.commons.lang3.reflect.TypeLiteralTest.testRaw":91,"org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringInt":210,"org.apache.commons.lang3.StringUtilsTest.testRemoveStartIgnoreCase":198,"org.apache.commons.lang3.time.StopWatchTest.testStopWatchSimpleGet":213,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStrip_String":123,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":7,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO":220},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:180","type":"CtBinaryOperatorImpl","sourcecode":"(tmp.length()) != (duration.length())"},"failures":[0,1,2,3,4,4,5,6,7,8,9,9,10,11,12,13,14,15],"tindex":"5f3f9d8d-2e73-11e6-be32-119cfe3616c6","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:606","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.util.Collection<?> coll) {\n    if ((fieldName.length()) != (fieldName.length())) {\n        {\n            buffer.append(coll);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"fieldName","tmp":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:828","type":"CtBinaryOperatorImpl","sourcecode":"objectToTest instanceof float[]"},"failures":[],"tindex":"5f4087ee-2e73-11e6-be32-dffe59c12c22","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:270","type":"CtMethodImpl","sourcecode":"public static boolean reflectionEquals(final java.lang.Object lhs, final java.lang.Object rhs, final java.lang.String... excludeFields) {\n    if (rhs instanceof float[]) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(lhs, rhs, false, null, excludeFields);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectToTest":"rhs"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:461","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isUpperCase(ch)"},"failures":[16],"tindex":"5f4087ef-2e73-11e6-be32-476db22b3904","method":{"position":"org.apache.commons.lang3.ArrayUtils:2979","type":"CtMethodImpl","sourcecode":"public static char[] toPrimitive(final java.lang.Character[] array, final char valueForNull) {\n    if (java.lang.Character.isUpperCase(valueForNull)) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.char[];\n            } \n            final char[] char[] = new char[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Character java.lang.Character = array[i];\n                result[i] = b == null ? valueForNull : b.charValue();\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"valueForNull"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1870","type":"CtBinaryOperatorImpl","sourcecode":"fieldNameValueSeparator == null"},"failures":[17,18,19,20,21,22],"tindex":"5f40af00-2e73-11e6-be32-4d7ec1c2ff2e","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:447","type":"CtMethodImpl","sourcecode":"private void seekNonWs(final java.lang.String pattern, final java.text.ParsePosition pos) {\n    if (pattern == null) {\n        {\n            int int = 0;\n            final char[] char[] = pattern.toCharArray();\n            do {\n                len = org.apache.commons.lang3.text.StrMatcher.splitMatcher().isMatch(buffer, pos.getIndex());\n                pos.setIndex(((pos.getIndex()) + len));\n            } while ((len > 0) && ((pos.getIndex()) < (pattern.length())) );\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldNameValueSeparator":"pattern"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:611","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[23,24,25],"tindex":"5f40d611-2e73-11e6-be32-0fb4887c066d","method":{"position":"org.apache.commons.lang3.text.StrBuilder:572","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final java.lang.StringBuffer str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return appendNull();\n            } \n            final int int = str.length();\n            if (strLen > 0) {\n                final int int = length();\n                ensureCapacity((len + strLen));\n                str.getChars(0, strLen, char[], len);\n                int += strLen;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:137","type":"CtInvocationImpl","sourcecode":"java.lang.Float.isNaN(a)"},"failures":[26],"tindex":"5f40d612-2e73-11e6-be32-f3724f1628e1","method":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:254","type":"CtMethodImpl","sourcecode":"public static float max(final float a, final float b) {\n    if (java.lang.Float.isNaN(a)) {\n        {\n            if (java.lang.Float.isNaN(a)) {\n                return b;\n            } else if (java.lang.Float.isNaN(b)) {\n                return a;\n            } else {\n                return java.lang.Math.max(a, b);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:179","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Arrays.equals(lhs, rhs))"},"failures":[],"tindex":"5f40fd23-2e73-11e6-be32-edb2edec9a93","method":{"position":"org.apache.commons.lang3.Conversion:283","type":"CtMethodImpl","sourcecode":"public static char binaryToHexDigit(final boolean[] src) {\n    if (!(java.util.Arrays.equals(src, src))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.Conversion.binaryToHexDigit(src, 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"src","rhs":"src"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:671","type":"CtBinaryOperatorImpl","sourcecode":"(isEquals) == false"},"failures":[27],"tindex":"5f40fd24-2e73-11e6-be32-7b5637812342","method":{"position":"org.apache.commons.lang3.ClassUtils:513","type":"CtMethodImpl","sourcecode":"public static boolean isAssignable(java.lang.Class<?>[] classArray, java.lang.Class<?>[] toClassArray, final boolean autoboxing) {\n    if (autoboxing == false) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.ArrayUtils.isSameLength(classArray, toClassArray)) == false) {\n                return false;\n            } \n            if (classArray == null) {\n                classArray = org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Class<?>[];\n            } \n            if (toClassArray == null) {\n                toClassArray = org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Class<?>[];\n            } \n            for (int int = 0 ; i < (classArray.int) ; i++) {\n                if ((org.apache.commons.lang3.ClassUtils.isAssignable(classArray[i], toClassArray[i], autoboxing)) == false) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEquals":"autoboxing"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.AnnotationUtils:227","type":"CtInvocationImpl","sourcecode":"type.isArray()"},"failures":[28,29],"tindex":"5f412435-2e73-11e6-be32-83f79e60596e","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:347","type":"CtMethodImpl","sourcecode":"public static int indexOfType(final java.lang.Throwable throwable, final java.lang.Class<?> type) {\n    if (type.isArray()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.exception.ExceptionUtils.indexOf(throwable, type, 0, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3994","type":"CtBinaryOperatorImpl","sourcecode":"separator == null"},"failures":[],"tindex":"5f414b46-2e73-11e6-be32-a13aa17a34af","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:967","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final long[] array, final java.lang.Boolean fullDetail) {\n    if (fieldName == null) {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (array == null) {\n                appendNullText(buffer, fieldName);\n            } else if (isFullDetail(fullDetail)) {\n                appendDetail(buffer, fieldName, array);\n            } else {\n                appendSummary(buffer, fieldName, array);\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"fieldName"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:527","type":"CtBinaryOperatorImpl","sourcecode":"(comparison) != 0"},"failures":[30,31],"tindex":"5f417257-2e73-11e6-be32-e196c5740cd2","method":{"position":"org.apache.commons.lang3.CharUtils:239","type":"CtMethodImpl","sourcecode":"public static int toIntValue(final char ch, final int defaultValue) {\n    if (defaultValue != 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.CharUtils.isAsciiNumeric(ch)) == false) {\n                return defaultValue;\n            } \n            return ch - 48;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"defaultValue"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5012","type":"CtBinaryOperatorImpl","sourcecode":"last == (org.apache.commons.lang3.CharUtils.LF)"},"failures":[32,33,34,35,36,37,38,39,40,41,42,43,44,45],"tindex":"5f417258-2e73-11e6-be32-2ff13023c043","method":{"position":"org.apache.commons.lang3.CharRange:126","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.CharRange isNotIn(final char start, final char end) {\n    if (start == end) {\n        {\n            return new org.apache.commons.lang3.CharRange(start , end , true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"start","org.apache.commons.lang3.CharUtils.LF":"end"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4522","type":"CtBinaryOperatorImpl","sourcecode":"end == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)"},"failures":[46,47],"tindex":"5f419969-2e73-11e6-be32-e3bdedf6e6d8","method":{"position":"org.apache.commons.lang3.ArrayUtils:4807","type":"CtMethodImpl","sourcecode":"public static char[] remove(final char[] array, final int index) {\n    if (index == index) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((char[])(org.apache.commons.lang3.ArrayUtils.remove(((java.lang.Object)(array)), index)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND":"index","end":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:754","type":"CtBinaryOperatorImpl","sourcecode":"length > 0"},"failures":[48],"tindex":"5f41996a-2e73-11e6-be32-97d236d91be0","method":{"position":"org.apache.commons.lang3.ArrayUtils:2686","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex, final double tolerance) {\n    if (startIndex > 0) {\n        {\n            if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } else if (startIndex >= (array.int)) {\n                startIndex = (array.int) - 1;\n            } \n            final double double = valueToFind - tolerance;\n            final double double = valueToFind + tolerance;\n            for (int int = startIndex ; i >= 0 ; i--) {\n                if (((array[i]) >= min) && ((array[i]) <= max)) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"startIndex"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:551","type":"CtBinaryOperatorImpl","sourcecode":"(causeFrames == null) || (wrapperFrames == null)"},"failures":[49,50,51,52],"tindex":"5f41c07b-2e73-11e6-be32-518416a66ac5","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:313","type":"CtMethodImpl","sourcecode":"static java.lang.String[] toNoNullStringArray(final java.util.Collection<java.lang.String> collection) {\n    if ((collection == null) || (collection == null)) {\n        {\n            if (collection == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.String[];\n            } \n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toNoNullStringArray(collection.toArray());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"causeFrames":"collection","wrapperFrames":"collection"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3225","type":"CtInvocationImpl","sourcecode":"str.isEmpty()"},"failures":[53,54],"tindex":"5f41e78c-2e73-11e6-be32-49cf44d793e7","method":{"position":"org.apache.commons.lang3.StringUtils:5119","type":"CtMethodImpl","sourcecode":"public static java.lang.String repeat(final java.lang.String str, final int repeat) {\n    if (str.isEmpty()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (repeat <= 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = str.length();\n            if ((repeat == 1) || (inputLength == 0)) {\n                return str;\n            } \n            if ((inputLength == 1) && (repeat <= (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int))) {\n                return org.apache.commons.lang3.StringUtils.repeat(str.charAt(0), repeat);\n            } \n            final int int = inputLength * repeat;\n            switch (inputLength) {\n                case 1 :\n                    return org.apache.commons.lang3.StringUtils.repeat(str.charAt(0), repeat);\n                case 2 :\n                    final char char = str.charAt(0);\n                    final char char = str.charAt(1);\n                    final char[] char[] = new char[outputLength];\n                    for (int int = (repeat * 2) - 2 ; i >= 0 ; i-- , i--) {\n                        output2[i] = ch0;\n                        output2[(i + 1)] = ch1;\n                    }\n                    return new java.lang.String(output2);\n                default :\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(outputLength);\n                    for (int int = 0 ; i < repeat ; i++) {\n                        buf.append(str);\n                    }\n                    return buf.toString();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1145","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(valueDelimiter)"},"failures":[],"tindex":"5f420e9d-2e73-11e6-be32-bbbfec9c8c67","method":{"position":"org.apache.commons.lang3.ObjectUtils:364","type":"CtMethodImpl","sourcecode":"public static void identityToString(final java.lang.StringBuilder builder, final java.lang.Object object) {\n    if ((org.apache.commons.lang3.ArrayUtils.isEmpty(object)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(object))) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(object)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (object == null) {\n                        throw new java.lang.NullPointerException(\"Cannot get the toString of a null identity\");\n                    } \n                    builder.append(object.getClass().getName()).append('@').append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(object)));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"valueDelimiter":"object"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.text.ParseException","condition":{"position":"org.apache.commons.lang3.JavaVersion:140","type":"CtInvocationImpl","sourcecode":"\"1.4\".equals(nom)"},"failures":[],"tindex":"5f420e9e-2e73-11e6-be32-c5a09641da5c","method":{"position":"org.apache.commons.lang3.time.DateUtils:267","type":"CtMethodImpl","sourcecode":"public static java.util.Date parseDate(final java.lang.String str, final java.lang.String... parsePatterns) throws java.text.ParseException {\n    if (\"1.4\".equals(str)) {\n        throw new java.text.ParseException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.parseDate(str, null, parsePatterns);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"str"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:1074","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[55,56,57,58],"tindex":"5f420e9f-2e73-11e6-be32-9d680fce44b8","method":{"position":"org.apache.commons.lang3.BooleanUtils:1073","type":"CtMethodImpl","sourcecode":"public static java.lang.Boolean xor(final java.lang.Boolean... array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                throw new java.lang.IllegalArgumentException(\"The Array must not be null\");\n            } \n            if ((array.int) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Array is empty\");\n            } \n            try {\n                final boolean[] boolean[] = org.apache.commons.lang3.ArrayUtils.toPrimitive(array);\n                return org.apache.commons.lang3.BooleanUtils.xor(primitive) ? java.lang.Boolean.java.lang.Boolean.java.lang.Boolean : java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n            } catch (final java.lang.NullPointerException ex) {\n                throw new java.lang.IllegalArgumentException(\"The array must not contain any null elements\");\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.AnnotationUtils:173","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[59],"tindex":"5f4235b0-2e73-11e6-be32-6f3108b3aadc","method":{"position":"org.apache.commons.lang3.ClassUtils:267","type":"CtMethodImpl","sourcecode":"public static java.lang.String getPackageName(final java.lang.Object object, final java.lang.String valueIfNull) {\n    if (object == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                return valueIfNull;\n            } \n            return org.apache.commons.lang3.ClassUtils.getPackageName(object.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"object"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:517","type":"CtBinaryOperatorImpl","sourcecode":"classArray == null"},"failures":[60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],"tindex":"5f4235b1-2e73-11e6-be32-6d3707084b29","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:68","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder withUpperBounds(java.lang.reflect.Type... bounds) {\n    if (bounds == null) {\n        {\n            org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder.this.java.lang.reflect.Type[] = bounds;\n            return org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classArray":"bounds"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffResult:75","type":"CtBinaryOperatorImpl","sourcecode":"lhs == null"},"failures":[112,113],"tindex":"5f425cc2-2e73-11e6-be32-5bf8ace95696","method":{"position":"org.apache.commons.lang3.Validate:1174","type":"CtMethodImpl","sourcecode":"public static void isInstanceOf(final java.lang.Class<?> type, final java.lang.Object obj) {\n    if (obj == null) {\n        {\n            if ((type.isInstance(obj)) == false) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, type.getName(), (obj == null ? \"null\" : obj.getClass().getName())));\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:258","type":"CtInvocationImpl","sourcecode":"java.lang.Float.isNaN(b)"},"failures":[114],"tindex":"5f425cc3-2e73-11e6-be32-9bbd88ed8101","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1190","type":"CtMethodImpl","sourcecode":"public static float min(final float a, final float b, final float c) {\n    if (java.lang.Float.isNaN(c)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.Math.min(java.lang.Math.min(a, b), c);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"c"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1072","type":"CtBinaryOperatorImpl","sourcecode":"suffix == null"},"failures":[115,116],"tindex":"5f4283d4-2e73-11e6-be32-a7a2a299ce9c","method":{"position":"org.apache.commons.lang3.Range:408","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj == null) {\n        {\n            if (obj == (org.apache.commons.lang3.Range.this)) {\n                return true;\n            } else if ((obj == null) || ((obj.getClass()) != (getClass()))) {\n                return false;\n            } else {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final org.apache.commons.lang3.Range<T> org.apache.commons.lang3.Range<T> = ((org.apache.commons.lang3.Range<T>)(obj));\n                return (T.equals(range.T)) && (T.equals(range.T));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"suffix":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4323","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.endsWithIgnoreCase(str, remove)"},"failures":[117,118,119,120,121,122,123],"tindex":"5f4283d5-2e73-11e6-be32-631fb14397a3","method":{"position":"org.apache.commons.lang3.StringUtils:661","type":"CtMethodImpl","sourcecode":"public static java.lang.String stripEnd(final java.lang.String str, final java.lang.String stripChars) {\n    if (org.apache.commons.lang3.StringUtils.endsWithIgnoreCase(str, str)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int;\n            if ((str == null) || ((end = str.length()) == 0)) {\n                return str;\n            } \n            if (stripChars == null) {\n                while ((end != 0) && (java.lang.Character.isWhitespace(str.charAt((end - 1))))) {\n                    end--;\n                }\n            } else if (stripChars.isEmpty()) {\n                return str;\n            } else {\n                while ((end != 0) && ((stripChars.indexOf(str.charAt((end - 1)))) != (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int))) {\n                    end--;\n                }\n            }\n            return str.substring(0, end);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str","remove":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5445","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))"},"failures":[],"tindex":"5f4283d6-2e73-11e6-be32-53b0ca727a07","method":{"position":"org.apache.commons.lang3.ObjectUtils:364","type":"CtMethodImpl","sourcecode":"public static void identityToString(final java.lang.StringBuilder builder, final java.lang.Object object) {\n    if ((org.apache.commons.lang3.ArrayUtils.isEmpty(object)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(object))) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(object)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (object == null) {\n                        throw new java.lang.NullPointerException(\"Cannot get the toString of a null identity\");\n                    } \n                    builder.append(object.getClass().getName()).append('@').append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(object)));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"object","values":"object"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1483","type":"CtBinaryOperatorImpl","sourcecode":"(dstPos + i) == append"},"failures":[124,125],"tindex":"5f42aae7-2e73-11e6-be32-29f8a8eb79ca","method":{"position":"org.apache.commons.lang3.ArrayUtils:2481","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {\n    if ((startIndex + startIndex) == startIndex) {\n        {\n            if (array == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } else if (startIndex >= (array.int)) {\n                startIndex = (array.int) - 1;\n            } \n            for (int int = startIndex ; i >= 0 ; i--) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"startIndex","i":"startIndex","append":"startIndex"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4997","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[126,127],"tindex":"5f42aae8-2e73-11e6-be32-5bc031d070cd","method":{"position":"org.apache.commons.lang3.math.NumberUtils:273","type":"CtMethodImpl","sourcecode":"public static double toDouble(final java.lang.String str, final double defaultValue) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        {\n            if (str == null) {\n                return defaultValue;\n            } \n            try {\n                return java.lang.Double.parseDouble(str);\n            } catch (final java.lang.NumberFormatException nfe) {\n                return defaultValue;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:209","type":"CtBinaryOperatorImpl","sourcecode":"spaceToWrapAt >= 0"},"failures":[],"tindex":"5f42d1f9-2e73-11e6-be32-252161d4887c","method":{"position":"org.apache.commons.lang3.concurrent.TimedSemaphore:247","type":"CtMethodImpl","sourcecode":"public final synchronized void setLimit(final int limit) {\n    if (limit >= 0) {\n        {\n            org.apache.commons.lang3.concurrent.TimedSemaphore.this.int = limit;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"spaceToWrapAt":"limit"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:534","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"5f44f4da-2e73-11e6-be32-3dd75f2d83b2","method":{"position":"org.apache.commons.lang3.time.FastDateParser:306","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date parse(final java.lang.String source, final java.text.ParsePosition pos) {\n    if (source == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = pos.getIndex();\n            final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(source.substring(offset));\n            if (!(matcher.lookingAt())) {\n                return null;\n            } \n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance(java.util.TimeZone, java.util.Locale);\n            cal.clear();\n            for (int int = 0 ; i < (org.apache.commons.lang3.time.FastDateParser.Strategy[].int) ; ) {\n                final org.apache.commons.lang3.time.FastDateParser.Strategy org.apache.commons.lang3.time.FastDateParser.Strategy = org.apache.commons.lang3.time.FastDateParser.Strategy[][(i++)];\n                strategy.setCalendar(org.apache.commons.lang3.time.FastDateParser.this, cal, matcher.group(i));\n            }\n            pos.setIndex((offset + (matcher.end())));\n            return cal.getTime();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:208","type":"CtBinaryOperatorImpl","sourcecode":"((className.charAt(0)) == 'L') && ((className.charAt(((className.length()) - 1))) == ';')"},"failures":[],"tindex":"5f451beb-2e73-11e6-be32-93654b44eee4","method":{"position":"org.apache.commons.lang3.ClassUtils:1108","type":"CtMethodImpl","sourcecode":"private static java.lang.String getCanonicalName(java.lang.String className) {\n    if (((className.charAt(0)) == 'L') && ((className.charAt(((className.length()) - 1))) == ';')) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            className = org.apache.commons.lang3.StringUtils.deleteWhitespace(className);\n            if (className == null) {\n                return null;\n            } else {\n                int int = 0;\n                while (className.startsWith(\"[\")) {\n                    dim++;\n                    className = className.substring(1);\n                }\n                if (dim < 1) {\n                    return className;\n                } else {\n                    if (className.startsWith(\"L\")) {\n                        className = className.substring(1, (className.endsWith(\";\") ? (className.length()) - 1 : className.length()));\n                    } else {\n                        if ((className.length()) > 0) {\n                            className = org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.util.Map<java.lang.String, java.lang.String>.get(className.substring(0, 1));\n                        } \n                    }\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(className);\n                    for (int int = 0 ; i < dim ; i++) {\n                        canonicalClassNameBuffer.append(\"[]\");\n                    }\n                    return canonicalClassNameBuffer.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"className"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:355","type":"CtBinaryOperatorImpl","sourcecode":"ch < 256"},"failures":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184],"tindex":"5f4542fc-2e73-11e6-be32-31dfa7dffa8d","method":{"position":"org.apache.commons.lang3.text.StrBuilder:795","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic org.apache.commons.lang3.text.StrBuilder append(final char ch) {\n    if (ch < 256) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = length();\n            ensureCapacity((len + 1));\n            char[][((int)++)] = ch;\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2873","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[185,186,187,188,189,190],"tindex":"5f4542fd-2e73-11e6-be32-c5928fe04e6a","method":{"position":"org.apache.commons.lang3.math.Fraction:209","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.math.Fraction getReducedFraction(int numerator, int denominator) {\n    if (numerator < 0) {\n        {\n            if (denominator == 0) {\n                throw new java.lang.ArithmeticException(\"The denominator must not be zero\");\n            } \n            if (numerator == 0) {\n                return org.apache.commons.lang3.math.Fraction.org.apache.commons.lang3.math.Fraction.org.apache.commons.lang3.math.Fraction;\n            } \n            if ((denominator == (java.lang.Integer.java.lang.Integer.int)) && ((numerator & 1) == 0)) {\n                numerator /= 2;\n                denominator /= 2;\n            } \n            if (denominator < 0) {\n                if ((numerator == (java.lang.Integer.java.lang.Integer.int)) || (denominator == (java.lang.Integer.java.lang.Integer.int))) {\n                    throw new java.lang.ArithmeticException(\"overflow: can't negate\");\n                } \n                numerator = -numerator;\n                denominator = -denominator;\n            } \n            final int int = org.apache.commons.lang3.math.Fraction.greatestCommonDivisor(numerator, denominator);\n            numerator /= gcd;\n            denominator /= gcd;\n            return new org.apache.commons.lang3.math.Fraction(numerator , denominator);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"numerator"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:97","type":"CtInvocationImpl","sourcecode":"str.contains(\"#\")"},"failures":[191],"tindex":"5f456a0e-2e73-11e6-be32-ff13427a0a98","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1834","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder replace(final int startIndex, int endIndex, final java.lang.String replaceStr) {\n    if (replaceStr.contains(\"#\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            endIndex = validateRange(startIndex, endIndex);\n            final int int = replaceStr == null ? 0 : replaceStr.length();\n            replaceImpl(startIndex, endIndex, (endIndex - startIndex), replaceStr, insertLen);\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"replaceStr"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2521","type":"CtBinaryOperatorImpl","sourcecode":"strLen == 0"},"failures":[192,193,194,195],"tindex":"5f456a0f-2e73-11e6-be32-0dcf32aa5f4b","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2300","type":"CtMethodImpl","sourcecode":"public int indexOf(final char ch, int startIndex) {\n    if (startIndex == 0) {\n        {\n            startIndex = startIndex < 0 ? 0 : startIndex;\n            if (startIndex >= (int)) {\n                return -1;\n            } \n            final char[] char[] = char[];\n            for (int int = startIndex ; i < (int) ; i++) {\n                if ((thisBuf[i]) == ch) {\n                    return i;\n                } \n            }\n            return -1;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strLen":"startIndex"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSequenceUtils:164","type":"CtBinaryOperatorImpl","sourcecode":"cs instanceof java.lang.String"},"failures":[196,197,198,199,200,201],"tindex":"5f45df40-2e73-11e6-be32-05b53bdb2811","method":{"position":"org.apache.commons.lang3.StringUtils:7202","type":"CtMethodImpl","sourcecode":"private static boolean startsWith(final java.lang.CharSequence str, final java.lang.CharSequence prefix, final boolean ignoreCase) {\n    if (str instanceof java.lang.String) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((str == null) || (prefix == null)) {\n                return (str == null) && (prefix == null);\n            } \n            if ((prefix.length()) > (str.length())) {\n                return false;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1135","type":"CtBinaryOperatorImpl","sourcecode":"b < a"},"failures":[202],"tindex":"5f45df41-2e73-11e6-be32-bf3c1aab651f","method":{"position":"org.apache.commons.lang3.mutable.MutableShort:137","type":"CtMethodImpl","sourcecode":"public void add(final short operand) {\n    if (operand < operand) {\n        {\n            org.apache.commons.lang3.mutable.MutableShort.this.short += operand;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"operand","b":"operand"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.AggregateTranslator:53","type":"CtBinaryOperatorImpl","sourcecode":"consumed != 0"},"failures":[203,53,204,205,206,207,208,54,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225],"tindex":"5f460652-2e73-11e6-be32-43705a9794e3","method":{"position":"org.apache.commons.lang3.StringUtils:5209","type":"CtMethodImpl","sourcecode":"public static java.lang.String repeat(final char ch, final int repeat) {\n    if (repeat != 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char[] char[] = new char[repeat];\n            for (int int = repeat - 1 ; i >= 0 ; i--) {\n                buf[i] = ch;\n            }\n            return new java.lang.String(buf);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"consumed":"repeat"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3026","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[226],"tindex":"5f460653-2e73-11e6-be32-e146e81e0a29","method":{"position":"org.apache.commons.lang3.ArrayUtils:3025","type":"CtMethodImpl","sourcecode":"public static long[] toPrimitive(final java.lang.Long[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.long[];\n            } \n            final long[] long[] = new long[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = array[i].longValue();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1745","type":"CtBinaryOperatorImpl","sourcecode":"(c.getEnclosingClass()) != null"},"failures":[],"tindex":"5f462d64-2e73-11e6-be32-b1bb0d740c6d","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1742","type":"CtMethodImpl","sourcecode":"private static java.lang.String classToString(java.lang.Class<?> c) {\n    if ((c.getEnclosingClass()) != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            if ((c.getEnclosingClass()) != null) {\n                buf.append(org.apache.commons.lang3.reflect.TypeUtils.classToString(c.getEnclosingClass())).append('.').append(c.getSimpleName());\n            } else {\n                buf.append(c.getName());\n            }\n            if ((c.getTypeParameters().int) > 0) {\n                buf.append('<');\n                org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(buf, \", \", c.getTypeParameters());\n                buf.append('>');\n            } \n            return buf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:97","type":"CtInvocationImpl","sourcecode":"str.contains(\"#\")"},"failures":[210],"tindex":"5f462d65-2e73-11e6-be32-51293b00d9e2","method":{"position":"org.apache.commons.lang3.StringUtils:5348","type":"CtMethodImpl","sourcecode":"public static java.lang.String leftPad(final java.lang.String str, final int size) {\n    if (str.contains(\"#\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.leftPad(str, size, ' ');\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:507","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[227],"tindex":"5f465476-2e73-11e6-be32-f59c0cd44f0c","method":{"position":"org.apache.commons.lang3.math.NumberUtils:725","type":"CtMethodImpl","sourcecode":"public static java.math.BigInteger createBigInteger(final java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            int int = 0;\n            int int = 10;\n            boolean boolean = false;\n            if (str.startsWith(\"-\")) {\n                negate = true;\n                pos = 1;\n            } \n            if ((str.startsWith(\"0x\", pos)) || (str.startsWith(\"0x\", pos))) {\n                radix = 16;\n                pos += 2;\n            } else if (str.startsWith(\"#\", pos)) {\n                radix = 16;\n                pos++;\n            } else if ((str.startsWith(\"0\", pos)) && ((str.length()) > (pos + 1))) {\n                radix = 8;\n                pos++;\n            } \n            final java.math.BigInteger java.math.BigInteger = new java.math.BigInteger(str.substring(pos) , radix);\n            return negate ? value.negate() : value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"str"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":42,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
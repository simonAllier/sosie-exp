{"failureDictionary":{"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson":68,"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":187,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":150,"org.apache.commons.lang3.math.IEEE754rUtilsTest.testLang381":262,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfBoolean":266,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":152,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":168,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":146,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":149,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray":57,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementBooleanArray":265,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":188,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong":64,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson":174,"org.apache.commons.lang3.ArrayUtilsTest.testIsEmptyPrimitives":267,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":26,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":75,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_StrMatcher_String":232,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDifferingStyles":9,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":273,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArrayEqualAsObject":199,"org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiBooleanArray":222,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":277,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":126,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":34,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDefaults":8,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":84,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":36,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":163,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":196,"org.apache.commons.lang3.time.DateUtilsTest.testAddMonths":263,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":61,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray":56,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":121,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetMatchingAccessibleMethod":240,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":85,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":185,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDefaults":11,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude":58,"org.apache.commons.lang3.StringUtilsIsTest.testIsAlphaspace":253,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":171,"org.apache.commons.lang3.builder.DiffResultTest.testNullRhs":30,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":154,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfIntWithStartIndex":291,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":138,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":173,"org.apache.commons.lang3.ConversionTest.testShortToHex":2,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":275,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":142,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":65,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":122,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondFragmentInLargerUnitWithCalendar":258,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":132,"org.apache.commons.lang3.math.FractionTest.testMultiply":249,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex":230,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":78,"org.apache.commons.lang3.time.FastDateFormatTest.testDateDefaults":7,"org.apache.commons.lang3.builder.EqualsBuilderTest.testFloat":272,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":109,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":82,"org.apache.commons.lang3.time.DateUtilsTest.testSetMinutes":3,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":70,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":145,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDateDefaults":6,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":81,"org.apache.commons.lang3.math.FractionTest.testDivide":248,"org.apache.commons.lang3.ValidateTest.testValidIndex_charSequence":251,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":127,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":120,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":86,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":159,"org.apache.commons.lang3.StringUtilsTest.testSplit_StringString_StringStringInt":252,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeStartText":40,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testBlank":169,"org.apache.commons.lang3.AnnotationUtilsTest.testNonEquivalentAnnotationsOfSameType":20,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testBlank":71,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":124,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace":235,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":176,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsOfYearWithCalendar":257,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeMethod":241,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsOfMonthWithCalendar":260,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":98,"org.apache.commons.lang3.AnnotationUtilsTest.testSameInstance":14,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementLongArray":237,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":279,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":192,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":93,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull":52,"org.apache.commons.lang3.AnnotationUtilsTest.testBothArgsNull":19,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":117,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":280,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":170,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":158,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetNullText":42,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":148,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":167,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":198,"org.apache.commons.lang3.AnnotationUtilsTest.testEquivalence":15,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":99,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":135,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":106,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":37,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithNullText":287,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":204,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_StrMatcher":236,"org.apache.commons.lang3.ArrayUtilsTest.testToObject_long":238,"org.apache.commons.lang3.AnnotationUtilsTest.testOneArgNull":12,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls":60,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentEnd":39,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":116,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":190,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":209,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":101,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":131,"org.apache.commons.lang3.builder.DiffResultTest.testNullList":24,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testNullCalendar":259,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":180,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":111,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":194,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":31,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":67,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":134,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":153,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":125,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementBooleanArray":264,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondFragmentInLargerUnitWithCalendar":261,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson":76,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher":234,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":282,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeStaticMethod":239,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":104,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping":274,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":35,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testBlank":161,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":33,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":172,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":23,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":112,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":28,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":191,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":164,"org.apache.commons.lang3.text.StrBuilderTest.testMidString":290,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":141,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfBooleanWithStartIndex":271,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer":286,"org.apache.commons.lang3.builder.DiffResultTest.testNoDifferencesString":25,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":97,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testBlank":32,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":284,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex":233,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":95,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":136,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":184,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":119,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayBoolean":225,"org.apache.commons.lang3.ArrayUtilsTest.testIsEquals":226,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":94,"org.apache.commons.lang3.StringUtilsTest.testChop":250,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":183,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testPerson":166,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":186,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":62,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":285,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":100,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":72,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":205,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":144,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":102,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testArrayList":210,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":201,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":115,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":197,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_StrMatcher_String":229,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testBlank":63,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":114,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer":288,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection":51,"org.apache.commons.lang3.builder.EqualsBuilderTest.testBooleanArrayHiddenByObject":224,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection":54,"org.apache.commons.lang3.builder.DiffResultTest.testNullStyle":27,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":103,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":22,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":165,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsofHourWithCalendar":255,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":137,"org.apache.commons.lang3.AnnotationUtilsTest.testAnnotationsOfDifferingTypes":16,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":200,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testCopyOnWriteArrayList":211,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":123,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Object":289,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":73,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":88,"org.apache.commons.lang3.builder.DiffResultTest.testNullLhs":29,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":179,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfBooleanWithStartIndex":270,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance":10,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":66,"org.apache.commons.lang3.ArrayUtilsTest.testToString":221,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentStart":41,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testBlank":177,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullLhs":207,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectEndText":50,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":89,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":278,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":276,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLong":162,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":195,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":59,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":143,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance":5,"org.apache.commons.lang3.math.FractionTest.testAdd":245,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfInt":292,"org.apache.commons.lang3.builder.DiffBuilderTest.testSameObjectIgnoresAppends":203,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":140,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectStartText":46,"org.apache.commons.lang3.AnnotationUtilsTest.testHashCode":17,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":113,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":151,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_StrMatcher":228,"org.apache.commons.lang3.mutable.MutableShortTest.testEquals":244,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":80,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArraySeparator":48,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":77,"org.apache.commons.lang3.text.StrBuilderTest.testContains_String":1,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":92,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount":231,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":55,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":193,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":139,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":128,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":178,"org.apache.commons.lang3.text.StrTokenizerTest.test8":220,"org.apache.commons.lang3.text.StrTokenizerTest.test5":217,"org.apache.commons.lang3.text.StrTokenizerTest.test4":216,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":129,"org.apache.commons.lang3.text.StrTokenizerTest.test7":219,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":130,"org.apache.commons.lang3.text.StrTokenizerTest.test6":218,"org.apache.commons.lang3.text.StrTokenizerTest.test1":213,"org.apache.commons.lang3.text.StrTokenizerTest.test3":215,"org.apache.commons.lang3.text.StrTokenizerTest.test2":214,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":105,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldSeparator":47,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testLinkedList":212,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":175,"org.apache.commons.lang3.AnnotationUtilsTest.testIsValidAnnotationMemberType":21,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":69,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":202,"org.apache.commons.lang3.ConversionTest.testByteArrayToInt":227,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert":0,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetMatchingAccessibleMethod":243,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":83,"org.apache.commons.lang3.math.FractionTest.testSubtract":247,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":91,"org.apache.commons.lang3.AnnotationUtilsTest.testGeneratedAnnotationEquivalentToRealAnnotation":18,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":206,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":133,"org.apache.commons.lang3.math.FractionTest.testPow":246,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":189,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":74,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray":53,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":38,"org.apache.commons.lang3.builder.EqualsBuilderTest.testBooleanArray":223,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayEnd":45,"org.apache.commons.lang3.builder.EqualsBuilderTest.testAccessors":293,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullRhs":208,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":147,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":90,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance":4,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":79,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":118,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":155,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":108,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayStart":49,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfBoolean":268,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldNameValueSeparator":44,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":181,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsofMinuteWithCalendar":256,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":156,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":110,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson":182,"org.apache.commons.lang3.AnnotationUtilsTest.testToString":13,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeConstructor":242,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsOfDayWithCalendar":254,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":283,"org.apache.commons.lang3.ArrayUtilsTest.testContainsBoolean":269,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":96,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":87,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeEndText":43,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":107,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":157,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":281,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":160},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrMatcher:206","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[],"tindex":"8abb1857-2e74-11e6-9e6a-e33bdbe6e5cd","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:379","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final double lhs, final double rhs) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(fieldName)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if ((java.lang.Double.doubleToLongBits(lhs)) != (java.lang.Double.doubleToLongBits(rhs))) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Double>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Double getLeft() {\n                        return java.lang.Double.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Double getRight() {\n                        return java.lang.Double.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4948","type":"CtBinaryOperatorImpl","sourcecode":"start > len"},"failures":[0],"tindex":"8abc02b8-2e74-11e6-9e6a-1ff6a79ce59b","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1647","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, final float value) {\n    if (index > index) {\n        {\n            return insert(index, java.lang.String.valueOf(value));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"index","start":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1473","type":"CtBinaryOperatorImpl","sourcecode":"(((nHexs - 1) * 4) + srcPos) >= 16"},"failures":[],"tindex":"8abc02b9-2e74-11e6-9e6a-1b1db013f721","method":{"position":"org.apache.commons.lang3.text.StrBuilder:877","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final java.lang.String str, final int startIndex, final int length) {\n    if ((((length - 1) * 4) + length) >= 16) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return append(str, startIndex, length).appendNewLine();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcPos":"length","nHexs":"length"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3088","type":"CtBinaryOperatorImpl","sourcecode":"separatorChars == null"},"failures":[1],"tindex":"8abc29ca-2e74-11e6-9e6a-6d1213a8a6c8","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2263","type":"CtMethodImpl","sourcecode":"public boolean contains(final java.lang.String str) {\n    if (str == null) {\n        {\n            return (indexOf(str, 0)) >= 0;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separatorChars":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:829","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[],"tindex":"8abc29cb-2e74-11e6-9e6a-4fa716f07f1e","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:474","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer format(final java.util.Calendar calendar, final java.lang.StringBuffer buf) {\n    if (calendar == null) {\n        {\n            return org.apache.commons.lang3.time.FastDatePrinter.format(calendar, buf);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"calendar"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2465","type":"CtBinaryOperatorImpl","sourcecode":"(strLen > 0) && (strLen <= (size))"},"failures":[],"tindex":"8abc50dc-2e74-11e6-9e6a-cd33423a5656","method":{"position":"org.apache.commons.lang3.Conversion:513","type":"CtMethodImpl","sourcecode":"public static char binaryBeMsb0ToHexDigit(boolean[] src, int srcPos) {\n    if ((srcPos > 0) && (strLen <= srcPos)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((src.int) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Cannot convert an empty array.\");\n            } \n            final int int = ((src.int) - 1) - srcPos;\n            final int int = java.lang.Math.min(4, (beSrcPos + 1));\n            final boolean[] boolean[] = new boolean[4];\n            java.lang.System.arraycopy(src, ((beSrcPos + 1) - srcLen), paddedSrc, (4 - srcLen), srcLen);\n            src = paddedSrc;\n            srcPos = 0;\n            if (src[srcPos]) {\n                if (((src.int) > (srcPos + 1)) && (src[(srcPos + 1)])) {\n                    if (((src.int) > (srcPos + 2)) && (src[(srcPos + 2)])) {\n                        if (((src.int) > (srcPos + 3)) && (src[(srcPos + 3)])) {\n                            return 'f';\n                        } else {\n                            return 'e';\n                        }\n                    } else {\n                        if (((src.int) > (srcPos + 3)) && (src[(srcPos + 3)])) {\n                            return 'd';\n                        } else {\n                            return 'c';\n                        }\n                    }\n                } else {\n                    if (((src.int) > (srcPos + 2)) && (src[(srcPos + 2)])) {\n                        if (((src.int) > (srcPos + 3)) && (src[(srcPos + 3)])) {\n                            return 'b';\n                        } else {\n                            return 'a';\n                        }\n                    } else {\n                        if (((src.int) > (srcPos + 3)) && (src[(srcPos + 3)])) {\n                            return '9';\n                        } else {\n                            return '8';\n                        }\n                    }\n                }\n            } else {\n                if (((src.int) > (srcPos + 1)) && (src[(srcPos + 1)])) {\n                    if (((src.int) > (srcPos + 2)) && (src[(srcPos + 2)])) {\n                        if (((src.int) > (srcPos + 3)) && (src[(srcPos + 3)])) {\n                            return '7';\n                        } else {\n                            return '6';\n                        }\n                    } else {\n                        if (((src.int) > (srcPos + 3)) && (src[(srcPos + 3)])) {\n                            return '5';\n                        } else {\n                            return '4';\n                        }\n                    }\n                } else {\n                    if (((src.int) > (srcPos + 2)) && (src[(srcPos + 2)])) {\n                        if (((src.int) > (srcPos + 3)) && (src[(srcPos + 3)])) {\n                            return '3';\n                        } else {\n                            return '2';\n                        }\n                    } else {\n                        if (((src.int) > (srcPos + 3)) && (src[(srcPos + 3)])) {\n                            return '1';\n                        } else {\n                            return '0';\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strLen":"srcPos","size":"srcPos"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1443","type":"CtBinaryOperatorImpl","sourcecode":"(dstPos + i) == append"},"failures":[2],"tindex":"8abc9efd-2e74-11e6-9e6a-e7bc73568442","method":{"position":"org.apache.commons.lang3.Conversion:1469","type":"CtMethodImpl","sourcecode":"public static java.lang.String shortToHex(final short src, final int srcPos, final java.lang.String dstInit, final int dstPos, final int nHexs) {\n    if ((nHexs + srcPos) == nHexs) {\n        {\n            if (0 == nHexs) {\n                return dstInit;\n            } \n            if ((((nHexs - 1) * 4) + srcPos) >= 16) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+srcPos is greather or equal to than 16\");\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(dstInit);\n            int int = 0;\n            int int = sb.length();\n            for (int int = 0 ; i < nHexs ; i++) {\n                shift = (i * 4) + srcPos;\n                final int int = 15 & (src >> shift);\n                if ((dstPos + i) == append) {\n                    ++append;\n                    sb.append(org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                } else {\n                    sb.setCharAt((dstPos + i), org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                }\n            }\n            return sb.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"nHexs","i":"srcPos","append":"nHexs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:779","type":"CtBinaryOperatorImpl","sourcecode":"delimLen > 0"},"failures":[3],"tindex":"8abcc60e-2e74-11e6-9e6a-01740f89518b","method":{"position":"org.apache.commons.lang3.time.DateUtils:599","type":"CtMethodImpl","sourcecode":"public static java.util.Date setMinutes(final java.util.Date date, final int amount) {\n    if (amount > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.set(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delimLen":"amount"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:343","type":"CtBinaryOperatorImpl","sourcecode":"(index < 0) || (index >= (size))"},"failures":[],"tindex":"8abced1f-2e74-11e6-9e6a-eb9c6661802c","method":{"position":"org.apache.commons.lang3.text.StrMatcher:333","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int isMatch(final char[] buffer, final int pos, final int bufferStart, final int bufferEnd) {\n    if ((pos < 0) || (index >= bufferEnd)) {\n        {\n            return (char) == (buffer[pos]) ? 1 : 0;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"bufferEnd","index":"pos"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:201","type":"CtBinaryOperatorImpl","sourcecode":"(locale.getCountry().length()) > 0"},"failures":[4,5,6,7,8,9,10,11],"tindex":"8abced20-2e74-11e6-9e6a-dfca81abaa5b","method":{"position":"org.apache.commons.lang3.time.FormatCache:120","type":"CtMethodImpl","sourcecode":"private F getDateTimeInstance(final java.lang.Integer dateStyle, final java.lang.Integer timeStyle, final java.util.TimeZone timeZone, java.util.Locale locale) {\n    if ((locale.getCountry().length()) > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (locale == null) {\n                locale = java.util.Locale.getDefault();\n            } \n            final java.lang.String java.lang.String = org.apache.commons.lang3.time.FormatCache.getPatternForStyle(dateStyle, timeStyle, locale);\n            return getInstance(pattern, timeZone, locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"locale":"locale"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"(isEquals) == false"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,79,80,81,82,83,84,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,142,143,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,155,155,156,156,157,157,158,158,159,159,160,160,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,168,169,169,170,170,171,171,172,172,173,173,174,174,175,175,176,176,177,177,178,178,179,179,180,180,181,181,182,182,183,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221],"tindex":"8abd1431-2e74-11e6-9e6a-bb0de7b8acf3","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1654","type":"CtMethodImpl","sourcecode":"protected void setUseIdentityHashCode(final boolean useIdentityHashCode) {\n    if (useIdentityHashCode == false) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.this.boolean = useIdentityHashCode;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEquals":"useIdentityHashCode"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3150","type":"CtBinaryOperatorImpl","sourcecode":"match || (preserveAllTokens && lastMatch)"},"failures":[222,223,224,225,226],"tindex":"8abd6252-2e74-11e6-9e6a-6f086122aa85","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:621","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final boolean lhs, final boolean rhs) {\n    if (lhs || (rhs && rhs)) {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            boolean = lhs == rhs;\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"preserveAllTokens":"rhs","lastMatch":"rhs","match":"lhs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDateParser:360","type":"CtBinaryOperatorImpl","sourcecode":"c == 'E'"},"failures":[110,110],"tindex":"8abd6253-2e74-11e6-9e6a-efd42a4b727f","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:331","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final char value) {\n    if (value == 'E') {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.EnumUtils:114","type":"CtBinaryOperatorImpl","sourcecode":"enumName == null"},"failures":[110,110],"tindex":"8abd8964-2e74-11e6-9e6a-cd18ec122d58","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:759","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final char value) {\n    if (fieldName == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendFieldStart(buffer, fieldName);\n            appendDetail(buffer, fieldName, value);\n            appendFieldEnd(buffer, fieldName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"enumName":"fieldName"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2339","type":"CtBinaryOperatorImpl","sourcecode":"pos == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)"},"failures":[227],"tindex":"8abd8965-2e74-11e6-9e6a-cd47a646366c","method":{"position":"org.apache.commons.lang3.Conversion:833","type":"CtMethodImpl","sourcecode":"public static int byteArrayToInt(final byte[] src, final int srcPos, final int dstInit, final int dstPos, final int nBytes) {\n    if (dstPos == nBytes) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((((src.int) == 0) && (srcPos == 0)) || (0 == nBytes)) {\n                return dstInit;\n            } \n            if ((((nBytes - 1) * 8) + dstPos) >= 32) {\n                throw new java.lang.IllegalArgumentException(\"(nBytes-1)*8+dstPos is greather or equal to than 32\");\n            } \n            int int = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nBytes ; i++) {\n                shift = (i * 8) + dstPos;\n                final int int = (255 & (src[(i + srcPos)])) << shift;\n                final int int = 255 << shift;\n                out = (out & (~mask)) | bits;\n            }\n            return out;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND":"nBytes","pos":"dstPos"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:612","type":"CtBinaryOperatorImpl","sourcecode":"numDecimals <= 16"},"failures":[225],"tindex":"8abd8966-2e74-11e6-9e6a-258e29947ae3","method":{"position":"org.apache.commons.lang3.ArrayUtils:1194","type":"CtMethodImpl","sourcecode":"public static boolean[] subarray(final boolean[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (endIndexExclusive <= 16) {\n        {\n            if (array == null) {\n                return null;\n            } \n            if (startIndexInclusive < 0) {\n                startIndexInclusive = 0;\n            } \n            if (endIndexExclusive > (array.int)) {\n                endIndexExclusive = array.int;\n            } \n            final int int = endIndexExclusive - startIndexInclusive;\n            if (newSize <= 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.boolean[];\n            } \n            final boolean[] boolean[] = new boolean[newSize];\n            java.lang.System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n            return subarray;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"numDecimals":"endIndexExclusive"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:939","type":"CtBinaryOperatorImpl","sourcecode":"0 == nHex"},"failures":[0],"tindex":"8abdb077-2e74-11e6-9e6a-eb35e718bee6","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1635","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, final long value) {\n    if (0 == index) {\n        {\n            return insert(index, java.lang.String.valueOf(value));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nHex":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.SerializationUtils:235","type":"CtBinaryOperatorImpl","sourcecode":"in != null"},"failures":[],"tindex":"8abdb078-2e74-11e6-9e6a-eb9c394785f4","method":{"position":"org.apache.commons.lang3.time.FastDateParser:261","type":"CtMethodImpl","sourcecode":"private void readObject(final java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {\n    if (in != null) {\n        {\n            in.defaultReadObject();\n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance(java.util.TimeZone, java.util.Locale);\n            init(definingCalendar);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5423","type":"CtBinaryOperatorImpl","sourcecode":"(padLen == 1) && (pads <= (org.apache.commons.lang3.StringUtils.PAD_LIMIT))"},"failures":[],"tindex":"8abdd789-2e74-11e6-9e6a-23c251e1b11f","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:332","type":"CtMethodImpl","sourcecode":"public static <T>int reflectionHashCode(final int initialNonZeroOddNumber, final int multiplierNonZeroOddNumber, final T object, final boolean testTransients, final java.lang.Class<? super T> reflectUpToClass, final java.lang.String... excludeFields) {\n    if ((multiplierNonZeroOddNumber == 1) && (multiplierNonZeroOddNumber <= initialNonZeroOddNumber)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                throw new java.lang.IllegalArgumentException(\"The object to build a hash code for must not be null\");\n            } \n            final org.apache.commons.lang3.builder.HashCodeBuilder org.apache.commons.lang3.builder.HashCodeBuilder = new org.apache.commons.lang3.builder.HashCodeBuilder(initialNonZeroOddNumber , multiplierNonZeroOddNumber);\n            java.lang.Class<?> java.lang.Class<?> = object.getClass();\n            org.apache.commons.lang3.builder.HashCodeBuilder.reflectionAppend(object, clazz, builder, testTransients, excludeFields);\n            while (((clazz.getSuperclass()) != null) && (clazz != reflectUpToClass)) {\n                clazz = clazz.getSuperclass();\n                org.apache.commons.lang3.builder.HashCodeBuilder.reflectionAppend(object, clazz, builder, testTransients, excludeFields);\n            }\n            return builder.toHashCode();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pads":"multiplierNonZeroOddNumber","padLen":"multiplierNonZeroOddNumber","org.apache.commons.lang3.StringUtils.PAD_LIMIT":"initialNonZeroOddNumber"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1135","type":"CtBinaryOperatorImpl","sourcecode":"b < a"},"failures":[],"tindex":"8abdd78a-2e74-11e6-9e6a-39a45ee496ef","method":{"position":"org.apache.commons.lang3.mutable.MutableShort:158","type":"CtMethodImpl","sourcecode":"public void subtract(final short operand) {\n    if (operand < operand) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableShort.this.short -= operand;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"operand","b":"operand"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2562","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[228,229,230,231,232,233,234,235,236],"tindex":"8abdfe9b-2e74-11e6-9e6a-e9c4e47b9868","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1991","type":"CtMethodImpl","sourcecode":"private org.apache.commons.lang3.text.StrBuilder replaceImpl(final org.apache.commons.lang3.text.StrMatcher matcher, final java.lang.String replaceStr, final int from, int to, int replaceCount) {\n    if (to < 0) {\n        {\n            if ((matcher == null) || ((int) == 0)) {\n                return org.apache.commons.lang3.text.StrBuilder.this;\n            } \n            final int int = replaceStr == null ? 0 : replaceStr.length();\n            final char[] char[] = char[];\n            for (int int = from ; (i < to) && (replaceCount != 0) ; i++) {\n                final int int = matcher.isMatch(buf, i, from, to);\n                if (removeLen > 0) {\n                    replaceImpl(i, (i + removeLen), removeLen, replaceStr, replaceLen);\n                    to = (to - removeLen) + replaceLen;\n                    i = (i + replaceLen) - 1;\n                    if (replaceCount > 0) {\n                        replaceCount--;\n                    } \n                } \n            }\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"to"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3908","type":"CtBinaryOperatorImpl","sourcecode":"array1 == null"},"failures":[237],"tindex":"8abdfe9c-2e74-11e6-9e6a-f7c25ff11ad0","method":{"position":"org.apache.commons.lang3.ArrayUtils:5096","type":"CtMethodImpl","sourcecode":"public static long[] removeElement(final long[] array, final long element) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2801","type":"CtBinaryOperatorImpl","sourcecode":"(index < 0) || (index > (size))"},"failures":[],"tindex":"8abdfe9d-2e74-11e6-9e6a-ab8a3badb623","method":{"position":"org.apache.commons.lang3.BooleanUtils:324","type":"CtMethodImpl","sourcecode":"public static java.lang.Boolean toBooleanObject(final int value, final int trueValue, final int falseValue, final int nullValue) {\n    if ((value < 0) || (index > falseValue)) {\n        {\n            if (value == trueValue) {\n                return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n            } \n            if (value == falseValue) {\n                return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n            } \n            if (value == nullValue) {\n                return null;\n            } \n            throw new java.lang.IllegalArgumentException(\"The Integer did not match any specified value\");\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"falseValue","index":"value"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3908","type":"CtBinaryOperatorImpl","sourcecode":"array1 == null"},"failures":[200,238],"tindex":"8abe25ae-2e74-11e6-9e6a-97b54d0b2765","method":{"position":"org.apache.commons.lang3.ArrayUtils:3069","type":"CtMethodImpl","sourcecode":"public static java.lang.Long[] toObject(final long[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Long[];\n            } \n            final java.lang.Long[] java.lang.Long[] = new java.lang.Long[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = java.lang.Long.valueOf(array[i]);\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:430","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[239,240,241,242,243],"tindex":"8abe25af-2e74-11e6-9e6a-e152df869840","method":{"position":"org.apache.commons.lang3.reflect.MemberUtils:167","type":"CtMethodImpl","sourcecode":"private static float getPrimitivePromotionCost(final java.lang.Class<?> srcClass, final java.lang.Class<?> destClass) {\n    if (srcClass == null) {\n        {\n            float float = 0.0F;\n            java.lang.Class<?> java.lang.Class<?> = srcClass;\n            if (!(cls.isPrimitive())) {\n                cost += 0.1F;\n                cls = org.apache.commons.lang3.ClassUtils.wrapperToPrimitive(cls);\n            } \n            for (int int = 0 ; (cls != destClass) && (i < (org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[].int)) ; i++) {\n                if (cls == (org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[][i])) {\n                    cost += 0.1F;\n                    if (i < ((org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[].int) - 1)) {\n                        cls = org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[][(i + 1)];\n                    } \n                } \n            }\n            return cost;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"srcClass"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:522","type":"CtBinaryOperatorImpl","sourcecode":"value instanceof char[]"},"failures":[244],"tindex":"8abe4cc0-2e74-11e6-9e6a-7dc7d0b86d26","method":{"position":"org.apache.commons.lang3.mutable.MutableShort:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj instanceof char[]) {\n        {\n            if (obj instanceof org.apache.commons.lang3.mutable.MutableShort) {\n                return (short) == (((org.apache.commons.lang3.mutable.MutableShort)(obj)).shortValue());\n            } \n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:728","type":"CtBinaryOperatorImpl","sourcecode":"str == trueString"},"failures":[],"tindex":"8abe4cc1-2e74-11e6-9e6a-930575795d9e","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:604","type":"CtMethodImpl","sourcecode":"public static final java.lang.String escapeHtml3(final java.lang.String input) {\n    if (input == input) {\n        {\n            return org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(input);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input","trueString":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:520","type":"CtBinaryOperatorImpl","sourcecode":"toClassArray == null"},"failures":[],"tindex":"8abe73d2-2e74-11e6-9e6a-f7995dde51cc","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:68","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder withUpperBounds(java.lang.reflect.Type... bounds) {\n    if (bounds == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder.this.java.lang.reflect.Type[] = bounds;\n            return org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toClassArray":"bounds"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2234","type":"CtBinaryOperatorImpl","sourcecode":"(size) <= (index + length)"},"failures":[245,246,247,248,249],"tindex":"8abe9ae3-2e74-11e6-9e6a-eb9c312f20a5","method":{"position":"org.apache.commons.lang3.math.Fraction:639","type":"CtMethodImpl","sourcecode":"private static int mulAndCheck(final int x, final int y) {\n    if (x <= (y + x)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final long long = ((long)(x)) * ((long)(y));\n            if ((m < (java.lang.Integer.java.lang.Integer.int)) || (m > (java.lang.Integer.java.lang.Integer.int))) {\n                throw new java.lang.ArithmeticException(\"overflow: mul\");\n            } \n            return ((int)(m));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"x","length":"x","index":"y"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5356","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))"},"failures":[],"tindex":"8abe9ae4-2e74-11e6-9e6a-5b82f1e33b52","method":{"position":"org.apache.commons.lang3.SerializationUtils:177","type":"CtMethodImpl","sourcecode":"public static byte[] serialize(final java.io.Serializable obj) {\n    if ((org.apache.commons.lang3.ArrayUtils.isEmpty(obj)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(obj))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream(512);\n            org.apache.commons.lang3.SerializationUtils.serialize(obj, baos);\n            return baos.toByteArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"obj","values":"obj"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:281","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[15,18,20,21],"tindex":"8abe9ae5-2e74-11e6-9e6a-1b930f409e2b","method":{"position":"org.apache.commons.lang3.AnnotationUtils:223","type":"CtMethodImpl","sourcecode":"public static boolean isValidAnnotationMemberType(java.lang.Class<?> type) {\n    if (type == null) {\n        {\n            if (type == null) {\n                return false;\n            } \n            if (type.isArray()) {\n                type = type.getComponentType();\n            } \n            return ((((type.isPrimitive()) || (type.isEnum())) || (type.isAnnotation())) || (java.lang.String.java.lang.String.java.lang.Class.equals(type))) || (java.lang.Class.java.lang.Class.java.lang.Class.equals(type));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"type"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4997","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[250],"tindex":"8abec1f6-2e74-11e6-9e6a-1d997b808c4c","method":{"position":"org.apache.commons.lang3.StringUtils:5079","type":"CtMethodImpl","sourcecode":"public static java.lang.String chop(final java.lang.String str) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        {\n            if (str == null) {\n                return null;\n            } \n            final int int = str.length();\n            if (strLen < 2) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = strLen - 1;\n            final java.lang.String java.lang.String = str.substring(0, lastIdx);\n            final char char = str.charAt(lastIdx);\n            if ((last == (org.apache.commons.lang3.CharUtils.org.apache.commons.lang3.CharUtils.char)) && ((ret.charAt((lastIdx - 1))) == (org.apache.commons.lang3.CharUtils.org.apache.commons.lang3.CharUtils.char))) {\n                return ret.substring(0, (lastIdx - 1));\n            } \n            return ret;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6767","type":"CtBinaryOperatorImpl","sourcecode":"m == 0"},"failures":[251],"tindex":"8abec1f7-2e74-11e6-9e6a-697421467946","method":{"position":"org.apache.commons.lang3.Validate:776","type":"CtMethodImpl","sourcecode":"public static <T extends java.lang.CharSequence>T validIndex(final T chars, final int index) {\n    if (index == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.Validate.validIndex(chars, index, org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, java.lang.Integer.valueOf(index));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.reflect.InvocationTargetException","condition":{"position":"org.apache.commons.lang3.SystemUtils:1429","type":"CtBinaryOperatorImpl","sourcecode":"version == null"},"failures":[],"tindex":"8abec1f8-2e74-11e6-9e6a-815006fcf9c1","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:283","type":"CtMethodImpl","sourcecode":"public static java.lang.Object invokeStaticMethod(final java.lang.Class<?> cls, final java.lang.String methodName, java.lang.Object[] args, java.lang.Class<?>[] parameterTypes) throws java.lang.IllegalAccessException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (methodName == null) {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            parameterTypes = org.apache.commons.lang3.ArrayUtils.nullToEmpty(parameterTypes);\n            final java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.getMatchingAccessibleMethod(cls, methodName, parameterTypes);\n            if (method == null) {\n                throw new java.lang.NoSuchMethodException((((\"No such accessible method: \" + methodName) + \"() on class: \") + (cls.getName())));\n            } \n            return method.invoke(null, args);\n        }\n    } else {\n        throw new java.lang.reflect.InvocationTargetException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"methodName"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3994","type":"CtBinaryOperatorImpl","sourcecode":"separator == null"},"failures":[252],"tindex":"8abee909-2e74-11e6-9e6a-c959792f521c","method":{"position":"org.apache.commons.lang3.StringUtils:2631","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] split(final java.lang.String str, final java.lang.String separatorChars) {\n    if (separatorChars == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChars, (-1), false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"separatorChars"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:129","type":"CtBinaryOperatorImpl","sourcecode":"crex != null"},"failures":[],"tindex":"8abee90a-2e74-11e6-9e6a-5f15c600798e","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:955","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder appendAsObjectToString(final java.lang.Object srcObject) {\n    if (srcObject != null) {\n        {\n            org.apache.commons.lang3.ObjectUtils.identityToString(org.apache.commons.lang3.builder.ToStringBuilder.this.getStringBuffer(), srcObject);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"crex":"srcObject"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5429","type":"CtBinaryOperatorImpl","sourcecode":"pads < padLen"},"failures":[],"tindex":"8abee90b-2e74-11e6-9e6a-c3345ec11f8f","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:914","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder appendSuper(final int superHashCode) {\n    if (superHashCode < superHashCode) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int = ((int) * (int)) + superHashCode;\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pads":"superHashCode","padLen":"superHashCode"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2663","type":"CtBinaryOperatorImpl","sourcecode":"(c1 != c2) && ((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2)))"},"failures":[],"tindex":"8abf101c-2e74-11e6-9e6a-2999ce8c71ed","method":{"position":"org.apache.commons.lang3.ArrayUtils:4097","type":"CtMethodImpl","sourcecode":"public static char[] add(final char[] array, final char element) {\n    if ((element != element) && ((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2)))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char[] char[] = ((char[])(org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(array, java.lang.Character.java.lang.Character.java.lang.Class<java.lang.Character>)));\n            newArray[((newArray.int) - 1)] = element;\n            return newArray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c1":"element","c2":"element"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:224","type":"CtInvocationImpl","sourcecode":"java.lang.Double.isNaN(b)"},"failures":[],"tindex":"8abf101d-2e74-11e6-9e6a-29704c25323b","method":{"position":"org.apache.commons.lang3.ArrayUtils:3319","type":"CtMethodImpl","sourcecode":"public static double[] toPrimitive(final java.lang.Double[] array, final double valueForNull) {\n    if (java.lang.Double.isNaN(valueForNull)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.double[];\n            } \n            final double[] double[] = new double[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Double java.lang.Double = array[i];\n                result[i] = b == null ? valueForNull : b.doubleValue();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"valueForNull"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:797","type":"CtBinaryOperatorImpl","sourcecode":"fraction == null"},"failures":[245],"tindex":"8abf101e-2e74-11e6-9e6a-b91950fe73cd","method":{"position":"org.apache.commons.lang3.math.Fraction:712","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.math.Fraction add(final org.apache.commons.lang3.math.Fraction fraction) {\n    if (fraction == null) {\n        {\n            return addSub(fraction, true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fraction":"fraction"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1338","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[253],"tindex":"8abf372f-2e74-11e6-9e6a-07a1375a4f41","method":{"position":"org.apache.commons.lang3.StringUtils:5881","type":"CtMethodImpl","sourcecode":"public static boolean isAlphaSpace(final java.lang.CharSequence cs) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(cs)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cs == null) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if (((java.lang.Character.isLetter(cs.charAt(i))) == false) && ((cs.charAt(i)) != ' ')) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"cs"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:576","type":"CtBinaryOperatorImpl","sourcecode":"((ch0 == 'o') || (ch0 == 'O')) && ((ch1 == 'n') || (ch1 == 'N'))"},"failures":[],"tindex":"8abf3730-2e74-11e6-9e6a-8bd38e981d7f","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1126","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrSubstitutor setValueDelimiter(final char valueDelimiter) {\n    if (((valueDelimiter == 'o') || (ch0 == 'O')) && ((valueDelimiter == 'n') || (ch1 == 'N'))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return setValueDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher.charMatcher(valueDelimiter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch0":"valueDelimiter","ch1":"valueDelimiter"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1655","type":"CtBinaryOperatorImpl","sourcecode":"0 == nBools"},"failures":[254,255,256,257,258,259,260,261],"tindex":"8abf3731-2e74-11e6-9e6a-41f78b1ae43f","method":{"position":"org.apache.commons.lang3.time.DateUtils:1516","type":"CtMethodImpl","sourcecode":"public static long getFragmentInSeconds(final java.util.Calendar calendar, final int fragment) {\n    if (0 == fragment) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.getFragment(calendar, fragment, java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"fragment"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2766","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[262],"tindex":"8abf5e42-2e74-11e6-9e6a-9f0939160155","method":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:62","type":"CtMethodImpl","sourcecode":"public static float min(final float[] array) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        {\n            if (array == null) {\n                throw new java.lang.IllegalArgumentException(\"The Array must not be null\");\n            } else if ((array.int) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Array cannot be empty.\");\n            } \n            float float = array[0];\n            for (int int = 1 ; i < (array.int) ; i++) {\n                min = org.apache.commons.lang3.math.IEEE754rUtils.min(array[i], min);\n            }\n            return min;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1214","type":"CtBinaryOperatorImpl","sourcecode":"endCutoff < (java.util.Calendar.SUNDAY)"},"failures":[263],"tindex":"8abf5e43-2e74-11e6-9e6a-95e6671a3066","method":{"position":"org.apache.commons.lang3.time.DateUtils:418","type":"CtMethodImpl","sourcecode":"public static java.util.Date addMonths(final java.util.Date date, final int amount) {\n    if (amount < amount) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.add(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"endCutoff":"amount","java.util.Calendar.SUNDAY":"amount"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1195","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[264,265,266,267,268,269,270,271],"tindex":"8abf5e44-2e74-11e6-9e6a-59c9a4c05a98","method":{"position":"org.apache.commons.lang3.ArrayUtils:3586","type":"CtMethodImpl","sourcecode":"public static boolean isEmpty(final boolean[] array) {\n    if (array == null) {\n        {\n            return (array == null) || ((array.int) == 0);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomUtils:168","type":"CtBinaryOperatorImpl","sourcecode":"startInclusive == endInclusive"},"failures":[272],"tindex":"8abf5e45-2e74-11e6-9e6a-abfce4cee99c","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:607","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final float lhs, final float rhs) {\n    if (lhs == lhs) {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            return append(java.lang.Float.floatToIntBits(lhs), java.lang.Float.floatToIntBits(rhs));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startInclusive":"lhs","endInclusive":"lhs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:596","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289],"tindex":"8abf8556-2e74-11e6-9e6a-39e4e77c7305","method":{"position":"org.apache.commons.lang3.text.StrBuilder:572","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final java.lang.StringBuffer str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return appendNull();\n            } \n            final int int = str.length();\n            if (strLen > 0) {\n                final int int = length();\n                ensureCapacity((len + strLen));\n                str.getChars(0, strLen, char[], len);\n                int += strLen;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1264","type":"CtBinaryOperatorImpl","sourcecode":"((((array1 == null) && (array2 != null)) && ((array2.length) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.length) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.length) != (array2.length)))"},"failures":[],"tindex":"8abf8557-2e74-11e6-9e6a-eb9ec118280f","method":{"position":"org.apache.commons.lang3.time.DateUtils:774","type":"CtMethodImpl","sourcecode":"public static java.util.Date round(final java.lang.Object date, final int field) {\n    if (((((date == null) && (date != null)) && (field > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            if (date instanceof java.util.Date) {\n                return org.apache.commons.lang3.time.DateUtils.round(((java.util.Date)(date)), field);\n            } else if (date instanceof java.util.Calendar) {\n                return org.apache.commons.lang3.time.DateUtils.round(((java.util.Calendar)(date)), field).getTime();\n            } else {\n                throw new java.lang.ClassCastException((\"Could not round \" + date));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array2":"date","length":"field","array1":"date"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2873","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[],"tindex":"8abfac68-2e74-11e6-9e6a-9bf178861d31","method":{"position":"org.apache.commons.lang3.time.FastDateParser:382","type":"CtMethodImpl","sourcecode":"private static java.util.Map<java.lang.String, java.lang.Integer> getDisplayNames(final int field, final java.util.Calendar definingCalendar, final java.util.Locale locale) {\n    if (field < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return definingCalendar.getDisplayNames(field, java.util.Calendar.java.util.Calendar.int, locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"field"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:805","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[184,185,186,187,188,189,190,191,192,193,194,195,196,198,199,200,201,202,204,205,206,209],"tindex":"8abfac69-2e74-11e6-9e6a-e15b942e2b4d","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:797","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final java.lang.Object lhs, final java.lang.Object rhs) {\n    if (rhs instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            java.lang.Object java.lang.Object;\n            if (lhs != null) {\n                objectToTest = lhs;\n            } else {\n                objectToTest = rhs;\n            }\n            if (objectToTest.getClass().isArray()) {\n                if (objectToTest instanceof boolean[]) {\n                    return append(fieldName, ((boolean[])(lhs)), ((boolean[])(rhs)));\n                } \n                if (objectToTest instanceof byte[]) {\n                    return append(fieldName, ((byte[])(lhs)), ((byte[])(rhs)));\n                } \n                if (objectToTest instanceof char[]) {\n                    return append(fieldName, ((char[])(lhs)), ((char[])(rhs)));\n                } \n                if (objectToTest instanceof double[]) {\n                    return append(fieldName, ((double[])(lhs)), ((double[])(rhs)));\n                } \n                if (objectToTest instanceof float[]) {\n                    return append(fieldName, ((float[])(lhs)), ((float[])(rhs)));\n                } \n                if (objectToTest instanceof int[]) {\n                    return append(fieldName, ((int[])(lhs)), ((int[])(rhs)));\n                } \n                if (objectToTest instanceof long[]) {\n                    return append(fieldName, ((long[])(lhs)), ((long[])(rhs)));\n                } \n                if (objectToTest instanceof short[]) {\n                    return append(fieldName, ((short[])(lhs)), ((short[])(rhs)));\n                } \n                return append(fieldName, ((java.lang.Object[])(lhs)), ((java.lang.Object[])(rhs)));\n            } \n            java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Object>(fieldName) {\n                private static final long serialVersionUID = 1L;\n\n                @java.lang.Override\n                public java.lang.Object getLeft() {\n                    return lhs;\n                }\n\n                @java.lang.Override\n                public java.lang.Object getRight() {\n                    return rhs;\n                }\n            });\n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"rhs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2485","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[290],"tindex":"8abfd37a-2e74-11e6-9e6a-cf982d69791a","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2227","type":"CtMethodImpl","sourcecode":"public java.lang.String midString(int index, final int length) {\n    if (index < 0) {\n        {\n            if (index < 0) {\n                index = 0;\n            } \n            if ((length <= 0) || (index >= (int))) {\n                return \"\";\n            } \n            if ((int) <= (index + length)) {\n                return new java.lang.String(char[] , index , ((int) - index));\n            } \n            return new java.lang.String(char[] , index , length);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3867","type":"CtBinaryOperatorImpl","sourcecode":"i > startIndex"},"failures":[291,292],"tindex":"8abfd37b-2e74-11e6-9e6a-cd260895baf6","method":{"position":"org.apache.commons.lang3.ArrayUtils:2149","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final int[] array, final int valueToFind) {\n    if (valueToFind > valueToFind) {\n        {\n            return org.apache.commons.lang3.ArrayUtils.lastIndexOf(array, valueToFind, java.lang.Integer.java.lang.Integer.int);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"valueToFind","i":"valueToFind"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1389","type":"CtBinaryOperatorImpl","sourcecode":"hasDecPoint || hasExp"},"failures":[293],"tindex":"8abfd37c-2e74-11e6-9e6a-19037b894985","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:938","type":"CtMethodImpl","sourcecode":"protected void setEquals(final boolean isEquals) {\n    if (isEquals || isEquals) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.EqualsBuilder.this.boolean = isEquals;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"hasDecPoint":"isEquals","hasExp":"isEquals"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":54,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
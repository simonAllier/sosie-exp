{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":22,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":66,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":114,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":63,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":50,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":19,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":88,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":110,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":113,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":65,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":59,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":23,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":21,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":69,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":38,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":49,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":71,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":35,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":84,"org.apache.commons.lang3.mutable.MutableIntTest.testCompareToNull":42,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArrayEqualAsObject":33,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":83,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":95,"org.apache.commons.lang3.text.StrBuilderTest.testAsReader":15,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":31,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":72,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testByteArrayAsObject":11,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":90,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":20,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":43,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":105,"org.apache.commons.lang3.math.FractionTest.testFactory_double":7,"org.apache.commons.lang3.RangeTest.testIntersectionWithNull":18,"org.apache.commons.lang3.tuple.MutableTripleTest.testEquals":126,"org.apache.commons.lang3.ArrayUtilsTest.testReverseObjectRange":1,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":34,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int":13,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":52,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":92,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":106,"org.apache.commons.lang3.tuple.ImmutableTripleTest.testSerialization":127,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":47,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int":14,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":91,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":101,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":30,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":48,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":78,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":109,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":108,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":82,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":96,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":115,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":89,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":56,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":117,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementShortArray":121,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":28,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":107,"org.apache.commons.lang3.StringUtilsTest.testReverseDelimited_StringChar":2,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":93,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":97,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":45,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":98,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":99,"org.apache.commons.lang3.ClassUtilsTest.test_getSimpleName_Object":41,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":27,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":74,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":58,"org.apache.commons.lang3.tuple.MutableTripleTest.testSerialization":125,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testInvalidFragmentWithDate":64,"org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_Object":119,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":36,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":61,"org.apache.commons.lang3.ConversionTest.testUuidToByteArray":3,"org.apache.commons.lang3.ArrayUtilsTest.testContainsShort":122,"org.apache.commons.lang3.ClassUtilsTest.testIsPrimitiveOrWrapper":12,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":86,"org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStringBuffer":118,"org.apache.commons.lang3.tuple.ImmutableTripleTest.testEquals":128,"org.apache.commons.lang3.text.StrBuilderTest.testGetCharsIntIntCharArrayInt":16,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":116,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":112,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":60,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":32,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":68,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":104,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":75,"org.apache.commons.lang3.ConversionTest.testLongToByteArray":4,"org.apache.commons.lang3.math.FractionTest.testToProperString":8,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":39,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":102,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":37,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":24,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfShort":123,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":57,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":85,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":25,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":40,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":70,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementShortArray":120,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":100,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":111,"org.apache.commons.lang3.tuple.TripleTest.testCompatibilityBetweenTriples":129,"org.apache.commons.lang3.RangeTest.testIsOverlappedBy":17,"org.apache.commons.lang3.math.FractionTest.testFactory_String_double":9,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":80,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":29,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":51,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":103,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":87,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":94,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":53,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":77,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testOrdinalIndexOf":62,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfBoolean":5,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testByteArray":10,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":73,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":54,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":79,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":81,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":26,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfShortWithStartIndex":124,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":67,"org.apache.commons.lang3.ArrayUtilsTest.testReverse":0,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfBooleanWithStartIndex":6,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":46,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":76,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":44,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":55},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6771","type":"CtBinaryOperatorImpl","sourcecode":"n > m"},"failures":[0,1,2],"tindex":"4c3486d7-2e9e-11e6-b822-ad889c0b3c59","method":{"position":"org.apache.commons.lang3.ArrayUtils:1818","type":"CtMethodImpl","sourcecode":"public static void reverse(final java.lang.Object[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (endIndexExclusive > endIndexExclusive) {\n        {\n            if (array == null) {\n                return ;\n            } \n            int int = startIndexInclusive < 0 ? 0 : startIndexInclusive;\n            int int = (java.lang.Math.min(array.int, endIndexExclusive)) - 1;\n            java.lang.Object java.lang.Object;\n            while (j > i) {\n                tmp = array[j];\n                array[j] = array[i];\n                array[i] = tmp;\n                j--;\n                i++;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"endIndexExclusive","n":"endIndexExclusive"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:858","type":"CtBinaryOperatorImpl","sourcecode":"rhs == null"},"failures":[3,4],"tindex":"4c354a28-2e9e-11e6-b822-336f38fc4ad3","method":{"position":"org.apache.commons.lang3.Conversion:1289","type":"CtMethodImpl","sourcecode":"public static byte[] longToByteArray(final long src, final int srcPos, final byte[] dst, final int dstPos, final int nBytes) {\n    if (dst == null) {\n        {\n            if (0 == nBytes) {\n                return dst;\n            } \n            if ((((nBytes - 1) * 8) + srcPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"(nBytes-1)*8+srcPos is greather or equal to than 64\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nBytes ; i++) {\n                shift = (i * 8) + srcPos;\n                dst[(dstPos + i)] = ((byte)(255 & (src >> shift)));\n            }\n            return dst;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rhs":"dst"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:170","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"4c357139-2e9e-11e6-b822-0d232492fbd3","method":{"position":"org.apache.commons.lang3.time.FastDateParser:306","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date parse(final java.lang.String source, final java.text.ParsePosition pos) {\n    if (source == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = pos.getIndex();\n            final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(source.substring(offset));\n            if (!(matcher.lookingAt())) {\n                return null;\n            } \n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance(java.util.TimeZone, java.util.Locale);\n            cal.clear();\n            for (int int = 0 ; i < (org.apache.commons.lang3.time.FastDateParser.Strategy[].int) ; ) {\n                final org.apache.commons.lang3.time.FastDateParser.Strategy org.apache.commons.lang3.time.FastDateParser.Strategy = org.apache.commons.lang3.time.FastDateParser.Strategy[][(i++)];\n                strategy.setCalendar(org.apache.commons.lang3.time.FastDateParser.this, cal, matcher.group(i));\n            }\n            pos.setIndex((offset + (matcher.end())));\n            return cal.getTime();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:633","type":"CtVariableReadImpl","sourcecode":"autoboxing"},"failures":[5,6],"tindex":"4c35984a-2e9e-11e6-b822-53cdde80bba6","method":{"position":"org.apache.commons.lang3.ArrayUtils:2913","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n    if (valueToFind) {\n        {\n            if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } else if (startIndex >= (array.int)) {\n                startIndex = (array.int) - 1;\n            } \n            for (int int = startIndex ; i >= 0 ; i--) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"autoboxing":"valueToFind"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:106","type":"CtInvocationImpl","sourcecode":"java.lang.Double.isNaN(b)"},"failures":[7,8,9],"tindex":"4c35bf5b-2e9e-11e6-b822-0dd29ede0420","method":{"position":"org.apache.commons.lang3.math.Fraction:249","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.math.Fraction getFraction(double value) {\n    if (java.lang.Double.isNaN(value)) {\n        {\n            final int int = value < 0 ? -1 : 1;\n            value = java.lang.Math.abs(value);\n            if ((value > (java.lang.Integer.java.lang.Integer.int)) || (java.lang.Double.isNaN(value))) {\n                throw new java.lang.ArithmeticException(\"The value must not be greater than Integer.MAX_VALUE or NaN\");\n            } \n            final int int = ((int)(value));\n            value -= wholeNumber;\n            int int = 0;\n            int int = 1;\n            int int = 1;\n            int int = 0;\n            int int = 0;\n            int int = 0;\n            int int = ((int)(value));\n            int int = 0;\n            double double = 1;\n            double double = 0;\n            double double = value - a1;\n            double double = 0;\n            double double;\n            double double = java.lang.Double.java.lang.Double.double;\n            double double;\n            int int = 1;\n            do {\n                delta1 = delta2;\n                a2 = ((int)(x1 / y1));\n                x2 = y1;\n                y2 = x1 - (a2 * y1);\n                numer2 = (a1 * numer1) + numer0;\n                denom2 = (a1 * denom1) + denom0;\n                fraction = ((double)(numer2)) / ((double)(denom2));\n                delta2 = java.lang.Math.abs((value - fraction));\n                a1 = a2;\n                x1 = x2;\n                y1 = y2;\n                numer0 = numer1;\n                denom0 = denom1;\n                numer1 = numer2;\n                denom1 = denom2;\n                i++;\n            } while ((((delta1 > delta2) && (denom2 <= 10000)) && (denom2 > 0)) && (i < 25) );\n            if (i == 25) {\n                throw new java.lang.ArithmeticException(\"Unable to convert double to fraction\");\n            } \n            return org.apache.commons.lang3.math.Fraction.getReducedFraction(((numer0 + (wholeNumber * denom0)) * sign), denom0);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3821","type":"CtBinaryOperatorImpl","sourcecode":"array1 == null"},"failures":[10,11],"tindex":"4c35e66c-2e9e-11e6-b822-37baf333d15f","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:622","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final byte[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                int = (int) * (int);\n            } else {\n                for (final byte byte : array) {\n                    append(element);\n                }\n            }\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:629","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[12],"tindex":"4c360d7d-2e9e-11e6-b822-e51c7ffd3fc6","method":{"position":"org.apache.commons.lang3.ClassUtils:541","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitiveOrWrapper(final java.lang.Class<?> type) {\n    if (type == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type == null) {\n                return false;\n            } \n            return (type.isPrimitive()) || (org.apache.commons.lang3.ClassUtils.isPrimitiveWrapper(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"type"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomStringUtils:274","type":"CtBinaryOperatorImpl","sourcecode":"count == 0"},"failures":[13,14,15,16],"tindex":"4c360d7e-2e9e-11e6-b822-3f6ec484178c","method":{"position":"org.apache.commons.lang3.text.StrBuilder:411","type":"CtMethodImpl","sourcecode":"public void getChars(final int startIndex, final int endIndex, final char[] destination, final int destinationIndex) {\n    if (startIndex == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (startIndex < 0) {\n                throw new java.lang.StringIndexOutOfBoundsException(startIndex);\n            } \n            if ((endIndex < 0) || (endIndex > (length()))) {\n                throw new java.lang.StringIndexOutOfBoundsException(endIndex);\n            } \n            if (startIndex > endIndex) {\n                throw new java.lang.StringIndexOutOfBoundsException(\"end < start\");\n            } \n            java.lang.System.arraycopy(char[], startIndex, destination, destinationIndex, (endIndex - startIndex));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"startIndex"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Range:315","type":"CtBinaryOperatorImpl","sourcecode":"otherRange == null"},"failures":[17,18],"tindex":"4c36348f-2e9e-11e6-b822-85461fd08d7b","method":{"position":"org.apache.commons.lang3.Range:350","type":"CtMethodImpl","sourcecode":"public boolean isOverlappedBy(final org.apache.commons.lang3.Range<T> otherRange) {\n    if (otherRange == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (otherRange == null) {\n                return false;\n            } \n            return ((otherRange.contains(T)) || (otherRange.contains(T))) || (contains(otherRange.T));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"otherRange":"otherRange"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:435","type":"CtBinaryOperatorImpl","sourcecode":"(newLine) == null"},"failures":[],"tindex":"4c363490-2e9e-11e6-b822-f9681815348d","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:180","type":"CtMethodImpl","sourcecode":"public static <V>java.lang.String replace(final java.lang.Object source, final java.util.Map<java.lang.String, V> valueMap) {\n    if (source == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.lang3.text.StrSubstitutor(valueMap).replace(source);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"newLine":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4287","type":"CtInvocationImpl","sourcecode":"str.endsWith(remove)"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"tindex":"4c365ba1-2e9e-11e6-b822-91a4a4b14920","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:673","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final long[] lhs, final long[] rhs) {\n    if (fieldName.endsWith(fieldName)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (!(java.util.Arrays.equals(lhs, rhs))) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Long[]>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Long[] getLeft() {\n                        return org.apache.commons.lang3.ArrayUtils.toObject(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Long[] getRight() {\n                        return org.apache.commons.lang3.ArrayUtils.toObject(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName","remove":"fieldName"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2290","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.StringUtils.isEmpty(str)) || (separator == null)"},"failures":[41],"tindex":"4c3682b2-2e9e-11e6-b822-d592c7bede4b","method":{"position":"org.apache.commons.lang3.ClassUtils:251","type":"CtMethodImpl","sourcecode":"public static java.lang.String getSimpleName(final java.lang.Object object, final java.lang.String valueIfNull) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(valueIfNull)) || (object == null)) {\n        {\n            if (object == null) {\n                return valueIfNull;\n            } \n            return org.apache.commons.lang3.ClassUtils.getSimpleName(object.getClass());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"valueIfNull","separator":"object"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5271","type":"CtBinaryOperatorImpl","sourcecode":"count == null"},"failures":[42],"tindex":"4c3682b3-2e9e-11e6-b822-afe137b2650c","method":{"position":"org.apache.commons.lang3.mutable.MutableInt:260","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int compareTo(final org.apache.commons.lang3.mutable.MutableInt other) {\n    if (other == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = other.int;\n            return (int) < anotherVal ? -1 : (int) == anotherVal ? 0 : 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"other"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:717","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40],"tindex":"4c36a9c4-2e9e-11e6-b822-bd3d8f5630cc","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:547","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final int lhs, final int rhs) {\n    if (fieldName == null) {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (lhs != rhs) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Integer>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Integer getLeft() {\n                        return java.lang.Integer.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Integer getRight() {\n                        return java.lang.Integer.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:293","type":"CtBinaryOperatorImpl","sourcecode":"languageCode == null"},"failures":[43,44,44,45,46,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,61],"tindex":"4c385775-2e9e-11e6-b822-91fa4d1d570c","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:355","type":"CtMethodImpl","sourcecode":"public void appendToString(final java.lang.StringBuffer buffer, final java.lang.String toString) {\n    if (toString == null) {\n        {\n            if (toString != null) {\n                final int int = (toString.indexOf(java.lang.String)) + (java.lang.String.length());\n                final int int = toString.lastIndexOf(java.lang.String);\n                if (((pos1 != pos2) && (pos1 >= 0)) && (pos2 >= 0)) {\n                    final java.lang.String java.lang.String = toString.substring(pos1, pos2);\n                    if (boolean) {\n                        removeLastFieldSeparator(buffer);\n                    } \n                    buffer.append(data);\n                    appendFieldSeparator(buffer);\n                } \n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"languageCode":"toString"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:419","type":"CtVariableReadImpl","sourcecode":"match"},"failures":[],"tindex":"4c387e86-2e9e-11e6-b822-259dfd300446","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:941","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final short[] array, final boolean fullDetail) {\n    if (fullDetail) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, java.lang.Boolean.valueOf(fullDetail));\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"match":"fullDetail"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:981","type":"CtVariableReadImpl","sourcecode":"element"},"failures":[62],"tindex":"4c387e87-2e9e-11e6-b822-fd240e8388bc","method":{"position":"org.apache.commons.lang3.StringUtils:1025","type":"CtMethodImpl","sourcecode":"private static int ordinalIndexOf(final java.lang.CharSequence str, final java.lang.CharSequence searchStr, final int ordinal, final boolean lastIndex) {\n    if (lastIndex) {\n        {\n            if (((str == null) || (searchStr == null)) || (ordinal <= 0)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            if ((searchStr.length()) == 0) {\n                return lastIndex ? str.length() : 0;\n            } \n            int int = 0;\n            int int = lastIndex ? str.length() : org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            do {\n                if (lastIndex) {\n                    index = org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(str, searchStr, (index - 1));\n                } else {\n                    index = org.apache.commons.lang3.CharSequenceUtils.indexOf(str, searchStr, (index + 1));\n                }\n                if (index < 0) {\n                    return index;\n                } \n                found++;\n            } while (found < ordinal );\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"lastIndex"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:894","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[63,63],"tindex":"4c38a598-2e9e-11e6-b822-83c1f1abb059","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:513","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final short[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:479","type":"CtBinaryOperatorImpl","sourcecode":"(comparison) != 0"},"failures":[64],"tindex":"4c38a599-2e9e-11e6-b822-918c4fdea64c","method":{"position":"org.apache.commons.lang3.time.DateUtils:1365","type":"CtMethodImpl","sourcecode":"public static long getFragmentInMinutes(final java.util.Date date, final int fragment) {\n    if (fragment != 0) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.getFragment(date, fragment, java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"fragment"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:39","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[65,65,66,67,67,44,45,68,69,70,71,72,72,73,74,75,76,77,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,101,102,103,104,104,63,105,106,107,108,108,46,47,47,48,49,109,110,111,112,113,114,114,115,50,51,52,53,54,55,116,117,118],"tindex":"4c38a59a-2e9e-11e6-b822-27370b8e01da","method":{"position":"org.apache.commons.lang3.ObjectUtils:340","type":"CtMethodImpl","sourcecode":"public static void identityToString(final java.lang.StringBuffer buffer, final java.lang.Object object) {\n    if (object == null) {\n        {\n            if (object == null) {\n                throw new java.lang.NullPointerException(\"Cannot get the toString of a null identity\");\n            } \n            buffer.append(object.getClass().getName()).append('@').append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(object)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"object"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:709","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[119],"tindex":"4c38ccab-2e9e-11e6-b822-cb824b2341d2","method":{"position":"org.apache.commons.lang3.ClassUtils:1013","type":"CtMethodImpl","sourcecode":"public static java.lang.String getShortCanonicalName(final java.lang.Object object, final java.lang.String valueIfNull) {\n    if (object == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                return valueIfNull;\n            } \n            return org.apache.commons.lang3.ClassUtils.getShortCanonicalName(object.getClass().getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"object"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:103","type":"CtInvocationImpl","sourcecode":"java.lang.Double.isNaN(a)"},"failures":[],"tindex":"4c38ccac-2e9e-11e6-b822-5ff64c6573e0","method":{"position":"org.apache.commons.lang3.RandomUtils:137","type":"CtMethodImpl","sourcecode":"public static double nextDouble(double startInclusive, double endInclusive) {\n    if (java.lang.Double.isNaN(startInclusive)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.isTrue((endInclusive >= startInclusive), \"Start value must be smaller or equal to end value.\");\n            org.apache.commons.lang3.Validate.isTrue((startInclusive >= 0), \"Both range values must be non-negative.\");\n            if (startInclusive == endInclusive) {\n                return startInclusive;\n            } \n            return startInclusive + ((endInclusive - startInclusive) * (org.apache.commons.lang3.RandomUtils.org.apache.commons.lang3.RandomUtils.java.util.Random.nextDouble()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"startInclusive"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1047","type":"CtBinaryOperatorImpl","sourcecode":"((nBools - 1) + dstPos) >= 64"},"failures":[120,121,122,123,124],"tindex":"4c38f3bd-2e9e-11e6-b822-5dac0ed52a03","method":{"position":"org.apache.commons.lang3.ArrayUtils:2227","type":"CtMethodImpl","sourcecode":"public static int indexOf(final short[] array, final short valueToFind, int startIndex) {\n    if (((startIndex - 1) + startIndex) >= 64) {\n        {\n            if (array == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                startIndex = 0;\n            } \n            for (int int = startIndex ; i < (array.int) ; i++) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"startIndex","dstPos":"startIndex"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDateParser:222","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof org.apache.commons.lang3.time.FastDateParser)"},"failures":[],"tindex":"4c38f3be-2e9e-11e6-b822-b7f6ad1666a0","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:199","type":"CtMethodImpl","sourcecode":"public static int reflectionCompare(final java.lang.Object lhs, final java.lang.Object rhs, final java.util.Collection<java.lang.String> excludeFields) {\n    if (!(rhs instanceof org.apache.commons.lang3.time.FastDateParser)) {\n        {\n            return org.apache.commons.lang3.builder.CompareToBuilder.reflectionCompare(lhs, rhs, org.apache.commons.lang3.builder.ReflectionToStringBuilder.toNoNullStringArray(excludeFields));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"rhs"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharRange:236","type":"CtBinaryOperatorImpl","sourcecode":"(iToString) == null"},"failures":[125,126,127,128,129],"tindex":"4c38f3bf-2e9e-11e6-b822-67228283c7c7","method":{"position":"org.apache.commons.lang3.tuple.Triple:110","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"deprecation\")\n@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj == null) {\n        {\n            if (obj == (org.apache.commons.lang3.tuple.Triple.this)) {\n                return true;\n            } \n            if (obj instanceof org.apache.commons.lang3.tuple.Triple<?, ?, ?>) {\n                final org.apache.commons.lang3.tuple.Triple<?, ?, ?> org.apache.commons.lang3.tuple.Triple<?, ?, ?> = ((org.apache.commons.lang3.tuple.Triple<?, ?, ?>)(obj));\n                return ((org.apache.commons.lang3.ObjectUtils.equals(getLeft(), other.getLeft())) && (org.apache.commons.lang3.ObjectUtils.equals(getMiddle(), other.getMiddle()))) && (org.apache.commons.lang3.ObjectUtils.equals(getRight(), other.getRight()));\n            } \n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iToString":"obj"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":25,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
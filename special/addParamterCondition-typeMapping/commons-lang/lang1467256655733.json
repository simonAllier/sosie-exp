{"failureDictionary":{"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson":140,"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":94,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":206,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":208,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":246,"org.apache.commons.lang3.math.NumberUtilsTest.testLang381":292,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":202,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":205,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray":230,"org.apache.commons.lang3.builder.CompareToBuilderTest.testBoolean":49,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":95,"org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP":307,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong":136,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson":252,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":121,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":131,"org.apache.commons.lang3.time.DateUtilsTest.testIsSameInstant_Cal":328,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNull":301,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCode":22,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":35,"org.apache.commons.lang3.time.DateUtilsTest.testAddSeconds":264,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArrayEqualAsObject":106,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testFloatArrayAsObject":14,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testDoubleArrayAsObject":16,"org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiBooleanArray":5,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":39,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":182,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":257,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":89,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":259,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":75,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":103,"org.apache.commons.lang3.ConversionTest.testHexDigitToBinary":262,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testObjectArray":10,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":234,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiBooleanArray":48,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray":229,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testByteArrayAsObject":25,"org.apache.commons.lang3.StringUtilsTest.testIsNoneBlank":298,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":177,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":90,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":92,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testCalendarTimezoneRespected":304,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude":231,"org.apache.commons.lang3.ArrayUtilsTest.testSameLengthFloat":314,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":249,"org.apache.commons.lang3.builder.DiffResultTest.testNullRhs":125,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":210,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":194,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":251,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":37,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException2":282,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":198,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":137,"org.apache.commons.lang3.StringUtilsTest.testChomp":33,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":178,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":188,"org.apache.commons.lang3.BitFieldTest.testGetValue":271,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_String":263,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":83,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementFloatArray":278,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testObject":23,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testLongArrayAsObject":24,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":165,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":87,"org.apache.commons.lang3.BitFieldTest.testSetValue":276,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":126,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":201,"org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected":308,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_char":323,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":86,"org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetSuffix":299,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":183,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":176,"org.apache.commons.lang3.StringUtilsTest.testReplaceOnce_StringStringString":277,"org.apache.commons.lang3.reflect.InheritanceUtilsTest.testDistanceNullParentNullChild":319,"org.apache.commons.lang3.builder.CompareToBuilderTest.testObjectArray":327,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testShortArrayAsObject":27,"org.apache.commons.lang3.StringUtilsTest.testCenter_StringInt":325,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":142,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":215,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeStartText":236,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testBlank":247,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testFormat":306,"org.apache.commons.lang3.math.NumberUtilsTest.testMinimumShort":312,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBetween_StringString":318,"org.apache.commons.lang3.AnnotationUtilsTest.testNonEquivalentAnnotationsOfSameType":61,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHierarchyHashCode":18,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticFieldForceAccess":285,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testBlank":127,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":180,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":216,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":154,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCodeExcludeFields":26,"org.apache.commons.lang3.AnnotationUtilsTest.testSameInstance":55,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldIllegalArgumentException1":295,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldIllegalArgumentException2":296,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":41,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":99,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":288,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":149,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull":225,"org.apache.commons.lang3.AnnotationUtilsTest.testBothArgsNull":60,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":173,"org.apache.commons.lang3.ClassUtilsTest.testIsPrimitiveOrWrapper":266,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":42,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":248,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":214,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetNullText":52,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":204,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDoubleObject":268,"org.apache.commons.lang3.BooleanUtilsTest.test_isNotTrue_Boolean":265,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":79,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":105,"org.apache.commons.lang3.AnnotationUtilsTest.testEquivalence":56,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":155,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":191,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":162,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":260,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testCharArrayAsObject":12,"org.apache.commons.lang3.BitFieldTest.testGetRawValue":275,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":111,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Boolean":270,"org.apache.commons.lang3.AnnotationUtilsTest.testOneArgNull":53,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls":233,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentEnd":235,"org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntChar":324,"org.apache.commons.lang3.time.FastDatePrinterTest.testFormat":310,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldForceAccessIllegalArgumentException2":284,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":172,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldForceAccess":294,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":97,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":116,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":157,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":187,"org.apache.commons.lang3.builder.DiffResultTest.testNullList":119,"org.apache.commons.lang3.BitFieldTest.testSetShortValue":273,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":220,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger":32,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":167,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":101,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":254,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":139,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":190,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":209,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":181,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionObjectCycle":17,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson":132,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":44,"org.apache.commons.lang3.time.DateUtilsTest.testIteratorEx":2,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":160,"org.apache.commons.lang3.text.StrTokenizerTest.testChaining":300,"org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_nullInput":315,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture":30,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping":36,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testBooleanMultiArray":20,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":258,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testBlank":73,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":256,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testObjectBuild":11,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":250,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":118,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":168,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":98,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":123,"org.apache.commons.lang3.ArrayUtilsTest.testReverseShort":293,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testToHashCodeEqualsHashCode":21,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":76,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":197,"org.apache.commons.lang3.builder.DiffResultTest.testNoDifferencesString":120,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":153,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testBlank":255,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":46,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":151,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":192,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":91,"org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayString":313,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":175,"org.apache.commons.lang3.ArrayUtilsTest.testReverseDouble":311,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayBoolean":3,"org.apache.commons.lang3.ArrayUtilsTest.testIsEquals":4,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":150,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":223,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticField":281,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testPerson":78,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":93,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":47,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":134,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":156,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":112,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":128,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":200,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":158,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testArrayList":80,"org.apache.commons.lang3.builder.CompareToBuilderTest.testBooleanArray":50,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":108,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":171,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":104,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testBlank":135,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticField":297,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":170,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementFloatArray":279,"org.apache.commons.lang3.builder.EqualsBuilderTest.testBooleanArrayHiddenByObject":8,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection":224,"org.apache.commons.lang3.BitFieldTest.testGetShortValue":272,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection":227,"org.apache.commons.lang3.builder.DiffResultTest.testNullStyle":122,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":159,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":117,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":77,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":193,"org.apache.commons.lang3.AnnotationUtilsTest.testAnnotationsOfDifferingTypes":57,"org.apache.commons.lang3.time.DateUtilsTest.testAddYears":329,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testIntArrayAsObject":15,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":107,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testCopyOnWriteArrayList":81,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":179,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":129,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":144,"org.apache.commons.lang3.builder.DiffResultTest.testNullLhs":124,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":219,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex":267,"org.apache.commons.lang3.ArrayUtilsTest.testToString":63,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":138,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentStart":237,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullLhs":114,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testBlank":217,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":40,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":145,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectEndText":245,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":38,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLong":74,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":102,"org.apache.commons.lang3.ArrayUtilsTest.testSameLengthDouble":287,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testBooleanArrayAsObject":28,"org.apache.commons.lang3.builder.CompareToBuilderTest.testBooleanArrayHiddenByObject":51,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":232,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":199,"org.apache.commons.lang3.ValidateTest.testNotEmptyCollection1":321,"org.apache.commons.lang3.ValidateTest.testNotEmptyCollection2":322,"org.apache.commons.lang3.StringUtilsTest.testRemoveEnd":34,"org.apache.commons.lang3.builder.DiffBuilderTest.testSameObjectIgnoresAppends":110,"org.apache.commons.lang3.ValidateTest.testNotEmptyMap1":316,"org.apache.commons.lang3.ValidateTest.testNotEmptyMap2":317,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":196,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectStartText":241,"org.apache.commons.lang3.time.DateUtilsTest.testWeekIterator":1,"org.apache.commons.lang3.AnnotationUtilsTest.testHashCode":58,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":169,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":207,"org.apache.commons.lang3.time.DateUtilsTest.testMonthIterator":0,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":85,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":133,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArraySeparator":243,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareExcludeFields":289,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":148,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":228,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":100,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":195,"org.apache.commons.lang3.text.StrTokenizerTest.test8":71,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":184,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":218,"org.apache.commons.lang3.BitFieldTest.testGetShortRawValue":274,"org.apache.commons.lang3.text.StrTokenizerTest.test5":68,"org.apache.commons.lang3.text.StrTokenizerTest.test4":67,"org.apache.commons.lang3.text.StrTokenizerTest.test7":70,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":185,"org.apache.commons.lang3.text.StrTokenizerTest.test6":69,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":186,"org.apache.commons.lang3.text.StrTokenizerTest.test1":64,"org.apache.commons.lang3.text.StrTokenizerTest.test3":66,"org.apache.commons.lang3.text.StrTokenizerTest.test2":65,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testSuper":13,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":161,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testIntegerWithTransients":29,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldSeparator":242,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testLinkedList":82,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":253,"org.apache.commons.lang3.AnnotationUtilsTest.testIsValidAnnotationMemberType":62,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang645":309,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":109,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":141,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedFieldForceAccess":286,"org.apache.commons.lang3.StringUtilsTest.testCaseFunctions":302,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareTransients":291,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":88,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testObjectArrayAsObject":19,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":147,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArray":326,"org.apache.commons.lang3.AnnotationUtilsTest.testGeneratedAnnotationEquivalentToRealAnnotation":59,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":113,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":189,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":96,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":130,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray":226,"org.apache.commons.lang3.ConversionTest.testBinaryToShort":303,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":261,"org.apache.commons.lang3.builder.EqualsBuilderTest.testBooleanArray":7,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayEnd":240,"org.apache.commons.lang3.ArrayUtilsTest.testHashCode":9,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixtureWithTransients":31,"org.apache.commons.lang3.reflect.InheritanceUtilsTest.testDistanceNullParent":320,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullRhs":115,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":203,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":146,"org.apache.commons.lang3.ArrayUtilsTest.testCloneFloat":280,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedField":283,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang645":305,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":84,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":174,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":211,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDoubleObjectEmptyArray":269,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":164,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompare":290,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayStart":244,"org.apache.commons.lang3.builder.EqualsBuilderTest.testBoolean":6,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldNameValueSeparator":239,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":221,"org.apache.commons.lang3.BitFieldTest.testSetShortBoolean":330,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":212,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":166,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson":222,"org.apache.commons.lang3.AnnotationUtilsTest.testToString":54,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":45,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":152,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":143,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":163,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeEndText":238,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":213,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":43,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":72},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1024","type":"CtBinaryOperatorImpl","sourcecode":"field == (java.util.Calendar.AM_PM)"},"failures":[0,1,2],"tindex":"311ed72a-3e71-11e6-99d9-ab9a447e91cc","method":{"position":"org.apache.commons.lang3.time.DateUtils:1122","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<java.util.Calendar> iterator(final java.util.Date focus, final int rangeStyle) {\n    if (rangeStyle == rangeStyle) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (focus == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n            gval.setTime(focus);\n            return org.apache.commons.lang3.time.DateUtils.iterator(gval, rangeStyle);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Calendar.AM_PM":"rangeStyle","field":"rangeStyle"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:105","type":"CtBinaryOperatorImpl","sourcecode":"expression == false"},"failures":[3,4,5,6,7,8],"tindex":"311fe89b-3e71-11e6-99d9-d747181d47ff","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:621","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final boolean lhs, final boolean rhs) {\n    if (rhs == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            boolean = lhs == rhs;\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"expression":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1222","type":"CtBinaryOperatorImpl","sourcecode":"(seq == null) || (searchSeq == null)"},"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"tindex":"31200fac-3e71-11e6-99d9-3ffc1450b2a6","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:815","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final java.lang.Object object) {\n    if (((!(object.isAccessible())) && (java.lang.reflect.Modifier.isPublic(object.getModifiers()))) && (org.apache.commons.lang3.reflect.MemberUtils.isPackageAccess(m.getDeclaringClass().getModifiers()))) {\n        {\n            if ((object == null) || (object == null)) {\n                {\n                    if (object == null) {\n                        int = (int) * (int);\n                    } else {\n                        if (object.getClass().isArray()) {\n                            if (object instanceof long[]) {\n                                append(((long[])(object)));\n                            } else if (object instanceof int[]) {\n                                append(((int[])(object)));\n                            } else if (object instanceof short[]) {\n                                append(((short[])(object)));\n                            } else if (object instanceof char[]) {\n                                append(((char[])(object)));\n                            } else if (object instanceof byte[]) {\n                                append(((byte[])(object)));\n                            } else if (object instanceof double[]) {\n                                append(((double[])(object)));\n                            } else if (object instanceof float[]) {\n                                append(((float[])(object)));\n                            } else if (object instanceof boolean[]) {\n                                append(((boolean[])(object)));\n                            } else {\n                                append(((java.lang.Object[])(object)));\n                            }\n                        } else {\n                            int = ((int) * (int)) + (object.hashCode());\n                        }\n                    }\n                    return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"searchSeq":"object","seq":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.FieldUtils:172","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.lang3.reflect.MemberUtils.isAccessible(field))"},"failures":[],"tindex":"31205dcd-3e71-11e6-99d9-df0e4c43d51c","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:479","type":"CtMethodImpl","sourcecode":"protected boolean accept(final java.lang.reflect.Field field) {\n    if (!(org.apache.commons.lang3.reflect.MemberUtils.isAccessible(field))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((field.getName().indexOf(org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.char)) != (-1)) {\n                return false;\n            } \n            if ((java.lang.reflect.Modifier.isTransient(field.getModifiers())) && (!(org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.isAppendTransients()))) {\n                return false;\n            } \n            if ((java.lang.reflect.Modifier.isStatic(field.getModifiers())) && (!(org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.isAppendStatics()))) {\n                return false;\n            } \n            if (((org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.java.lang.String[]) != null) && ((java.util.Arrays.binarySearch(org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.java.lang.String[], field.getName())) >= 0)) {\n                return false;\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:1127","type":"CtBinaryOperatorImpl","sourcecode":"(value <= start) || (value >= end)"},"failures":[],"tindex":"312084de-3e71-11e6-99d9-01447b353fe1","method":{"position":"org.apache.commons.lang3.ArrayUtils:2652","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) {\n    if (startIndex > startIndex) {\n        {\n            if ((valueToFind <= valueToFind) || (value >= valueToFind)) {\n                {\n                    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n                        return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n                    } \n                    if (startIndex < 0) {\n                        return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n                    } else if (startIndex >= (array.int)) {\n                        startIndex = (array.int) - 1;\n                    } \n                    for (int int = startIndex ; i >= 0 ; i--) {\n                        if (valueToFind == (array[i])) {\n                            return i;\n                        } \n                    }\n                    return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"valueToFind","end":"valueToFind","value":"valueToFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:970","type":"CtBinaryOperatorImpl","sourcecode":"abbreviation != null"},"failures":[33,34],"tindex":"3120d2ff-3e71-11e6-99d9-e54e8e993897","method":{"position":"org.apache.commons.lang3.StringUtils:4283","type":"CtMethodImpl","sourcecode":"public static java.lang.String removeEnd(final java.lang.String str, final java.lang.String remove) {\n    if (remove != null) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {\n                return str;\n            } \n            if (str.endsWith(remove)) {\n                return str.substring(0, ((str.length()) - (remove.length())));\n            } \n            return str;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"abbreviation":"remove"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1007","type":"CtBinaryOperatorImpl","sourcecode":"prefix == null"},"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"3120fa10-3e71-11e6-99d9-6dfc00500aca","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:534","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(java.lang.CharSequence source, int offset, int length) {\n    if (source == null) {\n        {\n            if (source == null) {\n                return null;\n            } \n            org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(length).append(source, offset, length);\n            substitute(buf, 0, length);\n            return buf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:683","type":"CtBinaryOperatorImpl","sourcecode":"toTypeVariable == null"},"failures":[],"tindex":"31212121-3e71-11e6-99d9-6788936f98da","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1685","type":"CtMethodImpl","sourcecode":"public static java.lang.String toLongString(java.lang.reflect.TypeVariable<?> var) {\n    if (var == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.notNull(var, \"var is null\");\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            final java.lang.reflect.GenericDeclaration java.lang.reflect.GenericDeclaration = ((java.lang.reflect.TypeVariable<?>)(var)).getGenericDeclaration();\n            if (d instanceof java.lang.Class<?>) {\n                java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(d));\n                while (true) {\n                    if ((c.getEnclosingClass()) == null) {\n                        buf.insert(0, c.getName());\n                        break;\n                    } \n                    buf.insert(0, c.getSimpleName()).insert(0, '.');\n                    c = c.getEnclosingClass();\n                }\n            } else if (d instanceof java.lang.reflect.Type) {\n                buf.append(org.apache.commons.lang3.reflect.TypeUtils.toString(((java.lang.reflect.Type)(d))));\n            } else {\n                buf.append(d);\n            }\n            return buf.append(':').append(org.apache.commons.lang3.reflect.TypeUtils.typeVariableToString(var)).toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toTypeVariable":"var"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:138","type":"CtBinaryOperatorImpl","sourcecode":"lhs != rhs"},"failures":[48,49,50,51],"tindex":"31212122-3e71-11e6-99d9-9db99b5ea413","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:584","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final boolean lhs, final boolean rhs) {\n    if (rhs != rhs) {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == false) {\n                int = -1;\n            } else {\n                int = +1;\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs","rhs":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.AnnotationUtils:126","type":"CtBinaryOperatorImpl","sourcecode":"(a1 == null) || (a2 == null)"},"failures":[],"tindex":"31214833-3e71-11e6-99d9-b9b96a918be5","method":{"position":"org.apache.commons.lang3.AnnotationUtils:195","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final java.lang.annotation.Annotation a) {\n    if ((a == null) || (a == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.lang3.builder.ToStringBuilder org.apache.commons.lang3.builder.ToStringBuilder = new org.apache.commons.lang3.builder.ToStringBuilder(a , org.apache.commons.lang3.AnnotationUtils.org.apache.commons.lang3.AnnotationUtils.org.apache.commons.lang3.builder.ToStringStyle);\n            for (final java.lang.reflect.Method java.lang.reflect.Method : a.annotationType().getDeclaredMethods()) {\n                if ((m.getParameterTypes().int) > 0) {\n                    continue;\n                } \n                try {\n                    builder.append(m.getName(), m.invoke(a));\n                } catch (final java.lang.RuntimeException ex) {\n                    throw ex;\n                } catch (final java.lang.Exception ex) {\n                    throw new java.lang.RuntimeException(ex);\n                }\n            }\n            return builder.build();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a1":"a","a2":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:709","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"31216f44-3e71-11e6-99d9-7f8b6085c059","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:488","type":"CtMethodImpl","sourcecode":"public static void writeStaticField(final java.lang.reflect.Field field, final java.lang.Object value) throws java.lang.IllegalAccessException {\n    if ((java.util.regex.Pattern.matches(value, value)) == false) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    org.apache.commons.lang3.reflect.FieldUtils.writeStaticField(field, value, false);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MethodUtils:490","type":"CtBinaryOperatorImpl","sourcecode":"(accessibleMethod != null) && ((bestMatch == null) || ((org.apache.commons.lang3.reflect.MemberUtils.compareParameterTypes(accessibleMethod.getParameterTypes(), bestMatch.getParameterTypes(), parameterTypes)) < 0))"},"failures":[],"tindex":"31219655-3e71-11e6-99d9-5ba4c6495d58","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:134","type":"CtMethodImpl","sourcecode":"public static int reflectionCompare(final java.lang.Object lhs, final java.lang.Object rhs) {\n    if ((lhs != null) && ((lhs == null) || ((org.apache.commons.lang3.reflect.MemberUtils.compareParameterTypes(accessibleMethod.getParameterTypes(), bestMatch.getParameterTypes(), rhs)) < 0))) {\n        {\n            return org.apache.commons.lang3.builder.CompareToBuilder.reflectionCompare(lhs, rhs, false, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bestMatch":"lhs","parameterTypes":"rhs","accessibleMethod":"lhs"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:671","type":"CtInvocationImpl","sourcecode":"stripChars.isEmpty()"},"failures":[52],"tindex":"3121bd66-3e71-11e6-99d9-832833fc0b86","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1969","type":"CtMethodImpl","sourcecode":"protected void setNullText(java.lang.String nullText) {\n    if (nullText.isEmpty()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (nullText == null) {\n                nullText = \"\";\n            } \n            org.apache.commons.lang3.builder.ToStringStyle.this.java.lang.String = nullText;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stripChars":"nullText"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.tuple.Pair:134","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.util.Map.Entry<?, ?>"},"failures":[],"tindex":"3121bd67-3e71-11e6-99d9-8537b876c179","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:553","type":"CtMethodImpl","sourcecode":"public static void writeStaticField(final java.lang.Class<?> cls, final java.lang.String fieldName, final java.lang.Object value, final boolean forceAccess) throws java.lang.IllegalAccessException {\n    if (value instanceof java.util.Map.Entry<?, ?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            final java.lang.reflect.Field java.lang.reflect.Field = org.apache.commons.lang3.reflect.FieldUtils.getField(cls, fieldName, forceAccess);\n            org.apache.commons.lang3.Validate.isTrue((field != null), \"Cannot locate field %s on %s\", fieldName, cls);\n            org.apache.commons.lang3.reflect.FieldUtils.writeStaticField(field, value, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:219","type":"CtBinaryOperatorImpl","sourcecode":"(cal1 == null) || (cal2 == null)"},"failures":[],"tindex":"3121e478-3e71-11e6-99d9-1dce2b43e98f","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:434","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String format(final java.util.Calendar calendar) {\n    if ((calendar == null) || (calendar == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.FastDatePrinter.format(calendar);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cal2":"calendar","cal1":"calendar"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:509","type":"CtVariableReadImpl","sourcecode":"detail"},"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,142,143,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,155,155,156,156,157,157,158,158,159,159,160,160,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,168,169,169,170,170,171,171,172,172,173,173,174,174,175,175,176,176,177,177,178,178,179,179,180,180,181,181,182,182,183,183,184,184,185,185,186,186,187,187,188,188,189,189,190,190,191,191,192,192,193,193,194,194,195,195,196,196,197,197,198,198,199,199,200,200,201,201,202,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,210,210,211,211,212,212,213,213,214,214,215,215,216,216,217,217,218,218,219,219,220,220,221,221,222,222,223,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,52,238,239,240,241,242,243,244,245,246,246,247,247,248,248,249,249,250,250,251,251,252,252,253,253,254,254,255,255,256,256,257,257,258,258,259,259,260,260,261,261],"tindex":"31220b89-3e71-11e6-99d9-3b079249548d","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1922","type":"CtMethodImpl","sourcecode":"protected void setFieldSeparatorAtStart(final boolean fieldSeparatorAtStart) {\n    if (fieldSeparatorAtStart) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldSeparatorAtStart) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.lang3.builder.ToStringStyle.this.boolean = fieldSeparatorAtStart;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"detail":"fieldSeparatorAtStart"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1851","type":"CtBinaryOperatorImpl","sourcecode":"search != replace"},"failures":[262],"tindex":"312259aa-3e71-11e6-99d9-5bf8fa2d5710","method":{"position":"org.apache.commons.lang3.Conversion:162","type":"CtMethodImpl","sourcecode":"public static boolean[] hexDigitToBinary(final char hexDigit) {\n    if (hexDigit != hexDigit) {\n        {\n            switch (hexDigit) {\n                case '0' :\n                    return new boolean[]{ false , false , false , false };\n                case '1' :\n                    return new boolean[]{ true , false , false , false };\n                case '2' :\n                    return new boolean[]{ false , true , false , false };\n                case '3' :\n                    return new boolean[]{ true , true , false , false };\n                case '4' :\n                    return new boolean[]{ false , false , true , false };\n                case '5' :\n                    return new boolean[]{ true , false , true , false };\n                case '6' :\n                    return new boolean[]{ false , true , true , false };\n                case '7' :\n                    return new boolean[]{ true , true , true , false };\n                case '8' :\n                    return new boolean[]{ false , false , false , true };\n                case '9' :\n                    return new boolean[]{ true , false , false , true };\n                case 'a' :\n                case 'A' :\n                    return new boolean[]{ false , true , false , true };\n                case 'b' :\n                case 'B' :\n                    return new boolean[]{ true , true , false , true };\n                case 'c' :\n                case 'C' :\n                    return new boolean[]{ false , false , true , true };\n                case 'd' :\n                case 'D' :\n                    return new boolean[]{ true , false , true , true };\n                case 'e' :\n                case 'E' :\n                    return new boolean[]{ false , true , true , true };\n                case 'f' :\n                case 'F' :\n                    return new boolean[]{ true , true , true , true };\n                default :\n                    throw new java.lang.IllegalArgumentException(((\"Cannot interpret '\" + hexDigit) + \"' as a hexadecimal digit\"));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"search":"hexDigit","replace":"hexDigit"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:656","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[263],"tindex":"3122a7cb-3e71-11e6-99d9-21e7def1ff93","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2322","type":"CtMethodImpl","sourcecode":"public int indexOf(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOf(str, 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:179","type":"CtBinaryOperatorImpl","sourcecode":"numerator < 0"},"failures":[264],"tindex":"3122a7cc-3e71-11e6-99d9-9bd1698d40e3","method":{"position":"org.apache.commons.lang3.time.DateUtils:488","type":"CtMethodImpl","sourcecode":"public static java.util.Date addSeconds(final java.util.Date date, final int amount) {\n    if (amount < 0) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.add(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"numerator":"amount"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:1127","type":"CtBinaryOperatorImpl","sourcecode":"(value <= start) || (value >= end)"},"failures":[],"tindex":"3122a7cd-3e71-11e6-99d9-83d0caad6b06","method":{"position":"org.apache.commons.lang3.ArrayUtils:3319","type":"CtMethodImpl","sourcecode":"public static double[] toPrimitive(final java.lang.Double[] array, final double valueForNull) {\n    if ((valueForNull <= valueForNull) || (value >= valueForNull)) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.double[];\n            } \n            final double[] double[] = new double[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Double java.lang.Double = array[i];\n                result[i] = b == null ? valueForNull : b.doubleValue();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"valueForNull","end":"valueForNull","value":"valueForNull"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:547","type":"CtVariableReadImpl","sourcecode":"inLiteral"},"failures":[53,54,55,56,57,58,59,60,61,62],"tindex":"3122cede-3e71-11e6-99d9-0d7b10071c94","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1612","type":"CtMethodImpl","sourcecode":"protected void setUseClassName(final boolean useClassName) {\n    if (useClassName) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.this.boolean = useClassName;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inLiteral":"useClassName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:505","type":"CtBinaryOperatorImpl","sourcecode":"bool == null"},"failures":[265],"tindex":"3122cedf-3e71-11e6-99d9-5fc584f1a096","method":{"position":"org.apache.commons.lang3.BooleanUtils:104","type":"CtMethodImpl","sourcecode":"public static boolean isNotTrue(final java.lang.Boolean bool) {\n    if (bool == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return !(org.apache.commons.lang3.BooleanUtils.isTrue(bool));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"bool"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1491","type":"CtBinaryOperatorImpl","sourcecode":"(raw.getEnclosingClass()) == null"},"failures":[266],"tindex":"3122cee0-3e71-11e6-99d9-51d07af73573","method":{"position":"org.apache.commons.lang3.ClassUtils:541","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitiveOrWrapper(final java.lang.Class<?> type) {\n    if ((type.getEnclosingClass()) == null) {\n        {\n            if (type == null) {\n                return false;\n            } \n            return (type.isPrimitive()) || (org.apache.commons.lang3.ClassUtils.isPrimitiveWrapper(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1957","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[267],"tindex":"3122f5f1-3e71-11e6-99d9-8730b82d470a","method":{"position":"org.apache.commons.lang3.ArrayUtils:4420","type":"CtMethodImpl","sourcecode":"public static short[] add(final short[] array, final int index, final short element) {\n    if (index < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((short[])(org.apache.commons.lang3.ArrayUtils.add(array, index, java.lang.Short.valueOf(element), java.lang.Short.java.lang.Short.java.lang.Class<java.lang.Short>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3320","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[268,269],"tindex":"3122f5f2-3e71-11e6-99d9-edfd85a4457e","method":{"position":"org.apache.commons.lang3.ArrayUtils:792","type":"CtMethodImpl","sourcecode":"public static java.lang.Double[] nullToEmpty(final java.lang.Double[] array) {\n    if (array == null) {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Double[];\n            } \n            return array;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1291","type":"CtBinaryOperatorImpl","sourcecode":"(size()) > 0"},"failures":[],"tindex":"3122f5f3-3e71-11e6-99d9-93839fae78d4","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:552","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(final org.apache.commons.lang3.text.StrBuilder source) {\n    if (source == null) {\n        return null;\n    } \n    final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(source.length()).append(source);\n    substitute(buf, 0, buf.length());\n    return buf.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5411","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"31231d04-3e71-11e6-99d9-61507d2ac4a3","method":{"position":"org.apache.commons.lang3.BooleanUtils:881","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final boolean bool, final java.lang.String trueString, final java.lang.String falseString) {\n    if (falseString == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return bool ? trueString : falseString;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"falseString"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:299","type":"CtInvocationImpl","sourcecode":"value.equals(falseValue)"},"failures":[],"tindex":"31231d05-3e71-11e6-99d9-f1d817020e58","method":{"position":"org.apache.commons.lang3.mutable.MutableShort:148","type":"CtMethodImpl","sourcecode":"public void add(final java.lang.Number operand) {\n    if (operand.equals(operand)) {\n        {\n            org.apache.commons.lang3.mutable.MutableShort.this.short += operand.shortValue();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"falseValue":"operand","value":"operand"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:857","type":"CtBinaryOperatorImpl","sourcecode":"(isEquals) == false"},"failures":[270],"tindex":"31231d06-3e71-11e6-99d9-ed096109a3b4","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1005","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final boolean value) {\n    if (value == false) {\n        {\n            return append(value).appendNewLine();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEquals":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1007","type":"CtBinaryOperatorImpl","sourcecode":"0 == nHex"},"failures":[271,272,273,274,275,276],"tindex":"31234417-3e71-11e6-99d9-278f0f3b0f0f","method":{"position":"org.apache.commons.lang3.BitField:94","type":"CtMethodImpl","sourcecode":"public int getRawValue(final int holder) {\n    if (0 == holder) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return holder & (int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nHex":"holder"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1247","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[277],"tindex":"31234418-3e71-11e6-99d9-d9a773ffe394","method":{"position":"org.apache.commons.lang3.StringUtils:4417","type":"CtMethodImpl","sourcecode":"public static java.lang.String replaceOnce(final java.lang.String text, final java.lang.String searchString, final java.lang.String replacement) {\n    if (searchString != null) {\n        {\n            return org.apache.commons.lang3.StringUtils.replace(text, searchString, replacement, 1);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"searchString"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1586","type":"CtBinaryOperatorImpl","sourcecode":"0 == nBools"},"failures":[],"tindex":"31234419-3e71-11e6-99d9-4bf3973adfe2","method":{"position":"org.apache.commons.lang3.time.DateUtils:553","type":"CtMethodImpl","sourcecode":"public static java.util.Date setMonths(final java.util.Date date, final int amount) {\n    if (0 == amount) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.set(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"amount"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:881","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Arrays.equals(lhs, rhs))"},"failures":[],"tindex":"31236b2a-3e71-11e6-99d9-d99215a9e77b","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:185","type":"CtMethodImpl","sourcecode":"static void register(final java.lang.Object value) {\n    if (!(java.util.Arrays.equals(value, value))) {\n        {\n            if (value != null) {\n                final java.util.Map<java.lang.Object, java.lang.Object> java.util.Map<java.lang.Object, java.lang.Object> = org.apache.commons.lang3.builder.ToStringStyle.getRegistry();\n                if (m == null) {\n                    org.apache.commons.lang3.builder.ToStringStyle.org.apache.commons.lang3.builder.ToStringStyle.java.lang.ThreadLocal<java.util.WeakHashMap<java.lang.Object, java.lang.Object>>.set(new java.util.WeakHashMap<java.lang.Object, java.lang.Object>());\n                } \n                org.apache.commons.lang3.builder.ToStringStyle.getRegistry().put(value, null);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"value","rhs":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:730","type":"CtBinaryOperatorImpl","sourcecode":"str == falseString"},"failures":[],"tindex":"31236b2b-3e71-11e6-99d9-b7e381d84e8e","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:303","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setContentEnd(final java.lang.String contentEnd) {\n    if (contentEnd == contentEnd) {\n        {\n            super.setContentEnd(contentEnd);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"contentEnd","falseString":"contentEnd"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:435","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[278,279,280],"tindex":"31236b2c-3e71-11e6-99d9-c73c652f0a63","method":{"position":"org.apache.commons.lang3.ArrayUtils:434","type":"CtMethodImpl","sourcecode":"public static float[] clone(final float[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            return array.clone();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:514","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.ArrayUtils.isSameLength(classArray, toClassArray)) == false"},"failures":[],"tindex":"3123923d-3e71-11e6-99d9-1b62c71bc72d","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:195","type":"CtMethodImpl","sourcecode":"static void unregister(final java.lang.Object lhs, final java.lang.Object rhs) {\n    if ((org.apache.commons.lang3.ArrayUtils.isSameLength(rhs, rhs)) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>> java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>> = org.apache.commons.lang3.builder.EqualsBuilder.getRegistry();\n            if (registry != null) {\n                final org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> = org.apache.commons.lang3.builder.EqualsBuilder.getRegisterPair(lhs, rhs);\n                registry.remove(pair);\n                synchronized(org.apache.commons.lang3.builder.EqualsBuilder.org.apache.commons.lang3.builder.EqualsBuilder.java.lang.Class) {\n                    registry = org.apache.commons.lang3.builder.EqualsBuilder.getRegistry();\n                    if ((registry != null) && (registry.isEmpty())) {\n                        org.apache.commons.lang3.builder.EqualsBuilder.org.apache.commons.lang3.builder.EqualsBuilder.java.lang.ThreadLocal<java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>>>.remove();\n                    } \n                }\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toClassArray":"rhs","classArray":"rhs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MemberUtils:59","type":"CtBinaryOperatorImpl","sourcecode":"((!(o.isAccessible())) && (java.lang.reflect.Modifier.isPublic(m.getModifiers()))) && (org.apache.commons.lang3.reflect.MemberUtils.isPackageAccess(m.getDeclaringClass().getModifiers()))"},"failures":[],"tindex":"3123923e-3e71-11e6-99d9-af1cb4979234","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:438","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.lang.Object value, final java.lang.Boolean fullDetail) {\n    if (((!(value.isAccessible())) && (java.lang.reflect.Modifier.isPublic(value.getModifiers()))) && (org.apache.commons.lang3.reflect.MemberUtils.isPackageAccess(m.getDeclaringClass().getModifiers()))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (value == null) {\n                appendNullText(buffer, fieldName);\n            } else {\n                appendInternal(buffer, fieldName, value, isFullDetail(fullDetail));\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"value","o":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrMatcher:193","type":"CtBinaryOperatorImpl","sourcecode":"(chars.length()) == 1"},"failures":[],"tindex":"3123b94f-3e71-11e6-99d9-ed4390cee4c2","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:337","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final char[] lhs, final char[] rhs) {\n    if ((fieldName.length()) == 1) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (!(java.util.Arrays.equals(lhs, rhs))) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Character[]>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Character[] getLeft() {\n                        return org.apache.commons.lang3.ArrayUtils.toObject(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Character[] getRight() {\n                        return org.apache.commons.lang3.ArrayUtils.toObject(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chars":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSetUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[281,282,283,284,285,286],"tindex":"3123b950-3e71-11e6-99d9-fbc3c937a33f","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Field getField(final java.lang.Class<?> cls, final java.lang.String fieldName, final boolean forceAccess) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.isTrue((cls != null), \"The class must not be null\");\n            org.apache.commons.lang3.Validate.isTrue(org.apache.commons.lang3.StringUtils.isNotBlank(fieldName), \"The field name must not be blank/empty\");\n            for (java.lang.Class<?> java.lang.Class<?> = cls ; acls != null ; acls = acls.getSuperclass()) {\n                try {\n                    final java.lang.reflect.Field java.lang.reflect.Field = acls.getDeclaredField(fieldName);\n                    if (!(java.lang.reflect.Modifier.isPublic(field.getModifiers()))) {\n                        if (forceAccess) {\n                            field.setAccessible(true);\n                        } else {\n                            continue;\n                        }\n                    } \n                    return field;\n                } catch (final java.lang.NoSuchFieldException ex) {\n                }\n            }\n            java.lang.reflect.Field java.lang.reflect.Field = null;\n            for (final java.lang.Class<?> java.lang.Class<?> : org.apache.commons.lang3.ClassUtils.getAllInterfaces(cls)) {\n                try {\n                    final java.lang.reflect.Field java.lang.reflect.Field = class1.getField(fieldName);\n                    org.apache.commons.lang3.Validate.isTrue((match == null), (\"Reference to field %s is ambiguous relative to %s\" + \"; a matching field exists on two or more implemented interfaces.\"), fieldName, cls);\n                    match = test;\n                } catch (final java.lang.NoSuchFieldException ex) {\n                }\n            }\n            return match;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3966","type":"CtBinaryOperatorImpl","sourcecode":"array1 == null"},"failures":[287],"tindex":"3123e061-3e71-11e6-99d9-67ae65ffa50b","method":{"position":"org.apache.commons.lang3.ArrayUtils:1335","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final double[] array1, final double[] array2) {\n    if (array2 == null) {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"array2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:657","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"3123e062-3e71-11e6-99d9-59bcf3139960","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:558","type":"CtMethodImpl","sourcecode":"public static final java.lang.String unescapeJson(final java.lang.String input) {\n    if (input == null) {\n        {\n            return org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(input);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:173","type":"CtBinaryOperatorImpl","sourcecode":"(nullText != null) && (nullText.isEmpty())"},"failures":[],"tindex":"31240773-3e71-11e6-99d9-d75d2e6c4b02","method":{"position":"org.apache.commons.lang3.time.FastDateParser:460","type":"CtMethodImpl","sourcecode":"private org.apache.commons.lang3.time.FastDateParser.Strategy getStrategy(final java.lang.String formatField, final java.util.Calendar definingCalendar) {\n    if ((formatField != null) && (nullText.isEmpty())) {\n        {\n            switch (formatField.charAt(0)) {\n                case '\\'' :\n                    if ((formatField.length()) > 2) {\n                        return new org.apache.commons.lang3.time.FastDateParser.CopyQuotedStrategy(formatField.substring(1, ((formatField.length()) - 1)));\n                    } \n                default :\n                    return new org.apache.commons.lang3.time.FastDateParser.CopyQuotedStrategy(formatField);\n                case 'D' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'E' :\n                    return getLocaleSpecificStrategy(java.util.Calendar.java.util.Calendar.int, definingCalendar);\n                case 'F' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'G' :\n                    return getLocaleSpecificStrategy(java.util.Calendar.java.util.Calendar.int, definingCalendar);\n                case 'H' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'K' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'M' :\n                    return (formatField.length()) >= 3 ? getLocaleSpecificStrategy(java.util.Calendar.java.util.Calendar.int, definingCalendar) : org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'S' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'W' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'a' :\n                    return getLocaleSpecificStrategy(java.util.Calendar.java.util.Calendar.int, definingCalendar);\n                case 'd' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'h' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'k' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'm' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 's' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'w' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'y' :\n                    return (formatField.length()) > 2 ? org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy : org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'Z' :\n                case 'z' :\n                    return getLocaleSpecificStrategy(java.util.Calendar.java.util.Calendar.int, definingCalendar);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nullText":"formatField"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2245","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[288],"tindex":"31242e84-3e71-11e6-99d9-5fc098320f2f","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:200","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Calendar calendar, final java.lang.String pattern) {\n    if (pattern == null) {\n        {\n            return org.apache.commons.lang3.time.DateFormatUtils.format(calendar, pattern, null, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:496","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"31242e85-3e71-11e6-99d9-5fac2cf02c61","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:900","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if (buffer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendTo(buffer, calendar.get(int));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"buffer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1371","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[289,290,291],"tindex":"31242e86-3e71-11e6-99d9-e77763b3c3e0","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:166","type":"CtMethodImpl","sourcecode":"public static int reflectionCompare(final java.lang.Object lhs, final java.lang.Object rhs, final boolean compareTransients) {\n    if (rhs instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return org.apache.commons.lang3.builder.CompareToBuilder.reflectionCompare(lhs, rhs, compareTransients, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:255","type":"CtInvocationImpl","sourcecode":"java.lang.Float.isNaN(a)"},"failures":[292],"tindex":"31245597-3e71-11e6-99d9-17418963c358","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1296","type":"CtMethodImpl","sourcecode":"public static float max(final float a, final float b, final float c) {\n    if (java.lang.Float.isNaN(c)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.Math.max(java.lang.Math.max(a, b), c);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"c"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3760","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[293],"tindex":"31245598-3e71-11e6-99d9-65afe8c5a091","method":{"position":"org.apache.commons.lang3.ArrayUtils:1477","type":"CtMethodImpl","sourcecode":"public static void reverse(final short[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return ;\n            } \n            org.apache.commons.lang3.ArrayUtils.reverse(array, 0, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1597","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.reflect.TypeUtils.equals(p.getRawType(), other.getRawType())) && (org.apache.commons.lang3.reflect.TypeUtils.equals(p.getOwnerType(), other.getOwnerType()))"},"failures":[],"tindex":"31245599-3e71-11e6-99d9-296f64fddf61","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:747","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> getTypeArguments(final java.lang.reflect.ParameterizedType type) {\n    if ((org.apache.commons.lang3.reflect.TypeUtils.equals(type.getRawType(), type.getRawType())) && (org.apache.commons.lang3.reflect.TypeUtils.equals(p.getOwnerType(), other.getOwnerType()))) {\n        {\n            return org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(type, org.apache.commons.lang3.reflect.TypeUtils.getRawType(type), null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"type","other":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.reflect.FieldUtils:682","type":"CtInvocationImpl","sourcecode":"java.lang.reflect.Modifier.isFinal(field.getModifiers())"},"failures":[294,295,296,297],"tindex":"31247caa-3e71-11e6-99d9-0940f4932cbc","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:236","type":"CtMethodImpl","sourcecode":"public static java.lang.Object readStaticField(final java.lang.reflect.Field field) throws java.lang.IllegalAccessException {\n    if (java.lang.reflect.Modifier.isFinal(field.getModifiers())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            return org.apache.commons.lang3.reflect.FieldUtils.readStaticField(field, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:468","type":"CtVariableReadImpl","sourcecode":"whitespace"},"failures":[],"tindex":"31247cab-3e71-11e6-99d9-35edeac4c43f","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1922","type":"CtMethodImpl","sourcecode":"protected void setFieldSeparatorAtStart(final boolean fieldSeparatorAtStart) {\n    if (fieldSeparatorAtStart) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldSeparatorAtStart) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.lang3.builder.ToStringStyle.this.boolean = fieldSeparatorAtStart;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"whitespace":"fieldSeparatorAtStart"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2245","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,142,143,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,155,155,156,156,157,157,158,158,159,159,160,160,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,168,169,169,170,170,171,171,172,172,173,173,174,174,175,175,176,176,177,177,178,178,179,179,180,180,181,181,182,182,183,183,184,184,185,185,186,186,187,187,188,188,189,189,190,190,191,191,192,192,193,193,194,194,195,195,196,196,197,197,198,198,199,199,200,200,201,201,202,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,210,210,211,211,212,212,213,213,214,214,215,215,216,216,217,217,218,218,219,219,220,220,221,221,222,222,223,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,52,238,239,240,241,242,243,244,245,246,246,247,247,248,248,249,249,250,250,251,251,252,252,253,253,254,254,255,255,256,256,257,257,258,258,259,259,260,260,261,261],"tindex":"3124a3bc-3e71-11e6-99d9-f74ecac78cdc","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1843","type":"CtMethodImpl","sourcecode":"protected void setContentEnd(java.lang.String contentEnd) {\n    if (contentEnd == null) {\n        {\n            if (contentEnd == null) {\n                contentEnd = \"\";\n            } \n            org.apache.commons.lang3.builder.ToStringStyle.this.java.lang.String = contentEnd;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"contentEnd"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:338","type":"CtBinaryOperatorImpl","sourcecode":"(c != (org.apache.commons.lang3.text.ExtendedMessageFormat.START_FMT)) && (c != (org.apache.commons.lang3.text.ExtendedMessageFormat.END_FE))"},"failures":[],"tindex":"3124cacd-3e71-11e6-99d9-210f0c5864d9","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:551","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final char lhs, final char rhs) {\n    if ((lhs != lhs) && (c != rhs)) {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            boolean = lhs == rhs;\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.text.ExtendedMessageFormat.START_FMT":"lhs","c":"lhs","org.apache.commons.lang3.text.ExtendedMessageFormat.END_FE":"rhs"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:1108","type":"CtBinaryOperatorImpl","sourcecode":"(tokens) == null"},"failures":[298],"tindex":"3124f1de-3e71-11e6-99d9-ade085e4dac7","method":{"position":"org.apache.commons.lang3.StringUtils:388","type":"CtMethodImpl","sourcecode":"public static boolean isNoneBlank(java.lang.CharSequence... css) {\n    if (css == null) {\n        {\n            return !(org.apache.commons.lang3.StringUtils.isAnyBlank(css));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"tokens":"css"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:343","type":"CtBinaryOperatorImpl","sourcecode":"(index < 0) || (index >= (size))"},"failures":[],"tindex":"312518ef-3e71-11e6-99d9-6d09c310fc5a","method":{"position":"org.apache.commons.lang3.Conversion:1079","type":"CtMethodImpl","sourcecode":"public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n    if ((nBools < 0) || (index >= srcPos)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((((src.int) == 0) && (srcPos == 0)) || (0 == nBools)) {\n                return dstInit;\n            } \n            if (((nBools - 1) + dstPos) >= 32) {\n                throw new java.lang.IllegalArgumentException(\"nBools-1+dstPos is greather or equal to than 32\");\n            } \n            int int = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nBools ; i++) {\n                shift = (i * 1) + dstPos;\n                final int int = (src[(i + srcPos)] ? 1 : 0) << shift;\n                final int int = 1 << shift;\n                out = (out & (~mask)) | bits;\n            }\n            return out;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"srcPos","index":"nBools"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:467","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLowerCase(ch)"},"failures":[299],"tindex":"312518f0-3e71-11e6-99d9-cf9e59c2eef1","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1057","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrSubstitutor setVariableSuffix(final char suffix) {\n    if (java.lang.Character.isLowerCase(suffix)) {\n        {\n            return setVariableSuffixMatcher(org.apache.commons.lang3.text.StrMatcher.charMatcher(suffix));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"suffix"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:83","type":"CtBinaryOperatorImpl","sourcecode":"(ex == null) || ((ex.getCause()) == null)"},"failures":[],"tindex":"312518f1-3e71-11e6-99d9-99d1509e8284","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:582","type":"CtMethodImpl","sourcecode":"public static java.lang.String getStackTrace(final java.lang.Throwable throwable) {\n    if ((throwable == null) || ((ex.getCause()) == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            final java.io.PrintWriter java.io.PrintWriter = new java.io.PrintWriter(sw , true);\n            throwable.printStackTrace(pw);\n            return sw.getBuffer().toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ex":"throwable"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.reflect.InvocationTargetException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:910","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[],"tindex":"31254002-3e71-11e6-99d9-093310d3b738","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:92","type":"CtMethodImpl","sourcecode":"public static java.lang.Object invokeMethod(final java.lang.Object object, final java.lang.String methodName, java.lang.Object... args) throws java.lang.IllegalAccessException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (object == null) {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            final java.lang.Class<?>[] java.lang.Class<?>[] = org.apache.commons.lang3.ClassUtils.toClass(args);\n            return org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(object, methodName, args, parameterTypes);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.reflect.InvocationTargetException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:464","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isTitleCase(ch)"},"failures":[300],"tindex":"31254003-3e71-11e6-99d9-6528b555ec73","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:972","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer setIgnoredChar(final char ignored) {\n    if (java.lang.Character.isTitleCase(ignored)) {\n        {\n            return setIgnoredMatcher(org.apache.commons.lang3.text.StrMatcher.charMatcher(ignored));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ignored"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:575","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[301],"tindex":"31254004-3e71-11e6-99d9-65ec5d097557","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:693","type":"CtMethodImpl","sourcecode":"public boolean replaceIn(final org.apache.commons.lang3.text.StrBuilder source) {\n    if (source == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return false;\n            } \n            return substitute(source, 0, source.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2562","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[],"tindex":"31256715-3e71-11e6-99d9-af397564a9fc","method":{"position":"org.apache.commons.lang3.text.translate.OctalUnescaper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int translate(final java.lang.CharSequence input, final int index, final java.io.Writer out) throws java.io.IOException {\n    if (index < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = ((input.length()) - index) - 1;\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            if ((((input.charAt(index)) == '\\\\') && (remaining > 0)) && (isOctalDigit(input.charAt((index + 1))))) {\n                int int = index + 1;\n                int int = index + 2;\n                int int = index + 3;\n                builder.append(input.charAt(next));\n                if ((remaining > 1) && (isOctalDigit(input.charAt(next2)))) {\n                    builder.append(input.charAt(next2));\n                    if (((remaining > 2) && (isZeroToThree(input.charAt(next)))) && (isOctalDigit(input.charAt(next3)))) {\n                        builder.append(input.charAt(next3));\n                    } \n                } \n                out.write(java.lang.Integer.parseInt(builder.toString(), 8));\n                return 1 + (builder.length());\n            } \n            return 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2119","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"31256716-3e71-11e6-99d9-add30a7ae458","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:768","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final int[] array) {\n    if (fieldName == null) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3994","type":"CtBinaryOperatorImpl","sourcecode":"separator == null"},"failures":[302],"tindex":"31256717-3e71-11e6-99d9-6fe4748f2003","method":{"position":"org.apache.commons.lang3.StringUtils:5686","type":"CtMethodImpl","sourcecode":"public static java.lang.String capitalize(final java.lang.String str) {\n    if (str == null) {\n        {\n            int int;\n            if ((str == null) || ((strLen = str.length()) == 0)) {\n                return str;\n            } \n            char char = str.charAt(0);\n            if (java.lang.Character.isTitleCase(firstChar)) {\n                return str;\n            } \n            return new java.lang.StringBuilder(strLen).append(java.lang.Character.toTitleCase(firstChar)).append(str.substring(1)).toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.text.ParseException","condition":{"position":"org.apache.commons.lang3.StringUtils:7053","type":"CtBinaryOperatorImpl","sourcecode":"((m1.length()) == 0) || ((m2.length()) == 0)"},"failures":[],"tindex":"31258e28-3e71-11e6-99d9-b7e3b6e26ab6","method":{"position":"org.apache.commons.lang3.time.DateUtils:290","type":"CtMethodImpl","sourcecode":"public static java.util.Date parseDate(final java.lang.String str, final java.util.Locale locale, final java.lang.String... parsePatterns) throws java.text.ParseException {\n    if (((str.length()) == 0) || ((str.length()) == 0)) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.parseDateWithLeniency(str, locale, parsePatterns, true);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.text.ParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m1":"str","m2":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:424","type":"CtArrayReadImpl","sourcecode":"src[srcPos]"},"failures":[303],"tindex":"31258e29-3e71-11e6-99d9-7b9d149d2a80","method":{"position":"org.apache.commons.lang3.Conversion:1115","type":"CtMethodImpl","sourcecode":"public static short binaryToShort(final boolean[] src, final int srcPos, final short dstInit, final int dstPos, final int nBools) {\n    if (src[srcPos]) {\n        {\n            if ((((src.int) == 0) && (srcPos == 0)) || (0 == nBools)) {\n                return dstInit;\n            } \n            if (((nBools - 1) + dstPos) >= 16) {\n                throw new java.lang.IllegalArgumentException(\"nBools-1+dstPos is greather or equal to than 16\");\n            } \n            short short = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nBools ; i++) {\n                shift = (i * 1) + dstPos;\n                final int int = (src[(i + srcPos)] ? 1 : 0) << shift;\n                final int int = 1 << shift;\n                out = ((short)((out & (~mask)) | bits));\n            }\n            return out;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcPos":"srcPos","src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl","sourcecode":"buffer == null"},"failures":[304,305,306,307,308,309,310],"tindex":"3125b53a-3e71-11e6-99d9-97fbba81e9dd","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:712","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if (buffer == null) {\n        {\n            buffer.append(java.lang.String[][calendar.get(int)]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buffer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:938","type":"CtBinaryOperatorImpl","sourcecode":"((numerator) > 0 ? -(numerator) : numerator) < (-(denominator))"},"failures":[],"tindex":"3125b53b-3e71-11e6-99d9-23dd8e25bad5","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:547","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final int lhs, final int rhs) {\n    if ((lhs > 0 ? -(int) : int) < (-lhs)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (lhs != rhs) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Integer>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Integer getLeft() {\n                        return java.lang.Integer.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Integer getRight() {\n                        return java.lang.Integer.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"numerator":"lhs","denominator":"lhs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1275","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[311],"tindex":"3125dc4c-3e71-11e6-99d9-430b08f1b3dc","method":{"position":"org.apache.commons.lang3.ArrayUtils:1519","type":"CtMethodImpl","sourcecode":"public static void reverse(final double[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return ;\n            } \n            org.apache.commons.lang3.ArrayUtils.reverse(array, 0, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6451","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(middle))"},"failures":[],"tindex":"3125dc4d-3e71-11e6-99d9-c5eec90adf81","method":{"position":"org.apache.commons.lang3.ClassUtils:1088","type":"CtMethodImpl","sourcecode":"public static java.lang.String getPackageCanonicalName(final java.lang.String canonicalName) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(canonicalName)) || (org.apache.commons.lang3.StringUtils.isEmpty(canonicalName))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ClassUtils.getPackageName(org.apache.commons.lang3.ClassUtils.getCanonicalName(canonicalName));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"canonicalName","middle":"canonicalName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1138","type":"CtBinaryOperatorImpl","sourcecode":"c < a"},"failures":[312],"tindex":"3125dc4e-3e71-11e6-99d9-2b8e2d6210d4","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1134","type":"CtMethodImpl","sourcecode":"public static short min(short a, final short b, final short c) {\n    if (b < c) {\n        {\n            if (b < a) {\n                a = b;\n            } \n            if (c < a) {\n                a = c;\n            } \n            return a;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"c","c":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1156","type":"CtBinaryOperatorImpl","sourcecode":"focus == null"},"failures":[],"tindex":"3125dc4f-3e71-11e6-99d9-a513fa887ef4","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:435","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String format(final java.util.Calendar calendar) {\n    if (calendar == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return format(calendar, new java.lang.StringBuffer(int)).toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"focus":"calendar"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.JavaVersion:144","type":"CtInvocationImpl","sourcecode":"\"1.6\".equals(nom)"},"failures":[],"tindex":"31260360-3e71-11e6-99d9-ef1d6db4e1d8","method":{"position":"org.apache.commons.lang3.text.StrMatcher:205","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.StrMatcher stringMatcher(final java.lang.String str) {\n    if (\"1.6\".equals(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                return org.apache.commons.lang3.text.StrMatcher.org.apache.commons.lang3.text.StrMatcher.org.apache.commons.lang3.text.StrMatcher;\n            } \n            return new org.apache.commons.lang3.text.StrMatcher.StringMatcher(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:1009","type":"CtBinaryOperatorImpl","sourcecode":"toString != null"},"failures":[313],"tindex":"31260361-3e71-11e6-99d9-d715ddaf6a84","method":{"position":"org.apache.commons.lang3.StringUtils:3948","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final java.lang.Object[] array, final java.lang.String separator) {\n    if (separator != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (separator != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (array == null) {\n                        return null;\n                    } \n                    return org.apache.commons.lang3.StringUtils.join(array, separator, 0, array.int);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toString":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:762","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"31260362-3e71-11e6-99d9-8f2bf832865a","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:513","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(java.lang.CharSequence source) {\n    if (source == null) {\n        {\n            if (source == null) {\n                return null;\n            } \n            return replace(source, 0, source.length());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.Validate:874","type":"CtBinaryOperatorImpl","sourcecode":"(java.util.regex.Pattern.matches(pattern, input)) == false"},"failures":[],"tindex":"31262a73-3e71-11e6-99d9-8bec9fb0a116","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:488","type":"CtMethodImpl","sourcecode":"public static void writeStaticField(final java.lang.reflect.Field field, final java.lang.Object value) throws java.lang.IllegalAccessException {\n    if ((java.util.regex.Pattern.matches(value, value)) == false) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    org.apache.commons.lang3.reflect.FieldUtils.writeStaticField(field, value, false);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"value","pattern":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2766","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[314],"tindex":"31262a74-3e71-11e6-99d9-c777a1c55e73","method":{"position":"org.apache.commons.lang3.ArrayUtils:1353","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final float[] array1, final float[] array2) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:451","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,108,109,111,112,113,116],"tindex":"31262a75-3e71-11e6-99d9-1927ccdea97f","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:875","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final java.lang.Object[] lhs, final java.lang.Object[] rhs) {\n    if (fieldName == null) {\n        {\n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (!(java.util.Arrays.equals(lhs, rhs))) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Object[]>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Object[] getLeft() {\n                        return lhs;\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Object[] getRight() {\n                        return rhs;\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:974","type":"CtBinaryOperatorImpl","sourcecode":"lhs == null"},"failures":[315],"tindex":"31265186-3e71-11e6-99d9-9301226f00d7","method":{"position":"org.apache.commons.lang3.BooleanUtils:1040","type":"CtMethodImpl","sourcecode":"public static boolean xor(final boolean... array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                throw new java.lang.IllegalArgumentException(\"The Array must not be null\");\n            } \n            if ((array.int) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Array is empty\");\n            } \n            boolean boolean = false;\n            for (final boolean boolean : array) {\n                result ^= element;\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MemberUtils:59","type":"CtBinaryOperatorImpl","sourcecode":"((!(o.isAccessible())) && (java.lang.reflect.Modifier.isPublic(m.getModifiers()))) && (org.apache.commons.lang3.reflect.MemberUtils.isPackageAccess(m.getDeclaringClass().getModifiers()))"},"failures":[],"tindex":"31265187-3e71-11e6-99d9-97d93089826a","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:815","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final java.lang.Object object) {\n    if (((!(object.isAccessible())) && (java.lang.reflect.Modifier.isPublic(object.getModifiers()))) && (org.apache.commons.lang3.reflect.MemberUtils.isPackageAccess(m.getDeclaringClass().getModifiers()))) {\n        {\n            if ((object == null) || (object == null)) {\n                {\n                    if (object == null) {\n                        int = (int) * (int);\n                    } else {\n                        if (object.getClass().isArray()) {\n                            if (object instanceof long[]) {\n                                append(((long[])(object)));\n                            } else if (object instanceof int[]) {\n                                append(((int[])(object)));\n                            } else if (object instanceof short[]) {\n                                append(((short[])(object)));\n                            } else if (object instanceof char[]) {\n                                append(((char[])(object)));\n                            } else if (object instanceof byte[]) {\n                                append(((byte[])(object)));\n                            } else if (object instanceof double[]) {\n                                append(((double[])(object)));\n                            } else if (object instanceof float[]) {\n                                append(((float[])(object)));\n                            } else if (object instanceof boolean[]) {\n                                append(((boolean[])(object)));\n                            } else {\n                                append(((java.lang.Object[])(object)));\n                            }\n                        } else {\n                            int = ((int) * (int)) + (object.hashCode());\n                        }\n                    }\n                    return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"object","o":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ObjectUtils:575","type":"CtBinaryOperatorImpl","sourcecode":"count == null"},"failures":[],"tindex":"31267898-3e71-11e6-99d9-1da22d9d44a2","method":{"position":"org.apache.commons.lang3.mutable.MutableDouble:167","type":"CtMethodImpl","sourcecode":"public void add(final java.lang.Number operand) {\n    if (operand == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableDouble.this.double += operand.doubleValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"operand"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:297","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(className)"},"failures":[316,317],"tindex":"31267899-3e71-11e6-99d9-1928ca56a1e0","method":{"position":"org.apache.commons.lang3.Validate:344","type":"CtMethodImpl","sourcecode":"public static <T extends java.util.Map<?, ?>>T notEmpty(final T map, final java.lang.String message, final java.lang.Object... values) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(message)) {\n        {\n            if (map == null) {\n                throw new java.lang.NullPointerException(java.lang.String.format(message, values));\n            } \n            if (map.isEmpty()) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message, values));\n            } \n            return map;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"message"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5192","type":"CtBinaryOperatorImpl","sourcecode":"(index < 0) || (index >= length)"},"failures":[],"tindex":"31269faa-3e71-11e6-99d9-a31ba630faf7","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1811","type":"CtMethodImpl","sourcecode":"private void replaceImpl(final int startIndex, final int endIndex, final int removeLen, final java.lang.String insertStr, final int insertLen) {\n    if ((endIndex < 0) || (index >= startIndex)) {\n        {\n            final int int = ((int) - removeLen) + insertLen;\n            if (insertLen != removeLen) {\n                ensureCapacity(newSize);\n                java.lang.System.arraycopy(char[], endIndex, char[], (startIndex + insertLen), ((int) - endIndex));\n                int = newSize;\n            } \n            if (insertLen > 0) {\n                insertStr.getChars(0, insertLen, char[], startIndex);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"startIndex","index":"endIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2137","type":"CtBinaryOperatorImpl","sourcecode":"start > end"},"failures":[],"tindex":"31269fab-3e71-11e6-99d9-f54d89495344","method":{"position":"org.apache.commons.lang3.ArrayUtils:2652","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) {\n    if (startIndex > startIndex) {\n        {\n            if ((valueToFind <= valueToFind) || (value >= valueToFind)) {\n                {\n                    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n                        return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n                    } \n                    if (startIndex < 0) {\n                        return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n                    } else if (startIndex >= (array.int)) {\n                        startIndex = (array.int) - 1;\n                    } \n                    for (int int = startIndex ; i >= 0 ; i--) {\n                        if (valueToFind == (array[i])) {\n                            return i;\n                        } \n                    }\n                    return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"startIndex","end":"startIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1870","type":"CtBinaryOperatorImpl","sourcecode":"fieldNameValueSeparator == null"},"failures":[318],"tindex":"3126c6bc-3e71-11e6-99d9-b9508436682f","method":{"position":"org.apache.commons.lang3.StringUtils:2449","type":"CtMethodImpl","sourcecode":"public static java.lang.String substringBetween(final java.lang.String str, final java.lang.String tag) {\n    if (str == null) {\n        {\n            return org.apache.commons.lang3.StringUtils.substringBetween(str, tag, tag);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldNameValueSeparator":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:636","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[319,320],"tindex":"3126c6bd-3e71-11e6-99d9-a953f865c238","method":{"position":"org.apache.commons.lang3.reflect.InheritanceUtils:49","type":"CtMethodImpl","sourcecode":"public static int distance(final java.lang.Class<?> child, final java.lang.Class<?> parent) {\n    if (parent == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((child == null) || (parent == null)) {\n                return -1;\n            } \n            if (child.equals(parent)) {\n                return 0;\n            } \n            final java.lang.Class<?> java.lang.Class<?> = child.getSuperclass();\n            int int = org.apache.commons.lang3.BooleanUtils.toInteger(parent.equals(cParent));\n            if (d == 1) {\n                return d;\n            } else {\n                d += org.apache.commons.lang3.reflect.InheritanceUtils.distance(cParent, parent);\n                return d > 0 ? d + 1 : -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"parent"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:534","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[321,322],"tindex":"3126c6be-3e71-11e6-99d9-2b71520d050a","method":{"position":"org.apache.commons.lang3.Validate:295","type":"CtMethodImpl","sourcecode":"public static <T extends java.util.Collection<?>>T notEmpty(final T collection, final java.lang.String message, final java.lang.Object... values) {\n    if (message == null) {\n        {\n            if (collection == null) {\n                throw new java.lang.NullPointerException(java.lang.String.format(message, values));\n            } \n            if (collection.isEmpty()) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message, values));\n            } \n            return collection;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"message"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:762","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[323],"tindex":"3126edcf-3e71-11e6-99d9-3fdb2a2c8da8","method":{"position":"org.apache.commons.lang3.StringUtils:1153","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final java.lang.CharSequence seq, final int searchChar) {\n    if (seq == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"seq"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1558","type":"CtBinaryOperatorImpl","sourcecode":"length > 0"},"failures":[324,325],"tindex":"3126edd0-3e71-11e6-99d9-153400a16a08","method":{"position":"org.apache.commons.lang3.StringUtils:5509","type":"CtMethodImpl","sourcecode":"public static java.lang.String center(java.lang.String str, final int size, final char padChar) {\n    if (size > 0) {\n        {\n            if ((str == null) || (size <= 0)) {\n                return str;\n            } \n            final int int = str.length();\n            final int int = size - strLen;\n            if (pads <= 0) {\n                return str;\n            } \n            str = org.apache.commons.lang3.StringUtils.leftPad(str, (strLen + (pads / 2)), padChar);\n            str = org.apache.commons.lang3.StringUtils.rightPad(str, size, padChar);\n            return str;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"size"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2481","type":"CtBinaryOperatorImpl","sourcecode":"((str == null) || (open == null)) || (close == null)"},"failures":[326],"tindex":"3126edd1-3e71-11e6-99d9-59789ef89f04","method":{"position":"org.apache.commons.lang3.StringUtils:1536","type":"CtMethodImpl","sourcecode":"public static int indexOfAny(final java.lang.CharSequence cs, final char... searchChars) {\n    if (((cs == null) || (cs == null)) || (cs == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars))) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            final int int = cs.length();\n            final int int = csLen - 1;\n            final int int = searchChars.int;\n            final int int = searchLen - 1;\n            for (int int = 0 ; i < csLen ; i++) {\n                final char char = cs.charAt(i);\n                for (int int = 0 ; j < searchLen ; j++) {\n                    if ((searchChars[j]) == ch) {\n                        if (((i < csLast) && (j < searchLast)) && (java.lang.Character.isHighSurrogate(ch))) {\n                            if ((searchChars[(j + 1)]) == (cs.charAt((i + 1)))) {\n                                return i;\n                            } \n                        } else {\n                            return i;\n                        }\n                    } \n                }\n            }\n            return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"cs","close":"cs","open":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomStringUtils:265","type":"CtBinaryOperatorImpl","sourcecode":"count == 0"},"failures":[],"tindex":"312714e2-3e71-11e6-99d9-b777aa331779","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1553","type":"CtMethodImpl","sourcecode":"protected void appendSummarySize(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final int size) {\n    if (size == 0) {\n        {\n            buffer.append(java.lang.String);\n            buffer.append(size);\n            buffer.append(java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"size"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.LookupTranslator:49","type":"CtBinaryOperatorImpl","sourcecode":"lookup != null"},"failures":[327],"tindex":"312714e3-3e71-11e6-99d9-c148ae2f97eb","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:647","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final java.lang.Object[] lhs, final java.lang.Object[] rhs, final java.util.Comparator<?> comparator) {\n    if (rhs != null) {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i], comparator);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lookup":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1597","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.reflect.TypeUtils.equals(p.getRawType(), other.getRawType())) && (org.apache.commons.lang3.reflect.TypeUtils.equals(p.getOwnerType(), other.getOwnerType()))"},"failures":[],"tindex":"31273bf4-3e71-11e6-99d9-fb3a904d518d","method":{"position":"org.apache.commons.lang3.text.CompositeFormat:67","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer format(final java.lang.Object obj, final java.lang.StringBuffer toAppendTo, final java.text.FieldPosition pos) {\n    if ((org.apache.commons.lang3.reflect.TypeUtils.equals(obj.getRawType(), obj.getRawType())) && (org.apache.commons.lang3.reflect.TypeUtils.equals(p.getOwnerType(), other.getOwnerType()))) {\n        {\n            return java.text.Format.format(obj, toAppendTo, pos);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"obj","other":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:239","type":"CtBinaryOperatorImpl","sourcecode":"(cal1 == null) || (cal2 == null)"},"failures":[328],"tindex":"31273bf5-3e71-11e6-99d9-536dfe339509","method":{"position":"org.apache.commons.lang3.time.DateUtils:218","type":"CtMethodImpl","sourcecode":"public static boolean isSameInstant(final java.util.Calendar cal1, final java.util.Calendar cal2) {\n    if ((cal2 == null) || (cal1 == null)) {\n        {\n            if ((cal1 == null) || (cal2 == null)) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            return (cal1.getTime().getTime()) == (cal2.getTime().getTime());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cal2":"cal1","cal1":"cal2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:733","type":"CtInvocationImpl","sourcecode":"str.equals(trueString)"},"failures":[146,146,147,172,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,202,203,204,205,206,207,208,209,210,211,212,213,214,214,215],"tindex":"31273bf6-3e71-11e6-99d9-63d2b7f4d34c","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:801","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final double value) {\n    if (fieldName.equals(fieldName)) {\n        {\n            buffer.append(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName","trueString":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:928","type":"CtBinaryOperatorImpl","sourcecode":"(comparison) != 0"},"failures":[329],"tindex":"31276307-3e71-11e6-99d9-073325eb5ca3","method":{"position":"org.apache.commons.lang3.time.DateUtils:404","type":"CtMethodImpl","sourcecode":"public static java.util.Date addYears(final java.util.Date date, final int amount) {\n    if (amount != 0) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.add(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"amount"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1115","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[63],"tindex":"31276308-3e71-11e6-99d9-13a84bfabad4","method":{"position":"org.apache.commons.lang3.ArrayUtils:174","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final java.lang.Object array, final java.lang.String stringIfNull) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return stringIfNull;\n            } \n            return new org.apache.commons.lang3.builder.ToStringBuilder(array , org.apache.commons.lang3.builder.ToStringStyle.org.apache.commons.lang3.builder.ToStringStyle.org.apache.commons.lang3.builder.ToStringStyle).append(array).toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:631","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[54,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,84,85,86,87,88,89,90,117,118,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,142,143,143,144,144,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,155,155,156,156,157,157,158,158,159,159,160,160,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,168,169,169,170,170,171,171,172,172,173,173,174,174,175,175,176,176,177,177,178,178,179,179,180,180,181,181,182,182,183,183,184,185,185,186,186,187,187,188,188,189,189,190,190,191,191,192,192,193,193,194,194,195,195,196,196,197,197,198,198,199,200,200,201,201,202,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,210,210,211,212,212,213,213,214,214,215,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261],"tindex":"3127b129-3e71-11e6-99d9-1de73b07aaec","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:408","type":"CtMethodImpl","sourcecode":"protected void removeLastFieldSeparator(final java.lang.StringBuffer buffer) {\n    if (buffer == null) {\n        {\n            final int int = buffer.length();\n            final int int = java.lang.String.length();\n            if (((len > 0) && (sepLen > 0)) && (len >= sepLen)) {\n                boolean boolean = true;\n                for (int int = 0 ; i < sepLen ; i++) {\n                    if ((buffer.charAt(((len - 1) - i))) != (java.lang.String.charAt(((sepLen - 1) - i)))) {\n                        match = false;\n                        break;\n                    } \n                }\n                if (match) {\n                    buffer.setLength((len - sepLen));\n                } \n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"buffer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:970","type":"CtBinaryOperatorImpl","sourcecode":"abbreviation != null"},"failures":[],"tindex":"3127d83a-3e71-11e6-99d9-a5c7ebf802b7","method":{"position":"org.apache.commons.lang3.StringUtils:3948","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final java.lang.Object[] array, final java.lang.String separator) {\n    if (separator != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (separator != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (array == null) {\n                        return null;\n                    } \n                    return org.apache.commons.lang3.StringUtils.join(array, separator, 0, array.int);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"abbreviation":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:667","type":"CtInvocationImpl","sourcecode":"str.equals(trueString)"},"failures":[],"tindex":"3127d83b-3e71-11e6-99d9-0ba32a73c5e7","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1439","type":"CtMethodImpl","sourcecode":"protected void appendSummary(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final boolean[] array) {\n    if (fieldName.equals(fieldName)) {\n        {\n            appendSummarySize(buffer, fieldName, array.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName","trueString":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:61","type":"CtBinaryOperatorImpl","sourcecode":"(ex == null) || ((ex.getCause()) == null)"},"failures":[],"tindex":"3127d83c-3e71-11e6-99d9-1944249d17b8","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:179","type":"CtMethodImpl","sourcecode":"public static java.lang.Throwable getRootCause(final java.lang.Throwable throwable) {\n    if ((throwable == null) || ((ex.getCause()) == null)) {\n        {\n            final java.util.List<java.lang.Throwable> java.util.List<java.lang.Throwable> = org.apache.commons.lang3.exception.ExceptionUtils.getThrowableList(throwable);\n            return (list.size()) < 2 ? null : ((java.lang.Throwable)(list.get(((list.size()) - 1))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ex":"throwable"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:770","type":"CtVariableReadImpl","sourcecode":"value"},"failures":[330],"tindex":"3127d83d-3e71-11e6-99d9-a7819ed854c7","method":{"position":"org.apache.commons.lang3.BitField:266","type":"CtMethodImpl","sourcecode":"public short setShortBoolean(final short holder, final boolean flag) {\n    if (flag) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return flag ? setShort(holder) : clearShort(holder);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"flag"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
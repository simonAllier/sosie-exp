{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":299,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":202,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":214,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":196,"org.apache.commons.lang3.text.StrBuilderTest.testSubstringInt":228,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray":347,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayDouble":401,"org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP":74,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":300,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_charArray":23,"org.apache.commons.lang3.time.FastDatePrinterTest.testMilleniumBug":81,"org.apache.commons.lang3.ValidateTest.testNotBlankMsgBlankStringWithWhitespacesShouldThrow":416,"org.apache.commons.lang3.mutable.MutableByteTest.testSubtractValuePrimitive":240,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_StrMatcher_String":261,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementLongArray":272,"org.apache.commons.lang3.text.StrTokenizerTest.testReset":22,"org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringChar":115,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArrayEqualAsObject":311,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":97,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":176,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":219,"org.apache.commons.lang3.text.StrBuilderTest.testContains_StrMatcher":263,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":221,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":123,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":308,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray":346,"org.apache.commons.lang3.EnumUtilsTest.test_processBitVectors":275,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":94,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":248,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":297,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVEmpty":47,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude":348,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":215,"org.apache.commons.lang3.ClassPathUtilsTest.testToFullyQualifiedNamePackageNull":419,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":188,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":217,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_String":34,"org.apache.commons.lang3.ValidateTest.testNotBlankMsgEmptyStringShouldThrow":405,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":192,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char":46,"org.apache.commons.lang3.text.StrTokenizerTest.testListArray":26,"org.apache.commons.lang3.RandomUtilsTest.testNextBytes":230,"org.apache.commons.lang3.reflect.TypeLiteralTest.testEquals":238,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testLongArrayAsObject":382,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher_int":260,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":159,"org.apache.commons.lang3.reflect.TypeLiteralTest.testBasic":236,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":195,"org.apache.commons.lang3.ValidateTest.testNotBlankNotBlankStringShouldNotThrow":411,"org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected":83,"org.apache.commons.lang3.math.NumberUtilsTest.testToByteString":6,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":127,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO":77,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":177,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":170,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeStartText":353,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":100,"org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer":222,"org.apache.commons.lang3.AnnotationUtilsTest.testNonEquivalentAnnotationsOfSameType":285,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticFieldForceAccess":399,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testBlank":330,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO":72,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":91,"org.apache.commons.lang3.AnnotationUtilsTest.testSameInstance":279,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementLongArray":113,"org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetValueDelimiter":224,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateLong":425,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":73,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementIntArray":371,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull":342,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassOutputChange":25,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapFull":225,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":167,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":105,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":247,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":310,"org.apache.commons.lang3.AnnotationUtilsTest.testEquivalence":280,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear":109,"org.apache.commons.lang3.ValidateTest.testNotBlankMsgBlankStringShouldThrow":406,"org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphanumeric_char":231,"org.apache.commons.lang3.builder.EqualsBuilderTest.testSuper":239,"org.apache.commons.lang3.ArrayUtilsTest.testToObject_long":242,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentEnd":352,"org.apache.commons.lang3.reflect.FieldUtilsTest.testAmbig":394,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":101,"org.apache.commons.lang3.text.StrMatcherTest.testSpaceMatcher":270,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":166,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":337,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":181,"org.apache.commons.lang3.ArrayUtilsTest.testCloneLong":274,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":212,"org.apache.commons.lang3.text.StrMatcherTest.testCharMatcher_char":268,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":306,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":137,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":203,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testLongArray":380,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson":332,"org.apache.commons.lang3.time.DateUtilsTest.testIteratorEx":11,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":154,"org.apache.commons.lang3.text.StrTokenizerTest.testChaining":385,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":88,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":99,"org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer":12,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":368,"org.apache.commons.lang3.ValidateTest.testNotBlankBlankStringWithWhitespacesShouldThrow":418,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber":420,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":322,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":303,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":124,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":146,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":145,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testPerson":289,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":134,"org.apache.commons.lang3.BooleanUtilsTest.test_toInteger_boolean":245,"org.apache.commons.lang3.math.NumberUtilsTest.testLang300":423,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":151,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang303":69,"org.apache.commons.lang3.text.StrMatcherTest.testDoubleQuoteMatcher":271,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testArrayList":290,"org.apache.commons.lang3.builder.CompareToBuilderTest.testByteArray":227,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":165,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":309,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testBlank":333,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":164,"org.apache.commons.lang3.text.StrSubstitutorTest.testDefaultValueDelimiters":223,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO":76,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection":341,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNull":37,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":19,"org.apache.commons.lang3.builder.DiffResultTest.testNullStyle":326,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":153,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang538":70,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":187,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":103,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":131,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":139,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":211,"org.apache.commons.lang3.reflect.InheritanceUtilsTest.testDistanceGreaterThanZero":244,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullLhs":318,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testBlank":338,"org.apache.commons.lang3.ValidateTest.testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow":410,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectEndText":363,"org.apache.commons.lang3.EnumUtilsTest.test_processBitVector":276,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":307,"org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterize":234,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":349,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":193,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance":373,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":87,"org.apache.commons.lang3.builder.DiffBuilderTest.testSameObjectIgnoresAppends":314,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testLong":378,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":190,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetField":393,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":201,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":294,"org.apache.commons.lang3.text.StrTokenizerTest.testIteration":20,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArraySeparator":361,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetFirstContextValue":118,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset":61,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":143,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount":256,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWithIgnoreCase":427,"org.apache.commons.lang3.text.StrTokenizerTest.testTSVEmpty":35,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyCharObjectEmptyArray":258,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":305,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":339,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":92,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testLinkedList":292,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":313,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayShort":112,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert":372,"org.apache.commons.lang3.ValidateTest.testNotBlankNullStringShouldThrow":404,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":129,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang538":85,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testMilleniumBug":66,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlAllCharacters":388,"org.apache.commons.lang3.text.StrMatcherTest.testTabMatcher":269,"org.apache.commons.lang3.AnnotationUtilsTest.testGeneratedAnnotationEquivalentToRealAnnotation":283,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":317,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":183,"org.apache.commons.lang3.ValidateTest.testNotBlankEmptyStringShouldThrow":413,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":301,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray":343,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testDouble":381,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":253,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1":27,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3":29,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2":28,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5":31,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4":30,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7":33,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6":32,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":197,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":96,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedField":396,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":168,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":293,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":205,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":158,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher":264,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldNameValueSeparator":357,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher":259,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementCharArray":110,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray":48,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson":340,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testSetContextValue":117,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":147,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":138,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeEndText":356,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO":78,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberMagnitude":422,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":207,"org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphaUpper_char":232,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson":335,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":200,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone":120,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":199,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong":334,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":90,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson":366,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":133,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":325,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testSimpleDate":64,"org.apache.commons.lang3.ClassUtilsTest.test_getAllInterfaces_Class":390,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testDoubleArrayAsObject":379,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher_int":265,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":295,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":351,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":171,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testCalendarTimezoneRespected":68,"org.apache.commons.lang3.builder.DiffResultTest.testNullRhs":329,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":106,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":204,"org.apache.commons.lang3.text.StrBuilderTest.testRightString":7,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":135,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":172,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":182,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":98,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang303":84,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":126,"org.apache.commons.lang3.time.FastDateFormatTest.testDateDefaults":226,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":128,"org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetPrefix":383,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":130,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char_char":21,"org.apache.commons.lang3.text.StrMatcherTest.testSingleQuoteMatcher":266,"org.apache.commons.lang3.time.FastDatePrinterTest.testSimpleDate":79,"org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetSuffix":384,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":95,"org.apache.commons.lang3.StringUtilsTest.testSplit_StringString_StringStringInt":3,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":209,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":336,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testFormat":71,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testBlank":364,"org.apache.commons.lang3.math.NumberUtilsTest.testMinimumShort":370,"org.apache.commons.lang3.ValidateTest.testNotBlankMsgNotBlankStringShouldNotThrow":412,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":174,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":210,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":149,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic1":56,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":304,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":144,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic2":57,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic3":58,"org.apache.commons.lang3.text.StrMatcherTest.testCommaMatcher":267,"org.apache.commons.lang3.AnnotationUtilsTest.testBothArgsNull":284,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic4":59,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic5":60,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":365,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":208,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":198,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetNullText":355,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":104,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":150,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":185,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyCharObject":257,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":156,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveLongArray":114,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":369,"org.apache.commons.lang3.time.FastDatePrinterTest.testShortDateStyleWithLocales":80,"org.apache.commons.lang3.text.StrBuilderTest.testAsWriter":402,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":315,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char_char":49,"org.apache.commons.lang3.AnnotationUtilsTest.testOneArgNull":277,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls":350,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":50,"org.apache.commons.lang3.time.FastDatePrinterTest.testFormat":86,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldForceAccess":391,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":302,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":320,"org.apache.commons.lang3.ValidateTest.testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow":415,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":93,"org.apache.commons.lang3.builder.DiffResultTest.testNullList":323,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":107,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":161,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":218,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":184,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":175,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher":262,"org.apache.commons.lang3.time.FastDatePrinterTest.testLowYearPadding":82,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":220,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testBlank":287,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayToObjectArray":273,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":216,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":162,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":327,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":191,"org.apache.commons.lang3.builder.DiffResultTest.testNoDifferencesString":324,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":148,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testBlank":367,"org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterizeWithOwner":235,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":186,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":296,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":169,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedField":395,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":251,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticField":392,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":298,"org.apache.commons.lang3.ClassUtilsTest.testGetPublicMethod":389,"org.apache.commons.lang3.reflect.TypeLiteralTest.testTyped":237,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":316,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":331,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":194,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":152,"org.apache.commons.lang3.text.StrTokenizerTest.testToString":24,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":312,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_StrMatcher_String":255,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testDoubleArray":5,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection":344,"org.apache.commons.lang3.time.DateUtilsTest.testIsSameDay_Date":8,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":321,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":125,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":424,"org.apache.commons.lang3.StringUtilsTest.testSplit_String":2,"org.apache.commons.lang3.AnnotationUtilsTest.testAnnotationsOfDifferingTypes":281,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG971":421,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":243,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testCopyOnWriteArrayList":291,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":173,"org.apache.commons.lang3.builder.DiffResultTest.testNullLhs":328,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":13,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex":246,"org.apache.commons.lang3.ArrayUtilsTest.testToString":121,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":136,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentStart":354,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed1":62,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed2":63,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWithAny":241,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":140,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO":75,"org.apache.commons.lang3.ValidateTest.testNotBlankBlankStringWithNewlinesShouldThrow":409,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLong":288,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testAbove":387,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty1":16,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty2":17,"org.apache.commons.lang3.RandomUtilsTest.testZeroLengthNextBytes":229,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectStartText":359,"org.apache.commons.lang3.time.DateUtilsTest.testWeekIterator":10,"org.apache.commons.lang3.AnnotationUtilsTest.testHashCode":282,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":163,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_StrMatcher":254,"org.apache.commons.lang3.ValidateTest.testNotBlankNotBlankStringWithWhitespacesShouldNotThrow":417,"org.apache.commons.lang3.time.DateUtilsTest.testMonthIterator":9,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":249,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareExcludeFields":374,"org.apache.commons.lang3.text.StrBuilderTest.testSubSequenceIntInt":4,"org.apache.commons.lang3.ValidateTest.testNotBlankMsgNullStringShouldThrow":414,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":345,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":189,"org.apache.commons.lang3.text.StrTokenizerTest.test8":45,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":178,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":102,"org.apache.commons.lang3.time.DateUtilsTest.testRound":108,"org.apache.commons.lang3.text.StrTokenizerTest.test5":42,"org.apache.commons.lang3.text.StrTokenizerTest.test4":41,"org.apache.commons.lang3.text.StrTokenizerTest.test7":44,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":179,"org.apache.commons.lang3.text.StrTokenizerTest.test6":43,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":180,"org.apache.commons.lang3.text.StrTokenizerTest.test1":38,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String":36,"org.apache.commons.lang3.text.StrTokenizerTest.test3":40,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWith":428,"org.apache.commons.lang3.text.StrTokenizerTest.test2":39,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":155,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldSeparator":360,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":252,"org.apache.commons.lang3.AnnotationUtilsTest.testIsValidAnnotationMemberType":286,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":250,"org.apache.commons.lang3.CharRangeTest.testContains_Charrange":0,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim1":14,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim2":15,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareTransients":376,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":142,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetContextValues":119,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testAddContextValue":116,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":132,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayEnd":358,"org.apache.commons.lang3.ArrayUtilsTest.testHashCode":377,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char":18,"org.apache.commons.lang3.CharUtilsTest.testToUnicodeEscaped_Character":400,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullRhs":319,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeExactConstructor":111,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1":55,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":141,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldForceAccess":397,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testAddInitializerNullName":1,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLowYearPadding":67,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedStaticField":398,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompare":375,"org.apache.commons.lang3.ValidateTest.testNotBlankNotBlankStringWithNewlinesShouldNotThrow":403,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed3":53,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayStart":362,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed2":52,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4":54,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed1":51,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":213,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":206,"org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlpha_char":233,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":160,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_StringInt":386,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":89,"org.apache.commons.lang3.ValidateTest.testNotBlankReturnValues2":408,"org.apache.commons.lang3.AnnotationUtilsTest.testToString":278,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testShortDateStyleWithLocales":65,"org.apache.commons.lang3.ValidateTest.testNotBlankReturnValues1":407,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":157,"org.apache.commons.lang3.math.NumberUtilsTest.TestLang747":426,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":122},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:353","type":"CtBinaryOperatorImpl","sourcecode":"ch < 16"},"failures":[0],"tindex":"0a77ac6a-3e41-11e6-96e3-4b9612e23402","method":{"position":"org.apache.commons.lang3.CharRange:113","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.CharRange isIn(final char start, final char end) {\n    if (start < 16) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.lang3.CharRange(start , end , false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"start"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5637","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[1],"tindex":"0a786fbb-3e41-11e6-96e3-5d74c4d53d8d","method":{"position":"org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:134","type":"CtMethodImpl","sourcecode":"public void addInitializer(final java.lang.String name, final org.apache.commons.lang3.concurrent.BackgroundInitializer<?> init) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.IllegalArgumentException(\"Name of child initializer must not be null!\");\n            } \n            if (init == null) {\n                throw new java.lang.IllegalArgumentException(\"Child initializer must not be null!\");\n            } \n            synchronized(org.apache.commons.lang3.concurrent.MultiBackgroundInitializer.this) {\n                if (isStarted()) {\n                    throw new java.lang.IllegalStateException(\"addInitializer() must not be called after start()!\");\n                } \n                java.util.Map<java.lang.String, org.apache.commons.lang3.concurrent.BackgroundInitializer<?>>.put(name, init);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:448","type":"CtBinaryOperatorImpl","sourcecode":"(nullText) == null"},"failures":[2,3],"tindex":"0a7896cc-3e41-11e6-96e3-c32ed1cb1f67","method":{"position":"org.apache.commons.lang3.StringUtils:2665","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] split(final java.lang.String str, final java.lang.String separatorChars, final int max) {\n    if (str == null) {\n        {\n            return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChars, max, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nullText":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5129","type":"CtBinaryOperatorImpl","sourcecode":"(repeat == 1) || (inputLength == 0)"},"failures":[4],"tindex":"0a78bddd-3e41-11e6-96e3-5b7ef21e84e0","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2125","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.CharSequence subSequence(final int startIndex, final int endIndex) {\n    if ((startIndex == 1) || (startIndex == 0)) {\n        {\n            if (startIndex < 0) {\n                throw new java.lang.StringIndexOutOfBoundsException(startIndex);\n            } \n            if (endIndex > (int)) {\n                throw new java.lang.StringIndexOutOfBoundsException(endIndex);\n            } \n            if (startIndex > endIndex) {\n                throw new java.lang.StringIndexOutOfBoundsException((endIndex - startIndex));\n            } \n            return substring(startIndex, endIndex);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"repeat":"startIndex","inputLength":"startIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3528","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[5],"tindex":"0a78e4ee-3e41-11e6-96e3-d1eb982eae63","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:689","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final double[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                int = (int) * (int);\n            } else {\n                for (final double double : array) {\n                    append(element);\n                }\n            }\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:170","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"0a790bff-3e41-11e6-96e3-c10d871d77d9","method":{"position":"org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:292","type":"CtMethodImpl","sourcecode":"public boolean isException(final java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            checkName(name);\n            return java.util.Map<java.lang.String, org.apache.commons.lang3.concurrent.ConcurrentException>.containsKey(name);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:626","type":"CtInvocationImpl","sourcecode":"stripChars.isEmpty()"},"failures":[6],"tindex":"0a790c00-3e41-11e6-96e3-51f0ceec3d44","method":{"position":"org.apache.commons.lang3.math.NumberUtils:323","type":"CtMethodImpl","sourcecode":"public static byte toByte(final java.lang.String str, final byte defaultValue) {\n    if (str.isEmpty()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return defaultValue;\n            } \n            try {\n                return java.lang.Byte.parseByte(str);\n            } catch (final java.lang.NumberFormatException nfe) {\n                return defaultValue;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stripChars":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"bool == null"},"failures":[],"tindex":"0a793211-3e41-11e6-96e3-ff0f3f95d0a5","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:924","type":"CtMethodImpl","sourcecode":"protected void reflectionAppendArrayDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.lang.Object array) {\n    if (array.contains(\"#\")) {\n        {\n            if (array == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    buffer.append(java.lang.String);\n                    final int int = java.lang.reflect.Array.getLength(array);\n                    for (int int = 0 ; i < length ; i++) {\n                        final java.lang.Object java.lang.Object = java.lang.reflect.Array.get(array, i);\n                        if (i > 0) {\n                            buffer.append(java.lang.String);\n                        } \n                        if (item == null) {\n                            appendNullText(buffer, fieldName);\n                        } else {\n                            appendInternal(buffer, fieldName, item, boolean);\n                        }\n                    }\n                    buffer.append(java.lang.String);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1223","type":"CtBinaryOperatorImpl","sourcecode":"0 == nShorts"},"failures":[7],"tindex":"0a795922-3e41-11e6-96e3-255fe8056893","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2201","type":"CtMethodImpl","sourcecode":"public java.lang.String rightString(final int length) {\n    if (0 == length) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (length <= 0) {\n                return \"\";\n            } else if (length >= (int)) {\n                return new java.lang.String(char[] , 0 , int);\n            } else {\n                return new java.lang.String(char[] , ((int) - length) , length);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nShorts":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:305","type":"CtBinaryOperatorImpl","sourcecode":"((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))"},"failures":[],"tindex":"0a798033-3e41-11e6-96e3-63d820c4a9d8","method":{"position":"org.apache.commons.lang3.CharUtils:87","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.Character toCharacterObject(final char ch) {\n    if (((ch >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.Character.valueOf(ch);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSetUtils:206","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.CharSetUtils.deepEmpty(set))"},"failures":[],"tindex":"0a79a744-3e41-11e6-96e3-0569752087fd","method":{"position":"org.apache.commons.lang3.StringUtils:731","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] stripAll(final java.lang.String[] strs, final java.lang.String stripChars) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(stripChars)) || (org.apache.commons.lang3.CharSetUtils.deepEmpty(strs))) {\n        {\n            int int;\n            if ((strs == null) || ((strsLen = strs.int) == 0)) {\n                return strs;\n            } \n            final java.lang.String[] java.lang.String[] = new java.lang.String[strsLen];\n            for (int int = 0 ; i < strsLen ; i++) {\n                newArr[i] = org.apache.commons.lang3.StringUtils.strip(strs[i], stripChars);\n            }\n            return newArr;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"stripChars","set":"strs"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDateParser:115","type":"CtBinaryOperatorImpl","sourcecode":"centuryStart != null"},"failures":[8],"tindex":"0a79a745-3e41-11e6-96e3-f709f537e106","method":{"position":"org.apache.commons.lang3.time.DateUtils:155","type":"CtMethodImpl","sourcecode":"public static boolean isSameDay(final java.util.Date date1, final java.util.Date date2) {\n    if (date2 != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((date1 == null) || (date2 == null)) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n            cal1.setTime(date1);\n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n            cal2.setTime(date2);\n            return org.apache.commons.lang3.time.DateUtils.isSameDay(cal1, cal2);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"centuryStart":"date2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1117","type":"CtBinaryOperatorImpl","sourcecode":"startPos > endLimit"},"failures":[],"tindex":"0a79ce56-3e41-11e6-96e3-a12bcf5a0e38","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1036","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final int value) {\n    if (value > value) {\n        {\n            org.apache.commons.lang3.time.FastDatePrinter.NumberRule.appendTo(buffer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"endLimit":"value","startPos":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1483","type":"CtBinaryOperatorImpl","sourcecode":"(dstPos + i) == append"},"failures":[],"tindex":"0a79f567-3e41-11e6-96e3-81ae95546a51","method":{"position":"org.apache.commons.lang3.text.StrBuilder:411","type":"CtMethodImpl","sourcecode":"public void getChars(final int startIndex, final int endIndex, final char[] destination, final int destinationIndex) {\n    if ((endIndex + destinationIndex) == startIndex) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (startIndex < 0) {\n                throw new java.lang.StringIndexOutOfBoundsException(startIndex);\n            } \n            if ((endIndex < 0) || (endIndex > (length()))) {\n                throw new java.lang.StringIndexOutOfBoundsException(endIndex);\n            } \n            if (startIndex > endIndex) {\n                throw new java.lang.StringIndexOutOfBoundsException(\"end < start\");\n            } \n            java.lang.System.arraycopy(char[], startIndex, destination, destinationIndex, (endIndex - startIndex));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"endIndex","i":"destinationIndex","append":"startIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1013","type":"CtBinaryOperatorImpl","sourcecode":"field == (org.apache.commons.lang3.time.DateUtils.SEMI_MONTH)"},"failures":[9,10,11],"tindex":"0a7a1c78-3e41-11e6-96e3-cf2bda90c5a5","method":{"position":"org.apache.commons.lang3.time.DateUtils:1122","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<java.util.Calendar> iterator(final java.util.Date focus, final int rangeStyle) {\n    if (rangeStyle == rangeStyle) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (focus == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n            gval.setTime(focus);\n            return org.apache.commons.lang3.time.DateUtils.iterator(gval, rangeStyle);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"rangeStyle","org.apache.commons.lang3.time.DateUtils.SEMI_MONTH":"rangeStyle"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4757","type":"CtBinaryOperatorImpl","sourcecode":"greater > 0"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"tindex":"0a7a4389-3e41-11e6-96e3-0105887b5b49","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:635","type":"CtMethodImpl","sourcecode":"protected java.util.List<java.lang.String> tokenize(final char[] srcChars, final int offset, final int count) {\n    if (offset > 0) {\n        {\n            if ((srcChars == null) || (count == 0)) {\n                return java.util.Collections.emptyList();\n            } \n            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder();\n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            int int = offset;\n            while ((pos >= 0) && (pos < count)) {\n                pos = readNextToken(srcChars, pos, count, buf, tokenList);\n                if (pos >= count) {\n                    addToken(tokenList, \"\");\n                } \n            }\n            return tokenList;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"greater":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl","sourcecode":"buffer == null"},"failures":[64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"tindex":"0a7a438a-3e41-11e6-96e3-ed8c05ab8bfb","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:461","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer format(final java.util.Calendar calendar, final java.lang.StringBuffer buf) {\n    if (buf == null) {\n        {\n            return applyRules(calendar, buf);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buf"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomStringUtils:246","type":"CtBinaryOperatorImpl","sourcecode":"end <= start"},"failures":[108,87,88,89,90,91,94,96,97,98,109,102],"tindex":"0a7a6a9b-3e41-11e6-96e3-73a9f2798aa0","method":{"position":"org.apache.commons.lang3.time.DateUtils:774","type":"CtMethodImpl","sourcecode":"public static java.util.Date round(final java.lang.Object date, final int field) {\n    if (field <= field) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            if (date instanceof java.util.Date) {\n                return org.apache.commons.lang3.time.DateUtils.round(((java.util.Date)(date)), field);\n            } else if (date instanceof java.util.Calendar) {\n                return org.apache.commons.lang3.time.DateUtils.round(((java.util.Calendar)(date)), field).getTime();\n            } else {\n                throw new java.lang.ClassCastException((\"Could not round \" + date));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"field","end":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSequenceUtils:200","type":"CtBinaryOperatorImpl","sourcecode":"c1 == c2"},"failures":[110],"tindex":"0a7a91ac-3e41-11e6-96e3-350eed52f23c","method":{"position":"org.apache.commons.lang3.ArrayUtils:4836","type":"CtMethodImpl","sourcecode":"public static char[] removeElement(final char[] array, final char element) {\n    if (element == element) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c1":"element","c2":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:238","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[111],"tindex":"0a7a91ad-3e41-11e6-96e3-edfde6ac41cc","method":{"position":"org.apache.commons.lang3.reflect.ConstructorUtils:168","type":"CtMethodImpl","sourcecode":"public static <T>T invokeExactConstructor(final java.lang.Class<T> cls, java.lang.Object[] args, java.lang.Class<?>[] parameterTypes) throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (args == null) {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            parameterTypes = org.apache.commons.lang3.ArrayUtils.nullToEmpty(parameterTypes);\n            final java.lang.reflect.Constructor<T> java.lang.reflect.Constructor<T> = org.apache.commons.lang3.reflect.ConstructorUtils.getAccessibleConstructor(cls, parameterTypes);\n            if (ctor == null) {\n                throw new java.lang.NoSuchMethodException((\"No such accessible constructor on object: \" + (cls.getName())));\n            } \n            return ctor.newInstance(args);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"args"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:448","type":"CtBinaryOperatorImpl","sourcecode":"(nullText) == null"},"failures":[],"tindex":"0a7ab8be-3e41-11e6-96e3-c90441b742ba","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:164","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.StrTokenizer getCSVInstance(final java.lang.String input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.lang3.text.StrTokenizer org.apache.commons.lang3.text.StrTokenizer = org.apache.commons.lang3.text.StrTokenizer.getCSVClone();\n            tok.reset(input);\n            return tok;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nullText":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:343","type":"CtBinaryOperatorImpl","sourcecode":"(index < 0) || (index >= (size))"},"failures":[],"tindex":"0a7ab8bf-3e41-11e6-96e3-f36accfb8bd7","method":{"position":"org.apache.commons.lang3.ArrayUtils:2332","type":"CtMethodImpl","sourcecode":"public static int indexOf(final char[] array, final char valueToFind, int startIndex) {\n    if ((startIndex < 0) || (index >= startIndex)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                startIndex = 0;\n            } \n            for (int int = startIndex ; i < (array.int) ; i++) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"startIndex","index":"startIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1117","type":"CtBinaryOperatorImpl","sourcecode":"startPos > endLimit"},"failures":[],"tindex":"0a7adfd0-3e41-11e6-96e3-3bbc08b3805d","method":{"position":"org.apache.commons.lang3.time.DateUtils:1781","type":"CtMethodImpl","sourcecode":"public static int truncatedCompareTo(final java.util.Date date1, final java.util.Date date2, final int field) {\n    if (field > field) {\n        {\n            final java.util.Date java.util.Date = org.apache.commons.lang3.time.DateUtils.truncate(date1, field);\n            final java.util.Date java.util.Date = org.apache.commons.lang3.time.DateUtils.truncate(date2, field);\n            return truncatedDate1.compareTo(truncatedDate2);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"endLimit":"field","startPos":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:219","type":"CtBinaryOperatorImpl","sourcecode":"(cal1 == null) || (cal2 == null)"},"failures":[],"tindex":"0a7adfd1-3e41-11e6-96e3-292ef8489328","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:473","type":"CtMethodImpl","sourcecode":"protected java.lang.StringBuffer applyRules(final java.util.Calendar calendar, final java.lang.StringBuffer buf) {\n    if ((calendar == null) || (calendar == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final org.apache.commons.lang3.time.FastDatePrinter.Rule org.apache.commons.lang3.time.FastDatePrinter.Rule : org.apache.commons.lang3.time.FastDatePrinter.Rule[]) {\n                rule.appendTo(buf, calendar);\n            }\n            return buf;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cal2":"calendar","cal1":"calendar"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2057","type":"CtBinaryOperatorImpl","sourcecode":"pos > 0"},"failures":[112],"tindex":"0a7b06e2-3e41-11e6-96e3-0935116f9ea2","method":{"position":"org.apache.commons.lang3.ArrayUtils:994","type":"CtMethodImpl","sourcecode":"public static short[] subarray(final short[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (startIndexInclusive > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            if (startIndexInclusive < 0) {\n                startIndexInclusive = 0;\n            } \n            if (endIndexExclusive > (array.int)) {\n                endIndexExclusive = array.int;\n            } \n            final int int = endIndexExclusive - startIndexInclusive;\n            if (newSize <= 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.short[];\n            } \n            final short[] short[] = new short[newSize];\n            java.lang.System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n            return subarray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"startIndexInclusive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:493","type":"CtBinaryOperatorImpl","sourcecode":"(numerator) == (java.lang.Integer.MIN_VALUE)"},"failures":[113,114],"tindex":"0a7b06e3-3e41-11e6-96e3-c314f5ca5095","method":{"position":"org.apache.commons.lang3.ArrayUtils:5067","type":"CtMethodImpl","sourcecode":"public static long[] remove(final long[] array, final int index) {\n    if (index == index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((long[])(org.apache.commons.lang3.ArrayUtils.remove(((java.lang.Object)(array)), index)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.Integer.MIN_VALUE":"index","numerator":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:1110","type":"CtBinaryOperatorImpl","sourcecode":"className == null"},"failures":[115],"tindex":"0a7b06e4-3e41-11e6-96e3-b52ad8514465","method":{"position":"org.apache.commons.lang3.StringUtils:2930","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] splitPreserveAllTokens(final java.lang.String str, final char separatorChar) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChar, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:733","type":"CtInvocationImpl","sourcecode":"str.equals(trueString)"},"failures":[116,117,118,119],"tindex":"0a7b2df5-3e41-11e6-96e3-19ef41e486d3","method":{"position":"org.apache.commons.lang3.exception.ContextedRuntimeException:207","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object getFirstContextValue(final java.lang.String label) {\n    if (label.equals(label)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.exception.ContextedRuntimeException.this.org.apache.commons.lang3.exception.ExceptionContext.getFirstContextValue(label);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"label","trueString":"label"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.TimedSemaphore:204","type":"CtBinaryOperatorImpl","sourcecode":"timePeriod <= 0"},"failures":[],"tindex":"0a7b2df6-3e41-11e6-96e3-df311d5f869b","method":{"position":"org.apache.commons.lang3.mutable.MutableLong:137","type":"CtMethodImpl","sourcecode":"public void add(final long operand) {\n    if (operand <= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableLong.this.long += operand;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"timePeriod":"operand"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1870","type":"CtBinaryOperatorImpl","sourcecode":"fieldNameValueSeparator == null"},"failures":[120],"tindex":"0a7b5507-3e41-11e6-96e3-ab6ccf40caa6","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:133","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getInstance(final java.lang.String pattern, final java.util.TimeZone timeZone) {\n    if (pattern == null) {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FormatCache<org.apache.commons.lang3.time.FastDateFormat>.getInstance(pattern, timeZone, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldNameValueSeparator":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:573","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"0a7b5508-3e41-11e6-96e3-dbd9a86414f1","method":{"position":"org.apache.commons.lang3.text.StrBuilder:902","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final java.lang.StringBuffer str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return append(str).appendNewLine();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:732","type":"CtInvocationImpl","sourcecode":"str.startsWith(\"-\")"},"failures":[121,42,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,138,139,139,140,141,141,142,143,143,144,144,145,146,147,148,149,149,150,150,151,151,152,152,153,154,154,155,156,157,158,159,160,161,162,163,163,164,165,166,166,167,168,169,169,170,170,171,172,173,173,174,175,176,177,177,178,179,180,181,181,182,183,183,184,184,185,186,186,187,187,188,189,189,190,191,192,193,194,194,195,195,196,197,197,198,199,199,200,201,201,202,203,204,205,206,207,208,208,209,209,210,211,212,213,214,215,216,217,218,219,220,221],"tindex":"0a7b7c19-3e41-11e6-96e3-1b817b59da8f","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1502","type":"CtMethodImpl","sourcecode":"protected void appendNullText(final java.lang.StringBuffer buffer, final java.lang.String fieldName) {\n    if (fieldName.startsWith(\"-\")) {\n        {\n            buffer.append(java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:299","type":"CtInvocationImpl","sourcecode":"value.equals(falseValue)"},"failures":[222],"tindex":"0a7b7c1a-3e41-11e6-96e3-ef50c34164fb","method":{"position":"org.apache.commons.lang3.BooleanUtils:238","type":"CtMethodImpl","sourcecode":"public static java.lang.Boolean toBooleanObject(final java.lang.Integer value) {\n    if (value.equals(value)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } \n            return (value.intValue()) == 0 ? java.lang.Boolean.java.lang.Boolean.java.lang.Boolean : java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"falseValue":"value","value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:845","type":"CtBinaryOperatorImpl","sourcecode":"varValue == null"},"failures":[223,224,225],"tindex":"0a7dc60b-3e41-11e6-96e3-5f0d1d8f064b","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1144","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrSubstitutor setValueDelimiter(final java.lang.String valueDelimiter) {\n    if (valueDelimiter == null) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(valueDelimiter)) {\n                setValueDelimiterMatcher(null);\n                return org.apache.commons.lang3.text.StrSubstitutor.this;\n            } \n            return setValueDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher.stringMatcher(valueDelimiter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"varValue":"valueDelimiter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1552","type":"CtBinaryOperatorImpl","sourcecode":"0 == nBools"},"failures":[226],"tindex":"0a7ded1c-3e41-11e6-96e3-61f4842e59f5","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:179","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getDateInstance(final int style) {\n    if (0 == style) {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FormatCache<org.apache.commons.lang3.time.FastDateFormat>.getDateInstance(style, null, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"style"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:4708","type":"CtBinaryOperatorImpl","sourcecode":"index == (org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND)"},"failures":[],"tindex":"0a7ded1d-3e41-11e6-96e3-536d3ce0940e","method":{"position":"org.apache.commons.lang3.reflect.MemberUtils:75","type":"CtMethodImpl","sourcecode":"static boolean isPackageAccess(final int modifiers) {\n    if (modifiers == modifiers) {\n        {\n            return (modifiers & (org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.int)) == 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND":"modifiers","index":"modifiers"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ObjectUtils:240","type":"CtBinaryOperatorImpl","sourcecode":"objects != null"},"failures":[],"tindex":"0a7ded1e-3e41-11e6-96e3-bfdbabdbe8a2","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:470","type":"CtMethodImpl","sourcecode":"protected void appendInternal(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.lang.Object value, final boolean detail) {\n    if (value != null) {\n        {\n            if ((org.apache.commons.lang3.builder.ToStringStyle.isRegistered(value)) && (!(((value instanceof java.lang.Number) || (value instanceof java.lang.Boolean)) || (value instanceof java.lang.Character)))) {\n                appendCyclicObject(buffer, fieldName, value);\n                return ;\n            } \n            org.apache.commons.lang3.builder.ToStringStyle.register(value);\n            try {\n                if (value instanceof java.util.Collection<?>) {\n                    if (detail) {\n                        appendDetail(buffer, fieldName, ((java.util.Collection<?>)(value)));\n                    } else {\n                        appendSummarySize(buffer, fieldName, ((java.util.Collection<?>)(value)).size());\n                    }\n                } else if (value instanceof java.util.Map<?, ?>) {\n                    if (detail) {\n                        appendDetail(buffer, fieldName, ((java.util.Map<?, ?>)(value)));\n                    } else {\n                        appendSummarySize(buffer, fieldName, ((java.util.Map<?, ?>)(value)).size());\n                    }\n                } else if (value instanceof long[]) {\n                    if (detail) {\n                        appendDetail(buffer, fieldName, ((long[])(value)));\n                    } else {\n                        appendSummary(buffer, fieldName, ((long[])(value)));\n                    }\n                } else if (value instanceof int[]) {\n                    if (detail) {\n                        appendDetail(buffer, fieldName, ((int[])(value)));\n                    } else {\n                        appendSummary(buffer, fieldName, ((int[])(value)));\n                    }\n                } else if (value instanceof short[]) {\n                    if (detail) {\n                        appendDetail(buffer, fieldName, ((short[])(value)));\n                    } else {\n                        appendSummary(buffer, fieldName, ((short[])(value)));\n                    }\n                } else if (value instanceof byte[]) {\n                    if (detail) {\n                        appendDetail(buffer, fieldName, ((byte[])(value)));\n                    } else {\n                        appendSummary(buffer, fieldName, ((byte[])(value)));\n                    }\n                } else if (value instanceof char[]) {\n                    if (detail) {\n                        appendDetail(buffer, fieldName, ((char[])(value)));\n                    } else {\n                        appendSummary(buffer, fieldName, ((char[])(value)));\n                    }\n                } else if (value instanceof double[]) {\n                    if (detail) {\n                        appendDetail(buffer, fieldName, ((double[])(value)));\n                    } else {\n                        appendSummary(buffer, fieldName, ((double[])(value)));\n                    }\n                } else if (value instanceof float[]) {\n                    if (detail) {\n                        appendDetail(buffer, fieldName, ((float[])(value)));\n                    } else {\n                        appendSummary(buffer, fieldName, ((float[])(value)));\n                    }\n                } else if (value instanceof boolean[]) {\n                    if (detail) {\n                        appendDetail(buffer, fieldName, ((boolean[])(value)));\n                    } else {\n                        appendSummary(buffer, fieldName, ((boolean[])(value)));\n                    }\n                } else if (value.getClass().isArray()) {\n                    if (detail) {\n                        appendDetail(buffer, fieldName, ((java.lang.Object[])(value)));\n                    } else {\n                        appendSummary(buffer, fieldName, ((java.lang.Object[])(value)));\n                    }\n                } else {\n                    if (detail) {\n                        appendDetail(buffer, fieldName, value);\n                    } else {\n                        appendSummary(buffer, fieldName, value);\n                    }\n                }\n            } finally {\n                org.apache.commons.lang3.builder.ToStringStyle.unregister(value);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objects":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:403","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[227],"tindex":"0a7e3b3f-3e41-11e6-96e3-f5269c5e3bd1","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:847","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final byte[] lhs, final byte[] rhs) {\n    if (rhs == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:978","type":"CtBinaryOperatorImpl","sourcecode":"((org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE) == modType) || (millisecs < 500)"},"failures":[228],"tindex":"0a7e3b40-3e41-11e6-96e3-adce041dca3c","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2145","type":"CtMethodImpl","sourcecode":"public java.lang.String substring(final int start) {\n    if ((start == start) || (start < 500)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return substring(start, int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"modType":"start","millisecs":"start","org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE":"start"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2949","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[2],"tindex":"0a7e6251-3e41-11e6-96e3-ef51fdd04d2d","method":{"position":"org.apache.commons.lang3.StringUtils:2574","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] split(final java.lang.String str) {\n    if (str == null) {\n        {\n            return org.apache.commons.lang3.StringUtils.split(str, null, (-1));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:539","type":"CtBinaryOperatorImpl","sourcecode":"(initialOddNumber % 2) == 0"},"failures":[229,230],"tindex":"0a7e6252-3e41-11e6-96e3-858a0111021e","method":{"position":"org.apache.commons.lang3.RandomUtils:62","type":"CtMethodImpl","sourcecode":"public static byte[] nextBytes(int count) {\n    if ((count % 2) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.isTrue((count >= 0), \"Count cannot be negative.\");\n            byte[] byte[] = new byte[count];\n            org.apache.commons.lang3.RandomUtils.org.apache.commons.lang3.RandomUtils.java.util.Random.nextBytes(result);\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"initialOddNumber":"count"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5302","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(padStr)"},"failures":[],"tindex":"0a7e6253-3e41-11e6-96e3-079178df9dfc","method":{"position":"org.apache.commons.lang3.SystemUtils:1344","type":"CtMethodImpl","sourcecode":"private static java.lang.String getSystemProperty(final java.lang.String property) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(property)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.lang.System.getProperty(property);\n            } catch (final java.lang.SecurityException ex) {\n                java.lang.System.java.lang.System.java.io.PrintStream.println(((\"Caught a SecurityException reading the system property '\" + property) + \"'; the SystemUtils property value will default to null.\"));\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"padStr":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:335","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isWhitespace(c)"},"failures":[231,232,233],"tindex":"0a7e8964-3e41-11e6-96e3-271d9c1b85b1","method":{"position":"org.apache.commons.lang3.CharUtils:478","type":"CtMethodImpl","sourcecode":"public static boolean isAsciiAlphaUpper(final char ch) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        {\n            return (ch >= 'A') && (ch <= 'Z');\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1059","type":"CtBinaryOperatorImpl","sourcecode":"midType instanceof java.lang.reflect.ParameterizedType"},"failures":[234,235,236,237,238],"tindex":"0a7eb075-3e41-11e6-96e3-2d4266170302","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1571","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"deprecation\")\npublic static boolean equals(java.lang.reflect.Type t1, java.lang.reflect.Type t2) {\n    if (t2 instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (t1 instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.lang3.ObjectUtils.equals(t1, t2)) {\n                        return true;\n                    } \n                    if (t1 instanceof java.lang.reflect.ParameterizedType) {\n                        return org.apache.commons.lang3.reflect.TypeUtils.equals(((java.lang.reflect.ParameterizedType)(t1)), t2);\n                    } \n                    if (t1 instanceof java.lang.reflect.GenericArrayType) {\n                        return org.apache.commons.lang3.reflect.TypeUtils.equals(((java.lang.reflect.GenericArrayType)(t1)), t2);\n                    } \n                    if (t1 instanceof java.lang.reflect.WildcardType) {\n                        return org.apache.commons.lang3.reflect.TypeUtils.equals(((java.lang.reflect.WildcardType)(t1)), t2);\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"midType":"t1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2962","type":"CtBinaryOperatorImpl","sourcecode":"match || preserveAllTokens"},"failures":[239],"tindex":"0a7ed786-3e41-11e6-96e3-bbd7495cdfeb","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:433","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder appendSuper(final boolean superEquals) {\n    if (superEquals || superEquals) {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            boolean = superEquals;\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"preserveAllTokens":"superEquals","match":"superEquals"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1135","type":"CtBinaryOperatorImpl","sourcecode":"b < a"},"failures":[],"tindex":"0a7f73c7-3e41-11e6-96e3-59c0f1afe1a6","method":{"position":"org.apache.commons.lang3.mutable.MutableShort:96","type":"CtMethodImpl","sourcecode":"public void setValue(final short value) {\n    if (value < value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableShort.this.short = value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"value","b":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1153","type":"CtBinaryOperatorImpl","sourcecode":"b < a"},"failures":[240],"tindex":"0a7f9ad8-3e41-11e6-96e3-25bf3a98c1b6","method":{"position":"org.apache.commons.lang3.mutable.MutableByte:158","type":"CtMethodImpl","sourcecode":"public void subtract(final byte operand) {\n    if (operand < operand) {\n        {\n            org.apache.commons.lang3.mutable.MutableByte.this.byte -= operand;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"operand","b":"operand"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1005","type":"CtBinaryOperatorImpl","sourcecode":"ownerType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"0a7f9ad9-3e41-11e6-96e3-1b2f845a9115","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1571","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"deprecation\")\npublic static boolean equals(java.lang.reflect.Type t1, java.lang.reflect.Type t2) {\n    if (t2 instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (t1 instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.lang3.ObjectUtils.equals(t1, t2)) {\n                        return true;\n                    } \n                    if (t1 instanceof java.lang.reflect.ParameterizedType) {\n                        return org.apache.commons.lang3.reflect.TypeUtils.equals(((java.lang.reflect.ParameterizedType)(t1)), t2);\n                    } \n                    if (t1 instanceof java.lang.reflect.GenericArrayType) {\n                        return org.apache.commons.lang3.reflect.TypeUtils.equals(((java.lang.reflect.GenericArrayType)(t1)), t2);\n                    } \n                    if (t1 instanceof java.lang.reflect.WildcardType) {\n                        return org.apache.commons.lang3.reflect.TypeUtils.equals(((java.lang.reflect.WildcardType)(t1)), t2);\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ownerType":"t2"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:1127","type":"CtBinaryOperatorImpl","sourcecode":"(value <= start) || (value >= end)"},"failures":[],"tindex":"0a7f9ada-3e41-11e6-96e3-2ddfd232be48","method":{"position":"org.apache.commons.lang3.ArrayUtils:3319","type":"CtMethodImpl","sourcecode":"public static double[] toPrimitive(final java.lang.Double[] array, final double valueForNull) {\n    if ((valueForNull <= valueForNull) || (value >= valueForNull)) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.double[];\n            } \n            final double[] double[] = new double[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Double java.lang.Double = array[i];\n                result[i] = b == null ? valueForNull : b.doubleValue();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"valueForNull","end":"valueForNull","value":"valueForNull"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1492","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"0a7fc1eb-3e41-11e6-96e3-bd91a9f27768","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:263","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj == (org.apache.commons.lang3.text.ExtendedMessageFormat.this)) {\n                return true;\n            } \n            if (obj == null) {\n                return false;\n            } \n            if (!(super.equals(obj))) {\n                return false;\n            } \n            if (org.apache.commons.lang3.ObjectUtils.notEqual(getClass(), obj.getClass())) {\n                return false;\n            } \n            final org.apache.commons.lang3.text.ExtendedMessageFormat org.apache.commons.lang3.text.ExtendedMessageFormat = ((org.apache.commons.lang3.text.ExtendedMessageFormat)(obj));\n            if (org.apache.commons.lang3.ObjectUtils.notEqual(java.lang.String, rhs.java.lang.String)) {\n                return false;\n            } \n            if (org.apache.commons.lang3.ObjectUtils.notEqual(java.util.Map<java.lang.String, ? extends org.apache.commons.lang3.text.FormatFactory>, rhs.java.util.Map<java.lang.String, ? extends org.apache.commons.lang3.text.FormatFactory>)) {\n                return false;\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4938","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[241],"tindex":"0a7fe8fc-3e41-11e6-96e3-058c7add3036","method":{"position":"org.apache.commons.lang3.StringUtils:7231","type":"CtMethodImpl","sourcecode":"public static boolean startsWithAny(final java.lang.CharSequence string, final java.lang.CharSequence... searchStrings) {\n    if (string == null) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(string)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchStrings))) {\n                return false;\n            } \n            for (final java.lang.CharSequence java.lang.CharSequence : searchStrings) {\n                if (org.apache.commons.lang3.StringUtils.startsWith(string, searchString)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1844","type":"CtBinaryOperatorImpl","sourcecode":"contentEnd == null"},"failures":[],"tindex":"0a7fe8fd-3e41-11e6-96e3-61ee0dcbdbf8","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:212","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final long millis, final java.lang.String pattern, final java.util.TimeZone timeZone) {\n    if (pattern == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateFormatUtils.format(new java.util.Date(millis), pattern, timeZone, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"contentEnd":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3336","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[242,243],"tindex":"0a82810e-3e41-11e6-96e3-f90a51f5a3ff","method":{"position":"org.apache.commons.lang3.ArrayUtils:3069","type":"CtMethodImpl","sourcecode":"public static java.lang.Long[] toObject(final long[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Long[];\n            } \n            final java.lang.Long[] java.lang.Long[] = new java.lang.Long[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = java.lang.Long.valueOf(array[i]);\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:608","type":"CtBinaryOperatorImpl","sourcecode":"(isEquals) == false"},"failures":[244,245],"tindex":"0a82a81f-3e41-11e6-96e3-6bf1d2dda012","method":{"position":"org.apache.commons.lang3.BooleanUtils:392","type":"CtMethodImpl","sourcecode":"public static int toInteger(final boolean bool) {\n    if (bool == false) {\n        {\n            return bool ? 1 : 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEquals":"bool"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2234","type":"CtBinaryOperatorImpl","sourcecode":"(size) <= (index + length)"},"failures":[246],"tindex":"0a82f640-3e41-11e6-96e3-efc79e4245c9","method":{"position":"org.apache.commons.lang3.ArrayUtils:4326","type":"CtMethodImpl","sourcecode":"public static boolean[] add(final boolean[] array, final int index, final boolean element) {\n    if (index <= (index + index)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((boolean[])(org.apache.commons.lang3.ArrayUtils.add(array, index, java.lang.Boolean.valueOf(element), java.lang.Boolean.java.lang.Boolean.java.lang.Class<java.lang.Boolean>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"index","length":"index","index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:590","type":"CtBinaryOperatorImpl","sourcecode":"(((ch0 == 'y') || (ch0 == 'Y')) && ((ch1 == 'e') || (ch1 == 'E'))) && ((ch2 == 's') || (ch2 == 'S'))"},"failures":[],"tindex":"0a831d51-3e41-11e6-96e3-d9c457271487","method":{"position":"org.apache.commons.lang3.CharSet:223","type":"CtMethodImpl","sourcecode":"public boolean contains(final char ch) {\n    if ((((ch == 'y') || (ch0 == 'Y')) && ((ch == 'e') || (ch1 == 'E'))) && ((ch == 's') || (ch2 == 'S'))) {\n        {\n            for (final org.apache.commons.lang3.CharRange org.apache.commons.lang3.CharRange : java.util.Set<org.apache.commons.lang3.CharRange>) {\n                if (range.contains(ch)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch0":"ch","ch2":"ch","ch1":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:205","type":"CtBinaryOperatorImpl","sourcecode":"(tmp.length()) != (duration.length())"},"failures":[247,248,249,250,202,202,203,204,205,206,207,251,252,253],"tindex":"0a831d52-3e41-11e6-96e3-b500490122c3","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:341","type":"CtMethodImpl","sourcecode":"public void appendSuper(final java.lang.StringBuffer buffer, final java.lang.String superToString) {\n    if ((superToString.length()) != (superToString.length())) {\n        {\n            appendToString(buffer, superToString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"superToString","tmp":"superToString"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:183","type":"CtBinaryOperatorImpl","sourcecode":"whole < 0"},"failures":[254,255,256],"tindex":"0a831d53-3e41-11e6-96e3-fd666ac5cd6c","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1969","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder replace(final org.apache.commons.lang3.text.StrMatcher matcher, final java.lang.String replaceStr, final int startIndex, int endIndex, final int replaceCount) {\n    if (replaceCount < 0) {\n        {\n            endIndex = validateRange(startIndex, endIndex);\n            return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"whole":"replaceCount"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2958","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[257,258],"tindex":"0a834464-3e41-11e6-96e3-e337ff0be0ca","method":{"position":"org.apache.commons.lang3.ArrayUtils:752","type":"CtMethodImpl","sourcecode":"public static java.lang.Character[] nullToEmpty(final java.lang.Character[] array) {\n    if (array == null) {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Character[];\n            } \n            return array;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:357","type":"CtInvocationImpl","sourcecode":"testClass.isArray()"},"failures":[],"tindex":"0a834465-3e41-11e6-96e3-d7b86a71f73d","method":{"position":"org.apache.commons.lang3.reflect.MemberUtils:167","type":"CtMethodImpl","sourcecode":"private static float getPrimitivePromotionCost(final java.lang.Class<?> srcClass, final java.lang.Class<?> destClass) {\n    if (destClass.isArray()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            float float = 0.0F;\n            java.lang.Class<?> java.lang.Class<?> = srcClass;\n            if (!(cls.isPrimitive())) {\n                cost += 0.1F;\n                cls = org.apache.commons.lang3.ClassUtils.wrapperToPrimitive(cls);\n            } \n            for (int int = 0 ; (cls != destClass) && (i < (org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[].int)) ; i++) {\n                if (cls == (org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[][i])) {\n                    cost += 0.1F;\n                    if (i < ((org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[].int) - 1)) {\n                        cls = org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[][(i + 1)];\n                    } \n                } \n            }\n            return cost;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"testClass":"destClass"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:179","type":"CtBinaryOperatorImpl","sourcecode":"numerator < 0"},"failures":[255,259,260,261,262,263,264,265,13,14,15,18,19,21,27,28,29,30,31,32,33,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,55,60,62,63,266,267,268,269,270,271],"tindex":"0a836b76-3e41-11e6-96e3-11dc85ad0993","method":{"position":"org.apache.commons.lang3.text.StrMatcher:333","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int isMatch(final char[] buffer, final int pos, final int bufferStart, final int bufferEnd) {\n    if (bufferEnd < 0) {\n        {\n            return (char) == (buffer[pos]) ? 1 : 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"numerator":"bufferEnd"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:682","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Arrays.equals(lhs, rhs))"},"failures":[272,113,273,274,275,276],"tindex":"0a836b77-3e41-11e6-96e3-194291ef9a28","method":{"position":"org.apache.commons.lang3.ArrayUtils:338","type":"CtMethodImpl","sourcecode":"public static long[] clone(final long[] array) {\n    if (!(java.util.Arrays.equals(array, array))) {\n        {\n            if (array == null) {\n                return null;\n            } \n            return array.clone();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.TimedSemaphore:306","type":"CtUnaryOperatorImpl","sourcecode":"!canPass"},"failures":[277,278,279,280,281,282,283,284,285,286,121,38,39,40,41,42,43,44,45,122,122,287,287,288,288,123,123,124,124,125,125,289,289,247,247,290,291,292,126,293,294,127,128,129,295,248,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,243,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,130,130,330,330,331,331,131,131,132,132,133,133,332,332,249,249,134,134,333,333,334,334,135,135,136,136,137,137,335,335,250,250,336,336,138,138,139,139,140,140,141,141,142,142,143,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,151,337,337,152,152,153,153,154,154,155,155,156,156,157,157,158,158,159,159,160,160,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,168,169,169,170,170,171,171,172,172,173,173,174,174,175,175,176,176,177,177,178,178,179,179,180,180,181,181,182,182,183,183,184,184,185,185,186,186,187,187,188,188,189,189,190,190,191,191,192,192,193,193,194,194,195,195,196,196,197,197,198,198,199,199,200,200,201,201,202,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,210,210,338,338,339,339,211,211,212,212,213,213,340,340,251,251,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,214,214,364,364,365,365,215,215,216,216,217,217,366,366,252,252,218,218,367,367,368,368,219,219,220,220,221,221,369,369,253,253],"tindex":"0a836b78-3e41-11e6-96e3-0d2710433207","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1922","type":"CtMethodImpl","sourcecode":"protected void setFieldSeparatorAtStart(final boolean fieldSeparatorAtStart) {\n    if (!fieldSeparatorAtStart) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.this.boolean = fieldSeparatorAtStart;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"canPass":"fieldSeparatorAtStart"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1244","type":"CtBinaryOperatorImpl","sourcecode":"c > a"},"failures":[370],"tindex":"0a839289-3e41-11e6-96e3-bfff23fd1903","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1134","type":"CtMethodImpl","sourcecode":"public static short min(short a, final short b, final short c) {\n    if (b > c) {\n        {\n            if (b < a) {\n                a = b;\n            } \n            if (c < a) {\n                a = c;\n            } \n            return a;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"c","c":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:97","type":"CtInvocationImpl","sourcecode":"str.contains(\"#\")"},"failures":[],"tindex":"0a83b99a-3e41-11e6-96e3-6bd991f8619a","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:924","type":"CtMethodImpl","sourcecode":"protected void reflectionAppendArrayDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.lang.Object array) {\n    if (array.contains(\"#\")) {\n        {\n            if (array == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    buffer.append(java.lang.String);\n                    final int int = java.lang.reflect.Array.getLength(array);\n                    for (int int = 0 ; i < length ; i++) {\n                        final java.lang.Object java.lang.Object = java.lang.reflect.Array.get(array, i);\n                        if (i > 0) {\n                            buffer.append(java.lang.String);\n                        } \n                        if (item == null) {\n                            appendNullText(buffer, fieldName);\n                        } else {\n                            appendInternal(buffer, fieldName, item, boolean);\n                        }\n                    }\n                    buffer.append(java.lang.String);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1262","type":"CtBinaryOperatorImpl","sourcecode":"c > a"},"failures":[],"tindex":"0a83b99b-3e41-11e6-96e3-6740ea904994","method":{"position":"org.apache.commons.lang3.ArrayUtils:3251","type":"CtMethodImpl","sourcecode":"public static byte[] toPrimitive(final java.lang.Byte[] array, final byte valueForNull) {\n    if (valueForNull > valueForNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.byte[];\n            } \n            final byte[] byte[] = new byte[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Byte java.lang.Byte = array[i];\n                result[i] = b == null ? valueForNull : b.byteValue();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"valueForNull","c":"valueForNull"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:265","type":"CtBinaryOperatorImpl","sourcecode":"value == falseValue"},"failures":[],"tindex":"0a83e0ac-3e41-11e6-96e3-7d5474706c9c","method":{"position":"org.apache.commons.lang3.ArrayUtils:5002","type":"CtMethodImpl","sourcecode":"public static int[] remove(final int[] array, final int index) {\n    if (index == index) {\n        {\n            return ((int[])(org.apache.commons.lang3.ArrayUtils.remove(((java.lang.Object)(array)), index)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"falseValue":"index","value":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:202","type":"CtBinaryOperatorImpl","sourcecode":"(tmp.length()) != (duration.length())"},"failures":[],"tindex":"0a83e0ad-3e41-11e6-96e3-d5aff6738c23","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:514","type":"CtMethodImpl","sourcecode":"private void getQuotedString(final java.lang.String pattern, final java.text.ParsePosition pos, final boolean escapingOn) {\n    if ((pattern.length()) != (pattern.length())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendQuotedString(pattern, pos, null, escapingOn);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"pattern","tmp":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1979","type":"CtBinaryOperatorImpl","sourcecode":"tmp == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)"},"failures":[371],"tindex":"0a8407be-3e41-11e6-96e3-1b0797f5ab9d","method":{"position":"org.apache.commons.lang3.ArrayUtils:5031","type":"CtMethodImpl","sourcecode":"public static int[] removeElement(final int[] array, final int element) {\n    if (element == element) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND":"element","tmp":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1138","type":"CtBinaryOperatorImpl","sourcecode":"c < a"},"failures":[],"tindex":"0a842ecf-3e41-11e6-96e3-959103532d44","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:879","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final short value) {\n    if (value < value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int = ((int) * (int)) + value;\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"value","c":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:357","type":"CtInvocationImpl","sourcecode":"testClass.isArray()"},"failures":[289,336,336,142,142,143,144,145,146,146,147,147,148,149,150,151,337,152,153,153,154,154,155,156,157,158,158,159,160,161,162,162,163,164,164,165,166,166,167,167,168,168,169,170,171,171,172,172,173,173,174,174,175,175,176,176,177,177,178,179,180,181,181,182,182,183,183,184,185,185,186,187,188,188,189,189,190,190,191,192,192,193,194,194,195,196,197,198,198,199,200,200,201,202,203,203,204,204,205,206,206,207,207,208,209,209,341,342,343,344,345,346,347,348,349,350,351],"tindex":"0a8455e0-3e41-11e6-96e3-59fa8210de0a","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:513","type":"CtMethodImpl","sourcecode":"protected void appendFieldsIn(final java.lang.Class<?> clazz) {\n    if (clazz.isArray()) {\n        {\n            if (clazz.isArray()) {\n                org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.reflectionAppendArray(org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.getObject());\n                return ;\n            } \n            final java.lang.reflect.Field[] java.lang.reflect.Field[] = clazz.getDeclaredFields();\n            java.lang.reflect.AccessibleObject.setAccessible(fields, true);\n            for (final java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                final java.lang.String java.lang.String = field.getName();\n                if (org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.accept(field)) {\n                    try {\n                        final java.lang.Object java.lang.Object = org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.getValue(field);\n                        org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.append(fieldName, fieldValue);\n                    } catch (final java.lang.IllegalAccessException ex) {\n                        throw new java.lang.InternalError((\"Unexpected IllegalAccessException: \" + (ex.getMessage())));\n                    }\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"testClass":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1192","type":"CtBinaryOperatorImpl","sourcecode":"(((nInts - 1) * 32) + srcPos) >= 64"},"failures":[],"tindex":"0a8455e1-3e41-11e6-96e3-35221ffa96f3","method":{"position":"org.apache.commons.lang3.text.StrBuilder:968","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final org.apache.commons.lang3.text.StrBuilder str, final int startIndex, final int length) {\n    if ((((startIndex - 1) * 32) + startIndex) >= 64) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return append(str, startIndex, length).appendNewLine();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nInts":"startIndex","srcPos":"startIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1501","type":"CtBinaryOperatorImpl","sourcecode":"strLen > 0"},"failures":[372],"tindex":"0a847cf2-3e41-11e6-96e3-7fb8d91bc805","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1635","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, final long value) {\n    if (index > 0) {\n        {\n            return insert(index, java.lang.String.valueOf(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strLen":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:593","type":"CtBinaryOperatorImpl","sourcecode":"v > 0"},"failures":[373],"tindex":"0a847cf3-3e41-11e6-96e3-6f7635800ad4","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:194","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getDateInstance(final int style, final java.util.Locale locale) {\n    if (style > 0) {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FormatCache<org.apache.commons.lang3.time.FastDateFormat>.getDateInstance(style, null, locale);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"v":"style"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:690","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"0a847cf4-3e41-11e6-96e3-1bfec6ea70ef","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:228","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setArrayEnd(final java.lang.String arrayEnd) {\n    if (arrayEnd == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            super.setArrayEnd(arrayEnd);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"arrayEnd"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5778","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isUpperCase(ch)"},"failures":[],"tindex":"0a84a405-3e41-11e6-96e3-1f945bd83a2d","method":{"position":"org.apache.commons.lang3.StringUtils:3399","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final short[] array, final char separator) {\n    if (java.lang.Character.isUpperCase(separator)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            return org.apache.commons.lang3.StringUtils.join(array, separator, 0, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:373","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[374,375,376],"tindex":"0a84a406-3e41-11e6-96e3-031b6d586fc1","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:166","type":"CtMethodImpl","sourcecode":"public static int reflectionCompare(final java.lang.Object lhs, final java.lang.Object rhs, final boolean compareTransients) {\n    if (rhs == null) {\n        {\n            return org.apache.commons.lang3.builder.CompareToBuilder.reflectionCompare(lhs, rhs, compareTransients, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:140","type":"CtInvocationImpl","sourcecode":"java.lang.Float.isNaN(b)"},"failures":[],"tindex":"0a84a407-3e41-11e6-96e3-2b12ceef00f9","method":{"position":"org.apache.commons.lang3.mutable.MutableFloat:156","type":"CtMethodImpl","sourcecode":"public void add(final float operand) {\n    if (java.lang.Float.isNaN(operand)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableFloat.this.float += operand;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"operand"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:896","type":"CtBinaryOperatorImpl","sourcecode":"first < second"},"failures":[377,378,379,380,381,382,5],"tindex":"0a84a408-3e41-11e6-96e3-57851ab37f0d","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:781","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final long value) {\n    if (value < value) {\n        {\n            int = ((int) * (int)) + ((int)((value ^ (value >> 32))));\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"first":"value","second":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4891","type":"CtBinaryOperatorImpl","sourcecode":"index >= 0"},"failures":[],"tindex":"0a84cb19-3e41-11e6-96e3-afd199a96067","method":{"position":"org.apache.commons.lang3.text.StrBuilder:342","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder deleteCharAt(final int index) {\n    if (index >= 0) {\n        {\n            if ((index < 0) || (index >= (int))) {\n                throw new java.lang.StringIndexOutOfBoundsException(index);\n            } \n            deleteImpl(index, (index + 1), 1);\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:304","type":"CtBinaryOperatorImpl","sourcecode":"lhs != rhs"},"failures":[224,383,384,255,259,260,261,262,263,264,265,14,15,18,21,27,28,29,30,31,32,33,38,39,40,41,42,43,46,49,51,52,53,54,55,60,62,63,385,268],"tindex":"0a84cb1a-3e41-11e6-96e3-13791ed2a263","method":{"position":"org.apache.commons.lang3.text.StrMatcher:163","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.StrMatcher charMatcher(final char ch) {\n    if (ch != ch) {\n        {\n            return new org.apache.commons.lang3.text.StrMatcher.CharMatcher(ch);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"ch","rhs":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:690","type":"CtBinaryOperatorImpl","sourcecode":"(((nInts - 1) * 32) + dstPos) >= 64"},"failures":[386],"tindex":"0a84cb1b-3e41-11e6-96e3-b79a109423e2","method":{"position":"org.apache.commons.lang3.StringUtils:1302","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final java.lang.CharSequence seq, final java.lang.CharSequence searchSeq, final int startPos) {\n    if ((((startPos - 1) * 32) + startPos) >= 64) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((seq == null) || (searchSeq == null)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"startPos","nInts":"startPos"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:308","type":"CtBinaryOperatorImpl","sourcecode":"ch < 128"},"failures":[],"tindex":"0a84f22c-3e41-11e6-96e3-03ffa6eebd90","method":{"position":"org.apache.commons.lang3.text.StrBuilder:795","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic org.apache.commons.lang3.text.StrBuilder append(final char ch) {\n    if (ch < 128) {\n        {\n            final int int = length();\n            ensureCapacity((len + 1));\n            char[][((int)++)] = ch;\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:382","type":"CtBinaryOperatorImpl","sourcecode":"depth == 0"},"failures":[387,388],"tindex":"0a84f22d-3e41-11e6-96e3-6986d13b8c1a","method":{"position":"org.apache.commons.lang3.text.translate.NumericEntityEscaper:73","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.translate.NumericEntityEscaper above(final int codepoint) {\n    if (codepoint == 0) {\n        {\n            return org.apache.commons.lang3.text.translate.NumericEntityEscaper.outsideOf(0, codepoint);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"depth":"codepoint"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:547","type":"CtBinaryOperatorImpl","sourcecode":"power == 1"},"failures":[],"tindex":"0a84f22e-3e41-11e6-96e3-3761d86a75eb","method":{"position":"org.apache.commons.lang3.ArrayUtils:2064","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final long[] array, final long valueToFind, int startIndex) {\n    if (startIndex == 1) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } else if (startIndex >= (array.int)) {\n                startIndex = (array.int) - 1;\n            } \n            for (int int = startIndex ; i >= 0 ; i--) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"power":"startIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4253","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.startsWithIgnoreCase(str, remove)"},"failures":[],"tindex":"0a84f22f-3e41-11e6-96e3-fd9962af9cfd","method":{"position":"org.apache.commons.lang3.exception.DefaultExceptionContext:91","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object getFirstContextValue(final java.lang.String label) {\n    if (org.apache.commons.lang3.StringUtils.startsWithIgnoreCase(label, label)) {\n        {\n            for (final org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object> org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object> : java.util.List<org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object>>) {\n                if (org.apache.commons.lang3.StringUtils.equals(label, pair.getKey())) {\n                    return pair.getValue();\n                } \n            }\n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"label","remove":"label"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:217","type":"CtFieldReadImpl","sourcecode":"objectsTriviallyEqual"},"failures":[],"tindex":"0a851940-3e41-11e6-96e3-af8790d12b6c","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:559","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final boolean[] array, final boolean fullDetail) {\n    if (fullDetail) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, java.lang.Boolean.valueOf(fullDetail));\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectsTriviallyEqual":"fullDetail"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:880","type":"CtInvocationImpl","sourcecode":"toClass.equals(cls)"},"failures":[389,390,391,392,393,394,395,396,397,398,399,278],"tindex":"0a851941-3e41-11e6-96e3-2bf8b6179fc5","method":{"position":"org.apache.commons.lang3.ClassUtils:352","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.Class<?>> getAllInterfaces(final java.lang.Class<?> cls) {\n    if (cls.equals(cls)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cls == null) {\n                return null;\n            } \n            final java.util.LinkedHashSet<java.lang.Class<?>> java.util.LinkedHashSet<java.lang.Class<?>> = new java.util.LinkedHashSet<java.lang.Class<?>>();\n            org.apache.commons.lang3.ClassUtils.getAllInterfaces(cls, interfacesFound);\n            return new java.util.ArrayList<java.lang.Class<?>>(interfacesFound);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toClass":"cls","cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:286","type":"CtBinaryOperatorImpl","sourcecode":"ch == null"},"failures":[400],"tindex":"0a851942-3e41-11e6-96e3-5f220f0f93af","method":{"position":"org.apache.commons.lang3.CharUtils:379","type":"CtMethodImpl","sourcecode":"public static java.lang.String unicodeEscaped(final java.lang.Character ch) {\n    if (ch == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ch == null) {\n                return null;\n            } \n            return org.apache.commons.lang3.CharUtils.unicodeEscaped(ch.charValue());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1527","type":"CtBinaryOperatorImpl","sourcecode":"len > 0"},"failures":[],"tindex":"0a854053-3e41-11e6-96e3-9d87a78228a5","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:218","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setFormat(final int formatElementIndex, final java.text.Format newFormat) {\n    if (formatElementIndex > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"formatElementIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.lang3.concurrent.ConcurrentException","condition":{"position":"org.apache.commons.lang3.concurrent.BackgroundInitializer:155","type":"CtInvocationImpl","sourcecode":"isStarted()"},"failures":[],"tindex":"0a854054-3e41-11e6-96e3-bd1fc2fe4e94","method":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:182","type":"CtMethodImpl","sourcecode":"public static <T>T initialize(final org.apache.commons.lang3.concurrent.ConcurrentInitializer<T> initializer) throws org.apache.commons.lang3.concurrent.ConcurrentException {\n    return initializer != null ? initializer.get() : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"initializer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:978","type":"CtBinaryOperatorImpl","sourcecode":"((org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE) == modType) || (millisecs < 500)"},"failures":[401],"tindex":"0a854055-3e41-11e6-96e3-ff9c90239c86","method":{"position":"org.apache.commons.lang3.ArrayUtils:1114","type":"CtMethodImpl","sourcecode":"public static double[] subarray(final double[] array, int startIndexInclusive, int endIndexExclusive) {\n    if ((startIndexInclusive == startIndexInclusive) || (startIndexInclusive < 500)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            if (startIndexInclusive < 0) {\n                startIndexInclusive = 0;\n            } \n            if (endIndexExclusive > (array.int)) {\n                endIndexExclusive = array.int;\n            } \n            final int int = endIndexExclusive - startIndexInclusive;\n            if (newSize <= 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.double[];\n            } \n            final double[] double[] = new double[newSize];\n            java.lang.System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n            return subarray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"modType":"startIndexInclusive","millisecs":"startIndexInclusive","org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE":"startIndexInclusive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2830","type":"CtBinaryOperatorImpl","sourcecode":"end > beg"},"failures":[402],"tindex":"0a854056-3e41-11e6-96e3-99e45ed9e2d6","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2981","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final java.lang.String str, final int off, final int len) {\n    if (len > off) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.text.StrBuilder.this.append(str, off, len);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"beg":"off","end":"len"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharEncoding:95","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418],"tindex":"0a856767-3e41-11e6-96e3-c74347ac9aa8","method":{"position":"org.apache.commons.lang3.Validate:446","type":"CtMethodImpl","sourcecode":"public static <T extends java.lang.CharSequence>T notBlank(final T chars, final java.lang.String message, final java.lang.Object... values) {\n    if (message == null) {\n        {\n            if (chars == null) {\n                throw new java.lang.NullPointerException(java.lang.String.format(message, values));\n            } \n            if (org.apache.commons.lang3.StringUtils.isBlank(chars)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message, values));\n            } \n            return chars;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"message"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:975","type":"CtBinaryOperatorImpl","sourcecode":"superToString != null"},"failures":[],"tindex":"0a856768-3e41-11e6-96e3-b7e2ed8b7468","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:715","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final short lhs, final short rhs) {\n    if (fieldName != null) {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (lhs != rhs) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Short>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Short getLeft() {\n                        return java.lang.Short.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Short getRight() {\n                        return java.lang.Short.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superToString":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:931","type":"CtBinaryOperatorImpl","sourcecode":"(toProperString) == null"},"failures":[419],"tindex":"0a858e79-3e41-11e6-96e3-671b5171bad5","method":{"position":"org.apache.commons.lang3.ClassPathUtils:80","type":"CtMethodImpl","sourcecode":"public static java.lang.String toFullyQualifiedName(final java.lang.Package context, final java.lang.String resourceName) {\n    if (resourceName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.notNull(context, \"Parameter '%s' must not be null!\", \"context\");\n            org.apache.commons.lang3.Validate.notNull(resourceName, \"Parameter '%s' must not be null!\", \"resourceName\");\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            sb.append(context.getName());\n            sb.append(\".\");\n            sb.append(resourceName);\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toProperString":"resourceName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:622","type":"CtBinaryOperatorImpl","sourcecode":"stripChars == null"},"failures":[295,322,332,335,336,138,139,139,140,141,142,143,144,145,146,147,148,149,150,151,337,152,153,154,155,156,157,158,159,160,161,162,163,164,165,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,340,366,369],"tindex":"0a858e7a-3e41-11e6-96e3-65e68400b4f2","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:843","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final boolean value) {\n    if (fieldName == null) {\n        {\n            appendFieldStart(buffer, fieldName);\n            appendDetail(buffer, fieldName, value);\n            appendFieldEnd(buffer, fieldName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stripChars":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5660","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[420,421,422,423,424,425,426],"tindex":"0a85b58b-3e41-11e6-96e3-cbc96148158c","method":{"position":"org.apache.commons.lang3.math.NumberUtils:708","type":"CtMethodImpl","sourcecode":"public static java.lang.Long createLong(final java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return java.lang.Long.decode(str);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2107","type":"CtBinaryOperatorImpl","sourcecode":"len > (size)"},"failures":[],"tindex":"0a85b58c-3e41-11e6-96e3-17ac3de938cb","method":{"position":"org.apache.commons.lang3.Conversion:1152","type":"CtMethodImpl","sourcecode":"public static byte binaryToByte(final boolean[] src, final int srcPos, final byte dstInit, final int dstPos, final int nBools) {\n    if (nBools > nBools) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((((src.int) == 0) && (srcPos == 0)) || (0 == nBools)) {\n                return dstInit;\n            } \n            if (((nBools - 1) + dstPos) >= 8) {\n                throw new java.lang.IllegalArgumentException(\"nBools-1+dstPos is greather or equal to than 8\");\n            } \n            byte byte = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nBools ; i++) {\n                shift = (i * 1) + dstPos;\n                final int int = (src[(i + srcPos)] ? 1 : 0) << shift;\n                final int int = 1 << shift;\n                out = ((byte)((out & (~mask)) | bits));\n            }\n            return out;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"nBools","size":"nBools"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:373","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[427,428],"tindex":"0a85b58d-3e41-11e6-96e3-9b632310736d","method":{"position":"org.apache.commons.lang3.StringUtils:7311","type":"CtMethodImpl","sourcecode":"private static boolean endsWith(final java.lang.CharSequence str, final java.lang.CharSequence suffix, final boolean ignoreCase) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229073562/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((str == null) || (suffix == null)) {\n                return (str == null) && (suffix == null);\n            } \n            if ((suffix.length()) > (str.length())) {\n                return false;\n            } \n            final int int = (str.length()) - (suffix.length());\n            return org.apache.commons.lang3.CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
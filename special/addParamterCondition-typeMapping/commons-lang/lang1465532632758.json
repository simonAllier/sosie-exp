{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":207,"org.apache.commons.lang3.ArrayUtilsTest.testSameLengthBoolean":410,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":172,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":188,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Boolean":282,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":166,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray":78,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":208,"org.apache.commons.lang3.mutable.MutableByteTest.testSubtractValueObject":0,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArrayEqualAsObject":219,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":147,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":382,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":55,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array":328,"org.apache.commons.lang3.SystemUtilsTest.testGetUserHome":246,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":57,"org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterType":365,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":183,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":216,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray":77,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetMatchingAccessibleMethod":264,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":379,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":106,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":205,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude":79,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":191,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int":284,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":158,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":193,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEqualsHashcode":348,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":162,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int":323,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_FormattedString":325,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedFormats":332,"org.apache.commons.lang3.reflect.TypeLiteralTest.testEquals":269,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":130,"org.apache.commons.lang3.reflect.TypeLiteralTest.testBasic":267,"org.apache.commons.lang3.time.DateUtilsTest.testSetMinutes":251,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Array":306,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":165,"org.apache.commons.lang3.ArrayUtilsTest.testSameLengthShort":394,"org.apache.commons.lang3.math.NumberUtilsTest.testToByteString":18,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int":307,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":102,"org.apache.commons.lang3.math.FractionTest.testDivide":356,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477":349,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":148,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":141,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeStartText":61,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":386,"org.apache.commons.lang3.AnnotationUtilsTest.testNonEquivalentAnnotationsOfSameType":32,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder":320,"org.apache.commons.lang3.SystemUtilsTest.testOSMatchesName":245,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testBlank":92,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":376,"org.apache.commons.lang3.AnnotationUtilsTest.testSameInstance":26,"org.apache.commons.lang3.CharEncodingTest.testWorksOnJava1_1_8":344,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull":73,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":138,"org.apache.commons.lang3.CharEncodingTest.testMustBeSupportedJava1_3_1":343,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":391,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":187,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":218,"org.apache.commons.lang3.AnnotationUtilsTest.testEquivalence":27,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear":384,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithNullText":298,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testBuiltInNumberFormat":334,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentEnd":60,"org.apache.commons.lang3.CharEncodingTest.testWorksOnJava1_2_2":345,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":387,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText":310,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":137,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":122,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":152,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":200,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":214,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":88,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":173,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder":299,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testBuiltInDateTimeFormat":329,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson":97,"org.apache.commons.lang3.math.FractionTest.testReducedFactory_int_int":351,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":125,"org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testCreateIfAbsentNullMap":395,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String":305,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments":270,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":373,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":385,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":54,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":44,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char":308,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight":322,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":211,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_ThrowableWriter":37,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":184,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":116,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":115,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testPerson":186,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":83,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":121,"org.apache.commons.lang3.builder.EqualsBuilderTest.testByteArrayHiddenByObject":401,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testArrayList":234,"org.apache.commons.lang3.time.DateUtilsTest.testRoundLang346":369,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":136,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":217,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testBlank":84,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":135,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer":309,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int":288,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection":72,"org.apache.commons.lang3.text.StrBuilderTest.testAsReader":10,"org.apache.commons.lang3.builder.DiffResultTest.testNullStyle":48,"org.apache.commons.lang3.SystemUtilsTest.testOSMatchesNameAndVersion":238,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":124,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsInstance":271,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Object":300,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":157,"org.apache.commons.lang3.reflect.FieldUtilsTest.testRemoveFinalModifierWithoutAccess":6,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Collection":289,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":389,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Object":314,"org.apache.commons.lang3.ArrayUtilsTest.testCloneByte":23,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBelow":408,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementByteArray":22,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":94,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":109,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":199,"org.apache.commons.lang3.StringUtilsTest.testGetJaroWinklerDistance_StringString":396,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testBlank":197,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullLhs":227,"org.apache.commons.lang3.SystemUtilsTest.testJavaAwtHeadless":241,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectEndText":71,"org.apache.commons.lang3.text.WordUtilsTest.testInitials_String_charArray":2,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int":304,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":215,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":80,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":163,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable":39,"org.apache.commons.lang3.math.FractionTest.testAdd":19,"org.apache.commons.lang3.builder.DiffTest.testGetFieldName":230,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":372,"org.apache.commons.lang3.builder.DiffBuilderTest.testSameObjectIgnoresAppends":223,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray":42,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":265,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":160,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":171,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":101,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArraySeparator":69,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":113,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementDoubleArray":399,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":213,"org.apache.commons.lang3.time.DateUtilsTest.testCeil":249,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":198,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":377,"org.apache.commons.lang3.builder.DiffTest.testToString":231,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testLinkedList":236,"org.apache.commons.lang3.StringUtilsIsTest.testIsWhitespace":8,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":222,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert":321,"org.apache.commons.lang3.ObjectUtilsTest.testHashCode":412,"org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringIntStringBoolean":276,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":104,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWithAny":13,"org.apache.commons.lang3.SystemUtilsTest.testIS_OS":239,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlAllCharacters":406,"org.apache.commons.lang3.AnnotationUtilsTest.testGeneratedAnnotationEquivalentToRealAnnotation":30,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":226,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":154,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int":315,"org.apache.commons.lang3.builder.CompareToBuilderTest.testShortArrayHiddenByObject":359,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":209,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray":74,"org.apache.commons.lang3.time.DateUtilsTest.testAddMilliseconds":260,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":59,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":167,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":381,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":100,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":139,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":175,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":129,"org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables":273,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldNameValueSeparator":65,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats":333,"org.apache.commons.lang3.BitFieldTest.testSetShortBoolean":1,"org.apache.commons.lang3.time.DateUtilsTest.testAddHours":252,"org.apache.commons.lang3.reflect.TypeLiteralTest.testRaw":266,"org.apache.commons.lang3.time.DateUtilsTest.testTruncate":370,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson":202,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber":281,"org.apache.commons.lang3.text.WordUtilsTest.testInitials_String":3,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":117,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":108,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeEndText":64,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":177,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson":89,"org.apache.commons.lang3.SystemUtilsTest.testConstructor":247,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":263,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":170,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":169,"org.apache.commons.lang3.time.DateUtilsTest.testSetYears":262,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String":303,"org.apache.commons.lang3.reflect.FieldUtilsTest.testRemoveFinalModifierAccessNotNeeded":7,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong":85,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":375,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson":194,"org.apache.commons.lang3.SystemUtilsTest.testGetUserDir":242,"org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Integer_Integer_Integer_noMatch":17,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":47,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":96,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNull":366,"org.apache.commons.lang3.time.DateUtilsTest.testAddSeconds":250,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int":312,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":105,"org.apache.commons.lang3.time.DateUtilsTest.testAddMonths":257,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":82,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiShortArray":361,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice":350,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":142,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder":301,"org.apache.commons.lang3.StringUtilsTest.testIsAllUpperCase":400,"org.apache.commons.lang3.builder.DiffResultTest.testNullRhs":51,"org.apache.commons.lang3.SystemUtilsTest.testGetJavaHome":244,"org.apache.commons.lang3.time.DateUtilsTest.testSetMonths":258,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":392,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":174,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String":317,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":86,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat":330,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int":327,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":143,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":153,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String_int_int":287,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":383,"org.apache.commons.lang3.math.FractionTest.testMultiply":357,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_ThrowableStream":36,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":99,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawType":275,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":103,"org.apache.commons.lang3.builder.CompareToBuilderTest.testShortArray":360,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":91,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Widening":40,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":380,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":107,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":179,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testBlank":189,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int":280,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String":302,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":145,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":196,"org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringString_StringStringInt":4,"org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiByteArray":404,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":119,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int":292,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":212,"org.apache.commons.lang3.time.DateUtilsTest.testAddWeeks":253,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendNewLine":291,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":114,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigInteger":367,"org.apache.commons.lang3.AnnotationUtilsTest.testBothArgsNull":31,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":190,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":178,"org.apache.commons.lang3.builder.EqualsBuilderTest.testByte":403,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetNullText":63,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":168,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testLang299":296,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":390,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":120,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":156,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":127,"org.apache.commons.lang3.builder.DiffTest.testCannotModify":232,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":58,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetRootCauseStackTrace_Throwable":38,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Iterator":294,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":224,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Boolean":283,"org.apache.commons.lang3.text.translate.OctalUnescaperTest.testBetween":409,"org.apache.commons.lang3.AnnotationUtilsTest.testOneArgNull":24,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls":81,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":272,"org.apache.commons.lang3.reflect.TypeUtilsTest.testDetermineTypeVariableAssignments":274,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":210,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":229,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_DefaultUnboxing_Widening":41,"org.apache.commons.lang3.builder.EqualsBuilderTest.testByteArray":402,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":378,"org.apache.commons.lang3.builder.DiffResultTest.testNullList":45,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_FormattedString":313,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":393,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":132,"org.apache.commons.lang3.SystemUtilsTest.testJavaVersionMatches":237,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":52,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":155,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":146,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String_int_int":318,"org.apache.commons.lang3.LocaleUtilsTest.testToLocale_3Part":346,"org.apache.commons.lang3.math.FractionTest.testReduce":358,"org.apache.commons.lang3.StringUtilsTest.testToString":34,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":56,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testBlank":181,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":192,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":133,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":49,"org.apache.commons.lang3.ArrayUtilsTest.testReverseShort":9,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":161,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer":293,"org.apache.commons.lang3.builder.DiffResultTest.testNoDifferencesString":46,"org.apache.commons.lang3.time.DateUtilsTest.testSetHours":261,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":118,"org.apache.commons.lang3.SystemUtilsTest.testGetJavaIoTmpDir":240,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testBlank":53,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":5,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":204,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":140,"org.apache.commons.lang3.ArrayUtilsTest.testIsEquals":14,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection":278,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":203,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":206,"org.apache.commons.lang3.BooleanUtilsTest.test_toStringYesNo_Boolean":397,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray":326,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":93,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":225,"org.apache.commons.lang3.reflect.TypeLiteralTest.testTyped":268,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":164,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":123,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":221,"org.apache.commons.lang3.StringUtilsTest.testToEncodedString":35,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection":75,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":43,"org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Integer_Integer_Integer_nullValue":16,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":185,"org.apache.commons.lang3.AnnotationUtilsTest.testAnnotationsOfDifferingTypes":28,"org.apache.commons.lang3.time.DateUtilsTest.testAddYears":254,"org.apache.commons.lang3.math.FractionTest.testFactory_double":353,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":220,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char":295,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testCopyOnWriteArrayList":235,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":144,"org.apache.commons.lang3.builder.DiffResultTest.testNullLhs":50,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":87,"org.apache.commons.lang3.ArrayUtilsTest.testToString":347,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentStart":62,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWithAny":12,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int":285,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":110,"org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringInt":277,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLong":182,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testAbove":407,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendPadding":316,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastOrdinalIndexOf":362,"org.apache.commons.lang3.SystemUtilsTest.testIS_JAVA":243,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayByte":405,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectStartText":67,"org.apache.commons.lang3.AnnotationUtilsTest.testHashCode":29,"org.apache.commons.lang3.time.DateUtilsTest.testWeekIterator":371,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":134,"org.apache.commons.lang3.math.NumberUtilsTest.testToFloatString":363,"org.apache.commons.lang3.time.DateUtilsTest.testMonthIterator":368,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber":319,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":98,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator":297,"org.apache.commons.lang3.builder.DiffTest.testGetType":233,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":76,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":159,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft":286,"org.apache.commons.lang3.ValidateTest.testInclusiveBetweenDouble_withMessage":364,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":149,"org.apache.commons.lang3.text.StrTokenizerTest.test8":342,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":388,"org.apache.commons.lang3.time.DateUtilsTest.testRound":248,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveDoubleArray":398,"org.apache.commons.lang3.text.StrTokenizerTest.test5":339,"org.apache.commons.lang3.text.StrTokenizerTest.test4":338,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":150,"org.apache.commons.lang3.text.StrTokenizerTest.test7":341,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":151,"org.apache.commons.lang3.text.StrTokenizerTest.test6":340,"org.apache.commons.lang3.text.StrTokenizerTest.test1":335,"org.apache.commons.lang3.text.StrTokenizerTest.test3":337,"org.apache.commons.lang3.text.StrTokenizerTest.test2":336,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":126,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldSeparator":68,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":195,"org.apache.commons.lang3.AnnotationUtilsTest.testIsValidAnnotationMemberType":33,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":90,"org.apache.commons.lang3.text.StrBuilderTest.testCharAt":11,"org.apache.commons.lang3.time.DateUtilsTest.testSetDays":259,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder":290,"org.apache.commons.lang3.math.FractionTest.testSubtract":20,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":112,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementByteArray":21,"org.apache.commons.lang3.math.FractionTest.testToProperString":354,"org.apache.commons.lang3.math.FractionTest.testPow":352,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":95,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayEnd":66,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullRhs":228,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":111,"org.apache.commons.lang3.math.FractionTest.testFactory_String_double":355,"org.apache.commons.lang3.ObjectUtilsTest.testHashCodeMulti_multiple_likeList":411,"org.apache.commons.lang3.time.DateUtilsTest.testTruncateLang59":255,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray":324,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testBuiltInChoiceFormat":331,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayStart":70,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":201,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":176,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":131,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":374,"org.apache.commons.lang3.AnnotationUtilsTest.testToString":25,"org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Integer_Integer_Integer":15,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsertWithNullText":279,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":128,"org.apache.commons.lang3.time.DateUtilsTest.testSetSeconds":256,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int":311,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":180},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3342","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"23591584-2ec3-11e6-9ee8-17fbf149a5ec","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2702","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj instanceof org.apache.commons.lang3.text.StrBuilder) {\n                return equals(((org.apache.commons.lang3.text.StrBuilder)(obj)));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:371","type":"CtInvocationImpl","sourcecode":"value.equals(nullValue)"},"failures":[0],"tindex":"2359ffe5-2ec3-11e6-9ee8-d10ab3db60d3","method":{"position":"org.apache.commons.lang3.mutable.MutableByte:169","type":"CtMethodImpl","sourcecode":"public void subtract(final java.lang.Number operand) {\n    if (operand.equals(operand)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableByte.this.byte -= operand.byteValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"operand","nullValue":"operand"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:713","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"2359ffe6-2ec3-11e6-9ee8-577121679c65","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:750","type":"CtMethodImpl","sourcecode":"private int substitute(final org.apache.commons.lang3.text.StrBuilder buf, final int offset, final int length, java.util.List<java.lang.String> priorVariables) {\n    if (buf == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.lang3.text.StrMatcher org.apache.commons.lang3.text.StrMatcher = getVariablePrefixMatcher();\n            final org.apache.commons.lang3.text.StrMatcher org.apache.commons.lang3.text.StrMatcher = getVariableSuffixMatcher();\n            final char char = getEscapeChar();\n            final org.apache.commons.lang3.text.StrMatcher org.apache.commons.lang3.text.StrMatcher = getValueDelimiterMatcher();\n            final boolean boolean = isEnableSubstitutionInVariables();\n            final boolean boolean = priorVariables == null;\n            boolean boolean = false;\n            int int = 0;\n            char[] char[] = buf.char[];\n            int int = offset + length;\n            int int = offset;\n            while (pos < bufEnd) {\n                final int int = pfxMatcher.isMatch(chars, pos, offset, bufEnd);\n                if (startMatchLen == 0) {\n                    pos++;\n                } else {\n                    if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {\n                        buf.deleteCharAt((pos - 1));\n                        chars = buf.char[];\n                        lengthChange--;\n                        altered = true;\n                        bufEnd--;\n                    } else {\n                        final int int = pos;\n                        pos += startMatchLen;\n                        int int = 0;\n                        int int = 0;\n                        while (pos < bufEnd) {\n                            if (substitutionInVariablesEnabled && ((endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {\n                                nestedVarCount++;\n                                pos += endMatchLen;\n                                continue;\n                            } \n                            endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);\n                            if (endMatchLen == 0) {\n                                pos++;\n                            } else {\n                                if (nestedVarCount == 0) {\n                                    java.lang.String java.lang.String = new java.lang.String(chars , (startPos + startMatchLen) , ((pos - startPos) - startMatchLen));\n                                    if (substitutionInVariablesEnabled) {\n                                        final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(varNameExpr);\n                                        substitute(bufName, 0, bufName.length());\n                                        varNameExpr = bufName.toString();\n                                    } \n                                    pos += endMatchLen;\n                                    final int int = pos;\n                                    java.lang.String java.lang.String = varNameExpr;\n                                    java.lang.String java.lang.String = null;\n                                    if (valueDelimMatcher != null) {\n                                        final char[] char[] = varNameExpr.toCharArray();\n                                        int int = 0;\n                                        for (int int = 0 ; i < (varNameExprChars.int) ; i++) {\n                                            if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.int)) != 0)) {\n                                                break;\n                                            } \n                                            if ((valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {\n                                                varName = varNameExpr.substring(0, i);\n                                                varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));\n                                                break;\n                                            } \n                                        }\n                                    } \n                                    if (priorVariables == null) {\n                                        priorVariables = new java.util.ArrayList<java.lang.String>();\n                                        priorVariables.add(new java.lang.String(chars , offset , length));\n                                    } \n                                    checkCyclicSubstitution(varName, priorVariables);\n                                    priorVariables.add(varName);\n                                    java.lang.String java.lang.String = resolveVariable(varName, buf, startPos, endPos);\n                                    if (varValue == null) {\n                                        varValue = varDefaultValue;\n                                    } \n                                    if (varValue != null) {\n                                        final int int = varValue.length();\n                                        buf.replace(startPos, endPos, varValue);\n                                        altered = true;\n                                        int int = substitute(buf, startPos, varLen, priorVariables);\n                                        change = (change + varLen) - (endPos - startPos);\n                                        pos += change;\n                                        bufEnd += change;\n                                        lengthChange += change;\n                                        chars = buf.char[];\n                                    } \n                                    priorVariables.remove(((priorVariables.size()) - 1));\n                                    break;\n                                } else {\n                                    nestedVarCount--;\n                                    pos += endMatchLen;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (top) {\n                return altered ? 1 : 0;\n            } \n            return lengthChange;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"buf"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:354","type":"CtVariableReadImpl","sourcecode":"error"},"failures":[1],"tindex":"235a7517-2ec3-11e6-9ee8-5180785a3223","method":{"position":"org.apache.commons.lang3.BitField:266","type":"CtMethodImpl","sourcecode":"public short setShortBoolean(final short holder, final boolean flag) {\n    if (flag) {\n        {\n            return flag ? setShort(holder) : clearShort(holder);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"error":"flag"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:2098","type":"CtBinaryOperatorImpl","sourcecode":"summaryObjectEndText == null"},"failures":[2,3],"tindex":"235a9c28-2ec3-11e6-9ee8-4919f0fb23f9","method":{"position":"org.apache.commons.lang3.text.WordUtils:535","type":"CtMethodImpl","sourcecode":"public static java.lang.String initials(final java.lang.String str, final char... delimiters) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                return str;\n            } \n            if ((delimiters != null) && ((delimiters.int) == 0)) {\n                return \"\";\n            } \n            final int int = str.length();\n            final char[] char[] = new char[(strLen / 2) + 1];\n            int int = 0;\n            boolean boolean = true;\n            for (int int = 0 ; i < strLen ; i++) {\n                final char char = str.charAt(i);\n                if (org.apache.commons.lang3.text.WordUtils.isDelimiter(ch, delimiters)) {\n                    lastWasGap = true;\n                } else if (lastWasGap) {\n                    buf[(count++)] = ch;\n                    lastWasGap = false;\n                } else {\n                    continue;\n                }\n            }\n            return new java.lang.String(buf , 0 , count);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"summaryObjectEndText":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2811","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[4],"tindex":"235ac339-2ec3-11e6-9ee8-f35a15b4cc40","method":{"position":"org.apache.commons.lang3.StringUtils:3053","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] splitPreserveAllTokens(final java.lang.String str, final java.lang.String separatorChars, final int max) {\n    if (max == 0) {\n        {\n            return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChars, max, true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"max"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:218","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.CharUtils.isAsciiNumeric(ch)) == false"},"failures":[],"tindex":"235ac33a-2ec3-11e6-9ee8-a51eed2893e7","method":{"position":"org.apache.commons.lang3.ArrayUtils:2979","type":"CtMethodImpl","sourcecode":"public static char[] toPrimitive(final java.lang.Character[] array, final char valueForNull) {\n    if ((org.apache.commons.lang3.CharUtils.isAsciiNumeric(valueForNull)) == false) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.char[];\n            } \n            final char[] char[] = new char[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Character java.lang.Character = array[i];\n                result[i] = b == null ? valueForNull : b.charValue();\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"valueForNull"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:908","type":"CtBinaryOperatorImpl","sourcecode":"(((nHex - 1) * 4) + dstPos) >= 64"},"failures":[],"tindex":"235aea4b-2ec3-11e6-9ee8-0b0dfd433bd0","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1222","type":"CtMethodImpl","sourcecode":"public static int max(int a, final int b, final int c) {\n    if ((((a - 1) * 4) + c) >= 64) {\n        {\n            if (b > a) {\n                a = b;\n            } \n            if (c > a) {\n                a = c;\n            } \n            return a;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"c","nHex":"a"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:778","type":"CtBinaryOperatorImpl","sourcecode":"rhs == null"},"failures":[5,5],"tindex":"235aea4c-2ec3-11e6-9ee8-bfddb07c5c84","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:513","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final short[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rhs":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1035","type":"CtVariableReadImpl","sourcecode":"lastIndex"},"failures":[6,7],"tindex":"235b115d-2ec3-11e6-9ee8-e3ca13e5ca53","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:678","type":"CtMethodImpl","sourcecode":"public static void removeFinalModifier(java.lang.reflect.Field field, boolean forceAccess) {\n    if (forceAccess) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((field != null), \"The field must not be null\");\n            try {\n                if (java.lang.reflect.Modifier.isFinal(field.getModifiers())) {\n                    java.lang.reflect.Field java.lang.reflect.Field = java.lang.reflect.Field.java.lang.reflect.Field.java.lang.Class.getDeclaredField(\"modifiers\");\n                    final boolean boolean = forceAccess && (!(modifiersField.isAccessible()));\n                    if (doForceAccess) {\n                        modifiersField.setAccessible(true);\n                    } \n                    try {\n                        modifiersField.setInt(field, ((field.getModifiers()) & (~(java.lang.reflect.Modifier.java.lang.reflect.Modifier.int))));\n                    } finally {\n                        if (doForceAccess) {\n                            modifiersField.setAccessible(false);\n                        } \n                    }\n                } \n            } catch (java.lang.NoSuchFieldException ignored) {\n            } catch (java.lang.IllegalAccessException ignored) {\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lastIndex":"forceAccess"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:534","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"235b386e-2ec3-11e6-9ee8-3df459b9e1b3","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1272","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final double[] array, final java.lang.Boolean fullDetail) {\n    if (fieldName == null) {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (array == null) {\n                appendNullText(buffer, fieldName);\n            } else if (isFullDetail(fullDetail)) {\n                appendDetail(buffer, fieldName, array);\n            } else {\n                appendSummary(buffer, fieldName, array);\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:767","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[],"tindex":"235b5f7f-2ec3-11e6-9ee8-a3c8fda6ab0d","method":{"position":"org.apache.commons.lang3.StringUtils:1618","type":"CtMethodImpl","sourcecode":"public static boolean containsAny(final java.lang.CharSequence cs, final char... searchChars) {\n    if (searchChars == searchChars) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars))) {\n                return false;\n            } \n            final int int = cs.length();\n            final int int = searchChars.int;\n            final int int = csLength - 1;\n            final int int = searchLength - 1;\n            for (int int = 0 ; i < csLength ; i++) {\n                final char char = cs.charAt(i);\n                for (int int = 0 ; j < searchLength ; j++) {\n                    if ((searchChars[j]) == ch) {\n                        if (java.lang.Character.isHighSurrogate(ch)) {\n                            if (j == searchLast) {\n                                return true;\n                            } \n                            if ((i < csLast) && ((searchChars[(j + 1)]) == (cs.charAt((i + 1))))) {\n                                return true;\n                            } \n                        } else {\n                            return true;\n                        }\n                    } \n                }\n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"searchChars","rhs":"searchChars"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1766","type":"CtBinaryOperatorImpl","sourcecode":"arrayEnd == null"},"failures":[8],"tindex":"235b5f80-2ec3-11e6-9ee8-ffc3043c33e5","method":{"position":"org.apache.commons.lang3.StringUtils:6103","type":"CtMethodImpl","sourcecode":"public static boolean isWhitespace(final java.lang.CharSequence cs) {\n    if (cs == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cs == null) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if ((java.lang.Character.isWhitespace(cs.charAt(i))) == false) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayEnd":"cs"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1854","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[9],"tindex":"235b8691-2ec3-11e6-9ee8-5121e8164428","method":{"position":"org.apache.commons.lang3.ArrayUtils:1477","type":"CtMethodImpl","sourcecode":"public static void reverse(final short[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return ;\n            } \n            org.apache.commons.lang3.ArrayUtils.reverse(array, 0, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:512","type":"CtBinaryOperatorImpl","sourcecode":"(numerator) == (java.lang.Integer.MIN_VALUE)"},"failures":[10,11,12,13],"tindex":"235bada2-2ec3-11e6-9ee8-11d2de3854ee","method":{"position":"org.apache.commons.lang3.text.StrBuilder:308","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic char charAt(final int index) {\n    if (index == index) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index < 0) || (index >= (length()))) {\n                throw new java.lang.StringIndexOutOfBoundsException(index);\n            } \n            return char[][index];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.Integer.MIN_VALUE":"index","numerator":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:339","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[14],"tindex":"235bada3-2ec3-11e6-9ee8-47cc3d6e50dc","method":{"position":"org.apache.commons.lang3.ArrayUtils:206","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static boolean isEquals(final java.lang.Object array1, final java.lang.Object array2) {\n    if (array2 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.lang3.builder.EqualsBuilder().append(array1, array2).isEquals();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:200","type":"CtBinaryOperatorImpl","sourcecode":"timeStyle == null"},"failures":[15,16,17],"tindex":"235bd4b4-2ec3-11e6-9ee8-8312e5fd04ae","method":{"position":"org.apache.commons.lang3.BooleanUtils:289","type":"CtMethodImpl","sourcecode":"public static boolean toBoolean(final java.lang.Integer value, final java.lang.Integer trueValue, final java.lang.Integer falseValue) {\n    if (falseValue == null) {\n        {\n            if (value == null) {\n                if (trueValue == null) {\n                    return true;\n                } \n                if (falseValue == null) {\n                    return false;\n                } \n            } else if (value.equals(trueValue)) {\n                return true;\n            } else if (value.equals(falseValue)) {\n                return false;\n            } \n            throw new java.lang.IllegalArgumentException(\"The Integer did not match either specified value\");\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"timeStyle":"falseValue"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:664","type":"CtBinaryOperatorImpl","sourcecode":"nullString == null"},"failures":[],"tindex":"235bd4b5-2ec3-11e6-9ee8-83dfea2edf68","method":{"position":"org.apache.commons.lang3.StringUtils:4457","type":"CtMethodImpl","sourcecode":"public static java.lang.String removePattern(final java.lang.String source, final java.lang.String regex) {\n    if (source == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.replacePattern(source, regex, org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nullString":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2335","type":"CtBinaryOperatorImpl","sourcecode":"separator == null"},"failures":[18],"tindex":"235bfbc6-2ec3-11e6-9ee8-e32020253056","method":{"position":"org.apache.commons.lang3.math.NumberUtils:302","type":"CtMethodImpl","sourcecode":"public static byte toByte(final java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte)(0)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:741","type":"CtBinaryOperatorImpl","sourcecode":"fraction == null"},"failures":[19,20],"tindex":"235bfbc7-2ec3-11e6-9ee8-cfefe8360145","method":{"position":"org.apache.commons.lang3.math.Fraction:740","type":"CtMethodImpl","sourcecode":"private org.apache.commons.lang3.math.Fraction addSub(final org.apache.commons.lang3.math.Fraction fraction, final boolean isAdd) {\n    if (fraction == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fraction == null) {\n                throw new java.lang.IllegalArgumentException(\"The fraction must not be null\");\n            } \n            if ((int) == 0) {\n                return isAdd ? fraction : fraction.negate();\n            } \n            if ((fraction.int) == 0) {\n                return org.apache.commons.lang3.math.Fraction.this;\n            } \n            final int int = org.apache.commons.lang3.math.Fraction.greatestCommonDivisor(int, fraction.int);\n            if (d1 == 1) {\n                final int int = org.apache.commons.lang3.math.Fraction.mulAndCheck(int, fraction.int);\n                final int int = org.apache.commons.lang3.math.Fraction.mulAndCheck(fraction.int, int);\n                return new org.apache.commons.lang3.math.Fraction((isAdd ? org.apache.commons.lang3.math.Fraction.addAndCheck(uvp, upv) : org.apache.commons.lang3.math.Fraction.subAndCheck(uvp, upv)) , org.apache.commons.lang3.math.Fraction.mulPosAndCheck(int, fraction.int));\n            } \n            final java.math.BigInteger java.math.BigInteger = java.math.BigInteger.valueOf(int).multiply(java.math.BigInteger.valueOf(((fraction.int) / d1)));\n            final java.math.BigInteger java.math.BigInteger = java.math.BigInteger.valueOf(fraction.int).multiply(java.math.BigInteger.valueOf(((int) / d1)));\n            final java.math.BigInteger java.math.BigInteger = isAdd ? uvp.add(upv) : uvp.subtract(upv);\n            final int int = t.mod(java.math.BigInteger.valueOf(d1)).intValue();\n            final int int = tmodd1 == 0 ? d1 : org.apache.commons.lang3.math.Fraction.greatestCommonDivisor(tmodd1, d1);\n            final java.math.BigInteger java.math.BigInteger = t.divide(java.math.BigInteger.valueOf(d2));\n            if ((w.bitLength()) > 31) {\n                throw new java.lang.ArithmeticException(\"overflow: numerator too large after multiply\");\n            } \n            return new org.apache.commons.lang3.math.Fraction(w.intValue() , org.apache.commons.lang3.math.Fraction.mulPosAndCheck(((int) / d1), ((fraction.int) / d2)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fraction":"fraction"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1075","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[21,22,23],"tindex":"235c49e8-2ec3-11e6-9ee8-4911dbc50426","method":{"position":"org.apache.commons.lang3.ArrayUtils:402","type":"CtMethodImpl","sourcecode":"public static byte[] clone(final byte[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            return array.clone();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.JavaVersion:132","type":"CtInvocationImpl","sourcecode":"\"0.9\".equals(nom)"},"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,100,101,102,103,104,105,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,142,143,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,155,155,156,156,5,5,157,157,158,158,159,159,160,160,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,168,169,169,170,170,171,171,172,172,173,173,174,174,175,175,176,176,177,177,178,178,179,179,180,180,181,181,182,182,183,183,184,184,185,185,186,186,187,187,188,188,189,189,190,190,191,191,192,192,193,193,194,194,195,195,196,196,197,197,198,198,199,199,200,200,201,201,202,202,203,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347],"tindex":"235c70f9-2ec3-11e6-9ee8-d5699e75336c","method":{"position":"org.apache.commons.lang3.SystemUtils:1344","type":"CtMethodImpl","sourcecode":"private static java.lang.String getSystemProperty(final java.lang.String property) {\n    if (\"0.9\".equals(property)) {\n        {\n            try {\n                return java.lang.System.getProperty(property);\n            } catch (final java.lang.SecurityException ex) {\n                java.lang.System.java.lang.System.java.io.PrintStream.println(((\"Caught a SecurityException reading the system property '\" + property) + \"'; the SystemUtils property value will default to null.\"));\n                return null;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"property"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4250","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))"},"failures":[],"tindex":"235c980a-2ec3-11e6-9ee8-99a1c22c630b","method":{"position":"org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:307","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.concurrent.ConcurrentException getException(final java.lang.String name) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(name)) || (org.apache.commons.lang3.StringUtils.isEmpty(name))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            checkName(name);\n            return java.util.Map<java.lang.String, org.apache.commons.lang3.concurrent.ConcurrentException>.get(name);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name","remove":"name"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:399","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"235c980b-2ec3-11e6-9ee8-0d2753d576b0","method":{"position":"org.apache.commons.lang3.CharSet:246","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj instanceof java.lang.reflect.GenericArrayType) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj == (org.apache.commons.lang3.CharSet.this)) {\n                return true;\n            } \n            if ((obj instanceof org.apache.commons.lang3.CharSet) == false) {\n                return false;\n            } \n            final org.apache.commons.lang3.CharSet org.apache.commons.lang3.CharSet = ((org.apache.commons.lang3.CharSet)(obj));\n            return java.util.Set<org.apache.commons.lang3.CharRange>.equals(other.java.util.Set<org.apache.commons.lang3.CharRange>);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.builder.IDKey:64","type":"CtUnaryOperatorImpl","sourcecode":"!(other instanceof org.apache.commons.lang3.builder.IDKey)"},"failures":[],"tindex":"235cbf1c-2ec3-11e6-9ee8-15504d85010f","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:719","type":"CtMethodImpl","sourcecode":"public static void writeField(final java.lang.Object target, final java.lang.String fieldName, final java.lang.Object value) throws java.lang.IllegalAccessException {\n    if (!(value instanceof org.apache.commons.lang3.builder.IDKey)) {\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            org.apache.commons.lang3.reflect.FieldUtils.writeField(target, fieldName, value, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"value"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:151","type":"CtBinaryOperatorImpl","sourcecode":"methodName != null"},"failures":[348,330,349,350,332,333],"tindex":"235cbf1d-2ec3-11e6-9ee8-d5f7e67de2f7","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:328","type":"CtMethodImpl","sourcecode":"private int readArgumentIndex(final java.lang.String pattern, final java.text.ParsePosition pos) {\n    if (pattern != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = pos.getIndex();\n            seekNonWs(pattern, pos);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            boolean boolean = false;\n            for ( ; (!error) && ((pos.getIndex()) < (pattern.length())) ; next(pos)) {\n                char char = pattern.charAt(pos.getIndex());\n                if (java.lang.Character.isWhitespace(c)) {\n                    seekNonWs(pattern, pos);\n                    c = pattern.charAt(pos.getIndex());\n                    if ((c != (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char)) && (c != (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char))) {\n                        error = true;\n                        continue;\n                    } \n                } \n                if (((c == (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char)) || (c == (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char))) && ((result.length()) > 0)) {\n                    try {\n                        return java.lang.Integer.parseInt(result.toString());\n                    } catch (final java.lang.NumberFormatException e) {\n                    }\n                } \n                error = !(java.lang.Character.isDigit(c));\n                result.append(c);\n            }\n            if (error) {\n                throw new java.lang.IllegalArgumentException((((\"Invalid format argument index at position \" + start) + \": \") + (pattern.substring(start, pos.getIndex()))));\n            } \n            throw new java.lang.IllegalArgumentException((\"Unterminated format element at position \" + start));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"methodName":"pattern"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MemberUtils:170","type":"CtUnaryOperatorImpl","sourcecode":"!(cls.isPrimitive())"},"failures":[],"tindex":"235ce62e-2ec3-11e6-9ee8-15ca1b992e8a","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:196","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Field[] getAllFields(java.lang.Class<?> cls) {\n    if (!(cls.isPrimitive())) {\n        {\n            final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = org.apache.commons.lang3.reflect.FieldUtils.getAllFieldsList(cls);\n            return allFieldsList.toArray(new java.lang.reflect.Field[allFieldsList.size()]);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2788","type":"CtBinaryOperatorImpl","sourcecode":"startIndex > endIndex"},"failures":[],"tindex":"235ce62f-2ec3-11e6-9ee8-09ea974db599","method":{"position":"org.apache.commons.lang3.time.DateUtils:1781","type":"CtMethodImpl","sourcecode":"public static int truncatedCompareTo(final java.util.Date date1, final java.util.Date date2, final int field) {\n    if (field > field) {\n        {\n            final java.util.Date java.util.Date = org.apache.commons.lang3.time.DateUtils.truncate(date1, field);\n            final java.util.Date java.util.Date = org.apache.commons.lang3.time.DateUtils.truncate(date2, field);\n            return truncatedDate1.compareTo(truncatedDate2);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"field","endIndex":"field"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:6046","type":"CtBinaryOperatorImpl","sourcecode":"end > 0"},"failures":[351,19,352,20,353,354,355,356,357,358],"tindex":"235d0d40-2ec3-11e6-9ee8-33a9a5538e2d","method":{"position":"org.apache.commons.lang3.math.Fraction:576","type":"CtMethodImpl","sourcecode":"private static int greatestCommonDivisor(int u, int v) {\n    if (v > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((u == 0) || (v == 0)) {\n                if ((u == (java.lang.Integer.java.lang.Integer.int)) || (v == (java.lang.Integer.java.lang.Integer.int))) {\n                    throw new java.lang.ArithmeticException(\"overflow: gcd is 2^31\");\n                } \n                return (java.lang.Math.abs(u)) + (java.lang.Math.abs(v));\n            } \n            if (((java.lang.Math.abs(u)) == 1) || ((java.lang.Math.abs(v)) == 1)) {\n                return 1;\n            } \n            if (u > 0) {\n                u = -u;\n            } \n            if (v > 0) {\n                v = -v;\n            } \n            int int = 0;\n            while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {\n                u /= 2;\n                v /= 2;\n                k++;\n            }\n            if (k == 31) {\n                throw new java.lang.ArithmeticException(\"overflow: gcd is 2^31\");\n            } \n            int int = (u & 1) == 1 ? v : -(u / 2);\n            do {\n                while ((t & 1) == 0) {\n                    t /= 2;\n                }\n                if (t > 0) {\n                    u = -t;\n                } else {\n                    v = t;\n                }\n                t = (v - u) / 2;\n            } while (t != 0 );\n            return (-u) * (1 << k);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"end":"v"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:739","type":"CtBinaryOperatorImpl","sourcecode":"(lhs == null) || (rhs == null)"},"failures":[359,360,361],"tindex":"235d0d41-2ec3-11e6-9ee8-0598296f84ee","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:767","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final short[] lhs, final short[] rhs) {\n    if ((lhs == null) || (rhs == null)) {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"lhs","rhs":"rhs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5909","type":"CtBinaryOperatorImpl","sourcecode":"found < 0"},"failures":[362],"tindex":"235d3452-2ec3-11e6-9ee8-af41095ef21f","method":{"position":"org.apache.commons.lang3.StringUtils:1262","type":"CtMethodImpl","sourcecode":"public static int lastOrdinalIndexOf(final java.lang.CharSequence str, final java.lang.CharSequence searchStr, final int ordinal) {\n    if (ordinal < 0) {\n        {\n            return org.apache.commons.lang3.StringUtils.ordinalIndexOf(str, searchStr, ordinal, true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"found":"ordinal"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:672","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[363],"tindex":"235d3453-2ec3-11e6-9ee8-ff3c3d09b623","method":{"position":"org.apache.commons.lang3.math.NumberUtils:221","type":"CtMethodImpl","sourcecode":"public static float toFloat(final java.lang.String str, final float defaultValue) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return defaultValue;\n            } \n            try {\n                return java.lang.Float.parseFloat(str);\n            } catch (final java.lang.NumberFormatException nfe) {\n                return defaultValue;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"newLineStr == null"},"failures":[364],"tindex":"235d3454-2ec3-11e6-9ee8-838e8feb8f64","method":{"position":"org.apache.commons.lang3.Validate:1010","type":"CtMethodImpl","sourcecode":"public static void inclusiveBetween(double start, double end, double value, java.lang.String message) {\n    if (message == null) {\n        {\n            if ((value < start) || (value > end)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message));\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"newLineStr":"message"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:382","type":"CtInvocationImpl","sourcecode":"parsePattern.endsWith(\"ZZ\")"},"failures":[365],"tindex":"235d5b65-2ec3-11e6-9ee8-67d55cb7c6b3","method":{"position":"org.apache.commons.lang3.StringUtils:3175","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] splitByCharacterType(final java.lang.String str) {\n    if (str.endsWith(\"ZZ\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.splitByCharacterType(str, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parsePattern":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:578","type":"CtBinaryOperatorImpl","sourcecode":"(u == 0) || (v == 0)"},"failures":[366],"tindex":"235d5b66-2ec3-11e6-9ee8-d5ec5ed961c6","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:712","type":"CtMethodImpl","sourcecode":"public boolean replaceIn(final org.apache.commons.lang3.text.StrBuilder source, final int offset, final int length) {\n    if ((offset == 0) || (offset == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return false;\n            } \n            return substitute(source, offset, length);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"u":"offset","v":"offset"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5122","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[367],"tindex":"235d5b67-2ec3-11e6-9ee8-0b42ce546b48","method":{"position":"org.apache.commons.lang3.math.NumberUtils:725","type":"CtMethodImpl","sourcecode":"public static java.math.BigInteger createBigInteger(final java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            int int = 0;\n            int int = 10;\n            boolean boolean = false;\n            if (str.startsWith(\"-\")) {\n                negate = true;\n                pos = 1;\n            } \n            if ((str.startsWith(\"0x\", pos)) || (str.startsWith(\"0x\", pos))) {\n                radix = 16;\n                pos += 2;\n            } else if (str.startsWith(\"#\", pos)) {\n                radix = 16;\n                pos++;\n            } else if ((str.startsWith(\"0\", pos)) && ((str.length()) > (pos + 1))) {\n                radix = 8;\n                pos++;\n            } \n            final java.math.BigInteger java.math.BigInteger = new java.math.BigInteger(str.substring(pos) , radix);\n            return negate ? value.negate() : value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:144","type":"CtBinaryOperatorImpl","sourcecode":"((ex != null) && (!(ex instanceof java.lang.RuntimeException))) && (!(ex instanceof java.lang.Error))"},"failures":[],"tindex":"235d8278-2ec3-11e6-9ee8-77850c2947ae","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:640","type":"CtMethodImpl","sourcecode":"static java.util.List<java.lang.String> getStackFrameList(final java.lang.Throwable t) {\n    if (((t != null) && (!(ex instanceof java.lang.RuntimeException))) && (!(ex instanceof java.lang.Error))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.String java.lang.String = org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace(t);\n            final java.lang.String java.lang.String = org.apache.commons.lang3.SystemUtils.org.apache.commons.lang3.SystemUtils.java.lang.String;\n            final java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(stackTrace , linebreak);\n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            boolean boolean = false;\n            while (frames.hasMoreTokens()) {\n                final java.lang.String java.lang.String = frames.nextToken();\n                final int int = token.indexOf(\"at\");\n                if ((at != (-1)) && (token.substring(0, at).trim().isEmpty())) {\n                    traceStarted = true;\n                    list.add(token);\n                } else if (traceStarted) {\n                    break;\n                } \n            }\n            return list;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ex":"t"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3478","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"235d8279-2ec3-11e6-9ee8-89f270ac848d","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:153","type":"CtMethodImpl","sourcecode":"static boolean isRegistered(final java.lang.Object lhs, final java.lang.Object rhs) {\n    if (lhs == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>> java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>> = org.apache.commons.lang3.builder.EqualsBuilder.getRegistry();\n            final org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> = org.apache.commons.lang3.builder.EqualsBuilder.getRegisterPair(lhs, rhs);\n            final org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> = org.apache.commons.lang3.tuple.Pair.of(pair.getLeft(), pair.getRight());\n            return (registry != null) && ((registry.contains(pair)) || (registry.contains(swappedPair)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"lhs"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:61","type":"CtBinaryOperatorImpl","sourcecode":"(ex == null) || ((ex.getCause()) == null)"},"failures":[],"tindex":"235d827a-2ec3-11e6-9ee8-2570bb03c676","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:671","type":"CtMethodImpl","sourcecode":"public static java.lang.String getMessage(final java.lang.Throwable th) {\n    if ((th == null) || ((ex.getCause()) == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (th == null) {\n                return \"\";\n            } \n            final java.lang.String java.lang.String = org.apache.commons.lang3.ClassUtils.getShortClassName(th, null);\n            final java.lang.String java.lang.String = th.getMessage();\n            return (clsName + \": \") + (org.apache.commons.lang3.StringUtils.defaultString(msg));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ex":"th"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSequenceUtils:121","type":"CtBinaryOperatorImpl","sourcecode":"start < 0"},"failures":[368,369,370,248,249,255,256,257,371,258,259,260,261,262,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393],"tindex":"235da98b-2ec3-11e6-9ee8-6516cf7df2b6","method":{"position":"org.apache.commons.lang3.time.DateUtils:957","type":"CtMethodImpl","sourcecode":"private static void modify(final java.util.Calendar val, final int field, final int modType) {\n    if (field < 0) {\n        {\n            if ((val.get(java.util.Calendar.java.util.Calendar.int)) > 280000000) {\n                throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n            } \n            if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                return ;\n            } \n            final java.util.Date java.util.Date = val.getTime();\n            long long = date.getTime();\n            boolean boolean = false;\n            final int int = val.get(java.util.Calendar.java.util.Calendar.int);\n            if (((org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int) == modType) || (millisecs < 500)) {\n                time = time - millisecs;\n            } \n            if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                done = true;\n            } \n            final int int = val.get(java.util.Calendar.java.util.Calendar.int);\n            if ((!done) && (((org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int) == modType) || (seconds < 30))) {\n                time = time - (seconds * 1000L);\n            } \n            if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                done = true;\n            } \n            final int int = val.get(java.util.Calendar.java.util.Calendar.int);\n            if ((!done) && (((org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int) == modType) || (minutes < 30))) {\n                time = time - (minutes * 60000L);\n            } \n            if ((date.getTime()) != time) {\n                date.setTime(time);\n                val.setTime(date);\n            } \n            boolean boolean = false;\n            for (final int[] int[] : org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int[][]) {\n                for (final int int : aField) {\n                    if (element == field) {\n                        if ((modType == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) || ((modType == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) && roundUp)) {\n                            if (field == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) {\n                                if ((val.get(java.util.Calendar.java.util.Calendar.int)) == 1) {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 15);\n                                } else {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, (-15));\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 1);\n                                }\n                            } else if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                                if ((val.get(java.util.Calendar.java.util.Calendar.int)) == 0) {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 12);\n                                } else {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, (-12));\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 1);\n                                }\n                            } else {\n                                val.add(aField[0], 1);\n                            }\n                        } \n                        return ;\n                    } \n                }\n                int int = 0;\n                boolean boolean = false;\n                switch (field) {\n                    case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                        if ((aField[0]) == (java.util.Calendar.java.util.Calendar.int)) {\n                            offset = (val.get(java.util.Calendar.java.util.Calendar.int)) - 1;\n                            if (offset >= 15) {\n                                offset -= 15;\n                            } \n                            roundUp = offset > 7;\n                            offsetSet = true;\n                        } \n                        break;\n                    case java.util.Calendar.java.util.Calendar.int :\n                        if ((aField[0]) == (java.util.Calendar.java.util.Calendar.int)) {\n                            offset = val.get(java.util.Calendar.java.util.Calendar.int);\n                            if (offset >= 12) {\n                                offset -= 12;\n                            } \n                            roundUp = offset >= 6;\n                            offsetSet = true;\n                        } \n                        break;\n                    default :\n                        break;\n                }\n                if (!offsetSet) {\n                    final int int = val.getActualMinimum(aField[0]);\n                    final int int = val.getActualMaximum(aField[0]);\n                    offset = (val.get(aField[0])) - min;\n                    roundUp = offset > ((max - min) / 2);\n                } \n                if (offset != 0) {\n                    val.set(aField[0], ((val.get(aField[0])) - offset));\n                } \n            }\n            throw new java.lang.IllegalArgumentException(((\"The field \" + field) + \" is not supported\"));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"field"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:306","type":"CtBinaryOperatorImpl","sourcecode":"((className.charAt(0)) == 'L') && ((className.charAt(((className.length()) - 1))) == ';')"},"failures":[],"tindex":"235dd09c-2ec3-11e6-9ee8-a33736f770cf","method":{"position":"org.apache.commons.lang3.StringUtils:5769","type":"CtMethodImpl","sourcecode":"public static java.lang.String swapCase(final java.lang.String str) {\n    if (((str.charAt(0)) == 'L') && ((className.charAt(((className.length()) - 1))) == ';')) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                return str;\n            } \n            final char[] char[] = str.toCharArray();\n            for (int int = 0 ; i < (buffer.int) ; i++) {\n                final char char = buffer[i];\n                if (java.lang.Character.isUpperCase(ch)) {\n                    buffer[i] = java.lang.Character.toLowerCase(ch);\n                } else if (java.lang.Character.isTitleCase(ch)) {\n                    buffer[i] = java.lang.Character.toLowerCase(ch);\n                } else if (java.lang.Character.isLowerCase(ch)) {\n                    buffer[i] = java.lang.Character.toUpperCase(ch);\n                } \n            }\n            return new java.lang.String(buffer);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"str"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1425","type":"CtBinaryOperatorImpl","sourcecode":"(chars[i]) == '.'"},"failures":[279,321],"tindex":"235df7ad-2ec3-11e6-9ee8-e507aae5b57c","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1521","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, final char[] chars) {\n    if ((chars[index]) == '.') {\n        {\n            validateIndex(index);\n            if (chars == null) {\n                return insert(index, java.lang.String);\n            } \n            final int int = chars.int;\n            if (len > 0) {\n                ensureCapacity(((int) + len));\n                java.lang.System.arraycopy(char[], index, char[], (index + len), ((int) - index));\n                java.lang.System.arraycopy(chars, 0, char[], index, len);\n                int += len;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"index","chars":"chars"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3852","type":"CtBinaryOperatorImpl","sourcecode":"array2 == null"},"failures":[394],"tindex":"235df7ae-2ec3-11e6-9ee8-53f5785c3b09","method":{"position":"org.apache.commons.lang3.ArrayUtils:1281","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final short[] array1, final short[] array2) {\n    if (array1 == null) {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array2":"array1"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.lang3.concurrent.ConcurrentException","condition":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:244","type":"CtBinaryOperatorImpl","sourcecode":"map == null"},"failures":[395],"tindex":"235e1ebf-2ec3-11e6-9ee8-51f6ead26665","method":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:272","type":"CtMethodImpl","sourcecode":"public static <K, V>V createIfAbsent(final java.util.concurrent.ConcurrentMap<K, V> map, final K key, final org.apache.commons.lang3.concurrent.ConcurrentInitializer<V> init) throws org.apache.commons.lang3.concurrent.ConcurrentException {\n    if (map == null) {\n        throw new org.apache.commons.lang3.concurrent.ConcurrentException();\n    } else {\n        {\n            if ((map == null) || (init == null)) {\n                return null;\n            } \n            final V V = map.get(key);\n            if (value == null) {\n                return org.apache.commons.lang3.concurrent.ConcurrentUtils.putIfAbsent(map, key, init.get());\n            } \n            return value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:592","type":"CtBinaryOperatorImpl","sourcecode":"u > 0"},"failures":[396],"tindex":"235e1ec0-2ec3-11e6-9ee8-e766c10e1e8b","method":{"position":"org.apache.commons.lang3.StringUtils:7086","type":"CtMethodImpl","sourcecode":"private static java.lang.String getSetOfMatchingCharacterWithin(final java.lang.CharSequence first, final java.lang.CharSequence second, final int limit) {\n    if (limit > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(second);\n            for (int int = 0 ; i < (first.length()) ; i++) {\n                final char char = first.charAt(i);\n                boolean boolean = false;\n                for (int int = java.lang.Math.max(0, (i - limit)) ; (!found) && (j < (java.lang.Math.min((i + limit), second.length()))) ; j++) {\n                    if ((copy.charAt(j)) == ch) {\n                        found = true;\n                        common.append(ch);\n                        copy.setCharAt(j, '*');\n                    } \n                }\n            }\n            return common.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"u":"limit"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4696","type":"CtBinaryOperatorImpl","sourcecode":"timeToLive < 0"},"failures":[],"tindex":"235e1ec1-2ec3-11e6-9ee8-c1ab57f113bc","method":{"position":"org.apache.commons.lang3.time.DateUtils:1667","type":"CtMethodImpl","sourcecode":"private static long getFragment(final java.util.Calendar calendar, final int fragment, final java.util.concurrent.TimeUnit unit) {\n    if (fragment < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (calendar == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            long long = 0;\n            int int = unit == (java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit) ? 0 : 1;\n            switch (fragment) {\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(((calendar.get(java.util.Calendar.java.util.Calendar.int)) - offset), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                    break;\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(((calendar.get(java.util.Calendar.java.util.Calendar.int)) - offset), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                    break;\n                default :\n                    break;\n            }\n            switch (fragment) {\n                case java.util.Calendar.java.util.Calendar.int :\n                case java.util.Calendar.java.util.Calendar.int :\n                case java.util.Calendar.java.util.Calendar.int :\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(calendar.get(java.util.Calendar.java.util.Calendar.int), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(calendar.get(java.util.Calendar.java.util.Calendar.int), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(calendar.get(java.util.Calendar.java.util.Calendar.int), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(calendar.get(java.util.Calendar.java.util.Calendar.int), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                    break;\n                case java.util.Calendar.java.util.Calendar.int :\n                    break;\n                default :\n                    throw new java.lang.IllegalArgumentException(((\"The fragment \" + fragment) + \" is not supported\"));\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"timeToLive":"fragment"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:505","type":"CtBinaryOperatorImpl","sourcecode":"bool == null"},"failures":[397],"tindex":"235e45d2-2ec3-11e6-9ee8-b78b69f84e00","method":{"position":"org.apache.commons.lang3.BooleanUtils:792","type":"CtMethodImpl","sourcecode":"public static java.lang.String toStringYesNo(final java.lang.Boolean bool) {\n    if (bool == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.BooleanUtils.toString(bool, \"yes\", \"no\", null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"bool"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.CharSequenceTranslator:86","type":"CtBinaryOperatorImpl","sourcecode":"consumed == 0"},"failures":[398,399],"tindex":"235e6ce3-2ec3-11e6-9ee8-8dd67c4c6056","method":{"position":"org.apache.commons.lang3.ArrayUtils:4872","type":"CtMethodImpl","sourcecode":"public static double[] remove(final double[] array, final int index) {\n    if (index == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((double[])(org.apache.commons.lang3.ArrayUtils.remove(((java.lang.Object)(array)), index)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"consumed":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1499","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[400],"tindex":"235e6ce4-2ec3-11e6-9ee8-4b45f60a1660","method":{"position":"org.apache.commons.lang3.StringUtils:6167","type":"CtMethodImpl","sourcecode":"public static boolean isAllUpperCase(final java.lang.CharSequence cs) {\n    if (cs != null) {\n        {\n            if ((cs == null) || (org.apache.commons.lang3.StringUtils.isEmpty(cs))) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if ((java.lang.Character.isUpperCase(cs.charAt(i))) == false) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"cs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1262","type":"CtBinaryOperatorImpl","sourcecode":"c > a"},"failures":[401,402,403,404,204,205,206,207,209,210,212,213,217,218,220,221,222,224,225,226,229,405,14],"tindex":"235e6ce5-2ec3-11e6-9ee8-a50d38368489","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:566","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final byte lhs, final byte rhs) {\n    if (lhs > rhs) {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            boolean = lhs == rhs;\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"rhs","c":"lhs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:874","type":"CtBinaryOperatorImpl","sourcecode":"startIndexInclusive < 0"},"failures":[406,407,408],"tindex":"235e93f6-2ec3-11e6-9ee8-55af5256899f","method":{"position":"org.apache.commons.lang3.text.translate.NumericEntityEscaper:95","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.translate.NumericEntityEscaper outsideOf(final int codepointLow, final int codepointHigh) {\n    if (codepointLow < 0) {\n        {\n            return new org.apache.commons.lang3.text.translate.NumericEntityEscaper(codepointLow , codepointHigh , false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndexInclusive":"codepointLow"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSequenceUtils:200","type":"CtBinaryOperatorImpl","sourcecode":"c1 == c2"},"failures":[409],"tindex":"235e93f7-2ec3-11e6-9ee8-63bea5ddf515","method":{"position":"org.apache.commons.lang3.text.translate.OctalUnescaper:77","type":"CtMethodImpl","sourcecode":"private boolean isZeroToThree(char ch) {\n    if (ch == ch) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (ch >= '0') && (ch <= '3');\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c1":"ch","c2":"ch"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:978","type":"CtBinaryOperatorImpl","sourcecode":"rhs == null"},"failures":[410],"tindex":"235e93f8-2ec3-11e6-9ee8-49bfa98a27a0","method":{"position":"org.apache.commons.lang3.ArrayUtils:1371","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {\n    if (array1 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rhs":"array1"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:795","type":"CtBinaryOperatorImpl","sourcecode":"cs1 == cs2"},"failures":[348,411,412],"tindex":"235e93f9-2ec3-11e6-9ee8-639a8645da91","method":{"position":"org.apache.commons.lang3.ObjectUtils:205","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static int hashCode(final java.lang.Object obj) {\n    if (obj == obj) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return obj == null ? 0 : obj.hashCode();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs1":"obj","cs2":"obj"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":54,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
{"failureDictionary":{"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":210,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":219,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties":419,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":204,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray":304,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatUTC":28,"org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP":29,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_charArray":367,"org.apache.commons.lang3.time.FastDatePrinterTest.testMilleniumBug":36,"org.apache.commons.lang3.math.NumberUtilsTest.testToFloatStringF":150,"org.apache.commons.lang3.ArrayUtilsTest.testIsEmptyPrimitives":355,"org.apache.commons.lang3.text.StrTokenizerTest.testReset":366,"org.apache.commons.lang3.time.FastDateParserTest.testLANG_832":121,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testFloatArrayAsObject":353,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":51,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_AD":100,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":184,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":316,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDefaults":144,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":318,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":238,"org.apache.commons.lang3.ArrayUtilsTest.testSameLengthChar":405,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray":303,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":48,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":168,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVEmpty":385,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude":305,"org.apache.commons.lang3.builder.EqualsBuilderTest.testCyclicalObjectReferences":223,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":309,"org.apache.commons.lang3.text.StrLookupTest.testMapLookup":157,"org.apache.commons.lang3.builder.CompareToBuilderTest.testCharArray":416,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_BC":129,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":196,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":311,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_String":379,"org.apache.commons.lang3.RandomStringUtilsTest.testExceptions":420,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":200,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_BC":101,"org.apache.commons.lang3.StringUtilsTest.testChomp":325,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char":383,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testTimeZoneMatches":74,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeEcmaScript":334,"org.apache.commons.lang3.text.StrTokenizerTest.testListArray":370,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testTimeZoneMatches":105,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementFloatArray":417,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":280,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":203,"org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected":135,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_AD":128,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":164,"org.apache.commons.lang3.math.FractionTest.testDivide":346,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO":31,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":185,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":291,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":54,"org.apache.commons.lang3.time.FastDateParserTest.testParseNumerics":117,"org.apache.commons.lang3.CharEncodingTest.testNotSupported":160,"org.apache.commons.lang3.time.FastDateParserTest.testPatternMatches":134,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testBlank":245,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO":76,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":45,"org.apache.commons.lang3.time.FastDateParserTest.testLocaleMatches":110,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testToStringContainsName":72,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":0,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull":301,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassOutputChange":369,"org.apache.commons.lang3.time.FastDateParserTest.testShortDateStyleWithLocales":108,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":288,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":59,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":242,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear":136,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringString":68,"org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Boolean":330,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_LongNoEra_AD":126,"org.apache.commons.lang3.time.DateUtilsTest.testLang530":33,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":55,"org.apache.commons.lang3.time.FastDateParserTest.testDayOf":111,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomAlphaNumeric":421,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseNumerics":89,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":287,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":272,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementShortArray":354,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang538":91,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":189,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":297,"org.apache.commons.lang3.time.DateFormatUtilsTest.testConstructor":78,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":211,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":256,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson":250,"org.apache.commons.lang3.math.FractionTest.testReducedFactory_int_int":342,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":275,"org.apache.commons.lang3.text.StrTokenizerTest.testChaining":403,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":42,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":53,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang303":90,"org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer":356,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":315,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testPatternMatches":75,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":244,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":239,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyBooleanNull":351,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":15,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":266,"org.apache.commons.lang3.time.FastDateParserTest.testParseLongShort":125,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testPerson":241,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_BC":99,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":179,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":271,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang303":25,"org.apache.commons.lang3.time.DateUtilsTest.testRoundLang346":406,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":286,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLocaleMatches":69,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testBlank":252,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":285,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO":77,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection":170,"org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntChar":153,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNull":382,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":363,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":274,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_AD":98,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang538":26,"org.apache.commons.lang3.StringUtilsTest.testRepeat_StringStringInt":324,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":195,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.test_Equality_Hash":94,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":57,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":247,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":261,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":296,"org.apache.commons.lang3.text.WordUtilsTest.testUncapitalize_String":418,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testBlank":294,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int":8,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":173,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":201,"org.apache.commons.lang3.StringUtilsTest.testRemoveEnd":326,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance":140,"org.apache.commons.lang3.math.FractionTest.testAdd":343,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":41,"org.apache.commons.lang3.text.StrTokenizerTest.testGetContent":399,"org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives":14,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testPatternMatches":106,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":198,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJava":332,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":209,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":163,"org.apache.commons.lang3.text.StrTokenizerTest.testIteration":364,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetFirstContextValue":18,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset":400,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":180,"org.apache.commons.lang3.text.StrTokenizerTest.testTSVEmpty":380,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":295,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_AD":95,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":46,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvWriter":335,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetMatchingAccessibleMethod":12,"org.apache.commons.lang3.time.FastDateParserTest.testAmPm":113,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":166,"org.apache.commons.lang3.time.FastDateFormatTest.testLang954":138,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang538":39,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_BC":96,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testMilleniumBug":23,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_BC":88,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCodeEx2":338,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCodeEx1":337,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":191,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCodeEx3":339,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray":302,"org.apache.commons.lang3.time.DateUtilsTest.testAddMilliseconds":413,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":320,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1":371,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByteNull":328,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3":373,"org.apache.commons.lang3.time.FastDateParserTest.testEquals":130,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2":372,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5":375,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4":374,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7":377,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":205,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6":376,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":50,"org.apache.commons.lang3.tuple.PairTest.testToStringCustom":20,"org.apache.commons.lang3.BooleanUtilsTest.testAnd_object_nullInput":7,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang645":71,"org.apache.commons.lang3.text.StrLookupTest.testMapLookup_nullMap":156,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance":137,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":162,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":289,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testSpecialCharacters":79,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":213,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParses":103,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":279,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray":386,"org.apache.commons.lang3.time.DateUtilsTest.testTruncate":158,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson":299,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone_Locale":139,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testDayOf":83,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils":423,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testMilleniumBug":81,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testSetContextValue":17,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":267,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":260,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO":32,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testQuotes":104,"org.apache.commons.lang3.mutable.MutableDoubleTest.testEquals":349,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":215,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson":257,"org.apache.commons.lang3.math.IEEE754rUtilsTest.testLang381":175,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":208,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone":146,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":207,"org.apache.commons.lang3.time.DateUtilsTest.testSetYears":415,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong":253,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":44,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson":312,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":249,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String":142,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testSimpleDate":21,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDifferingStyles":145,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOfIgnoreCase_String":6,"org.apache.commons.lang3.time.FastDateParserTest.testToStringContainsName":120,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testNullArgument":11,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":167,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testFloat":352,"org.apache.commons.lang3.time.DateUtilsTest.testAddMonths":410,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":174,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiBooleanArray":64,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":292,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testCalendarTimezoneRespected":70,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDefaults":149,"org.apache.commons.lang3.time.DateUtilsTest.testSetMonths":411,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":60,"org.apache.commons.lang3.StringUtilsTest.testRightPad_StringInt":152,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":212,"org.apache.commons.lang3.time.FastDateParserTest.testSpecialCharacters":107,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":254,"org.apache.commons.lang3.time.FastDateParserTest.testLowYearPadding":114,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_AD":87,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":293,"org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringString":350,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":190,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":52,"org.apache.commons.lang3.math.FractionTest.testMultiply":347,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang303":38,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":161,"org.apache.commons.lang3.time.FastDateFormatTest.testDateDefaults":143,"org.apache.commons.lang3.time.FastDateParserTest.testMilleniumBug":109,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":165,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOfIgnoreCase_StringInt":5,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":178,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char_char":365,"org.apache.commons.lang3.time.FastDatePrinterTest.testSimpleDate":34,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDateDefaults":141,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testEqualsIgnoreCase":67,"org.apache.commons.lang3.builder.CompareToBuilderTest.testFloatArray":159,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":49,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":217,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":259,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testFormat":27,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testBlank":307,"org.apache.commons.lang3.CharSequenceUtilsTest.testSubSequence":4,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionArrays":221,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBetween_StringString":404,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseLongShort":97,"org.apache.commons.lang3.time.FastDateParserTest.testParseZone":112,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":182,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":218,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":269,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic1":394,"org.apache.commons.lang3.time.FastDateParserTest.testLang538":119,"org.apache.commons.lang3.time.FastDateParserTest.testLang303":118,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":265,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic2":395,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic3":396,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic4":397,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic5":398,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Long_AD":115,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":308,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":216,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":206,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":58,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":193,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":270,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":277,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":319,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals":225,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContains_Char":329,"org.apache.commons.lang3.time.FastDatePrinterTest.testShortDateStyleWithLocales":35,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Boolean":9,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormat":1,"org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_Class":154,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char_char":387,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls":306,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Long_BC":116,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":388,"org.apache.commons.lang3.time.FastDatePrinterTest.testFormat":40,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsExcludeFields":224,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNotSupportedException":378,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":47,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":61,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":282,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseZone":84,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":220,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":192,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":183,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvWriter":336,"org.apache.commons.lang3.math.FractionTest.testReduce":348,"org.apache.commons.lang3.time.FastDatePrinterTest.testLowYearPadding":37,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testToStringContainsName":92,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":317,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testBlank":236,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":310,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":283,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":199,"org.apache.commons.lang3.time.DateUtilsTest.testSetHours":414,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":268,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testBlank":314,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":194,"org.apache.commons.lang3.ObjectUtilsTest.testToString_ObjectString":169,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":290,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":300,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":246,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":202,"org.apache.commons.lang3.time.FastDateParserTest.testTimeZoneMatches":133,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":273,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_BC":124,"org.apache.commons.lang3.builder.CompareToBuilderTest.testBooleanArray":65,"org.apache.commons.lang3.text.StrTokenizerTest.testToString":368,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testShortDateStyleWithLocales":80,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection":171,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":243,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":2,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":240,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHierarchyHashCodeEx1":340,"org.apache.commons.lang3.math.FractionTest.testFactory_double":345,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testFloatArray":3,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_Locale":147,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":181,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testEquals":102,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":357,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance":148,"org.apache.commons.lang3.ArrayUtilsTest.testToString":227,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":255,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHierarchyHashCodeEx2":341,"org.apache.commons.lang3.CharSetTest.testGetInstance_Stringarray":63,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed1":401,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed2":402,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":262,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO":30,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_LongNoEra_BC":127,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLong":237,"org.apache.commons.lang3.builder.CompareToBuilderTest.testBooleanArrayHiddenByObject":66,"org.apache.commons.lang3.text.StrLookupTest.testNoneLookup":155,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testAmPm":85,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty1":360,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty2":361,"org.apache.commons.lang3.math.NumberUtilsTest.testToFloatString":151,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":284,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_AD":123,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":251,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeJava":331,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":172,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":197,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":186,"org.apache.commons.lang3.text.StrTokenizerTest.test8":235,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":56,"org.apache.commons.lang3.time.DateUtilsTest.testRound":407,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLowYearPadding":86,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLANG_832":93,"org.apache.commons.lang3.text.StrTokenizerTest.test5":232,"org.apache.commons.lang3.text.StrTokenizerTest.test4":231,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":187,"org.apache.commons.lang3.text.StrTokenizerTest.test7":234,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":188,"org.apache.commons.lang3.text.StrTokenizerTest.test6":233,"org.apache.commons.lang3.text.StrTokenizerTest.test1":228,"org.apache.commons.lang3.text.StrTokenizerTest.test3":230,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String":381,"org.apache.commons.lang3.time.FastDateParserTest.test_Equality_Hash":122,"org.apache.commons.lang3.text.StrTokenizerTest.test2":229,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":276,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":313,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":258,"org.apache.commons.lang3.StringUtilsTest.testCaseFunctions":13,"org.apache.commons.lang3.time.FastDateFormatTest.testParseSync":62,"org.apache.commons.lang3.time.DateUtilsTest.testSetDays":412,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim1":358,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim2":359,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJson":333,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEquals":222,"org.apache.commons.lang3.math.FractionTest.testSubtract":327,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":264,"org.apache.commons.lang3.text.WordUtilsTest.testCapitalizeFullyWithDelimiters_String":323,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetContextValues":19,"org.apache.commons.lang3.time.FastDateParserTest.testQuotes":132,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomAlphabetic":422,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testAddContextValue":16,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testEquals":73,"org.apache.commons.lang3.math.FractionTest.testPow":344,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":248,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayEnd":321,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char":362,"org.apache.commons.lang3.time.FastDateParserTest.testParses":131,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":263,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1":393,"org.apache.commons.lang3.time.DateUtilsTest.testTruncateLang59":408,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLowYearPadding":24,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassInputChange":384,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed3":391,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed2":390,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4":392,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed1":389,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":298,"org.apache.commons.lang3.text.WordUtilsTest.testSwapCase_String":176,"org.apache.commons.lang3.text.WordUtilsTest.testCapitalizeFully_String":322,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":214,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":281,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":43,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeConstructor":10,"org.apache.commons.lang3.AnnotationUtilsTest.testToString":226,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocaleMatches":82,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testShortDateStyleWithLocales":22,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":278,"org.apache.commons.lang3.time.DateUtilsTest.testSetSeconds":409,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":177},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:194","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[0,1],"tindex":"430d565f-3e72-11e6-8051-1d6d5c874866","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:187","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Date date, final java.lang.String pattern) {\n    if (pattern == null) {\n        {\n            return org.apache.commons.lang3.time.DateFormatUtils.format(date, pattern, null, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5782","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLowerCase(ch)"},"failures":[],"tindex":"430e19b0-3e72-11e6-8051-97b9df22462c","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2413","type":"CtMethodImpl","sourcecode":"public int lastIndexOf(final char ch) {\n    if (java.lang.Character.isLowerCase(ch)) {\n        {\n            return lastIndexOf(ch, ((int) - 1));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2335","type":"CtBinaryOperatorImpl","sourcecode":"separator == null"},"failures":[2],"tindex":"430e40c1-3e72-11e6-8051-31e02a8b53f6","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1337","type":"CtMethodImpl","sourcecode":"public static boolean isNumber(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                return false;\n            } \n            final char[] char[] = str.toCharArray();\n            int int = chars.int;\n            boolean boolean = false;\n            boolean boolean = false;\n            boolean boolean = false;\n            boolean boolean = false;\n            final int int = (chars[0]) == '-' ? 1 : 0;\n            if ((sz > (start + 1)) && ((chars[start]) == '0')) {\n                if (((chars[(start + 1)]) == 'x') || ((chars[(start + 1)]) == 'X')) {\n                    int int = start + 2;\n                    if (i == sz) {\n                        return false;\n                    } \n                    for ( ; i < (chars.int) ; i++) {\n                        if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                } else if (java.lang.Character.isDigit(chars[(start + 1)])) {\n                    int int = start + 1;\n                    for ( ; i < (chars.int) ; i++) {\n                        if (((chars[i]) < '0') || ((chars[i]) > '7')) {\n                            return false;\n                        } \n                    }\n                    return true;\n                } \n            } \n            sz--;\n            int int = start;\n            while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {\n                if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {\n                    foundDigit = true;\n                    allowSigns = false;\n                } else if ((chars[i]) == '.') {\n                    if (hasDecPoint || hasExp) {\n                        return false;\n                    } \n                    hasDecPoint = true;\n                } else if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {\n                    if (hasExp) {\n                        return false;\n                    } \n                    if (!foundDigit) {\n                        return false;\n                    } \n                    hasExp = true;\n                    allowSigns = true;\n                } else if (((chars[i]) == '+') || ((chars[i]) == '-')) {\n                    if (!allowSigns) {\n                        return false;\n                    } \n                    allowSigns = false;\n                    foundDigit = false;\n                } else {\n                    return false;\n                }\n                i++;\n            }\n            if (i < (chars.int)) {\n                if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {\n                    return true;\n                } \n                if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {\n                    return false;\n                } \n                if ((chars[i]) == '.') {\n                    if (hasDecPoint || hasExp) {\n                        return false;\n                    } \n                    return foundDigit;\n                } \n                if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {\n                    return foundDigit;\n                } \n                if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {\n                    return (foundDigit && (!hasExp)) && (!hasDecPoint);\n                } \n                return false;\n            } \n            return (!allowSigns) && foundDigit;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3496","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[3],"tindex":"430e8ee2-3e72-11e6-8051-63e9470ede65","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:723","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final float[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                int = (int) * (int);\n            } else {\n                for (final float float : array) {\n                    append(element);\n                }\n            }\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7203","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || (prefix == null)"},"failures":[4],"tindex":"430eb5f3-3e72-11e6-8051-395b69bec6d4","method":{"position":"org.apache.commons.lang3.CharSequenceUtils:55","type":"CtMethodImpl","sourcecode":"public static java.lang.CharSequence subSequence(final java.lang.CharSequence cs, final int start) {\n    if ((cs == null) || (cs == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return cs == null ? null : cs.subSequence(start, cs.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"cs","prefix":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:534","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"430eb5f4-3e72-11e6-8051-59c0217aaa13","method":{"position":"org.apache.commons.lang3.Validate:1104","type":"CtMethodImpl","sourcecode":"public static void exclusiveBetween(long start, long end, long value, java.lang.String message) {\n    if (message == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value <= start) || (value >= end)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1792","type":"CtBinaryOperatorImpl","sourcecode":"arraySeparator == null"},"failures":[],"tindex":"430edd05-3e72-11e6-8051-edf04a242578","method":{"position":"org.apache.commons.lang3.CharSequenceUtils:116","type":"CtMethodImpl","sourcecode":"static int lastIndexOf(final java.lang.CharSequence cs, final int searchChar, int start) {\n    if (cs == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cs instanceof java.lang.String) {\n                return ((java.lang.String)(cs)).lastIndexOf(searchChar, start);\n            } else {\n                final int int = cs.length();\n                if (start < 0) {\n                    return -1;\n                } \n                if (start >= sz) {\n                    start = sz - 1;\n                } \n                for (int int = start ; i >= 0 ; --i) {\n                    if ((cs.charAt(i)) == searchChar) {\n                        return i;\n                    } \n                }\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arraySeparator":"cs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3274","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"430f0416-3e72-11e6-8051-77ed1185e758","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:237","type":"CtMethodImpl","sourcecode":"public static int reflectionHashCode(final int initialNonZeroOddNumber, final int multiplierNonZeroOddNumber, final java.lang.Object object) {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.HashCodeBuilder.reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1983","type":"CtBinaryOperatorImpl","sourcecode":"tmp < ret"},"failures":[5,6],"tindex":"430f0417-3e72-11e6-8051-d312ca802600","method":{"position":"org.apache.commons.lang3.StringUtils:1371","type":"CtMethodImpl","sourcecode":"public static int lastIndexOfIgnoreCase(final java.lang.CharSequence str, final java.lang.CharSequence searchStr, int startPos) {\n    if (startPos < startPos) {\n        {\n            if ((str == null) || (searchStr == null)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            if (startPos > ((str.length()) - (searchStr.length()))) {\n                startPos = (str.length()) - (searchStr.length());\n            } \n            if (startPos < 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            if ((searchStr.length()) == 0) {\n                return startPos;\n            } \n            for (int int = startPos ; i >= 0 ; i--) {\n                if (org.apache.commons.lang3.CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ret":"startPos","tmp":"startPos"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:569","type":"CtBinaryOperatorImpl","sourcecode":"(comparison) != 0"},"failures":[],"tindex":"430f2b28-3e72-11e6-8051-9fe398af4f97","method":{"position":"org.apache.commons.lang3.time.DateUtils:1726","type":"CtMethodImpl","sourcecode":"public static boolean truncatedEquals(final java.util.Calendar cal1, final java.util.Calendar cal2, final int field) {\n    if (field != 0) {\n        {\n            return (org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(cal1, cal2, field)) == 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3456","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[7],"tindex":"430f5239-3e72-11e6-8051-33e6ca2e302d","method":{"position":"org.apache.commons.lang3.BooleanUtils:939","type":"CtMethodImpl","sourcecode":"public static java.lang.Boolean and(final java.lang.Boolean... array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                throw new java.lang.IllegalArgumentException(\"The Array must not be null\");\n            } \n            if ((array.int) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Array is empty\");\n            } \n            try {\n                final boolean[] boolean[] = org.apache.commons.lang3.ArrayUtils.toPrimitive(array);\n                return org.apache.commons.lang3.BooleanUtils.and(primitive) ? java.lang.Boolean.java.lang.Boolean.java.lang.Boolean : java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n            } catch (final java.lang.NullPointerException ex) {\n                throw new java.lang.IllegalArgumentException(\"The array must not contain any null elements\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2251","type":"CtBinaryOperatorImpl","sourcecode":"pos < 0"},"failures":[8],"tindex":"430f794a-3e72-11e6-8051-6bc849cdfb6b","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1348","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendSeparator(final char separator, final int loopIndex) {\n    if (loopIndex < 0) {\n        {\n            if (loopIndex > 0) {\n                append(separator);\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"loopIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BitField:42","type":"CtBinaryOperatorImpl","sourcecode":"bit_pattern != 0"},"failures":[],"tindex":"430f794b-3e72-11e6-8051-ed15d0b70b27","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:675","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final int value) {\n    if (value != 0) {\n        {\n            appendFieldStart(buffer, fieldName);\n            appendDetail(buffer, fieldName, value);\n            appendFieldEnd(buffer, fieldName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bit_pattern":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:771","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[],"tindex":"430fa05c-3e72-11e6-8051-61ea4f3c5892","method":{"position":"org.apache.commons.lang3.ArrayUtils:3632","type":"CtMethodImpl","sourcecode":"public static boolean isNotEmpty(final short[] array) {\n    if (array == array) {\n        {\n            return (array != null) && ((array.int) != 0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomUtils:89","type":"CtBinaryOperatorImpl","sourcecode":"startInclusive == endExclusive"},"failures":[],"tindex":"430fc76d-3e72-11e6-8051-9f10d721ac3d","method":{"position":"org.apache.commons.lang3.concurrent.TimedSemaphore:247","type":"CtMethodImpl","sourcecode":"public final synchronized void setLimit(final int limit) {\n    if (limit == limit) {\n        {\n            org.apache.commons.lang3.concurrent.TimedSemaphore.this.int = limit;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startInclusive":"limit","endExclusive":"limit"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:640","type":"CtBinaryOperatorImpl","sourcecode":"(isEquals) == false"},"failures":[9],"tindex":"430fc76e-3e72-11e6-8051-01ccbd82b188","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1005","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final boolean value) {\n    if (value == false) {\n        {\n            return append(value).appendNewLine();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEquals":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5637","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"430fee7f-3e72-11e6-8051-3bba45239924","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1211","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final char[] array, final java.lang.Boolean fullDetail) {\n    if (fieldName == null) {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (array == null) {\n                appendNullText(buffer, fieldName);\n            } else if (isFullDetail(fullDetail)) {\n                appendDetail(buffer, fieldName, array);\n            } else {\n                appendSummary(buffer, fieldName, array);\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:612","type":"CtBinaryOperatorImpl","sourcecode":"numDecimals <= 16"},"failures":[],"tindex":"430fee80-3e72-11e6-8051-ebcda3619c00","method":{"position":"org.apache.commons.lang3.ArrayUtils:1678","type":"CtMethodImpl","sourcecode":"public static void reverse(final double[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (startIndexInclusive <= 16) {\n        {\n            if (array == null) {\n                return ;\n            } \n            int int = startIndexInclusive < 0 ? 0 : startIndexInclusive;\n            int int = (java.lang.Math.min(array.int, endIndexExclusive)) - 1;\n            double double;\n            while (j > i) {\n                tmp = array[j];\n                array[j] = array[i];\n                array[i] = tmp;\n                j--;\n                i++;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"numDecimals":"startIndexInclusive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:728","type":"CtBinaryOperatorImpl","sourcecode":"classes == null"},"failures":[10,11,12],"tindex":"43101591-3e72-11e6-8051-0dea47718359","method":{"position":"org.apache.commons.lang3.reflect.ConstructorUtils:241","type":"CtMethodImpl","sourcecode":"public static <T>java.lang.reflect.Constructor<T> getMatchingAccessibleConstructor(final java.lang.Class<T> cls, final java.lang.Class<?>... parameterTypes) {\n    if (parameterTypes == null) {\n        {\n            org.apache.commons.lang3.Validate.notNull(cls, \"class cannot be null\");\n            try {\n                final java.lang.reflect.Constructor<T> java.lang.reflect.Constructor<T> = cls.getConstructor(parameterTypes);\n                org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(ctor);\n                return ctor;\n            } catch (final java.lang.NoSuchMethodException e) {\n            }\n            java.lang.reflect.Constructor<T> java.lang.reflect.Constructor<T> = null;\n            final java.lang.reflect.Constructor<?>[] java.lang.reflect.Constructor<?>[] = cls.getConstructors();\n            for (java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : ctors) {\n                if (org.apache.commons.lang3.ClassUtils.isAssignable(parameterTypes, ctor.getParameterTypes(), true)) {\n                    ctor = org.apache.commons.lang3.reflect.ConstructorUtils.getAccessibleConstructor(ctor);\n                    if (ctor != null) {\n                        org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(ctor);\n                        if ((result == null) || ((org.apache.commons.lang3.reflect.MemberUtils.compareParameterTypes(ctor.getParameterTypes(), result.getParameterTypes(), parameterTypes)) < 0)) {\n                            @java.lang.SuppressWarnings(value = \"unchecked\")\n                            final java.lang.reflect.Constructor<T> java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(ctor));\n                            result = constructor;\n                        } \n                    } \n                } \n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classes":"parameterTypes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:761","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[13],"tindex":"43103ca2-3e72-11e6-8051-d5d0ac411b05","method":{"position":"org.apache.commons.lang3.StringUtils:5659","type":"CtMethodImpl","sourcecode":"public static java.lang.String lowerCase(final java.lang.String str, final java.util.Locale locale) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return str.toLowerCase(locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:898","type":"CtBinaryOperatorImpl","sourcecode":"rhs == null"},"failures":[14],"tindex":"431063b3-3e72-11e6-8051-433622c15d8e","method":{"position":"org.apache.commons.lang3.ArrayUtils:3665","type":"CtMethodImpl","sourcecode":"public static boolean isNotEmpty(final double[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (array != null) && ((array.int) != 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rhs":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:144","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.m)"},"failures":[],"tindex":"43108ac4-3e72-11e6-8051-5331b674a0fb","method":{"position":"org.apache.commons.lang3.ObjectUtils:205","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static int hashCode(final java.lang.Object obj) {\n    if (org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(obj, obj)) {\n        {\n            return obj == null ? 0 : obj.hashCode();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.time.DurationFormatUtils.m":"obj","tokens":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.text.ParseException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:733","type":"CtBinaryOperatorImpl","sourcecode":"(isEquals) == false"},"failures":[],"tindex":"43108ac5-3e72-11e6-8051-f573e0f0bd39","method":{"position":"org.apache.commons.lang3.time.DateUtils:353","type":"CtMethodImpl","sourcecode":"private static java.util.Date parseDateWithLeniency(final java.lang.String str, final java.util.Locale locale, final java.lang.String[] parsePatterns, final boolean lenient) throws java.text.ParseException {\n    if (lenient == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.text.ParseException();\n    } else {\n        {\n            if ((str == null) || (parsePatterns == null)) {\n                throw new java.lang.IllegalArgumentException(\"Date and Patterns must not be null\");\n            } \n            java.text.SimpleDateFormat java.text.SimpleDateFormat;\n            if (locale == null) {\n                parser = new java.text.SimpleDateFormat();\n            } else {\n                parser = new java.text.SimpleDateFormat(\"\" , locale);\n            }\n            parser.setLenient(lenient);\n            final java.text.ParsePosition java.text.ParsePosition = new java.text.ParsePosition(0);\n            for (final java.lang.String java.lang.String : parsePatterns) {\n                java.lang.String java.lang.String = parsePattern;\n                if (parsePattern.endsWith(\"ZZ\")) {\n                    pattern = pattern.substring(0, ((pattern.length()) - 1));\n                } \n                parser.applyPattern(pattern);\n                pos.setIndex(0);\n                java.lang.String java.lang.String = str;\n                if (parsePattern.endsWith(\"ZZ\")) {\n                    str2 = str.replaceAll(\"([-+][0-9][0-9]):([0-9][0-9])$\", \"$1$2\");\n                } \n                final java.util.Date java.util.Date = parser.parse(str2, pos);\n                if ((date != null) && ((pos.getIndex()) == (str2.length()))) {\n                    return date;\n                } \n            }\n            throw new java.text.ParseException((\"Unable to parse the date: \" + str) , (-1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEquals":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.FieldUtils:107","type":"CtVariableReadImpl","sourcecode":"forceAccess"},"failures":[15],"tindex":"4310b1d6-3e72-11e6-8051-85773e6d3cf8","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:178","type":"CtMethodImpl","sourcecode":"public static java.lang.String reflectionToString(final java.lang.Object object, final org.apache.commons.lang3.builder.ToStringStyle style, final boolean outputTransients) {\n    if (outputTransients) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(object, style, outputTransients, false, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"forceAccess":"outputTransients"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1903","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"4310b1d7-3e72-11e6-8051-45c22504c077","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:127","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj == null) {\n        {\n            return (obj == (org.apache.commons.lang3.reflect.TypeUtils.GenericArrayTypeImpl.this)) || ((obj instanceof java.lang.reflect.GenericArrayType) && (org.apache.commons.lang3.reflect.TypeUtils.equals(org.apache.commons.lang3.reflect.TypeUtils.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(obj)))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4938","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[16,17,18,19],"tindex":"4310d8e8-3e72-11e6-8051-9d0cb07a77c9","method":{"position":"org.apache.commons.lang3.exception.ContextedRuntimeException:207","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object getFirstContextValue(final java.lang.String label) {\n    if (label == null) {\n        {\n            return org.apache.commons.lang3.exception.ContextedRuntimeException.this.org.apache.commons.lang3.exception.ExceptionContext.getFirstContextValue(label);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"label"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Range:450","type":"CtBinaryOperatorImpl","sourcecode":"result == null"},"failures":[20],"tindex":"4310d8e9-3e72-11e6-8051-830748c0e416","method":{"position":"org.apache.commons.lang3.tuple.Pair:176","type":"CtMethodImpl","sourcecode":"public java.lang.String toString(final java.lang.String format) {\n    if (format == null) {\n        {\n            return java.lang.String.format(format, getLeft(), getRight());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"format"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:596","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[21,22,23,24,25,26,27,28,0,29,30,31,1,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"tindex":"4310d8ea-3e72-11e6-8051-ab260efe8bd9","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:842","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if (buffer == null) {\n        {\n            appendTo(buffer, calendar.get(int));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"buffer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.math.Fraction:320","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"4310fffb-3e72-11e6-8051-ef8ee406fd02","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:318","type":"CtMethodImpl","sourcecode":"public static java.lang.Object readDeclaredStaticField(final java.lang.Class<?> cls, final java.lang.String fieldName) throws java.lang.IllegalAccessException {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            return org.apache.commons.lang3.reflect.FieldUtils.readDeclaredStaticField(cls, fieldName, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSet:139","type":"CtBinaryOperatorImpl","sourcecode":"setStrs == null"},"failures":[63],"tindex":"4310fffc-3e72-11e6-8051-fd42083b807e","method":{"position":"org.apache.commons.lang3.CharSet:138","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.CharSet getInstance(final java.lang.String... setStrs) {\n    if (setStrs == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (setStrs == null) {\n                return null;\n            } \n            if ((setStrs.int) == 1) {\n                final org.apache.commons.lang3.CharSet org.apache.commons.lang3.CharSet = org.apache.commons.lang3.CharSet.org.apache.commons.lang3.CharSet.java.util.Map<java.lang.String, org.apache.commons.lang3.CharSet>.get(setStrs[0]);\n                if (common != null) {\n                    return common;\n                } \n            } \n            return new org.apache.commons.lang3.CharSet(setStrs);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"setStrs":"setStrs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.JavaVersion:144","type":"CtInvocationImpl","sourcecode":"\"1.6\".equals(nom)"},"failures":[],"tindex":"4310fffd-3e72-11e6-8051-91f10f577da3","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:526","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final boolean value) {\n    if (\"1.6\".equals(fieldName)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:179","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Arrays.equals(lhs, rhs))"},"failures":[64,65,66],"tindex":"4311270e-3e72-11e6-8051-f3879d50836b","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:967","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {\n    if (!(java.util.Arrays.equals(lhs, rhs))) {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"lhs","rhs":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5080","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[67],"tindex":"4311270f-3e72-11e6-8051-01cada05b790","method":{"position":"org.apache.commons.lang3.StringUtils:828","type":"CtMethodImpl","sourcecode":"public static boolean equalsIgnoreCase(final java.lang.CharSequence str1, final java.lang.CharSequence str2) {\n    if (str2 == null) {\n        {\n            if ((str1 == null) || (str2 == null)) {\n                return str1 == str2;\n            } else if (str1 == str2) {\n                return true;\n            } else if ((str1.length()) != (str2.length())) {\n                return false;\n            } else {\n                return org.apache.commons.lang3.CharSequenceUtils.regionMatches(str1, true, 0, str2, 0, str1.length());\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:6022","type":"CtBinaryOperatorImpl","sourcecode":"(index < 0) || (index >= length)"},"failures":[],"tindex":"43114d20-3e72-11e6-8051-95ce66a142a2","method":{"position":"org.apache.commons.lang3.ArrayUtils:1643","type":"CtMethodImpl","sourcecode":"public static void reverse(final char[] array, int startIndexInclusive, int endIndexExclusive) {\n    if ((endIndexExclusive < 0) || (index >= endIndexExclusive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return ;\n            } \n            int int = startIndexInclusive < 0 ? 0 : startIndexInclusive;\n            int int = (java.lang.Math.min(array.int, endIndexExclusive)) - 1;\n            char char;\n            while (j > i) {\n                tmp = array[j];\n                array[j] = array[i];\n                array[i] = tmp;\n                j--;\n                i++;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"endIndexExclusive","index":"endIndexExclusive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:694","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[68],"tindex":"43114d21-3e72-11e6-8051-e70d91eee9d8","method":{"position":"org.apache.commons.lang3.StringUtils:1676","type":"CtMethodImpl","sourcecode":"public static boolean containsAny(final java.lang.CharSequence cs, final java.lang.CharSequence searchChars) {\n    if (searchChars == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (searchChars == null) {\n                return false;\n            } \n            return org.apache.commons.lang3.StringUtils.containsAny(cs, org.apache.commons.lang3.CharSequenceUtils.toCharArray(searchChars));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"searchChars"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.JavaVersion:136","type":"CtInvocationImpl","sourcecode":"\"1.2\".equals(nom)"},"failures":[],"tindex":"43114d22-3e72-11e6-8051-57c5139f35c5","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1742","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder deleteAll(final java.lang.String str) {\n    if (\"1.2\".equals(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = str == null ? 0 : str.length();\n            if (len > 0) {\n                int int = indexOf(str, 0);\n                while (index >= 0) {\n                    deleteImpl(index, (index + len), len);\n                    index = indexOf(str, index);\n                }\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4878","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(searchChars))"},"failures":[21,22,23,69,24,70,25,26,71,72,73,27,74,75,28,76,0,29,30,77,31,1,78,32,33,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,41,42,43,44,45,46,47,48,49,50,51,52,136,53,54,55,56,57,58,59,60,61,137,62,138,139,140,141,142,143,144,145,146,147,148,149],"tindex":"43117433-3e72-11e6-8051-0ba09bc1ad19","method":{"position":"org.apache.commons.lang3.time.FastDateParser:460","type":"CtMethodImpl","sourcecode":"private org.apache.commons.lang3.time.FastDateParser.Strategy getStrategy(final java.lang.String formatField, final java.util.Calendar definingCalendar) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(formatField)) || (org.apache.commons.lang3.StringUtils.isEmpty(formatField))) {\n        {\n            switch (formatField.charAt(0)) {\n                case '\\'' :\n                    if ((formatField.length()) > 2) {\n                        return new org.apache.commons.lang3.time.FastDateParser.CopyQuotedStrategy(formatField.substring(1, ((formatField.length()) - 1)));\n                    } \n                default :\n                    return new org.apache.commons.lang3.time.FastDateParser.CopyQuotedStrategy(formatField);\n                case 'D' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'E' :\n                    return getLocaleSpecificStrategy(java.util.Calendar.java.util.Calendar.int, definingCalendar);\n                case 'F' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'G' :\n                    return getLocaleSpecificStrategy(java.util.Calendar.java.util.Calendar.int, definingCalendar);\n                case 'H' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'K' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'M' :\n                    return (formatField.length()) >= 3 ? getLocaleSpecificStrategy(java.util.Calendar.java.util.Calendar.int, definingCalendar) : org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'S' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'W' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'a' :\n                    return getLocaleSpecificStrategy(java.util.Calendar.java.util.Calendar.int, definingCalendar);\n                case 'd' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'h' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'k' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'm' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 's' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'w' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'y' :\n                    return (formatField.length()) > 2 ? org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy : org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'Z' :\n                case 'z' :\n                    return getLocaleSpecificStrategy(java.util.Calendar.java.util.Calendar.int, definingCalendar);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"formatField","searchChars":"formatField"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:1110","type":"CtBinaryOperatorImpl","sourcecode":"className == null"},"failures":[],"tindex":"4311c254-3e72-11e6-8051-89ead5d9ada0","method":{"position":"org.apache.commons.lang3.Conversion:1509","type":"CtMethodImpl","sourcecode":"public static java.lang.String byteToHex(final byte src, final int srcPos, final java.lang.String dstInit, final int dstPos, final int nHexs) {\n    if (dstInit == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nHexs) {\n                return dstInit;\n            } \n            if ((((nHexs - 1) * 4) + srcPos) >= 8) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+srcPos is greather or equal to than 8\");\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(dstInit);\n            int int = 0;\n            int int = sb.length();\n            for (int int = 0 ; i < nHexs ; i++) {\n                shift = (i * 4) + srcPos;\n                final int int = 15 & (src >> shift);\n                if ((dstPos + i) == append) {\n                    ++append;\n                    sb.append(org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                } else {\n                    sb.setCharAt((dstPos + i), org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                }\n            }\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"dstInit"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:663","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || ((end = str.length()) == 0)"},"failures":[],"tindex":"4311c255-3e72-11e6-8051-1d7b58475ebe","method":{"position":"org.apache.commons.lang3.StringUtils:5509","type":"CtMethodImpl","sourcecode":"public static java.lang.String center(java.lang.String str, final int size, final char padChar) {\n    if ((str == null) || ((size = str.length()) == 0)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((str == null) || (size <= 0)) {\n                return str;\n            } \n            final int int = str.length();\n            final int int = size - strLen;\n            if (pads <= 0) {\n                return str;\n            } \n            str = org.apache.commons.lang3.StringUtils.leftPad(str, (strLen + (pads / 2)), padChar);\n            str = org.apache.commons.lang3.StringUtils.rightPad(str, size, padChar);\n            return str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str","end":"size"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:1009","type":"CtBinaryOperatorImpl","sourcecode":"toString != null"},"failures":[84,87,88,95,96,97,98,99,100,101,103,112,115,116,123,124,125,126,127,128,129,131,62],"tindex":"4311c256-3e72-11e6-8051-292042df77c9","method":{"position":"org.apache.commons.lang3.time.FastDateParser:781","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid setCalendar(final org.apache.commons.lang3.time.FastDateParser parser, final java.util.Calendar cal, final java.lang.String value) {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.TimeZone java.util.TimeZone;\n            if (((value.charAt(0)) == '+') || ((value.charAt(0)) == '-')) {\n                tz = java.util.TimeZone.getTimeZone((\"GMT\" + value));\n            } else if (value.startsWith(\"GMT\")) {\n                tz = java.util.TimeZone.getTimeZone(value);\n            } else {\n                tz = java.util.SortedMap<java.lang.String, java.util.TimeZone>.get(value);\n                if (tz == null) {\n                    throw new java.lang.IllegalArgumentException((value + \" is not a supported timezone name\"));\n                } \n            }\n            cal.setTimeZone(tz);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toString":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:120","type":"CtBinaryOperatorImpl","sourcecode":"(str.charAt(3)) != '_'"},"failures":[150,151],"tindex":"4311e967-3e72-11e6-8051-b9b0bb7da376","method":{"position":"org.apache.commons.lang3.math.NumberUtils:221","type":"CtMethodImpl","sourcecode":"public static float toFloat(final java.lang.String str, final float defaultValue) {\n    if ((str.charAt(3)) != '_') {\n        {\n            if (str == null) {\n                return defaultValue;\n            } \n            try {\n                return java.lang.Float.parseFloat(str);\n            } catch (final java.lang.NumberFormatException nfe) {\n                return defaultValue;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:381","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[152,153],"tindex":"4311e968-3e72-11e6-8051-1b557715f20a","method":{"position":"org.apache.commons.lang3.StringUtils:5261","type":"CtMethodImpl","sourcecode":"public static java.lang.String rightPad(final java.lang.String str, final int size, final char padChar) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            final int int = size - (str.length());\n            if (pads <= 0) {\n                return str;\n            } \n            if (pads > (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) {\n                return org.apache.commons.lang3.StringUtils.rightPad(str, size, java.lang.String.valueOf(padChar));\n            } \n            return str.concat(org.apache.commons.lang3.StringUtils.repeat(padChar, pads));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:357","type":"CtInvocationImpl","sourcecode":"testClass.isArray()"},"failures":[154],"tindex":"4311e969-3e72-11e6-8051-e533b897af74","method":{"position":"org.apache.commons.lang3.ClassUtils:1071","type":"CtMethodImpl","sourcecode":"public static java.lang.String getPackageCanonicalName(final java.lang.Class<?> cls) {\n    if (cls.isArray()) {\n        {\n            if (cls == null) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            return org.apache.commons.lang3.ClassUtils.getPackageCanonicalName(cls.getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"testClass":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7059","type":"CtBinaryOperatorImpl","sourcecode":"(m1.length()) != (m2.length())"},"failures":[155,156,157],"tindex":"4312107a-3e72-11e6-8051-79586d5550e2","method":{"position":"org.apache.commons.lang3.text.StrLookup:161","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String lookup(final java.lang.String key) {\n    if ((key.length()) != (key.length())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.util.Map<java.lang.String, V>) == null) {\n                return null;\n            } \n            final java.lang.Object java.lang.Object = java.util.Map<java.lang.String, V>.get(key);\n            if (obj == null) {\n                return null;\n            } \n            return obj.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m1":"key","m2":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.SerializationUtils:160","type":"CtBinaryOperatorImpl","sourcecode":"out != null"},"failures":[],"tindex":"4312107b-3e72-11e6-8051-b7ae822883ef","method":{"position":"org.apache.commons.lang3.event.EventListenerSupport:224","type":"CtMethodImpl","sourcecode":"private void writeObject(final java.io.ObjectOutputStream objectOutputStream) throws java.io.IOException {\n    if (objectOutputStream != null) {\n        {\n            final java.util.ArrayList<L> java.util.ArrayList<L> = new java.util.ArrayList<L>();\n            java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream(new java.io.ByteArrayOutputStream());\n            for (final L L : java.util.List<L>) {\n                try {\n                    testObjectOutputStream.writeObject(listener);\n                    serializableListeners.add(listener);\n                } catch (final java.io.IOException exception) {\n                    testObjectOutputStream = new java.io.ObjectOutputStream(new java.io.ByteArrayOutputStream());\n                }\n            }\n            objectOutputStream.writeObject(serializableListeners.toArray(L[]));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"objectOutputStream"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:724","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[158,46,47,49,53,54,55,57,58,59,60,61],"tindex":"4312378c-3e72-11e6-8051-a3566247bd6b","method":{"position":"org.apache.commons.lang3.time.DateUtils:853","type":"CtMethodImpl","sourcecode":"public static java.util.Date truncate(final java.lang.Object date, final int field) {\n    if (date == null) {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            if (date instanceof java.util.Date) {\n                return org.apache.commons.lang3.time.DateUtils.truncate(((java.util.Date)(date)), field);\n            } else if (date instanceof java.util.Calendar) {\n                return org.apache.commons.lang3.time.DateUtils.truncate(((java.util.Calendar)(date)), field).getTime();\n            } else {\n                throw new java.lang.ClassCastException((\"Could not truncate \" + date));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2766","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[159],"tindex":"4312378d-3e72-11e6-8051-0f655de06684","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:927","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final float[] lhs, final float[] rhs) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(lhs)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"lhs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:717","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[160],"tindex":"43125e9e-3e72-11e6-8051-990a053f4770","method":{"position":"org.apache.commons.lang3.CharEncoding:94","type":"CtMethodImpl","sourcecode":"public static boolean isSupported(final java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (name == null) {\n                return false;\n            } \n            try {\n                return java.nio.charset.Charset.isSupported(name);\n            } catch (final java.nio.charset.IllegalCharsetNameException ex) {\n                return false;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:970","type":"CtBinaryOperatorImpl","sourcecode":"abbreviation != null"},"failures":[161,162,163,164,165,166,167,168],"tindex":"43125e9f-3e72-11e6-8051-6d24ebe43ed8","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:492","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setSizeEndText(final java.lang.String sizeEndText) {\n    if (sizeEndText != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            super.setSizeEndText(sizeEndText);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"abbreviation":"sizeEndText"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MethodUtils:498","type":"CtBinaryOperatorImpl","sourcecode":"bestMatch != null"},"failures":[169],"tindex":"43125ea0-3e72-11e6-8051-819119ae4452","method":{"position":"org.apache.commons.lang3.ObjectUtils:422","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String toString(final java.lang.Object obj, final java.lang.String nullStr) {\n    if (obj != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return obj == null ? nullStr : obj.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bestMatch":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:884","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.math.Fraction.this) == other"},"failures":[],"tindex":"431285b1-3e72-11e6-8051-8f4238b84fa8","method":{"position":"org.apache.commons.lang3.math.Fraction:883","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int compareTo(final org.apache.commons.lang3.math.Fraction other) {\n    if ((org.apache.commons.lang3.math.Fraction.this) == other) {\n        return 0;\n    } \n    if (((int) == (other.int)) && ((int) == (other.int))) {\n        return 0;\n    } \n    final long long = ((long)(int)) * ((long)(other.int));\n    final long long = ((long)(other.int)) * ((long)(int));\n    if (first == second) {\n        return 0;\n    } else if (first < second) {\n        return -1;\n    } else {\n        return 1;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"other","this":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:355","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || (parsePatterns == null)"},"failures":[170,171,172,173,174],"tindex":"431285b2-3e72-11e6-8051-4d0c2aa2e1ad","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:300","type":"CtMethodImpl","sourcecode":"public static java.lang.String toStringExclude(final java.lang.Object object, final java.util.Collection<java.lang.String> excludeFieldNames) {\n    if ((object == null) || (object == null)) {\n        {\n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toStringExclude(object, org.apache.commons.lang3.builder.ReflectionToStringBuilder.toNoNullStringArray(excludeFieldNames));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"object","parsePatterns":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:4561","type":"CtBinaryOperatorImpl","sourcecode":"index != 0"},"failures":[],"tindex":"4312acc3-3e72-11e6-8051-49f7ca6500e3","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:831","type":"CtMethodImpl","sourcecode":"private boolean isQuote(final char[] srcChars, final int pos, final int len, final int quoteStart, final int quoteLen) {\n    if (len != 0) {\n        {\n            for (int int = 0 ; i < quoteLen ; i++) {\n                if (((pos + i) >= len) || ((srcChars[(pos + i)]) != (srcChars[(quoteStart + i)]))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"len"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1047","type":"CtBinaryOperatorImpl","sourcecode":"((nBools - 1) + dstPos) >= 64"},"failures":[],"tindex":"4312acc4-3e72-11e6-8051-61c9e8405ea4","method":{"position":"org.apache.commons.lang3.time.DateUtils:418","type":"CtMethodImpl","sourcecode":"public static java.util.Date addMonths(final java.util.Date date, final int amount) {\n    if (((amount - 1) + amount) >= 64) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.add(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"amount","dstPos":"amount"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:711","type":"CtBinaryOperatorImpl","sourcecode":"(cls != null) && (cls.isPrimitive())"},"failures":[],"tindex":"4312acc5-3e72-11e6-8051-3513222e7bba","method":{"position":"org.apache.commons.lang3.reflect.MemberUtils:167","type":"CtMethodImpl","sourcecode":"private static float getPrimitivePromotionCost(final java.lang.Class<?> srcClass, final java.lang.Class<?> destClass) {\n    if ((destClass != null) && (cls.isPrimitive())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            float float = 0.0F;\n            java.lang.Class<?> java.lang.Class<?> = srcClass;\n            if (!(cls.isPrimitive())) {\n                cost += 0.1F;\n                cls = org.apache.commons.lang3.ClassUtils.wrapperToPrimitive(cls);\n            } \n            for (int int = 0 ; (cls != destClass) && (i < (org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[].int)) ; i++) {\n                if (cls == (org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[][i])) {\n                    cost += 0.1F;\n                    if (i < ((org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[].int) - 1)) {\n                        cls = org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[][(i + 1)];\n                    } \n                } \n            }\n            return cost;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"destClass"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:224","type":"CtInvocationImpl","sourcecode":"java.lang.Double.isNaN(b)"},"failures":[175],"tindex":"4312d3d6-3e72-11e6-8051-b7e2da2d9bcb","method":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:89","type":"CtMethodImpl","sourcecode":"public static double min(final double a, final double b, final double c) {\n    if (java.lang.Double.isNaN(c)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.math.IEEE754rUtils.min(org.apache.commons.lang3.math.IEEE754rUtils.min(a, b), c);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"c"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:672","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[28,76,0,29,30,77,31,1],"tindex":"4312d3d7-3e72-11e6-8051-a3dbac96fa33","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:302","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Date date, final java.lang.String pattern, final java.util.TimeZone timeZone, final java.util.Locale locale) {\n    if (pattern == null) {\n        {\n            final org.apache.commons.lang3.time.FastDateFormat org.apache.commons.lang3.time.FastDateFormat = org.apache.commons.lang3.time.FastDateFormat.getInstance(pattern, timeZone, locale);\n            return df.format(date);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:324","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[176],"tindex":"4312d3d8-3e72-11e6-8051-11ec6c4906ba","method":{"position":"org.apache.commons.lang3.text.WordUtils:451","type":"CtMethodImpl","sourcecode":"public static java.lang.String swapCase(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                return str;\n            } \n            final char[] char[] = str.toCharArray();\n            boolean boolean = true;\n            for (int int = 0 ; i < (buffer.int) ; i++) {\n                final char char = buffer[i];\n                if (java.lang.Character.isUpperCase(ch)) {\n                    buffer[i] = java.lang.Character.toLowerCase(ch);\n                    whitespace = false;\n                } else if (java.lang.Character.isTitleCase(ch)) {\n                    buffer[i] = java.lang.Character.toLowerCase(ch);\n                    whitespace = false;\n                } else if (java.lang.Character.isLowerCase(ch)) {\n                    if (whitespace) {\n                        buffer[i] = java.lang.Character.toTitleCase(ch);\n                        whitespace = false;\n                    } else {\n                        buffer[i] = java.lang.Character.toUpperCase(ch);\n                    }\n                } else {\n                    whitespace = java.lang.Character.isWhitespace(ch);\n                }\n            }\n            return new java.lang.String(buffer);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSetUtils:244","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isNotEmpty(s)"},"failures":[177,161,178,179,180,181,181,182,183,184,185,186,187,188,189,189,190,191,192,193,194,195,195,196,197,198,199,200,201,202,203,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220],"tindex":"4312fae9-3e72-11e6-8051-6f54dc4e8c25","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1053","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final int[] array) {\n    if (org.apache.commons.lang3.StringUtils.isNotEmpty(fieldName)) {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"s":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:543","type":"CtBinaryOperatorImpl","sourcecode":"value instanceof boolean[]"},"failures":[221,222,223,224,225],"tindex":"4312faea-3e72-11e6-8051-75abd6b5b428","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:270","type":"CtMethodImpl","sourcecode":"public static boolean reflectionEquals(final java.lang.Object lhs, final java.lang.Object rhs, final java.lang.String... excludeFields) {\n    if (rhs instanceof boolean[]) {\n        {\n            return org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(lhs, rhs, false, null, excludeFields);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1440","type":"CtBinaryOperatorImpl","sourcecode":"strLen >= width"},"failures":[],"tindex":"431321fb-3e72-11e6-8051-71d45fea3b4c","method":{"position":"org.apache.commons.lang3.Validate:715","type":"CtMethodImpl","sourcecode":"public static <T extends java.util.Collection<?>>T validIndex(final T collection, final int index) {\n    if (index >= index) {\n        {\n            return org.apache.commons.lang3.Validate.validIndex(collection, index, org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, java.lang.Integer.valueOf(index));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strLen":"index","width":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:631","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[226,227,228,229,230,231,232,233,234,235,177,236,237,238,239,240,241,242,161,162,163,164,165,166,167,168,243,244,178,245,246,247,248,249,250,251,179,252,253,254,255,256,257,258,259,259,260,260,261,261,262,263,263,264,264,180,180,265,265,266,266,15,15,267,267,268,268,269,269,270,270,271,271,272,272,273,273,274,274,275,275,276,276,277,277,278,278,279,279,280,280,281,281,282,282,283,283,284,284,285,285,286,286,287,287,288,288,289,289,290,290,291,291,292,292,293,293,181,181,182,182,183,183,184,184,185,185,186,187,187,188,188,189,189,190,190,191,191,192,192,193,193,194,194,195,195,196,196,197,197,198,198,199,199,200,200,201,202,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,210,210,211,211,212,212,213,214,214,215,215,216,216,217,217,218,294,295,296,297,298,299,300,170,301,302,171,172,303,304,305,173,306,174,219,307,308,309,310,311,312,313,220,314,315,316,317,318,319,320],"tindex":"431321fc-3e72-11e6-8051-09c13e103b09","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:408","type":"CtMethodImpl","sourcecode":"protected void removeLastFieldSeparator(final java.lang.StringBuffer buffer) {\n    if (buffer == null) {\n        {\n            final int int = buffer.length();\n            final int int = java.lang.String.length();\n            if (((len > 0) && (sepLen > 0)) && (len >= sepLen)) {\n                boolean boolean = true;\n                for (int int = 0 ; i < sepLen ; i++) {\n                    if ((buffer.charAt(((len - 1) - i))) != (java.lang.String.charAt(((sepLen - 1) - i)))) {\n                        match = false;\n                        break;\n                    } \n                }\n                if (match) {\n                    buffer.setLength((len - sepLen));\n                } \n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"buffer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.EnumUtils:91","type":"CtBinaryOperatorImpl","sourcecode":"enumName == null"},"failures":[321],"tindex":"4313490d-3e72-11e6-8051-f77a5d9d4050","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1765","type":"CtMethodImpl","sourcecode":"protected void setArrayEnd(java.lang.String arrayEnd) {\n    if (arrayEnd == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (arrayEnd == null) {\n                arrayEnd = \"\";\n            } \n            org.apache.commons.lang3.builder.ToStringStyle.this.java.lang.String = arrayEnd;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"enumName":"arrayEnd"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharEncoding:95","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[322,323],"tindex":"4313490e-3e72-11e6-8051-536d32c8dc64","method":{"position":"org.apache.commons.lang3.text.WordUtils:353","type":"CtMethodImpl","sourcecode":"public static java.lang.String capitalizeFully(java.lang.String str, final char... delimiters) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = delimiters == null ? -1 : delimiters.int;\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (delimLen == 0)) {\n                return str;\n            } \n            str = str.toLowerCase();\n            return org.apache.commons.lang3.text.WordUtils.capitalize(str, delimiters);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2290","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.StringUtils.isEmpty(str)) || (separator == null)"},"failures":[324,325,326],"tindex":"4313490f-3e72-11e6-8051-739a6ba6fa92","method":{"position":"org.apache.commons.lang3.StringUtils:4283","type":"CtMethodImpl","sourcecode":"public static java.lang.String removeEnd(final java.lang.String str, final java.lang.String remove) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (str == null)) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {\n                return str;\n            } \n            if (str.endsWith(remove)) {\n                return str.substring(0, ((str.length()) - (remove.length())));\n            } \n            return str;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str","separator":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:910","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[],"tindex":"43137020-3e72-11e6-8051-518dd99a7693","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:744","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if (calendar == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendTo(buffer, calendar.get(int));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"calendar"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1120","type":"CtBinaryOperatorImpl","sourcecode":"((nBools - 1) + dstPos) >= 16"},"failures":[],"tindex":"43137021-3e72-11e6-8051-2faa8b9c8fc6","method":{"position":"org.apache.commons.lang3.text.translate.JavaUnicodeEscaper:49","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.translate.JavaUnicodeEscaper below(final int codepoint) {\n    if (((codepoint - 1) + codepoint) >= 16) {\n        {\n            return org.apache.commons.lang3.text.translate.JavaUnicodeEscaper.outsideOf(codepoint, java.lang.Integer.java.lang.Integer.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"codepoint","dstPos":"codepoint"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:975","type":"CtBinaryOperatorImpl","sourcecode":"superToString != null"},"failures":[],"tindex":"43137022-3e72-11e6-8051-9fb0d3eb342a","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:404","type":"CtMethodImpl","sourcecode":"private java.lang.String insertFormats(final java.lang.String pattern, final java.util.ArrayList<java.lang.String> customPatterns) {\n    if (pattern != null) {\n        {\n            if (!(containsElements(customPatterns))) {\n                return pattern;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((pattern.length()) * 2));\n            final java.text.ParsePosition java.text.ParsePosition = new java.text.ParsePosition(0);\n            int int = -1;\n            int int = 0;\n            while ((pos.getIndex()) < (pattern.length())) {\n                final char char = pattern.charAt(pos.getIndex());\n                switch (c) {\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        appendQuotedString(pattern, pos, sb, false);\n                        break;\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        depth++;\n                        sb.append(org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char).append(readArgumentIndex(pattern, next(pos)));\n                        if (depth == 1) {\n                            fe++;\n                            final java.lang.String java.lang.String = customPatterns.get(fe);\n                            if (customPattern != null) {\n                                sb.append(org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char).append(customPattern);\n                            } \n                        } \n                        break;\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        depth--;\n                    default :\n                        sb.append(c);\n                        next(pos);\n                }\n            }\n            return sb.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superToString":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1153","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[14],"tindex":"43139733-3e72-11e6-8051-8fa972772714","method":{"position":"org.apache.commons.lang3.ArrayUtils:3654","type":"CtMethodImpl","sourcecode":"public static boolean isNotEmpty(final byte[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (array != null) && ((array.int) != 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:945","type":"CtBinaryOperatorImpl","sourcecode":"(value < start) || (value > end)"},"failures":[],"tindex":"43139734-3e72-11e6-8051-dbf008eb2ccf","method":{"position":"org.apache.commons.lang3.mutable.MutableLong:158","type":"CtMethodImpl","sourcecode":"public void subtract(final long operand) {\n    if ((operand < operand) || (value > operand)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableLong.this.long -= operand;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"operand","end":"operand","value":"operand"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1117","type":"CtBinaryOperatorImpl","sourcecode":"b < a"},"failures":[327],"tindex":"4313be45-3e72-11e6-8051-cd4c1a723f69","method":{"position":"org.apache.commons.lang3.math.Fraction:693","type":"CtMethodImpl","sourcecode":"private static int subAndCheck(final int x, final int y) {\n    if (x < y) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final long long = ((long)(x)) - ((long)(y));\n            if ((s < (java.lang.Integer.java.lang.Integer.int)) || (s > (java.lang.Integer.java.lang.Integer.int))) {\n                throw new java.lang.ArithmeticException(\"overflow: add\");\n            } \n            return ((int)(s));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"y","b":"x"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:854","type":"CtBinaryOperatorImpl","sourcecode":"lhs == null"},"failures":[328],"tindex":"4313be46-3e72-11e6-8051-35d5c8781cfe","method":{"position":"org.apache.commons.lang3.ArrayUtils:612","type":"CtMethodImpl","sourcecode":"public static byte[] nullToEmpty(final byte[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.byte[];\n            } \n            return array;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:845","type":"CtBinaryOperatorImpl","sourcecode":"varValue == null"},"failures":[329],"tindex":"4313be47-3e72-11e6-8051-898273e5a8bb","method":{"position":"org.apache.commons.lang3.StringUtils:1415","type":"CtMethodImpl","sourcecode":"public static boolean contains(final java.lang.CharSequence seq, final int searchChar) {\n    if (seq == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n                return false;\n            } \n            return (org.apache.commons.lang3.CharSequenceUtils.indexOf(seq, searchChar, 0)) >= 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"varValue":"seq"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:427","type":"CtBinaryOperatorImpl","sourcecode":"bool == null"},"failures":[330],"tindex":"4313be48-3e72-11e6-8051-1f1a9d9d43c3","method":{"position":"org.apache.commons.lang3.BooleanUtils:158","type":"CtMethodImpl","sourcecode":"public static boolean toBoolean(final java.lang.Boolean bool) {\n    if (bool == null) {\n        {\n            return (bool != null) && (bool.booleanValue());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"bool"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:672","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[331,332,333,334,335,336],"tindex":"4313e559-3e72-11e6-8051-c965ee06c5e2","method":{"position":"org.apache.commons.lang3.text.translate.CharSequenceTranslator:75","type":"CtMethodImpl","sourcecode":"public final void translate(final java.lang.CharSequence input, final java.io.Writer out) throws java.io.IOException {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (out == null) {\n                throw new java.lang.IllegalArgumentException(\"The Writer must not be null\");\n            } \n            if (input == null) {\n                return ;\n            } \n            int int = 0;\n            final int int = input.length();\n            while (pos < len) {\n                final int int = translate(input, pos, out);\n                if (consumed == 0) {\n                    final char[] char[] = java.lang.Character.toChars(java.lang.Character.codePointAt(input, pos));\n                    out.write(c);\n                    pos += c.int;\n                    continue;\n                } \n                for (int int = 0 ; pt < consumed ; pt++) {\n                    pos += java.lang.Character.charCount(java.lang.Character.codePointAt(input, pos));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:138","type":"CtBinaryOperatorImpl","sourcecode":"lhs != rhs"},"failures":[337,338,339,340,341],"tindex":"4313e55a-3e72-11e6-8051-3bc73871516d","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:280","type":"CtMethodImpl","sourcecode":"public static int reflectionHashCode(final int initialNonZeroOddNumber, final int multiplierNonZeroOddNumber, final java.lang.Object object, final boolean testTransients) {\n    if (testTransients != testTransients) {\n        {\n            return org.apache.commons.lang3.builder.HashCodeBuilder.reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"testTransients","rhs":"testTransients"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.ClassNotFoundException","condition":{"position":"org.apache.commons.lang3.SerializationUtils:105","type":"CtBinaryOperatorImpl","sourcecode":"in != null"},"failures":[25,90,38],"tindex":"4313e55b-3e72-11e6-8051-092646ba119c","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:568","type":"CtMethodImpl","sourcecode":"private void readObject(final java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {\n    if (in != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.ClassNotFoundException();\n    } else {\n        {\n            in.defaultReadObject();\n            init();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:258","type":"CtInvocationImpl","sourcecode":"java.lang.Float.isNaN(b)"},"failures":[],"tindex":"43140c6c-3e72-11e6-8051-b552430d5ebc","method":{"position":"org.apache.commons.lang3.RandomUtils:163","type":"CtMethodImpl","sourcecode":"public static float nextFloat(float startInclusive, float endInclusive) {\n    if (java.lang.Float.isNaN(endInclusive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.isTrue((endInclusive >= startInclusive), \"Start value must be smaller or equal to end value.\");\n            org.apache.commons.lang3.Validate.isTrue((startInclusive >= 0), \"Both range values must be non-negative.\");\n            if (startInclusive == endInclusive) {\n                return startInclusive;\n            } \n            return startInclusive + ((endInclusive - startInclusive) * (org.apache.commons.lang3.RandomUtils.org.apache.commons.lang3.RandomUtils.java.util.Random.nextFloat()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"endInclusive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1473","type":"CtBinaryOperatorImpl","sourcecode":"(((nHexs - 1) * 4) + srcPos) >= 16"},"failures":[79,80,81,84,86,89,95,96,97,100,101,103,104,107,108,109,112,114,117,123,124,125,128,129,131,132],"tindex":"43140c6d-3e72-11e6-8051-4d48ec6e982e","method":{"position":"org.apache.commons.lang3.time.FastDateParser:801","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nint modify(final int iValue) {\n    if ((((iValue - 1) * 4) + iValue) >= 16) {\n        {\n            return iValue - 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcPos":"iValue","nHexs":"iValue"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1070","type":"CtBinaryOperatorImpl","sourcecode":"offset >= 12"},"failures":[342,343,344,327,345,346,347,348],"tindex":"43140c6e-3e72-11e6-8051-2d024491659e","method":{"position":"org.apache.commons.lang3.math.Fraction:576","type":"CtMethodImpl","sourcecode":"private static int greatestCommonDivisor(int u, int v) {\n    if (v >= 12) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((u == 0) || (v == 0)) {\n                if ((u == (java.lang.Integer.java.lang.Integer.int)) || (v == (java.lang.Integer.java.lang.Integer.int))) {\n                    throw new java.lang.ArithmeticException(\"overflow: gcd is 2^31\");\n                } \n                return (java.lang.Math.abs(u)) + (java.lang.Math.abs(v));\n            } \n            if (((java.lang.Math.abs(u)) == 1) || ((java.lang.Math.abs(v)) == 1)) {\n                return 1;\n            } \n            if (u > 0) {\n                u = -u;\n            } \n            if (v > 0) {\n                v = -v;\n            } \n            int int = 0;\n            while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {\n                u /= 2;\n                v /= 2;\n                k++;\n            }\n            if (k == 31) {\n                throw new java.lang.ArithmeticException(\"overflow: gcd is 2^31\");\n            } \n            int int = (u & 1) == 1 ? v : -(u / 2);\n            do {\n                while ((t & 1) == 0) {\n                    t /= 2;\n                }\n                if (t > 0) {\n                    u = -t;\n                } else {\n                    v = t;\n                }\n                t = (v - u) / 2;\n            } while (t != 0 );\n            return (-u) * (1 << k);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"v"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:732","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[349],"tindex":"4314337f-3e72-11e6-8051-51b3bd08a870","method":{"position":"org.apache.commons.lang3.mutable.MutableDouble:275","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj != null) {\n        {\n            return (obj instanceof org.apache.commons.lang3.mutable.MutableDouble) && ((java.lang.Double.doubleToLongBits(((org.apache.commons.lang3.mutable.MutableDouble)(obj)).double)) == (java.lang.Double.doubleToLongBits(double)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:496","type":"CtBinaryOperatorImpl","sourcecode":"(numerator) < 0"},"failures":[],"tindex":"43143380-3e72-11e6-8051-c70153ea7499","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:850","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final void appendTo(final java.lang.StringBuffer buffer, final int value) {\n    if (value < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value < 100) {\n                for (int int = int ; (--i) >= 2 ; ) {\n                    buffer.append('0');\n                }\n                buffer.append(((char)((value / 10) + '0')));\n                buffer.append(((char)((value % 10) + '0')));\n            } else {\n                int int;\n                if (value < 1000) {\n                    digits = 3;\n                } else {\n                    org.apache.commons.lang3.Validate.isTrue((value > (-1)), \"Negative values should not be possible\", value);\n                    digits = java.lang.Integer.toString(value).length();\n                }\n                for (int int = int ; (--i) >= digits ; ) {\n                    buffer.append('0');\n                }\n                buffer.append(java.lang.Integer.toString(value));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"numerator":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3088","type":"CtBinaryOperatorImpl","sourcecode":"separatorChars == null"},"failures":[350],"tindex":"43143381-3e72-11e6-8051-25ceed570ca0","method":{"position":"org.apache.commons.lang3.StringUtils:6540","type":"CtMethodImpl","sourcecode":"public static int indexOfDifference(final java.lang.CharSequence cs1, final java.lang.CharSequence cs2) {\n    if (cs1 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cs1 == cs2) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            if ((cs1 == null) || (cs2 == null)) {\n                return 0;\n            } \n            int int;\n            for (i = 0 ; (i < (cs1.length())) && (i < (cs2.length())) ; ++i) {\n                if ((cs1.charAt(i)) != (cs2.charAt(i))) {\n                    break;\n                } \n            }\n            if ((i < (cs2.length())) || (i < (cs1.length()))) {\n                return i;\n            } \n            return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separatorChars":"cs1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1574","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[351],"tindex":"43145a92-3e72-11e6-8051-f701222e861a","method":{"position":"org.apache.commons.lang3.ArrayUtils:672","type":"CtMethodImpl","sourcecode":"public static boolean[] nullToEmpty(final boolean[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.boolean[];\n            } \n            return array;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:140","type":"CtInvocationImpl","sourcecode":"java.lang.Float.isNaN(b)"},"failures":[3,352,353],"tindex":"43145a93-3e72-11e6-8051-f3b6c5af3bde","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:709","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final float value) {\n    if (java.lang.Float.isNaN(value)) {\n        {\n            int = ((int) * (int)) + (java.lang.Float.floatToIntBits(value));\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:778","type":"CtBinaryOperatorImpl","sourcecode":"rhs == null"},"failures":[354,355],"tindex":"431481a4-3e72-11e6-8051-8704e00e0273","method":{"position":"org.apache.commons.lang3.ArrayUtils:3531","type":"CtMethodImpl","sourcecode":"public static boolean isEmpty(final short[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (array == null) || ((array.int) == 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rhs":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:957","type":"CtBinaryOperatorImpl","sourcecode":"ignored != null"},"failures":[356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,228,229,230,231,232,233,234,235,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403],"tindex":"431481a5-3e72-11e6-8051-bd9cca762b68","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:956","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer setIgnoredMatcher(final org.apache.commons.lang3.text.StrMatcher ignored) {\n    if (ignored != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ignored != null) {\n                org.apache.commons.lang3.text.StrTokenizer.this.org.apache.commons.lang3.text.StrMatcher = ignored;\n            } \n            return org.apache.commons.lang3.text.StrTokenizer.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ignored":"ignored"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:195","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(className)"},"failures":[404],"tindex":"431481a6-3e72-11e6-8051-c5a7b67b924e","method":{"position":"org.apache.commons.lang3.StringUtils:2449","type":"CtMethodImpl","sourcecode":"public static java.lang.String substringBetween(final java.lang.String str, final java.lang.String tag) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(tag)) {\n        {\n            return org.apache.commons.lang3.StringUtils.substringBetween(str, tag, tag);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"tag"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2378","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[405],"tindex":"4314a8b7-3e72-11e6-8051-7bd1699c9a6d","method":{"position":"org.apache.commons.lang3.ArrayUtils:1299","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final char[] array1, final char[] array2) {\n    if (array2 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1195","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"4314a8b8-3e72-11e6-8051-472d73500901","method":{"position":"org.apache.commons.lang3.Conversion:493","type":"CtMethodImpl","sourcecode":"public static char binaryBeMsb0ToHexDigit(final boolean[] src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.Conversion.binaryBeMsb0ToHexDigit(src, 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:932","type":"CtBinaryOperatorImpl","sourcecode":"(numerator) == 0"},"failures":[406,407,408,409,410,411,412,413,414,415,41,42,43,44,45,48,50,51,52,136,56],"tindex":"4314a8b9-3e72-11e6-8051-cf19d87121ef","method":{"position":"org.apache.commons.lang3.time.DateUtils:700","type":"CtMethodImpl","sourcecode":"public static java.util.Date round(final java.util.Date date, final int field) {\n    if (field == 0) {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n            gval.setTime(date);\n            org.apache.commons.lang3.time.DateUtils.modify(gval, field, org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int);\n            return gval.getTime();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"numerator":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:603","type":"CtBinaryOperatorImpl","sourcecode":"throwable == null"},"failures":[],"tindex":"4314a8ba-3e72-11e6-8051-0f33770ea270","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:454","type":"CtMethodImpl","sourcecode":"public static int reflectionHashCode(final java.lang.Object object, final java.lang.String... excludeFields) {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.HashCodeBuilder.reflectionHashCode(17, 37, object, false, null, excludeFields);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwable":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1035","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[416],"tindex":"4314cfcb-3e72-11e6-8051-299da4d46415","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:807","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final char[] lhs, final char[] rhs) {\n    if (lhs == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"lhs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1155","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[417],"tindex":"4314cfcc-3e72-11e6-8051-cdd4bfb4f088","method":{"position":"org.apache.commons.lang3.ArrayUtils:5800","type":"CtMethodImpl","sourcecode":"public static float[] removeElements(final float[] array, final float... values) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            final java.util.HashMap<java.lang.Float, org.apache.commons.lang3.mutable.MutableInt> java.util.HashMap<java.lang.Float, org.apache.commons.lang3.mutable.MutableInt> = new java.util.HashMap<java.lang.Float, org.apache.commons.lang3.mutable.MutableInt>(values.int);\n            for (final float float : values) {\n                final java.lang.Float java.lang.Float = java.lang.Float.valueOf(v);\n                final org.apache.commons.lang3.mutable.MutableInt org.apache.commons.lang3.mutable.MutableInt = occurrences.get(boxed);\n                if (count == null) {\n                    occurrences.put(boxed, new org.apache.commons.lang3.mutable.MutableInt(1));\n                } else {\n                    count.increment();\n                }\n            }\n            final java.util.BitSet java.util.BitSet = new java.util.BitSet();\n            for (final java.util.Map.Entry<java.lang.Float, org.apache.commons.lang3.mutable.MutableInt> java.util.Map.Entry<java.lang.Float, org.apache.commons.lang3.mutable.MutableInt> : occurrences.entrySet()) {\n                final java.lang.Float java.lang.Float = e.getKey();\n                int int = 0;\n                for (int int = 0, int int = e.getValue().intValue() ; i < ct ; i++) {\n                    found = org.apache.commons.lang3.ArrayUtils.indexOf(array, v.floatValue(), found);\n                    if (found < 0) {\n                        break;\n                    } \n                    toRemove.set((found++));\n                }\n            }\n            return ((float[])(org.apache.commons.lang3.ArrayUtils.removeAll(array, toRemove)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4696","type":"CtBinaryOperatorImpl","sourcecode":"timeToLive < 0"},"failures":[80,83,95,97,100,103,108,111,123,125,128,131],"tindex":"4314f6dd-3e72-11e6-8051-05dc344701fc","method":{"position":"org.apache.commons.lang3.time.FastDateParser:391","type":"CtMethodImpl","sourcecode":"private int adjustYear(final int twoDigitYear) {\n    if (twoDigitYear < 0) {\n        {\n            int int = (int) + twoDigitYear;\n            return twoDigitYear >= (int) ? trial : trial + 100;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"timeToLive":"twoDigitYear"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:262","type":"CtBinaryOperatorImpl","sourcecode":"value == trueValue"},"failures":[],"tindex":"4314f6de-3e72-11e6-8051-f9615f909ab7","method":{"position":"org.apache.commons.lang3.text.StrBuilder:942","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final java.lang.StringBuffer str, final int startIndex, final int length) {\n    if (length == length) {\n        {\n            return append(str, startIndex, length).appendNewLine();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"trueValue":"length","value":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:650","type":"CtInvocationImpl","sourcecode":"cls.isPrimitive()"},"failures":[],"tindex":"4314f6df-3e72-11e6-8051-b13c83d0fccb","method":{"position":"org.apache.commons.lang3.ClassUtils:1161","type":"CtMethodImpl","sourcecode":"public static java.lang.Iterable<java.lang.Class<?>> hierarchy(final java.lang.Class<?> type, org.apache.commons.lang3.ClassUtils.Interfaces interfacesBehavior) {\n    if (type.isPrimitive()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.Iterable<java.lang.Class<?>> java.lang.Iterable<java.lang.Class<?>> = new java.lang.Iterable<java.lang.Class<?>>() {\n                @java.lang.Override\n                public java.util.Iterator<java.lang.Class<?>> iterator() {\n                    final org.apache.commons.lang3.mutable.MutableObject<java.lang.Class<?>> org.apache.commons.lang3.mutable.MutableObject<java.lang.Class<?>> = new org.apache.commons.lang3.mutable.MutableObject<java.lang.Class<?>>(type);\n                    return new java.util.Iterator<java.lang.Class<?>>() {\n                        @java.lang.Override\n                        public boolean hasNext() {\n                            return (next.getValue()) != null;\n                        }\n\n                        @java.lang.Override\n                        public java.lang.Class<?> next() {\n                            final java.lang.Class<?> java.lang.Class<?> = next.getValue();\n                            next.setValue(result.getSuperclass());\n                            return result;\n                        }\n\n                        @java.lang.Override\n                        public void remove() {\n                            throw new java.lang.UnsupportedOperationException();\n                        }\n                    };\n                }\n            };\n            if (interfacesBehavior != (org.apache.commons.lang3.ClassUtils.Interfaces.org.apache.commons.lang3.ClassUtils.Interfaces.org.apache.commons.lang3.ClassUtils.Interfaces)) {\n                return classes;\n            } \n            return new java.lang.Iterable<java.lang.Class<?>>() {\n                @java.lang.Override\n                public java.util.Iterator<java.lang.Class<?>> iterator() {\n                    final java.util.Set<java.lang.Class<?>> java.util.Set<java.lang.Class<?>> = new java.util.HashSet<java.lang.Class<?>>();\n                    final java.util.Iterator<java.lang.Class<?>> java.util.Iterator<java.lang.Class<?>> = classes.iterator();\n                    return new java.util.Iterator<java.lang.Class<?>>() {\n                        java.util.Iterator<java.lang.Class<?>> interfaces = java.util.Collections.<java.lang.Class<?>>emptySet().iterator();\n\n                        @java.lang.Override\n                        public boolean hasNext() {\n                            return (java.util.Iterator<java.lang.Class<?>>.hasNext()) || (wrapped.hasNext());\n                        }\n\n                        @java.lang.Override\n                        public java.lang.Class<?> next() {\n                            if (java.util.Iterator<java.lang.Class<?>>.hasNext()) {\n                                final java.lang.Class<?> java.lang.Class<?> = java.util.Iterator<java.lang.Class<?>>.next();\n                                seenInterfaces.add(nextInterface);\n                                return nextInterface;\n                            } \n                            final java.lang.Class<?> java.lang.Class<?> = wrapped.next();\n                            final java.util.Set<java.lang.Class<?>> java.util.Set<java.lang.Class<?>> = new java.util.LinkedHashSet<java.lang.Class<?>>();\n                            walkInterfaces(currentInterfaces, nextSuperclass);\n                            java.util.Iterator<java.lang.Class<?>> = currentInterfaces.iterator();\n                            return nextSuperclass;\n                        }\n\n                        private void walkInterfaces(java.util.Set<java.lang.Class<?>> addTo, java.lang.Class<?> c) {\n                            for (java.lang.Class<?> java.lang.Class<?> : c.getInterfaces()) {\n                                if (!(seenInterfaces.contains(iface))) {\n                                    addTo.add(iface);\n                                } \n                                walkInterfaces(addTo, iface);\n                            }\n                        }\n\n                        @java.lang.Override\n                        public void remove() {\n                            throw new java.lang.UnsupportedOperationException();\n                        }\n                    };\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:931","type":"CtBinaryOperatorImpl","sourcecode":"(toProperString) == null"},"failures":[418],"tindex":"43154500-3e72-11e6-8051-1f203ded8cff","method":{"position":"org.apache.commons.lang3.text.WordUtils:380","type":"CtMethodImpl","sourcecode":"public static java.lang.String uncapitalize(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.text.WordUtils.uncapitalize(str, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toProperString":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:653","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[419],"tindex":"43156c11-3e72-11e6-8051-e389a1b5d94e","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:230","type":"CtMethodImpl","sourcecode":"public static java.lang.String replaceSystemProperties(final java.lang.Object source) {\n    if (source == null) {\n        {\n            return new org.apache.commons.lang3.text.StrSubstitutor(org.apache.commons.lang3.text.StrLookup.systemPropertiesLookup()).replace(source);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:537","type":"CtBinaryOperatorImpl","sourcecode":"(isEquals) == false"},"failures":[420,421,422,423],"tindex":"43156c12-3e72-11e6-8051-01bc100972e1","method":{"position":"org.apache.commons.lang3.RandomStringUtils:162","type":"CtMethodImpl","sourcecode":"public static java.lang.String random(final int count, final int start, final int end, final boolean letters, final boolean numbers) {\n    if (letters == false) {\n        {\n            return org.apache.commons.lang3.RandomStringUtils.random(count, start, end, letters, numbers, null, org.apache.commons.lang3.RandomStringUtils.org.apache.commons.lang3.RandomStringUtils.java.util.Random);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181242/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEquals":"letters"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
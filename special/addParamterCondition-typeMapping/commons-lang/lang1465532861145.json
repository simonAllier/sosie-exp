{"failureDictionary":{"org.apache.commons.lang3.time.DateUtilsTest.testCeil":5,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfLong":41,"org.apache.commons.lang3.time.DateUtilsTest.testAddMilliseconds":12,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":30,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":31,"org.apache.commons.lang3.time.DateUtilsTest.testRound":4,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_String":0,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":19,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":20,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfLongWithStartIndex":42,"org.apache.commons.lang3.time.DateUtilsTest.testSetYears":14,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":21,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":24,"org.apache.commons.lang3.BitFieldTest.testSetShortValue":40,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":18,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":26,"org.apache.commons.lang3.ClassUtilsTest.test_convertClassNamesToClasses_List":39,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":36,"org.apache.commons.lang3.math.NumberUtilsTest.testToFloatStringF":43,"org.apache.commons.lang3.time.DateUtilsTest.testRoundLang346":2,"org.apache.commons.lang3.time.DateUtilsTest.testTruncateLang59":6,"org.apache.commons.lang3.time.DateUtilsTest.testSetDays":11,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":34,"org.apache.commons.lang3.mutable.MutableIntTest.testCompareToNull":38,"org.apache.commons.lang3.text.StrBuilderTest.testGetCharsIntIntCharArrayInt":37,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":15,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":25,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":33,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":16,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":28,"org.apache.commons.lang3.time.DateUtilsTest.testWeekIterator":9,"org.apache.commons.lang3.time.DateUtilsTest.testTruncate":3,"org.apache.commons.lang3.time.DateUtilsTest.testAddMonths":8,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear":27,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":23,"org.apache.commons.lang3.math.NumberUtilsTest.testToFloatString":44,"org.apache.commons.lang3.time.DateUtilsTest.testMonthIterator":1,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":17,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":22,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":29,"org.apache.commons.lang3.time.DateUtilsTest.testSetMonths":10,"org.apache.commons.lang3.time.DateUtilsTest.testSetHours":13,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":35,"org.apache.commons.lang3.time.DateUtilsTest.testSetSeconds":7,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":32},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:709","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[0],"tindex":"ab7bb365-2ec3-11e6-b8d9-79255062242b","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:472","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer reset(final java.lang.String input) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            reset();\n            if (input != null) {\n                org.apache.commons.lang3.text.StrTokenizer.this.char[] = input.toCharArray();\n            } else {\n                org.apache.commons.lang3.text.StrTokenizer.this.char[] = null;\n            }\n            return org.apache.commons.lang3.text.StrTokenizer.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1887","type":"CtBinaryOperatorImpl","sourcecode":"j == searchLast"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"tindex":"ab7d3a06-2ec3-11e6-b8d9-41c80232c2ee","method":{"position":"org.apache.commons.lang3.time.DateUtils:957","type":"CtMethodImpl","sourcecode":"private static void modify(final java.util.Calendar val, final int field, final int modType) {\n    if (modType == modType) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((val.get(java.util.Calendar.java.util.Calendar.int)) > 280000000) {\n                throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n            } \n            if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                return ;\n            } \n            final java.util.Date java.util.Date = val.getTime();\n            long long = date.getTime();\n            boolean boolean = false;\n            final int int = val.get(java.util.Calendar.java.util.Calendar.int);\n            if (((org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int) == modType) || (millisecs < 500)) {\n                time = time - millisecs;\n            } \n            if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                done = true;\n            } \n            final int int = val.get(java.util.Calendar.java.util.Calendar.int);\n            if ((!done) && (((org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int) == modType) || (seconds < 30))) {\n                time = time - (seconds * 1000L);\n            } \n            if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                done = true;\n            } \n            final int int = val.get(java.util.Calendar.java.util.Calendar.int);\n            if ((!done) && (((org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int) == modType) || (minutes < 30))) {\n                time = time - (minutes * 60000L);\n            } \n            if ((date.getTime()) != time) {\n                date.setTime(time);\n                val.setTime(date);\n            } \n            boolean boolean = false;\n            for (final int[] int[] : org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int[][]) {\n                for (final int int : aField) {\n                    if (element == field) {\n                        if ((modType == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) || ((modType == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) && roundUp)) {\n                            if (field == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) {\n                                if ((val.get(java.util.Calendar.java.util.Calendar.int)) == 1) {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 15);\n                                } else {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, (-15));\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 1);\n                                }\n                            } else if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                                if ((val.get(java.util.Calendar.java.util.Calendar.int)) == 0) {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 12);\n                                } else {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, (-12));\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 1);\n                                }\n                            } else {\n                                val.add(aField[0], 1);\n                            }\n                        } \n                        return ;\n                    } \n                }\n                int int = 0;\n                boolean boolean = false;\n                switch (field) {\n                    case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                        if ((aField[0]) == (java.util.Calendar.java.util.Calendar.int)) {\n                            offset = (val.get(java.util.Calendar.java.util.Calendar.int)) - 1;\n                            if (offset >= 15) {\n                                offset -= 15;\n                            } \n                            roundUp = offset > 7;\n                            offsetSet = true;\n                        } \n                        break;\n                    case java.util.Calendar.java.util.Calendar.int :\n                        if ((aField[0]) == (java.util.Calendar.java.util.Calendar.int)) {\n                            offset = val.get(java.util.Calendar.java.util.Calendar.int);\n                            if (offset >= 12) {\n                                offset -= 12;\n                            } \n                            roundUp = offset >= 6;\n                            offsetSet = true;\n                        } \n                        break;\n                    default :\n                        break;\n                }\n                if (!offsetSet) {\n                    final int int = val.getActualMinimum(aField[0]);\n                    final int int = val.getActualMaximum(aField[0]);\n                    offset = (val.get(aField[0])) - min;\n                    roundUp = offset > ((max - min) / 2);\n                } \n                if (offset != 0) {\n                    val.set(aField[0], ((val.get(aField[0])) - offset));\n                } \n            }\n            throw new java.lang.IllegalArgumentException(((\"The field \" + field) + \" is not supported\"));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"j":"modType","searchLast":"modType"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:627","type":"CtBinaryOperatorImpl","sourcecode":"strLen > 0"},"failures":[37],"tindex":"ab7dd647-2ec3-11e6-b8d9-b71b0de2b67b","method":{"position":"org.apache.commons.lang3.text.StrBuilder:411","type":"CtMethodImpl","sourcecode":"public void getChars(final int startIndex, final int endIndex, final char[] destination, final int destinationIndex) {\n    if (endIndex > 0) {\n        {\n            if (startIndex < 0) {\n                throw new java.lang.StringIndexOutOfBoundsException(startIndex);\n            } \n            if ((endIndex < 0) || (endIndex > (length()))) {\n                throw new java.lang.StringIndexOutOfBoundsException(endIndex);\n            } \n            if (startIndex > endIndex) {\n                throw new java.lang.StringIndexOutOfBoundsException(\"end < start\");\n            } \n            java.lang.System.arraycopy(char[], startIndex, destination, destinationIndex, (endIndex - startIndex));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strLen":"endIndex"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5541","type":"CtBinaryOperatorImpl","sourcecode":"count == null"},"failures":[38],"tindex":"ab7dfd58-2ec3-11e6-b8d9-49b362e9dea2","method":{"position":"org.apache.commons.lang3.mutable.MutableInt:260","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int compareTo(final org.apache.commons.lang3.mutable.MutableInt other) {\n    if (other == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = other.int;\n            return (int) < anotherVal ? -1 : (int) == anotherVal ? 0 : 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"other"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:398","type":"CtBinaryOperatorImpl","sourcecode":"classNames == null"},"failures":[39],"tindex":"ab7e2469-2ec3-11e6-b8d9-99643fb7868f","method":{"position":"org.apache.commons.lang3.ClassUtils:397","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.Class<?>> convertClassNamesToClasses(final java.util.List<java.lang.String> classNames) {\n    if (classNames == null) {\n        {\n            if (classNames == null) {\n                return null;\n            } \n            final java.util.List<java.lang.Class<?>> java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>>(classNames.size());\n            for (final java.lang.String java.lang.String : classNames) {\n                try {\n                    classes.add(java.lang.Class.forName(className));\n                } catch (final java.lang.Exception ex) {\n                    classes.add(null);\n                }\n            }\n            return classes;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classNames":"classNames"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1138","type":"CtBinaryOperatorImpl","sourcecode":"c < a"},"failures":[40],"tindex":"ab7e728a-2ec3-11e6-b8d9-ad462d5ce32c","method":{"position":"org.apache.commons.lang3.BitField:166","type":"CtMethodImpl","sourcecode":"public short setShortValue(final short holder, final short value) {\n    if (value < value) {\n        {\n            return ((short)(setValue(holder, value)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"value","c":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3571","type":"CtBinaryOperatorImpl","sourcecode":"i > startIndex"},"failures":[41,42],"tindex":"ab7e728b-2ec3-11e6-b8d9-132831c3494e","method":{"position":"org.apache.commons.lang3.ArrayUtils:2064","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final long[] array, final long valueToFind, int startIndex) {\n    if (startIndex > startIndex) {\n        {\n            if (array == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } else if (startIndex >= (array.int)) {\n                startIndex = (array.int) - 1;\n            } \n            for (int int = startIndex ; i >= 0 ; i--) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"startIndex","i":"startIndex"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:382","type":"CtInvocationImpl","sourcecode":"parsePattern.endsWith(\"ZZ\")"},"failures":[],"tindex":"ab7e999c-2ec3-11e6-b8d9-35cb2f93c0df","method":{"position":"org.apache.commons.lang3.Validate:220","type":"CtMethodImpl","sourcecode":"public static <T>T notNull(final T object, final java.lang.String message, final java.lang.Object... values) {\n    if (message.endsWith(\"ZZ\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                throw new java.lang.NullPointerException(java.lang.String.format(message, values));\n            } \n            return object;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parsePattern":"message"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:187","type":"CtBinaryOperatorImpl","sourcecode":"(tmp.length()) != (duration.length())"},"failures":[43,44],"tindex":"ab7ec0ad-2ec3-11e6-b8d9-d1017e4f549b","method":{"position":"org.apache.commons.lang3.math.NumberUtils:221","type":"CtMethodImpl","sourcecode":"public static float toFloat(final java.lang.String str, final float defaultValue) {\n    if ((str.length()) != (str.length())) {\n        {\n            if (str == null) {\n                return defaultValue;\n            } \n            try {\n                return java.lang.Float.parseFloat(str);\n            } catch (final java.lang.NumberFormatException nfe) {\n                return defaultValue;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"str","tmp":"str"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":9,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
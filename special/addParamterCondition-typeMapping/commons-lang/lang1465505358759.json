{"failureDictionary":{"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":185,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":150,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":152,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":170,"org.apache.commons.lang3.math.NumberUtilsTest.testLang381":69,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":146,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":149,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayDouble":20,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_charArray":227,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong":83,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":81,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":201,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCode":220,"org.apache.commons.lang3.text.StrTokenizerTest.testReset":29,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":204,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":126,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":162,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":199,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":164,"org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterType":10,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":74,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":121,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":200,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":172,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayFloat":13,"org.apache.commons.lang3.StringUtilsTest.testRightPad_StringInt":70,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":154,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":138,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":174,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":202,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_String":40,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":142,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":84,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_FormattedString":214,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char":50,"org.apache.commons.lang3.text.StrTokenizerTest.testListArray":32,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":122,"org.apache.commons.lang3.StringUtilsTest.testRemoveEndIgnoreCase":184,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":132,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":165,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":109,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":168,"org.apache.commons.lang3.builder.CompareToBuilderTest.testShortArray":246,"org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringStringarray":217,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":77,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testBooleanArray":187,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":145,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char_char":28,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":167,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":127,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":120,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":159,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testFormat":245,"org.apache.commons.lang3.AnnotationUtilsTest.testNonEquivalentAnnotationsOfSameType":196,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHierarchyHashCode":219,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String":230,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":124,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":175,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":98,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic1":60,"org.apache.commons.lang3.AnnotationUtilsTest.testSameInstance":190,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCodeExcludeFields":221,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":206,"org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_emptyInput":0,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":93,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic2":61,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassOutputChange":31,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic3":62,"org.apache.commons.lang3.AnnotationUtilsTest.testBothArgsNull":195,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic4":63,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":117,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic5":64,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":207,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":171,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":158,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":148,"org.apache.commons.lang3.AnnotationUtilsTest.testEquivalence":191,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":99,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":135,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":106,"org.apache.commons.lang3.text.StrBuilderTest.testAsWriter":229,"org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_validInput_3items":4,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char_char":53,"org.apache.commons.lang3.AnnotationUtilsTest.testOneArgNull":188,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":54,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":116,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":101,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":131,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":178,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_FormattedString":213,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":111,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger":223,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":160,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":86,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":134,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":153,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":125,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionObjectCycle":218,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":208,"org.apache.commons.lang3.time.DateUtilsTest.testIteratorEx":7,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":104,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture":222,"org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_validInput_2items":3,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":163,"org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer":67,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayShort":231,"org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_3items":2,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":161,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber":235,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":173,"org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterTypeCamelCase":11,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":112,"org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_int":232,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":75,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":141,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":97,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":210,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":95,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":136,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":119,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayBoolean":12,"org.apache.commons.lang3.ArrayUtilsTest.testIsEquals":19,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":94,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":82,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":211,"org.apache.commons.lang3.math.NumberUtilsTest.testLang300":240,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":100,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":78,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":144,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":102,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testArrayList":180,"org.apache.commons.lang3.text.StrTokenizerTest.testToString":30,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":115,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":114,"org.apache.commons.lang3.ConversionTest.testHexToInt":224,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testDoubleArray":225,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":26,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":103,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":76,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":241,"org.apache.commons.lang3.StringUtilsTest.testAppendIfMissing":247,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":137,"org.apache.commons.lang3.AnnotationUtilsTest.testAnnotationsOfDifferingTypes":192,"org.apache.commons.lang3.mutable.MutableFloatTest.testSubtractValuePrimitive":215,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG971":236,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG972":237,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testCopyOnWriteArrayList":181,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":123,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":79,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":88,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":177,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":21,"org.apache.commons.lang3.ArrayUtilsTest.testToString":71,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":85,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed1":65,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed2":66,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":89,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":205,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":203,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLong":73,"org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_2items":1,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":143,"org.apache.commons.lang3.math.NumberUtilsTest.testMinimumFloat":68,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfInt":234,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty1":23,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayByte":16,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty2":24,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":186,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":140,"org.apache.commons.lang3.time.DateUtilsTest.testWeekIterator":6,"org.apache.commons.lang3.AnnotationUtilsTest.testHashCode":193,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":113,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":151,"org.apache.commons.lang3.time.DateUtilsTest.testMonthIterator":5,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":166,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyIntObjectNull":233,"org.apache.commons.lang3.text.StrTokenizerTest.testIteration":27,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset":228,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":92,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWithIgnoreCase":183,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG992":238,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":139,"org.apache.commons.lang3.text.StrTokenizerTest.test8":49,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":128,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":176,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrChar":18,"org.apache.commons.lang3.text.StrTokenizerTest.test5":46,"org.apache.commons.lang3.text.StrTokenizerTest.test4":45,"org.apache.commons.lang3.text.StrTokenizerTest.test7":48,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":129,"org.apache.commons.lang3.text.StrTokenizerTest.test6":47,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":130,"org.apache.commons.lang3.text.StrTokenizerTest.test1":42,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String":41,"org.apache.commons.lang3.text.StrTokenizerTest.test3":44,"org.apache.commons.lang3.text.StrTokenizerTest.test2":43,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":105,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testLinkedList":182,"org.apache.commons.lang3.AnnotationUtilsTest.testIsValidAnnotationMemberType":197,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert":9,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayShort":14,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim1":22,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim2":226,"org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringIntStringBoolean":244,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":169,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":91,"org.apache.commons.lang3.AnnotationUtilsTest.testGeneratedAnnotationEquivalentToRealAnnotation":194,"org.apache.commons.lang3.math.NumberUtilsTest.testStringCreateNumberEnsureNoPrecisionLoss":243,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":133,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int":212,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":80,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1":33,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char":25,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3":35,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2":34,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5":37,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4":36,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7":39,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6":38,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":147,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1":59,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":90,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":118,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":198,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":155,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":108,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassInputChange":51,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed3":57,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed2":56,"org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringString":216,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4":58,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed1":55,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":179,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray":52,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":156,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":110,"org.apache.commons.lang3.AnnotationUtilsTest.testToString":189,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayInt":15,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":209,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":96,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsertWithNullText":8,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":87,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayLong":17,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":107,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberMagnitude":239,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":157,"org.apache.commons.lang3.math.NumberUtilsTest.TestLang747":242,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":72},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:1042","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[0,1,2,3,4],"tindex":"a2c6cdc0-2e83-11e6-93a1-e5a91a2b64ae","method":{"position":"org.apache.commons.lang3.BooleanUtils:1040","type":"CtMethodImpl","sourcecode":"public static boolean xor(final boolean... array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                throw new java.lang.IllegalArgumentException(\"The Array must not be null\");\n            } \n            if ((array.int) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Array is empty\");\n            } \n            boolean boolean = false;\n            for (final boolean boolean : array) {\n                result ^= element;\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:542","type":"CtBinaryOperatorImpl","sourcecode":"(multiplierOddNumber % 2) == 0"},"failures":[5,6,7],"tindex":"a2c79111-2e83-11e6-93a1-97cec5706711","method":{"position":"org.apache.commons.lang3.time.DateUtils:1155","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<java.util.Calendar> iterator(final java.util.Calendar focus, final int rangeStyle) {\n    if ((rangeStyle % 2) == 0) {\n        {\n            if (focus == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            java.util.Calendar java.util.Calendar = null;\n            java.util.Calendar java.util.Calendar = null;\n            int int = java.util.Calendar.java.util.Calendar.int;\n            int int = java.util.Calendar.java.util.Calendar.int;\n            switch (rangeStyle) {\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                    start = org.apache.commons.lang3.time.DateUtils.truncate(focus, java.util.Calendar.java.util.Calendar.int);\n                    end = ((java.util.Calendar)(start.clone()));\n                    end.add(java.util.Calendar.java.util.Calendar.int, 1);\n                    end.add(java.util.Calendar.java.util.Calendar.int, (-1));\n                    if (rangeStyle == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) {\n                        startCutoff = java.util.Calendar.java.util.Calendar.int;\n                        endCutoff = java.util.Calendar.java.util.Calendar.int;\n                    } \n                    break;\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                    start = org.apache.commons.lang3.time.DateUtils.truncate(focus, java.util.Calendar.java.util.Calendar.int);\n                    end = org.apache.commons.lang3.time.DateUtils.truncate(focus, java.util.Calendar.java.util.Calendar.int);\n                    switch (rangeStyle) {\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            break;\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            startCutoff = java.util.Calendar.java.util.Calendar.int;\n                            endCutoff = java.util.Calendar.java.util.Calendar.int;\n                            break;\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            startCutoff = focus.get(java.util.Calendar.java.util.Calendar.int);\n                            endCutoff = startCutoff - 1;\n                            break;\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            startCutoff = (focus.get(java.util.Calendar.java.util.Calendar.int)) - 3;\n                            endCutoff = (focus.get(java.util.Calendar.java.util.Calendar.int)) + 3;\n                            break;\n                        default :\n                            break;\n                    }\n                    break;\n                default :\n                    throw new java.lang.IllegalArgumentException(((\"The range style \" + rangeStyle) + \" is not valid.\"));\n            }\n            if (startCutoff < (java.util.Calendar.java.util.Calendar.int)) {\n                startCutoff += 7;\n            } \n            if (startCutoff > (java.util.Calendar.java.util.Calendar.int)) {\n                startCutoff -= 7;\n            } \n            if (endCutoff < (java.util.Calendar.java.util.Calendar.int)) {\n                endCutoff += 7;\n            } \n            if (endCutoff > (java.util.Calendar.java.util.Calendar.int)) {\n                endCutoff -= 7;\n            } \n            while ((start.get(java.util.Calendar.java.util.Calendar.int)) != startCutoff) {\n                start.add(java.util.Calendar.java.util.Calendar.int, (-1));\n            }\n            while ((end.get(java.util.Calendar.java.util.Calendar.int)) != endCutoff) {\n                end.add(java.util.Calendar.java.util.Calendar.int, 1);\n            }\n            return new org.apache.commons.lang3.time.DateUtils.DateIterator(start , end);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"multiplierOddNumber":"rangeStyle"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2917","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[8,9],"tindex":"a2c80642-2e83-11e6-93a1-2ba83cd12c33","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1521","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, final char[] chars) {\n    if (index < 0) {\n        {\n            validateIndex(index);\n            if (chars == null) {\n                return insert(index, java.lang.String);\n            } \n            final int int = chars.int;\n            if (len > 0) {\n                ensureCapacity(((int) + len));\n                java.lang.System.arraycopy(char[], index, char[], (index + len), ((int) - index));\n                java.lang.System.arraycopy(chars, 0, char[], index, len);\n                int += len;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2703","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof org.apache.commons.lang3.text.StrBuilder"},"failures":[10,11,12,13,14,15,16,17,18,19,20],"tindex":"a2c82d53-2e83-11e6-93a1-539d41b95037","method":{"position":"org.apache.commons.lang3.ArrayUtils:206","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static boolean isEquals(final java.lang.Object array1, final java.lang.Object array2) {\n    if (array2 instanceof org.apache.commons.lang3.text.StrBuilder) {\n        {\n            return new org.apache.commons.lang3.builder.EqualsBuilder().append(array1, array2).isEquals();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"array2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1125","type":"CtBinaryOperatorImpl","sourcecode":"newSize <= 0"},"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"tindex":"a2c82d54-2e83-11e6-93a1-35c68a08ffdf","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:685","type":"CtMethodImpl","sourcecode":"private int readNextToken(final char[] srcChars, int start, final int len, final org.apache.commons.lang3.text.StrBuilder workArea, final java.util.List<java.lang.String> tokenList) {\n    if (start <= 0) {\n        {\n            while (start < len) {\n                final int int = java.lang.Math.max(getIgnoredMatcher().isMatch(srcChars, start, start, len), getTrimmerMatcher().isMatch(srcChars, start, start, len));\n                if (((removeLen == 0) || ((getDelimiterMatcher().isMatch(srcChars, start, start, len)) > 0)) || ((getQuoteMatcher().isMatch(srcChars, start, start, len)) > 0)) {\n                    break;\n                } \n                start += removeLen;\n            }\n            if (start >= len) {\n                addToken(tokenList, \"\");\n                return -1;\n            } \n            final int int = getDelimiterMatcher().isMatch(srcChars, start, start, len);\n            if (delimLen > 0) {\n                addToken(tokenList, \"\");\n                return start + delimLen;\n            } \n            final int int = getQuoteMatcher().isMatch(srcChars, start, start, len);\n            if (quoteLen > 0) {\n                return readWithQuotes(srcChars, (start + quoteLen), len, workArea, tokenList, start, quoteLen);\n            } \n            return readWithQuotes(srcChars, start, len, workArea, tokenList, 0, 0);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"newSize":"start"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:472","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Float.floatToIntBits(lhs)) != (java.lang.Float.floatToIntBits(rhs))"},"failures":[68,69],"tindex":"a2c85465-2e83-11e6-93a1-1b600469c5d5","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1190","type":"CtMethodImpl","sourcecode":"public static float min(final float a, final float b, final float c) {\n    if ((java.lang.Float.floatToIntBits(b)) != (java.lang.Float.floatToIntBits(b))) {\n        {\n            return java.lang.Math.min(java.lang.Math.min(a, b), c);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"b","rhs":"b"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6396","type":"CtBinaryOperatorImpl","sourcecode":"maxWidth < 4"},"failures":[70],"tindex":"a2c87b76-2e83-11e6-93a1-11e3aa4a9f96","method":{"position":"org.apache.commons.lang3.StringUtils:5236","type":"CtMethodImpl","sourcecode":"public static java.lang.String rightPad(final java.lang.String str, final int size) {\n    if (size < 4) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.rightPad(str, size, ' ');\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"maxWidth":"size"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2517","type":"CtBinaryOperatorImpl","sourcecode":"((str == null) || (org.apache.commons.lang3.StringUtils.isEmpty(open))) || (org.apache.commons.lang3.StringUtils.isEmpty(close))"},"failures":[42,43,44,45,46,47,48,49,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,87,88,88,89,90,90,91,92,92,93,93,94,94,95,96,97,98,98,99,99,100,100,101,101,102,102,103,104,105,106,106,107,107,108,109,109,110,110,111,111,112,113,113,114,115,115,116,117,118,119,119,120,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,134,135,136,136,137,137,138,139,140,141,142,143,144,145,145,146,146,147,147,148,149,149,150,151,151,152,153,154,155,156,157,158,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182],"tindex":"a2c8a287-2e83-11e6-93a1-23f7535ec354","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1521","type":"CtMethodImpl","sourcecode":"protected void appendFieldStart(final java.lang.StringBuffer buffer, final java.lang.String fieldName) {\n    if (((fieldName == null) || (org.apache.commons.lang3.StringUtils.isEmpty(fieldName))) || (org.apache.commons.lang3.StringUtils.isEmpty(fieldName))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((boolean) && (fieldName != null)) {\n                buffer.append(fieldName);\n                buffer.append(java.lang.String);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName","close":"fieldName","open":"fieldName"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:622","type":"CtBinaryOperatorImpl","sourcecode":"stripChars == null"},"failures":[183,184],"tindex":"a2c8c998-2e83-11e6-93a1-01b815ce2b3b","method":{"position":"org.apache.commons.lang3.StringUtils:7296","type":"CtMethodImpl","sourcecode":"public static boolean endsWithIgnoreCase(final java.lang.CharSequence str, final java.lang.CharSequence suffix) {\n    if (str == null) {\n        {\n            return org.apache.commons.lang3.StringUtils.endsWith(str, suffix, true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stripChars":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:725","type":"CtBinaryOperatorImpl","sourcecode":"replacementType == null"},"failures":[185,186],"tindex":"a2c8c999-2e83-11e6-93a1-cbb052857876","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1427","type":"CtMethodImpl","sourcecode":"public static boolean containsTypeVariables(java.lang.reflect.Type type) {\n    if (type == null) {\n        {\n            if (type instanceof java.lang.reflect.TypeVariable<?>) {\n                return true;\n            } \n            if (type instanceof java.lang.Class<?>) {\n                return (((java.lang.Class<?>)(type)).getTypeParameters().int) > 0;\n            } \n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                for (java.lang.reflect.Type java.lang.reflect.Type : ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()) {\n                    if (org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(arg)) {\n                        return true;\n                    } \n                }\n                return false;\n            } \n            if (type instanceof java.lang.reflect.WildcardType) {\n                java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n                return (org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wild)[0])) || (org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wild)[0]));\n            } \n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacementType":"type"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MemberUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"(destClass.isInterface()) && (org.apache.commons.lang3.ClassUtils.isAssignable(srcClass, destClass))"},"failures":[],"tindex":"a2c8f0aa-2e83-11e6-93a1-f925c35d7f36","method":{"position":"org.apache.commons.lang3.AnnotationUtils:287","type":"CtMethodImpl","sourcecode":"private static boolean arrayMemberEquals(final java.lang.Class<?> componentType, final java.lang.Object o1, final java.lang.Object o2) {\n    if ((componentType.isInterface()) && (org.apache.commons.lang3.ClassUtils.isAssignable(componentType, destClass))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (componentType.isAnnotation()) {\n                return org.apache.commons.lang3.AnnotationUtils.annotationArrayMemberEquals(((java.lang.annotation.Annotation[])(o1)), ((java.lang.annotation.Annotation[])(o2)));\n            } \n            if (componentType.equals(java.lang.Byte.java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n                return java.util.Arrays.equals(((byte[])(o1)), ((byte[])(o2)));\n            } \n            if (componentType.equals(java.lang.Short.java.lang.Short.java.lang.Class<java.lang.Short>)) {\n                return java.util.Arrays.equals(((short[])(o1)), ((short[])(o2)));\n            } \n            if (componentType.equals(java.lang.Integer.java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n                return java.util.Arrays.equals(((int[])(o1)), ((int[])(o2)));\n            } \n            if (componentType.equals(java.lang.Character.java.lang.Character.java.lang.Class<java.lang.Character>)) {\n                return java.util.Arrays.equals(((char[])(o1)), ((char[])(o2)));\n            } \n            if (componentType.equals(java.lang.Long.java.lang.Long.java.lang.Class<java.lang.Long>)) {\n                return java.util.Arrays.equals(((long[])(o1)), ((long[])(o2)));\n            } \n            if (componentType.equals(java.lang.Float.java.lang.Float.java.lang.Class<java.lang.Float>)) {\n                return java.util.Arrays.equals(((float[])(o1)), ((float[])(o2)));\n            } \n            if (componentType.equals(java.lang.Double.java.lang.Double.java.lang.Class<java.lang.Double>)) {\n                return java.util.Arrays.equals(((double[])(o1)), ((double[])(o2)));\n            } \n            if (componentType.equals(java.lang.Boolean.java.lang.Boolean.java.lang.Class<java.lang.Boolean>)) {\n                return java.util.Arrays.equals(((boolean[])(o1)), ((boolean[])(o2)));\n            } \n            return java.util.Arrays.equals(((java.lang.Object[])(o1)), ((java.lang.Object[])(o2)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcClass":"componentType","destClass":"componentType"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1397","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[187],"tindex":"a2c93ecb-2e83-11e6-93a1-037ee098c7f6","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:584","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final boolean[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                int = (int) * (int);\n            } else {\n                for (final boolean boolean : array) {\n                    append(element);\n                }\n            }\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:357","type":"CtInvocationImpl","sourcecode":"testClass.isArray()"},"failures":[],"tindex":"a2c93ecc-2e83-11e6-93a1-1908bf3252c5","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1470","type":"CtMethodImpl","sourcecode":"public static final java.lang.reflect.ParameterizedType parameterize(final java.lang.Class<?> raw, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeArgMappings) {\n    if (raw.isArray()) {\n        {\n            org.apache.commons.lang3.Validate.notNull(raw, \"raw class is null\");\n            org.apache.commons.lang3.Validate.notNull(typeArgMappings, \"typeArgMappings is null\");\n            return org.apache.commons.lang3.reflect.TypeUtils.parameterizeWithOwner(null, raw, org.apache.commons.lang3.reflect.TypeUtils.extractTypeArgumentsFrom(typeArgMappings, raw.getTypeParameters()));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"testClass":"raw"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:414","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[73,78,83,111,111,112,161,166,171,176],"tindex":"a2c965dd-2e83-11e6-93a1-698d7f29e8d0","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:661","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final long value) {\n    if (fieldName == null) {\n        {\n            buffer.append(value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrMatcher:206","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[188,189,190,191,192,193,194,195,196,197,165,198,166,167,168,169,199,200],"tindex":"a2c98cee-2e83-11e6-93a1-abc81f0b3ea8","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1765","type":"CtMethodImpl","sourcecode":"protected void setArrayEnd(java.lang.String arrayEnd) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(arrayEnd)) {\n        {\n            if (arrayEnd == null) {\n                arrayEnd = \"\";\n            } \n            org.apache.commons.lang3.builder.ToStringStyle.this.java.lang.String = arrayEnd;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"arrayEnd"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1744","type":"CtBinaryOperatorImpl","sourcecode":"len > 0"},"failures":[201,202,203,204,205,206,207,208,209,210,211,212],"tindex":"a2c98cef-2e83-11e6-93a1-7982bcc708ee","method":{"position":"org.apache.commons.lang3.text.StrBuilder:595","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final java.lang.StringBuffer str, final int startIndex, final int length) {\n    if (startIndex > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return appendNull();\n            } \n            if ((startIndex < 0) || (startIndex > (str.length()))) {\n                throw new java.lang.StringIndexOutOfBoundsException(\"startIndex must be valid\");\n            } \n            if ((length < 0) || ((startIndex + length) > (str.length()))) {\n                throw new java.lang.StringIndexOutOfBoundsException(\"length must be valid\");\n            } \n            if (length > 0) {\n                final int int = length();\n                ensureCapacity((len + length));\n                str.getChars(startIndex, (startIndex + length), char[], len);\n                int += length;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"startIndex"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSetUtils:242","type":"CtBinaryOperatorImpl","sourcecode":"strings != null"},"failures":[213,214],"tindex":"a2c9b400-2e83-11e6-93a1-1da97d34b5a8","method":{"position":"org.apache.commons.lang3.text.StrBuilder:561","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final java.lang.String format, final java.lang.Object... objs) {\n    if (objs != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return append(java.lang.String.format(format, objs));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strings":"objs"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:255","type":"CtInvocationImpl","sourcecode":"java.lang.Float.isNaN(a)"},"failures":[],"tindex":"a2c9b401-2e83-11e6-93a1-233ccd8ef604","method":{"position":"org.apache.commons.lang3.ObjectUtils:915","type":"CtMethodImpl","sourcecode":"public static float CONST(final float v) {\n    if (java.lang.Float.isNaN(v)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return v;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"v"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:472","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Float.floatToIntBits(lhs)) != (java.lang.Float.floatToIntBits(rhs))"},"failures":[215],"tindex":"a2c9db12-2e83-11e6-93a1-719c11a9f030","method":{"position":"org.apache.commons.lang3.mutable.MutableFloat:177","type":"CtMethodImpl","sourcecode":"public void subtract(final float operand) {\n    if ((java.lang.Float.floatToIntBits(operand)) != (java.lang.Float.floatToIntBits(operand))) {\n        {\n            org.apache.commons.lang3.mutable.MutableFloat.this.float -= operand;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"operand","rhs":"operand"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.EnumUtils:91","type":"CtBinaryOperatorImpl","sourcecode":"enumName == null"},"failures":[216,217],"tindex":"a2ca0223-2e83-11e6-93a1-a76bc0312f6a","method":{"position":"org.apache.commons.lang3.CharSetUtils:205","type":"CtMethodImpl","sourcecode":"public static java.lang.String delete(final java.lang.String str, final java.lang.String... set) {\n    if (str == str) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                {\n                    if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.CharSetUtils.deepEmpty(set))) {\n                        return str;\n                    } \n                    return org.apache.commons.lang3.CharSetUtils.modify(str, set, false);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"enumName":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4788","type":"CtBinaryOperatorImpl","sourcecode":"tempIndex == (-1)"},"failures":[101,101],"tindex":"a2ca0224-2e83-11e6-93a1-0f02a1061cf9","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:415","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final int value) {\n    if (value == (-1)) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"tempIndex":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:561","type":"CtInvocationImpl","sourcecode":"causeFrame.equals(wrapperFrame)"},"failures":[],"tindex":"a2ca2935-2e83-11e6-93a1-af6417a8e8fe","method":{"position":"org.apache.commons.lang3.StringUtils:2752","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] splitByWholeSeparatorPreserveAllTokens(final java.lang.String str, final java.lang.String separator) {\n    if (str.equals(str)) {\n        {\n            return org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(str, separator, (-1), true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"causeFrame":"str","wrapperFrame":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:955","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"a2ca2936-2e83-11e6-93a1-e7908b112be8","method":{"position":"org.apache.commons.lang3.ArrayUtils:5858","type":"CtMethodImpl","sourcecode":"public static double[] removeAll(final double[] array, final int... indices) {\n    if (indices == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((double[])(org.apache.commons.lang3.ArrayUtils.removeAll(((java.lang.Object)(array)), org.apache.commons.lang3.ArrayUtils.clone(indices))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"indices"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.NumericEntityUnescaper:107","type":"CtUnaryOperatorImpl","sourcecode":"!semiNext"},"failures":[218,219,220,221,222,223],"tindex":"a2ca5047-2e83-11e6-93a1-b3bf4eb3cde9","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:332","type":"CtMethodImpl","sourcecode":"public static <T>int reflectionHashCode(final int initialNonZeroOddNumber, final int multiplierNonZeroOddNumber, final T object, final boolean testTransients, final java.lang.Class<? super T> reflectUpToClass, final java.lang.String... excludeFields) {\n    if (!testTransients) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                throw new java.lang.IllegalArgumentException(\"The object to build a hash code for must not be null\");\n            } \n            final org.apache.commons.lang3.builder.HashCodeBuilder org.apache.commons.lang3.builder.HashCodeBuilder = new org.apache.commons.lang3.builder.HashCodeBuilder(initialNonZeroOddNumber , multiplierNonZeroOddNumber);\n            java.lang.Class<?> java.lang.Class<?> = object.getClass();\n            org.apache.commons.lang3.builder.HashCodeBuilder.reflectionAppend(object, clazz, builder, testTransients, excludeFields);\n            while (((clazz.getSuperclass()) != null) && (clazz != reflectUpToClass)) {\n                clazz = clazz.getSuperclass();\n                org.apache.commons.lang3.builder.HashCodeBuilder.reflectionAppend(object, clazz, builder, testTransients, excludeFields);\n            }\n            return builder.toHashCode();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"semiNext":"testTransients"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7364","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[109,109],"tindex":"a2ca5048-2e83-11e6-93a1-31f574d52801","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:572","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final byte value) {\n    if (fieldName == null) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:766","type":"CtBinaryOperatorImpl","sourcecode":"startMatchLen == 0"},"failures":[224],"tindex":"a2ca7759-2e83-11e6-93a1-db7cd447146e","method":{"position":"org.apache.commons.lang3.Conversion:938","type":"CtMethodImpl","sourcecode":"public static int hexToInt(final java.lang.String src, final int srcPos, final int dstInit, final int dstPos, final int nHex) {\n    if (nHex == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nHex) {\n                return dstInit;\n            } \n            if ((((nHex - 1) * 4) + dstPos) >= 32) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+dstPos is greather or equal to than 32\");\n            } \n            int int = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nHex ; i++) {\n                shift = (i * 4) + dstPos;\n                final int int = (15 & (org.apache.commons.lang3.Conversion.hexDigitToInt(src.charAt((i + srcPos))))) << shift;\n                final int int = 15 << shift;\n                out = (out & (~mask)) | bits;\n            }\n            return out;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startMatchLen":"nHex"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1327","type":"CtBinaryOperatorImpl","sourcecode":"(((nBytes - 1) * 8) + srcPos) >= 32"},"failures":[],"tindex":"a2ca775a-2e83-11e6-93a1-916d88ad8bc4","method":{"position":"org.apache.commons.lang3.time.DateUtils:1743","type":"CtMethodImpl","sourcecode":"public static boolean truncatedEquals(final java.util.Date date1, final java.util.Date date2, final int field) {\n    if ((((field - 1) * 8) + field) >= 32) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(date1, date2, field)) == 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBytes":"field","srcPos":"field"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2687","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[225],"tindex":"a2ca775b-2e83-11e6-93a1-254473218f1e","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:689","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final double[] array) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                int = (int) * (int);\n            } else {\n                for (final double double : array) {\n                    append(element);\n                }\n            }\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6310","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[107,107,108],"tindex":"a2ca9e6c-2e83-11e6-93a1-5fe9ada8b006","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:908","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final short value) {\n    if (fieldName == null) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5782","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLowerCase(ch)"},"failures":[21,22,226,23,24,25,26,27,28,29,227,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,228,65,66,67,229],"tindex":"a2ca9e6d-2e83-11e6-93a1-4fe7e294ad83","method":{"position":"org.apache.commons.lang3.text.StrBuilder:795","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic org.apache.commons.lang3.text.StrBuilder append(final char ch) {\n    if (java.lang.Character.isLowerCase(ch)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = length();\n            ensureCapacity((len + 1));\n            char[][((int)++)] = ch;\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.JavaVersion:146","type":"CtInvocationImpl","sourcecode":"\"1.7\".equals(nom)"},"failures":[230],"tindex":"a2cac57e-2e83-11e6-93a1-d3f35514fe3c","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendSeparator(final java.lang.String separator) {\n    if (\"1.7\".equals(separator)) {\n        {\n            return appendSeparator(separator, null);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"separator"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:567","type":"CtBinaryOperatorImpl","sourcecode":"(isEquals) == false"},"failures":[],"tindex":"a2cac57f-2e83-11e6-93a1-43b0adbfb586","method":{"position":"org.apache.commons.lang3.ArrayUtils:4706","type":"CtMethodImpl","sourcecode":"public static boolean[] removeElement(final boolean[] array, final boolean element) {\n    if (element == false) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEquals":"element"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:731","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[],"tindex":"a2cac580-2e83-11e6-93a1-3b6efbc99553","method":{"position":"org.apache.commons.lang3.ArrayUtils:3878","type":"CtMethodImpl","sourcecode":"public static int[] addAll(final int[] array1, final int... array2) {\n    if (array2 == array2) {\n        {\n            if (array1 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array2);\n            } else if (array2 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array1);\n            } \n            final int[] int[] = new int[(array1.int) + (array2.int)];\n            java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n            java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n            return joinedArray;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array2","rhs":"array2"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1854","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[231],"tindex":"a2caec91-2e83-11e6-93a1-35d28a5fe857","method":{"position":"org.apache.commons.lang3.ArrayUtils:4232","type":"CtMethodImpl","sourcecode":"public static short[] add(final short[] array, final short element) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final short[] short[] = ((short[])(org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(array, java.lang.Short.java.lang.Short.java.lang.Class<java.lang.Short>)));\n            newArray[((newArray.int) - 1)] = element;\n            return newArray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:113","type":"CtBinaryOperatorImpl","sourcecode":"initialCapacity <= 0"},"failures":[232],"tindex":"a2caec92-2e83-11e6-93a1-f9ecc54a133a","method":{"position":"org.apache.commons.lang3.BooleanUtils:198","type":"CtMethodImpl","sourcecode":"public static boolean toBoolean(final int value) {\n    if (value <= 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value != 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"initialCapacity":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3094","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[233],"tindex":"a2caec93-2e83-11e6-93a1-d7de0c4a5c74","method":{"position":"org.apache.commons.lang3.ArrayUtils:712","type":"CtMethodImpl","sourcecode":"public static java.lang.Integer[] nullToEmpty(final java.lang.Integer[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Integer[];\n            } \n            return array;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3666","type":"CtBinaryOperatorImpl","sourcecode":"noOfItems <= 0"},"failures":[18],"tindex":"a2caec94-2e83-11e6-93a1-65db908fdccf","method":{"position":"org.apache.commons.lang3.ArrayUtils:1034","type":"CtMethodImpl","sourcecode":"public static char[] subarray(final char[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (startIndexInclusive <= 0) {\n        {\n            if (array == null) {\n                return null;\n            } \n            if (startIndexInclusive < 0) {\n                startIndexInclusive = 0;\n            } \n            if (endIndexExclusive > (array.int)) {\n                endIndexExclusive = array.int;\n            } \n            final int int = endIndexExclusive - startIndexInclusive;\n            if (newSize <= 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.char[];\n            } \n            final char[] char[] = new char[newSize];\n            java.lang.System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n            return subarray;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"noOfItems":"startIndexInclusive"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.reflect.InvocationTargetException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:2034","type":"CtBinaryOperatorImpl","sourcecode":"sizeEndText == null"},"failures":[],"tindex":"a2cc2515-2e83-11e6-93a1-f74339d10c4e","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:316","type":"CtMethodImpl","sourcecode":"public static java.lang.Object invokeExactStaticMethod(final java.lang.Class<?> cls, final java.lang.String methodName, java.lang.Object... args) throws java.lang.IllegalAccessException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (methodName == null) {\n        throw new java.lang.reflect.InvocationTargetException();\n    } else {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            final java.lang.Class<?>[] java.lang.Class<?>[] = org.apache.commons.lang3.ClassUtils.toClass(args);\n            return org.apache.commons.lang3.reflect.MethodUtils.invokeExactStaticMethod(cls, methodName, args, parameterTypes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sizeEndText":"methodName"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:430","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Arrays.equals(lhs, rhs))"},"failures":[],"tindex":"a2cc2516-2e83-11e6-93a1-017c60abb12e","method":{"position":"org.apache.commons.lang3.ArrayUtils:2634","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final double[] array, final double valueToFind, final double tolerance) {\n    if (!(java.util.Arrays.equals(array, array))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ArrayUtils.lastIndexOf(array, valueToFind, java.lang.Integer.java.lang.Integer.int, tolerance);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:173","type":"CtBinaryOperatorImpl","sourcecode":"denominator == 0"},"failures":[234],"tindex":"a2cc4c27-2e83-11e6-93a1-b556fe89c32e","method":{"position":"org.apache.commons.lang3.ArrayUtils:2149","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final int[] array, final int valueToFind) {\n    if (valueToFind == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ArrayUtils.lastIndexOf(array, valueToFind, java.lang.Integer.java.lang.Integer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"denominator":"valueToFind"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.AnnotationUtils:126","type":"CtBinaryOperatorImpl","sourcecode":"(a1 == null) || (a2 == null)"},"failures":[188,190,191,192,194,196],"tindex":"a2cc4c28-2e83-11e6-93a1-3deaf037b235","method":{"position":"org.apache.commons.lang3.AnnotationUtils:122","type":"CtMethodImpl","sourcecode":"public static boolean equals(final java.lang.annotation.Annotation a1, final java.lang.annotation.Annotation a2) {\n    if ((a1 == null) || (a1 == null)) {\n        {\n            if (a1 == a2) {\n                return true;\n            } \n            if ((a1 == null) || (a2 == null)) {\n                return false;\n            } \n            final java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.Class<? extends java.lang.annotation.Annotation> = a1.annotationType();\n            final java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.Class<? extends java.lang.annotation.Annotation> = a2.annotationType();\n            org.apache.commons.lang3.Validate.notNull(type, \"Annotation %s with null annotationType()\", a1);\n            org.apache.commons.lang3.Validate.notNull(type2, \"Annotation %s with null annotationType()\", a2);\n            if (!(type.equals(type2))) {\n                return false;\n            } \n            try {\n                for (final java.lang.reflect.Method java.lang.reflect.Method : type.getDeclaredMethods()) {\n                    if (((m.getParameterTypes().int) == 0) && (org.apache.commons.lang3.AnnotationUtils.isValidAnnotationMemberType(m.getReturnType()))) {\n                        final java.lang.Object java.lang.Object = m.invoke(a1);\n                        final java.lang.Object java.lang.Object = m.invoke(a2);\n                        if (!(org.apache.commons.lang3.AnnotationUtils.memberEquals(m.getReturnType(), v1, v2))) {\n                            return false;\n                        } \n                    } \n                }\n            } catch (final java.lang.IllegalAccessException ex) {\n                return false;\n            } catch (final java.lang.reflect.InvocationTargetException ex) {\n                return false;\n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a1":"a1","a2":"a1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:765","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isBlank(str)"},"failures":[],"tindex":"a2cc7339-2e83-11e6-93a1-47b9ec3e38b5","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:318","type":"CtMethodImpl","sourcecode":"public static java.lang.Object readDeclaredStaticField(final java.lang.Class<?> cls, final java.lang.String fieldName) throws java.lang.IllegalAccessException {\n    if (org.apache.commons.lang3.StringUtils.isBlank(fieldName)) {\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            return org.apache.commons.lang3.reflect.FieldUtils.readDeclaredStaticField(cls, fieldName, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3225","type":"CtInvocationImpl","sourcecode":"str.isEmpty()"},"failures":[],"tindex":"a2cc733a-2e83-11e6-93a1-5da681093f69","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1439","type":"CtMethodImpl","sourcecode":"protected void appendSummary(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final boolean[] array) {\n    if (fieldName.isEmpty()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendSummarySize(buffer, fieldName, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.NumberFormatException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:2002","type":"CtBinaryOperatorImpl","sourcecode":"sizeStartText == null"},"failures":[235,236,237,238,239,240,241,242,243],"tindex":"a2cc733b-2e83-11e6-93a1-edb60c162739","method":{"position":"org.apache.commons.lang3.math.NumberUtils:450","type":"CtMethodImpl","sourcecode":"public static java.lang.Number createNumber(final java.lang.String str) throws java.lang.NumberFormatException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (org.apache.commons.lang3.StringUtils.isBlank(str)) {\n                throw new java.lang.NumberFormatException(\"A blank string is not a valid number\");\n            } \n            final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"0x\" , \"0X\" , \"-0x\" , \"-0X\" , \"#\" , \"-#\" };\n            int int = 0;\n            for (final java.lang.String java.lang.String : hex_prefixes) {\n                if (str.startsWith(pfx)) {\n                    pfxLen += pfx.length();\n                    break;\n                } \n            }\n            if (pfxLen > 0) {\n                char char = 0;\n                for (int int = pfxLen ; i < (str.length()) ; i++) {\n                    firstSigDigit = str.charAt(i);\n                    if (firstSigDigit == '0') {\n                        pfxLen++;\n                    } else {\n                        break;\n                    }\n                }\n                final int int = (str.length()) - pfxLen;\n                if ((hexDigits > 16) || ((hexDigits == 16) && (firstSigDigit > '7'))) {\n                    return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n                } \n                if ((hexDigits > 8) || ((hexDigits == 8) && (firstSigDigit > '7'))) {\n                    return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n                } \n                return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n            } \n            final char char = str.charAt(((str.length()) - 1));\n            java.lang.String java.lang.String;\n            java.lang.String java.lang.String;\n            java.lang.String java.lang.String;\n            final int int = str.indexOf('.');\n            final int int = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;\n            int int = 0;\n            if (decPos > (-1)) {\n                if (expPos > (-1)) {\n                    if ((expPos < decPos) || (expPos > (str.length()))) {\n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                    } \n                    dec = str.substring((decPos + 1), expPos);\n                } else {\n                    dec = str.substring((decPos + 1));\n                }\n                mant = str.substring(0, decPos);\n                numDecimals = dec.length();\n            } else {\n                if (expPos > (-1)) {\n                    if (expPos > (str.length())) {\n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                    } \n                    mant = str.substring(0, expPos);\n                } else {\n                    mant = str;\n                }\n                dec = null;\n            }\n            if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {\n                if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {\n                    exp = str.substring((expPos + 1), ((str.length()) - 1));\n                } else {\n                    exp = null;\n                }\n                final java.lang.String java.lang.String = str.substring(0, ((str.length()) - 1));\n                final boolean boolean = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));\n                switch (lastChar) {\n                    case 'l' :\n                    case 'L' :\n                        if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {\n                            try {\n                                return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);\n                            } catch (final java.lang.NumberFormatException nfe) {\n                            }\n                            return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);\n                        } \n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                    case 'f' :\n                    case 'F' :\n                        try {\n                            final java.lang.Float java.lang.Float = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);\n                            if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {\n                                return f;\n                            } \n                        } catch (final java.lang.NumberFormatException nfe) {\n                        }\n                    case 'd' :\n                    case 'D' :\n                        try {\n                            final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);\n                            if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {\n                                return d;\n                            } \n                        } catch (final java.lang.NumberFormatException nfe) {\n                        }\n                        try {\n                            return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);\n                        } catch (final java.lang.NumberFormatException e) {\n                        }\n                    default :\n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                }\n            } \n            if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {\n                exp = str.substring((expPos + 1), str.length());\n            } else {\n                exp = null;\n            }\n            if ((dec == null) && (exp == null)) {\n                try {\n                    return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n                } catch (final java.lang.NumberFormatException nfe) {\n                }\n                try {\n                    return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n                } catch (final java.lang.NumberFormatException nfe) {\n                }\n                return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n            } \n            final boolean boolean = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));\n            try {\n                if (numDecimals <= 7) {\n                    final java.lang.Float java.lang.Float = org.apache.commons.lang3.math.NumberUtils.createFloat(str);\n                    if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {\n                        return f;\n                    } \n                } \n            } catch (final java.lang.NumberFormatException nfe) {\n            }\n            try {\n                if (numDecimals <= 16) {\n                    final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.createDouble(str);\n                    if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {\n                        return d;\n                    } \n                } \n            } catch (final java.lang.NumberFormatException nfe) {\n            }\n            return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);\n        }\n    } else {\n        throw new java.lang.NumberFormatException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sizeStartText":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1426","type":"CtBinaryOperatorImpl","sourcecode":"hasDecPoint || hasExp"},"failures":[244],"tindex":"a2ccc15c-2e83-11e6-93a1-a3b66979def1","method":{"position":"org.apache.commons.lang3.text.WordUtils:172","type":"CtMethodImpl","sourcecode":"public static java.lang.String wrap(final java.lang.String str, int wrapLength, java.lang.String newLineStr, final boolean wrapLongWords) {\n    if (wrapLongWords || wrapLongWords) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (newLineStr == null) {\n                newLineStr = org.apache.commons.lang3.SystemUtils.org.apache.commons.lang3.SystemUtils.java.lang.String;\n            } \n            if (wrapLength < 1) {\n                wrapLength = 1;\n            } \n            final int int = str.length();\n            int int = 0;\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((inputLineLength + 32));\n            while ((inputLineLength - offset) > wrapLength) {\n                if ((str.charAt(offset)) == ' ') {\n                    offset++;\n                    continue;\n                } \n                int int = str.lastIndexOf(' ', (wrapLength + offset));\n                if (spaceToWrapAt >= offset) {\n                    wrappedLine.append(str.substring(offset, spaceToWrapAt));\n                    wrappedLine.append(newLineStr);\n                    offset = spaceToWrapAt + 1;\n                } else {\n                    if (wrapLongWords) {\n                        wrappedLine.append(str.substring(offset, (wrapLength + offset)));\n                        wrappedLine.append(newLineStr);\n                        offset += wrapLength;\n                    } else {\n                        spaceToWrapAt = str.indexOf(' ', (wrapLength + offset));\n                        if (spaceToWrapAt >= 0) {\n                            wrappedLine.append(str.substring(offset, spaceToWrapAt));\n                            wrappedLine.append(newLineStr);\n                            offset = spaceToWrapAt + 1;\n                        } else {\n                            wrappedLine.append(str.substring(offset));\n                            offset = inputLineLength;\n                        }\n                    }\n                }\n            }\n            wrappedLine.append(str.substring(offset));\n            return wrappedLine.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"hasDecPoint":"wrapLongWords","hasExp":"wrapLongWords"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:1106","type":"CtBinaryOperatorImpl","sourcecode":"(value <= start) || (value >= end)"},"failures":[],"tindex":"a2cce86d-2e83-11e6-93a1-f9c804ab257d","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:462","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final long lhs, final long rhs) {\n    if ((rhs <= rhs) || (value >= rhs)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            int = lhs < rhs ? -1 : lhs > rhs ? 1 : 0;\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"rhs","end":"rhs","value":"rhs"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.FieldUtils:172","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.lang3.reflect.MemberUtils.isAccessible(field))"},"failures":[],"tindex":"a2cd0f7e-2e83-11e6-93a1-0fda292d65eb","method":{"position":"org.apache.commons.lang3.AnnotationUtils:242","type":"CtMethodImpl","sourcecode":"private static int hashMember(final java.lang.String name, final java.lang.Object value) {\n    if (!(org.apache.commons.lang3.reflect.MemberUtils.isAccessible(value))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = (name.hashCode()) * 127;\n            if (value.getClass().isArray()) {\n                return part1 ^ (org.apache.commons.lang3.AnnotationUtils.arrayMemberHash(value.getClass().getComponentType(), value));\n            } \n            if (value instanceof java.lang.annotation.Annotation) {\n                return part1 ^ (org.apache.commons.lang3.AnnotationUtils.hashCode(((java.lang.annotation.Annotation)(value))));\n            } \n            return part1 ^ (value.hashCode());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"value"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:373","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[165,198,166,167,168,169,199,200],"tindex":"a2cd0f7f-2e83-11e6-93a1-1fd8e45aa371","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:2097","type":"CtMethodImpl","sourcecode":"protected void setSummaryObjectEndText(java.lang.String summaryObjectEndText) {\n    if (summaryObjectEndText == null) {\n        {\n            if (summaryObjectEndText == null) {\n                summaryObjectEndText = \"\";\n            } \n            org.apache.commons.lang3.builder.ToStringStyle.this.java.lang.String = summaryObjectEndText;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"summaryObjectEndText"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:730","type":"CtBinaryOperatorImpl","sourcecode":"str == falseString"},"failures":[],"tindex":"a2cd3690-2e83-11e6-93a1-2792c7af0341","method":{"position":"org.apache.commons.lang3.CharSetUtils:205","type":"CtMethodImpl","sourcecode":"public static java.lang.String delete(final java.lang.String str, final java.lang.String... set) {\n    if (str == str) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                {\n                    if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.CharSetUtils.deepEmpty(set))) {\n                        return str;\n                    } \n                    return org.apache.commons.lang3.CharSetUtils.modify(str, set, false);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str","falseString":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:896","type":"CtBinaryOperatorImpl","sourcecode":"first < second"},"failures":[245],"tindex":"a2cd3691-2e83-11e6-93a1-b519f8d975e0","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:412","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String format(final long millis) {\n    if (millis < millis) {\n        {\n            return org.apache.commons.lang3.time.FastDatePrinter.format(millis);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"first":"millis","second":"millis"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:995","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[246],"tindex":"a2cd5da2-2e83-11e6-93a1-277de520688b","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:767","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final short[] lhs, final short[] rhs) {\n    if (rhs == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"rhs"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:717","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[247],"tindex":"a2cd5da3-2e83-11e6-93a1-8f3cae788eaa","method":{"position":"org.apache.commons.lang3.StringUtils:7459","type":"CtMethodImpl","sourcecode":"public static java.lang.String appendIfMissing(final java.lang.String str, final java.lang.CharSequence suffix, final java.lang.CharSequence... suffixes) {\n    if (suffix == null) {\n        {\n            return org.apache.commons.lang3.StringUtils.appendIfMissing(str, suffix, false, suffixes);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"suffix"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":52,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
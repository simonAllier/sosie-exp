{"failureDictionary":{"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLowYearPadding":15,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_AD":21,"org.apache.commons.lang3.time.FastDateParserTest.testParseLongShort":43,"org.apache.commons.lang3.time.FastDateParserTest.testLang538":40,"org.apache.commons.lang3.ClassUtilsTest.testGetPublicMethod":2,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_BC":25,"org.apache.commons.lang3.time.FastDateParserTest.testLang303":39,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":51,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_BC":42,"org.apache.commons.lang3.time.FastDateParserTest.testShortDateStyleWithLocales":8,"org.apache.commons.lang3.time.FastDateFormatTest.testParseSync":9,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Long_AD":36,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_AD":26,"org.apache.commons.lang3.time.FastDateParserTest.testAmPm":34,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testShortDateStyleWithLocales":7,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_BC":22,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_BC":17,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_AD":24,"org.apache.commons.lang3.time.FastDateParserTest.testQuotes":49,"org.apache.commons.lang3.time.FastDatePrinterTest.testShortDateStyleWithLocales":5,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_LongNoEra_AD":44,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Long_BC":37,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_BC":47,"org.apache.commons.lang3.ClassUtilsTest.test_getAllSuperclasses_Class":1,"org.apache.commons.lang3.time.FastDateParserTest.testDayOf":32,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseNumerics":18,"org.apache.commons.lang3.time.FastDateParserTest.testSpecialCharacters":30,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang538":20,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_BC":27,"org.apache.commons.lang3.time.FastDateParserTest.testLowYearPadding":35,"org.apache.commons.lang3.time.FastDateParserTest.testParses":48,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_AD":16,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseZone":13,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_LongNoEra_BC":45,"org.apache.commons.lang3.time.FastDateFormatTest.testDateDefaults":4,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testSpecialCharacters":10,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParses":28,"org.apache.commons.lang3.time.FastDateParserTest.testMilleniumBug":31,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance":3,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testAmPm":14,"org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives":50,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_AD":46,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang303":19,"org.apache.commons.lang3.ConversionTest.testBinaryToLong":0,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_AD":41,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testDayOf":12,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testShortDateStyleWithLocales":6,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testMilleniumBug":11,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseLongShort":23,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testQuotes":29,"org.apache.commons.lang3.time.FastDateParserTest.testParseNumerics":38,"org.apache.commons.lang3.time.FastDateParserTest.testParseZone":33},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2345","type":"CtBinaryOperatorImpl","sourcecode":"strLen == 0"},"failures":[0],"tindex":"d1083857-2eaf-11e6-ae61-8f7fc795e62f","method":{"position":"org.apache.commons.lang3.Conversion:1042","type":"CtMethodImpl","sourcecode":"public static long binaryToLong(final boolean[] src, final int srcPos, final long dstInit, final int dstPos, final int nBools) {\n    if (dstPos == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((((src.int) == 0) && (srcPos == 0)) || (0 == nBools)) {\n                return dstInit;\n            } \n            if (((nBools - 1) + dstPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"nBools-1+dstPos is greather or equal to than 64\");\n            } \n            long long = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nBools ; i++) {\n                shift = (i * 1) + dstPos;\n                final long long = (src[(i + srcPos)] ? 1L : 0) << shift;\n                final long long = 1L << shift;\n                out = (out & (~mask)) | bits;\n            }\n            return out;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strLen":"dstPos"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.reflect.InvocationTargetException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:596","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"d10922b8-2eaf-11e6-ae61-13c2fe7a9d01","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:180","type":"CtMethodImpl","sourcecode":"public static java.lang.Object invokeExactMethod(final java.lang.Object object, final java.lang.String methodName, java.lang.Object[] args, java.lang.Class<?>[] parameterTypes) throws java.lang.IllegalAccessException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (object == null) {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            parameterTypes = org.apache.commons.lang3.ArrayUtils.nullToEmpty(parameterTypes);\n            final java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethod(object.getClass(), methodName, parameterTypes);\n            if (method == null) {\n                throw new java.lang.NoSuchMethodException((((\"No such accessible method: \" + methodName) + \"() on object: \") + (object.getClass().getName())));\n            } \n            return method.invoke(object, args);\n        }\n    } else {\n        throw new java.lang.reflect.InvocationTargetException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"object"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1552","type":"CtBinaryOperatorImpl","sourcecode":"(offset < 0) || (offset > (chars.length))"},"failures":[],"tindex":"d10949c9-2eaf-11e6-ae61-51562bce0c15","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1385","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(final java.lang.Object obj, final int width, final char padChar) {\n    if ((width < 0) || (offset > width)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (width > 0) {\n                ensureCapacity(((int) + width));\n                java.lang.String java.lang.String = obj == null ? getNullText() : obj.toString();\n                if (str == null) {\n                    str = \"\";\n                } \n                final int int = str.length();\n                if (strLen >= width) {\n                    str.getChars((strLen - width), strLen, char[], int);\n                } else {\n                    final int int = width - strLen;\n                    for (int int = 0 ; i < padLen ; i++) {\n                        char[][((int) + i)] = padChar;\n                    }\n                    str.getChars(0, strLen, char[], ((int) + padLen));\n                }\n                int += width;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"width","length":"width","chars":"obj"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.AnnotationUtils:227","type":"CtInvocationImpl","sourcecode":"type.isArray()"},"failures":[1,2],"tindex":"d10970da-2eaf-11e6-ae61-bd12202df0ec","method":{"position":"org.apache.commons.lang3.ClassUtils:326","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.Class<?>> getAllSuperclasses(final java.lang.Class<?> cls) {\n    if (cls.isArray()) {\n        {\n            if (cls == null) {\n                return null;\n            } \n            final java.util.List<java.lang.Class<?>> java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>>();\n            java.lang.Class<?> java.lang.Class<?> = cls.getSuperclass();\n            while (superclass != null) {\n                classes.add(superclass);\n                superclass = superclass.getSuperclass();\n            }\n            return classes;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"cls"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:358","type":"CtBinaryOperatorImpl","sourcecode":"trueValue == null"},"failures":[3,4,5,6,7,8],"tindex":"d10997eb-2eaf-11e6-ae61-b7130b0354aa","method":{"position":"org.apache.commons.lang3.time.FormatCache:190","type":"CtMethodImpl","sourcecode":"static java.lang.String getPatternForStyle(final java.lang.Integer dateStyle, final java.lang.Integer timeStyle, final java.util.Locale locale) {\n    if (timeStyle == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.lang3.time.FormatCache.MultipartKey org.apache.commons.lang3.time.FormatCache.MultipartKey = new org.apache.commons.lang3.time.FormatCache.MultipartKey(dateStyle , timeStyle , locale);\n            java.lang.String java.lang.String = org.apache.commons.lang3.time.FormatCache.org.apache.commons.lang3.time.FormatCache.java.util.concurrent.ConcurrentMap<org.apache.commons.lang3.time.FormatCache.MultipartKey, java.lang.String>.get(key);\n            if (pattern == null) {\n                try {\n                    java.text.DateFormat java.text.DateFormat;\n                    if (dateStyle == null) {\n                        formatter = java.text.DateFormat.getTimeInstance(timeStyle.intValue(), locale);\n                    } else if (timeStyle == null) {\n                        formatter = java.text.DateFormat.getDateInstance(dateStyle.intValue(), locale);\n                    } else {\n                        formatter = java.text.DateFormat.getDateTimeInstance(dateStyle.intValue(), timeStyle.intValue(), locale);\n                    }\n                    pattern = ((java.text.SimpleDateFormat)(formatter)).toPattern();\n                    final java.lang.String java.lang.String = org.apache.commons.lang3.time.FormatCache.org.apache.commons.lang3.time.FormatCache.java.util.concurrent.ConcurrentMap<org.apache.commons.lang3.time.FormatCache.MultipartKey, java.lang.String>.putIfAbsent(key, pattern);\n                    if (previous != null) {\n                        pattern = previous;\n                    } \n                } catch (final java.lang.ClassCastException ex) {\n                    throw new java.lang.IllegalArgumentException((\"No date time pattern for locale: \" + locale));\n                }\n            } \n            return pattern;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"trueValue":"timeStyle"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:260","type":"CtBinaryOperatorImpl","sourcecode":"tokenLen >= 4"},"failures":[9,10,7,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,8,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"tindex":"d109befc-2eaf-11e6-ae61-a9d6a33ee163","method":{"position":"org.apache.commons.lang3.time.FastDateParser:684","type":"CtMethodImpl","sourcecode":"int modify(final int iValue) {\n    if (iValue >= 4) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return iValue;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"tokenLen":"iValue"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2381","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[],"tindex":"d109e60d-2eaf-11e6-ae61-1b2afd2ddd2f","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:990","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final void appendTo(final java.lang.StringBuffer buffer, final int value) {\n    if (value < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(((char)((value / 10) + '0')));\n            buffer.append(((char)((value % 10) + '0')));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:691","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[50],"tindex":"d109e60e-2eaf-11e6-ae61-1144efa2c996","method":{"position":"org.apache.commons.lang3.ArrayUtils:3610","type":"CtMethodImpl","sourcecode":"public static boolean isNotEmpty(final long[] array) {\n    if (array == array) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (array != null) && ((array.int) != 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:671","type":"CtInvocationImpl","sourcecode":"stripChars.isEmpty()"},"failures":[51],"tindex":"d10a0d1f-2eaf-11e6-ae61-978a2d660cc8","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:355","type":"CtMethodImpl","sourcecode":"public void appendToString(final java.lang.StringBuffer buffer, final java.lang.String toString) {\n    if (toString.isEmpty()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (toString != null) {\n                final int int = (toString.indexOf(java.lang.String)) + (java.lang.String.length());\n                final int int = toString.lastIndexOf(java.lang.String);\n                if (((pos1 != pos2) && (pos1 >= 0)) && (pos2 >= 0)) {\n                    final java.lang.String java.lang.String = toString.substring(pos1, pos2);\n                    if (boolean) {\n                        removeLastFieldSeparator(buffer);\n                    } \n                    buffer.append(data);\n                    appendFieldSeparator(buffer);\n                } \n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stripChars":"toString"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":9,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
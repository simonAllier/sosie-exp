{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":3,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":109,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":291,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":103,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray":304,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":4,"org.apache.commons.lang3.mutable.MutableLongTest.testEquals":372,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArrayEqualAsObject":238,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDoubleEmptyArray":134,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":140,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":83,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":36,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":38,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":11,"org.apache.commons.lang3.ArrayUtilsTest.testSameLengthChar":192,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":247,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray":303,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOfLang294":370,"org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses2D":376,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetMatchingAccessibleMethod":196,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":1,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":124,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArrayRemoveNone":165,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude":305,"org.apache.commons.lang3.builder.EqualsBuilderTest.testCyclicalObjectReferences":362,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":294,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllFloatArrayRemoveNone":173,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArrayOutOfBoundsIndex":161,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":95,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":125,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":139,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArrayRemoveNone":184,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEqualsHashcode":328,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":99,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedFormats":332,"org.apache.commons.lang3.BitFieldTest.testGetValue":148,"org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue":213,"org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntString":26,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":66,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfInt":234,"org.apache.commons.lang3.BitFieldTest.testSetValue":151,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArrayOutOfBoundsIndex":159,"org.apache.commons.lang3.reflect.TypeLiteralTest.testBasic":334,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":102,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringString":382,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":120,"org.apache.commons.lang3.math.FractionTest.testDivide":206,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477":330,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":84,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":77,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeStartText":280,"org.apache.commons.lang3.AnnotationUtilsTest.testNonEquivalentAnnotationsOfSameType":318,"org.apache.commons.lang3.BooleanUtilsTest.testOr_object_validInput_3items":223,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testBlank":252,"org.apache.commons.lang3.BooleanUtilsTest.testAnd_object_nullElementInput":216,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsIgnoreCase_LocaleIndependence":340,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeMethod":197,"org.apache.commons.lang3.AnnotationUtilsTest.testSameInstance":312,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementLongArray":236,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":142,"org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphaLower_char":227,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull":299,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":74,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":250,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":13,"org.apache.commons.lang3.AnnotationUtilsTest.testEquivalence":313,"org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphanumeric_char":225,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentEnd":279,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":73,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":58,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":88,"org.apache.commons.lang3.RandomUtilsTest.testNextFloatNegative":386,"org.apache.commons.lang3.BitFieldTest.testSetShortValue":150,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":269,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":10,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":42,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":110,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementBooleanArray":237,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllByteArrayNegativeIndex":181,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson":256,"org.apache.commons.lang3.math.FractionTest.testReducedFactory_int_int":199,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":61,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String":136,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":35,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":23,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":7,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":248,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Unboxing_Widening":353,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":52,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllCharArrayNegativeIndex":179,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":51,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testPerson":249,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":272,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":57,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testArrayList":241,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":72,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":12,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllBooleanArrayNegativeIndex":183,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testBlank":273,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":71,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsIgnoreCase_StringString":339,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection":298,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Autoboxing":355,"org.apache.commons.lang3.builder.DiffResultTest.testNullStyle":261,"org.apache.commons.lang3.text.StrBuilderTest.testAsReader":368,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":60,"org.apache.commons.lang3.ClassUtilsTest.test_getShortClassName_Class":126,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":94,"org.apache.commons.lang3.ClassUtilsTest.test_getShortClassName_Object":127,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":45,"org.apache.commons.lang3.BooleanUtilsTest.testXor_object_nullElementInput":221,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":254,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":268,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullLhs":239,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testBlank":266,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":141,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectEndText":290,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":25,"org.apache.commons.lang3.BooleanUtilsTest.testAnd_object_validInput_2items":219,"org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_2items":217,"org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterize":336,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":306,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":100,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable":345,"org.apache.commons.lang3.math.FractionTest.testAdd":200,"org.apache.commons.lang3.builder.DiffBuilderTest.testSameObjectIgnoresAppends":17,"org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives":131,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray":352,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":97,"org.apache.commons.lang3.ClassUtilsTest.testGetClassByNormalNameArrays2D":377,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":108,"org.apache.commons.lang3.BooleanUtilsTest.testOr_object_nullElementInput":224,"org.apache.commons.lang3.ClassUtilsTest.testWithInterleavingWhitespace":378,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":119,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArraySeparator":288,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllIntArray":180,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArray":188,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":49,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":9,"org.apache.commons.lang3.time.DateUtilsTest.testCeil":343,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":267,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllFloatArray":187,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArrayNegativeIndex":160,"org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntChar":27,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testLinkedList":243,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":16,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetMatchingAccessibleMethod":194,"org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer_Integer_Integer_Integer":212,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":122,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testCharArray":137,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArray":172,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllIntArrayNegativeIndex":189,"org.apache.commons.lang3.AnnotationUtilsTest.testGeneratedAnnotationEquivalentToRealAnnotation":316,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":20,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":90,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":5,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray":300,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringStringarray":383,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":40,"org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitive":346,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixtureWithTransients":359,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllByteArrayOutOfBoundsIndex":175,"org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitives":347,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":104,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":75,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":118,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":112,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllIntArrayOutOfBoundsIndex":182,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":65,"org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch":211,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldNameValueSeparator":284,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats":333,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray_Autoboxing":348,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher":391,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementCharArray":129,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArrayNegativeIndex":166,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson":270,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber":228,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":53,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":44,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeEndText":283,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":114,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson":277,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":107,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllByteArrayRemoveNone":157,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":106,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllCharArrayOutOfBoundsIndex":177,"org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitivesNull":351,"org.apache.commons.lang3.StringUtilsTest.testDifference_StringString":232,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong":274,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson":296,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":32,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllDoubleArray":185,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":260,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNull":210,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayBoolean":369,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":123,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllCharArrayRemoveNone":164,"org.apache.commons.lang3.ClassUtilsTest.testGetClassByNormalNameArrays":373,"org.apache.commons.lang3.RandomUtilsTest.testNextFloatMinimalRange":388,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":308,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice":331,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":78,"org.apache.commons.lang3.builder.DiffResultTest.testNullRhs":264,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":111,"org.apache.commons.lang3.ConversionTest.testShortToHex":152,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_int_int":385,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDoubleNull":133,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":275,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat":329,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":79,"org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringString":231,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":89,"org.apache.commons.lang3.math.FractionTest.testMultiply":207,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_String":371,"org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getRootCauseMessage_Throwable":29,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":117,"org.apache.commons.lang3.mutable.MutableLongTest.testAddValuePrimitive":153,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllFloatArrayOutOfBoundsIndex":171,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":121,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":251,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":43,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":116,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testBlank":292,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String":135,"org.apache.commons.lang3.RandomUtilsTest.testNextFloat":389,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":81,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":265,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmpty":381,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllByteArray":176,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":55,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWithIgnoreCase":235,"org.apache.commons.lang3.BooleanUtilsTest.testOr_object_validInput_2items":222,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":8,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":50,"org.apache.commons.lang3.AnnotationUtilsTest.testBothArgsNull":317,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":293,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":115,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":105,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetNullText":282,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":56,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":92,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":63,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":39,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testCharArrayAsObject":138,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals":364,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":18,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls":307,"org.apache.commons.lang3.AnnotationUtilsTest.testOneArgNull":310,"org.apache.commons.lang3.ClassUtilsTest.testGetInnerClass":374,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":356,"org.apache.commons.lang3.text.StrBuilderTest.testSubstringIntInt":341,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsExcludeFields":363,"org.apache.commons.lang3.reflect.TypeUtilsTest.testDetermineTypeVariableAssignments":230,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":6,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":21,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_DefaultUnboxing_Widening":350,"org.apache.commons.lang3.event.EventListenerSupportTest.testSerialization":344,"org.apache.commons.lang3.builder.DiffResultTest.testNullList":258,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllBooleanArray":155,"org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses":375,"org.apache.commons.lang3.ArrayUtilsTest.testContainsInt":233,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":68,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger":360,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":33,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":91,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":82,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":143,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeStaticMethod":195,"org.apache.commons.lang3.math.FractionTest.testReduce":208,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture":358,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":37,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testBlank":245,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayToObjectArray":214,"org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_3items":218,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":295,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllDoubleArrayOutOfBoundsIndex":163,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":69,"org.apache.commons.lang3.BooleanUtilsTest.testAnd_object_validInput_3items":220,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":262,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":98,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfBooleanWithStartIndex":146,"org.apache.commons.lang3.math.NumberUtilsTest.testToShortString":128,"org.apache.commons.lang3.builder.DiffResultTest.testNoDifferencesString":259,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":54,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testBlank":34,"org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterizeWithOwner":337,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":93,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":0,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":76,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":271,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":2,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripStart_StringString":209,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":19,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllDoubleArrayNegativeIndex":190,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":253,"org.apache.commons.lang3.reflect.TypeLiteralTest.testTyped":335,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":101,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArrayOutOfBoundsIndex":167,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":59,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNumberArray":169,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":15,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArrayNegativeIndex":178,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllBooleanArrayRemoveNone":186,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_StrMatcher_String":147,"org.apache.commons.lang3.text.StrBuilderTest.testToCharArrayIntInt":132,"org.apache.commons.lang3.BitFieldTest.testGetShortValue":149,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection":301,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":22,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":31,"org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntString":28,"org.apache.commons.lang3.AnnotationUtilsTest.testAnnotationsOfDifferingTypes":314,"org.apache.commons.lang3.math.FractionTest.testFactory_double":203,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":14,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testCopyOnWriteArrayList":242,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":80,"org.apache.commons.lang3.builder.DiffResultTest.testNullLhs":263,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllDoubleArrayRemoveNone":162,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex":384,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":276,"org.apache.commons.lang3.ArrayUtilsTest.testToString":309,"org.apache.commons.lang3.RandomUtilsTest.testExtremeRangeFloat":390,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentStart":281,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":46,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLong":246,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArray":191,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_boolean":215,"org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getMessage_Throwable":30,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectStartText":286,"org.apache.commons.lang3.AnnotationUtilsTest.testHashCode":315,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllIntArrayRemoveNone":158,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":70,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":257,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareExcludeFields":365,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":302,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":96,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllCharArray":170,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":85,"org.apache.commons.lang3.text.StrTokenizerTest.test8":327,"org.apache.commons.lang3.time.DateUtilsTest.testRound":342,"org.apache.commons.lang3.text.StrTokenizerTest.test5":324,"org.apache.commons.lang3.text.StrTokenizerTest.test4":323,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGenericArrayType":338,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":86,"org.apache.commons.lang3.text.StrTokenizerTest.test7":326,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":87,"org.apache.commons.lang3.text.StrTokenizerTest.test6":325,"org.apache.commons.lang3.text.StrTokenizerTest.test1":320,"org.apache.commons.lang3.text.StrTokenizerTest.test3":322,"org.apache.commons.lang3.text.StrTokenizerTest.test2":321,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":62,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldSeparator":287,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testIntegerWithTransients":357,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":297,"org.apache.commons.lang3.AnnotationUtilsTest.testIsValidAnnotationMemberType":319,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":278,"org.apache.commons.lang3.time.FastDateFormatTest.testParseSync":130,"org.apache.commons.lang3.CharRangeTest.testContains_Charrange":229,"org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitiveNull":349,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareTransients":367,"org.apache.commons.lang3.math.FractionTest.testSubtract":202,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEquals":361,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":48,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllBooleanArrayOutOfBoundsIndex":174,"org.apache.commons.lang3.math.FractionTest.testToProperString":204,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllFloatArrayNegativeIndex":156,"org.apache.commons.lang3.math.FractionTest.testPow":201,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":255,"org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitiveNoWrapper":354,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArrayRemoveNone":168,"org.apache.commons.lang3.builder.EqualsBuilderTest.testBooleanArray":198,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayEnd":285,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullRhs":240,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":47,"org.apache.commons.lang3.HashSetvBitSetTest.testTimesExtractOrBitset":154,"org.apache.commons.lang3.RandomUtilsTest.testNextFloatLowerGreaterUpper":387,"org.apache.commons.lang3.math.FractionTest.testFactory_String_double":205,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceWeirdPattens":380,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray":24,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompare":366,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfBoolean":145,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayStart":289,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":41,"org.apache.commons.lang3.ClassUtilsTest.testGetClassRawPrimitives":379,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":113,"org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlpha_char":226,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":67,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeConstructor":193,"org.apache.commons.lang3.AnnotationUtilsTest.testToString":311,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":144,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":64,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":244},"transformations":[{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c1def5f-3f31-11e6-a209-659795f21074","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:488","type":"CtMethodImpl","sourcecode":"public static void writeStaticField(final java.lang.reflect.Field field, final java.lang.Object value) throws java.lang.IllegalAccessException {\n    if (value instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            org.apache.commons.lang3.reflect.FieldUtils.writeStaticField(field, value, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.Throwable","condition":{"position":"org.apache.commons.lang3.CharSequenceUtils:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c1e6490-3f31-11e6-a209-43b2cebb8366","method":{"position":"org.apache.commons.lang3.event.EventUtils:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object invoke(final java.lang.Object proxy, final java.lang.reflect.Method method, final java.lang.Object[] parameters) throws java.lang.Throwable {\n    if (proxy instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.Throwable();\n    } else {\n        {\n            if ((java.util.Set<java.lang.String>.isEmpty()) || (java.util.Set<java.lang.String>.contains(method.getName()))) {\n                if (hasMatchingParametersMethod(method)) {\n                    return org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String, parameters);\n                } else {\n                    return org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String);\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"proxy"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:325","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c1e8ba1-3f31-11e6-a209-9146296247b8","method":{"position":"org.apache.commons.lang3.ArrayUtils:870","type":"CtMethodImpl","sourcecode":"public static <T>T[] subarray(final T[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (startIndexInclusive == startIndexInclusive) {\n        {\n            if (array == null) {\n                return null;\n            } \n            if (startIndexInclusive < 0) {\n                startIndexInclusive = 0;\n            } \n            if (endIndexExclusive > (array.int)) {\n                endIndexExclusive = array.int;\n            } \n            final int int = endIndexExclusive - startIndexInclusive;\n            final java.lang.Class<?> java.lang.Class<?> = array.getClass().getComponentType();\n            if (newSize <= 0) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final T[] T[] = ((T[])(java.lang.reflect.Array.newInstance(type, 0)));\n                return emptyArray;\n            } \n            @java.lang.SuppressWarnings(value = \"unchecked\")\n            final T[] T[] = ((T[])(java.lang.reflect.Array.newInstance(type, newSize)));\n            java.lang.System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n            return subarray;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"trueValue":"startIndexInclusive","value":"startIndexInclusive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:434","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"tindex":"1c1e8ba2-3f31-11e6-a209-45407c180531","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:129","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final boolean lhs, final boolean rhs) {\n    if (rhs == false) {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (lhs != rhs) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Boolean>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Boolean getLeft() {\n                        return java.lang.Boolean.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Boolean getRight() {\n                        return java.lang.Boolean.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEquals":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:657","type":"CtBinaryOperatorImpl"},"failures":[24],"tindex":"1c1eb2b3-3f31-11e6-a209-b3b7da9613f8","method":{"position":"org.apache.commons.lang3.text.StrBuilder:721","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final char[] chars) {\n    if (chars == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (chars == null) {\n                return appendNull();\n            } \n            final int int = chars.int;\n            if (strLen > 0) {\n                final int int = length();\n                ensureCapacity((len + strLen));\n                java.lang.System.arraycopy(chars, 0, char[], len, strLen);\n                int += strLen;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"chars"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:664","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,25,11,13,14,15,16,18,19,20,21],"tindex":"1c1ed9c4-3f31-11e6-a209-eb6718f73e5b","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:295","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final char lhs, final char rhs) {\n    if (fieldName == null) {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (lhs != rhs) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Character>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Character getLeft() {\n                        return java.lang.Character.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Character getRight() {\n                        return java.lang.Character.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nullString":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3862","type":"CtBinaryOperatorImpl"},"failures":[26,27,28],"tindex":"1c1f00d5-3f31-11e6-a209-1de81aa6e954","method":{"position":"org.apache.commons.lang3.StringUtils:5410","type":"CtMethodImpl","sourcecode":"public static java.lang.String leftPad(final java.lang.String str, final int size, java.lang.String padStr) {\n    if (size <= 0) {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (org.apache.commons.lang3.StringUtils.isEmpty(padStr)) {\n                padStr = org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = padStr.length();\n            final int int = str.length();\n            final int int = size - strLen;\n            if (pads <= 0) {\n                return str;\n            } \n            if ((padLen == 1) && (pads <= (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int))) {\n                return org.apache.commons.lang3.StringUtils.leftPad(str, size, padStr.charAt(0));\n            } \n            if (pads == padLen) {\n                return padStr.concat(str);\n            } else if (pads < padLen) {\n                return padStr.substring(0, pads).concat(str);\n            } else {\n                final char[] char[] = new char[pads];\n                final char[] char[] = padStr.toCharArray();\n                for (int int = 0 ; i < pads ; i++) {\n                    padding[i] = padChars[(i % padLen)];\n                }\n                return new java.lang.String(padding).concat(str);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"noOfItems":"size"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:70","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c1f00d6-3f31-11e6-a209-e1b3d4af6a07","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:539","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final boolean[] array) {\n    if (fieldName == null) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:596","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c1f27e7-3f31-11e6-a209-db3d384e59e2","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1611","type":"CtMethodImpl","sourcecode":"private static boolean equals(java.lang.reflect.GenericArrayType a, java.lang.reflect.Type t) {\n    if (t == null) {\n        {\n            return (t instanceof java.lang.reflect.GenericArrayType) && (org.apache.commons.lang3.reflect.TypeUtils.equals(a.getGenericComponentType(), ((java.lang.reflect.GenericArrayType)(t)).getGenericComponentType()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toWildcardType":"t"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:239","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c1f27e8-3f31-11e6-a209-e984958917bf","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:434","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String format(final java.util.Calendar calendar) {\n    if ((calendar == null) || (calendar == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.FastDatePrinter.format(calendar);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cal2":"calendar","cal1":"calendar"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:711","type":"CtBinaryOperatorImpl"},"failures":[29,30,31,32,33,34,35,36,37,38,39,40,22,41,42,43,44,45,45,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],"tindex":"1c1f27e9-3f31-11e6-a209-eb5d27d89d32","method":{"position":"org.apache.commons.lang3.ClassUtils:175","type":"CtMethodImpl","sourcecode":"public static java.lang.String getShortClassName(final java.lang.Class<?> cls) {\n    if ((cls != null) && (cls.isPrimitive())) {\n        {\n            if (cls == null) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            return org.apache.commons.lang3.ClassUtils.getShortClassName(cls.getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:146","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c1f4efa-3f31-11e6-a209-ad86b0c4b332","method":{"position":"org.apache.commons.lang3.ArrayUtils:512","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] nullToEmpty(final java.lang.String[] array) {\n    if ((((org.apache.commons.lang3.StringUtils.isAllLowerCase(array[0])) && (((split[0].length()) == 2) || ((split[0].length()) == 3))) && (((split[1].length()) == 0) || (((split[1].length()) == 2) && (org.apache.commons.lang3.StringUtils.isAllUpperCase(split[1]))))) && ((split[2].length()) > 0)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.String[];\n            } \n            return array;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"split":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:557","type":"CtBinaryOperatorImpl"},"failures":[128],"tindex":"1c1f4efb-3f31-11e6-a209-d300765f083a","method":{"position":"org.apache.commons.lang3.math.NumberUtils:351","type":"CtMethodImpl","sourcecode":"public static short toShort(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short)(0)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1870","type":"CtBinaryOperatorImpl"},"failures":[129],"tindex":"1c1f760c-3f31-11e6-a209-bf551289b4d0","method":{"position":"org.apache.commons.lang3.ArrayUtils:4836","type":"CtMethodImpl","sourcecode":"public static char[] removeElement(final char[] array, final char element) {\n    if (element != element) {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"search":"element","replace":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.InheritanceUtils:50","type":"CtBinaryOperatorImpl"},"failures":[31,32,33,34,35,36,37,38,39,40,22,41,42,43,44,45,45,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],"tindex":"1c1f760d-3f31-11e6-a209-bf8ea0abd3b0","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1589","type":"CtMethodImpl","sourcecode":"protected java.lang.String getShortClassName(final java.lang.Class<?> cls) {\n    if ((cls == null) || (cls == null)) {\n        {\n            return org.apache.commons.lang3.ClassUtils.getShortClassName(cls);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"cls","child":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1244","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c1f9d1e-3f31-11e6-a209-bf335bde4047","method":{"position":"org.apache.commons.lang3.BitField:227","type":"CtMethodImpl","sourcecode":"public short setShort(final short holder) {\n    if (holder > holder) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((short)(set(holder)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"holder","c":"holder"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:255","type":"CtBinaryOperatorImpl"},"failures":[130],"tindex":"1c1f9d1f-3f31-11e6-a209-49d45bc2049e","method":{"position":"org.apache.commons.lang3.time.FastDateParser:298","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object parseObject(final java.lang.String source, final java.text.ParsePosition pos) {\n    if (source == null) {\n        {\n            return parse(source, pos);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:894","type":"CtBinaryOperatorImpl"},"failures":[131],"tindex":"1c1f9d20-3f31-11e6-a209-952c7979ba87","method":{"position":"org.apache.commons.lang3.ArrayUtils:3632","type":"CtMethodImpl","sourcecode":"public static boolean isNotEmpty(final short[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (array != null) && ((array.int) != 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2126","type":"CtBinaryOperatorImpl"},"failures":[132],"tindex":"1c1f9d21-3f31-11e6-a209-29ec80af5574","method":{"position":"org.apache.commons.lang3.text.StrBuilder:375","type":"CtMethodImpl","sourcecode":"public char[] toCharArray(final int startIndex, int endIndex) {\n    if (startIndex < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            endIndex = validateRange(startIndex, endIndex);\n            final int int = endIndex - startIndex;\n            if (len == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.char[];\n            } \n            final char[] char[] = new char[len];\n            java.lang.System.arraycopy(char[], startIndex, chars, 0, len);\n            return chars;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"startIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:596","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c1fc432-3f31-11e6-a209-f94d1084af1f","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1807","type":"CtMethodImpl","sourcecode":"private static java.lang.String wildcardTypeToString(java.lang.reflect.WildcardType w) {\n    if (w == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder().append('?');\n            final java.lang.reflect.Type[] java.lang.reflect.Type[] = w.getLowerBounds();\n            final java.lang.reflect.Type[] java.lang.reflect.Type[] = w.getUpperBounds();\n            if ((lowerBounds.int) > 0) {\n                org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(buf.append(\" super \"), \" & \", lowerBounds);\n            } else if (!(((upperBounds.int) == 1) && (java.lang.Object.java.lang.Object.java.lang.Class.equals(upperBounds[0])))) {\n                org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(buf.append(\" extends \"), \" & \", upperBounds);\n            } \n            return buf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toWildcardType":"w"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:1012","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c1fc433-3f31-11e6-a209-ed7e8845354c","method":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:102","type":"CtMethodImpl","sourcecode":"public static double min(final double a, final double b) {\n    if ((b < a) || (value > a)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.lang.Double.isNaN(a)) {\n                return b;\n            } else if (java.lang.Double.isNaN(b)) {\n                return a;\n            } else {\n                return java.lang.Math.min(a, b);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"a","end":"a","value":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.SystemUtils:1465","type":"CtBinaryOperatorImpl"},"failures":[63,63],"tindex":"1c1fc434-3f31-11e6-a209-49464df5b3fc","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:829","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final float value) {\n    if (fieldName == null) {\n        {\n            buffer.append(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"osName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2591","type":"CtInvocationImpl"},"failures":[133,134],"tindex":"1c1fc435-3f31-11e6-a209-b323e8d1cdb3","method":{"position":"org.apache.commons.lang3.ArrayUtils:632","type":"CtMethodImpl","sourcecode":"public static double[] nullToEmpty(final double[] array) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.double[];\n            } \n            return array;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.JavaVersion:132","type":"CtInvocationImpl"},"failures":[135,136],"tindex":"1c1feb46-3f31-11e6-a209-9d324638302b","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1245","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendSeparator(final java.lang.String standard, final java.lang.String defaultIfEmpty) {\n    if (\"0.9\".equals(defaultIfEmpty)) {\n        {\n            final java.lang.String java.lang.String = isEmpty() ? defaultIfEmpty : standard;\n            if (str != null) {\n                append(str);\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"defaultIfEmpty"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:970","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c1feb47-3f31-11e6-a209-99b4e1d82b0b","method":{"position":"org.apache.commons.lang3.CharSequenceUtils:69","type":"CtMethodImpl","sourcecode":"static int indexOf(final java.lang.CharSequence cs, final int searchChar, int start) {\n    if (cs != null) {\n        {\n            if (cs instanceof java.lang.String) {\n                return ((java.lang.String)(cs)).indexOf(searchChar, start);\n            } else {\n                final int int = cs.length();\n                if (start < 0) {\n                    start = 0;\n                } \n                for (int int = start ; i < sz ; i++) {\n                    if ((cs.charAt(i)) == searchChar) {\n                        return i;\n                    } \n                }\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"abbreviation":"cs"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:811","type":"CtBinaryOperatorImpl"},"failures":[137,138],"tindex":"1c1feb48-3f31-11e6-a209-33cf250c9a27","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:656","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final char[] array) {\n    if (array == array) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                int = (int) * (int);\n            } else {\n                for (final char char : array) {\n                    append(element);\n                }\n            }\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:539","type":"CtBinaryOperatorImpl"},"failures":[139,140,141,142,143,144],"tindex":"1c201259-3f31-11e6-a209-79c2c250dc53","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:455","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(final char[] source, final int offset, final int length) {\n    if ((length % 2) == 0) {\n        {\n            if (source == null) {\n                return null;\n            } \n            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(length).append(source, offset, length);\n            substitute(buf, 0, length);\n            return buf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"initialOddNumber":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:381","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,25,11,13,14,15,16,18,19,20,21],"tindex":"1c20125a-3f31-11e6-a209-0f3b06dcfeee","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:212","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final byte lhs, final byte rhs) {\n    if (fieldName == null) {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (lhs != rhs) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Byte>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Byte getLeft() {\n                        return java.lang.Byte.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Byte getRight() {\n                        return java.lang.Byte.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:315","type":"CtArrayReadImpl"},"failures":[145,146],"tindex":"1c20125b-3f31-11e6-a209-8b08f6d1b54c","method":{"position":"org.apache.commons.lang3.ArrayUtils:2913","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n    if (array[startIndex]) {\n        {\n            if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } else if (startIndex >= (array.int)) {\n                startIndex = (array.int) - 1;\n            } \n            for (int int = startIndex ; i >= 0 ; i--) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcPos":"startIndex","src":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:127","type":"CtBinaryOperatorImpl"},"failures":[147],"tindex":"1c20396c-3f31-11e6-a209-a718caafd5d6","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1948","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder replaceFirst(final org.apache.commons.lang3.text.StrMatcher matcher, final java.lang.String replaceStr) {\n    if (replaceStr == null) {\n        {\n            return replace(matcher, replaceStr, 0, int, 1);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"replaceStr"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:770","type":"CtVariableReadImpl"},"failures":[117,118,119,120,121,122,123,124],"tindex":"1c20396d-3f31-11e6-a209-899d587a9e01","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:89","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setUseShortClassName(final boolean useShortClassName) {\n    if (useShortClassName) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            super.setUseShortClassName(useShortClassName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"useShortClassName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5515","type":"CtBinaryOperatorImpl"},"failures":[148,149,150,151],"tindex":"1c20396e-3f31-11e6-a209-5f08c69e6dc7","method":{"position":"org.apache.commons.lang3.BitField:65","type":"CtMethodImpl","sourcecode":"public int getValue(final int holder) {\n    if (holder <= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (getRawValue(holder)) >> (int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pads":"holder"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6911","type":"CtBinaryOperatorImpl"},"failures":[152],"tindex":"1c20396f-3f31-11e6-a209-1195acd792ff","method":{"position":"org.apache.commons.lang3.Conversion:1469","type":"CtMethodImpl","sourcecode":"public static java.lang.String shortToHex(final short src, final int srcPos, final java.lang.String dstInit, final int dstPos, final int nHexs) {\n    if (dstPos > nHexs) {\n        {\n            if (0 == nHexs) {\n                return dstInit;\n            } \n            if ((((nHexs - 1) * 4) + srcPos) >= 16) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+srcPos is greather or equal to than 16\");\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(dstInit);\n            int int = 0;\n            int int = sb.length();\n            for (int int = 0 ; i < nHexs ; i++) {\n                shift = (i * 4) + srcPos;\n                final int int = 15 & (src >> shift);\n                if ((dstPos + i) == append) {\n                    ++append;\n                    sb.append(org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                } else {\n                    sb.setCharAt((dstPos + i), org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                }\n            }\n            return sb.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"nHexs","n":"dstPos"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:968","type":"CtBinaryOperatorImpl"},"failures":[153],"tindex":"1c206080-3f31-11e6-a209-edc3c24cf40a","method":{"position":"org.apache.commons.lang3.mutable.MutableLong:137","type":"CtMethodImpl","sourcecode":"public void add(final long operand) {\n    if ((operand < operand) || (value > operand)) {\n        {\n            org.apache.commons.lang3.mutable.MutableLong.this.long += operand;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"operand","end":"operand","value":"operand"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:556","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c206081-3f31-11e6-a209-a780769deb43","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:675","type":"CtMethodImpl","sourcecode":"private static boolean isAssignable(final java.lang.reflect.Type type, final java.lang.reflect.TypeVariable<?> toTypeVariable, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeVarAssigns) {\n    if (type instanceof java.lang.reflect.TypeVariable<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type == null) {\n                return true;\n            } \n            if (toTypeVariable == null) {\n                return false;\n            } \n            if (toTypeVariable.equals(type)) {\n                return true;\n            } \n            if (type instanceof java.lang.reflect.TypeVariable<?>) {\n                final java.lang.reflect.Type[] java.lang.reflect.Type[] = org.apache.commons.lang3.reflect.TypeUtils.getImplicitBounds(((java.lang.reflect.TypeVariable<?>)(type)));\n                for (final java.lang.reflect.Type java.lang.reflect.Type : bounds) {\n                    if (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(bound, toTypeVariable, typeVarAssigns)) {\n                        return true;\n                    } \n                }\n            } \n            if ((((type instanceof java.lang.Class<?>) || (type instanceof java.lang.reflect.ParameterizedType)) || (type instanceof java.lang.reflect.GenericArrayType)) || (type instanceof java.lang.reflect.WildcardType)) {\n                return false;\n            } \n            throw new java.lang.IllegalStateException((\"found an unhandled type: \" + type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:973","type":"CtInvocationImpl"},"failures":[],"tindex":"1c206082-3f31-11e6-a209-4537b2bc88af","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1258","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if ((org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey.this) == obj) {\n        return true;\n    } \n    if (obj instanceof org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey) {\n        final org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey = ((org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey)(obj));\n        return ((java.util.TimeZone.equals(other.java.util.TimeZone)) && ((int) == (other.int))) && (java.util.Locale.equals(other.java.util.Locale));\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"obj","fullDetail":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:441","type":"CtBinaryOperatorImpl"},"failures":[154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191],"tindex":"1c208793-3f31-11e6-a209-43984c442314","method":{"position":"org.apache.commons.lang3.ArrayUtils:6011","type":"CtMethodImpl","sourcecode":"static java.lang.Object removeAll(final java.lang.Object array, final int... indices) {\n    if (array == null) {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.getLength(array);\n            int int = 0;\n            if (org.apache.commons.lang3.ArrayUtils.isNotEmpty(indices)) {\n                java.util.Arrays.sort(indices);\n                int int = indices.int;\n                int int = length;\n                while ((--i) >= 0) {\n                    final int int = indices[i];\n                    if ((index < 0) || (index >= length)) {\n                        throw new java.lang.IndexOutOfBoundsException((((\"Index: \" + index) + \", Length: \") + length));\n                    } \n                    if (index >= prevIndex) {\n                        continue;\n                    } \n                    diff++;\n                    prevIndex = index;\n                }\n            } \n            final java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(array.getClass().getComponentType(), (length - diff));\n            if (diff < length) {\n                int int = length;\n                int int = length - diff;\n                for (int int = (indices.int) - 1 ; i >= 0 ; i--) {\n                    final int int = indices[i];\n                    if ((end - index) > 1) {\n                        final int int = (end - index) - 1;\n                        dest -= cp;\n                        java.lang.System.arraycopy(array, (index + 1), result, dest, cp);\n                    } \n                    end = index;\n                }\n                if (end > 0) {\n                    java.lang.System.arraycopy(array, 0, result, 0, end);\n                } \n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:387","type":"CtBinaryOperatorImpl"},"failures":[192],"tindex":"1c208794-3f31-11e6-a209-41ba7195a53a","method":{"position":"org.apache.commons.lang3.ArrayUtils:1299","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final char[] array1, final char[] array2) {\n    if (array1 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4218","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,25,11,13,14,15,16,18,19,20,21],"tindex":"1c208795-3f31-11e6-a209-75c09c02c646","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:715","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final short lhs, final short rhs) {\n    if (fieldName.startsWith(fieldName)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (lhs != rhs) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Short>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Short getLeft() {\n                        return java.lang.Short.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Short getRight() {\n                        return java.lang.Short.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName","remove":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MethodUtils:371","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c20aea6-3f31-11e6-a209-e791a581df1b","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:512","type":"CtMethodImpl","sourcecode":"public static java.util.Set<java.lang.reflect.Method> getOverrideHierarchy(final java.lang.reflect.Method method, org.apache.commons.lang3.ClassUtils.Interfaces interfacesBehavior) {\n    if (method == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.notNull(method);\n            final java.util.Set<java.lang.reflect.Method> java.util.Set<java.lang.reflect.Method> = new java.util.LinkedHashSet<java.lang.reflect.Method>();\n            result.add(method);\n            final java.lang.Class<?>[] java.lang.Class<?>[] = method.getParameterTypes();\n            final java.lang.Class<?> java.lang.Class<?> = method.getDeclaringClass();\n            final java.util.Iterator<java.lang.Class<?>> java.util.Iterator<java.lang.Class<?>> = org.apache.commons.lang3.ClassUtils.hierarchy(declaringClass, interfacesBehavior).iterator();\n            hierarchy.next();\n            hierarchyTraversal : while (hierarchy.hasNext()) {\n                final java.lang.Class<?> java.lang.Class<?> = hierarchy.next();\n                final java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.getMatchingAccessibleMethod(c, method.getName(), parameterTypes);\n                if (m == null) {\n                    continue;\n                } \n                if (java.util.Arrays.equals(m.getParameterTypes(), parameterTypes)) {\n                    result.add(m);\n                    continue;\n                } \n                final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(declaringClass, m.getDeclaringClass());\n                for (int int = 0 ; i < (parameterTypes.int) ; i++) {\n                    final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(typeArguments, method.getGenericParameterTypes()[i]);\n                    final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(typeArguments, m.getGenericParameterTypes()[i]);\n                    if (!(org.apache.commons.lang3.reflect.TypeUtils.equals(childType, parentType))) {\n                        continue hierarchyTraversal;\n                    } \n                }\n                result.add(m);\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"method":"method"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:900","type":"CtUnaryOperatorImpl"},"failures":[193,194,195,196,197],"tindex":"1c20aea7-3f31-11e6-a209-6b9d83edb4af","method":{"position":"org.apache.commons.lang3.reflect.MemberUtils:132","type":"CtMethodImpl","sourcecode":"private static float getObjectTransformationCost(java.lang.Class<?> srcClass, final java.lang.Class<?> destClass) {\n    if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(srcClass, destClass))) {\n        {\n            if (destClass.isPrimitive()) {\n                return org.apache.commons.lang3.reflect.MemberUtils.getPrimitivePromotionCost(srcClass, destClass);\n            } \n            float float = 0.0F;\n            while ((srcClass != null) && (!(destClass.equals(srcClass)))) {\n                if ((destClass.isInterface()) && (org.apache.commons.lang3.ClassUtils.isAssignable(srcClass, destClass))) {\n                    cost += 0.25F;\n                    break;\n                } \n                cost++;\n                srcClass = srcClass.getSuperclass();\n            }\n            if (srcClass == null) {\n                cost += 1.5F;\n            } \n            return cost;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toClass":"destClass","cls":"srcClass"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3765","type":"CtBinaryOperatorImpl"},"failures":[198],"tindex":"1c20d5b8-3f31-11e6-a209-95ab60d160e4","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:887","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {\n    if (lhs == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs == null) || (rhs == null)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && (boolean) ; ++i) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array2":"lhs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.LookupTranslator:53","type":"CtBinaryOperatorImpl"},"failures":[199,200,201,202,203,204,205,206,207,208],"tindex":"1c20d5b9-3f31-11e6-a209-0f6b2ec6b285","method":{"position":"org.apache.commons.lang3.math.Fraction:576","type":"CtMethodImpl","sourcecode":"private static int greatestCommonDivisor(int u, int v) {\n    if (v == v) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (v < v) {\n                {\n                    if ((u == 0) || (v == 0)) {\n                        if ((u == (java.lang.Integer.java.lang.Integer.int)) || (v == (java.lang.Integer.java.lang.Integer.int))) {\n                            throw new java.lang.ArithmeticException(\"overflow: gcd is 2^31\");\n                        } \n                        return (java.lang.Math.abs(u)) + (java.lang.Math.abs(v));\n                    } \n                    if (((java.lang.Math.abs(u)) == 1) || ((java.lang.Math.abs(v)) == 1)) {\n                        return 1;\n                    } \n                    if (u > 0) {\n                        u = -u;\n                    } \n                    if (v > 0) {\n                        v = -v;\n                    } \n                    int int = 0;\n                    while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {\n                        u /= 2;\n                        v /= 2;\n                        k++;\n                    }\n                    if (k == 31) {\n                        throw new java.lang.ArithmeticException(\"overflow: gcd is 2^31\");\n                    } \n                    int int = (u & 1) == 1 ? v : -(u / 2);\n                    do {\n                        while ((t & 1) == 0) {\n                            t /= 2;\n                        }\n                        if (t > 0) {\n                            u = -t;\n                        } else {\n                            v = t;\n                        }\n                        t = (v - u) / 2;\n                    } while (t != 0 );\n                    return (-u) * (1 << k);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"_shortest":"v","sz":"v"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:584","type":"CtBinaryOperatorImpl"},"failures":[209],"tindex":"1c20fcca-3f31-11e6-a209-8ba6e477fb54","method":{"position":"org.apache.commons.lang3.StringUtils:616","type":"CtMethodImpl","sourcecode":"public static java.lang.String stripStart(final java.lang.String str, final java.lang.String stripChars) {\n    if ((str == null) && (stripChars == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int;\n            if ((str == null) || ((strLen = str.length()) == 0)) {\n                return str;\n            } \n            int int = 0;\n            if (stripChars == null) {\n                while ((start != strLen) && (java.lang.Character.isWhitespace(str.charAt(start)))) {\n                    start++;\n                }\n            } else if (stripChars.isEmpty()) {\n                return str;\n            } else {\n                while ((start != strLen) && ((stripChars.indexOf(str.charAt(start))) != (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int))) {\n                    start++;\n                }\n            }\n            return str.substring(start);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dec":"str","exp":"stripChars"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6687","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c20fccb-3f31-11e6-a209-3b6c7448b0b3","method":{"position":"org.apache.commons.lang3.math.Fraction:576","type":"CtMethodImpl","sourcecode":"private static int greatestCommonDivisor(int u, int v) {\n    if (v == v) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (v < v) {\n                {\n                    if ((u == 0) || (v == 0)) {\n                        if ((u == (java.lang.Integer.java.lang.Integer.int)) || (v == (java.lang.Integer.java.lang.Integer.int))) {\n                            throw new java.lang.ArithmeticException(\"overflow: gcd is 2^31\");\n                        } \n                        return (java.lang.Math.abs(u)) + (java.lang.Math.abs(v));\n                    } \n                    if (((java.lang.Math.abs(u)) == 1) || ((java.lang.Math.abs(v)) == 1)) {\n                        return 1;\n                    } \n                    if (u > 0) {\n                        u = -u;\n                    } \n                    if (v > 0) {\n                        v = -v;\n                    } \n                    int int = 0;\n                    while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {\n                        u /= 2;\n                        v /= 2;\n                        k++;\n                    }\n                    if (k == 31) {\n                        throw new java.lang.ArithmeticException(\"overflow: gcd is 2^31\");\n                    } \n                    int int = (u & 1) == 1 ? v : -(u / 2);\n                    do {\n                        while ((t & 1) == 0) {\n                            t /= 2;\n                        }\n                        if (t > 0) {\n                            u = -t;\n                        } else {\n                            v = t;\n                        }\n                        t = (v - u) / 2;\n                    } while (t != 0 );\n                    return (-u) * (1 << k);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND":"v","smallestIndexOfDiff":"v"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:845","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c20fccc-3f31-11e6-a209-a52b9dbefb78","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1378","type":"CtMethodImpl","sourcecode":"protected void appendSummary(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final float[] array) {\n    if (fieldName == null) {\n        {\n            appendSummarySize(buffer, fieldName, array.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"varValue":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:496","type":"CtBinaryOperatorImpl"},"failures":[210],"tindex":"1c2123dd-3f31-11e6-a209-f79332f9129d","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:610","type":"CtMethodImpl","sourcecode":"public boolean replaceIn(final java.lang.StringBuffer source) {\n    if (source == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return false;\n            } \n            return replaceIn(source, 0, source.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:969","type":"CtInvocationImpl"},"failures":[],"tindex":"1c2123de-3f31-11e6-a209-354a211171d1","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1047","type":"CtMethodImpl","sourcecode":"private static java.lang.reflect.Type getClosestParentType(final java.lang.Class<?> cls, final java.lang.Class<?> superClass) {\n    if (cls.equals(superClass)) {\n        {\n            if (cls.equals(superClass)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (superClass.isInterface()) {\n                        final java.lang.reflect.Type[] java.lang.reflect.Type[] = cls.getGenericInterfaces();\n                        java.lang.reflect.Type java.lang.reflect.Type = null;\n                        for (final java.lang.reflect.Type java.lang.reflect.Type : interfaceTypes) {\n                            java.lang.Class<?> java.lang.Class<?> = null;\n                            if (midType instanceof java.lang.reflect.ParameterizedType) {\n                                midClass = org.apache.commons.lang3.reflect.TypeUtils.getRawType(((java.lang.reflect.ParameterizedType)(midType)));\n                            } else if (midType instanceof java.lang.Class<?>) {\n                                midClass = ((java.lang.Class<?>)(midType));\n                            } else {\n                                throw new java.lang.IllegalStateException(((\"Unexpected generic\" + \" interface type found: \") + midType));\n                            }\n                            if ((org.apache.commons.lang3.reflect.TypeUtils.isAssignable(midClass, superClass)) && (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(genericInterface, ((java.lang.reflect.Type)(midClass))))) {\n                                genericInterface = midType;\n                            } \n                        }\n                        if (genericInterface != null) {\n                            return genericInterface;\n                        } \n                    } \n                    return cls.getGenericSuperclass();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superClass":"superClass","cls":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:200","type":"CtBinaryOperatorImpl"},"failures":[211,212,213],"tindex":"1c2123df-3f31-11e6-a209-611b2047987c","method":{"position":"org.apache.commons.lang3.BooleanUtils:356","type":"CtMethodImpl","sourcecode":"public static java.lang.Boolean toBooleanObject(final java.lang.Integer value, final java.lang.Integer trueValue, final java.lang.Integer falseValue, final java.lang.Integer nullValue) {\n    if (falseValue == null) {\n        {\n            if (value == null) {\n                if (trueValue == null) {\n                    return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n                } \n                if (falseValue == null) {\n                    return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n                } \n                if (nullValue == null) {\n                    return null;\n                } \n            } else if (value.equals(trueValue)) {\n                return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n            } else if (value.equals(falseValue)) {\n                return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n            } else if (value.equals(nullValue)) {\n                return null;\n            } \n            throw new java.lang.IllegalArgumentException(\"The Integer did not match any specified value\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"timeStyle":"falseValue"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:829","type":"CtBinaryOperatorImpl"},"failures":[214],"tindex":"1c214af0-3f31-11e6-a209-f7bb109f94aa","method":{"position":"org.apache.commons.lang3.ArrayUtils:3965","type":"CtMethodImpl","sourcecode":"public static double[] addAll(final double[] array1, final double... array2) {\n    if (array1 == array2) {\n        {\n            if (array1 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array2);\n            } else if (array2 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array1);\n            } \n            final double[] double[] = new double[(array1.int) + (array2.int)];\n            java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n            java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n            return joinedArray;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array1","rhs":"array2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:940","type":"CtBinaryOperatorImpl"},"failures":[215,216,217,218,219,220,221,222,223,224],"tindex":"1c214af1-3f31-11e6-a209-7b00a08b63a4","method":{"position":"org.apache.commons.lang3.ArrayUtils:3433","type":"CtMethodImpl","sourcecode":"public static boolean[] toPrimitive(final java.lang.Boolean[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.boolean[];\n            } \n            final boolean[] boolean[] = new boolean[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = array[i].booleanValue();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5003","type":"CtBinaryOperatorImpl"},"failures":[225,226,227],"tindex":"1c214af2-3f31-11e6-a209-7d3355a265fe","method":{"position":"org.apache.commons.lang3.CharUtils:497","type":"CtMethodImpl","sourcecode":"public static boolean isAsciiAlphaLower(final char ch) {\n    if ((ch == ch) || (ch == ch)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (ch >= 'a') && (ch <= 'z');\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch","org.apache.commons.lang3.CharUtils.LF":"ch","org.apache.commons.lang3.CharUtils.CR":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:137","type":"CtInvocationImpl"},"failures":[228],"tindex":"1c214af3-3f31-11e6-a209-053888eba324","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1049","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final float value) {\n    if (java.lang.Float.isNaN(value)) {\n        {\n            return append(value).appendNewLine();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:969","type":"CtInvocationImpl"},"failures":[],"tindex":"1c217204-3f31-11e6-a209-1fda3f3f8dda","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1047","type":"CtMethodImpl","sourcecode":"private static java.lang.reflect.Type getClosestParentType(final java.lang.Class<?> cls, final java.lang.Class<?> superClass) {\n    if (cls.equals(superClass)) {\n        {\n            if (cls.equals(superClass)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (superClass.isInterface()) {\n                        final java.lang.reflect.Type[] java.lang.reflect.Type[] = cls.getGenericInterfaces();\n                        java.lang.reflect.Type java.lang.reflect.Type = null;\n                        for (final java.lang.reflect.Type java.lang.reflect.Type : interfaceTypes) {\n                            java.lang.Class<?> java.lang.Class<?> = null;\n                            if (midType instanceof java.lang.reflect.ParameterizedType) {\n                                midClass = org.apache.commons.lang3.reflect.TypeUtils.getRawType(((java.lang.reflect.ParameterizedType)(midType)));\n                            } else if (midType instanceof java.lang.Class<?>) {\n                                midClass = ((java.lang.Class<?>)(midType));\n                            } else {\n                                throw new java.lang.IllegalStateException(((\"Unexpected generic\" + \" interface type found: \") + midType));\n                            }\n                            if ((org.apache.commons.lang3.reflect.TypeUtils.isAssignable(midClass, superClass)) && (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(genericInterface, ((java.lang.reflect.Type)(midClass))))) {\n                                genericInterface = midType;\n                            } \n                        }\n                        if (genericInterface != null) {\n                            return genericInterface;\n                        } \n                    } \n                    return cls.getGenericSuperclass();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superClass":"superClass","cls":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3850","type":"CtBinaryOperatorImpl"},"failures":[93,93],"tindex":"1c217205-3f31-11e6-a209-35e35b41fc01","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:513","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final short[] array) {\n    if (array == null) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharRange:183","type":"CtBinaryOperatorImpl"},"failures":[229],"tindex":"1c217206-3f31-11e6-a209-a3107a33cf5b","method":{"position":"org.apache.commons.lang3.CharRange:182","type":"CtMethodImpl","sourcecode":"public boolean contains(final org.apache.commons.lang3.CharRange range) {\n    if (range == null) {\n        {\n            if (range == null) {\n                throw new java.lang.IllegalArgumentException(\"The Range must not be null\");\n            } \n            if (boolean) {\n                if (range.boolean) {\n                    return ((char) >= (range.char)) && ((char) <= (range.char));\n                } \n                return ((range.char) < (char)) || ((range.char) > (char));\n            } \n            if (range.boolean) {\n                return ((char) == 0) && ((char) == (java.lang.Character.java.lang.Character.char));\n            } \n            return ((char) <= (range.char)) && ((char) >= (range.char));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"range":"range"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:455","type":"CtInvocationImpl"},"failures":[230],"tindex":"1c219917-3f31-11e6-a209-2525485adf47","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1000","type":"CtMethodImpl","sourcecode":"private static <T>void mapTypeVariablesToArguments(final java.lang.Class<T> cls, final java.lang.reflect.ParameterizedType parameterizedType, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeVarAssigns) {\n    if (typeVarAssigns.isEmpty()) {\n        {\n            final java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getOwnerType();\n            if (ownerType instanceof java.lang.reflect.ParameterizedType) {\n                org.apache.commons.lang3.reflect.TypeUtils.mapTypeVariablesToArguments(cls, ((java.lang.reflect.ParameterizedType)(ownerType)), typeVarAssigns);\n            } \n            final java.lang.reflect.Type[] java.lang.reflect.Type[] = parameterizedType.getActualTypeArguments();\n            final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = org.apache.commons.lang3.reflect.TypeUtils.getRawType(parameterizedType).getTypeParameters();\n            final java.util.List<java.lang.reflect.TypeVariable<java.lang.Class<T>>> java.util.List<java.lang.reflect.TypeVariable<java.lang.Class<T>>> = java.util.Arrays.asList(cls.getTypeParameters());\n            for (int int = 0 ; i < (typeArgs.int) ; i++) {\n                final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = typeVars[i];\n                final java.lang.reflect.Type java.lang.reflect.Type = typeArgs[i];\n                if ((typeVarList.contains(typeArg)) && (typeVarAssigns.containsKey(typeVar))) {\n                    typeVarAssigns.put(((java.lang.reflect.TypeVariable<?>)(typeArg)), typeVarAssigns.get(typeVar));\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fromTypeVarAssigns":"typeVarAssigns"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c219918-3f31-11e6-a209-e573096ff180","method":{"position":"org.apache.commons.lang3.ArrayUtils:4097","type":"CtMethodImpl","sourcecode":"public static char[] add(final char[] array, final char element) {\n    if (element == '_') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char[] char[] = ((char[])(org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(array, java.lang.Character.java.lang.Character.java.lang.Class<java.lang.Character>)));\n            newArray[((newArray.int) - 1)] = element;\n            return newArray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch0":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:495","type":"CtVariableReadImpl"},"failures":[145],"tindex":"1c219919-3f31-11e6-a209-c59edffdfd96","method":{"position":"org.apache.commons.lang3.ArrayUtils:2895","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final boolean[] array, final boolean valueToFind) {\n    if (valueToFind) {\n        {\n            return org.apache.commons.lang3.ArrayUtils.lastIndexOf(array, valueToFind, java.lang.Integer.java.lang.Integer.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"detail":"valueToFind"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:253","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c21991a-3f31-11e6-a209-7d13f020cf24","method":{"position":"org.apache.commons.lang3.text.StrBuilder:863","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final java.lang.String str) {\n    if (str != null) {\n        {\n            return append(str).appendNewLine();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1443","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c21991b-3f31-11e6-a209-1f6c7baa598a","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:755","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final int value) {\n    if ((value + value) == value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"value","i":"value","append":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5269","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c21c02c-3f31-11e6-a209-a5c5aaaad8c6","method":{"position":"org.apache.commons.lang3.time.DateUtils:568","type":"CtMethodImpl","sourcecode":"public static java.util.Date setDays(final java.util.Date date, final int amount) {\n    if (amount > amount) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.set(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pads":"amount","org.apache.commons.lang3.StringUtils.PAD_LIMIT":"amount"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDateParser:463","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c21c02d-3f31-11e6-a209-a5001af9fe8b","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:370","type":"CtMethodImpl","sourcecode":"private java.lang.String parseFormatDescription(final java.lang.String pattern, final java.text.ParsePosition pos) {\n    if ((pattern.length()) > 2) {\n        {\n            final int int = pos.getIndex();\n            seekNonWs(pattern, pos);\n            final int int = pos.getIndex();\n            int int = 1;\n            for ( ; (pos.getIndex()) < (pattern.length()) ; next(pos)) {\n                switch (pattern.charAt(pos.getIndex())) {\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        depth++;\n                        break;\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        depth--;\n                        if (depth == 0) {\n                            return pattern.substring(text, pos.getIndex());\n                        } \n                        break;\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        getQuotedString(pattern, pos, false);\n                        break;\n                    default :\n                        break;\n                }\n            }\n            throw new java.lang.IllegalArgumentException((\"Unterminated format element at position \" + start));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"formatField":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:730","type":"CtBinaryOperatorImpl"},"failures":[231,232],"tindex":"1c21c02e-3f31-11e6-a209-aba2a15d73de","method":{"position":"org.apache.commons.lang3.StringUtils:6540","type":"CtMethodImpl","sourcecode":"public static int indexOfDifference(final java.lang.CharSequence cs1, final java.lang.CharSequence cs2) {\n    if (cs1 == cs1) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cs1 == cs2) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            if ((cs1 == null) || (cs2 == null)) {\n                return 0;\n            } \n            int int;\n            for (i = 0 ; (i < (cs1.length())) && (i < (cs2.length())) ; ++i) {\n                if ((cs1.charAt(i)) != (cs2.charAt(i))) {\n                    break;\n                } \n            }\n            if ((i < (cs2.length())) || (i < (cs1.length()))) {\n                return i;\n            } \n            return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"cs1","falseString":"cs1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2517","type":"CtBinaryOperatorImpl"},"failures":[117,118,119,120,121,122,123,124],"tindex":"1c21e73f-3f31-11e6-a209-25e3ce58129a","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:253","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setArraySeparator(final java.lang.String arraySeparator) {\n    if (((arraySeparator == null) || (org.apache.commons.lang3.StringUtils.isEmpty(arraySeparator))) || (org.apache.commons.lang3.StringUtils.isEmpty(arraySeparator))) {\n        {\n            super.setArraySeparator(arraySeparator);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"arraySeparator","close":"arraySeparator","open":"arraySeparator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1327","type":"CtBinaryOperatorImpl"},"failures":[233,234],"tindex":"1c21e740-3f31-11e6-a209-93ecbc368471","method":{"position":"org.apache.commons.lang3.ArrayUtils:2106","type":"CtMethodImpl","sourcecode":"public static int indexOf(final int[] array, final int valueToFind) {\n    if ((((valueToFind - 1) * 8) + valueToFind) >= 32) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind, 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBytes":"valueToFind","srcPos":"valueToFind"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:653","type":"CtBinaryOperatorImpl"},"failures":[235],"tindex":"1c21e741-3f31-11e6-a209-89ac0015ef1e","method":{"position":"org.apache.commons.lang3.StringUtils:7187","type":"CtMethodImpl","sourcecode":"public static boolean startsWithIgnoreCase(final java.lang.CharSequence str, final java.lang.CharSequence prefix) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.startsWith(str, prefix, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:339","type":"CtBinaryOperatorImpl"},"failures":[236],"tindex":"1c21e742-3f31-11e6-a209-9bacb413ee73","method":{"position":"org.apache.commons.lang3.ArrayUtils:5096","type":"CtMethodImpl","sourcecode":"public static long[] removeElement(final long[] array, final long element) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:913","type":"CtUnaryOperatorImpl"},"failures":[237],"tindex":"1c220e53-3f31-11e6-a209-3d5935f6c949","method":{"position":"org.apache.commons.lang3.ArrayUtils:4706","type":"CtMethodImpl","sourcecode":"public static boolean[] removeElement(final boolean[] array, final boolean element) {\n    if (!element) {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:981","type":"CtVariableReadImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,25,11,12,13,238,14,15,16,17,18,19,20,239,240,21,241,242,243,244,244,245,245,246,246,247,247,248,248,31,31,249,249,250,250,251,251,252,252,253,253,254,254,255,255,32,32,256,256,257,257,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,22,23,258,259,260,261,262,263,264,265,265,266,266,267,267,268,268,269,269,41,41,270,270,271,271,272,272,273,273,274,274,275,275,276,276,42,42,277,277,278,278,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,118,119,120,121,122,123,124,279,280,281,282,283,284,285,286,287,288,289,290,291,291,292,292,293,293,294,294,295,295,125,125,296,296,297,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327],"tindex":"1c220e54-3f31-11e6-a209-6bfc282120ad","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1612","type":"CtMethodImpl","sourcecode":"protected void setUseClassName(final boolean useClassName) {\n    if (useClassName) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (useClassName) {\n                {\n                    org.apache.commons.lang3.builder.ToStringStyle.this.boolean = useClassName;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"useClassName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:342","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c223565-3f31-11e6-a209-cb3a918973e5","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1558","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType genericArrayType(final java.lang.reflect.Type componentType) {\n    if (componentType instanceof java.lang.reflect.TypeVariable<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.lang3.reflect.TypeUtils.GenericArrayTypeImpl(org.apache.commons.lang3.Validate.notNull(componentType, \"componentType is null\"));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toType":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4096","type":"CtBinaryOperatorImpl"},"failures":[241,242,243,244,247,248,31,251,254,255,32,33,36,37,38,265,268,269,41,272,275,276,42,44,44,45,45,46,47,47,48,49,49,50,50,51,51,52,53,54,55,55,56,56,57,57,58,59,59,60,61,62,63,64,65,66,67,68,69,70,70,71,72,73,74,75,76,76,77,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,91,92,93,93,94,94,95,96,97,98,99,100,101,102,102,103,104,104,105,106,106,107,108,108,109,110,111,112,113,114,115,115,116,117,120,121,122,291,294,295,125,309,320,321,322,323,324,325,326,327],"tindex":"1c223566-3f31-11e6-a209-eb5e78131f17","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:471","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.Object obj) {\n    if (obj != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, obj, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"first":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:525","type":"CtBinaryOperatorImpl"},"failures":[328,329,330,331,332,333],"tindex":"1c223567-3f31-11e6-a209-8d2ecfaa2a8b","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:524","type":"CtMethodImpl","sourcecode":"private boolean containsElements(final java.util.Collection<?> coll) {\n    if ((coll == null) || (coll.isEmpty())) {\n        {\n            if ((coll == null) || (coll.isEmpty())) {\n                return false;\n            } \n            for (final java.lang.Object java.lang.Object : coll) {\n                if (name != null) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:815","type":"CtInvocationImpl"},"failures":[334,335,336,337,338],"tindex":"1c225c78-3f31-11e6-a209-379027fcfe9d","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1487","type":"CtMethodImpl","sourcecode":"public static final java.lang.reflect.ParameterizedType parameterizeWithOwner(final java.lang.reflect.Type owner, final java.lang.Class<?> raw, final java.lang.reflect.Type... typeArguments) {\n    if (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(owner, raw)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.notNull(raw, \"raw class is null\");\n            final java.lang.reflect.Type java.lang.reflect.Type;\n            if ((raw.getEnclosingClass()) == null) {\n                org.apache.commons.lang3.Validate.isTrue((owner == null), \"no owner allowed for top-level %s\", raw);\n                useOwner = null;\n            } else if (owner == null) {\n                useOwner = raw.getEnclosingClass();\n            } else {\n                org.apache.commons.lang3.Validate.isTrue(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(owner, raw.getEnclosingClass()), \"%s is invalid owner type for parameterized %s\", owner, raw);\n                useOwner = owner;\n            }\n            org.apache.commons.lang3.Validate.noNullElements(typeArguments, \"null type argument at index %s\");\n            org.apache.commons.lang3.Validate.isTrue(((raw.getTypeParameters().int) == (typeArguments.int)), \"invalid number of type parameters specified: expected %s, got %s\", raw.getTypeParameters().int, typeArguments.int);\n            return new org.apache.commons.lang3.reflect.TypeUtils.ParameterizedTypeImpl(raw , useOwner , typeArguments);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toClass":"raw","bound":"owner"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3076","type":"CtBinaryOperatorImpl"},"failures":[339,340],"tindex":"1c225c79-3f31-11e6-a209-3705eef8bde1","method":{"position":"org.apache.commons.lang3.StringUtils:1475","type":"CtMethodImpl","sourcecode":"public static boolean containsIgnoreCase(final java.lang.CharSequence str, final java.lang.CharSequence searchStr) {\n    if (str == null) {\n        {\n            if ((str == null) || (searchStr == null)) {\n                return false;\n            } \n            final int int = searchStr.length();\n            final int int = (str.length()) - len;\n            for (int int = 0 ; i <= max ; i++) {\n                if (org.apache.commons.lang3.CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, len)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:359","type":"CtInvocationImpl"},"failures":[],"tindex":"1c225c7a-3f31-11e6-a209-95ff7fd6e15c","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:233","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final java.lang.Object object, final org.apache.commons.lang3.builder.ToStringStyle style, final boolean outputTransients, final boolean outputStatics) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(object)) {\n        {\n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(object, style, outputTransients, outputStatics, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"css":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1083","type":"CtBinaryOperatorImpl"},"failures":[341],"tindex":"1c22838b-3f31-11e6-a209-5f798f469dd8","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2162","type":"CtMethodImpl","sourcecode":"public java.lang.String substring(final int startIndex, int endIndex) {\n    if (((startIndex - 1) + endIndex) >= 32) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            endIndex = validateRange(startIndex, endIndex);\n            return new java.lang.String(char[] , startIndex , (endIndex - startIndex));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"startIndex","dstPos":"endIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1870","type":"CtBinaryOperatorImpl"},"failures":[279],"tindex":"1c22838c-3f31-11e6-a209-55c865af06cd","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1843","type":"CtMethodImpl","sourcecode":"protected void setContentEnd(java.lang.String contentEnd) {\n    if (contentEnd == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (contentEnd == null) {\n                contentEnd = \"\";\n            } \n            org.apache.commons.lang3.builder.ToStringStyle.this.java.lang.String = contentEnd;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldNameValueSeparator":"contentEnd"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:1127","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c22838d-3f31-11e6-a209-6bcdfef77f9e","method":{"position":"org.apache.commons.lang3.mutable.MutableDouble:177","type":"CtMethodImpl","sourcecode":"public void subtract(final double operand) {\n    if ((operand <= operand) || (value >= operand)) {\n        {\n            org.apache.commons.lang3.mutable.MutableDouble.this.double -= operand;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"operand","end":"operand","value":"operand"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:331","type":"CtBinaryOperatorImpl"},"failures":[342,343],"tindex":"1c22838e-3f31-11e6-a209-63b0afef80ab","method":{"position":"org.apache.commons.lang3.time.DateUtils:957","type":"CtMethodImpl","sourcecode":"private static void modify(final java.util.Calendar val, final int field, final int modType) {\n    if (field > 0) {\n        {\n            if ((val.get(java.util.Calendar.java.util.Calendar.int)) > 280000000) {\n                throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n            } \n            if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                return ;\n            } \n            final java.util.Date java.util.Date = val.getTime();\n            long long = date.getTime();\n            boolean boolean = false;\n            final int int = val.get(java.util.Calendar.java.util.Calendar.int);\n            if (((org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int) == modType) || (millisecs < 500)) {\n                time = time - millisecs;\n            } \n            if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                done = true;\n            } \n            final int int = val.get(java.util.Calendar.java.util.Calendar.int);\n            if ((!done) && (((org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int) == modType) || (seconds < 30))) {\n                time = time - (seconds * 1000L);\n            } \n            if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                done = true;\n            } \n            final int int = val.get(java.util.Calendar.java.util.Calendar.int);\n            if ((!done) && (((org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int) == modType) || (minutes < 30))) {\n                time = time - (minutes * 60000L);\n            } \n            if ((date.getTime()) != time) {\n                date.setTime(time);\n                val.setTime(date);\n            } \n            boolean boolean = false;\n            for (final int[] int[] : org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int[][]) {\n                for (final int int : aField) {\n                    if (element == field) {\n                        if ((modType == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) || ((modType == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) && roundUp)) {\n                            if (field == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) {\n                                if ((val.get(java.util.Calendar.java.util.Calendar.int)) == 1) {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 15);\n                                } else {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, (-15));\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 1);\n                                }\n                            } else if (field == (java.util.Calendar.java.util.Calendar.int)) {\n                                if ((val.get(java.util.Calendar.java.util.Calendar.int)) == 0) {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 12);\n                                } else {\n                                    val.add(java.util.Calendar.java.util.Calendar.int, (-12));\n                                    val.add(java.util.Calendar.java.util.Calendar.int, 1);\n                                }\n                            } else {\n                                val.add(aField[0], 1);\n                            }\n                        } \n                        return ;\n                    } \n                }\n                int int = 0;\n                boolean boolean = false;\n                switch (field) {\n                    case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                        if ((aField[0]) == (java.util.Calendar.java.util.Calendar.int)) {\n                            offset = (val.get(java.util.Calendar.java.util.Calendar.int)) - 1;\n                            if (offset >= 15) {\n                                offset -= 15;\n                            } \n                            roundUp = offset > 7;\n                            offsetSet = true;\n                        } \n                        break;\n                    case java.util.Calendar.java.util.Calendar.int :\n                        if ((aField[0]) == (java.util.Calendar.java.util.Calendar.int)) {\n                            offset = val.get(java.util.Calendar.java.util.Calendar.int);\n                            if (offset >= 12) {\n                                offset -= 12;\n                            } \n                            roundUp = offset >= 6;\n                            offsetSet = true;\n                        } \n                        break;\n                    default :\n                        break;\n                }\n                if (!offsetSet) {\n                    final int int = val.getActualMinimum(aField[0]);\n                    final int int = val.getActualMaximum(aField[0]);\n                    offset = (val.get(aField[0])) - min;\n                    roundUp = offset > ((max - min) / 2);\n                } \n                if (offset != 0) {\n                    val.set(aField[0], ((val.get(aField[0])) - offset));\n                } \n            }\n            throw new java.lang.IllegalArgumentException(((\"The field \" + field) + \" is not supported\"));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.ClassNotFoundException","condition":{"position":"org.apache.commons.lang3.SerializationUtils:105","type":"CtBinaryOperatorImpl"},"failures":[344],"tindex":"1c22aa9f-3f31-11e6-a209-d97a452706ef","method":{"position":"org.apache.commons.lang3.event.EventListenerSupport:251","type":"CtMethodImpl","sourcecode":"private void readObject(final java.io.ObjectInputStream objectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException {\n    if (objectInputStream != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.ClassNotFoundException();\n    } else {\n        {\n            @java.lang.SuppressWarnings(value = \"unchecked\")\n            final L[] L[] = ((L[])(objectInputStream.readObject()));\n            org.apache.commons.lang3.event.EventListenerSupport.this.java.util.List<L> = new java.util.concurrent.CopyOnWriteArrayList<L>(srcListeners);\n            @java.lang.SuppressWarnings(value = \"unchecked\")\n            final java.lang.Class<L> java.lang.Class<L> = ((java.lang.Class<L>)(srcListeners.getClass().getComponentType()));\n            initializeTransientFields(listenerInterface, java.lang.Thread.currentThread().getContextClassLoader());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"objectInputStream"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MethodUtils:360","type":"CtInvocationImpl"},"failures":[345,346,347,348,349,350,351,352,353,354,355,193,194,356,195,196,197],"tindex":"1c22d1b0-3f31-11e6-a209-9196f549d807","method":{"position":"org.apache.commons.lang3.ClassUtils:759","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> wrapperToPrimitive(final java.lang.Class<?> cls) {\n    if (java.lang.reflect.Modifier.isPublic(cls.getModifiers())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(cls);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5179","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,25,11,12,13,14,15,16,18,19,20,21,357,358,359,360,361,362,363,364,365,366,367],"tindex":"1c22d1b1-3f31-11e6-a209-dbdfdfa80276","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:171","type":"CtMethodImpl","sourcecode":"static void register(final java.lang.Object lhs, final java.lang.Object rhs) {\n    if ((rhs == null) || (rhs == null)) {\n        {\n            synchronized(org.apache.commons.lang3.builder.EqualsBuilder.org.apache.commons.lang3.builder.EqualsBuilder.java.lang.Class) {\n                if ((org.apache.commons.lang3.builder.EqualsBuilder.getRegistry()) == null) {\n                    org.apache.commons.lang3.builder.EqualsBuilder.org.apache.commons.lang3.builder.EqualsBuilder.java.lang.ThreadLocal<java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>>>.set(new java.util.HashSet<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>>());\n                } \n            }\n            final java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>> java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>> = org.apache.commons.lang3.builder.EqualsBuilder.getRegistry();\n            final org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> = org.apache.commons.lang3.builder.EqualsBuilder.getRegisterPair(lhs, rhs);\n            registry.add(pair);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"rhs","separator":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2177","type":"CtBinaryOperatorImpl"},"failures":[368],"tindex":"1c22d1b2-3f31-11e6-a209-03fdb21c7556","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2873","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(final char[] b, final int off, int len) {\n    if (len < 0) {\n        {\n            if (((((off < 0) || (len < 0)) || (off > (b.int))) || ((off + len) > (b.int))) || ((off + len) < 0)) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } \n            if (len == 0) {\n                return 0;\n            } \n            if ((int) >= (org.apache.commons.lang3.text.StrBuilder.this.size())) {\n                return -1;\n            } \n            if (((int) + len) > (size())) {\n                len = (org.apache.commons.lang3.text.StrBuilder.this.size()) - (int);\n            } \n            org.apache.commons.lang3.text.StrBuilder.this.getChars(int, ((int) + len), b, off);\n            int += len;\n            return len;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"len"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:877","type":"CtVariableReadImpl"},"failures":[369],"tindex":"1c22f8c3-3f31-11e6-a209-dd7e2d464151","method":{"position":"org.apache.commons.lang3.ArrayUtils:4043","type":"CtMethodImpl","sourcecode":"public static boolean[] add(final boolean[] array, final boolean element) {\n    if (element) {\n        {\n            final boolean[] boolean[] = ((boolean[])(org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(array, java.lang.Boolean.java.lang.Boolean.java.lang.Class<java.lang.Boolean>)));\n            newArray[((newArray.int) - 1)] = element;\n            return newArray;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"top":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:430","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1c22f8c4-3f31-11e6-a209-ebec9e3adacd","method":{"position":"org.apache.commons.lang3.ArrayUtils:3564","type":"CtMethodImpl","sourcecode":"public static boolean isEmpty(final double[] array) {\n    if (!(java.util.Arrays.equals(array, array))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (array == null) || ((array.int) == 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:664","type":"CtBinaryOperatorImpl"},"failures":[370,371],"tindex":"1c22f8c5-3f31-11e6-a209-69d95c82473b","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2322","type":"CtMethodImpl","sourcecode":"public int indexOf(final java.lang.String str) {\n    if (str == null) {\n        {\n            return indexOf(str, 0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nullString":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:367","type":"CtInvocationImpl"},"failures":[372],"tindex":"1c22f8c6-3f31-11e6-a209-a7767a3b427e","method":{"position":"org.apache.commons.lang3.mutable.MutableLong:235","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj.equals(obj)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj instanceof org.apache.commons.lang3.mutable.MutableLong) {\n                return (long) == (((org.apache.commons.lang3.mutable.MutableLong)(obj)).longValue());\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"trueValue":"obj","value":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.ClassNotFoundException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:356","type":"CtBinaryOperatorImpl"},"failures":[373,374,375,376,377,378,379],"tindex":"1c231fd7-3f31-11e6-a209-577640bd47cd","method":{"position":"org.apache.commons.lang3.ClassUtils:876","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getClass(final java.lang.String className) throws java.lang.ClassNotFoundException {\n    if (className != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.ClassNotFoundException();\n    } else {\n        {\n            return org.apache.commons.lang3.ClassUtils.getClass(className, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toString":"className"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSetUtils:244","type":"CtInvocationImpl"},"failures":[210,380,381],"tindex":"1c231fd8-3f31-11e6-a209-9b4cb7c8a294","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:390","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(final java.lang.String source) {\n    if (org.apache.commons.lang3.StringUtils.isNotEmpty(source)) {\n        {\n            if (source == null) {\n                return null;\n            } \n            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(source);\n            if ((substitute(buf, 0, source.length())) == false) {\n                return source;\n            } \n            return buf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"s":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2949","type":"CtBinaryOperatorImpl"},"failures":[382,383],"tindex":"1c231fd9-3f31-11e6-a209-a9b8454633dd","method":{"position":"org.apache.commons.lang3.CharSetUtils:64","type":"CtMethodImpl","sourcecode":"public static java.lang.String squeeze(final java.lang.String str, final java.lang.String... set) {\n    if (str == null) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.CharSetUtils.deepEmpty(set))) {\n                return str;\n            } \n            final org.apache.commons.lang3.CharSet org.apache.commons.lang3.CharSet = org.apache.commons.lang3.CharSet.getInstance(set);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length());\n            final char[] char[] = str.toCharArray();\n            final int int = chrs.int;\n            char char = ' ';\n            char char = ' ';\n            for (int int = 0 ; i < sz ; i++) {\n                ch = chrs[i];\n                if (((ch == lastChar) && (i != 0)) && (chars.contains(ch))) {\n                    continue;\n                } \n                buffer.append(ch);\n                lastChar = ch;\n            }\n            return buffer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2234","type":"CtBinaryOperatorImpl"},"failures":[200],"tindex":"1c231fda-3f31-11e6-a209-ed13fe82fd5f","method":{"position":"org.apache.commons.lang3.math.Fraction:675","type":"CtMethodImpl","sourcecode":"private static int addAndCheck(final int x, final int y) {\n    if (x <= (y + x)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final long long = ((long)(x)) + ((long)(y));\n            if ((s < (java.lang.Integer.java.lang.Integer.int)) || (s > (java.lang.Integer.java.lang.Integer.int))) {\n                throw new java.lang.ArithmeticException(\"overflow: add\");\n            } \n            return ((int)(s));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"x","length":"x","index":"y"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1034","type":"CtInvocationImpl"},"failures":[],"tindex":"1c2346eb-3f31-11e6-a209-bfb283d716a2","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:300","type":"CtMethodImpl","sourcecode":"public static java.lang.String toStringExclude(final java.lang.Object object, final java.util.Collection<java.lang.String> excludeFieldNames) {\n    return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toStringExclude(object, org.apache.commons.lang3.builder.ReflectionToStringBuilder.toNoNullStringArray(excludeFieldNames));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"object","fullDetail":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1c2346ec-3f31-11e6-a209-d5dfa5ffe359","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:328","type":"CtMethodImpl","sourcecode":"private int readArgumentIndex(final java.lang.String pattern, final java.text.ParsePosition pos) {\n    if ((pattern == null) || (pattern == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = pos.getIndex();\n            seekNonWs(pattern, pos);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            boolean boolean = false;\n            for ( ; (!error) && ((pos.getIndex()) < (pattern.length())) ; next(pos)) {\n                char char = pattern.charAt(pos.getIndex());\n                if (java.lang.Character.isWhitespace(c)) {\n                    seekNonWs(pattern, pos);\n                    c = pattern.charAt(pos.getIndex());\n                    if ((c != (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char)) && (c != (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char))) {\n                        error = true;\n                        continue;\n                    } \n                } \n                if (((c == (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char)) || (c == (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char))) && ((result.length()) > 0)) {\n                    try {\n                        return java.lang.Integer.parseInt(result.toString());\n                    } catch (final java.lang.NumberFormatException e) {\n                    }\n                } \n                error = !(java.lang.Character.isDigit(c));\n                result.append(c);\n            }\n            if (error) {\n                throw new java.lang.IllegalArgumentException((((\"Invalid format argument index at position \" + start) + \": \") + (pattern.substring(start, pos.getIndex()))));\n            } \n            throw new java.lang.IllegalArgumentException((\"Unterminated format element at position \" + start));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"pattern","separator":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6396","type":"CtBinaryOperatorImpl"},"failures":[384],"tindex":"1c2346ed-3f31-11e6-a209-c7a0c4546715","method":{"position":"org.apache.commons.lang3.ArrayUtils:4389","type":"CtMethodImpl","sourcecode":"public static byte[] add(final byte[] array, final int index, final byte element) {\n    if (index < 4) {\n        {\n            return ((byte[])(org.apache.commons.lang3.ArrayUtils.add(array, index, java.lang.Byte.valueOf(element), java.lang.Byte.java.lang.Byte.java.lang.Class<java.lang.Byte>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"maxWidth":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:514","type":"CtBinaryOperatorImpl"},"failures":[352],"tindex":"1c2346ee-3f31-11e6-a209-d561f3f2c2f0","method":{"position":"org.apache.commons.lang3.ClassUtils:477","type":"CtMethodImpl","sourcecode":"public static boolean isAssignable(final java.lang.Class<?>[] classArray, final java.lang.Class<?>... toClassArray) {\n    if ((org.apache.commons.lang3.ArrayUtils.isSameLength(classArray, classArray)) == false) {\n        {\n            return org.apache.commons.lang3.ClassUtils.isAssignable(classArray, toClassArray, org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion.org.apache.commons.lang3.JavaVersion.org.apache.commons.lang3.JavaVersion));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toClassArray":"classArray","classArray":"classArray"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3566","type":"CtBinaryOperatorImpl"},"failures":[385],"tindex":"1c236dff-3f31-11e6-a209-8116157a797a","method":{"position":"org.apache.commons.lang3.ArrayUtils:3115","type":"CtMethodImpl","sourcecode":"public static int[] toPrimitive(final java.lang.Integer[] array, final int valueForNull) {\n    if (valueForNull <= 0) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int[];\n            } \n            final int[] int[] = new int[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Integer java.lang.Integer = array[i];\n                result[i] = b == null ? valueForNull : b.intValue();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"noOfItems":"valueForNull"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:511","type":"CtFieldReadImpl"},"failures":[],"tindex":"1c236e00-3f31-11e6-a209-6d7b4b9f15a9","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1612","type":"CtMethodImpl","sourcecode":"protected void setUseClassName(final boolean useClassName) {\n    if (useClassName) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (useClassName) {\n                {\n                    org.apache.commons.lang3.builder.ToStringStyle.this.boolean = useClassName;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectsTriviallyEqual":"useClassName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:255","type":"CtInvocationImpl"},"failures":[386,387,388,389,390],"tindex":"1c236e01-3f31-11e6-a209-19c234777f69","method":{"position":"org.apache.commons.lang3.RandomUtils:163","type":"CtMethodImpl","sourcecode":"public static float nextFloat(float startInclusive, float endInclusive) {\n    if (java.lang.Float.isNaN(startInclusive)) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((endInclusive >= startInclusive), \"Start value must be smaller or equal to end value.\");\n            org.apache.commons.lang3.Validate.isTrue((startInclusive >= 0), \"Both range values must be non-negative.\");\n            if (startInclusive == endInclusive) {\n                return startInclusive;\n            } \n            return startInclusive + ((endInclusive - startInclusive) * (org.apache.commons.lang3.RandomUtils.org.apache.commons.lang3.RandomUtils.java.util.Random.nextFloat()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"startInclusive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:957","type":"CtBinaryOperatorImpl"},"failures":[391],"tindex":"1c239512-3f31-11e6-a209-9f79d62f3dba","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2496","type":"CtMethodImpl","sourcecode":"public int lastIndexOf(final org.apache.commons.lang3.text.StrMatcher matcher) {\n    if (matcher != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334199849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return lastIndexOf(matcher, int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ignored":"matcher"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
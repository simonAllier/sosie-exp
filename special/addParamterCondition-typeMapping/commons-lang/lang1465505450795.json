{"failureDictionary":{"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson":125,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":198,"org.apache.commons.lang3.math.IEEE754rUtilsTest.testLang381":241,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceChangedMap":283,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":200,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":216,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties":279,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":194,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":197,"org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest.testInitExecutorNullCallable":269,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray":114,"org.apache.commons.lang3.builder.CompareToBuilderTest.testBoolean":93,"org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testOutOfBounds":341,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatUTC":18,"org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP":20,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong":121,"org.apache.commons.lang3.time.FastDatePrinterTest.testMilleniumBug":11,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":29,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_StringInt":80,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson":222,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplace":278,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":132,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_StrMatcher_String":296,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testSimpleDate":0,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":53,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayBoolean":346,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":57,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":36,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":174,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_AD":321,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":103,"org.apache.commons.lang3.text.StrBuilderTest.testContains_StrMatcher":299,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHiragana":337,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":74,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":105,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":211,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":118,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice":88,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiBooleanArray":92,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray":113,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":169,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":33,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testCalendarTimezoneRespected":4,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":75,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDefaults":76,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePartialString_noReplace":292,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude":115,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":219,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":45,"org.apache.commons.lang3.text.StrSubstitutorTest.testSubstituteDefaultProperties":273,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtStart":290,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethodWithEvent":79,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":202,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":186,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":221,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_BC":314,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":55,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEqualsHashcode":85,"org.apache.commons.lang3.RandomStringUtilsTest.testExceptions":96,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":190,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":122,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat":86,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_BC":322,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedFormats":89,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplacePrefixSuffix":275,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":170,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":180,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":37,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex":294,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang303":14,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethod":77,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":68,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":157,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":72,"org.apache.commons.lang3.exception.ContextedExceptionTest.testAddContextValue":247,"org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetPrefix":326,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":127,"org.apache.commons.lang3.exception.ContextedExceptionTest.testJavaSerialization":248,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":193,"org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected":13,"org.apache.commons.lang3.time.FastDatePrinterTest.testSimpleDate":9,"org.apache.commons.lang3.math.FractionTest.testFactory_int_int":270,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_AD":313,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":71,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO":23,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477":87,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testJavaSerialization":244,"org.apache.commons.lang3.text.StrMatcherTest.testStringMatcher_String":302,"org.apache.commons.lang3.text.StrMatcherTest.testMatcherIndices":301,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":34,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":175,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":168,"org.apache.commons.lang3.StringEscapeUtilsTest.testStandaloneAmphersand":330,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":135,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":207,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testFormat":8,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testBlank":217,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":39,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseLongShort":320,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testBlank":128,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":172,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace":300,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":224,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO":19,"org.apache.commons.lang3.ConversionTest.testLongToShortArray":81,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":30,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":147,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWithIgnoreCase":83,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeUnknownEntity":336,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":59,"org.apache.commons.lang3.StringUtilsTest.testUnescapeSurrogatePairs":329,"org.apache.commons.lang3.ConversionTest.testHexToShort":324,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":142,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull":109,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapFull":291,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":165,"org.apache.commons.lang3.time.FastDateParserTest.testShortDateStyleWithLocales":308,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":60,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":44,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":218,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":206,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":196,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":215,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":43,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorNoArgs":281,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":148,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":183,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":52,"org.apache.commons.lang3.exception.ContextedExceptionTest.testSetContextValue":249,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":106,"org.apache.commons.lang3.time.FastDatePrinterTest.testShortDateStyleWithLocales":10,"org.apache.commons.lang3.time.DateUtilsTest.testLang530":24,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls":117,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldForceAccessIllegalArgumentException1":82,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":40,"org.apache.commons.lang3.time.FastDateParserTest.testDayOf":309,"org.apache.commons.lang3.time.FastDatePrinterTest.testFormat":17,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_charInt":260,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":164,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWith":84,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":150,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":32,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":179,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":46,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":228,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":159,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":100,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":124,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":182,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":201,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":173,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfShort":50,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementObjectArray":254,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson":133,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":62,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testSetContextValue":253,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher":298,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":153,"org.apache.commons.lang3.time.DateUtilsTest.testIteratorEx":345,"org.apache.commons.lang3.time.FastDatePrinterTest.testLowYearPadding":12,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":27,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":38,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping":54,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":104,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testBlank":209,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":102,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":220,"org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterTypeCamelCase":66,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":99,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":160,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfByte":271,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHexCharsHtml":334,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters":335,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":212,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":189,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":146,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testBlank":101,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":64,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex":297,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":144,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":184,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testAddContextValue":251,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang313":332,"org.apache.commons.lang3.math.FractionTest.testFactory_int_int_int":264,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":167,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":143,"org.apache.commons.lang3.time.FastDateParserTest.testParseLongShort":312,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":231,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testPerson":214,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":65,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":119,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":149,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang303":5,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":129,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":192,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":151,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableRecursive":280,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_BC":311,"org.apache.commons.lang3.builder.CompareToBuilderTest.testBooleanArray":94,"org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testUnfinishedEntity":340,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":163,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_StrMatcher_String":293,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testBlank":120,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":162,"org.apache.commons.lang3.text.StrSubstitutorTest.testDefaultValueDelimiters":285,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO":22,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection":108,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection":111,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testShortDateStyleWithLocales":316,"org.apache.commons.lang3.math.FractionTest.testConversions":261,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":152,"org.apache.commons.lang3.math.FractionTest.testCompareTo":265,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":98,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":213,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang538":6,"org.apache.commons.lang3.StringUtilsTest.testAppendIfMissing":255,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":185,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoVariables":286,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariable":287,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_charInt":48,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":42,"org.apache.commons.lang3.builder.CompareToBuilderTest.testDouble":256,"org.apache.commons.lang3.text.StrSubstitutorTest.testResolveVariable":288,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":171,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":130,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":137,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":227,"org.apache.commons.lang3.text.StrSubstitutorTest.testCyclicReplacement":274,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetAllFields":91,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":123,"org.apache.commons.lang3.ArrayUtilsTest.testToString":240,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHtml4":331,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testBlank":225,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed2":307,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapPrefixSuffix":276,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfShortWithStartIndex":49,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":58,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":138,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO":21,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":56,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLong":210,"org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedException":246,"org.apache.commons.lang3.builder.CompareToBuilderTest.testBooleanArrayHiddenByObject":95,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":116,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":191,"org.apache.commons.lang3.math.FractionTest.testAdd":325,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":26,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastOrdinalIndexOf":51,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":188,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedException":242,"org.apache.commons.lang3.math.FractionTest.testGets":262,"org.apache.commons.lang3.time.DateUtilsTest.testWeekIterator":344,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":161,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":199,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testJavaSerialization":252,"org.apache.commons.lang3.time.DateUtilsTest.testMonthIterator":343,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":70,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_AD":310,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":134,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtEnd":282,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":141,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount":295,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementDoubleArray":327,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":112,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":187,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":176,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":226,"org.apache.commons.lang3.text.StrTokenizerTest.test8":239,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":41,"org.apache.commons.lang3.text.StrTokenizerTest.test5":236,"org.apache.commons.lang3.text.StrTokenizerTest.test4":235,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_AD":318,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":31,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":177,"org.apache.commons.lang3.text.StrTokenizerTest.test7":238,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":178,"org.apache.commons.lang3.text.StrTokenizerTest.test6":237,"org.apache.commons.lang3.text.StrTokenizerTest.test1":232,"org.apache.commons.lang3.text.StrTokenizerTest.test3":234,"org.apache.commons.lang3.text.StrTokenizerTest.test2":233,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testFormattedExceptionMessageNull":250,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":154,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":223,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml":338,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang645":16,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":126,"org.apache.commons.lang3.mutable.MutableFloatTest.testAddValueObject":67,"org.apache.commons.lang3.StringUtilsTest.testCaseFunctions":347,"org.apache.commons.lang3.time.FastDateFormatTest.testParseSync":25,"org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testSupplementaryUnescaping":339,"org.apache.commons.lang3.event.EventUtilsTest.testBindFilteredEventsToMethod":78,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":73,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiDoubleArray":258,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang538":15,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_BC":319,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testMilleniumBug":2,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":140,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testAddContextValue":243,"org.apache.commons.lang3.math.FractionTest.testToProperString":266,"org.apache.commons.lang3.math.FractionTest.testFactory_String_proper":267,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementByteArray":342,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":181,"org.apache.commons.lang3.text.StrSubstitutorTest.testSamePrefixAndSuffix":277,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlHighUnicode":333,"org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest.testInitNullCallable":268,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":131,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray":110,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":107,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayEnd":328,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":195,"org.apache.commons.lang3.time.FastDateParserTest.testParses":315,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":35,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":139,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfByteWithStartIndex":272,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang645":7,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":69,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":166,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":203,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceWeirdPattens":284,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":156,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParses":323,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLowYearPadding":3,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed3":305,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed2":304,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4":306,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats":90,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableDisabled":289,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed1":303,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":229,"org.apache.commons.lang3.builder.CompareToBuilderTest.testDoubleArray":259,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":204,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":158,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson":230,"org.apache.commons.lang3.math.FractionTest.testToString":263,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":28,"org.apache.commons.lang3.AnnotationUtilsTest.testToString":97,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testDayOf":317,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":63,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testShortDateStyleWithLocales":1,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testSetContextValue":245,"org.apache.commons.lang3.builder.CompareToBuilderTest.testDoubleArrayHiddenByObject":257,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":145,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":136,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":155,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO":47,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":205,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":61,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":208},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:799","type":"CtBinaryOperatorImpl","sourcecode":"nestedVarCount == 0"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"d9a2b064-2e83-11e6-98b2-3b4feda8fd56","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:908","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final void appendTo(final java.lang.StringBuffer buffer, final int value) {\n    if (value == 0) {\n        {\n            if (value < 100) {\n                buffer.append(((char)((value / 10) + '0')));\n                buffer.append(((char)((value % 10) + '0')));\n            } else {\n                buffer.append(java.lang.Integer.toString(value));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nestedVarCount":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:312","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Character.isWhitespace(cs.charAt(i))) == false"},"failures":[48],"tindex":"d9a39ac5-2e83-11e6-98b2-9576b91cb294","method":{"position":"org.apache.commons.lang3.StringUtils:895","type":"CtMethodImpl","sourcecode":"public static int indexOf(final java.lang.CharSequence seq, final int searchChar, final int startPos) {\n    if ((java.lang.Character.isWhitespace(seq.charAt(startPos))) == false) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.indexOf(seq, searchChar, startPos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"seq","i":"startPos"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1854","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[49,50],"tindex":"d9a3c1d6-2e83-11e6-98b2-49c5aa0a477b","method":{"position":"org.apache.commons.lang3.ArrayUtils:2252","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final short[] array, final short valueToFind) {\n    if (array == null) {\n        {\n            return org.apache.commons.lang3.ArrayUtils.lastIndexOf(array, valueToFind, java.lang.Integer.java.lang.Integer.int);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:874","type":"CtBinaryOperatorImpl","sourcecode":"(((nBytes - 1) * 8) + dstPos) >= 16"},"failures":[51],"tindex":"d9a3e8e7-2e83-11e6-98b2-f54d901095e6","method":{"position":"org.apache.commons.lang3.StringUtils:1262","type":"CtMethodImpl","sourcecode":"public static int lastOrdinalIndexOf(final java.lang.CharSequence str, final java.lang.CharSequence searchStr, final int ordinal) {\n    if ((((ordinal - 1) * 8) + ordinal) >= 16) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.ordinalIndexOf(str, searchStr, ordinal, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"ordinal","nBytes":"ordinal"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6393","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[52,52],"tindex":"d9a3e8e8-2e83-11e6-98b2-b98e4396e255","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:709","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final float value) {\n    if (fieldName == null) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:117","type":"CtBinaryOperatorImpl","sourcecode":"len < 5"},"failures":[],"tindex":"d9a40ff9-2e83-11e6-98b2-e7093dcd9ce7","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:534","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(java.lang.CharSequence source, int offset, int length) {\n    if (offset < 5) {\n        {\n            if (source == null) {\n                return null;\n            } \n            org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(length).append(source, offset, length);\n            substitute(buf, 0, length);\n            return buf.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"offset"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5952","type":"CtBinaryOperatorImpl","sourcecode":"cs == null"},"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65],"tindex":"d9a40ffa-2e83-11e6-98b2-9d266c82f38b","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:513","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(java.lang.CharSequence source) {\n    if (source == null) {\n        {\n            if (source == null) {\n                return null;\n            } \n            return replace(source, 0, source.length());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:553","type":"CtFieldReadImpl","sourcecode":"objectsTriviallyEqual"},"failures":[66],"tindex":"d9a4370b-2e83-11e6-98b2-0fd0cc3d491a","method":{"position":"org.apache.commons.lang3.StringUtils:3221","type":"CtMethodImpl","sourcecode":"private static java.lang.String[] splitByCharacterType(final java.lang.String str, final boolean camelCase) {\n    if (camelCase) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (str.isEmpty()) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.String[];\n            } \n            final char[] char[] = str.toCharArray();\n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            int int = 0;\n            int int = java.lang.Character.getType(c[tokenStart]);\n            for (int int = tokenStart + 1 ; pos < (c.int) ; pos++) {\n                final int int = java.lang.Character.getType(c[pos]);\n                if (type == currentType) {\n                    continue;\n                } \n                if ((camelCase && (type == (java.lang.Character.java.lang.Character.byte))) && (currentType == (java.lang.Character.java.lang.Character.byte))) {\n                    final int int = pos - 1;\n                    if (newTokenStart != tokenStart) {\n                        list.add(new java.lang.String(c , tokenStart , (newTokenStart - tokenStart)));\n                        tokenStart = newTokenStart;\n                    } \n                } else {\n                    list.add(new java.lang.String(c , tokenStart , (pos - tokenStart)));\n                    tokenStart = pos;\n                }\n                currentType = type;\n            }\n            list.add(new java.lang.String(c , tokenStart , ((c.int) - tokenStart)));\n            return list.toArray(new java.lang.String[list.size()]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectsTriviallyEqual":"camelCase"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2137","type":"CtBinaryOperatorImpl","sourcecode":"start > end"},"failures":[],"tindex":"d9a45e1c-2e83-11e6-98b2-09753ee9e49b","method":{"position":"org.apache.commons.lang3.Conversion:630","type":"CtMethodImpl","sourcecode":"public static char intToHexDigitMsb0(final int nibble) {\n    if (nibble > nibble) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            switch (nibble) {\n                case 0 :\n                    return '0';\n                case 1 :\n                    return '8';\n                case 2 :\n                    return '4';\n                case 3 :\n                    return 'c';\n                case 4 :\n                    return '2';\n                case 5 :\n                    return 'a';\n                case 6 :\n                    return '6';\n                case 7 :\n                    return 'e';\n                case 8 :\n                    return '1';\n                case 9 :\n                    return '9';\n                case 10 :\n                    return '5';\n                case 11 :\n                    return 'd';\n                case 12 :\n                    return '3';\n                case 13 :\n                    return 'b';\n                case 14 :\n                    return '7';\n                case 15 :\n                    return 'f';\n                default :\n                    throw new java.lang.IllegalArgumentException((\"nibble value not between 0 and 15: \" + nibble));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"nibble","end":"nibble"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:294","type":"CtBinaryOperatorImpl","sourcecode":"falseValue == null"},"failures":[67],"tindex":"d9a4852d-2e83-11e6-98b2-0db6fa28e322","method":{"position":"org.apache.commons.lang3.mutable.MutableFloat:167","type":"CtMethodImpl","sourcecode":"public void add(final java.lang.Number operand) {\n    if (operand == null) {\n        {\n            org.apache.commons.lang3.mutable.MutableFloat.this.float += operand.floatValue();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"falseValue":"operand"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5080","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[68,69,70,71,72,73,74,75],"tindex":"d9a4ac3e-2e83-11e6-98b2-854ddad639cf","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:2001","type":"CtMethodImpl","sourcecode":"protected void setSizeStartText(java.lang.String sizeStartText) {\n    if (sizeStartText == null) {\n        {\n            if (sizeStartText == null) {\n                sizeStartText = \"\";\n            } \n            org.apache.commons.lang3.builder.ToStringStyle.this.java.lang.String = sizeStartText;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"sizeStartText"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:255","type":"CtInvocationImpl","sourcecode":"java.lang.Float.isNaN(a)"},"failures":[],"tindex":"d9a4ac3f-2e83-11e6-98b2-81ec7da5f9c9","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:709","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final float value) {\n    if (java.lang.Float.isNaN(value)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int = ((int) * (int)) + (java.lang.Float.floatToIntBits(value));\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4893","type":"CtBinaryOperatorImpl","sourcecode":"index < replaceCharsLength"},"failures":[76],"tindex":"d9a4d350-2e83-11e6-98b2-ade97ac52b7d","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:272","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getTimeInstance(final int style, final java.util.TimeZone timeZone) {\n    if (style < style) {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FormatCache<org.apache.commons.lang3.time.FastDateFormat>.getTimeInstance(style, timeZone, null);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replaceCharsLength":"style","index":"style"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4218","type":"CtInvocationImpl","sourcecode":"str.startsWith(remove)"},"failures":[],"tindex":"d9a4fa61-2e83-11e6-98b2-81d3946860ec","method":{"position":"org.apache.commons.lang3.StringUtils:6070","type":"CtMethodImpl","sourcecode":"public static boolean isNumericSpace(final java.lang.CharSequence cs) {\n    if (cs.startsWith(cs)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cs == null) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if (((java.lang.Character.isDigit(cs.charAt(i))) == false) && ((cs.charAt(i)) != ' ')) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"cs","remove":"cs"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:663","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(tok)"},"failures":[],"tindex":"d9a4fa62-2e83-11e6-98b2-c5da4d031a3f","method":{"position":"org.apache.commons.lang3.event.EventUtils:48","type":"CtMethodImpl","sourcecode":"public static <L>void addEventListener(final java.lang.Object eventSource, final java.lang.Class<L> listenerType, final L listener) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(eventSource)) {\n        {\n            try {\n                org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(eventSource, (\"add\" + (listenerType.getSimpleName())), listener);\n            } catch (final java.lang.NoSuchMethodException e) {\n                throw new java.lang.IllegalArgumentException(((((((\"Class \" + (eventSource.getClass().getName())) + \" does not have a public add\") + (listenerType.getSimpleName())) + \" method which takes a parameter of type \") + (listenerType.getName())) + \".\"));\n            } catch (final java.lang.IllegalAccessException e) {\n                throw new java.lang.IllegalArgumentException(((((((\"Class \" + (eventSource.getClass().getName())) + \" does not have an accessible add\") + (listenerType.getSimpleName())) + \" method which takes a parameter of type \") + (listenerType.getName())) + \".\"));\n            } catch (final java.lang.reflect.InvocationTargetException e) {\n                throw new java.lang.RuntimeException(\"Unable to add listener.\" , e.getCause());\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"tok":"eventSource"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.Throwable","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:458","type":"CtBinaryOperatorImpl","sourcecode":"(lhs == null) || (rhs == null)"},"failures":[77,78,79],"tindex":"d9a52173-2e83-11e6-98b2-1f0b43eb07f4","method":{"position":"org.apache.commons.lang3.event.EventUtils:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object invoke(final java.lang.Object proxy, final java.lang.reflect.Method method, final java.lang.Object[] parameters) throws java.lang.Throwable {\n    if (proxy != proxy) {\n        throw new java.lang.Throwable();\n    } else {\n        {\n            if ((proxy == null) || (proxy == null)) {\n                {\n                    if ((java.util.Set<java.lang.String>.isEmpty()) || (java.util.Set<java.lang.String>.contains(method.getName()))) {\n                        if (hasMatchingParametersMethod(method)) {\n                            return org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String, parameters);\n                        } else {\n                            return org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String);\n                        }\n                    } \n                    return null;\n                }\n            } else {\n                throw new java.lang.Throwable();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"proxy","rhs":"proxy"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MemberUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"(destClass.isInterface()) && (org.apache.commons.lang3.ClassUtils.isAssignable(srcClass, destClass))"},"failures":[],"tindex":"d9a54884-2e83-11e6-98b2-bf5e11593d89","method":{"position":"org.apache.commons.lang3.Validate:1225","type":"CtMethodImpl","sourcecode":"public static void isAssignableFrom(final java.lang.Class<?> superType, final java.lang.Class<?> type) {\n    if ((superType.isInterface()) && (org.apache.commons.lang3.ClassUtils.isAssignable(superType, destClass))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((superType.isAssignableFrom(type)) == false) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, (type == null ? \"null\" : type.getName()), superType.getName()));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcClass":"superType","destClass":"superType"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1026","type":"CtBinaryOperatorImpl","sourcecode":"((str == null) || (searchStr == null)) || (ordinal <= 0)"},"failures":[80],"tindex":"d9a56f95-2e83-11e6-98b2-99fa06e089e2","method":{"position":"org.apache.commons.lang3.StringUtils:966","type":"CtMethodImpl","sourcecode":"public static int indexOf(final java.lang.CharSequence seq, final java.lang.CharSequence searchSeq, final int startPos) {\n    if (((searchSeq == null) || (seq == null)) || (startPos <= 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((seq == null) || (searchSeq == null)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.indexOf(seq, searchSeq, startPos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"searchSeq","searchStr":"seq","ordinal":"startPos"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:388","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang3.time.DurationFormatUtils.m))"},"failures":[],"tindex":"d9a56f96-2e83-11e6-98b2-63bde284ac02","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:187","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final java.lang.Object object, final org.apache.commons.lang3.builder.ToStringStyle style, final boolean outputTransients) {\n    if (!(org.apache.commons.lang3.time.DurationFormatUtils.Token.containsTokenWithValue(object, object))) {\n        {\n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(object, style, outputTransients, false, null);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.time.DurationFormatUtils.m":"object","tokens":"object"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:202","type":"CtBinaryOperatorImpl","sourcecode":"(tmp.length()) != (duration.length())"},"failures":[],"tindex":"d9a596a7-2e83-11e6-98b2-af5750b588a9","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:584","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final byte[] array) {\n    if ((fieldName.length()) != (fieldName.length())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"fieldName","tmp":"fieldName"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1887","type":"CtBinaryOperatorImpl","sourcecode":"j == searchLast"},"failures":[81],"tindex":"d9a596a8-2e83-11e6-98b2-4d1231757dc4","method":{"position":"org.apache.commons.lang3.Conversion:1221","type":"CtMethodImpl","sourcecode":"public static short[] longToShortArray(final long src, final int srcPos, final short[] dst, final int dstPos, final int nShorts) {\n    if (srcPos == dstPos) {\n        {\n            if (0 == nShorts) {\n                return dst;\n            } \n            if ((((nShorts - 1) * 16) + srcPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"(nShorts-1)*16+srcPos is greather or equal to than 64\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nShorts ; i++) {\n                shift = (i * 16) + srcPos;\n                dst[(dstPos + i)] = ((short)(65535 & (src >> shift)));\n            }\n            return dst;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"j":"srcPos","searchLast":"dstPos"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:507","type":"CtBinaryOperatorImpl","sourcecode":"(isEquals) == false"},"failures":[82],"tindex":"d9a5bdb9-2e83-11e6-98b2-4bb5ac819b8f","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:254","type":"CtMethodImpl","sourcecode":"public static java.lang.Object readStaticField(final java.lang.reflect.Field field, final boolean forceAccess) throws java.lang.IllegalAccessException {\n    if (forceAccess == false) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((field != null), \"The field must not be null\");\n            org.apache.commons.lang3.Validate.isTrue(java.lang.reflect.Modifier.isStatic(field.getModifiers()), \"The field '%s' is not static\", field.getName());\n            return org.apache.commons.lang3.reflect.FieldUtils.readField(field, ((java.lang.Object)(null)), forceAccess);\n        }\n    } else {\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEquals":"forceAccess"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5374","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[83,84],"tindex":"d9a5bdba-2e83-11e6-98b2-753b17061970","method":{"position":"org.apache.commons.lang3.StringUtils:7202","type":"CtMethodImpl","sourcecode":"private static boolean startsWith(final java.lang.CharSequence str, final java.lang.CharSequence prefix, final boolean ignoreCase) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((str == null) || (prefix == null)) {\n                return (str == null) && (prefix == null);\n            } \n            if ((prefix.length()) > (str.length())) {\n                return false;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:891","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[],"tindex":"d9a5bdbb-2e83-11e6-98b2-9dcb35a169ab","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1297","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final double[] array) {\n    if (array == array) {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:525","type":"CtBinaryOperatorImpl","sourcecode":"(coll == null) || (coll.isEmpty())"},"failures":[85,86,87,88,89,90],"tindex":"d9a5e4cc-2e83-11e6-98b2-b1054692e197","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:524","type":"CtMethodImpl","sourcecode":"private boolean containsElements(final java.util.Collection<?> coll) {\n    if ((coll == null) || (coll.isEmpty())) {\n        {\n            if ((coll == null) || (coll.isEmpty())) {\n                return false;\n            } \n            for (final java.lang.Object java.lang.Object : coll) {\n                if (name != null) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.text.ParseException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:675","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"d9a5e4cd-2e83-11e6-98b2-2d2cf648db27","method":{"position":"org.apache.commons.lang3.time.DateUtils:332","type":"CtMethodImpl","sourcecode":"public static java.util.Date parseDateStrictly(final java.lang.String str, final java.util.Locale locale, final java.lang.String... parsePatterns) throws java.text.ParseException {\n    if (str == null) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.parseDateWithLeniency(str, null, parsePatterns, false);\n        }\n    } else {\n        throw new java.text.ParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"str"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:905","type":"CtInvocationImpl","sourcecode":"cls.isPrimitive()"},"failures":[91],"tindex":"d9a5e4ce-2e83-11e6-98b2-33b58766d073","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:196","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Field[] getAllFields(java.lang.Class<?> cls) {\n    if (cls.isPrimitive()) {\n        {\n            final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = org.apache.commons.lang3.reflect.FieldUtils.getAllFieldsList(cls);\n            return allFieldsList.toArray(new java.lang.reflect.Field[allFieldsList.size()]);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:970","type":"CtBinaryOperatorImpl","sourcecode":"abbreviation != null"},"failures":[],"tindex":"d9a60bdf-2e83-11e6-98b2-d1811a9397dc","method":{"position":"org.apache.commons.lang3.Validate:687","type":"CtMethodImpl","sourcecode":"public static <T extends java.util.Collection<?>>T validIndex(final T collection, final int index, final java.lang.String message, final java.lang.Object... values) {\n    if (message != null) {\n        {\n            org.apache.commons.lang3.Validate.notNull(collection);\n            if ((index < 0) || (index >= (collection.size()))) {\n                throw new java.lang.IndexOutOfBoundsException(java.lang.String.format(message, values));\n            } \n            return collection;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"abbreviation":"message"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.FieldUtils:173","type":"CtVariableReadImpl","sourcecode":"forceAccess"},"failures":[92,93,94,95],"tindex":"d9a60be0-2e83-11e6-98b2-37f4a21c4728","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:584","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final boolean lhs, final boolean rhs) {\n    if (lhs) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == false) {\n                int = -1;\n            } else {\n                int = +1;\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"forceAccess":"lhs"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:430","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[],"tindex":"d9a60be1-2e83-11e6-98b2-1db065ea9e46","method":{"position":"org.apache.commons.lang3.AnnotationUtils:223","type":"CtMethodImpl","sourcecode":"public static boolean isValidAnnotationMemberType(java.lang.Class<?> type) {\n    if (type == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type == null) {\n                return false;\n            } \n            if (type.isArray()) {\n                type = type.getComponentType();\n            } \n            return ((((type.isPrimitive()) || (type.isEnum())) || (type.isAnnotation())) || (java.lang.String.java.lang.String.java.lang.Class.equals(type))) || (java.lang.Class.java.lang.Class.java.lang.Class.equals(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"type"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2274","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[96],"tindex":"d9a632f2-2e83-11e6-98b2-69fc815973d9","method":{"position":"org.apache.commons.lang3.RandomStringUtils:309","type":"CtMethodImpl","sourcecode":"public static java.lang.String random(final int count, final java.lang.String chars) {\n    if (count < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (chars == null) {\n                return org.apache.commons.lang3.RandomStringUtils.random(count, 0, 0, false, false, null, org.apache.commons.lang3.RandomStringUtils.org.apache.commons.lang3.RandomStringUtils.java.util.Random);\n            } \n            return org.apache.commons.lang3.RandomStringUtils.random(count, chars.toCharArray());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"count"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1648","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,68,69,70,71,72,73,74,75,135,135,136,136,137,137,138,139,139,140,140,141,141,142,142,143,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,52,52,155,155,156,156,157,157,158,158,159,159,160,160,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,168,169,169,170,170,171,171,172,172,173,173,174,174,175,175,176,177,177,178,178,179,179,180,180,181,181,182,182,183,183,184,184,185,185,186,186,187,187,188,188,189,189,190,190,191,192,192,193,193,194,194,195,195,196,196,197,197,198,198,199,199,200,200,201,201,202,202,203,204,204,205,205,206,206,207,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240],"tindex":"d9a632f3-2e83-11e6-98b2-7f2a70bc257b","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:394","type":"CtMethodImpl","sourcecode":"public void appendEnd(final java.lang.StringBuffer buffer, final java.lang.Object object) {\n    if (object == null) {\n        {\n            if ((org.apache.commons.lang3.builder.ToStringStyle.this.boolean) == false) {\n                removeLastFieldSeparator(buffer);\n            } \n            appendContentEnd(buffer);\n            org.apache.commons.lang3.builder.ToStringStyle.unregister(object);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"object"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:472","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Float.floatToIntBits(lhs)) != (java.lang.Float.floatToIntBits(rhs))"},"failures":[241],"tindex":"d9a65a04-2e83-11e6-98b2-49366f71faae","method":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:136","type":"CtMethodImpl","sourcecode":"public static float min(final float a, final float b) {\n    if ((java.lang.Float.floatToIntBits(a)) != (java.lang.Float.floatToIntBits(a))) {\n        {\n            if (java.lang.Float.isNaN(a)) {\n                return b;\n            } else if (java.lang.Float.isNaN(b)) {\n                return a;\n            } else {\n                return java.lang.Math.min(a, b);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"a","rhs":"a"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:222","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[242,243,244,245,246,247,248,249,250,251,252,253],"tindex":"d9a65a05-2e83-11e6-98b2-9959ecb55924","method":{"position":"org.apache.commons.lang3.exception.DefaultExceptionContext:127","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String getFormattedExceptionMessage(final java.lang.String baseMessage) {\n    if (baseMessage == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(256);\n            if (baseMessage != null) {\n                buffer.append(baseMessage);\n            } \n            if ((java.util.List<org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object>>.size()) > 0) {\n                if ((buffer.length()) > 0) {\n                    buffer.append('\\n');\n                } \n                buffer.append(\"Exception Context:\\n\");\n                int int = 0;\n                for (final org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object> org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object> : java.util.List<org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object>>) {\n                    buffer.append(\"\\t[\");\n                    buffer.append((++i));\n                    buffer.append(':');\n                    buffer.append(pair.getKey());\n                    buffer.append(\"=\");\n                    final java.lang.Object java.lang.Object = pair.getValue();\n                    if (value == null) {\n                        buffer.append(\"null\");\n                    } else {\n                        java.lang.String java.lang.String;\n                        try {\n                            valueStr = value.toString();\n                        } catch (final java.lang.Exception e) {\n                            valueStr = \"Exception thrown on toString(): \" + (org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace(e));\n                        }\n                        buffer.append(valueStr);\n                    }\n                    buffer.append(\"]\\n\");\n                }\n                buffer.append(\"---------------------------------\");\n            } \n            return buffer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"baseMessage"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:405","type":"CtBinaryOperatorImpl","sourcecode":"lhs == null"},"failures":[254],"tindex":"d9a68116-2e83-11e6-98b2-f32283cab40c","method":{"position":"org.apache.commons.lang3.ArrayUtils:4641","type":"CtMethodImpl","sourcecode":"public static <T>T[] removeElement(final T[] array, final java.lang.Object element) {\n    if (element == null) {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"element"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.TimedSemaphore:306","type":"CtUnaryOperatorImpl","sourcecode":"!canPass"},"failures":[255],"tindex":"d9a68117-2e83-11e6-98b2-17dff619d073","method":{"position":"org.apache.commons.lang3.StringUtils:7411","type":"CtMethodImpl","sourcecode":"private static java.lang.String appendIfMissing(final java.lang.String str, final java.lang.CharSequence suffix, final boolean ignoreCase, final java.lang.CharSequence... suffixes) {\n    if (!ignoreCase) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((str == null) || (org.apache.commons.lang3.StringUtils.isEmpty(suffix))) || (org.apache.commons.lang3.StringUtils.endsWith(str, suffix, ignoreCase))) {\n                return str;\n            } \n            if ((suffixes != null) && ((suffixes.int) > 0)) {\n                for (final java.lang.CharSequence java.lang.CharSequence : suffixes) {\n                    if (org.apache.commons.lang3.StringUtils.endsWith(str, s, ignoreCase)) {\n                        return str;\n                    } \n                }\n            } \n            return str + (suffix.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"canPass":"ignoreCase"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.Throwable","condition":{"position":"org.apache.commons.lang3.time.StopWatch:302","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.time.StopWatch.this.runningState) != (org.apache.commons.lang3.time.StopWatch.State.SUSPENDED)"},"failures":[],"tindex":"d9a6a828-2e83-11e6-98b2-d9ead5d5ce41","method":{"position":"org.apache.commons.lang3.event.EventUtils:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object invoke(final java.lang.Object proxy, final java.lang.reflect.Method method, final java.lang.Object[] parameters) throws java.lang.Throwable {\n    if (proxy != proxy) {\n        throw new java.lang.Throwable();\n    } else {\n        {\n            if ((proxy == null) || (proxy == null)) {\n                {\n                    if ((java.util.Set<java.lang.String>.isEmpty()) || (java.util.Set<java.lang.String>.contains(method.getName()))) {\n                        if (hasMatchingParametersMethod(method)) {\n                            return org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String, parameters);\n                        } else {\n                            return org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String);\n                        }\n                    } \n                    return null;\n                }\n            } else {\n                throw new java.lang.Throwable();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.time.StopWatch.State.SUSPENDED":"proxy","runningState":"proxy"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomUtils:142","type":"CtBinaryOperatorImpl","sourcecode":"startInclusive == endInclusive"},"failures":[256,257,258,259],"tindex":"d9a6a829-2e83-11e6-98b2-357a6eab92eb","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:547","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final double lhs, final double rhs) {\n    if (rhs == lhs) {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            int = java.lang.Double.compare(lhs, rhs);\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startInclusive":"rhs","endInclusive":"lhs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3088","type":"CtBinaryOperatorImpl","sourcecode":"separatorChars == null"},"failures":[],"tindex":"d9a6cf3a-2e83-11e6-98b2-7d5b37cbf006","method":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:480","type":"CtMethodImpl","sourcecode":"static org.apache.commons.lang3.time.DurationFormatUtils.Token[] lexx(final java.lang.String format) {\n    if (format == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.ArrayList<org.apache.commons.lang3.time.DurationFormatUtils.Token> java.util.ArrayList<org.apache.commons.lang3.time.DurationFormatUtils.Token> = new java.util.ArrayList<org.apache.commons.lang3.time.DurationFormatUtils.Token>(format.length());\n            boolean boolean = false;\n            java.lang.StringBuilder java.lang.StringBuilder = null;\n            org.apache.commons.lang3.time.DurationFormatUtils.Token org.apache.commons.lang3.time.DurationFormatUtils.Token = null;\n            for (int int = 0 ; i < (format.length()) ; i++) {\n                final char char = format.charAt(i);\n                if (inLiteral && (ch != '\\'')) {\n                    buffer.append(ch);\n                    continue;\n                } \n                java.lang.Object java.lang.Object = null;\n                switch (ch) {\n                    case '\\'' :\n                        if (inLiteral) {\n                            buffer = null;\n                            inLiteral = false;\n                        } else {\n                            buffer = new java.lang.StringBuilder();\n                            list.add(new org.apache.commons.lang3.time.DurationFormatUtils.Token(buffer));\n                            inLiteral = true;\n                        }\n                        break;\n                    case 'y' :\n                        value = org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object;\n                        break;\n                    case 'M' :\n                        value = org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object;\n                        break;\n                    case 'd' :\n                        value = org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object;\n                        break;\n                    case 'H' :\n                        value = org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object;\n                        break;\n                    case 'm' :\n                        value = org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object;\n                        break;\n                    case 's' :\n                        value = org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object;\n                        break;\n                    case 'S' :\n                        value = org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object;\n                        break;\n                    default :\n                        if (buffer == null) {\n                            buffer = new java.lang.StringBuilder();\n                            list.add(new org.apache.commons.lang3.time.DurationFormatUtils.Token(buffer));\n                        } \n                        buffer.append(ch);\n                }\n                if (value != null) {\n                    if ((previous != null) && ((previous.getValue()) == value)) {\n                        previous.increment();\n                    } else {\n                        final org.apache.commons.lang3.time.DurationFormatUtils.Token org.apache.commons.lang3.time.DurationFormatUtils.Token = new org.apache.commons.lang3.time.DurationFormatUtils.Token(value);\n                        list.add(token);\n                        previous = token;\n                    }\n                    buffer = null;\n                } \n            }\n            if (inLiteral) {\n                throw new java.lang.IllegalArgumentException((\"Unmatched quote in format: \" + format));\n            } \n            return list.toArray(new org.apache.commons.lang3.time.DurationFormatUtils.Token[list.size()]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separatorChars":"format"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:874","type":"CtBinaryOperatorImpl","sourcecode":"startIndexInclusive < 0"},"failures":[260],"tindex":"d9a6f64b-2e83-11e6-98b2-5bb71592ecc5","method":{"position":"org.apache.commons.lang3.StringUtils:1191","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final java.lang.CharSequence seq, final int searchChar, final int startPos) {\n    if (startPos < 0) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(seq, searchChar, startPos);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndexInclusive":"startPos"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:829","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof char[]"},"failures":[],"tindex":"d9a71d5c-2e83-11e6-98b2-e7c1ab7e9a37","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:592","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(final java.lang.Object source) {\n    if (source instanceof char[]) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return null;\n            } \n            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder().append(source);\n            substitute(buf, 0, buf.length());\n            return buf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1049","type":"CtInvocationImpl","sourcecode":"superClass.isInterface()"},"failures":[],"tindex":"d9a71d5d-2e83-11e6-98b2-57bab9fc732d","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:336","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Method getAccessibleMethod(final java.lang.Class<?> cls, final java.lang.String methodName, final java.lang.Class<?>... parameterTypes) {\n    if (cls.isInterface()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethod(cls.getMethod(methodName, parameterTypes));\n            } catch (final java.lang.NoSuchMethodException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superClass":"cls"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1792","type":"CtBinaryOperatorImpl","sourcecode":"arraySeparator == null"},"failures":[],"tindex":"d9a71d5e-2e83-11e6-98b2-8b8584828a04","method":{"position":"org.apache.commons.lang3.exception.ContextedException:199","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.List<java.lang.Object> getContextValues(final java.lang.String label) {\n    if (label == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (label == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.lang3.exception.ContextedException.this.org.apache.commons.lang3.exception.ExceptionContext.getContextValues(label);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arraySeparator":"label"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:267","type":"CtBinaryOperatorImpl","sourcecode":"tokenLen == 1"},"failures":[261,262,263,264,265,266,267],"tindex":"d9a7446f-2e83-11e6-98b2-cd93b97216c2","method":{"position":"org.apache.commons.lang3.math.Fraction:172","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.math.Fraction getFraction(final int whole, final int numerator, final int denominator) {\n    if (whole == 1) {\n        {\n            if (denominator == 0) {\n                throw new java.lang.ArithmeticException(\"The denominator must not be zero\");\n            } \n            if (denominator < 0) {\n                throw new java.lang.ArithmeticException(\"The denominator must not be negative\");\n            } \n            if (numerator < 0) {\n                throw new java.lang.ArithmeticException(\"The numerator must not be negative\");\n            } \n            long long;\n            if (whole < 0) {\n                numeratorValue = (whole * ((long)(denominator))) - numerator;\n            } else {\n                numeratorValue = (whole * ((long)(denominator))) + numerator;\n            }\n            if ((numeratorValue < (java.lang.Integer.java.lang.Integer.int)) || (numeratorValue > (java.lang.Integer.java.lang.Integer.int))) {\n                throw new java.lang.ArithmeticException(\"Numerator too large to represent as an Integer.\");\n            } \n            return new org.apache.commons.lang3.math.Fraction(((int)(numeratorValue)) , denominator);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"tokenLen":"whole"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.CallableBackgroundInitializer:122","type":"CtBinaryOperatorImpl","sourcecode":"call == null"},"failures":[268,269],"tindex":"d9a74470-2e83-11e6-98b2-734e6c7bbb50","method":{"position":"org.apache.commons.lang3.concurrent.CallableBackgroundInitializer:121","type":"CtMethodImpl","sourcecode":"private void checkCallable(final java.util.concurrent.Callable<T> call) {\n    if (call == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (call == null) {\n                throw new java.lang.IllegalArgumentException(\"Callable must not be null!\");\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"call":"call"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:653","type":"CtVariableReadImpl","sourcecode":"traceStarted"},"failures":[],"tindex":"d9a74471-2e83-11e6-98b2-858e0951f8a9","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setDefaultFullDetail(final boolean defaultFullDetail) {\n    if (defaultFullDetail) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            super.setDefaultFullDetail(defaultFullDetail);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"traceStarted":"defaultFullDetail"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3222","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"d9a76b82-2e83-11e6-98b2-e14f70571bb8","method":{"position":"org.apache.commons.lang3.exception.ContextedException:199","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.List<java.lang.Object> getContextValues(final java.lang.String label) {\n    if (label == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (label == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.lang3.exception.ContextedException.this.org.apache.commons.lang3.exception.ExceptionContext.getContextValues(label);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"label"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1367","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(type)"},"failures":[],"tindex":"d9a76b83-2e83-11e6-98b2-2d8541d40b1e","method":{"position":"org.apache.commons.lang3.ObjectUtils:185","type":"CtMethodImpl","sourcecode":"public static boolean notEqual(final java.lang.Object object1, final java.lang.Object object2) {\n    if (org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(object1)) {\n        {\n            return (org.apache.commons.lang3.ObjectUtils.equals(object1, object2)) == false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"object1"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:399","type":"CtBinaryOperatorImpl","sourcecode":"(comparison) != 0"},"failures":[270],"tindex":"d9a76b84-2e83-11e6-98b2-630d092e27bd","method":{"position":"org.apache.commons.lang3.math.Fraction:141","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.math.Fraction getFraction(int numerator, int denominator) {\n    if (denominator != 0) {\n        {\n            if (denominator == 0) {\n                throw new java.lang.ArithmeticException(\"The denominator must not be zero\");\n            } \n            if (denominator < 0) {\n                if ((numerator == (java.lang.Integer.java.lang.Integer.int)) || (denominator == (java.lang.Integer.java.lang.Integer.int))) {\n                    throw new java.lang.ArithmeticException(\"overflow: can't negate\");\n                } \n                numerator = -numerator;\n                denominator = -denominator;\n            } \n            return new org.apache.commons.lang3.math.Fraction(numerator , denominator);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"denominator"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1312","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[],"tindex":"d9a79295-2e83-11e6-98b2-2d7bf8c7dbd4","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:214","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.StrTokenizer getTSVInstance(final java.lang.String input) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(input)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.lang3.text.StrTokenizer org.apache.commons.lang3.text.StrTokenizer = org.apache.commons.lang3.text.StrTokenizer.getTSVClone();\n            tok.reset(input);\n            return tok;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:1227","type":"CtBinaryOperatorImpl","sourcecode":"(superType.isAssignableFrom(type)) == false"},"failures":[],"tindex":"d9a79296-2e83-11e6-98b2-e7e3007d0e35","method":{"position":"org.apache.commons.lang3.AnnotationUtils:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected java.lang.String getShortClassName(final java.lang.Class<?> cls) {\n    if ((cls.isAssignableFrom(cls)) == false) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.Class<? extends java.lang.annotation.Annotation> = null;\n            for (final java.lang.Class<?> java.lang.Class<?> : org.apache.commons.lang3.ClassUtils.getAllInterfaces(cls)) {\n                if (java.lang.annotation.Annotation.java.lang.annotation.Annotation.java.lang.Class.isAssignableFrom(iface)) {\n                    @java.lang.SuppressWarnings(value = \"unchecked\")\n                    final java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.Class<? extends java.lang.annotation.Annotation> = ((java.lang.Class<? extends java.lang.annotation.Annotation>)(iface));\n                    annotationType = found;\n                    break;\n                } \n            }\n            return new java.lang.StringBuilder((annotationType == null ? \"\" : annotationType.getName())).insert(0, '@').toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superType":"cls","type":"cls"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:614","type":"CtBinaryOperatorImpl","sourcecode":"t > 0"},"failures":[271,272],"tindex":"d9a7b9a7-2e83-11e6-98b2-9d4333eae99a","method":{"position":"org.apache.commons.lang3.ArrayUtils:2481","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {\n    if (startIndex > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } else if (startIndex >= (array.int)) {\n                startIndex = (array.int) - 1;\n            } \n            for (int int = startIndex ; i >= 0 ; i--) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"t":"startIndex"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:579","type":"CtBinaryOperatorImpl","sourcecode":"(u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))"},"failures":[],"tindex":"d9a7b9a8-2e83-11e6-98b2-cf523dbd3e68","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2145","type":"CtMethodImpl","sourcecode":"public java.lang.String substring(final int start) {\n    if ((start == start) || (start == (java.lang.Integer.java.lang.Integer.int))) {\n        {\n            return substring(start, int);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"u":"start","java.lang.Integer.MIN_VALUE":"start","v":"start"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4891","type":"CtBinaryOperatorImpl","sourcecode":"index >= 0"},"failures":[53,54,273,55,274,56,57,275,58,276,277,278,59,60,279,280,281,282,61,283,284,62,285,286,63,287,64,288,289,65,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307],"tindex":"d9a7b9a9-2e83-11e6-98b2-3140399a74c4","method":{"position":"org.apache.commons.lang3.text.StrMatcher:366","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int isMatch(final char[] buffer, int pos, final int bufferStart, final int bufferEnd) {\n    if (pos >= 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = char[].int;\n            if ((pos + len) > bufferEnd) {\n                return 0;\n            } \n            for (int int = 0 ; i < (char[].int) ; i++ , pos++) {\n                if ((char[][i]) != (buffer[pos])) {\n                    return 0;\n                } \n            }\n            return len;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"pos"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2416","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(separator)"},"failures":[308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323],"tindex":"d9a7e0ba-2e83-11e6-98b2-8be403f4ea13","method":{"position":"org.apache.commons.lang3.time.FastDateParser:694","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid setCalendar(final org.apache.commons.lang3.time.FastDateParser parser, final java.util.Calendar cal, final java.lang.String value) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(value)) {\n        {\n            int int = java.lang.Integer.parseInt(value);\n            if (iValue < 100) {\n                iValue = parser.adjustYear(iValue);\n            } \n            cal.set(java.util.Calendar.java.util.Calendar.int, iValue);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1762","type":"CtBinaryOperatorImpl","sourcecode":"len > 0"},"failures":[324],"tindex":"d9a7e0bb-2e83-11e6-98b2-813df72b957c","method":{"position":"org.apache.commons.lang3.Conversion:972","type":"CtMethodImpl","sourcecode":"public static short hexToShort(final java.lang.String src, final int srcPos, final short dstInit, final int dstPos, final int nHex) {\n    if (srcPos > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nHex) {\n                return dstInit;\n            } \n            if ((((nHex - 1) * 4) + dstPos) >= 16) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+dstPos is greather or equal to than 16\");\n            } \n            short short = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nHex ; i++) {\n                shift = (i * 4) + dstPos;\n                final int int = (15 & (org.apache.commons.lang3.Conversion.hexDigitToInt(src.charAt((i + srcPos))))) << shift;\n                final int int = 15 << shift;\n                out = ((short)((out & (~mask)) | bits));\n            }\n            return out;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"srcPos"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:823","type":"CtBinaryOperatorImpl","sourcecode":"fraction == null"},"failures":[325],"tindex":"d9a807cc-2e83-11e6-98b2-e9bf12fd75af","method":{"position":"org.apache.commons.lang3.math.Fraction:712","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.math.Fraction add(final org.apache.commons.lang3.math.Fraction fraction) {\n    if (fraction == null) {\n        {\n            return addSub(fraction, true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fraction":"fraction"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4941","type":"CtBinaryOperatorImpl","sourcecode":"overlay == null"},"failures":[326],"tindex":"d9a807cd-2e83-11e6-98b2-591abec23c4f","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1006","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrSubstitutor setVariablePrefix(final java.lang.String prefix) {\n    if (prefix == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (prefix == null) {\n                throw new java.lang.IllegalArgumentException(\"Variable prefix must not be null!\");\n            } \n            return setVariablePrefixMatcher(org.apache.commons.lang3.text.StrMatcher.stringMatcher(prefix));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"overlay":"prefix"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:708","type":"CtBinaryOperatorImpl","sourcecode":"delimLen > 0"},"failures":[],"tindex":"d9a807ce-2e83-11e6-98b2-052668d11214","method":{"position":"org.apache.commons.lang3.text.translate.JavaUnicodeEscaper:79","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.translate.JavaUnicodeEscaper outsideOf(final int codepointLow, final int codepointHigh) {\n    if (codepointLow > 0) {\n        {\n            return new org.apache.commons.lang3.text.translate.JavaUnicodeEscaper(codepointLow , codepointHigh , false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delimLen":"codepointLow"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1679","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[327],"tindex":"d9a807cf-2e83-11e6-98b2-07a5347be363","method":{"position":"org.apache.commons.lang3.ArrayUtils:4901","type":"CtMethodImpl","sourcecode":"public static double[] removeElement(final double[] array, final double element) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:510","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[328],"tindex":"d9a82ee0-2e83-11e6-98b2-e9f49fcd224f","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1765","type":"CtMethodImpl","sourcecode":"protected void setArrayEnd(java.lang.String arrayEnd) {\n    if (arrayEnd == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (arrayEnd == null) {\n                arrayEnd = \"\";\n            } \n            org.apache.commons.lang3.builder.ToStringStyle.this.java.lang.String = arrayEnd;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"arrayEnd"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:611","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[329,330,331,332,333,334,335,336,337,338,339,340,341],"tindex":"d9a82ee1-2e83-11e6-98b2-1f78dfa4e2b8","method":{"position":"org.apache.commons.lang3.text.translate.NumericEntityUnescaper:78","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int translate(final java.lang.CharSequence input, final int index, final java.io.Writer out) throws java.io.IOException {\n    if (input == null) {\n        {\n            final int int = input.length();\n            if ((((input.charAt(index)) == '&') && (index < (seqEnd - 2))) && ((input.charAt((index + 1))) == '#')) {\n                int int = index + 2;\n                boolean boolean = false;\n                final char char = input.charAt(start);\n                if ((firstChar == 'x') || (firstChar == 'X')) {\n                    start++;\n                    isHex = true;\n                    if (start == seqEnd) {\n                        return 0;\n                    } \n                } \n                int int = start;\n                while ((end < seqEnd) && (((((input.charAt(end)) >= '0') && ((input.charAt(end)) <= '9')) || (((input.charAt(end)) >= 'a') && ((input.charAt(end)) <= 'f'))) || (((input.charAt(end)) >= 'A') && ((input.charAt(end)) <= 'F')))) {\n                    end++;\n                }\n                final boolean boolean = (end != seqEnd) && ((input.charAt(end)) == ';');\n                if (!semiNext) {\n                    if (isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION.org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION.org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION)) {\n                        return 0;\n                    } else if (isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION.org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION.org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION)) {\n                        throw new java.lang.IllegalArgumentException(\"Semi-colon required at end of numeric entity\");\n                    } \n                } \n                int int;\n                try {\n                    if (isHex) {\n                        entityValue = java.lang.Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                    } else {\n                        entityValue = java.lang.Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                    }\n                } catch (final java.lang.NumberFormatException nfe) {\n                    return 0;\n                }\n                if (entityValue > 65535) {\n                    final char[] char[] = java.lang.Character.toChars(entityValue);\n                    out.write(chrs[0]);\n                    out.write(chrs[1]);\n                } else {\n                    out.write(entityValue);\n                }\n                return (((2 + end) - start) + (isHex ? 1 : 0)) + (semiNext ? 1 : 0);\n            } \n            return 0;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1609","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[342],"tindex":"d9a855f2-2e83-11e6-98b2-53d8832be722","method":{"position":"org.apache.commons.lang3.ArrayUtils:4771","type":"CtMethodImpl","sourcecode":"public static byte[] removeElement(final byte[] array, final byte element) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2182","type":"CtBinaryOperatorImpl","sourcecode":"length >= (size)"},"failures":[343,344,345],"tindex":"d9a855f3-2e83-11e6-98b2-9916844ae358","method":{"position":"org.apache.commons.lang3.time.DateUtils:1155","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<java.util.Calendar> iterator(final java.util.Calendar focus, final int rangeStyle) {\n    if (rangeStyle >= rangeStyle) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (focus == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            java.util.Calendar java.util.Calendar = null;\n            java.util.Calendar java.util.Calendar = null;\n            int int = java.util.Calendar.java.util.Calendar.int;\n            int int = java.util.Calendar.java.util.Calendar.int;\n            switch (rangeStyle) {\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                    start = org.apache.commons.lang3.time.DateUtils.truncate(focus, java.util.Calendar.java.util.Calendar.int);\n                    end = ((java.util.Calendar)(start.clone()));\n                    end.add(java.util.Calendar.java.util.Calendar.int, 1);\n                    end.add(java.util.Calendar.java.util.Calendar.int, (-1));\n                    if (rangeStyle == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) {\n                        startCutoff = java.util.Calendar.java.util.Calendar.int;\n                        endCutoff = java.util.Calendar.java.util.Calendar.int;\n                    } \n                    break;\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                    start = org.apache.commons.lang3.time.DateUtils.truncate(focus, java.util.Calendar.java.util.Calendar.int);\n                    end = org.apache.commons.lang3.time.DateUtils.truncate(focus, java.util.Calendar.java.util.Calendar.int);\n                    switch (rangeStyle) {\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            break;\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            startCutoff = java.util.Calendar.java.util.Calendar.int;\n                            endCutoff = java.util.Calendar.java.util.Calendar.int;\n                            break;\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            startCutoff = focus.get(java.util.Calendar.java.util.Calendar.int);\n                            endCutoff = startCutoff - 1;\n                            break;\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            startCutoff = (focus.get(java.util.Calendar.java.util.Calendar.int)) - 3;\n                            endCutoff = (focus.get(java.util.Calendar.java.util.Calendar.int)) + 3;\n                            break;\n                        default :\n                            break;\n                    }\n                    break;\n                default :\n                    throw new java.lang.IllegalArgumentException(((\"The range style \" + rangeStyle) + \" is not valid.\"));\n            }\n            if (startCutoff < (java.util.Calendar.java.util.Calendar.int)) {\n                startCutoff += 7;\n            } \n            if (startCutoff > (java.util.Calendar.java.util.Calendar.int)) {\n                startCutoff -= 7;\n            } \n            if (endCutoff < (java.util.Calendar.java.util.Calendar.int)) {\n                endCutoff += 7;\n            } \n            if (endCutoff > (java.util.Calendar.java.util.Calendar.int)) {\n                endCutoff -= 7;\n            } \n            while ((start.get(java.util.Calendar.java.util.Calendar.int)) != startCutoff) {\n                start.add(java.util.Calendar.java.util.Calendar.int, (-1));\n            }\n            while ((end.get(java.util.Calendar.java.util.Calendar.int)) != endCutoff) {\n                end.add(java.util.Calendar.java.util.Calendar.int, 1);\n            }\n            return new org.apache.commons.lang3.time.DateUtils.DateIterator(start , end);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"rangeStyle","length":"rangeStyle"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2381","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[],"tindex":"d9a87d04-2e83-11e6-98b2-e32f6b3acb42","method":{"position":"org.apache.commons.lang3.time.DateUtils:1667","type":"CtMethodImpl","sourcecode":"private static long getFragment(final java.util.Calendar calendar, final int fragment, final java.util.concurrent.TimeUnit unit) {\n    if (fragment < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (calendar == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            long long = 0;\n            int int = unit == (java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit) ? 0 : 1;\n            switch (fragment) {\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(((calendar.get(java.util.Calendar.java.util.Calendar.int)) - offset), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                    break;\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(((calendar.get(java.util.Calendar.java.util.Calendar.int)) - offset), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                    break;\n                default :\n                    break;\n            }\n            switch (fragment) {\n                case java.util.Calendar.java.util.Calendar.int :\n                case java.util.Calendar.java.util.Calendar.int :\n                case java.util.Calendar.java.util.Calendar.int :\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(calendar.get(java.util.Calendar.java.util.Calendar.int), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(calendar.get(java.util.Calendar.java.util.Calendar.int), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(calendar.get(java.util.Calendar.java.util.Calendar.int), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(calendar.get(java.util.Calendar.java.util.Calendar.int), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                    break;\n                case java.util.Calendar.java.util.Calendar.int :\n                    break;\n                default :\n                    throw new java.lang.IllegalArgumentException(((\"The fragment \" + fragment) + \" is not supported\"));\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"fragment"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:837","type":"CtBinaryOperatorImpl","sourcecode":"(((nBytes - 1) * 8) + dstPos) >= 32"},"failures":[],"tindex":"d9a8a415-2e83-11e6-98b2-75b96ffcabe2","method":{"position":"org.apache.commons.lang3.ArrayUtils:4544","type":"CtMethodImpl","sourcecode":"public static double[] add(final double[] array, final int index, final double element) {\n    if ((((index - 1) * 8) + index) >= 32) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((double[])(org.apache.commons.lang3.ArrayUtils.add(array, index, java.lang.Double.valueOf(element), java.lang.Double.java.lang.Double.java.lang.Class<java.lang.Double>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"index","nBytes":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6640","type":"CtBinaryOperatorImpl","sourcecode":"(firstDiff == (-1)) && (shortestStrLen != longestStrLen)"},"failures":[],"tindex":"d9a8cb26-2e83-11e6-98b2-4d362865b7ca","method":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:138","type":"CtMethodImpl","sourcecode":"protected java.lang.String toUtf16Escape(final int codepoint) {\n    if ((codepoint == (-1)) && (codepoint != codepoint)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return \"\\\\u\" + (org.apache.commons.lang3.text.translate.CharSequenceTranslator.hex(codepoint));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstDiff":"codepoint","shortestStrLen":"codepoint","longestStrLen":"codepoint"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.AnnotationUtils:126","type":"CtBinaryOperatorImpl","sourcecode":"(a1 == null) || (a2 == null)"},"failures":[],"tindex":"d9a8cb27-2e83-11e6-98b2-2fdecec08425","method":{"position":"org.apache.commons.lang3.AnnotationUtils:167","type":"CtMethodImpl","sourcecode":"public static int hashCode(final java.lang.annotation.Annotation a) {\n    if ((a == null) || (a == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            final java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.Class<? extends java.lang.annotation.Annotation> = a.annotationType();\n            for (final java.lang.reflect.Method java.lang.reflect.Method : type.getDeclaredMethods()) {\n                try {\n                    final java.lang.Object java.lang.Object = m.invoke(a);\n                    if (value == null) {\n                        throw new java.lang.IllegalStateException(java.lang.String.format(\"Annotation method %s returned null\", m));\n                    } \n                    result += org.apache.commons.lang3.AnnotationUtils.hashMember(m.getName(), value);\n                } catch (final java.lang.RuntimeException ex) {\n                    throw ex;\n                } catch (final java.lang.Exception ex) {\n                    throw new java.lang.RuntimeException(ex);\n                }\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a1":"a","a2":"a"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:343","type":"CtFieldReadImpl","sourcecode":"objectsTriviallyEqual"},"failures":[346],"tindex":"d9a8cb28-2e83-11e6-98b2-990a0a5e81af","method":{"position":"org.apache.commons.lang3.ArrayUtils:4043","type":"CtMethodImpl","sourcecode":"public static boolean[] add(final boolean[] array, final boolean element) {\n    if (element) {\n        {\n            final boolean[] boolean[] = ((boolean[])(org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(array, java.lang.Boolean.java.lang.Boolean.java.lang.Class<java.lang.Boolean>)));\n            newArray[((newArray.int) - 1)] = element;\n            return newArray;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectsTriviallyEqual":"element"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrMatcher:206","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[347],"tindex":"d9a91949-2e83-11e6-98b2-6539da15a974","method":{"position":"org.apache.commons.lang3.StringUtils:5686","type":"CtMethodImpl","sourcecode":"public static java.lang.String capitalize(final java.lang.String str) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        {\n            int int;\n            if ((str == null) || ((strLen = str.length()) == 0)) {\n                return str;\n            } \n            char char = str.charAt(0);\n            if (java.lang.Character.isTitleCase(firstChar)) {\n                return str;\n            } \n            return new java.lang.StringBuilder(strLen).append(java.lang.Character.toTitleCase(firstChar)).append(str.substring(1)).toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":70,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
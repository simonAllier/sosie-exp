{"failureDictionary":{"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":158,"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":311,"org.apache.commons.lang3.StringUtilsTest.testIsNoneEmpty":15,"org.apache.commons.lang3.time.FastDatePrinterTest.testToStringContainsName":76,"org.apache.commons.lang3.math.IEEE754rUtilsTest.testLang381":205,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceChangedMap":232,"org.apache.commons.lang3.CharSetUtilsTest.testCount_StringString":273,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties":207,"org.apache.commons.lang3.exception.ContextedExceptionTest.testRawMessage":32,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone":101,"org.apache.commons.lang3.text.StrBuilderTest.testSubstringInt":196,"org.apache.commons.lang3.exception.ContextedExceptionTest.testNullExceptionPassing":31,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementBooleanArray":202,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatUTC":81,"org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP":84,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":312,"org.apache.commons.lang3.time.FastDatePrinterTest.testMilleniumBug":69,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":135,"org.apache.commons.lang3.CharSetTest.testHashCode":252,"org.apache.commons.lang3.ArrayUtilsTest.testIsEmptyPrimitives":157,"org.apache.commons.lang3.ArrayUtilsTest.testContainsLong":307,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplace":228,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":287,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String":97,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testSimpleDate":53,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDifferingStyles":100,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":166,"org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionString":35,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArrayEqualAsObject":322,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":170,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddDash":244,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_AD":126,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":142,"org.apache.commons.lang3.time.FastDatePrinterTest.testEquals":77,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int":284,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDefaults":99,"org.apache.commons.lang3.CharRangeTest.testEquals_Object":259,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":285,"org.apache.commons.lang3.ArrayUtilsTest.testSameLengthChar":194,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":320,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":139,"org.apache.commons.lang3.tuple.TripleTest.testToStringCustom":190,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testCalendarTimezoneRespected":58,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":309,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDefaults":104,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePartialString_noReplace":241,"org.apache.commons.lang3.StringUtilsIsTest.testIsAlphaspace":303,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testGetContextValues":51,"org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringStringarray":272,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":152,"org.apache.commons.lang3.mutable.MutableByteTest.testEquals":182,"org.apache.commons.lang3.text.StrSubstitutorTest.testSubstituteDefaultProperties":223,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtStart":239,"org.apache.commons.lang3.CharRangeTest.testContains_Char":260,"org.apache.commons.lang3.LocaleUtilsTest.testToLocale_1Part":52,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":296,"org.apache.commons.lang3.time.FastDatePrinterTest.testTimeZoneMatches":79,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationISO":218,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":168,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":184,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_double":302,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_BC":127,"org.apache.commons.lang3.StringUtilsTest.testChomp":198,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int":180,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testTimeZoneMatches":65,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_AD":113,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplacePrefixSuffix":225,"org.apache.commons.lang3.BitFieldTest.testGetValue":209,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":143,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex":277,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang303":73,"org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getRootCauseMessage_Throwable":0,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testTimeZoneMatches":130,"org.apache.commons.lang3.time.FastDateFormatTest.testDateDefaults":98,"org.apache.commons.lang3.CharSetTest.testEquals_Object":247,"org.apache.commons.lang3.BitFieldTest.testSetValue":214,"org.apache.commons.lang3.exception.ContextedExceptionTest.testAddContextValue":37,"org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringStringarray":269,"org.apache.commons.lang3.exception.ContextedExceptionTest.testJavaSerialization":38,"org.apache.commons.lang3.ValidateTest.testValidIndex_withMessage_collection":199,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringString":266,"org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected":72,"org.apache.commons.lang3.time.FastDatePrinterTest.testSimpleDate":67,"org.apache.commons.lang3.math.NumberUtilsTest.testToByteString":13,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int":179,"org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBooleanInt":282,"org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionThrowable":33,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDateDefaults":96,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO":87,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testRawMessage":18,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testJavaSerialization":24,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISOMethod":219,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":140,"org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArray":305,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetContextEntries":26,"org.apache.commons.lang3.StringUtilsTest.testSplit_StringString_StringStringInt":283,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testFormat":64,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":146,"org.apache.commons.lang3.CharRangeTest.testHashCode":262,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBetween_StringString":163,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseLongShort":123,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetContextEntries":40,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO":82,"org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringString_StringStringInt":281,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":136,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":172,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":316,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testToStringContainsName":62,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":83,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":289,"org.apache.commons.lang3.CharSetTest.testConstructor_String_simple":246,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapFull":240,"org.apache.commons.lang3.ClassUtilsTest.testIsPrimitiveOrWrapper":304,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":173,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":151,"org.apache.commons.lang3.concurrent.BasicThreadFactoryTest.testBuilderReset":4,"org.apache.commons.lang3.StringUtilsTest.testIsAnyEmpty":14,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":150,"org.apache.commons.lang3.time.FastDatePrinterTest.testLocaleMatches":70,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorNoArgs":230,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":321,"org.apache.commons.lang3.exception.ContextedExceptionTest.testSetContextValue":39,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear":144,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByteObject":7,"org.apache.commons.lang3.ArrayUtilsTest.testToObject_boolean":242,"org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isIn_Reversed":257,"org.apache.commons.lang3.time.FastDatePrinterTest.testShortDateStyleWithLocales":68,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_float":301,"org.apache.commons.lang3.BitFieldTest.testGetRawValue":213,"org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArrayBoolean":306,"org.apache.commons.lang3.time.DateUtilsTest.testLang530":90,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":326,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedExceptionStringThrowableContext":20,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_StrMatcher":280,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormat":88,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":147,"org.apache.commons.lang3.time.FastDatePrinterTest.testFormat":78,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByteObjectEmptyArray":6,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseNumerics":115,"org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringString":268,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":314,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":329,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang538":117,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":138,"org.apache.commons.lang3.CharSetTest.testContains_Char":248,"org.apache.commons.lang3.CharRangeTest.testSerialization":258,"org.apache.commons.lang3.BitFieldTest.testSetShortValue":211,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":153,"org.apache.commons.lang3.time.DateFormatUtilsTest.testConstructor":89,"org.apache.commons.lang3.ArrayUtilsTest.testReverseByte":181,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":318,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseZone":110,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":286,"org.apache.commons.lang3.RangeTest.testContainsRange":165,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementBooleanArray":201,"org.apache.commons.lang3.math.IEEE754rUtilsTest.testEnforceExceptions":206,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testSetContextValue":47,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":175,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher":279,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeStaticMethod":195,"org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isIn_Same":264,"org.apache.commons.lang3.time.FastDatePrinterTest.testLowYearPadding":71,"org.apache.commons.lang3.CharSetUtilsTest.testContainsAny_StringString":271,"org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionStringThrowableContext":34,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testToStringContainsName":118,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":133,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":145,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping":167,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyShortObjectNull":215,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang303":116,"org.apache.commons.lang3.concurrent.BasicThreadFactoryTest.testNewThreadNamingPattern":3,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomNumeric":161,"org.apache.commons.lang3.CharSetUtilsTest.testCount_StringStringarray":270,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayToObjectArray":203,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testPatternMatches":66,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":315,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedExceptionStringThrowable":22,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":183,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyBooleanNull":160,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":293,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":177,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex":278,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":291,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testAddContextValue":45,"org.apache.commons.lang3.CharRangeTest.testIterator":265,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":308,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripToNull_String":188,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":290,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":310,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_BC":125,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":178,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":155,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang303":59,"org.apache.commons.lang3.StringUtilsTest.testIsAllLowerCase":189,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":327,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":186,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableRecursive":229,"org.apache.commons.lang3.ValidateTest.testValidIndex_collection":200,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":324,"org.apache.commons.lang3.StringUtilsTest.testRepeat_StringInt":9,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLocaleMatches":56,"org.apache.commons.lang3.text.StrSubstitutorTest.testDefaultValueDelimiters":234,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO":86,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testNullExceptionPassing":17,"org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntChar":10,"org.apache.commons.lang3.BitFieldTest.testGetShortValue":210,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testShortDateStyleWithLocales":106,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":220,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_AD":124,"org.apache.commons.lang3.text.StrBuilderTest.testEnsureCapacity":193,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":295,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang538":60,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsOnly_CharArray":12,"org.apache.commons.lang3.RangeTest.testToStringFormat":197,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoVariables":235,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariable":236,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedExceptionString":21,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.test_Equality_Hash":120,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":323,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_Locale":102,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":149,"org.apache.commons.lang3.text.StrSubstitutorTest.testResolveVariable":237,"org.apache.commons.lang3.ClassUtilsTest.test_getShortClassName_Object":2,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementByteArray":156,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testEquals":128,"org.apache.commons.lang3.text.StrSubstitutorTest.testCyclicReplacement":224,"org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isIn_Normal":261,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testGetFirstContextValue":50,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance":103,"org.apache.commons.lang3.StringUtilsTest.testGetJaroWinklerDistance_StringString":300,"org.apache.commons.lang3.ArrayUtilsTest.testCloneBoolean":204,"org.apache.commons.lang3.CharSetTest.testGetInstance_Stringarray":253,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapPrefixSuffix":226,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":171,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO":85,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":169,"org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedException":30,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":319,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testGetContextEntries":48,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":185,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance":95,"org.apache.commons.lang3.CharSetTest.testSerialization":245,"org.apache.commons.lang3.math.FractionTest.testAdd":191,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testAmPm":111,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":132,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testPatternMatches":131,"org.apache.commons.lang3.concurrent.BasicThreadFactoryTest.testNewThreadPriority":243,"org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getMessage_Throwable":1,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsOnly_String":11,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddNegate":254,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":159,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedException":16,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testJavaSerialization":46,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":294,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_StrMatcher":276,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetFirstContextValue":28,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtEnd":231,"org.apache.commons.lang3.CharSetTest.testStatics":256,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":317,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddCombinations":250,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":148,"org.apache.commons.lang3.BitFieldTest.testGetShortRawValue":212,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLowYearPadding":112,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLANG_832":119,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_AD":121,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":137,"org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntChar":8,"org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_Boolean":192,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWith":298,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testFormattedExceptionMessageNull":44,"org.apache.commons.lang3.CharSetTest.testGetInstance":255,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang645":75,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":325,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedExceptionThrowable":19,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetFirstContextValue":42,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert":216,"org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionStringThrowable":36,"org.apache.commons.lang3.StringUtilsTest.testCaseFunctions":217,"org.apache.commons.lang3.time.FastDateFormatTest.testParseSync":92,"org.apache.commons.lang3.CharRangeTest.testContains_Charrange":263,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":288,"org.apache.commons.lang3.time.FastDateFormatTest.testLang954":93,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetContextValues":43,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang538":74,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_BC":122,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testMilleniumBug":55,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_BC":114,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWithAny":299,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetContextValues":29,"org.apache.commons.lang3.ConversionTest.testIntToHex":222,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testAddContextValue":23,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":328,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testEquals":63,"org.apache.commons.lang3.ClassUtilsTest.testPrimitivesToWrappers":208,"org.apache.commons.lang3.text.StrSubstitutorTest.testSamePrefixAndSuffix":227,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":313,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringStringarray":275,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBetween_StringStringString":164,"org.apache.commons.lang3.CharSetTest.testConstructor_String_combo":249,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeExactConstructor":187,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":141,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang645":61,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance":91,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testSpecialCharacters":105,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceWeirdPattens":233,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLowYearPadding":57,"org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringString":267,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDoubleObjectNull":221,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableDisabled":238,"org.apache.commons.lang3.CharSetUtilsTest.testContainsAny_StringStringarray":274,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":297,"org.apache.commons.lang3.CharSetTest.testConstructor_String_comboNegated":251,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetContextLabels":41,"org.apache.commons.lang3.concurrent.BasicThreadFactoryTest.testBuilderResetAfterBuild":5,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":134,"org.apache.commons.lang3.ClassUtilsTest.test_isInnerClass_Class":330,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone_Locale":94,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocaleMatches":108,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testDayOf":109,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils":162,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":176,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testGetContextLabels":49,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testShortDateStyleWithLocales":54,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testMilleniumBug":107,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testSetContextValue":25,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetContextLabels":27,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":292,"org.apache.commons.lang3.time.FastDatePrinterTest.testPatternMatches":80,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testQuotes":129,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO":154,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":174},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2018","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || (searchStrs == null)"},"failures":[0,1,2],"tindex":"0b5968c1-2ea1-11e6-8284-b304a5684a26","method":{"position":"org.apache.commons.lang3.ClassUtils:158","type":"CtMethodImpl","sourcecode":"public static java.lang.String getShortClassName(final java.lang.Object object, final java.lang.String valueIfNull) {\n    if ((object == null) || (object == null)) {\n        {\n            if (object == null) {\n                return valueIfNull;\n            } \n            return org.apache.commons.lang3.ClassUtils.getShortClassName(object.getClass());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"object","searchStrs":"object"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.IllegalArgumentException","condition":{"position":"org.apache.commons.lang3.Conversion:1223","type":"CtBinaryOperatorImpl","sourcecode":"0 == nShorts"},"failures":[],"tindex":"0b5a0502-2ea1-11e6-8284-fd8aa69436f1","method":{"position":"org.apache.commons.lang3.ObjectUtils:787","type":"CtMethodImpl","sourcecode":"public static byte CONST_BYTE(final int v) throws java.lang.IllegalArgumentException {\n    if (0 == v) {\n        throw new java.lang.IllegalArgumentException();\n    } else {\n        {\n            if ((v < (java.lang.Byte.java.lang.Byte.byte)) || (v > (java.lang.Byte.java.lang.Byte.byte))) {\n                throw new java.lang.IllegalArgumentException(((\"Supplied value must be a valid byte literal between -128 and 127: [\" + v) + \"]\"));\n            } \n            return ((byte)(v));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nShorts":"v"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:146","type":"CtBinaryOperatorImpl","sourcecode":"(numerator == (java.lang.Integer.MIN_VALUE)) || (denominator == (java.lang.Integer.MIN_VALUE))"},"failures":[],"tindex":"0b5a2c13-2ea1-11e6-8284-c7be0feb38ef","method":{"position":"org.apache.commons.lang3.ArrayUtils:994","type":"CtMethodImpl","sourcecode":"public static short[] subarray(final short[] array, int startIndexInclusive, int endIndexExclusive) {\n    if ((startIndexInclusive == startIndexInclusive) || (endIndexExclusive == (java.lang.Integer.java.lang.Integer.int))) {\n        {\n            if (array == null) {\n                return null;\n            } \n            if (startIndexInclusive < 0) {\n                startIndexInclusive = 0;\n            } \n            if (endIndexExclusive > (array.int)) {\n                endIndexExclusive = array.int;\n            } \n            final int int = endIndexExclusive - startIndexInclusive;\n            if (newSize <= 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.short[];\n            } \n            final short[] short[] = new short[newSize];\n            java.lang.System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n            return subarray;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.Integer.MIN_VALUE":"startIndexInclusive","numerator":"startIndexInclusive","denominator":"endIndexExclusive"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:732","type":"CtInvocationImpl","sourcecode":"str.startsWith(\"-\")"},"failures":[3,4,5],"tindex":"0b5a5324-2ea1-11e6-8284-7f4703ca4709","method":{"position":"org.apache.commons.lang3.concurrent.BasicThreadFactory:300","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.concurrent.BasicThreadFactory.Builder namingPattern(final java.lang.String pattern) {\n    if (pattern.startsWith(\"-\")) {\n        {\n            if (pattern == null) {\n                throw new java.lang.NullPointerException(\"Naming pattern must not be null!\");\n            } \n            java.lang.String = pattern;\n            return org.apache.commons.lang3.concurrent.BasicThreadFactory.Builder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"pattern"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5611","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"0b5a7a35-2ea1-11e6-8284-a30d498580c0","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1073","type":"CtMethodImpl","sourcecode":"protected void appendSummary(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final int[] array) {\n    if (fieldName == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendSummarySize(buffer, fieldName, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3252","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[6,7],"tindex":"0b5a7a36-2ea1-11e6-8284-d7fb3968ce84","method":{"position":"org.apache.commons.lang3.ArrayUtils:772","type":"CtMethodImpl","sourcecode":"public static java.lang.Byte[] nullToEmpty(final java.lang.Byte[] array) {\n    if (array == null) {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Byte[];\n            } \n            return array;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1619","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars))"},"failures":[8,9,10,11,12],"tindex":"0b5aa147-2ea1-11e6-8284-a9ac9acefe71","method":{"position":"org.apache.commons.lang3.StringUtils:1805","type":"CtMethodImpl","sourcecode":"public static boolean containsOnly(final java.lang.CharSequence cs, final char... valid) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(valid))) {\n        {\n            if ((valid == null) || (cs == null)) {\n                return false;\n            } \n            if ((cs.length()) == 0) {\n                return true;\n            } \n            if ((valid.int) == 0) {\n                return false;\n            } \n            return (org.apache.commons.lang3.StringUtils.indexOfAnyBut(cs, valid)) == (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"cs","searchChars":"valid"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.text.ParseException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1436","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"0b5ac858-2ea1-11e6-8284-a791faf25ebb","method":{"position":"org.apache.commons.lang3.time.FastDateParser:280","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date parse(final java.lang.String source) throws java.text.ParseException {\n    if (source == null) {\n        {\n            final java.util.Date java.util.Date = parse(source, new java.text.ParsePosition(0));\n            if (date == null) {\n                if (java.util.Locale.equals(org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.java.util.Locale)) {\n                    throw new java.text.ParseException(((((((\"(The \" + (java.util.Locale)) + \" locale does not support dates before 1868 AD)\\n\") + \"Unparseable date: \\\"\") + source) + \"\\\" does not match \") + (java.util.regex.Pattern.pattern())) , 0);\n                } \n                throw new java.text.ParseException((((\"Unparseable date: \\\"\" + source) + \"\\\" does not match \") + (java.util.regex.Pattern.pattern())) , 0);\n            } \n            return date;\n        }\n    } else {\n        throw new java.text.ParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSet:174","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[13],"tindex":"0b5ac859-2ea1-11e6-8284-cbc234b359d5","method":{"position":"org.apache.commons.lang3.math.NumberUtils:302","type":"CtMethodImpl","sourcecode":"public static byte toByte(final java.lang.String str) {\n    if (str == null) {\n        {\n            return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte)(0)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSetUtils:242","type":"CtBinaryOperatorImpl","sourcecode":"strings != null"},"failures":[14,15],"tindex":"0b5aef6a-2ea1-11e6-8284-cff6062fbc43","method":{"position":"org.apache.commons.lang3.StringUtils:258","type":"CtMethodImpl","sourcecode":"public static boolean isAnyEmpty(java.lang.CharSequence... css) {\n    if (css != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.ArrayUtils.isEmpty(css)) {\n                return true;\n            } \n            for (java.lang.CharSequence java.lang.CharSequence : css) {\n                if (org.apache.commons.lang3.StringUtils.isEmpty(cs)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strings":"css"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5003","type":"CtBinaryOperatorImpl","sourcecode":"(ch == (org.apache.commons.lang3.CharUtils.CR)) || (ch == (org.apache.commons.lang3.CharUtils.LF))"},"failures":[],"tindex":"0b5b167b-2ea1-11e6-8284-29921d65e385","method":{"position":"org.apache.commons.lang3.CharSet:223","type":"CtMethodImpl","sourcecode":"public boolean contains(final char ch) {\n    if ((ch == ch) || (ch == ch)) {\n        {\n            for (final org.apache.commons.lang3.CharRange org.apache.commons.lang3.CharRange : java.util.Set<org.apache.commons.lang3.CharRange>) {\n                if (range.contains(ch)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch","org.apache.commons.lang3.CharUtils.LF":"ch","org.apache.commons.lang3.CharUtils.CR":"ch"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1766","type":"CtBinaryOperatorImpl","sourcecode":"arrayEnd == null"},"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"tindex":"0b5b167c-2ea1-11e6-8284-e33242e512cb","method":{"position":"org.apache.commons.lang3.exception.DefaultExceptionContext:53","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic org.apache.commons.lang3.exception.DefaultExceptionContext addContextValue(final java.lang.String label, final java.lang.Object value) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object>>.add(new org.apache.commons.lang3.tuple.ImmutablePair<java.lang.String, java.lang.Object>(label , value));\n            return org.apache.commons.lang3.exception.DefaultExceptionContext.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayEnd":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:222","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[52],"tindex":"0b5b3d8d-2ea1-11e6-8284-95817cbe29e4","method":{"position":"org.apache.commons.lang3.LocaleUtils:90","type":"CtMethodImpl","sourcecode":"public static java.util.Locale toLocale(final java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (str.isEmpty()) {\n                return new java.util.Locale(\"\" , \"\");\n            } \n            if (str.contains(\"#\")) {\n                throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n            } \n            final int int = str.length();\n            if (len < 2) {\n                throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n            } \n            final char char = str.charAt(0);\n            if (ch0 == '_') {\n                if (len < 3) {\n                    throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n                } \n                final char char = str.charAt(1);\n                final char char = str.charAt(2);\n                if ((!(java.lang.Character.isUpperCase(ch1))) || (!(java.lang.Character.isUpperCase(ch2)))) {\n                    throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n                } \n                if (len == 3) {\n                    return new java.util.Locale(\"\" , str.substring(1, 3));\n                } \n                if (len < 5) {\n                    throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n                } \n                if ((str.charAt(3)) != '_') {\n                    throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n                } \n                return new java.util.Locale(\"\" , str.substring(1, 3) , str.substring(4));\n            } \n            java.lang.String[] java.lang.String[] = str.split(\"_\", (-1));\n            int int = (split.int) - 1;\n            switch (occurrences) {\n                case 0 :\n                    if ((org.apache.commons.lang3.StringUtils.isAllLowerCase(str)) && ((len == 2) || (len == 3))) {\n                        return new java.util.Locale(str);\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n                    }\n                case 1 :\n                    if ((((org.apache.commons.lang3.StringUtils.isAllLowerCase(split[0])) && (((split[0].length()) == 2) || ((split[0].length()) == 3))) && ((split[1].length()) == 2)) && (org.apache.commons.lang3.StringUtils.isAllUpperCase(split[1]))) {\n                        return new java.util.Locale(split[0] , split[1]);\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n                    }\n                case 2 :\n                    if ((((org.apache.commons.lang3.StringUtils.isAllLowerCase(split[0])) && (((split[0].length()) == 2) || ((split[0].length()) == 3))) && (((split[1].length()) == 0) || (((split[1].length()) == 2) && (org.apache.commons.lang3.StringUtils.isAllUpperCase(split[1]))))) && ((split[2].length()) > 0)) {\n                        return new java.util.Locale(split[0] , split[1] , split[2]);\n                    } \n                default :\n                    throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + str));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:311","type":"CtBinaryOperatorImpl","sourcecode":"i == (-1)"},"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154],"tindex":"0b5b8bae-2ea1-11e6-8284-3947fbe33383","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:357","type":"CtMethodImpl","sourcecode":"protected org.apache.commons.lang3.time.FastDatePrinter.NumberRule selectNumberRule(final int field, final int padding) {\n    if (padding == (-1)) {\n        {\n            switch (padding) {\n                case 1 :\n                    return new org.apache.commons.lang3.time.FastDatePrinter.UnpaddedNumberField(field);\n                case 2 :\n                    return new org.apache.commons.lang3.time.FastDatePrinter.TwoDigitNumberField(field);\n                default :\n                    return new org.apache.commons.lang3.time.FastDatePrinter.PaddedNumberField(field , padding);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"padding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:64","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[155,155],"tindex":"0b5bb2bf-2ea1-11e6-8284-57aaf272ebf4","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:401","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final float[] array) {\n    if (array == null) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3823","type":"CtBinaryOperatorImpl","sourcecode":"array2 == null"},"failures":[156,157],"tindex":"0b5bd9d0-2ea1-11e6-8284-61ee02ad2b2f","method":{"position":"org.apache.commons.lang3.ArrayUtils:3553","type":"CtMethodImpl","sourcecode":"public static boolean isEmpty(final byte[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (array == null) || ((array.int) == 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array2":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MethodUtils:355","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.lang3.reflect.MemberUtils.isAccessible(method))"},"failures":[158,159],"tindex":"0b5bd9d1-2ea1-11e6-8284-eb83440441dc","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:512","type":"CtMethodImpl","sourcecode":"public static java.util.Set<java.lang.reflect.Method> getOverrideHierarchy(final java.lang.reflect.Method method, org.apache.commons.lang3.ClassUtils.Interfaces interfacesBehavior) {\n    if (!(org.apache.commons.lang3.reflect.MemberUtils.isAccessible(method))) {\n        {\n            org.apache.commons.lang3.Validate.notNull(method);\n            final java.util.Set<java.lang.reflect.Method> java.util.Set<java.lang.reflect.Method> = new java.util.LinkedHashSet<java.lang.reflect.Method>();\n            result.add(method);\n            final java.lang.Class<?>[] java.lang.Class<?>[] = method.getParameterTypes();\n            final java.lang.Class<?> java.lang.Class<?> = method.getDeclaringClass();\n            final java.util.Iterator<java.lang.Class<?>> java.util.Iterator<java.lang.Class<?>> = org.apache.commons.lang3.ClassUtils.hierarchy(declaringClass, interfacesBehavior).iterator();\n            hierarchy.next();\n            hierarchyTraversal : while (hierarchy.hasNext()) {\n                final java.lang.Class<?> java.lang.Class<?> = hierarchy.next();\n                final java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.getMatchingAccessibleMethod(c, method.getName(), parameterTypes);\n                if (m == null) {\n                    continue;\n                } \n                if (java.util.Arrays.equals(m.getParameterTypes(), parameterTypes)) {\n                    result.add(m);\n                    continue;\n                } \n                final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(declaringClass, m.getDeclaringClass());\n                for (int int = 0 ; i < (parameterTypes.int) ; i++) {\n                    final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(typeArguments, method.getGenericParameterTypes()[i]);\n                    final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(typeArguments, m.getGenericParameterTypes()[i]);\n                    if (!(org.apache.commons.lang3.reflect.TypeUtils.equals(childType, parentType))) {\n                        continue hierarchyTraversal;\n                    } \n                }\n                result.add(m);\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"method":"method"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1574","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[160],"tindex":"0b5c27f2-2ea1-11e6-8284-1d119bce7df6","method":{"position":"org.apache.commons.lang3.ArrayUtils:672","type":"CtMethodImpl","sourcecode":"public static boolean[] nullToEmpty(final boolean[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.boolean[];\n            } \n            return array;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:845","type":"CtBinaryOperatorImpl","sourcecode":"varValue == null"},"failures":[],"tindex":"0b5c27f3-2ea1-11e6-8284-d318c75dcabc","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1236","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final char[] array) {\n    if (fieldName == null) {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"varValue":"fieldName"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:180","type":"CtBinaryOperatorImpl","sourcecode":"(cal1 == null) || (cal2 == null)"},"failures":[],"tindex":"0b5c27f4-2ea1-11e6-8284-aff0dcdec088","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:461","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer format(final java.util.Calendar calendar, final java.lang.StringBuffer buf) {\n    if ((calendar == null) || (calendar == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return applyRules(calendar, buf);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cal2":"calendar","cal1":"calendar"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2336","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[161,162],"tindex":"0b5c4f05-2ea1-11e6-8284-edb0da7e25eb","method":{"position":"org.apache.commons.lang3.RandomStringUtils:124","type":"CtMethodImpl","sourcecode":"public static java.lang.String randomNumeric(final int count) {\n    if (count < 0) {\n        {\n            return org.apache.commons.lang3.RandomStringUtils.random(count, false, true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"count"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3225","type":"CtInvocationImpl","sourcecode":"str.isEmpty()"},"failures":[163,164],"tindex":"0b5c4f06-2ea1-11e6-8284-cb52925c022a","method":{"position":"org.apache.commons.lang3.StringUtils:2480","type":"CtMethodImpl","sourcecode":"public static java.lang.String substringBetween(final java.lang.String str, final java.lang.String open, final java.lang.String close) {\n    if (str.isEmpty()) {\n        {\n            if (((str == null) || (open == null)) || (close == null)) {\n                return null;\n            } \n            final int int = str.indexOf(open);\n            if (start != (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) {\n                final int int = str.indexOf(close, (start + (open.length())));\n                if (end != (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) {\n                    return str.substring((start + (open.length())), end);\n                } \n            } \n            return null;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.JavaVersion:138","type":"CtInvocationImpl","sourcecode":"\"1.3\".equals(nom)"},"failures":[],"tindex":"0b5c4f07-2ea1-11e6-8284-536da2a2a9a6","method":{"position":"org.apache.commons.lang3.CharSetUtils:140","type":"CtMethodImpl","sourcecode":"public static int count(final java.lang.String str, final java.lang.String... set) {\n    if (\"1.3\".equals(str)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.CharSetUtils.deepEmpty(set))) {\n                return 0;\n            } \n            final org.apache.commons.lang3.CharSet org.apache.commons.lang3.CharSet = org.apache.commons.lang3.CharSet.getInstance(set);\n            int int = 0;\n            for (final char char : str.toCharArray()) {\n                if (chars.contains(c)) {\n                    count++;\n                } \n            }\n            return count;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Range:332","type":"CtBinaryOperatorImpl","sourcecode":"otherRange == null"},"failures":[165],"tindex":"0b5c7618-2ea1-11e6-8284-4746b7f1f238","method":{"position":"org.apache.commons.lang3.Range:314","type":"CtMethodImpl","sourcecode":"public boolean containsRange(final org.apache.commons.lang3.Range<T> otherRange) {\n    if (otherRange == null) {\n        {\n            if (otherRange == null) {\n                {\n                    if (otherRange == null) {\n                        return false;\n                    } \n                    return (contains(otherRange.T)) && (contains(otherRange.T));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"otherRange":"otherRange"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:115","type":"CtBinaryOperatorImpl","sourcecode":"codepoint > 65535"},"failures":[166,167,168,169,170,171,172,173,174,175,176,177,178,179,180],"tindex":"0b5c7619-2ea1-11e6-8284-5b708e8a84e5","method":{"position":"org.apache.commons.lang3.text.StrBuilder:646","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final java.lang.StringBuilder str, final int startIndex, final int length) {\n    if (startIndex > 65535) {\n        {\n            if (str == null) {\n                return appendNull();\n            } \n            if ((startIndex < 0) || (startIndex > (str.length()))) {\n                throw new java.lang.StringIndexOutOfBoundsException(\"startIndex must be valid\");\n            } \n            if ((length < 0) || ((startIndex + length) > (str.length()))) {\n                throw new java.lang.StringIndexOutOfBoundsException(\"length must be valid\");\n            } \n            if (length > 0) {\n                final int int = length();\n                ensureCapacity((len + length));\n                str.getChars(startIndex, (startIndex + length), char[], len);\n                int += length;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"codepoint":"startIndex"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2482","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[181],"tindex":"0b5c9d2a-2ea1-11e6-8284-2151810be485","method":{"position":"org.apache.commons.lang3.ArrayUtils:1505","type":"CtMethodImpl","sourcecode":"public static void reverse(final byte[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return ;\n            } \n            org.apache.commons.lang3.ArrayUtils.reverse(array, 0, array.int);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:595","type":"CtBinaryOperatorImpl","sourcecode":"(((ch0 == 'o') || (ch0 == 'O')) && ((ch1 == 'f') || (ch1 == 'F'))) && ((ch2 == 'f') || (ch2 == 'F'))"},"failures":[],"tindex":"0b5c9d2b-2ea1-11e6-8284-778f218f7118","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:551","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final char lhs, final char rhs) {\n    if ((((lhs == 'o') || (ch0 == 'O')) && ((lhs == 'f') || (ch1 == 'F'))) && ((lhs == 'f') || (ch2 == 'F'))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            boolean = lhs == rhs;\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch0":"lhs","ch2":"lhs","ch1":"lhs"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:823","type":"CtBinaryOperatorImpl","sourcecode":"fraction == null"},"failures":[],"tindex":"0b5c9d2c-2ea1-11e6-8284-dbbfeb42197a","method":{"position":"org.apache.commons.lang3.mutable.MutableShort:169","type":"CtMethodImpl","sourcecode":"public void subtract(final java.lang.Number operand) {\n    if (operand == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableShort.this.short -= operand.shortValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fraction":"operand"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:121","type":"CtBinaryOperatorImpl","sourcecode":"locale == null"},"failures":[182],"tindex":"0b5cc43d-2ea1-11e6-8284-51f57789c56b","method":{"position":"org.apache.commons.lang3.mutable.MutableByte:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj instanceof org.apache.commons.lang3.mutable.MutableByte) {\n                return (byte) == (((org.apache.commons.lang3.mutable.MutableByte)(obj)).byteValue());\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"locale":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:596","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"0b5cc43e-2ea1-11e6-8284-fb31c3f61d86","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:473","type":"CtMethodImpl","sourcecode":"protected java.lang.StringBuffer applyRules(final java.util.Calendar calendar, final java.lang.StringBuffer buf) {\n    if (buf == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final org.apache.commons.lang3.time.FastDatePrinter.Rule org.apache.commons.lang3.time.FastDatePrinter.Rule : org.apache.commons.lang3.time.FastDatePrinter.Rule[]) {\n                rule.appendTo(buf, calendar);\n            }\n            return buf;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"buf"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:451","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[183,183,184,185,186],"tindex":"0b5cc43f-2ea1-11e6-8284-c595fe2193d8","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:1008","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder appendToString(final java.lang.String toString) {\n    if (toString == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (toString != null) {\n                org.apache.commons.lang3.builder.ToStringStyle.appendToString(java.lang.StringBuffer, toString);\n            } \n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"toString"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.CharSet:139","type":"CtBinaryOperatorImpl","sourcecode":"setStrs == null"},"failures":[187],"tindex":"0b5ceb50-2ea1-11e6-8284-7b0f98ed39d6","method":{"position":"org.apache.commons.lang3.reflect.ConstructorUtils:140","type":"CtMethodImpl","sourcecode":"public static <T>T invokeExactConstructor(final java.lang.Class<T> cls, java.lang.Object... args) throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (args == null) {\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            final java.lang.Class<?>[] java.lang.Class<?>[] = org.apache.commons.lang3.ClassUtils.toClass(args);\n            return org.apache.commons.lang3.reflect.ConstructorUtils.invokeExactConstructor(cls, args, parameterTypes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"setStrs":"args"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5553","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(padStr)"},"failures":[],"tindex":"0b5ceb51-2ea1-11e6-8284-058d08828cf2","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:304","type":"CtMethodImpl","sourcecode":"private java.text.Format getFormat(final java.lang.String desc) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(desc)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.util.Map<java.lang.String, ? extends org.apache.commons.lang3.text.FormatFactory>) != null) {\n                java.lang.String java.lang.String = desc;\n                java.lang.String java.lang.String = null;\n                final int int = desc.indexOf(org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char);\n                if (i > 0) {\n                    name = desc.substring(0, i).trim();\n                    args = desc.substring((i + 1)).trim();\n                } \n                final org.apache.commons.lang3.text.FormatFactory org.apache.commons.lang3.text.FormatFactory = java.util.Map<java.lang.String, ? extends org.apache.commons.lang3.text.FormatFactory>.get(name);\n                if (factory != null) {\n                    return factory.getFormat(name, args, getLocale());\n                } \n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"padStr":"desc"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:675","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"0b5ceb52-2ea1-11e6-8284-6dbf522dd177","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1195","type":"CtMethodImpl","sourcecode":"protected void appendSummary(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final byte[] array) {\n    if (fieldName == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendSummarySize(buffer, fieldName, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2805","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[188],"tindex":"0b5d1263-2ea1-11e6-8284-47e09dbc56b1","method":{"position":"org.apache.commons.lang3.StringUtils:524","type":"CtMethodImpl","sourcecode":"public static java.lang.String stripToNull(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.lang3.StringUtils.strip(str, null);\n            return str.isEmpty() ? null : str;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:297","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[189],"tindex":"0b5d1264-2ea1-11e6-8284-539ebc8caf20","method":{"position":"org.apache.commons.lang3.StringUtils:6135","type":"CtMethodImpl","sourcecode":"public static boolean isAllLowerCase(final java.lang.CharSequence cs) {\n    if (cs == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((cs == null) || (org.apache.commons.lang3.StringUtils.isEmpty(cs))) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if ((java.lang.Character.isLowerCase(cs.charAt(i))) == false) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"cs"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:907","type":"CtInvocationImpl","sourcecode":"toClass.isPrimitive()"},"failures":[],"tindex":"0b5d1265-2ea1-11e6-8284-836a94b865c4","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:530","type":"CtMethodImpl","sourcecode":"public static void writeStaticField(final java.lang.Class<?> cls, final java.lang.String fieldName, final java.lang.Object value) throws java.lang.IllegalAccessException {\n    if (cls.isPrimitive()) {\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            org.apache.commons.lang3.reflect.FieldUtils.writeStaticField(cls, fieldName, value, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toClass":"cls"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:173","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[190],"tindex":"0b5d3976-2ea1-11e6-8284-65b19aff7eff","method":{"position":"org.apache.commons.lang3.tuple.Triple:157","type":"CtMethodImpl","sourcecode":"public java.lang.String toString(final java.lang.String format) {\n    if (format == null) {\n        {\n            return java.lang.String.format(format, getLeft(), getMiddle(), getRight());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"format"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:656","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"0b5d3977-2ea1-11e6-8284-5f09e400e3ed","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:461","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setSizeStartText(final java.lang.String sizeStartText) {\n    if (sizeStartText == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            super.setSizeStartText(sizeStartText);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"sizeStartText"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:823","type":"CtBinaryOperatorImpl","sourcecode":"fraction == null"},"failures":[191],"tindex":"0b5d3978-2ea1-11e6-8284-91367a144738","method":{"position":"org.apache.commons.lang3.math.Fraction:712","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.math.Fraction add(final org.apache.commons.lang3.math.Fraction fraction) {\n    if (fraction == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return addSub(fraction, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fraction":"fraction"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:466","type":"CtBinaryOperatorImpl","sourcecode":"bool == null"},"failures":[192],"tindex":"0b5d3979-2ea1-11e6-8284-a949a4262388","method":{"position":"org.apache.commons.lang3.BooleanUtils:426","type":"CtMethodImpl","sourcecode":"public static java.lang.Integer toIntegerObject(final java.lang.Boolean bool) {\n    if (bool == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bool == null) {\n                return null;\n            } \n            return bool.booleanValue() ? org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.java.lang.Integer : org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.java.lang.Integer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"bool"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:981","type":"CtBinaryOperatorImpl","sourcecode":"field == (java.util.Calendar.SECOND)"},"failures":[],"tindex":"0b5d608a-2ea1-11e6-8284-4f7eb91a49cd","method":{"position":"org.apache.commons.lang3.ArrayUtils:2106","type":"CtMethodImpl","sourcecode":"public static int indexOf(final int[] array, final int valueToFind) {\n    if (valueToFind == valueToFind) {\n        {\n            return org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind, 0);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Calendar.SECOND":"valueToFind","field":"valueToFind"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2228","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[193],"tindex":"0b5d608b-2ea1-11e6-8284-09b7543e65fe","method":{"position":"org.apache.commons.lang3.text.StrBuilder:233","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder ensureCapacity(final int capacity) {\n    if (capacity < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (capacity > (char[].int)) {\n                final char[] char[] = char[];\n                char[] = new char[capacity * 2];\n                java.lang.System.arraycopy(old, 0, char[], 0, int);\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"capacity"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:1060","type":"CtBinaryOperatorImpl","sourcecode":"(chars) == null"},"failures":[194],"tindex":"0b5d608c-2ea1-11e6-8284-1b5c604259d8","method":{"position":"org.apache.commons.lang3.ArrayUtils:1299","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final char[] array1, final char[] array2) {\n    if (array1 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chars":"array1"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.NoSuchMethodException","condition":{"position":"org.apache.commons.lang3.JavaVersion:146","type":"CtInvocationImpl","sourcecode":"\"1.7\".equals(nom)"},"failures":[195],"tindex":"0b5d879d-2ea1-11e6-8284-cf9ea61861be","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:283","type":"CtMethodImpl","sourcecode":"public static java.lang.Object invokeStaticMethod(final java.lang.Class<?> cls, final java.lang.String methodName, java.lang.Object[] args, java.lang.Class<?>[] parameterTypes) throws java.lang.IllegalAccessException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (\"1.7\".equals(methodName)) {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            parameterTypes = org.apache.commons.lang3.ArrayUtils.nullToEmpty(parameterTypes);\n            final java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.getMatchingAccessibleMethod(cls, methodName, parameterTypes);\n            if (method == null) {\n                throw new java.lang.NoSuchMethodException((((\"No such accessible method: \" + methodName) + \"() on class: \") + (cls.getName())));\n            } \n            return method.invoke(null, args);\n        }\n    } else {\n        throw new java.lang.NoSuchMethodException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nom":"methodName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:119","type":"CtBinaryOperatorImpl","sourcecode":"codepoint > 255"},"failures":[196],"tindex":"0b5d879e-2ea1-11e6-8284-7f682df9f766","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2145","type":"CtMethodImpl","sourcecode":"public java.lang.String substring(final int start) {\n    if (start > 255) {\n        {\n            return substring(start, int);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"codepoint":"start"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDateParser:463","type":"CtBinaryOperatorImpl","sourcecode":"(formatField.length()) > 2"},"failures":[197],"tindex":"0b5d879f-2ea1-11e6-8284-ade7703d9ac3","method":{"position":"org.apache.commons.lang3.Range:475","type":"CtMethodImpl","sourcecode":"public java.lang.String toString(final java.lang.String format) {\n    if ((format.length()) > 2) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.String.format(format, T, T, java.util.Comparator<T>);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"formatField":"format"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:931","type":"CtBinaryOperatorImpl","sourcecode":"(toProperString) == null"},"failures":[198],"tindex":"0b5daeb0-2ea1-11e6-8284-abec68d88722","method":{"position":"org.apache.commons.lang3.StringUtils:5050","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String chomp(final java.lang.String str, final java.lang.String separator) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.removeEnd(str, separator);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toProperString":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1364","type":"CtBinaryOperatorImpl","sourcecode":"length >= 0"},"failures":[199,200],"tindex":"0b5daeb1-2ea1-11e6-8284-857cf53fb6d2","method":{"position":"org.apache.commons.lang3.Validate:687","type":"CtMethodImpl","sourcecode":"public static <T extends java.util.Collection<?>>T validIndex(final T collection, final int index, final java.lang.String message, final java.lang.Object... values) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(message)) || (index == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index >= 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.lang3.Validate.notNull(collection);\n                    if ((index < 0) || (index >= (collection.size()))) {\n                        throw new java.lang.IndexOutOfBoundsException(java.lang.String.format(message, values));\n                    } \n                    return collection;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3765","type":"CtBinaryOperatorImpl","sourcecode":"array2 == null"},"failures":[201,202,203,204],"tindex":"0b5daeb2-2ea1-11e6-8284-bf4af17a8f59","method":{"position":"org.apache.commons.lang3.ArrayUtils:450","type":"CtMethodImpl","sourcecode":"public static boolean[] clone(final boolean[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } \n            return array.clone();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array2":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:419","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[205,206],"tindex":"0b5daeb3-2ea1-11e6-8284-21373dce2d1e","method":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:155","type":"CtMethodImpl","sourcecode":"public static double max(final double[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                throw new java.lang.IllegalArgumentException(\"The Array must not be null\");\n            } else if ((array.int) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Array cannot be empty.\");\n            } \n            double double = array[0];\n            for (int int = 1 ; j < (array.int) ; j++) {\n                max = org.apache.commons.lang3.math.IEEE754rUtils.max(array[j], max);\n            }\n            return max;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:599","type":"CtBinaryOperatorImpl","sourcecode":"k == 31"},"failures":[],"tindex":"0b5dd5c4-2ea1-11e6-8284-d9f3a283b864","method":{"position":"org.apache.commons.lang3.time.DateUtils:700","type":"CtMethodImpl","sourcecode":"public static java.util.Date round(final java.util.Date date, final int field) {\n    if (field == 31) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n            gval.setTime(date);\n            org.apache.commons.lang3.time.DateUtils.modify(gval, field, org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int);\n            return gval.getTime();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"k":"field"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3092","type":"CtBinaryOperatorImpl","sourcecode":"match || preserveAllTokens"},"failures":[],"tindex":"0b5dd5c5-2ea1-11e6-8284-c56d2f21d595","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setDefaultFullDetail(final boolean defaultFullDetail) {\n    if (defaultFullDetail || defaultFullDetail) {\n        {\n            super.setDefaultFullDetail(defaultFullDetail);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"preserveAllTokens":"defaultFullDetail","match":"defaultFullDetail"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:286","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.StringUtils.isEmpty(str)) || (delimLen == 0)"},"failures":[],"tindex":"0b5dd5c6-2ea1-11e6-8284-75abd2571102","method":{"position":"org.apache.commons.lang3.Validate:687","type":"CtMethodImpl","sourcecode":"public static <T extends java.util.Collection<?>>T validIndex(final T collection, final int index, final java.lang.String message, final java.lang.Object... values) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(message)) || (index == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index >= 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.lang3.Validate.notNull(collection);\n                    if ((index < 0) || (index >= (collection.size()))) {\n                        throw new java.lang.IndexOutOfBoundsException(java.lang.String.format(message, values));\n                    } \n                    return collection;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"message","delimLen":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:517","type":"CtBinaryOperatorImpl","sourcecode":"classArray == null"},"failures":[],"tindex":"0b5dfcd7-2ea1-11e6-8284-3da35824fb39","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1406","type":"CtMethodImpl","sourcecode":"private static java.lang.reflect.Type[] unrollBounds(final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeArguments, final java.lang.reflect.Type[] bounds) {\n    if (bounds == null) {\n        {\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = bounds;\n            int int = 0;\n            for ( ; i < (result.int) ; i++) {\n                final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(typeArguments, result[i]);\n                if (unrolled == null) {\n                    result = org.apache.commons.lang3.ArrayUtils.remove(result, (i--));\n                } else {\n                    result[i] = unrolled;\n                }\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classArray":"bounds"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.AnnotationUtils:267","type":"CtBinaryOperatorImpl","sourcecode":"(o1 == null) || (o2 == null)"},"failures":[207],"tindex":"0b5dfcd8-2ea1-11e6-8284-5f64b380d2ba","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:230","type":"CtMethodImpl","sourcecode":"public static java.lang.String replaceSystemProperties(final java.lang.Object source) {\n    if ((source == null) || (source == null)) {\n        {\n            return new org.apache.commons.lang3.text.StrSubstitutor(org.apache.commons.lang3.text.StrLookup.systemPropertiesLookup()).replace(source);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o1":"source","o2":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1433","type":"CtBinaryOperatorImpl","sourcecode":"(((nHexs - 1) * 4) + srcPos) >= 32"},"failures":[53,59,60,67,73,74,133,134,135,136,139,141,142,143,148,152],"tindex":"0b5dfcd9-2ea1-11e6-8284-ad643e64f68e","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:990","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final void appendTo(final java.lang.StringBuffer buffer, final int value) {\n    if ((((value - 1) * 4) + value) >= 32) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(((char)((value / 10) + '0')));\n            buffer.append(((char)((value % 10) + '0')));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcPos":"value","nHexs":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:623","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"0b5e23ea-2ea1-11e6-8284-03b2c2a383ca","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:652","type":"CtMethodImpl","sourcecode":"public boolean replaceIn(java.lang.StringBuilder source) {\n    if (source == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return false;\n            } \n            return replaceIn(source, 0, source.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:173","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"0b5e23eb-2ea1-11e6-8284-c1f961c4ce65","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final void applyPattern(final java.lang.String pattern) {\n    if (pattern == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.util.Map<java.lang.String, ? extends org.apache.commons.lang3.text.FormatFactory>) == null) {\n                super.applyPattern(pattern);\n                java.lang.String = super.toPattern();\n                return ;\n            } \n            final java.util.ArrayList<java.text.Format> java.util.ArrayList<java.text.Format> = new java.util.ArrayList<java.text.Format>();\n            final java.util.ArrayList<java.lang.String> java.util.ArrayList<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(pattern.length());\n            final java.text.ParsePosition java.text.ParsePosition = new java.text.ParsePosition(0);\n            final char[] char[] = pattern.toCharArray();\n            int int = 0;\n            while ((pos.getIndex()) < (pattern.length())) {\n                switch (c[pos.getIndex()]) {\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        appendQuotedString(pattern, pos, stripCustom, true);\n                        break;\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        fmtCount++;\n                        seekNonWs(pattern, pos);\n                        final int int = pos.getIndex();\n                        final int int = readArgumentIndex(pattern, next(pos));\n                        stripCustom.append(org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char).append(index);\n                        seekNonWs(pattern, pos);\n                        java.text.Format java.text.Format = null;\n                        java.lang.String java.lang.String = null;\n                        if ((c[pos.getIndex()]) == (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char)) {\n                            formatDescription = parseFormatDescription(pattern, next(pos));\n                            format = getFormat(formatDescription);\n                            if (format == null) {\n                                stripCustom.append(org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char).append(formatDescription);\n                            } \n                        } \n                        foundFormats.add(format);\n                        foundDescriptions.add((format == null ? null : formatDescription));\n                        org.apache.commons.lang3.Validate.isTrue(((foundFormats.size()) == fmtCount));\n                        org.apache.commons.lang3.Validate.isTrue(((foundDescriptions.size()) == fmtCount));\n                        if ((c[pos.getIndex()]) != (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char)) {\n                            throw new java.lang.IllegalArgumentException((\"Unreadable format element at position \" + start));\n                        } \n                    default :\n                        stripCustom.append(c[pos.getIndex()]);\n                        next(pos);\n                }\n            }\n            super.applyPattern(stripCustom.toString());\n            java.lang.String = insertFormats(super.toPattern(), foundDescriptions);\n            if (containsElements(foundFormats)) {\n                final java.text.Format[] java.text.Format[] = getFormats();\n                int int = 0;\n                for (final java.util.Iterator<java.text.Format> java.util.Iterator<java.text.Format> = foundFormats.iterator() ; it.hasNext() ; i++) {\n                    final java.text.Format java.text.Format = it.next();\n                    if (f != null) {\n                        origFormats[i] = f;\n                    } \n                }\n                super.setFormats(origFormats);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"pattern"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.ClassNotFoundException","condition":{"position":"org.apache.commons.lang3.StringUtils:4805","type":"CtUnaryOperatorImpl","sourcecode":"!repeat"},"failures":[],"tindex":"0b5e4afc-2ea1-11e6-8284-71a4f4b9c99e","method":{"position":"org.apache.commons.lang3.ClassUtils:891","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getClass(final java.lang.String className, final boolean initialize) throws java.lang.ClassNotFoundException {\n    if (!initialize) {\n        throw new java.lang.ClassNotFoundException();\n    } else {\n        {\n            final java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread.currentThread().getContextClassLoader();\n            final java.lang.ClassLoader java.lang.ClassLoader = contextCL == null ? org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.lang.Class.getClassLoader() : contextCL;\n            return org.apache.commons.lang3.ClassUtils.getClass(loader, className, initialize);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"repeat":"initialize"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:517","type":"CtBinaryOperatorImpl","sourcecode":"classArray == null"},"failures":[208],"tindex":"0b5e4afd-2ea1-11e6-8284-47957932b8d6","method":{"position":"org.apache.commons.lang3.ClassUtils:727","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?>[] primitivesToWrappers(final java.lang.Class<?>... classes) {\n    if (classes == null) {\n        {\n            if (classes == null) {\n                return null;\n            } \n            if ((classes.int) == 0) {\n                return classes;\n            } \n            final java.lang.Class<?>[] java.lang.Class<?>[] = new java.lang.Class[classes.int];\n            for (int int = 0 ; i < (classes.int) ; i++) {\n                convertedClasses[i] = org.apache.commons.lang3.ClassUtils.primitiveToWrapper(classes[i]);\n            }\n            return convertedClasses;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classArray":"classes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2129","type":"CtBinaryOperatorImpl","sourcecode":"endIndex > (size)"},"failures":[209,210,211,212,213,214],"tindex":"0b5e4afe-2ea1-11e6-8284-1bcd92da3144","method":{"position":"org.apache.commons.lang3.BitField:94","type":"CtMethodImpl","sourcecode":"public int getRawValue(final int holder) {\n    if (holder > holder) {\n        {\n            return holder & (int);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"holder","endIndex":"holder"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:837","type":"CtBinaryOperatorImpl","sourcecode":"(((nBytes - 1) * 8) + dstPos) >= 32"},"failures":[],"tindex":"0b5e720f-2ea1-11e6-8284-619c34992dc0","method":{"position":"org.apache.commons.lang3.Conversion:869","type":"CtMethodImpl","sourcecode":"public static short byteArrayToShort(final byte[] src, final int srcPos, final short dstInit, final int dstPos, final int nBytes) {\n    if ((((nBytes - 1) * 8) + srcPos) >= 32) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((((src.int) == 0) && (srcPos == 0)) || (0 == nBytes)) {\n                return dstInit;\n            } \n            if ((((nBytes - 1) * 8) + dstPos) >= 16) {\n                throw new java.lang.IllegalArgumentException(\"(nBytes-1)*8+dstPos is greather or equal to than 16\");\n            } \n            short short = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nBytes ; i++) {\n                shift = (i * 8) + dstPos;\n                final int int = (255 & (src[(i + srcPos)])) << shift;\n                final int int = 255 << shift;\n                out = ((short)((out & (~mask)) | bits));\n            }\n            return out;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"srcPos","nBytes":"nBytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3184","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[215],"tindex":"0b5e7210-2ea1-11e6-8284-71eaa7ea7cd7","method":{"position":"org.apache.commons.lang3.ArrayUtils:732","type":"CtMethodImpl","sourcecode":"public static java.lang.Short[] nullToEmpty(final java.lang.Short[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Short[];\n            } \n            return array;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1749","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[203],"tindex":"0b5e7211-2ea1-11e6-8284-65a4245b0a93","method":{"position":"org.apache.commons.lang3.ArrayUtils:3878","type":"CtMethodImpl","sourcecode":"public static int[] addAll(final int[] array1, final int... array2) {\n    if (array2 == null) {\n        {\n            if (array1 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array2);\n            } else if (array2 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array1);\n            } \n            final int[] int[] = new int[(array1.int) + (array2.int)];\n            java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n            java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n            return joinedArray;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.NoSuchMethodException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:591","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"0b5e9922-2ea1-11e6-8284-0702f888a81a","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:316","type":"CtMethodImpl","sourcecode":"public static java.lang.Object invokeExactStaticMethod(final java.lang.Class<?> cls, final java.lang.String methodName, java.lang.Object... args) throws java.lang.IllegalAccessException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (methodName == null) {\n        throw new java.lang.NoSuchMethodException();\n    } else {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            final java.lang.Class<?>[] java.lang.Class<?>[] = org.apache.commons.lang3.ClassUtils.toClass(args);\n            return org.apache.commons.lang3.reflect.MethodUtils.invokeExactStaticMethod(cls, methodName, args, parameterTypes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"methodName"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1358","type":"CtBinaryOperatorImpl","sourcecode":"0 == nBytes"},"failures":[216],"tindex":"0b5e9923-2ea1-11e6-8284-953d2e0fdb63","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1635","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, final long value) {\n    if (0 == index) {\n        {\n            return insert(index, java.lang.String.valueOf(value));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBytes":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1886","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isHighSurrogate(ch)"},"failures":[],"tindex":"0b5e9924-2ea1-11e6-8284-1d4e84c29ef2","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:642","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final char value) {\n    if (java.lang.Character.isHighSurrogate(value)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int = ((int) * (int)) + value;\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Range:351","type":"CtBinaryOperatorImpl","sourcecode":"otherRange == null"},"failures":[],"tindex":"0b5e9925-2ea1-11e6-8284-b19f78b90592","method":{"position":"org.apache.commons.lang3.Range:314","type":"CtMethodImpl","sourcecode":"public boolean containsRange(final org.apache.commons.lang3.Range<T> otherRange) {\n    if (otherRange == null) {\n        {\n            if (otherRange == null) {\n                {\n                    if (otherRange == null) {\n                        return false;\n                    } \n                    return (contains(otherRange.T)) && (contains(otherRange.T));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"otherRange":"otherRange"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5080","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[217],"tindex":"0b5ec036-2ea1-11e6-8284-4ff650f1a631","method":{"position":"org.apache.commons.lang3.StringUtils:5686","type":"CtMethodImpl","sourcecode":"public static java.lang.String capitalize(final java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int;\n            if ((str == null) || ((strLen = str.length()) == 0)) {\n                return str;\n            } \n            char char = str.charAt(0);\n            if (java.lang.Character.isTitleCase(firstChar)) {\n                return str;\n            } \n            return new java.lang.StringBuilder(strLen).append(java.lang.Character.toTitleCase(firstChar)).append(str.substring(1)).toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:469","type":"CtFieldReadImpl","sourcecode":"objectsTriviallyEqual"},"failures":[218,154,219],"tindex":"0b5ec037-2ea1-11e6-8284-2994bc36ab22","method":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:415","type":"CtMethodImpl","sourcecode":"static java.lang.String format(final org.apache.commons.lang3.time.DurationFormatUtils.Token[] tokens, final long years, final long months, final long days, final long hours, final long minutes, final long seconds, long milliseconds, final boolean padWithZeros) {\n    if (padWithZeros) {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            boolean boolean = false;\n            final int int = tokens.int;\n            for (int int = 0 ; i < sz ; i++) {\n                final org.apache.commons.lang3.time.DurationFormatUtils.Token org.apache.commons.lang3.time.DurationFormatUtils.Token = tokens[i];\n                final java.lang.Object java.lang.Object = token.getValue();\n                final int int = token.getCount();\n                if (value instanceof java.lang.StringBuilder) {\n                    buffer.append(value.toString());\n                } else {\n                    if (value == (org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object)) {\n                        buffer.append(org.apache.commons.lang3.time.DurationFormatUtils.paddedValue(years, padWithZeros, count));\n                        lastOutputSeconds = false;\n                    } else if (value == (org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object)) {\n                        buffer.append(org.apache.commons.lang3.time.DurationFormatUtils.paddedValue(months, padWithZeros, count));\n                        lastOutputSeconds = false;\n                    } else if (value == (org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object)) {\n                        buffer.append(org.apache.commons.lang3.time.DurationFormatUtils.paddedValue(days, padWithZeros, count));\n                        lastOutputSeconds = false;\n                    } else if (value == (org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object)) {\n                        buffer.append(org.apache.commons.lang3.time.DurationFormatUtils.paddedValue(hours, padWithZeros, count));\n                        lastOutputSeconds = false;\n                    } else if (value == (org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object)) {\n                        buffer.append(org.apache.commons.lang3.time.DurationFormatUtils.paddedValue(minutes, padWithZeros, count));\n                        lastOutputSeconds = false;\n                    } else if (value == (org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object)) {\n                        buffer.append(org.apache.commons.lang3.time.DurationFormatUtils.paddedValue(seconds, padWithZeros, count));\n                        lastOutputSeconds = true;\n                    } else if (value == (org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object)) {\n                        if (lastOutputSeconds) {\n                            int int = padWithZeros ? java.lang.Math.max(3, count) : 3;\n                            buffer.append(org.apache.commons.lang3.time.DurationFormatUtils.paddedValue(milliseconds, true, width));\n                        } else {\n                            buffer.append(org.apache.commons.lang3.time.DurationFormatUtils.paddedValue(milliseconds, padWithZeros, count));\n                        }\n                        lastOutputSeconds = false;\n                    } \n                }\n            }\n            return buffer.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectsTriviallyEqual":"padWithZeros"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3108","type":"CtBinaryOperatorImpl","sourcecode":"(separatorChars.length()) == 1"},"failures":[220],"tindex":"0b5ee748-2ea1-11e6-8284-69a97a30188f","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:214","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.StrTokenizer getTSVInstance(final java.lang.String input) {\n    if ((input.length()) == 1) {\n        {\n            final org.apache.commons.lang3.text.StrTokenizer org.apache.commons.lang3.text.StrTokenizer = org.apache.commons.lang3.text.StrTokenizer.getTSVClone();\n            tok.reset(input);\n            return tok;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separatorChars":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3298","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[221],"tindex":"0b5ee749-2ea1-11e6-8284-119b45505296","method":{"position":"org.apache.commons.lang3.ArrayUtils:792","type":"CtMethodImpl","sourcecode":"public static java.lang.Double[] nullToEmpty(final java.lang.Double[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Double[];\n            } \n            return array;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSet:186","type":"CtBinaryOperatorImpl","sourcecode":"(remainder >= 3) && ((str.charAt((pos + 1))) == '-')"},"failures":[222],"tindex":"0b5ee74a-2ea1-11e6-8284-654d37736dfd","method":{"position":"org.apache.commons.lang3.Conversion:1429","type":"CtMethodImpl","sourcecode":"public static java.lang.String intToHex(final int src, final int srcPos, final java.lang.String dstInit, final int dstPos, final int nHexs) {\n    if ((nHexs >= 3) && ((dstInit.charAt((dstPos + 1))) == '-')) {\n        {\n            if (0 == nHexs) {\n                return dstInit;\n            } \n            if ((((nHexs - 1) * 4) + srcPos) >= 32) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+srcPos is greather or equal to than 32\");\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(dstInit);\n            int int = 0;\n            int int = sb.length();\n            for (int int = 0 ; i < nHexs ; i++) {\n                shift = (i * 4) + srcPos;\n                final int int = 15 & (src >> shift);\n                if ((dstPos + i) == append) {\n                    ++append;\n                    sb.append(org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                } else {\n                    sb.setCharAt((dstPos + i), org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                }\n            }\n            return sb.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"dstInit","pos":"dstPos","remainder":"nHexs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1891","type":"CtBinaryOperatorImpl","sourcecode":"searchLen > 0"},"failures":[166,167,223,168,224,169,170,225,171,226,227,228,172,173,207,229,230,231,174,232,233,175,234,235,176,236,177,237,238,178,239,240,241],"tindex":"0b5f0e5b-2ea1-11e6-8284-9bbdc4801022","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:734","type":"CtMethodImpl","sourcecode":"protected boolean substitute(final org.apache.commons.lang3.text.StrBuilder buf, final int offset, final int length) {\n    if (length > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (substitute(buf, offset, length, null)) > 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"searchLen":"length"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSequenceUtils:200","type":"CtBinaryOperatorImpl","sourcecode":"c1 == c2"},"failures":[],"tindex":"0b5f0e5c-2ea1-11e6-8284-3181d0594ca6","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1057","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrSubstitutor setVariableSuffix(final char suffix) {\n    if (suffix == suffix) {\n        {\n            return setVariableSuffixMatcher(org.apache.commons.lang3.text.StrMatcher.charMatcher(suffix));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c1":"suffix","c2":"suffix"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3763","type":"CtBinaryOperatorImpl","sourcecode":"array1 == null"},"failures":[242],"tindex":"0b5f0e5d-2ea1-11e6-8284-633105bb3007","method":{"position":"org.apache.commons.lang3.ArrayUtils:3477","type":"CtMethodImpl","sourcecode":"public static java.lang.Boolean[] toObject(final boolean[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Boolean[];\n            } \n            final java.lang.Boolean[] java.lang.Boolean[] = new java.lang.Boolean[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = array[i] ? java.lang.Boolean.java.lang.Boolean.java.lang.Boolean : java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:934","type":"CtBinaryOperatorImpl","sourcecode":"(numerator) == (denominator)"},"failures":[4,243],"tindex":"0b5f356e-2ea1-11e6-8284-f1ae8618e0fc","method":{"position":"org.apache.commons.lang3.concurrent.BasicThreadFactory:330","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.concurrent.BasicThreadFactory.Builder priority(final int prio) {\n    if (prio == prio) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Integer = java.lang.Integer.valueOf(prio);\n            return org.apache.commons.lang3.concurrent.BasicThreadFactory.Builder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"numerator":"prio","denominator":"prio"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:606","type":"CtBinaryOperatorImpl","sourcecode":"c == (java.lang.Character.MIN_VALUE)"},"failures":[244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275],"tindex":"0b5f356f-2ea1-11e6-8284-03b0f9c45419","method":{"position":"org.apache.commons.lang3.CharRange:113","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.CharRange isIn(final char start, final char end) {\n    if (end == end) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.lang3.CharRange(start , end , false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"end","java.lang.Character.MIN_VALUE":"end"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:312","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Character.isWhitespace(cs.charAt(i))) == false"},"failures":[],"tindex":"0b5f3570-2ea1-11e6-8284-d5592e13db2f","method":{"position":"org.apache.commons.lang3.time.DateUtils:1245","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<?> iterator(final java.lang.Object focus, final int rangeStyle) {\n    if ((java.lang.Character.isWhitespace(focus.charAt(rangeStyle))) == false) {\n        {\n            if (focus == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            if (focus instanceof java.util.Date) {\n                return org.apache.commons.lang3.time.DateUtils.iterator(((java.util.Date)(focus)), rangeStyle);\n            } else if (focus instanceof java.util.Calendar) {\n                return org.apache.commons.lang3.time.DateUtils.iterator(((java.util.Calendar)(focus)), rangeStyle);\n            } else {\n                throw new java.lang.ClassCastException((\"Could not iterate based on \" + focus));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"focus","i":"rangeStyle"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:496","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"0b5f5c81-2ea1-11e6-8284-a136d971cfae","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if (buffer == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (calendar.get(java.util.Calendar.java.util.Calendar.int)) + (calendar.get(java.util.Calendar.java.util.Calendar.int));\n            if (offset < 0) {\n                buffer.append('-');\n                offset = -offset;\n            } else {\n                buffer.append('+');\n            }\n            final int int = offset / ((60 * 60) * 1000);\n            buffer.append(((char)((hours / 10) + '0')));\n            buffer.append(((char)((hours % 10) + '0')));\n            if (boolean) {\n                buffer.append(':');\n            } \n            final int int = (offset / (60 * 1000)) - (60 * hours);\n            buffer.append(((char)((minutes / 10) + '0')));\n            buffer.append(((char)((minutes % 10) + '0')));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"buffer"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:4575","type":"CtBinaryOperatorImpl","sourcecode":"index < length"},"failures":[276,277,278,279,280],"tindex":"0b5f5c82-2ea1-11e6-8284-17c3edbfa065","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1969","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder replace(final org.apache.commons.lang3.text.StrMatcher matcher, final java.lang.String replaceStr, final int startIndex, int endIndex, final int replaceCount) {\n    if (startIndex < endIndex) {\n        {\n            endIndex = validateRange(startIndex, endIndex);\n            return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"endIndex","index":"startIndex"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:778","type":"CtBinaryOperatorImpl","sourcecode":"classes == null"},"failures":[],"tindex":"0b5f5c83-2ea1-11e6-8284-61f43f65fa52","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:199","type":"CtMethodImpl","sourcecode":"public static int reflectionCompare(final java.lang.Object lhs, final java.lang.Object rhs, final java.util.Collection<java.lang.String> excludeFields) {\n    if (rhs == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.CompareToBuilder.reflectionCompare(lhs, rhs, org.apache.commons.lang3.builder.ReflectionToStringBuilder.toNoNullStringArray(excludeFields));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classes":"rhs"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1501","type":"CtBinaryOperatorImpl","sourcecode":"strLen > 0"},"failures":[281,282,283],"tindex":"0b5f8394-2ea1-11e6-8284-832df46d04ba","method":{"position":"org.apache.commons.lang3.StringUtils:3071","type":"CtMethodImpl","sourcecode":"private static java.lang.String[] splitWorker(final java.lang.String str, final java.lang.String separatorChars, final int max, final boolean preserveAllTokens) {\n    if (max > max) {\n        {\n            if (max > 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    final int int = str.length();\n                    if (len == 0) {\n                        return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.String[];\n                    } \n                    final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n                    int int = 1;\n                    int int = 0;\n                    int int = 0;\n                    boolean boolean = false;\n                    boolean boolean = false;\n                    if (separatorChars == null) {\n                        while (i < len) {\n                            if (java.lang.Character.isWhitespace(str.charAt(i))) {\n                                if (match || preserveAllTokens) {\n                                    lastMatch = true;\n                                    if ((sizePlus1++) == max) {\n                                        i = len;\n                                        lastMatch = false;\n                                    } \n                                    list.add(str.substring(start, i));\n                                    match = false;\n                                } \n                                start = ++i;\n                                continue;\n                            } \n                            lastMatch = false;\n                            match = true;\n                            i++;\n                        }\n                    } else if ((separatorChars.length()) == 1) {\n                        final char char = separatorChars.charAt(0);\n                        while (i < len) {\n                            if ((str.charAt(i)) == sep) {\n                                if (match || preserveAllTokens) {\n                                    lastMatch = true;\n                                    if ((sizePlus1++) == max) {\n                                        i = len;\n                                        lastMatch = false;\n                                    } \n                                    list.add(str.substring(start, i));\n                                    match = false;\n                                } \n                                start = ++i;\n                                continue;\n                            } \n                            lastMatch = false;\n                            match = true;\n                            i++;\n                        }\n                    } else {\n                        while (i < len) {\n                            if ((separatorChars.indexOf(str.charAt(i))) >= 0) {\n                                if (match || preserveAllTokens) {\n                                    lastMatch = true;\n                                    if ((sizePlus1++) == max) {\n                                        i = len;\n                                        lastMatch = false;\n                                    } \n                                    list.add(str.substring(start, i));\n                                    match = false;\n                                } \n                                start = ++i;\n                                continue;\n                            } \n                            lastMatch = false;\n                            match = true;\n                            i++;\n                        }\n                    }\n                    if (match || (preserveAllTokens && lastMatch)) {\n                        list.add(str.substring(start, i));\n                    } \n                    return list.toArray(new java.lang.String[list.size()]);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strLen":"max"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:4838","type":"CtBinaryOperatorImpl","sourcecode":"index == (org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND)"},"failures":[284],"tindex":"0b5faaa5-2ea1-11e6-8284-d5815654a607","method":{"position":"org.apache.commons.lang3.text.StrBuilder:942","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final java.lang.StringBuffer str, final int startIndex, final int length) {\n    if (startIndex == startIndex) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return append(str, startIndex, length).appendNewLine();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND":"startIndex","index":"startIndex"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1496","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[285,286,287,288,289,289,290,291,292,293,294,294,295,296,297],"tindex":"0b5faaa6-2ea1-11e6-8284-2707ba590ba9","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:606","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.util.Collection<?> coll) {\n    if (fieldName == null) {\n        {\n            buffer.append(coll);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:1110","type":"CtBinaryOperatorImpl","sourcecode":"className == null"},"failures":[298,299],"tindex":"0b5faaa7-2ea1-11e6-8284-89d7e5750d5c","method":{"position":"org.apache.commons.lang3.StringUtils:7269","type":"CtMethodImpl","sourcecode":"public static boolean endsWith(final java.lang.CharSequence str, final java.lang.CharSequence suffix) {\n    if (suffix == null) {\n        {\n            return org.apache.commons.lang3.StringUtils.endsWith(str, suffix, false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"suffix"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.FieldUtils:106","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.reflect.Modifier.isPublic(field.getModifiers()))"},"failures":[],"tindex":"0b5faaa8-2ea1-11e6-8284-a9d6efdc43ae","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:661","type":"CtMethodImpl","sourcecode":"public static void removeFinalModifier(java.lang.reflect.Field field) {\n    if (!(java.lang.reflect.Modifier.isPublic(field.getModifiers()))) {\n        {\n            org.apache.commons.lang3.reflect.FieldUtils.removeFinalModifier(field, true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:514","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Arrays.equals(lhs, rhs))"},"failures":[205,206],"tindex":"0b5fd1b9-2ea1-11e6-8284-61dfc92ad10d","method":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:180","type":"CtMethodImpl","sourcecode":"public static float max(final float[] array) {\n    if (!(java.util.Arrays.equals(array, array))) {\n        {\n            if (array == null) {\n                throw new java.lang.IllegalArgumentException(\"The Array must not be null\");\n            } else if ((array.int) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Array cannot be empty.\");\n            } \n            float float = array[0];\n            for (int int = 1 ; j < (array.int) ; j++) {\n                max = org.apache.commons.lang3.math.IEEE754rUtils.max(array[j], max);\n            }\n            return max;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSetUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[300],"tindex":"0b5fd1ba-2ea1-11e6-8284-872af2ebcf4b","method":{"position":"org.apache.commons.lang3.StringUtils:7112","type":"CtMethodImpl","sourcecode":"private static int transpositions(java.lang.CharSequence first, java.lang.CharSequence second) {\n    if (second == null) {\n        {\n            int int = 0;\n            for (int int = 0 ; i < (first.length()) ; i++) {\n                if ((first.charAt(i)) != (second.charAt(i))) {\n                    transpositions++;\n                } \n            }\n            return transpositions / 2;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"second"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3366","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[301,302],"tindex":"0b5fd1bb-2ea1-11e6-8284-27c19811d239","method":{"position":"org.apache.commons.lang3.ArrayUtils:3365","type":"CtMethodImpl","sourcecode":"public static float[] toPrimitive(final java.lang.Float[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.float[];\n            } \n            final float[] float[] = new float[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = array[i].floatValue();\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4957","type":"CtBinaryOperatorImpl","sourcecode":"start > end"},"failures":[],"tindex":"0b5fd1bc-2ea1-11e6-8284-c9f839557103","method":{"position":"org.apache.commons.lang3.StringUtils:3071","type":"CtMethodImpl","sourcecode":"private static java.lang.String[] splitWorker(final java.lang.String str, final java.lang.String separatorChars, final int max, final boolean preserveAllTokens) {\n    if (max > max) {\n        {\n            if (max > 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    final int int = str.length();\n                    if (len == 0) {\n                        return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.String[];\n                    } \n                    final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n                    int int = 1;\n                    int int = 0;\n                    int int = 0;\n                    boolean boolean = false;\n                    boolean boolean = false;\n                    if (separatorChars == null) {\n                        while (i < len) {\n                            if (java.lang.Character.isWhitespace(str.charAt(i))) {\n                                if (match || preserveAllTokens) {\n                                    lastMatch = true;\n                                    if ((sizePlus1++) == max) {\n                                        i = len;\n                                        lastMatch = false;\n                                    } \n                                    list.add(str.substring(start, i));\n                                    match = false;\n                                } \n                                start = ++i;\n                                continue;\n                            } \n                            lastMatch = false;\n                            match = true;\n                            i++;\n                        }\n                    } else if ((separatorChars.length()) == 1) {\n                        final char char = separatorChars.charAt(0);\n                        while (i < len) {\n                            if ((str.charAt(i)) == sep) {\n                                if (match || preserveAllTokens) {\n                                    lastMatch = true;\n                                    if ((sizePlus1++) == max) {\n                                        i = len;\n                                        lastMatch = false;\n                                    } \n                                    list.add(str.substring(start, i));\n                                    match = false;\n                                } \n                                start = ++i;\n                                continue;\n                            } \n                            lastMatch = false;\n                            match = true;\n                            i++;\n                        }\n                    } else {\n                        while (i < len) {\n                            if ((separatorChars.indexOf(str.charAt(i))) >= 0) {\n                                if (match || preserveAllTokens) {\n                                    lastMatch = true;\n                                    if ((sizePlus1++) == max) {\n                                        i = len;\n                                        lastMatch = false;\n                                    } \n                                    list.add(str.substring(start, i));\n                                    match = false;\n                                } \n                                start = ++i;\n                                continue;\n                            } \n                            lastMatch = false;\n                            match = true;\n                            i++;\n                        }\n                    }\n                    if (match || (preserveAllTokens && lastMatch)) {\n                        list.add(str.substring(start, i));\n                    } \n                    return list.toArray(new java.lang.String[list.size()]);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"max","end":"max"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:1150","type":"CtBinaryOperatorImpl","sourcecode":"(value <= start) || (value >= end)"},"failures":[],"tindex":"0b5ff8cd-2ea1-11e6-8284-8b457a3b346d","method":{"position":"org.apache.commons.lang3.Validate:1125","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"boxing\")\npublic static void exclusiveBetween(double start, double end, double value) {\n    if ((start <= start) || (value >= value)) {\n        {\n            if ((value <= start) || (value >= end)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, value, start, end));\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"start","end":"value","value":"start"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6505","type":"CtBinaryOperatorImpl","sourcecode":"str2 == null"},"failures":[303],"tindex":"0b5ff8ce-2ea1-11e6-8284-67e16145c188","method":{"position":"org.apache.commons.lang3.StringUtils:5881","type":"CtMethodImpl","sourcecode":"public static boolean isAlphaSpace(final java.lang.CharSequence cs) {\n    if (cs == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cs == null) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if (((java.lang.Character.isLetter(cs.charAt(i))) == false) && ((cs.charAt(i)) != ' ')) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str2":"cs"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:666","type":"CtBinaryOperatorImpl","sourcecode":"clazz != null"},"failures":[304],"tindex":"0b601fdf-2ea1-11e6-8284-9febb5e78ac4","method":{"position":"org.apache.commons.lang3.ClassUtils:541","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitiveOrWrapper(final java.lang.Class<?> type) {\n    if (type != null) {\n        {\n            if (type == null) {\n                return false;\n            } \n            return (type.isPrimitive()) || (org.apache.commons.lang3.ClassUtils.isPrimitiveWrapper(type));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"clazz":"type"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1102","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[217],"tindex":"0b601fe0-2ea1-11e6-8284-7ba90fa47db4","method":{"position":"org.apache.commons.lang3.StringUtils:5724","type":"CtMethodImpl","sourcecode":"public static java.lang.String uncapitalize(final java.lang.String str) {\n    if (str == null) {\n        {\n            int int;\n            if ((str == null) || ((strLen = str.length()) == 0)) {\n                return str;\n            } \n            char char = str.charAt(0);\n            if (java.lang.Character.isLowerCase(firstChar)) {\n                return str;\n            } \n            return new java.lang.StringBuilder(strLen).append(java.lang.Character.toLowerCase(firstChar)).append(str.substring(1)).toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5308","type":"CtBinaryOperatorImpl","sourcecode":"pads <= 0"},"failures":[305,306],"tindex":"0b601fe1-2ea1-11e6-8284-8fd294166bcd","method":{"position":"org.apache.commons.lang3.StringUtils:4684","type":"CtMethodImpl","sourcecode":"private static java.lang.String replaceEach(final java.lang.String text, final java.lang.String[] searchList, final java.lang.String[] replacementList, final boolean repeat, final int timeToLive) {\n    if (timeToLive <= 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((((((text == null) || (text.isEmpty())) || (searchList == null)) || ((searchList.int) == 0)) || (replacementList == null)) || ((replacementList.int) == 0)) {\n                return text;\n            } \n            if (timeToLive < 0) {\n                throw new java.lang.IllegalStateException((\"Aborting to protect against StackOverflowError - \" + \"output of one loop is the input of another\"));\n            } \n            final int int = searchList.int;\n            final int int = replacementList.int;\n            if (searchLength != replacementLength) {\n                throw new java.lang.IllegalArgumentException((((\"Search and Replace array lengths don't match: \" + searchLength) + \" vs \") + replacementLength));\n            } \n            final boolean[] boolean[] = new boolean[searchLength];\n            int int = -1;\n            int int = -1;\n            int int = -1;\n            for (int int = 0 ; i < searchLength ; i++) {\n                if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || (searchList[i].isEmpty())) || ((replacementList[i]) == null)) {\n                    continue;\n                } \n                tempIndex = text.indexOf(searchList[i]);\n                if (tempIndex == (-1)) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if ((textIndex == (-1)) || (tempIndex < textIndex)) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    } \n                }\n            }\n            if (textIndex == (-1)) {\n                return text;\n            } \n            int int = 0;\n            int int = 0;\n            for (int int = 0 ; i < (searchList.int) ; i++) {\n                if (((searchList[i]) == null) || ((replacementList[i]) == null)) {\n                    continue;\n                } \n                final int int = (replacementList[i].length()) - (searchList[i].length());\n                if (greater > 0) {\n                    increase += 3 * greater;\n                } \n            }\n            increase = java.lang.Math.min(increase, ((text.length()) / 5));\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((text.length()) + increase));\n            while (textIndex != (-1)) {\n                for (int int = start ; i < textIndex ; i++) {\n                    buf.append(text.charAt(i));\n                }\n                buf.append(replacementList[replaceIndex]);\n                start = textIndex + (searchList[replaceIndex].length());\n                textIndex = -1;\n                replaceIndex = -1;\n                tempIndex = -1;\n                for (int int = 0 ; i < searchLength ; i++) {\n                    if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || (searchList[i].isEmpty())) || ((replacementList[i]) == null)) {\n                        continue;\n                    } \n                    tempIndex = text.indexOf(searchList[i], start);\n                    if (tempIndex == (-1)) {\n                        noMoreMatchesForReplIndex[i] = true;\n                    } else {\n                        if ((textIndex == (-1)) || (tempIndex < textIndex)) {\n                            textIndex = tempIndex;\n                            replaceIndex = i;\n                        } \n                    }\n                }\n            }\n            final int int = text.length();\n            for (int int = start ; i < textLength ; i++) {\n                buf.append(text.charAt(i));\n            }\n            final java.lang.String java.lang.String = buf.toString();\n            if (!repeat) {\n                return result;\n            } \n            return org.apache.commons.lang3.StringUtils.replaceEach(result, searchList, replacementList, repeat, (timeToLive - 1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pads":"timeToLive"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:970","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[307],"tindex":"0b6046f2-2ea1-11e6-8284-e3f79e999d54","method":{"position":"org.apache.commons.lang3.ArrayUtils:2090","type":"CtMethodImpl","sourcecode":"public static boolean contains(final long[] array, final long valueToFind) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4218","type":"CtInvocationImpl","sourcecode":"str.startsWith(remove)"},"failures":[308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329],"tindex":"0b6046f3-2ea1-11e6-8284-cba5a07afd2a","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:875","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final java.lang.Object[] lhs, final java.lang.Object[] rhs) {\n    if (fieldName.startsWith(fieldName)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (!(java.util.Arrays.equals(lhs, rhs))) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Object[]>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Object[] getLeft() {\n                        return lhs;\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Object[] getRight() {\n                        return rhs;\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName","remove":"fieldName"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:542","type":"CtBinaryOperatorImpl","sourcecode":"type == null"},"failures":[330],"tindex":"0b606e04-2ea1-11e6-8284-f17928b96f38","method":{"position":"org.apache.commons.lang3.ClassUtils:802","type":"CtMethodImpl","sourcecode":"public static boolean isInnerClass(final java.lang.Class<?> cls) {\n    if (cls == null) {\n        {\n            return (cls != null) && ((cls.getEnclosingClass()) != null);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"cls"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
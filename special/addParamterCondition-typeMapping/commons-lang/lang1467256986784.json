{"failureDictionary":{"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":266,"org.apache.commons.lang3.math.NumberUtilsTest.testLang381":315,"org.apache.commons.lang3.BooleanUtilsTest.test_toStringTrueFalse_Boolean":111,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":260,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveBooleanArray":400,"org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testOutOfBounds":68,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatUTC":130,"org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP":133,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteIntInt":420,"org.apache.commons.lang3.ArrayUtilsTest.testIsEmptyPrimitives":398,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_StrMatcher_String":236,"org.apache.commons.lang3.mutable.MutableByteTest.testSubtractValuePrimitive":314,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCode":35,"org.apache.commons.lang3.ConversionTest.testBinaryToHexDigitMsb0_4bits_2args":303,"org.apache.commons.lang3.time.FastDateParserTest.testLANG_832":181,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":7,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_AD":161,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":206,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":366,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":384,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfMonthWithDate":24,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDefaults":226,"org.apache.commons.lang3.text.translate.UnicodeUnescaperTest.testUuuuu":60,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":386,"org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterType":274,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang708":84,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDoubleWithStartIndex":393,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":203,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml10":80,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":328,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml11":81,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArrayOutOfBoundsIndex":305,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_BC":189,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":378,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":380,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":5,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArrayRemoveNone":308,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":256,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_BC":162,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testTimeZoneMatches":128,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeEcmaScript":87,"org.apache.commons.lang3.event.EventUtilsTest.testAddEventListenerWithPrivateAddMethod":405,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJavaWithSlash":79,"org.apache.commons.lang3.reflect.TypeLiteralTest.testEquals":107,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testTimeZoneMatches":166,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":352,"org.apache.commons.lang3.reflect.TypeLiteralTest.testBasic":105,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testBooleanArray":244,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":259,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringString":424,"org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected":195,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_AD":188,"org.apache.commons.lang3.text.FormattableUtilsTest.testDefaultAppend":312,"org.apache.commons.lang3.math.FractionTest.testDivide":51,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":324,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO":136,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxDouble":316,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":367,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":360,"org.apache.commons.lang3.StringEscapeUtilsTest.testStandaloneAmphersand":74,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":210,"org.apache.commons.lang3.time.FastDateParserTest.testPatternMatches":194,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace":239,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO":131,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeMethod":401,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":200,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeUnknownEntity":96,"org.apache.commons.lang3.time.FastDateParserTest.testLocaleMatches":171,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":9,"org.apache.commons.lang3.StringUtilsTest.testUnescapeSurrogatePairs":56,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testToStringContainsName":125,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":132,"org.apache.commons.lang3.time.FastDateParserTest.testShortDateStyleWithLocales":169,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":243,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":10,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":215,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear":208,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_LongNoEra_AD":186,"org.apache.commons.lang3.time.DateUtilsTest.testLang530":140,"org.apache.commons.lang3.text.FormattableUtilsTest.testAlternatePadCharAndEllipsis":276,"org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfLongs":318,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_StrMatcher":240,"org.apache.commons.lang3.text.translate.UnicodeUnescaperTest.testUPlus":59,"org.apache.commons.lang3.ClassUtilsTest.test_getSimpleName_Class":299,"org.apache.commons.lang3.time.FastDateParserTest.testDayOf":172,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":211,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":242,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":347,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementShortArray":408,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang538":152,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":371,"org.apache.commons.lang3.time.DateFormatUtilsTest.testConstructor":138,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":267,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":331,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementBooleanArray":399,"org.apache.commons.lang3.math.FractionTest.testReducedFactory_int_int":46,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":115,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testBugzilla38401":292,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBefore_StringString":17,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang720":85,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":197,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":209,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang303":151,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testBooleanMultiArray":245,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":383,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testPatternMatches":129,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHexCharsHtml":91,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters":92,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationPluralWords":291,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":341,"org.apache.commons.lang3.ArrayUtilsTest.testSameLengthLong":317,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":340,"org.apache.commons.lang3.time.FastDateParserTest.testParseLongShort":185,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_BC":160,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":346,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang303":122,"org.apache.commons.lang3.builder.CompareToBuilderTest.testByteArray":20,"org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testUnfinishedEntity":67,"org.apache.commons.lang3.StringUtilsTest.testRepeat_StringInt":251,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":241,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLocaleMatches":119,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":357,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO":135,"org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntChar":252,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":114,"org.apache.commons.lang3.text.FormattableUtilsTest.testEllipsis":278,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_AD":159,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriod":280,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsInstance":395,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang538":123,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsOnly_CharArray":249,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":377,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvString":88,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testSupplementary":65,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.test_Equality_Hash":155,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":213,"org.apache.commons.lang3.ClassUtilsTest.test_getShortClassName_Object":0,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Object":413,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBelow":63,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":334,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementByteArray":397,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHtml4":75,"org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testBelow":70,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":8,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiByteArray":21,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":6,"org.apache.commons.lang3.reflect.TypeUtilsTest.testWrap":100,"org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterize":102,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":43,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfSecondWithDate":25,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":257,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance":222,"org.apache.commons.lang3.math.FractionTest.testAdd":417,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":196,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testPatternMatches":167,"org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives":298,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsOnly_String":246,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":109,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJava":77,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":254,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":265,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":323,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArray":309,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount":235,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":338,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLexx":286,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang911":86,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_AD":156,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":201,"org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntChar":250,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvWriter":89,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullShortArray":311,"org.apache.commons.lang3.ConversionTest.testBinaryToHexDigitMsb0_bits":302,"org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testSupplementaryUnescaping":66,"org.apache.commons.lang3.time.FastDateParserTest.testAmPm":174,"org.apache.commons.lang3.text.StrBuilderTest.testTrim":419,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringCharArrayWithSupplementaryChars":247,"org.apache.commons.lang3.event.EventUtilsTest.testBindFilteredEventsToMethod":406,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":326,"org.apache.commons.lang3.time.FastDateFormatTest.testLang954":220,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testEdgeDurations":290,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_BC":157,"org.apache.commons.lang3.event.EventUtilsTest.testAddEventListenerWithNoAddMethod":402,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlAllCharacters":72,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testMilleniumBug":118,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_BC":150,"org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testAbove":69,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArray":416,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":373,"org.apache.commons.lang3.builder.CompareToBuilderTest.testShortArrayHiddenByObject":30,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlHighUnicode":90,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringStringarray":425,"org.apache.commons.lang3.ConversionTest.testShortToBinary":304,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":388,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixtureWithTransients":39,"org.apache.commons.lang3.time.FastDateParserTest.testEquals":190,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationHMS":287,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":261,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":205,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang645":124,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance":218,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":322,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":358,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testSpecialCharacters":141,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringCharArray":248,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":269,"org.apache.commons.lang3.text.StrBuilderTest.testSetLength":391,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParses":164,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":351,"org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables":396,"org.apache.commons.lang3.EnumUtilsTest.test_isEnum":18,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArrayNegativeIndex":306,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone_Locale":221,"org.apache.commons.lang3.time.StopWatchTest.testStopWatchSimpleGet":296,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testDayOf":145,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils":423,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvString":93,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testMilleniumBug":143,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":342,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":333,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO":139,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testQuotes":165,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":271,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfMinuteWithDate":29,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringCharArray":415,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":108,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":264,"org.apache.commons.lang3.time.StopWatchTest.testStopWatchSplit":297,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone":228,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":263,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLANG815":281,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":199,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":330,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNull":11,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String":224,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testSimpleDate":116,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDifferingStyles":227,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":4,"org.apache.commons.lang3.time.FastDateParserTest.testToStringContainsName":180,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHiragana":97,"org.apache.commons.lang3.ValidateTest.testInclusiveBetweenDouble":313,"org.apache.commons.lang3.builder.CompareToBuilderTest.testByteArrayHiddenByObject":19,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":327,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiShortArray":32,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":44,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlVersions":95,"org.apache.commons.lang3.reflect.TypeUtilsTest.testWildcardType":101,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":361,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testCalendarTimezoneRespected":121,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePartialString_noReplace":16,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDefaults":231,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementCharArray":414,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":216,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":268,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethodWithEvent":407,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfHourWithDate":28,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationISO":288,"org.apache.commons.lang3.time.FastDateParserTest.testSpecialCharacters":168,"org.apache.commons.lang3.text.FormattableUtilsTest.testAlternatePadCharacter":45,"org.apache.commons.lang3.time.FastDateParserTest.testLowYearPadding":175,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_AD":149,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":362,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":372,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":207,"org.apache.commons.lang3.math.FractionTest.testMultiply":52,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex":234,"org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getRootCauseMessage_Throwable":1,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethod":404,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":321,"org.apache.commons.lang3.time.FastDateFormatTest.testDateDefaults":225,"org.apache.commons.lang3.time.FastDateParserTest.testMilleniumBug":170,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":325,"org.apache.commons.lang3.builder.CompareToBuilderTest.testShortArray":31,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDateDefaults":223,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISOMethod":289,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":204,"org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairsLang858":57,"org.apache.commons.lang3.StringUtilsTest.testReplaceOnce_StringStringString":411,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":273,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":332,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testFormat":127,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHierarchyHashCode":34,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseLongShort":158,"org.apache.commons.lang3.time.FastDateParserTest.testParseZone":173,"org.apache.commons.lang3.event.EventUtilsTest.testAddEventListener":403,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":364,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":344,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCodeExcludeFields":36,"org.apache.commons.lang3.time.FastDateParserTest.testLang538":179,"org.apache.commons.lang3.time.FastDateParserTest.testLang303":178,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":339,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtml":76,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Long_AD":176,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":272,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":262,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLANG984":284,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLANG981":282,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLANG982":283,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":214,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":345,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":375,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":349,"org.apache.commons.lang3.time.DateUtilsTest.testIsSameLocalTime_Cal":421,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":387,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContains_Char":412,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBetween":64,"org.apache.commons.lang3.text.StrBuilderTest.testAsWriter":390,"org.apache.commons.lang3.text.translate.OctalUnescaperTest.testBetween":58,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormat":137,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationWords":294,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Long_BC":177,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":54,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":202,"org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testBetween":71,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfDayWithDate":27,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":217,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger":40,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":354,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseZone":146,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":381,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":374,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":365,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvWriter":94,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionObjectCycle":33,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":12,"org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairs":55,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher":238,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture":38,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testToStringContainsName":153,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":385,"org.apache.commons.lang3.text.FormattableUtilsTest.testIllegalEllipsis":277,"org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterTypeCamelCase":275,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":355,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":255,"org.apache.commons.lang3.text.translate.UnicodeUnescaperTest.testLessThanFour":61,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":343,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testBlank":382,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":14,"org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterizeWithOwner":103,"org.apache.commons.lang3.math.NumberUtilsTest.testToIntString":99,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex":237,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":376,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang313":83,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testDurationsByBruteForce":279,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":359,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":15,"org.apache.commons.lang3.BooleanUtilsTest.test_toStringYesNo_Boolean":112,"org.apache.commons.lang3.reflect.TypeLiteralTest.testTyped":106,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":258,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":113,"org.apache.commons.lang3.time.FastDateParserTest.testTimeZoneMatches":193,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_BC":184,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testJiraLang281":295,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNumberArray":307,"org.apache.commons.lang3.math.NumberUtilsTest.testMinShort_nullArray":3,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_StrMatcher_String":233,"org.apache.commons.lang3.StringUtilsTest.testToEncodedString":319,"org.apache.commons.lang3.ValidateTest.testValidIndex_array":409,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection":41,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testShortDateStyleWithLocales":142,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlSupplementaryCharacters":82,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":329,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":320,"org.apache.commons.lang3.text.StrBuilderTest.testCapacityAndLength":389,"org.apache.commons.lang3.math.FractionTest.testFactory_double":48,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_Locale":229,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":363,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testEquals":163,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex":310,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance":230,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDuration":293,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":335,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO":134,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_LongNoEra_BC":187,"org.apache.commons.lang3.ValidateTest.testValidIndex_withMessage_array":410,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testAbove":62,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testAmPm":147,"org.apache.commons.lang3.text.StrBuilderTest.testChaining":392,"org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getMessage_Throwable":2,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondFragmentInLargerUnitWithDate":26,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":356,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_StrMatcher":232,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_AD":183,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeJava":73,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG992":301,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":42,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":253,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":368,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":212,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLowYearPadding":148,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLANG_832":154,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGenericArrayType":104,"org.apache.commons.lang3.BooleanUtilsTest.test_toStringOnOff_Boolean":110,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":369,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":370,"org.apache.commons.lang3.ClassUtilsTest.test_getSimpleName_Object":300,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfYearWithDate":23,"org.apache.commons.lang3.time.FastDateParserTest.test_Equality_Hash":182,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":348,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testIntegerWithTransients":37,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml":98,"org.apache.commons.lang3.StringUtilsTest.testCaseFunctions":53,"org.apache.commons.lang3.time.FastDateFormatTest.testParseSync":219,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLowDurations":285,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJson":78,"org.apache.commons.lang3.math.FractionTest.testSubtract":418,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":337,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testNullDate":22,"org.apache.commons.lang3.time.FastDateParserTest.testQuotes":192,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomAlphabetic":422,"org.apache.commons.lang3.math.FractionTest.testToProperString":49,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testEquals":126,"org.apache.commons.lang3.math.FractionTest.testPow":47,"org.apache.commons.lang3.time.FastDateParserTest.testParses":191,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":336,"org.apache.commons.lang3.StringUtilsSubstringTest.testMid_String":394,"org.apache.commons.lang3.math.FractionTest.testFactory_String_double":50,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLowYearPadding":120,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":379,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":270,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":353,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":198,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocaleMatches":144,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":13,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testShortDateStyleWithLocales":117,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":350},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1096","type":"CtBinaryOperatorImpl","sourcecode":"type == null"},"failures":[0,1,2],"tindex":"f6726f15-3e71-11e6-93bb-2fce654a36c5","method":{"position":"org.apache.commons.lang3.ClassUtils:158","type":"CtMethodImpl","sourcecode":"public static java.lang.String getShortClassName(final java.lang.Object object, final java.lang.String valueIfNull) {\n    if (object == null) {\n        {\n            if (object == null) {\n                return valueIfNull;\n            } \n            return org.apache.commons.lang3.ClassUtils.getShortClassName(object.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2271","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[3],"tindex":"f6735976-3e71-11e6-93bb-75f87016cf7f","method":{"position":"org.apache.commons.lang3.math.NumberUtils:834","type":"CtMethodImpl","sourcecode":"public static short min(final short[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.math.NumberUtils.validateArray(array);\n            short short = array[0];\n            for (int int = 1 ; i < (array.int) ; i++) {\n                if ((array[i]) < min) {\n                    min = array[i];\n                } \n            }\n            return min;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2873","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16],"tindex":"f6738087-3e71-11e6-93bb-63f073487eba","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:413","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(final java.lang.String source, final int offset, final int length) {\n    if (length < 0) {\n        {\n            if (source == null) {\n                return null;\n            } \n            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(length).append(source, offset, length);\n            if ((substitute(buf, 0, length)) == false) {\n                return source.substring(offset, (offset + length));\n            } \n            return buf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharRange:236","type":"CtBinaryOperatorImpl","sourcecode":"(iToString) == null"},"failures":[17],"tindex":"f6738088-3e71-11e6-93bb-d5dba6921012","method":{"position":"org.apache.commons.lang3.StringUtils:2289","type":"CtMethodImpl","sourcecode":"public static java.lang.String substringBefore(final java.lang.String str, final java.lang.String separator) {\n    if (separator == null) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (separator == null)) {\n                return str;\n            } \n            if (separator.isEmpty()) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = str.indexOf(separator);\n            if (pos == (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) {\n                return str;\n            } \n            return str.substring(0, pos);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iToString":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSetUtils:244","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isNotEmpty(s)"},"failures":[18],"tindex":"f673a799-3e71-11e6-93bb-513ddfb8afca","method":{"position":"org.apache.commons.lang3.EnumUtils:90","type":"CtMethodImpl","sourcecode":"public static <E extends java.lang.Enum<E>>boolean isValidEnum(final java.lang.Class<E> enumClass, final java.lang.String enumName) {\n    if (org.apache.commons.lang3.StringUtils.isNotEmpty(enumName)) {\n        {\n            if (enumName == null) {\n                return false;\n            } \n            try {\n                java.lang.Enum.valueOf(enumClass, enumName);\n                return true;\n            } catch (final java.lang.IllegalArgumentException ex) {\n                return false;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"s":"enumName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomStringUtils:234","type":"CtBinaryOperatorImpl","sourcecode":"(start == 0) && (end == 0)"},"failures":[],"tindex":"f673ceaa-3e71-11e6-93bb-310d80df772d","method":{"position":"org.apache.commons.lang3.RandomUtils:84","type":"CtMethodImpl","sourcecode":"public static int nextInt(int startInclusive, int endExclusive) {\n    if ((endExclusive == 0) && (endExclusive == 0)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.isTrue((endExclusive >= startInclusive), \"Start value must be smaller or equal to end value.\");\n            org.apache.commons.lang3.Validate.isTrue((startInclusive >= 0), \"Both range values must be non-negative.\");\n            if (startInclusive == endExclusive) {\n                return startInclusive;\n            } \n            return startInclusive + (org.apache.commons.lang3.RandomUtils.org.apache.commons.lang3.RandomUtils.java.util.Random.nextInt((endExclusive - startInclusive)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"endExclusive","end":"endExclusive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:730","type":"CtBinaryOperatorImpl","sourcecode":"str == falseString"},"failures":[],"tindex":"f673f5bb-3e71-11e6-93bb-3d1b2b9ce7bc","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1791","type":"CtMethodImpl","sourcecode":"protected void setArraySeparator(java.lang.String arraySeparator) {\n    if (arraySeparator == arraySeparator) {\n        {\n            if (arraySeparator == null) {\n                arraySeparator = \"\";\n            } \n            org.apache.commons.lang3.builder.ToStringStyle.this.java.lang.String = arraySeparator;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"arraySeparator","falseString":"arraySeparator"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:801","type":"CtBinaryOperatorImpl","sourcecode":"(lhs == null) || (rhs == null)"},"failures":[19,20,21],"tindex":"f673f5bc-3e71-11e6-93bb-d5670fe4bce1","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:847","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final byte[] lhs, final byte[] rhs) {\n    if ((rhs == null) || (rhs == null)) {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs","rhs":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3076","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"f67443dd-3e71-11e6-93bb-a562f77deffb","method":{"position":"org.apache.commons.lang3.ClassUtils:1043","type":"CtMethodImpl","sourcecode":"public static java.lang.String getShortCanonicalName(final java.lang.String canonicalName) {\n    if (canonicalName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ClassUtils.getShortClassName(org.apache.commons.lang3.ClassUtils.getCanonicalName(canonicalName));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"canonicalName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:151","type":"CtBinaryOperatorImpl","sourcecode":"methodName != null"},"failures":[],"tindex":"f67443de-3e71-11e6-93bb-d10fb1eb41aa","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1089","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final short[] array, final java.lang.Boolean fullDetail) {\n    if (fieldName != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (array == null) {\n                appendNullText(buffer, fieldName);\n            } else if (isFullDetail(fullDetail)) {\n                appendDetail(buffer, fieldName, array);\n            } else {\n                appendSummary(buffer, fieldName, array);\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"methodName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:129","type":"CtBinaryOperatorImpl","sourcecode":"crex != null"},"failures":[],"tindex":"f6746aef-3e71-11e6-93bb-dfdd4819d1aa","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:432","type":"CtMethodImpl","sourcecode":"public static void printRootCauseStackTrace(final java.lang.Throwable throwable) {\n    if (throwable != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.exception.ExceptionUtils.printRootCauseStackTrace(throwable, java.lang.System.java.lang.System.java.io.PrintStream);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"crex":"throwable"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1056","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[22,23,24,25,26,27,28,29],"tindex":"f6749200-3e71-11e6-93bb-79c50f1ffbb1","method":{"position":"org.apache.commons.lang3.time.DateUtils:1289","type":"CtMethodImpl","sourcecode":"public static long getFragmentInMilliseconds(final java.util.Date date, final int fragment) {\n    if (fragment > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.getFragment(date, fragment, java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"fragment"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1478","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[30,31,32],"tindex":"f6749201-3e71-11e6-93bb-372fe4f189b7","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:767","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final short[] lhs, final short[] rhs) {\n    if (lhs == null) {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"lhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:778","type":"CtBinaryOperatorImpl","sourcecode":"date instanceof java.util.Date"},"failures":[33,34,35,36,37,38,39,40],"tindex":"f67618a2-3e71-11e6-93bb-416770ef2280","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:466","type":"CtMethodImpl","sourcecode":"static void register(final java.lang.Object value) {\n    if (value == null) {\n        {\n            if (value instanceof java.util.Date) {\n                {\n                    synchronized(org.apache.commons.lang3.builder.HashCodeBuilder.org.apache.commons.lang3.builder.HashCodeBuilder.java.lang.Class) {\n                        if ((org.apache.commons.lang3.builder.HashCodeBuilder.getRegistry()) == null) {\n                            org.apache.commons.lang3.builder.HashCodeBuilder.org.apache.commons.lang3.builder.HashCodeBuilder.java.lang.ThreadLocal<java.util.Set<org.apache.commons.lang3.builder.IDKey>>.set(new java.util.HashSet<org.apache.commons.lang3.builder.IDKey>());\n                        } \n                    }\n                    org.apache.commons.lang3.builder.HashCodeBuilder.getRegistry().add(new org.apache.commons.lang3.builder.IDKey(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2541","type":"CtInvocationImpl","sourcecode":"list.isEmpty()"},"failures":[41,42,43,44],"tindex":"f6763fb3-3e71-11e6-93bb-ff0d2b9d5976","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:313","type":"CtMethodImpl","sourcecode":"static java.lang.String[] toNoNullStringArray(final java.util.Collection<java.lang.String> collection) {\n    if (collection.isEmpty()) {\n        {\n            if (collection == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.String[];\n            } \n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toNoNullStringArray(collection.toArray());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"collection"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:194","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"f6763fb4-3e71-11e6-93bb-ef8244fae3a8","method":{"position":"org.apache.commons.lang3.Conversion:1429","type":"CtMethodImpl","sourcecode":"public static java.lang.String intToHex(final int src, final int srcPos, final java.lang.String dstInit, final int dstPos, final int nHexs) {\n    if (dstInit == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nHexs) {\n                return dstInit;\n            } \n            if ((((nHexs - 1) * 4) + srcPos) >= 32) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+srcPos is greather or equal to than 32\");\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(dstInit);\n            int int = 0;\n            int int = sb.length();\n            for (int int = 0 ; i < nHexs ; i++) {\n                shift = (i * 4) + srcPos;\n                final int int = 15 & (src >> shift);\n                if ((dstPos + i) == append) {\n                    ++append;\n                    sb.append(org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                } else {\n                    sb.setCharAt((dstPos + i), org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                }\n            }\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"dstInit"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1655","type":"CtBinaryOperatorImpl","sourcecode":"0 == nBools"},"failures":[45],"tindex":"f67666c5-3e71-11e6-93bb-117530fbe0ce","method":{"position":"org.apache.commons.lang3.text.FormattableUtils:98","type":"CtMethodImpl","sourcecode":"public static java.util.Formatter append(final java.lang.CharSequence seq, final java.util.Formatter formatter, final int flags, final int width, final int precision, final char padChar) {\n    if (0 == width) {\n        {\n            return org.apache.commons.lang3.text.FormattableUtils.append(seq, formatter, flags, width, precision, padChar, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"width"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2487","type":"CtBinaryOperatorImpl","sourcecode":"end != (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)"},"failures":[46,47,48,49,50,51,52],"tindex":"f67666c6-3e71-11e6-93bb-8330cb86d696","method":{"position":"org.apache.commons.lang3.math.Fraction:209","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.math.Fraction getReducedFraction(int numerator, int denominator) {\n    if (denominator != numerator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (denominator == 0) {\n                throw new java.lang.ArithmeticException(\"The denominator must not be zero\");\n            } \n            if (numerator == 0) {\n                return org.apache.commons.lang3.math.Fraction.org.apache.commons.lang3.math.Fraction.org.apache.commons.lang3.math.Fraction;\n            } \n            if ((denominator == (java.lang.Integer.java.lang.Integer.int)) && ((numerator & 1) == 0)) {\n                numerator /= 2;\n                denominator /= 2;\n            } \n            if (denominator < 0) {\n                if ((numerator == (java.lang.Integer.java.lang.Integer.int)) || (denominator == (java.lang.Integer.java.lang.Integer.int))) {\n                    throw new java.lang.ArithmeticException(\"overflow: can't negate\");\n                } \n                numerator = -numerator;\n                denominator = -denominator;\n            } \n            final int int = org.apache.commons.lang3.math.Fraction.greatestCommonDivisor(numerator, denominator);\n            numerator /= gcd;\n            denominator /= gcd;\n            return new org.apache.commons.lang3.math.Fraction(numerator , denominator);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND":"numerator","end":"denominator"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"newLineStr == null"},"failures":[53],"tindex":"f67666c7-3e71-11e6-93bb-ebc6dbf78613","method":{"position":"org.apache.commons.lang3.StringUtils:5636","type":"CtMethodImpl","sourcecode":"public static java.lang.String lowerCase(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return str.toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"newLineStr":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.StringUtils:2119","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],"tindex":"f6768dd8-3e71-11e6-93bb-ddf0274a6df6","method":{"position":"org.apache.commons.lang3.text.translate.CharSequenceTranslator:75","type":"CtMethodImpl","sourcecode":"public final void translate(final java.lang.CharSequence input, final java.io.Writer out) throws java.io.IOException {\n    if (input == null) {\n        {\n            if (out == null) {\n                throw new java.lang.IllegalArgumentException(\"The Writer must not be null\");\n            } \n            if (input == null) {\n                return ;\n            } \n            int int = 0;\n            final int int = input.length();\n            while (pos < len) {\n                final int int = translate(input, pos, out);\n                if (consumed == 0) {\n                    final char[] char[] = java.lang.Character.toChars(java.lang.Character.codePointAt(input, pos));\n                    out.write(c);\n                    pos += c.int;\n                    continue;\n                } \n                for (int int = 0 ; pt < consumed ; pt++) {\n                    pos += java.lang.Character.charCount(java.lang.Character.codePointAt(input, pos));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:274","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[99],"tindex":"f6768dd9-3e71-11e6-93bb-e75d17c75285","method":{"position":"org.apache.commons.lang3.math.NumberUtils:99","type":"CtMethodImpl","sourcecode":"public static int toInt(final java.lang.String str) {\n    if (str == null) {\n        {\n            return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:601","type":"CtInvocationImpl","sourcecode":"toWildcardType.equals(type)"},"failures":[100,101,102,103,104,105,106,107,108,109],"tindex":"f676b4ea-3e71-11e6-93bb-1551dd5b972e","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1571","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"deprecation\")\npublic static boolean equals(java.lang.reflect.Type t1, java.lang.reflect.Type t2) {\n    if (t2.equals(t1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.ObjectUtils.equals(t1, t2)) {\n                return true;\n            } \n            if (t1 instanceof java.lang.reflect.ParameterizedType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.equals(((java.lang.reflect.ParameterizedType)(t1)), t2);\n            } \n            if (t1 instanceof java.lang.reflect.GenericArrayType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.equals(((java.lang.reflect.GenericArrayType)(t1)), t2);\n            } \n            if (t1 instanceof java.lang.reflect.WildcardType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.equals(((java.lang.reflect.WildcardType)(t1)), t2);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toWildcardType":"t2","type":"t1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:510","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[110,111,112],"tindex":"f676b4eb-3e71-11e6-93bb-9f979485cbd2","method":{"position":"org.apache.commons.lang3.BooleanUtils:811","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final java.lang.Boolean bool, final java.lang.String trueString, final java.lang.String falseString, final java.lang.String nullString) {\n    if (nullString == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bool == null) {\n                return nullString;\n            } \n            return bool.booleanValue() ? trueString : falseString;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"nullString"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2482","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[113,113,114,115],"tindex":"f676b4ec-3e71-11e6-93bb-47154cc861fc","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:317","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final byte[] array) {\n    if (array == null) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:674","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231],"tindex":"f676dbfd-3e71-11e6-93bb-2df31fcfbe37","method":{"position":"org.apache.commons.lang3.time.FastDateParser:577","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nboolean addRegex(final org.apache.commons.lang3.time.FastDateParser parser, final java.lang.StringBuilder regex) {\n    if (regex == null) {\n        {\n            org.apache.commons.lang3.time.FastDateParser.escapeRegex(regex, java.lang.String, true);\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"regex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:803","type":"CtBinaryOperatorImpl","sourcecode":"trimmedLen > 0"},"failures":[232,233,234,235,236,237,238,239,240],"tindex":"f676dbfe-3e71-11e6-93bb-9b9876bb2bf5","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1991","type":"CtMethodImpl","sourcecode":"private org.apache.commons.lang3.text.StrBuilder replaceImpl(final org.apache.commons.lang3.text.StrMatcher matcher, final java.lang.String replaceStr, final int from, int to, int replaceCount) {\n    if (to > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((matcher == null) || ((int) == 0)) {\n                return org.apache.commons.lang3.text.StrBuilder.this;\n            } \n            final int int = replaceStr == null ? 0 : replaceStr.length();\n            final char[] char[] = char[];\n            for (int int = from ; (i < to) && (replaceCount != 0) ; i++) {\n                final int int = matcher.isMatch(buf, i, from, to);\n                if (removeLen > 0) {\n                    replaceImpl(i, (i + removeLen), removeLen, replaceStr, replaceLen);\n                    to = (to - removeLen) + replaceLen;\n                    i = (i + replaceLen) - 1;\n                    if (replaceCount > 0) {\n                        replaceCount--;\n                    } \n                } \n            }\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"trimmedLen":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7232","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.StringUtils.isEmpty(string)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchStrings))"},"failures":[],"tindex":"f677030f-3e71-11e6-93bb-89709be79883","method":{"position":"org.apache.commons.lang3.math.Fraction:844","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(obj)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(obj))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj == (org.apache.commons.lang3.math.Fraction.this)) {\n                return true;\n            } \n            if ((obj instanceof org.apache.commons.lang3.math.Fraction) == false) {\n                return false;\n            } \n            final org.apache.commons.lang3.math.Fraction org.apache.commons.lang3.math.Fraction = ((org.apache.commons.lang3.math.Fraction)(obj));\n            return ((getNumerator()) == (other.getNumerator())) && ((getDenominator()) == (other.getDenominator()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"obj","searchStrings":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3133","type":"CtBinaryOperatorImpl","sourcecode":"match || preserveAllTokens"},"failures":[],"tindex":"f6770310-3e71-11e6-93bb-1992c48debce","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:65","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setUseClassName(final boolean useClassName) {\n    if (useClassName || useClassName) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            super.setUseClassName(useClassName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"preserveAllTokens":"useClassName","match":"useClassName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:76","type":"CtBinaryOperatorImpl","sourcecode":"locale == null"},"failures":[],"tindex":"f6772a21-3e71-11e6-93bb-67d22623f482","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:466","type":"CtMethodImpl","sourcecode":"static void register(final java.lang.Object value) {\n    if (value == null) {\n        {\n            if (value instanceof java.util.Date) {\n                {\n                    synchronized(org.apache.commons.lang3.builder.HashCodeBuilder.org.apache.commons.lang3.builder.HashCodeBuilder.java.lang.Class) {\n                        if ((org.apache.commons.lang3.builder.HashCodeBuilder.getRegistry()) == null) {\n                            org.apache.commons.lang3.builder.HashCodeBuilder.org.apache.commons.lang3.builder.HashCodeBuilder.java.lang.ThreadLocal<java.util.Set<org.apache.commons.lang3.builder.IDKey>>.set(new java.util.HashSet<org.apache.commons.lang3.builder.IDKey>());\n                        } \n                    }\n                    org.apache.commons.lang3.builder.HashCodeBuilder.getRegistry().add(new org.apache.commons.lang3.builder.IDKey(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"locale":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:259","type":"CtFieldReadImpl","sourcecode":"objectsTriviallyEqual"},"failures":[241,241,242,243],"tindex":"f6772a22-3e71-11e6-93bb-014d102710e3","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:275","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final boolean value) {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectsTriviallyEqual":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2914","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[244,245],"tindex":"f6775133-3e71-11e6-93bb-01e11204b385","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:584","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final boolean[] array) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                int = (int) * (int);\n            } else {\n                for (final boolean boolean : array) {\n                    append(element);\n                }\n            }\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1686","type":"CtBinaryOperatorImpl","sourcecode":"0 == nBytes"},"failures":[],"tindex":"f6775134-3e71-11e6-93bb-6d9045cfb60b","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2969","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final char[] cbuf, final int off, final int len) {\n    if (0 == len) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.text.StrBuilder.this.append(cbuf, off, len);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBytes":"len"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2073","type":"CtBinaryOperatorImpl","sourcecode":"start < 0"},"failures":[],"tindex":"f6775135-3e71-11e6-93bb-251a74719300","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2919","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void mark(final int readAheadLimit) {\n    if (readAheadLimit < 0) {\n        {\n            int = int;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"readAheadLimit"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2333","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[246,247,248,249,250,251,252],"tindex":"f6777846-3e71-11e6-93bb-0f21be06d384","method":{"position":"org.apache.commons.lang3.StringUtils:1709","type":"CtMethodImpl","sourcecode":"public static int indexOfAnyBut(final java.lang.CharSequence cs, final char... searchChars) {\n    if (searchChars == null) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars))) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            final int int = cs.length();\n            final int int = csLen - 1;\n            final int int = searchChars.int;\n            final int int = searchLen - 1;\n            outer : for (int int = 0 ; i < csLen ; i++) {\n                final char char = cs.charAt(i);\n                for (int int = 0 ; j < searchLen ; j++) {\n                    if ((searchChars[j]) == ch) {\n                        if (((i < csLast) && (j < searchLast)) && (java.lang.Character.isHighSurrogate(ch))) {\n                            if ((searchChars[(j + 1)]) == (cs.charAt((i + 1)))) {\n                                continue outer;\n                            } \n                        } else {\n                            continue outer;\n                        }\n                    } \n                }\n                return i;\n            }\n            return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"searchChars"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:127","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[113,113,114,115,253,253,254,255,256,257,258,259,260,261,261,262,263,264,265,266,267,268,269,270,271,272,273],"tindex":"f6777847-3e71-11e6-93bb-01efe61e9c24","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1175","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final byte[] array) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:414","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[274,275],"tindex":"f6777848-3e71-11e6-93bb-1382ab175a1b","method":{"position":"org.apache.commons.lang3.StringUtils:3221","type":"CtMethodImpl","sourcecode":"private static java.lang.String[] splitByCharacterType(final java.lang.String str, final boolean camelCase) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (str.isEmpty()) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.String[];\n            } \n            final char[] char[] = str.toCharArray();\n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            int int = 0;\n            int int = java.lang.Character.getType(c[tokenStart]);\n            for (int int = tokenStart + 1 ; pos < (c.int) ; pos++) {\n                final int int = java.lang.Character.getType(c[pos]);\n                if (type == currentType) {\n                    continue;\n                } \n                if ((camelCase && (type == (java.lang.Character.java.lang.Character.byte))) && (currentType == (java.lang.Character.java.lang.Character.byte))) {\n                    final int int = pos - 1;\n                    if (newTokenStart != tokenStart) {\n                        list.add(new java.lang.String(c , tokenStart , (newTokenStart - tokenStart)));\n                        tokenStart = newTokenStart;\n                    } \n                } else {\n                    list.add(new java.lang.String(c , tokenStart , (pos - tokenStart)));\n                    tokenStart = pos;\n                }\n                currentType = type;\n            }\n            list.add(new java.lang.String(c , tokenStart , ((c.int) - tokenStart)));\n            return list.toArray(new java.lang.String[list.size()]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:297","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[276,277,278],"tindex":"f6779f59-3e71-11e6-93bb-fbd02b7e1452","method":{"position":"org.apache.commons.lang3.text.FormattableUtils:134","type":"CtMethodImpl","sourcecode":"public static java.util.Formatter append(final java.lang.CharSequence seq, final java.util.Formatter formatter, final int flags, final int width, final int precision, final char padChar, final java.lang.CharSequence ellipsis) {\n    if (ellipsis == null) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((((ellipsis == null) || (precision < 0)) || ((ellipsis.length()) <= precision)), \"Specified ellipsis '%1$s' exceeds precision of %2$s\", ellipsis, java.lang.Integer.valueOf(precision));\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(seq);\n            if ((precision >= 0) && (precision < (seq.length()))) {\n                final java.lang.CharSequence java.lang.CharSequence = org.apache.commons.lang3.ObjectUtils.defaultIfNull(ellipsis, org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String);\n                buf.replace((precision - (_ellipsis.length())), seq.length(), _ellipsis.toString());\n            } \n            final boolean boolean = (flags & (java.util.FormattableFlags.java.util.FormattableFlags.int)) == (java.util.FormattableFlags.java.util.FormattableFlags.int);\n            for (int int = buf.length() ; i < width ; i++) {\n                buf.insert((leftJustify ? i : 0), padChar);\n            }\n            formatter.format(buf.toString());\n            return formatter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"ellipsis"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:293","type":"CtBinaryOperatorImpl","sourcecode":"languageCode == null"},"failures":[279,280,281,282,283,284,285,286,287,288,139,289,290,291,292,293,294,295,296,297],"tindex":"f677c66a-3e71-11e6-93bb-47d21509ff18","method":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:480","type":"CtMethodImpl","sourcecode":"static org.apache.commons.lang3.time.DurationFormatUtils.Token[] lexx(final java.lang.String format) {\n    if (format == null) {\n        {\n            final java.util.ArrayList<org.apache.commons.lang3.time.DurationFormatUtils.Token> java.util.ArrayList<org.apache.commons.lang3.time.DurationFormatUtils.Token> = new java.util.ArrayList<org.apache.commons.lang3.time.DurationFormatUtils.Token>(format.length());\n            boolean boolean = false;\n            java.lang.StringBuilder java.lang.StringBuilder = null;\n            org.apache.commons.lang3.time.DurationFormatUtils.Token org.apache.commons.lang3.time.DurationFormatUtils.Token = null;\n            for (int int = 0 ; i < (format.length()) ; i++) {\n                final char char = format.charAt(i);\n                if (inLiteral && (ch != '\\'')) {\n                    buffer.append(ch);\n                    continue;\n                } \n                java.lang.Object java.lang.Object = null;\n                switch (ch) {\n                    case '\\'' :\n                        if (inLiteral) {\n                            buffer = null;\n                            inLiteral = false;\n                        } else {\n                            buffer = new java.lang.StringBuilder();\n                            list.add(new org.apache.commons.lang3.time.DurationFormatUtils.Token(buffer));\n                            inLiteral = true;\n                        }\n                        break;\n                    case 'y' :\n                        value = org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object;\n                        break;\n                    case 'M' :\n                        value = org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object;\n                        break;\n                    case 'd' :\n                        value = org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object;\n                        break;\n                    case 'H' :\n                        value = org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object;\n                        break;\n                    case 'm' :\n                        value = org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object;\n                        break;\n                    case 's' :\n                        value = org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object;\n                        break;\n                    case 'S' :\n                        value = org.apache.commons.lang3.time.DurationFormatUtils.org.apache.commons.lang3.time.DurationFormatUtils.java.lang.Object;\n                        break;\n                    default :\n                        if (buffer == null) {\n                            buffer = new java.lang.StringBuilder();\n                            list.add(new org.apache.commons.lang3.time.DurationFormatUtils.Token(buffer));\n                        } \n                        buffer.append(ch);\n                }\n                if (value != null) {\n                    if ((previous != null) && ((previous.getValue()) == value)) {\n                        previous.increment();\n                    } else {\n                        final org.apache.commons.lang3.time.DurationFormatUtils.Token org.apache.commons.lang3.time.DurationFormatUtils.Token = new org.apache.commons.lang3.time.DurationFormatUtils.Token(value);\n                        list.add(token);\n                        previous = token;\n                    }\n                    buffer = null;\n                } \n            }\n            if (inLiteral) {\n                throw new java.lang.IllegalArgumentException((\"Unmatched quote in format: \" + format));\n            } \n            return list.toArray(new org.apache.commons.lang3.time.DurationFormatUtils.Token[list.size()]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"languageCode":"format"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:39","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[298],"tindex":"f677ed7b-3e71-11e6-93bb-2d7922b80558","method":{"position":"org.apache.commons.lang3.ArrayUtils:3665","type":"CtMethodImpl","sourcecode":"public static boolean isNotEmpty(final double[] array) {\n    if (array == null) {\n        {\n            return (array != null) && ((array.int) != 0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3736","type":"CtUnaryOperatorImpl","sourcecode":"!(type1.isAssignableFrom(type2))"},"failures":[299,300],"tindex":"f677ed7c-3e71-11e6-93bb-5300942a67d0","method":{"position":"org.apache.commons.lang3.ClassUtils:235","type":"CtMethodImpl","sourcecode":"public static java.lang.String getSimpleName(final java.lang.Class<?> cls) {\n    if (!(cls.isAssignableFrom(cls))) {\n        {\n            if (cls == null) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            return cls.getSimpleName();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type2":"cls","type1":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:274","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[301],"tindex":"f678148d-3e71-11e6-93bb-f3513f9f7a64","method":{"position":"org.apache.commons.lang3.math.NumberUtils:633","type":"CtMethodImpl","sourcecode":"private static boolean isAllZeros(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return true;\n            } \n            for (int int = (str.length()) - 1 ; i >= 0 ; i--) {\n                if ((str.charAt(i)) != '0') {\n                    return false;\n                } \n            }\n            return (str.length()) > 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5271","type":"CtBinaryOperatorImpl","sourcecode":"count == null"},"failures":[],"tindex":"f678148e-3e71-11e6-93bb-9f25306bbd95","method":{"position":"org.apache.commons.lang3.mutable.MutableDouble:188","type":"CtMethodImpl","sourcecode":"public void subtract(final java.lang.Number operand) {\n    if (operand == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableDouble.this.double -= operand.doubleValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"operand"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:465","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[93],"tindex":"f678148f-3e71-11e6-93bb-777640b5ac57","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:801","type":"CtMethodImpl","sourcecode":"public static final java.lang.String unescapeCsv(final java.lang.String input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(input);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:201","type":"CtVariableReadImpl","sourcecode":"wrapLongWords"},"failures":[],"tindex":"f6783ba0-3e71-11e6-93bb-a757f53fb58d","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1696","type":"CtMethodImpl","sourcecode":"protected void setDefaultFullDetail(final boolean defaultFullDetail) {\n    if (defaultFullDetail) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.this.boolean = defaultFullDetail;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"wrapLongWords":"defaultFullDetail"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:111","type":"CtBinaryOperatorImpl","sourcecode":"(!(java.lang.Character.isUpperCase(ch1))) || (!(java.lang.Character.isUpperCase(ch2)))"},"failures":[],"tindex":"f6783ba1-3e71-11e6-93bb-256e14d9559d","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:928","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer setQuoteChar(final char quote) {\n    if ((!(java.lang.Character.isUpperCase(quote))) || (!(java.lang.Character.isUpperCase(quote)))) {\n        {\n            return setQuoteMatcher(org.apache.commons.lang3.text.StrMatcher.charMatcher(quote));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch2":"quote","ch1":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:728","type":"CtBinaryOperatorImpl","sourcecode":"(comparison) != 0"},"failures":[302,303],"tindex":"f6783ba2-3e71-11e6-93bb-3548d270c642","method":{"position":"org.apache.commons.lang3.Conversion:405","type":"CtMethodImpl","sourcecode":"public static char binaryToHexDigitMsb0_4bits(final boolean[] src, final int srcPos) {\n    if (srcPos != 0) {\n        {\n            if ((src.int) > 8) {\n                throw new java.lang.IllegalArgumentException((\"src.length>8: src.length=\" + (src.int)));\n            } \n            if (((src.int) - srcPos) < 4) {\n                throw new java.lang.IllegalArgumentException((((\"src.length-srcPos<4: src.length=\" + (src.int)) + \", srcPos=\") + srcPos));\n            } \n            if (src[(srcPos + 3)]) {\n                if (src[(srcPos + 2)]) {\n                    if (src[(srcPos + 1)]) {\n                        if (src[srcPos]) {\n                            return 'f';\n                        } else {\n                            return '7';\n                        }\n                    } else {\n                        if (src[srcPos]) {\n                            return 'b';\n                        } else {\n                            return '3';\n                        }\n                    }\n                } else {\n                    if (src[(srcPos + 1)]) {\n                        if (src[srcPos]) {\n                            return 'd';\n                        } else {\n                            return '5';\n                        }\n                    } else {\n                        if (src[srcPos]) {\n                            return '9';\n                        } else {\n                            return '1';\n                        }\n                    }\n                }\n            } else {\n                if (src[(srcPos + 2)]) {\n                    if (src[(srcPos + 1)]) {\n                        if (src[srcPos]) {\n                            return 'e';\n                        } else {\n                            return '6';\n                        }\n                    } else {\n                        if (src[srcPos]) {\n                            return 'a';\n                        } else {\n                            return '2';\n                        }\n                    }\n                } else {\n                    if (src[(srcPos + 1)]) {\n                        if (src[srcPos]) {\n                            return 'c';\n                        } else {\n                            return '4';\n                        }\n                    } else {\n                        if (src[srcPos]) {\n                            return '8';\n                        } else {\n                            return '0';\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"srcPos"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1260","type":"CtBinaryOperatorImpl","sourcecode":"(((nShorts - 1) * 16) + srcPos) >= 32"},"failures":[304],"tindex":"f67862b3-3e71-11e6-93bb-b1073f8e1716","method":{"position":"org.apache.commons.lang3.Conversion:1618","type":"CtMethodImpl","sourcecode":"public static boolean[] shortToBinary(final short src, final int srcPos, final boolean[] dst, final int dstPos, final int nBools) {\n    if ((((nBools - 1) * 16) + nBools) >= 32) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nBools) {\n                return dst;\n            } \n            if (((nBools - 1) + srcPos) >= 16) {\n                throw new java.lang.IllegalArgumentException(\"nBools-1+srcPos is greather or equal to than 16\");\n            } \n            int int = 0;\n            assert ((nBools - 1) * 1) < (16 - srcPos);\n            for (int int = 0 ; i < nBools ; i++) {\n                shift = (i * 1) + srcPos;\n                dst[(dstPos + i)] = (1 & (src >> shift)) != 0;\n            }\n            return dst;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcPos":"nBools","nShorts":"nBools"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2125","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[305,306,307,308,309],"tindex":"f67862b4-3e71-11e6-93bb-9dbf9c8c66c8","method":{"position":"org.apache.commons.lang3.ArrayUtils:5232","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <T>T[] removeAll(final T[] array, final int... indices) {\n    if (indices == null) {\n        {\n            return ((T[])(org.apache.commons.lang3.ArrayUtils.removeAll(((java.lang.Object)(array)), org.apache.commons.lang3.ArrayUtils.clone(indices))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"indices"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6621","type":"CtBinaryOperatorImpl","sourcecode":"shortestStrLen == 0"},"failures":[310],"tindex":"f67889c5-3e71-11e6-93bb-a93a521782e6","method":{"position":"org.apache.commons.lang3.ArrayUtils:4389","type":"CtMethodImpl","sourcecode":"public static byte[] add(final byte[] array, final int index, final byte element) {\n    if (index == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((byte[])(org.apache.commons.lang3.ArrayUtils.add(array, index, java.lang.Byte.valueOf(element), java.lang.Byte.java.lang.Byte.java.lang.Class<java.lang.Byte>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"shortestStrLen":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:894","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[311],"tindex":"f67889c6-3e71-11e6-93bb-8b93a320390e","method":{"position":"org.apache.commons.lang3.ArrayUtils:5413","type":"CtMethodImpl","sourcecode":"public static short[] removeAll(final short[] array, final int... indices) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((short[])(org.apache.commons.lang3.ArrayUtils.removeAll(((java.lang.Object)(array)), org.apache.commons.lang3.ArrayUtils.clone(indices))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:724","type":"CtBinaryOperatorImpl","sourcecode":"lhs != rhs"},"failures":[],"tindex":"f67889c7-3e71-11e6-93bb-edeb6eaad682","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1240","type":"CtMethodImpl","sourcecode":"public static short max(short a, final short b, final short c) {\n    if (b != c) {\n        {\n            if (b > a) {\n                a = b;\n            } \n            if (c > a) {\n                a = c;\n            } \n            return a;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"b","rhs":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:6022","type":"CtBinaryOperatorImpl","sourcecode":"(index < 0) || (index >= length)"},"failures":[],"tindex":"f678b0d8-3e71-11e6-93bb-2302248a304e","method":{"position":"org.apache.commons.lang3.time.DateUtils:418","type":"CtMethodImpl","sourcecode":"public static java.util.Date addMonths(final java.util.Date date, final int amount) {\n    if ((amount < 0) || (index >= amount)) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.add(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"amount","index":"amount"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:863","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(seq)"},"failures":[312],"tindex":"f678b0d9-3e71-11e6-93bb-4d0b11c37242","method":{"position":"org.apache.commons.lang3.text.FormattableUtils:81","type":"CtMethodImpl","sourcecode":"public static java.util.Formatter append(final java.lang.CharSequence seq, final java.util.Formatter formatter, final int flags, final int width, final int precision) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n        {\n            return org.apache.commons.lang3.text.FormattableUtils.append(seq, formatter, flags, width, precision, ' ', null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"seq":"seq"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:1150","type":"CtBinaryOperatorImpl","sourcecode":"(value <= start) || (value >= end)"},"failures":[],"tindex":"f678b0da-3e71-11e6-93bb-df69e131b61c","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:547","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final double lhs, final double rhs) {\n    if ((lhs <= lhs) || (value >= rhs)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            int = java.lang.Double.compare(lhs, rhs);\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"lhs","end":"rhs","value":"lhs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:1127","type":"CtBinaryOperatorImpl","sourcecode":"(value <= start) || (value >= end)"},"failures":[313],"tindex":"f678d7eb-3e71-11e6-93bb-0bba1fb1ba06","method":{"position":"org.apache.commons.lang3.Validate:987","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"boxing\")\npublic static void inclusiveBetween(double start, double end, double value) {\n    if ((start <= start) || (value >= end)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value < start) || (value > end)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, value, start, end));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"start","end":"end","value":"start"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1389","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"f678d7ec-3e71-11e6-93bb-fdd98b01f76c","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:722","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final float[] array) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:761","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[132],"tindex":"f678d7ed-3e71-11e6-93bb-99eef758a97e","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:276","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Calendar calendar, final java.lang.String pattern, final java.util.Locale locale) {\n    if (pattern == null) {\n        {\n            return org.apache.commons.lang3.time.DateFormatUtils.format(calendar, pattern, null, locale);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1156","type":"CtBinaryOperatorImpl","sourcecode":"c < a"},"failures":[314],"tindex":"f678d7ee-3e71-11e6-93bb-538093f270aa","method":{"position":"org.apache.commons.lang3.mutable.MutableByte:158","type":"CtMethodImpl","sourcecode":"public void subtract(final byte operand) {\n    if (operand < operand) {\n        {\n            org.apache.commons.lang3.mutable.MutableByte.this.byte -= operand;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"operand","c":"operand"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:253","type":"CtBinaryOperatorImpl","sourcecode":"style == null"},"failures":[],"tindex":"f678feff-3e71-11e6-93bb-d59d28c6d0cd","method":{"position":"org.apache.commons.lang3.builder.DiffResult:180","type":"CtMethodImpl","sourcecode":"public java.lang.String toString(org.apache.commons.lang3.builder.ToStringStyle style) {\n    if (style == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.util.List<org.apache.commons.lang3.builder.Diff<?>>.size()) == 0) {\n                return org.apache.commons.lang3.builder.DiffResult.org.apache.commons.lang3.builder.DiffResult.java.lang.String;\n            } \n            org.apache.commons.lang3.builder.ToStringBuilder org.apache.commons.lang3.builder.ToStringBuilder = new org.apache.commons.lang3.builder.ToStringBuilder(java.lang.Object , style);\n            org.apache.commons.lang3.builder.ToStringBuilder org.apache.commons.lang3.builder.ToStringBuilder = new org.apache.commons.lang3.builder.ToStringBuilder(java.lang.Object , style);\n            for (org.apache.commons.lang3.builder.Diff<?> org.apache.commons.lang3.builder.Diff<?> : java.util.List<org.apache.commons.lang3.builder.Diff<?>>) {\n                lhsBuilder.append(diff.getFieldName(), diff.getLeft());\n                rhsBuilder.append(diff.getFieldName(), diff.getRight());\n            }\n            return java.lang.String.format(\"%s %s %s\", lhsBuilder.build(), org.apache.commons.lang3.builder.DiffResult.org.apache.commons.lang3.builder.DiffResult.java.lang.String, rhsBuilder.build());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"style":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2687","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[315,316],"tindex":"f678ff00-3e71-11e6-93bb-0f4a27a576f4","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1029","type":"CtMethodImpl","sourcecode":"public static double max(final double[] array) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        {\n            org.apache.commons.lang3.math.NumberUtils.validateArray(array);\n            double double = array[0];\n            for (int int = 1 ; j < (array.int) ; j++) {\n                if (java.lang.Double.isNaN(array[j])) {\n                    return java.lang.Double.java.lang.Double.double;\n                } \n                if ((array[j]) > max) {\n                    max = array[j];\n                } \n            }\n            return max;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:896","type":"CtBinaryOperatorImpl","sourcecode":"first < second"},"failures":[],"tindex":"f6792611-3e71-11e6-93bb-0382c7e8d67b","method":{"position":"org.apache.commons.lang3.ObjectUtils:896","type":"CtMethodImpl","sourcecode":"public static long CONST(final long v) {\n    if (v < v) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return v;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"first":"v","second":"v"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:135","type":"CtFieldReadImpl","sourcecode":"objectsTriviallyEqual"},"failures":[],"tindex":"f6792612-3e71-11e6-93bb-953016cb9c44","method":{"position":"org.apache.commons.lang3.Validate:802","type":"CtMethodImpl","sourcecode":"public static void validState(final boolean expression) {\n    if (expression) {\n        {\n            if (expression == false) {\n                throw new java.lang.IllegalStateException(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectsTriviallyEqual":"expression"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3910","type":"CtBinaryOperatorImpl","sourcecode":"array2 == null"},"failures":[317],"tindex":"f6792613-3e71-11e6-93bb-fb6c5c4d090e","method":{"position":"org.apache.commons.lang3.ArrayUtils:1245","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final long[] array1, final long[] array2) {\n    if (array2 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array2":"array2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6907","type":"CtBinaryOperatorImpl","sourcecode":"m == 0"},"failures":[318],"tindex":"f6792614-3e71-11e6-93bb-a7b818ad0a0a","method":{"position":"org.apache.commons.lang3.StringUtils:3612","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final long[] array, final char separator, final int startIndex, final int endIndex) {\n    if (endIndex == 0) {\n        {\n            if (array == null) {\n                return null;\n            } \n            final int int = endIndex - startIndex;\n            if (noOfItems <= 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((noOfItems * 16));\n            for (int int = startIndex ; i < endIndex ; i++) {\n                if (i > startIndex) {\n                    buf.append(separator);\n                } \n                buf.append(array[i]);\n            }\n            return buf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"endIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3821","type":"CtBinaryOperatorImpl","sourcecode":"array1 == null"},"failures":[319],"tindex":"f6794d25-3e71-11e6-93bb-694b1018ee8c","method":{"position":"org.apache.commons.lang3.StringUtils:7635","type":"CtMethodImpl","sourcecode":"public static java.lang.String toEncodedString(byte[] bytes, java.nio.charset.Charset charset) {\n    if (bytes == null) {\n        {\n            return new java.lang.String(bytes , (charset != null ? charset : java.nio.charset.Charset.defaultCharset()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:542","type":"CtBinaryOperatorImpl","sourcecode":"type == null"},"failures":[320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,334,335,336,337,338,339,339,340,341,342,343,344,345,346,347,113,114,115,348,349,350,351,352,353,354,355,356,357,241,242,243,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,253,254,255,256,257,258,259,260,261,262,263,264,265,265,266,267,268,269,270,271,272,273,379,380,381,382,383,384,385,386,387,388],"tindex":"f6794d26-3e71-11e6-93bb-6590f3a7818f","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1589","type":"CtMethodImpl","sourcecode":"protected java.lang.String getShortClassName(final java.lang.Class<?> cls) {\n    if (cls == null) {\n        {\n            return org.apache.commons.lang3.ClassUtils.getShortClassName(cls);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2769","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[389,390,391,392],"tindex":"f6797437-3e71-11e6-93bb-5fbb8da547c9","method":{"position":"org.apache.commons.lang3.text.StrBuilder:199","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder setLength(final int length) {\n    if (length < 0) {\n        {\n            if (length < 0) {\n                throw new java.lang.StringIndexOutOfBoundsException(length);\n            } \n            if (length < (int)) {\n                int = length;\n            } else if (length > (int)) {\n                ensureCapacity(length);\n                final int int = int;\n                final int int = length;\n                int = length;\n                for (int int = oldEnd ; i < newEnd ; i++) {\n                    char[][i] = '\u0000';\n                }\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4757","type":"CtBinaryOperatorImpl","sourcecode":"greater > 0"},"failures":[393],"tindex":"f6797438-3e71-11e6-93bb-d16d9a875970","method":{"position":"org.apache.commons.lang3.ArrayUtils:2652","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) {\n    if (startIndex > 0) {\n        {\n            if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } else if (startIndex >= (array.int)) {\n                startIndex = (array.int) - 1;\n            } \n            for (int int = startIndex ; i >= 0 ; i--) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"greater":"startIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:735","type":"CtInvocationImpl","sourcecode":"str.equals(falseString)"},"failures":[394],"tindex":"f6797439-3e71-11e6-93bb-07d59f003681","method":{"position":"org.apache.commons.lang3.StringUtils:2244","type":"CtMethodImpl","sourcecode":"public static java.lang.String mid(final java.lang.String str, int pos, final int len) {\n    if (str.equals(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if ((len < 0) || (pos > (str.length()))) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            if (pos < 0) {\n                pos = 0;\n            } \n            if ((str.length()) <= (pos + len)) {\n                return str.substring(pos);\n            } \n            return str.substring(pos, (pos + len));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str","falseString":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1364","type":"CtBinaryOperatorImpl","sourcecode":"typeArguments == null"},"failures":[395,54,396],"tindex":"f6799b4a-3e71-11e6-93bb-a7a1d64e377a","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:489","type":"CtMethodImpl","sourcecode":"private static java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable<?> var, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeVarAssigns) {\n    if (typeVarAssigns == null) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type;\n            do {\n                result = typeVarAssigns.get(var);\n                if ((result instanceof java.lang.reflect.TypeVariable<?>) && (!(result.equals(var)))) {\n                    var = ((java.lang.reflect.TypeVariable<?>)(result));\n                    continue;\n                } \n                break;\n            } while (true );\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeArguments":"typeVarAssigns"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.NumericEntityUnescaper:118","type":"CtVariableReadImpl","sourcecode":"isHex"},"failures":[],"tindex":"f6799b4b-3e71-11e6-93bb-31fa4af5a3bf","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1674","type":"CtMethodImpl","sourcecode":"protected void setUseFieldNames(final boolean useFieldNames) {\n    if (useFieldNames) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.this.boolean = useFieldNames;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isHex":"useFieldNames"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1506","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[397,398],"tindex":"f6799b4c-3e71-11e6-93bb-497e325801d5","method":{"position":"org.apache.commons.lang3.ArrayUtils:3553","type":"CtMethodImpl","sourcecode":"public static boolean isEmpty(final byte[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (array == null) || ((array.int) == 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:530","type":"CtBinaryOperatorImpl","sourcecode":"((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))"},"failures":[],"tindex":"f679c25d-3e71-11e6-93bb-63fb4fcd64a1","method":{"position":"org.apache.commons.lang3.math.NumberUtils:273","type":"CtMethodImpl","sourcecode":"public static double toDouble(final java.lang.String str, final double defaultValue) {\n    if (((str == null) && (str == null)) && ((((str.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return defaultValue;\n            } \n            try {\n                return java.lang.Double.parseDouble(str);\n            } catch (final java.lang.NumberFormatException nfe) {\n                return defaultValue;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dec":"str","numeric":"str","exp":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5975","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))"},"failures":[399,400],"tindex":"f679c25e-3e71-11e6-93bb-ade0c64075aa","method":{"position":"org.apache.commons.lang3.ArrayUtils:4677","type":"CtMethodImpl","sourcecode":"public static boolean[] remove(final boolean[] array, final int index) {\n    if ((org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(array))) {\n        {\n            return ((boolean[])(org.apache.commons.lang3.ArrayUtils.remove(((java.lang.Object)(array)), index)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array","values":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.tuple.Pair:134","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.util.Map.Entry<?, ?>"},"failures":[401,402,403,404,405,406,407],"tindex":"f679c25f-3e71-11e6-93bb-099cd5e379dc","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:119","type":"CtMethodImpl","sourcecode":"public static java.lang.Object invokeMethod(final java.lang.Object object, final java.lang.String methodName, java.lang.Object[] args, java.lang.Class<?>[] parameterTypes) throws java.lang.IllegalAccessException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (object instanceof java.util.Map.Entry<?, ?>) {\n        {\n            parameterTypes = org.apache.commons.lang3.ArrayUtils.nullToEmpty(parameterTypes);\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            final java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.getMatchingAccessibleMethod(object.getClass(), methodName, parameterTypes);\n            if (method == null) {\n                throw new java.lang.NoSuchMethodException((((\"No such accessible method: \" + methodName) + \"() on object: \") + (object.getClass().getName())));\n            } \n            return method.invoke(object, args);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:739","type":"CtBinaryOperatorImpl","sourcecode":"(lhs == null) || (rhs == null)"},"failures":[408,398],"tindex":"f679e970-3e71-11e6-93bb-f7c490038e7d","method":{"position":"org.apache.commons.lang3.ArrayUtils:3531","type":"CtMethodImpl","sourcecode":"public static boolean isEmpty(final short[] array) {\n    if ((array == null) || (array == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (array == null) || ((array.int) == 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array","rhs":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1262","type":"CtBinaryOperatorImpl","sourcecode":"c > a"},"failures":[],"tindex":"f679e971-3e71-11e6-93bb-a1e27383ad17","method":{"position":"org.apache.commons.lang3.BitField:240","type":"CtMethodImpl","sourcecode":"public byte setByte(final byte holder) {\n    if (holder > holder) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((byte)(set(holder)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"holder","c":"holder"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1983","type":"CtBinaryOperatorImpl","sourcecode":"tmp < ret"},"failures":[409,410],"tindex":"f679e972-3e71-11e6-93bb-3741946c294b","method":{"position":"org.apache.commons.lang3.Validate:628","type":"CtMethodImpl","sourcecode":"public static <T>T[] validIndex(final T[] array, final int index, final java.lang.String message, final java.lang.Object... values) {\n    if (index < index) {\n        {\n            org.apache.commons.lang3.Validate.notNull(array);\n            if ((index < 0) || (index >= (array.int))) {\n                throw new java.lang.IndexOutOfBoundsException(java.lang.String.format(message, values));\n            } \n            return array;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ret":"index","tmp":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2293","type":"CtInvocationImpl","sourcecode":"separator.isEmpty()"},"failures":[130],"tindex":"f67a1083-3e71-11e6-93bb-ab176b92788c","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:130","type":"CtMethodImpl","sourcecode":"public static java.lang.String formatUTC(final long millis, final java.lang.String pattern) {\n    if (pattern.isEmpty()) {\n        {\n            return org.apache.commons.lang3.time.DateFormatUtils.format(new java.util.Date(millis), pattern, org.apache.commons.lang3.time.DateFormatUtils.org.apache.commons.lang3.time.DateFormatUtils.java.util.TimeZone, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5262","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[233],"tindex":"f67a1084-3e71-11e6-93bb-a360edb8d0ef","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1948","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder replaceFirst(final org.apache.commons.lang3.text.StrMatcher matcher, final java.lang.String replaceStr) {\n    if (replaceStr == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return replace(matcher, replaceStr, 0, int, 1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"replaceStr"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:173","type":"CtBinaryOperatorImpl","sourcecode":"(nullText != null) && (nullText.isEmpty())"},"failures":[],"tindex":"f67a1085-3e71-11e6-93bb-036af51235e0","method":{"position":"org.apache.commons.lang3.StringUtils:524","type":"CtMethodImpl","sourcecode":"public static java.lang.String stripToNull(java.lang.String str) {\n    if ((str != null) && (nullText.isEmpty())) {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.lang3.StringUtils.strip(str, null);\n            return str.isEmpty() ? null : str;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nullText":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:667","type":"CtInvocationImpl","sourcecode":"str.equals(trueString)"},"failures":[350,350,351],"tindex":"f67a1086-3e71-11e6-93bb-571ab3b62389","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:908","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final short value) {\n    if (fieldName.equals(fieldName)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName","trueString":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:187","type":"CtBinaryOperatorImpl","sourcecode":"(tmp.length()) != (duration.length())"},"failures":[411,294],"tindex":"f67a3797-3e71-11e6-93bb-45df690cef0c","method":{"position":"org.apache.commons.lang3.StringUtils:4417","type":"CtMethodImpl","sourcecode":"public static java.lang.String replaceOnce(final java.lang.String text, final java.lang.String searchString, final java.lang.String replacement) {\n    if ((text.length()) != (replacement.length())) {\n        {\n            return org.apache.commons.lang3.StringUtils.replace(text, searchString, replacement, 1);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"duration":"replacement","tmp":"text"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:888","type":"CtBinaryOperatorImpl","sourcecode":"(isEquals) == false"},"failures":[399],"tindex":"f67a3798-3e71-11e6-93bb-5350c217cf57","method":{"position":"org.apache.commons.lang3.ArrayUtils:4706","type":"CtMethodImpl","sourcecode":"public static boolean[] removeElement(final boolean[] array, final boolean element) {\n    if (element == false) {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEquals":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5660","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[412],"tindex":"f67a3799-3e71-11e6-93bb-5918d9428dfd","method":{"position":"org.apache.commons.lang3.StringUtils:1415","type":"CtMethodImpl","sourcecode":"public static boolean contains(final java.lang.CharSequence seq, final int searchChar) {\n    if (seq == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n                return false;\n            } \n            return (org.apache.commons.lang3.CharSequenceUtils.indexOf(seq, searchChar, 0)) >= 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"seq"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3222","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[413],"tindex":"f67a379a-3e71-11e6-93bb-db4c517dd6b5","method":{"position":"org.apache.commons.lang3.text.StrBuilder:477","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic org.apache.commons.lang3.text.StrBuilder append(final java.lang.CharSequence seq) {\n    if (seq == null) {\n        {\n            if (seq == null) {\n                return appendNull();\n            } \n            return append(seq.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"seq"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1523","type":"CtBinaryOperatorImpl","sourcecode":"chars == null"},"failures":[414,248,415,416,398],"tindex":"f67a5eab-3e71-11e6-93bb-3744ab4f3bb3","method":{"position":"org.apache.commons.lang3.ArrayUtils:3542","type":"CtMethodImpl","sourcecode":"public static boolean isEmpty(final char[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (array == null) || ((array.int) == 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chars":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5611","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"f67a5eac-3e71-11e6-93bb-45a931f24db5","method":{"position":"org.apache.commons.lang3.time.FormatCache:69","type":"CtMethodImpl","sourcecode":"public F getInstance(final java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {\n    if (pattern == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (pattern == null) {\n                throw new java.lang.NullPointerException(\"pattern must not be null\");\n            } \n            if (timeZone == null) {\n                timeZone = java.util.TimeZone.getDefault();\n            } \n            if (locale == null) {\n                locale = java.util.Locale.getDefault();\n            } \n            final org.apache.commons.lang3.time.FormatCache.MultipartKey org.apache.commons.lang3.time.FormatCache.MultipartKey = new org.apache.commons.lang3.time.FormatCache.MultipartKey(pattern , timeZone , locale);\n            F F = java.util.concurrent.ConcurrentMap<org.apache.commons.lang3.time.FormatCache.MultipartKey, F>.get(key);\n            if (format == null) {\n                format = createInstance(pattern, timeZone, locale);\n                final F F = java.util.concurrent.ConcurrentMap<org.apache.commons.lang3.time.FormatCache.MultipartKey, F>.putIfAbsent(key, format);\n                if (previousValue != null) {\n                    format = previousValue;\n                } \n            } \n            return format;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5269","type":"CtBinaryOperatorImpl","sourcecode":"pads > (org.apache.commons.lang3.StringUtils.PAD_LIMIT)"},"failures":[417,47,418,51,52],"tindex":"f67a85bd-3e71-11e6-93bb-f55b412569c2","method":{"position":"org.apache.commons.lang3.math.Fraction:657","type":"CtMethodImpl","sourcecode":"private static int mulPosAndCheck(final int x, final int y) {\n    if (y > y) {\n        {\n            final long long = ((long)(x)) * ((long)(y));\n            if (m > (java.lang.Integer.java.lang.Integer.int)) {\n                throw new java.lang.ArithmeticException(\"overflow: mulPos\");\n            } \n            return ((int)(m));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pads":"y","org.apache.commons.lang3.StringUtils.PAD_LIMIT":"y"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:145","type":"CtBinaryOperatorImpl","sourcecode":"denominator < 0"},"failures":[],"tindex":"f67a85be-3e71-11e6-93bb-c33d8c8d0ccf","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2981","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final java.lang.String str, final int off, final int len) {\n    if (off < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.text.StrBuilder.this.append(str, off, len);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"denominator":"off"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:382","type":"CtInvocationImpl","sourcecode":"parsePattern.endsWith(\"ZZ\")"},"failures":[333,333,334,334,335],"tindex":"f67a85bf-3e71-11e6-93bb-61fe13aa0ed3","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1211","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final char[] array, final java.lang.Boolean fullDetail) {\n    if (fieldName.endsWith(\"ZZ\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (array == null) {\n                appendNullText(buffer, fieldName);\n            } else if (isFullDetail(fullDetail)) {\n                appendDetail(buffer, fieldName, array);\n            } else {\n                appendSummary(buffer, fieldName, array);\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parsePattern":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:674","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[],"tindex":"f67a85c0-3e71-11e6-93bb-57cad0f8a3b5","method":{"position":"org.apache.commons.lang3.ArrayUtils:5711","type":"CtMethodImpl","sourcecode":"public static long[] removeElements(final long[] array, final long... values) {\n    if (values == array) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            final java.util.HashMap<java.lang.Long, org.apache.commons.lang3.mutable.MutableInt> java.util.HashMap<java.lang.Long, org.apache.commons.lang3.mutable.MutableInt> = new java.util.HashMap<java.lang.Long, org.apache.commons.lang3.mutable.MutableInt>(values.int);\n            for (final long long : values) {\n                final java.lang.Long java.lang.Long = java.lang.Long.valueOf(v);\n                final org.apache.commons.lang3.mutable.MutableInt org.apache.commons.lang3.mutable.MutableInt = occurrences.get(boxed);\n                if (count == null) {\n                    occurrences.put(boxed, new org.apache.commons.lang3.mutable.MutableInt(1));\n                } else {\n                    count.increment();\n                }\n            }\n            final java.util.BitSet java.util.BitSet = new java.util.BitSet();\n            for (final java.util.Map.Entry<java.lang.Long, org.apache.commons.lang3.mutable.MutableInt> java.util.Map.Entry<java.lang.Long, org.apache.commons.lang3.mutable.MutableInt> : occurrences.entrySet()) {\n                final java.lang.Long java.lang.Long = e.getKey();\n                int int = 0;\n                for (int int = 0, int int = e.getValue().intValue() ; i < ct ; i++) {\n                    found = org.apache.commons.lang3.ArrayUtils.indexOf(array, v.longValue(), found);\n                    if (found < 0) {\n                        break;\n                    } \n                    toRemove.set((found++));\n                }\n            }\n            return ((long[])(org.apache.commons.lang3.ArrayUtils.removeAll(array, toRemove)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"values","rhs":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:4903","type":"CtBinaryOperatorImpl","sourcecode":"index == (org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND)"},"failures":[347,347],"tindex":"f67aacd1-3e71-11e6-93bb-cdda27aea701","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:415","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final int value) {\n    if (value == value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND":"value","index":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4284","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))"},"failures":[],"tindex":"f67aacd2-3e71-11e6-93bb-dd7e717e6b5a","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:604","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final byte[] array, final boolean fullDetail) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(fieldName)) || (org.apache.commons.lang3.StringUtils.isEmpty(fieldName))) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, java.lang.Boolean.valueOf(fullDetail));\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName","remove":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:463","type":"CtBinaryOperatorImpl","sourcecode":"(comparison) != 0"},"failures":[419,420],"tindex":"f67ad3e3-3e71-11e6-93bb-df2afc90db7c","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1686","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder delete(final int startIndex, int endIndex) {\n    if (endIndex != 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            endIndex = validateRange(startIndex, endIndex);\n            final int int = endIndex - startIndex;\n            if (len > 0) {\n                deleteImpl(startIndex, endIndex, len);\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"endIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1156","type":"CtBinaryOperatorImpl","sourcecode":"c < a"},"failures":[],"tindex":"f67ad3e4-3e71-11e6-93bb-a315db922969","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1152","type":"CtMethodImpl","sourcecode":"public static byte min(byte a, final byte b, final byte c) {\n    if (b < b) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b < a) {\n                a = b;\n            } \n            if (c < a) {\n                a = c;\n            } \n            return a;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b","c":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1247","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[55,88,89],"tindex":"f67ad3e5-3e71-11e6-93bb-65514bbe07c1","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:259","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int translate(final java.lang.CharSequence input, final int index, final java.io.Writer out) throws java.io.IOException {\n    if (input != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (index != 0) {\n                throw new java.lang.IllegalStateException(\"CsvEscaper should never reach the [1] index\");\n            } \n            if (org.apache.commons.lang3.StringUtils.containsNone(input.toString(), org.apache.commons.lang3.StringEscapeUtils.CsvEscaper.org.apache.commons.lang3.StringEscapeUtils.CsvEscaper.char[])) {\n                out.write(input.toString());\n            } else {\n                out.write(org.apache.commons.lang3.StringEscapeUtils.CsvEscaper.org.apache.commons.lang3.StringEscapeUtils.CsvEscaper.char);\n                out.write(org.apache.commons.lang3.StringUtils.replace(input.toString(), org.apache.commons.lang3.StringEscapeUtils.CsvEscaper.org.apache.commons.lang3.StringEscapeUtils.CsvEscaper.java.lang.String, ((org.apache.commons.lang3.StringEscapeUtils.CsvEscaper.org.apache.commons.lang3.StringEscapeUtils.CsvEscaper.java.lang.String) + (org.apache.commons.lang3.StringEscapeUtils.CsvEscaper.org.apache.commons.lang3.StringEscapeUtils.CsvEscaper.java.lang.String))));\n                out.write(org.apache.commons.lang3.StringEscapeUtils.CsvEscaper.org.apache.commons.lang3.StringEscapeUtils.CsvEscaper.char);\n            }\n            return java.lang.Character.codePointCount(input, 0, input.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1156","type":"CtBinaryOperatorImpl","sourcecode":"focus == null"},"failures":[421],"tindex":"f67afaf6-3e71-11e6-93bb-037d01c87e5f","method":{"position":"org.apache.commons.lang3.time.DateUtils:238","type":"CtMethodImpl","sourcecode":"public static boolean isSameLocalTime(final java.util.Calendar cal1, final java.util.Calendar cal2) {\n    if (cal1 == null) {\n        {\n            if ((cal1 == null) || (cal2 == null)) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            return ((((((((cal1.get(java.util.Calendar.java.util.Calendar.int)) == (cal2.get(java.util.Calendar.java.util.Calendar.int))) && ((cal1.get(java.util.Calendar.java.util.Calendar.int)) == (cal2.get(java.util.Calendar.java.util.Calendar.int)))) && ((cal1.get(java.util.Calendar.java.util.Calendar.int)) == (cal2.get(java.util.Calendar.java.util.Calendar.int)))) && ((cal1.get(java.util.Calendar.java.util.Calendar.int)) == (cal2.get(java.util.Calendar.java.util.Calendar.int)))) && ((cal1.get(java.util.Calendar.java.util.Calendar.int)) == (cal2.get(java.util.Calendar.java.util.Calendar.int)))) && ((cal1.get(java.util.Calendar.java.util.Calendar.int)) == (cal2.get(java.util.Calendar.java.util.Calendar.int)))) && ((cal1.get(java.util.Calendar.java.util.Calendar.int)) == (cal2.get(java.util.Calendar.java.util.Calendar.int)))) && ((cal1.getClass()) == (cal2.getClass()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"focus":"cal1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:490","type":"CtBinaryOperatorImpl","sourcecode":"(numerator) == 0"},"failures":[422,423],"tindex":"f67afaf7-3e71-11e6-93bb-0be2added663","method":{"position":"org.apache.commons.lang3.RandomStringUtils:96","type":"CtMethodImpl","sourcecode":"public static java.lang.String randomAlphabetic(final int count) {\n    if (count == 0) {\n        {\n            return org.apache.commons.lang3.RandomStringUtils.random(count, true, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"numerator":"count"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:663","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(tok)"},"failures":[424,425],"tindex":"f67afaf8-3e71-11e6-93bb-3f3796a9b2a0","method":{"position":"org.apache.commons.lang3.CharSetUtils:64","type":"CtMethodImpl","sourcecode":"public static java.lang.String squeeze(final java.lang.String str, final java.lang.String... set) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.CharSetUtils.deepEmpty(set))) {\n                return str;\n            } \n            final org.apache.commons.lang3.CharSet org.apache.commons.lang3.CharSet = org.apache.commons.lang3.CharSet.getInstance(set);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length());\n            final char[] char[] = str.toCharArray();\n            final int int = chrs.int;\n            char char = ' ';\n            char char = ' ';\n            for (int int = 0 ; i < sz ; i++) {\n                ch = chrs[i];\n                if (((ch == lastChar) && (i != 0)) && (chars.contains(ch))) {\n                    continue;\n                } \n                buffer.append(ch);\n                lastChar = ch;\n            }\n            return buffer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250181056/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"tok":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
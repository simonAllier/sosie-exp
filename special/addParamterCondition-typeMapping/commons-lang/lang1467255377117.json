{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":241,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":100,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":134,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Boolean":298,"org.apache.commons.lang3.math.NumberUtilsTest.testLang381":420,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":94,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedFieldForceAccess":394,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray":21,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":242,"org.apache.commons.lang3.ArrayUtilsTest.testContainsLong":188,"org.apache.commons.lang3.mutable.MutableLongTest.testEquals":378,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedStaticField":455,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArrayEqualAsObject":253,"org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesBadStream":472,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":74,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":132,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array":342,"org.apache.commons.lang3.SystemUtilsTest.testGetUserHome":279,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":10,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":147,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":250,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_char":451,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray":20,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteFieldForceAccess":391,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetMatchingAccessibleMethod":288,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":33,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":239,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxShort":428,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude":22,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml11":382,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testGetContextValues":178,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":135,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiLongArray":446,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int":300,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":27,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":86,"org.apache.commons.lang3.RandomStringUtilsTest.testExceptions":162,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMixedArray":444,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":90,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int":337,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_FormattedString":339,"org.apache.commons.lang3.StringUtilsTest.testChomp":379,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedFormats":348,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomAscii":164,"org.apache.commons.lang3.reflect.TypeLiteralTest.testEquals":293,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":57,"org.apache.commons.lang3.ArrayUtilsTest.testReverseIntRange":118,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxShort_emptyArray":412,"org.apache.commons.lang3.reflect.TypeLiteralTest.testBasic":291,"org.apache.commons.lang3.time.DateUtilsTest.testSetMinutes":199,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Array":321,"org.apache.commons.lang3.exception.ContextedExceptionTest.testJavaSerialization":479,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":93,"org.apache.commons.lang3.mutable.MutableDoubleTest.testAddValueObject":436,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int":322,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":138,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringCharArrayWithSupplementaryChars":396,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringCharArrayWithBadSupplementaryChars":397,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxDouble":421,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":75,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":68,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeStartText":227,"org.apache.commons.lang3.AnnotationUtilsTest.testNonEquivalentAnnotationsOfSameType":361,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder":335,"org.apache.commons.lang3.SystemUtilsTest.testOSMatchesName":278,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testBlank":264,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeMethod":120,"org.apache.commons.lang3.AnnotationUtilsTest.testSameInstance":355,"org.apache.commons.lang3.math.NumberUtilsTest.testMinFloat":417,"org.apache.commons.lang3.CharEncodingTest.testWorksOnJava1_1_8":352,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull":16,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":65,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxDouble_emptyArray":413,"org.apache.commons.lang3.CharEncodingTest.testMustBeSupportedJava1_3_1":351,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_char":194,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":115,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":252,"org.apache.commons.lang3.AnnotationUtilsTest.testEquivalence":356,"org.apache.commons.lang3.exception.ContextedExceptionTest.testSetContextValue":180,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringString":399,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithNullText":313,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testBuiltInNumberFormat":350,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiIntArray":445,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentEnd":226,"org.apache.commons.lang3.CharEncodingTest.testWorksOnJava1_2_2":353,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText":325,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":64,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":49,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":79,"org.apache.commons.lang3.math.NumberUtilsTest.testMinDouble":422,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":127,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":248,"org.apache.commons.lang3.math.NumberUtilsTest.testMinLong":426,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":6,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":101,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder":314,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testBuiltInDateTimeFormat":345,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteField":390,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson":110,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":52,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String":320,"org.apache.commons.lang3.CharUtilsTest.testIsAsciiControl_char":407,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxInt_emptyArray":414,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments":281,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang303":468,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":9,"org.apache.commons.lang3.math.FractionTest.testFactory_String_improper":168,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":14,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char":323,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight":336,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedStaticFieldForceAccess":453,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":245,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_ThrowableWriter":117,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":148,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":43,"org.apache.commons.lang3.math.NumberUtilsTest.testMinInt":432,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":42,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testPerson":114,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":128,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":48,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang303":469,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testArrayList":140,"org.apache.commons.lang3.RandomStringUtilsTest.testLANG807":163,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":63,"org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytes":473,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":251,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testBlank":212,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":62,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer":324,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxInt":431,"org.apache.commons.lang3.SerializationUtilsTest.testDeserializeClassCastException":475,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int":304,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection":15,"org.apache.commons.lang3.builder.DiffResultTest.testNullStyle":217,"org.apache.commons.lang3.SystemUtilsTest.testOSMatchesNameAndVersion":271,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":51,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsInstance":282,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_String":161,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Object":315,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":85,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Collection":305,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_charInt":195,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Object":329,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":36,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":144,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementByteArray":386,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":126,"org.apache.commons.lang3.tuple.ImmutableTripleTest.testSerialization":374,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testBlank":211,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullLhs":261,"org.apache.commons.lang3.SystemUtilsTest.testJavaAwtHeadless":274,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadFieldForceAccess":467,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectEndText":237,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiByteArray":441,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int":319,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":249,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":23,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":91,"org.apache.commons.lang3.StringUtilsTest.testRemoveEnd":380,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable":266,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance":369,"org.apache.commons.lang3.builder.DiffTest.testGetFieldName":222,"org.apache.commons.lang3.builder.DiffBuilderTest.testSameObjectIgnoresAppends":257,"org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives":381,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray":269,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":289,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":88,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":99,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":30,"org.apache.commons.lang3.math.NumberUtilsTest.testMinInt_emptyArray":429,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArraySeparator":235,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetFirstContextValue":173,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":40,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":247,"org.apache.commons.lang3.time.DateUtilsTest.testCeil":197,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":1,"org.apache.commons.lang3.math.NumberUtilsTest.testMinFloat_emptyArray":416,"org.apache.commons.lang3.builder.DiffTest.testToString":223,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testLinkedList":142,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxByte":423,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":256,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert":183,"org.apache.commons.lang3.tuple.ImmutableTripleTest.testEquals":375,"org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringIntStringBoolean":343,"org.apache.commons.lang3.event.EventUtilsTest.testBindFilteredEventsToMethod":123,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":31,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetContextValues":182,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiDoubleArray":447,"org.apache.commons.lang3.SystemUtilsTest.testIS_OS":272,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedStaticFieldForceAccess":464,"org.apache.commons.lang3.AnnotationUtilsTest.testGeneratedAnnotationEquivalentToRealAnnotation":359,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":260,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":81,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int":330,"org.apache.commons.lang3.builder.CompareToBuilderTest.testShortArrayHiddenByObject":387,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":243,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray":17,"org.apache.commons.lang3.time.DateUtilsTest.testAddMilliseconds":208,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":12,"org.apache.commons.lang3.math.NumberUtilsTest.testMinDouble_emptyArray":409,"org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitives":448,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":95,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringWithSupplementaryChars":400,"org.apache.commons.lang3.ClassUtilsTest.test_convertClassesToClassNames_List":405,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":66,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":192,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":103,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":56,"org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables":284,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldNameValueSeparator":231,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats":349,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxByte_emptyArray":410,"org.apache.commons.lang3.BitFieldTest.testSetShortBoolean":404,"org.apache.commons.lang3.time.DateUtilsTest.testAddHours":200,"org.apache.commons.lang3.reflect.TypeLiteralTest.testRaw":290,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson":3,"org.apache.commons.lang3.StringUtilsTest.testRemoveStartIgnoreCase":184,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils":167,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber":297,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvString":402,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedStaticField":459,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testSetContextValue":172,"org.apache.commons.lang3.ArrayUtilsTest.testContainsBoolean":383,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":44,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":35,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeEndText":230,"org.apache.commons.lang3.ValidateTest.testExclusiveBetweenDouble_withMessage":435,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringWithBadSupplementaryChars":398,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":105,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson":7,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringCharArray":401,"org.apache.commons.lang3.SystemUtilsTest.testConstructor":280,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":287,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":98,"org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesOfNull":476,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":97,"org.apache.commons.lang3.time.DateUtilsTest.testSetYears":210,"org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitivesNull":450,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String":318,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong":5,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedField":395,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson":28,"org.apache.commons.lang3.SystemUtilsTest.testGetUserDir":275,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":109,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":216,"org.apache.commons.lang3.time.DateUtilsTest.testAddSeconds":198,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int":327,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":32,"org.apache.commons.lang3.time.DateUtilsTest.testAddMonths":205,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiCharArray":438,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":25,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiShortArray":389,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiBooleanArray":442,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":69,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder":316,"org.apache.commons.lang3.math.NumberUtilsTest.testMinShort":419,"org.apache.commons.lang3.time.DateUtilsTest.testSetMonths":206,"org.apache.commons.lang3.builder.DiffResultTest.testNullRhs":220,"org.apache.commons.lang3.SystemUtilsTest.testGetJavaHome":277,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_String":119,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":102,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethodWithEvent":124,"org.apache.commons.lang3.RandomStringUtilsTest.testLang100":165,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String":332,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredField":465,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":129,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat":346,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int":341,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":70,"org.apache.commons.lang3.StringUtilsTest.testOverlay_StringStringIntInt":160,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":80,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String_int_int":303,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang303":470,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethod":122,"org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getRootCauseMessage_Throwable":186,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_ThrowableStream":366,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":137,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawType":286,"org.apache.commons.lang3.time.FastDateFormatTest.testDateDefaults":370,"org.apache.commons.lang3.math.NumberUtilsTest.testMinByte":425,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":139,"org.apache.commons.lang3.builder.CompareToBuilderTest.testShortArray":388,"org.apache.commons.lang3.exception.ContextedExceptionTest.testAddContextValue":179,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":143,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Widening":267,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testJavaSerialization":477,"org.apache.commons.lang3.builder.CompareToBuilderTest.testObjectArray":437,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":34,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":107,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testBlank":221,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int":296,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiFloatArray":443,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String":317,"org.apache.commons.lang3.event.EventUtilsTest.testAddEventListener":121,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":72,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":125,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":46,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWithIgnoreCase":185,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int":308,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxFloat_emptyArray":418,"org.apache.commons.lang3.time.DateUtilsTest.testAddWeeks":201,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":246,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendNewLine":307,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":41,"org.apache.commons.lang3.time.FastDateParserTest.testLang303":471,"org.apache.commons.lang3.AnnotationUtilsTest.testBothArgsNull":360,"org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringIntInt":377,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":26,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":106,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":96,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetNullText":229,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testLang299":312,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":47,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":83,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":54,"org.apache.commons.lang3.builder.DiffTest.testCannotModify":224,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":11,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetRootCauseStackTrace_Throwable":367,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Iterator":310,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContains_Char":193,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":258,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Boolean":299,"org.apache.commons.lang3.math.NumberUtilsTest.testMinShort_emptyArray":411,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls":24,"org.apache.commons.lang3.AnnotationUtilsTest.testOneArgNull":354,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":283,"org.apache.commons.lang3.reflect.TypeUtilsTest.testDetermineTypeVariableAssignments":285,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":244,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":263,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_DefaultUnboxing_Widening":268,"org.apache.commons.lang3.builder.DiffResultTest.testNullList":214,"org.apache.commons.lang3.tuple.TripleTest.testCompatibilityBetweenTriples":371,"org.apache.commons.lang3.ArrayUtilsTest.testContainsInt":434,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_FormattedString":328,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":59,"org.apache.commons.lang3.SystemUtilsTest.testJavaVersionMatches":270,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":131,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":82,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":73,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvWriter":403,"org.apache.commons.lang3.ConversionTest.testShortToByteArray":0,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String_int_int":333,"org.apache.commons.lang3.LocaleUtilsTest.testToLocale_3Part":365,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testSetContextValue":176,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayByte":368,"org.apache.commons.lang3.StringUtilsTest.testToString":363,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":133,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testBlank":265,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayShort":158,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomNumeric":166,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":136,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":60,"org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_int":408,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":218,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":89,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer":309,"org.apache.commons.lang3.time.DateUtilsTest.testSetHours":209,"org.apache.commons.lang3.builder.DiffResultTest.testNoDifferencesString":215,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":45,"org.apache.commons.lang3.SystemUtilsTest.testGetJavaIoTmpDir":273,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testBlank":213,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":84,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testAddContextValue":175,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":238,"org.apache.commons.lang3.ObjectUtilsTest.testToString_ObjectString":384,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":67,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection":294,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedField":392,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":4,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":240,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray":340,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":108,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":259,"org.apache.commons.lang3.reflect.TypeLiteralTest.testTyped":292,"org.apache.commons.lang3.math.NumberUtilsTest.testMinLong_emptyArray":433,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":92,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedFieldForceAccess":393,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":50,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":255,"org.apache.commons.lang3.builder.CompareToBuilderTest.testObjectArrayHiddenByObject":440,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxLong":424,"org.apache.commons.lang3.StringUtilsTest.testToEncodedString":364,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringString":190,"org.apache.commons.lang3.math.NumberUtilsTest.testMinByte_emptyArray":430,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldForceAccess":466,"org.apache.commons.lang3.SerializationUtilsTest.testRoundtrip":474,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection":18,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":13,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":113,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadField":460,"org.apache.commons.lang3.time.DateUtilsTest.testAddYears":202,"org.apache.commons.lang3.AnnotationUtilsTest.testAnnotationsOfDifferingTypes":357,"org.apache.commons.lang3.tuple.MutableTripleTest.testEquals":373,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":254,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char":311,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testCopyOnWriteArrayList":141,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":71,"org.apache.commons.lang3.builder.DiffResultTest.testNullLhs":219,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":130,"org.apache.commons.lang3.ArrayUtilsTest.testToString":157,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testGetFirstContextValue":177,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentStart":228,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxFloat":427,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int":301,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":37,"org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringInt":344,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLong":112,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendPadding":331,"org.apache.commons.lang3.SystemUtilsTest.testIS_JAVA":276,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldAccessIllegalArgumentException1":461,"org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getMessage_Throwable":187,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectStartText":233,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldAccessIllegalArgumentException4":463,"org.apache.commons.lang3.AnnotationUtilsTest.testHashCode":358,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldAccessIllegalArgumentException3":462,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":61,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testJavaSerialization":478,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber":334,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":111,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator":191,"org.apache.commons.lang3.builder.DiffTest.testGetType":225,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":19,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":87,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft":302,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":76,"org.apache.commons.lang3.text.StrTokenizerTest.test8":156,"org.apache.commons.lang3.time.DateUtilsTest.testRound":196,"org.apache.commons.lang3.text.StrTokenizerTest.test5":153,"org.apache.commons.lang3.text.StrTokenizerTest.test4":152,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedField":452,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":77,"org.apache.commons.lang3.text.StrTokenizerTest.test7":155,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":78,"org.apache.commons.lang3.text.StrTokenizerTest.test6":154,"org.apache.commons.lang3.text.StrTokenizerTest.test1":149,"org.apache.commons.lang3.text.StrTokenizerTest.test3":151,"org.apache.commons.lang3.text.StrTokenizerTest.test2":150,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":53,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldSeparator":234,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":29,"org.apache.commons.lang3.tuple.MutableTripleTest.testSerialization":372,"org.apache.commons.lang3.AnnotationUtilsTest.testIsValidAnnotationMemberType":362,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":8,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetFirstContextValue":181,"org.apache.commons.lang3.StringUtilsTest.testCaseFunctions":159,"org.apache.commons.lang3.time.DateUtilsTest.testSetDays":207,"org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitiveNull":449,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder":306,"org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_String":385,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldForceAccessIllegalArgumentException1":456,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldForceAccessIllegalArgumentException3":457,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":39,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldForceAccessIllegalArgumentException4":458,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetContextValues":174,"org.apache.commons.lang3.math.FractionTest.testFactory_String_proper":170,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testAddContextValue":171,"org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringInt":376,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":145,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayEnd":232,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxLong_emptyArray":415,"org.apache.commons.lang3.builder.DiffBuilderTest.testNullRhs":262,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":38,"org.apache.commons.lang3.math.FractionTest.testFactory_String_double":169,"org.apache.commons.lang3.builder.CompareToBuilderTest.testRaggedArray":439,"org.apache.commons.lang3.time.DateUtilsTest.testTruncateLang59":203,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray":338,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testBuiltInChoiceFormat":347,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayStart":236,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":2,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringStringWithSupplementaryChars":189,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":104,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":58,"org.apache.commons.lang3.AnnotationUtilsTest.testToString":116,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedFieldForceAccess":454,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsertWithNullText":295,"org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Integer_Integer_Integer":406,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":55,"org.apache.commons.lang3.time.DateUtilsTest.testSetSeconds":204,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int":326,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":146},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:220","type":"CtBinaryOperatorImpl","sourcecode":"lhs != rhs"},"failures":[],"tindex":"3700e8fb-3e6e-11e6-8bf4-2314a9363343","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:526","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final byte lhs, final byte rhs) {\n    if (rhs != rhs) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            int = lhs < rhs ? -1 : lhs > rhs ? 1 : 0;\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs","rhs":"rhs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:173","type":"CtBinaryOperatorImpl","sourcecode":"(nullText != null) && (nullText.isEmpty())"},"failures":[],"tindex":"3701d35c-3e6e-11e6-8bf4-1f201681ab44","method":{"position":"org.apache.commons.lang3.math.NumberUtils:99","type":"CtMethodImpl","sourcecode":"public static int toInt(final java.lang.String str) {\n    if ((str != null) && (nullText.isEmpty())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nullText":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2656","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[0],"tindex":"3701fa6d-3e6e-11e6-8bf4-dd11614d901f","method":{"position":"org.apache.commons.lang3.Conversion:1356","type":"CtMethodImpl","sourcecode":"public static byte[] shortToByteArray(final short src, final int srcPos, final byte[] dst, final int dstPos, final int nBytes) {\n    if (dstPos < 0) {\n        {\n            if (0 == nBytes) {\n                return dst;\n            } \n            if ((((nBytes - 1) * 8) + srcPos) >= 16) {\n                throw new java.lang.IllegalArgumentException(\"(nBytes-1)*8+srcPos is greather or equal to than 16\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nBytes ; i++) {\n                shift = (i * 8) + srcPos;\n                dst[(dstPos + i)] = ((byte)(255 & (src >> shift)));\n            }\n            return dst;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"dstPos"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2332","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,34,35,36,36,37,38,39,39,40,41,41,42,43,43,44,44,45,45,46,47,48,49,49,50,51,52,53,54,54,55,55,56,57,57,58,58,59,59,60,61,62,62,63,63,64,65,66,66,67,68,69,70,71,72,72,73,73,74,75,76,77,78,79,80,80,81,82,83,83,84,85,86,86,87,88,89,89,90,90,91,92,93,94,94,95,96,97,98,98,99,99,100,100,101,102,103,104,104,105,105,106,107,108,109,110,111,112,113,114,115,116],"tindex":"3702217e-3e6e-11e6-8bf4-69007b57663d","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1534","type":"CtMethodImpl","sourcecode":"protected void appendFieldEnd(final java.lang.StringBuffer buffer, final java.lang.String fieldName) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(fieldName)) {\n        {\n            appendFieldSeparator(buffer);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1313","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"3702488f-3e6e-11e6-8bf4-879c15db1d01","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:424","type":"CtMethodImpl","sourcecode":"private static boolean isAssignable(final java.lang.reflect.Type type, final java.lang.reflect.ParameterizedType toParameterizedType, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeVarAssigns) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type == null) {\n                return true;\n            } \n            if (toParameterizedType == null) {\n                return false;\n            } \n            if (toParameterizedType.equals(type)) {\n                return true;\n            } \n            final java.lang.Class<?> java.lang.Class<?> = org.apache.commons.lang3.reflect.TypeUtils.getRawType(toParameterizedType);\n            final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(type, toClass, null);\n            if (fromTypeVarAssigns == null) {\n                return false;\n            } \n            if (fromTypeVarAssigns.isEmpty()) {\n                return true;\n            } \n            final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(toParameterizedType, toClass, typeVarAssigns);\n            for (final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> : toTypeVarAssigns.keySet()) {\n                final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariableAssignments(var, toTypeVarAssigns);\n                final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariableAssignments(var, fromTypeVarAssigns);\n                if (((fromTypeArg != null) && (!(toTypeArg.equals(fromTypeArg)))) && (!((toTypeArg instanceof java.lang.reflect.WildcardType) && (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(fromTypeArg, toTypeArg, typeVarAssigns))))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:649","type":"CtBinaryOperatorImpl","sourcecode":"pos >= count"},"failures":[],"tindex":"3703a820-3e6e-11e6-8bf4-6177c48a82b4","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:712","type":"CtMethodImpl","sourcecode":"public boolean replaceIn(final org.apache.commons.lang3.text.StrBuilder source, final int offset, final int length) {\n    if (length >= length) {\n        {\n            if (source == null) {\n                return false;\n            } \n            return substitute(source, offset, length);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"length","count":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:153","type":"CtBinaryOperatorImpl","sourcecode":"cause != null"},"failures":[117],"tindex":"3703cf31-3e6e-11e6-8bf4-e90de97dfbfe","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:488","type":"CtMethodImpl","sourcecode":"public static void printRootCauseStackTrace(final java.lang.Throwable throwable, final java.io.PrintWriter writer) {\n    if (throwable != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (throwable == null) {\n                return ;\n            } \n            if (writer == null) {\n                throw new java.lang.IllegalArgumentException(\"The PrintWriter must not be null\");\n            } \n            final java.lang.String[] java.lang.String[] = org.apache.commons.lang3.exception.ExceptionUtils.getRootCauseStackTrace(throwable);\n            for (final java.lang.String java.lang.String : trace) {\n                writer.println(element);\n            }\n            writer.flush();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cause":"throwable"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2769","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[118],"tindex":"3703f642-3e6e-11e6-8bf4-f19981290616","method":{"position":"org.apache.commons.lang3.ArrayUtils:1748","type":"CtMethodImpl","sourcecode":"public static void reverse(final int[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (startIndexInclusive < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return ;\n            } \n            int int = startIndexInclusive < 0 ? 0 : startIndexInclusive;\n            int int = (java.lang.Math.min(array.int, endIndexExclusive)) - 1;\n            int int;\n            while (j > i) {\n                tmp = array[j];\n                array[j] = array[i];\n                array[i] = tmp;\n                j--;\n                i++;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"startIndexInclusive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6911","type":"CtBinaryOperatorImpl","sourcecode":"n > m"},"failures":[],"tindex":"3703f643-3e6e-11e6-8bf4-0ffdfb6bcd1d","method":{"position":"org.apache.commons.lang3.StringUtils:1415","type":"CtMethodImpl","sourcecode":"public static boolean contains(final java.lang.CharSequence seq, final int searchChar) {\n    if (searchChar > searchChar) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n                return false;\n            } \n            return (org.apache.commons.lang3.CharSequenceUtils.indexOf(seq, searchChar, 0)) >= 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"searchChar","n":"searchChar"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:931","type":"CtBinaryOperatorImpl","sourcecode":"(toProperString) == null"},"failures":[119],"tindex":"37041d54-3e6e-11e6-8bf4-7f535dfa3f5d","method":{"position":"org.apache.commons.lang3.StringUtils:926","type":"CtMethodImpl","sourcecode":"public static int indexOf(final java.lang.CharSequence seq, final java.lang.CharSequence searchSeq) {\n    if (seq == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((seq == null) || (searchSeq == null)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.indexOf(seq, searchSeq, 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toProperString":"seq"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:537","type":"CtVariableReadImpl","sourcecode":"detail"},"failures":[72,72,73,73,74,75,76,77,78,79,80,81,82,83,84,85,86,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"tindex":"37041d55-3e6e-11e6-8bf4-2f561970127e","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:623","type":"CtMethodImpl","sourcecode":"public void setAppendStatics(final boolean appendStatics) {\n    if (appendStatics) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.boolean = appendStatics;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"detail":"appendStatics"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.NoSuchMethodException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:570","type":"CtBinaryOperatorImpl","sourcecode":"delimiters == null"},"failures":[120,121,122,123,124],"tindex":"37044466-3e6e-11e6-8bf4-a717ddaaf25e","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:119","type":"CtMethodImpl","sourcecode":"public static java.lang.Object invokeMethod(final java.lang.Object object, final java.lang.String methodName, java.lang.Object[] args, java.lang.Class<?>[] parameterTypes) throws java.lang.IllegalAccessException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (object == null) {\n        {\n            parameterTypes = org.apache.commons.lang3.ArrayUtils.nullToEmpty(parameterTypes);\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            final java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.getMatchingAccessibleMethod(object.getClass(), methodName, parameterTypes);\n            if (method == null) {\n                throw new java.lang.NoSuchMethodException((((\"No such accessible method: \" + methodName) + \"() on object: \") + (object.getClass().getName())));\n            } \n            return method.invoke(object, args);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.NoSuchMethodException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delimiters":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:973","type":"CtInvocationImpl","sourcecode":"isFullDetail(fullDetail)"},"failures":[],"tindex":"37046b77-3e6e-11e6-8bf4-49c0912d9c65","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1468","type":"CtMethodImpl","sourcecode":"protected void appendIdentityHashCode(final java.lang.StringBuffer buffer, final java.lang.Object object) {\n    if ((org.apache.commons.lang3.builder.ToStringStyle.this.isUseIdentityHashCode()) && (object != null)) {\n        org.apache.commons.lang3.builder.ToStringStyle.register(object);\n        buffer.append('@');\n        buffer.append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(object)));\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"object","fullDetail":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:427","type":"CtBinaryOperatorImpl","sourcecode":"bool == null"},"failures":[125,126,127,2,3,4,128,129,130,6,7,8,131,132,133,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,134,135,136,27,28,29,137,138,139,31,32,33,34,34,35,35,36,36,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,50,50,51,52,53,54,55,56,57,58,59,60,61,61,62,62,63,64,65,66,66,67,67,68,68,69,70,71,72,72,73,73,74,75,76,77,78,79,80,80,81,82,82,83,83,84,84,85,85,86,86,87,88,89,89,90,90,91,92,93,93,94,95,95,96,97,97,98,98,99,99,100,100,101,102,103,104,104,105,105,106,106,107,140,141,142,143,144,145,109,110,111,146,147,148,113,114,115,149,150,151,152,153,154,155,156,116,157],"tindex":"37049288-3e6e-11e6-8bf4-8fe921320702","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1573","type":"CtMethodImpl","sourcecode":"protected boolean isFullDetail(final java.lang.Boolean fullDetailRequest) {\n    if (fullDetailRequest == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fullDetailRequest == null) {\n                return boolean;\n            } \n            return fullDetailRequest.booleanValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"fullDetailRequest"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3760","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[158],"tindex":"37049289-3e6e-11e6-8bf4-a58e93ab0417","method":{"position":"org.apache.commons.lang3.ArrayUtils:4232","type":"CtMethodImpl","sourcecode":"public static short[] add(final short[] array, final short element) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final short[] short[] = ((short[])(org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(array, java.lang.Short.java.lang.Short.java.lang.Class<java.lang.Short>)));\n            newArray[((newArray.int) - 1)] = element;\n            return newArray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5414","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(padStr)"},"failures":[159],"tindex":"3704b99a-3e6e-11e6-8bf4-0b9cb90fce13","method":{"position":"org.apache.commons.lang3.StringUtils:5610","type":"CtMethodImpl","sourcecode":"public static java.lang.String upperCase(final java.lang.String str, final java.util.Locale locale) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return str.toUpperCase(locale);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"padStr":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2254","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) <= (pos + len)"},"failures":[160],"tindex":"3704b99b-3e6e-11e6-8bf4-453fa70532c8","method":{"position":"org.apache.commons.lang3.StringUtils:4937","type":"CtMethodImpl","sourcecode":"public static java.lang.String overlay(final java.lang.String str, java.lang.String overlay, int start, int end) {\n    if ((overlay.length()) <= (end + start)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (overlay == null) {\n                overlay = org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = str.length();\n            if (start < 0) {\n                start = 0;\n            } \n            if (start > len) {\n                start = len;\n            } \n            if (end < 0) {\n                end = 0;\n            } \n            if (end > len) {\n                end = len;\n            } \n            if (start > end) {\n                final int int = start;\n                start = end;\n                end = temp;\n            } \n            return new java.lang.StringBuilder(((((len + start) - end) + (overlay.length())) + 1)).append(str.substring(0, start)).append(overlay).append(str.substring(end)).toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"overlay","len":"start","pos":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:240","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.CharUtils.isAsciiNumeric(ch)) == false"},"failures":[],"tindex":"3704e0ac-3e6e-11e6-8bf4-a1400cffa071","method":{"position":"org.apache.commons.lang3.ArrayUtils:2979","type":"CtMethodImpl","sourcecode":"public static char[] toPrimitive(final java.lang.Character[] array, final char valueForNull) {\n    if ((org.apache.commons.lang3.CharUtils.isAsciiNumeric(valueForNull)) == false) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.char[];\n            } \n            final char[] char[] = new char[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Character java.lang.Character = array[i];\n                result[i] = b == null ? valueForNull : b.charValue();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"valueForNull"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:507","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[161],"tindex":"3704e0ad-3e6e-11e6-8bf4-793b6b59ddb4","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2445","type":"CtMethodImpl","sourcecode":"public int lastIndexOf(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return lastIndexOf(str, ((int) - 1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3150","type":"CtBinaryOperatorImpl","sourcecode":"match || (preserveAllTokens && lastMatch)"},"failures":[162,163,164,165,166,167],"tindex":"3704e0ae-3e6e-11e6-8bf4-13df3b710ec3","method":{"position":"org.apache.commons.lang3.RandomStringUtils:162","type":"CtMethodImpl","sourcecode":"public static java.lang.String random(final int count, final int start, final int end, final boolean letters, final boolean numbers) {\n    if (letters || (numbers && letters)) {\n        {\n            return org.apache.commons.lang3.RandomStringUtils.random(count, start, end, letters, numbers, null, org.apache.commons.lang3.RandomStringUtils.org.apache.commons.lang3.RandomStringUtils.java.util.Random);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"preserveAllTokens":"numbers","lastMatch":"letters","match":"letters"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3088","type":"CtBinaryOperatorImpl","sourcecode":"separatorChars == null"},"failures":[],"tindex":"3704e0af-3e6e-11e6-8bf4-ef121a46f40a","method":{"position":"org.apache.commons.lang3.time.FastDateParser:618","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid setCalendar(final org.apache.commons.lang3.time.FastDateParser parser, final java.util.Calendar cal, final java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.Integer java.lang.Integer = java.util.Map<java.lang.String, java.lang.Integer>.get(value);\n            if (iVal == null) {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(value);\n                sb.append(\" not in (\");\n                for (final java.lang.String java.lang.String : java.util.Map<java.lang.String, java.lang.Integer>.keySet()) {\n                    sb.append(textKeyValue).append(' ');\n                }\n                sb.setCharAt(((sb.length()) - 1), ')');\n                throw new java.lang.IllegalArgumentException(sb.toString());\n            } \n            cal.set(int, iVal.intValue());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separatorChars":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5660","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[168,169,170],"tindex":"370507c0-3e6e-11e6-8bf4-2f1a354c13aa","method":{"position":"org.apache.commons.lang3.math.Fraction:319","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.math.Fraction getFraction(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                throw new java.lang.IllegalArgumentException(\"The string must not be null\");\n            } \n            int int = str.indexOf('.');\n            if (pos >= 0) {\n                return org.apache.commons.lang3.math.Fraction.getFraction(java.lang.Double.parseDouble(str));\n            } \n            pos = str.indexOf(' ');\n            if (pos > 0) {\n                final int int = java.lang.Integer.parseInt(str.substring(0, pos));\n                str = str.substring((pos + 1));\n                pos = str.indexOf('/');\n                if (pos < 0) {\n                    throw new java.lang.NumberFormatException(\"The fraction could not be parsed as the format X Y/Z\");\n                } else {\n                    final int int = java.lang.Integer.parseInt(str.substring(0, pos));\n                    final int int = java.lang.Integer.parseInt(str.substring((pos + 1)));\n                    return org.apache.commons.lang3.math.Fraction.getFraction(whole, numer, denom);\n                }\n            } \n            pos = str.indexOf('/');\n            if (pos < 0) {\n                return org.apache.commons.lang3.math.Fraction.getFraction(java.lang.Integer.parseInt(str), 1);\n            } else {\n                final int int = java.lang.Integer.parseInt(str.substring(0, pos));\n                final int int = java.lang.Integer.parseInt(str.substring((pos + 1)));\n                return org.apache.commons.lang3.math.Fraction.getFraction(numer, denom);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:534","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[171,172,173,174,175,176,177,178,179,180,181,182],"tindex":"370507c1-3e6e-11e6-8bf4-ff19fb5cb9be","method":{"position":"org.apache.commons.lang3.exception.DefaultExceptionContext:91","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object getFirstContextValue(final java.lang.String label) {\n    if (label == null) {\n        {\n            for (final org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object> org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object> : java.util.List<org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object>>) {\n                if (org.apache.commons.lang3.StringUtils.equals(label, pair.getKey())) {\n                    return pair.getValue();\n                } \n            }\n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"label"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5311","type":"CtBinaryOperatorImpl","sourcecode":"(padLen == 1) && (pads <= (org.apache.commons.lang3.StringUtils.PAD_LIMIT))"},"failures":[183],"tindex":"37052ed2-3e6e-11e6-8bf4-a371469f78ae","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1575","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(int index, final boolean value) {\n    if ((index == 1) && (index <= index)) {\n        {\n            validateIndex(index);\n            if (value) {\n                ensureCapacity(((int) + 4));\n                java.lang.System.arraycopy(char[], index, char[], (index + 4), ((int) - index));\n                char[][(index++)] = 't';\n                char[][(index++)] = 'r';\n                char[][(index++)] = 'u';\n                char[][index] = 'e';\n                int += 4;\n            } else {\n                ensureCapacity(((int) + 5));\n                java.lang.System.arraycopy(char[], index, char[], (index + 5), ((int) - index));\n                char[][(index++)] = 'f';\n                char[][(index++)] = 'a';\n                char[][(index++)] = 'l';\n                char[][(index++)] = 's';\n                char[][index] = 'e';\n                int += 5;\n            }\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pads":"index","padLen":"index","org.apache.commons.lang3.StringUtils.PAD_LIMIT":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:631","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"37052ed3-3e6e-11e6-8bf4-25524afa3bce","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if (buffer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (calendar.get(java.util.Calendar.java.util.Calendar.int)) + (calendar.get(java.util.Calendar.java.util.Calendar.int));\n            if (offset < 0) {\n                buffer.append('-');\n                offset = -offset;\n            } else {\n                buffer.append('+');\n            }\n            final int int = offset / ((60 * 60) * 1000);\n            buffer.append(((char)((hours / 10) + '0')));\n            buffer.append(((char)((hours % 10) + '0')));\n            if (boolean) {\n                buffer.append(':');\n            } \n            final int int = (offset / (60 * 1000)) - (60 * hours);\n            buffer.append(((char)((minutes / 10) + '0')));\n            buffer.append(((char)((minutes % 10) + '0')));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"buffer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:912","type":"CtBinaryOperatorImpl","sourcecode":"(toString) == null"},"failures":[184,185],"tindex":"370555e4-3e6e-11e6-8bf4-3559729e6e34","method":{"position":"org.apache.commons.lang3.StringUtils:7187","type":"CtMethodImpl","sourcecode":"public static boolean startsWithIgnoreCase(final java.lang.CharSequence str, final java.lang.CharSequence prefix) {\n    if (prefix == null) {\n        {\n            return org.apache.commons.lang3.StringUtils.startsWith(str, prefix, true);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toString":"prefix"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:153","type":"CtBinaryOperatorImpl","sourcecode":"cause != null"},"failures":[186,187],"tindex":"370555e5-3e6e-11e6-8bf4-c1931a41f903","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:671","type":"CtMethodImpl","sourcecode":"public static java.lang.String getMessage(final java.lang.Throwable th) {\n    if (th != null) {\n        {\n            if (th == null) {\n                return \"\";\n            } \n            final java.lang.String java.lang.String = org.apache.commons.lang3.ClassUtils.getShortClassName(th, null);\n            final java.lang.String java.lang.String = th.getMessage();\n            return (clsName + \": \") + (org.apache.commons.lang3.StringUtils.defaultString(msg));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cause":"th"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:554","type":"CtBinaryOperatorImpl","sourcecode":"str == \"true\""},"failures":[],"tindex":"3705cb16-3e6e-11e6-8bf4-b1d2154c5e78","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1494","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, java.lang.String str) {\n    if (str == \"true\") {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            validateIndex(index);\n            if (str == null) {\n                str = java.lang.String;\n            } \n            if (str != null) {\n                final int int = str.length();\n                if (strLen > 0) {\n                    final int int = (int) + strLen;\n                    ensureCapacity(newSize);\n                    java.lang.System.arraycopy(char[], index, char[], (index + strLen), ((int) - index));\n                    int = newSize;\n                    str.getChars(0, strLen, char[], index);\n                } \n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1305","type":"CtBinaryOperatorImpl","sourcecode":"typeArgument == null"},"failures":[],"tindex":"3705f227-3e6e-11e6-8bf4-b5e2e57319ed","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1658","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.lang.reflect.Type type) {\n    if (type == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.notNull(type);\n            if (type instanceof java.lang.Class<?>) {\n                return org.apache.commons.lang3.reflect.TypeUtils.classToString(((java.lang.Class<?>)(type)));\n            } \n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.parameterizedTypeToString(((java.lang.reflect.ParameterizedType)(type)));\n            } \n            if (type instanceof java.lang.reflect.WildcardType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.wildcardTypeToString(((java.lang.reflect.WildcardType)(type)));\n            } \n            if (type instanceof java.lang.reflect.TypeVariable<?>) {\n                return org.apache.commons.lang3.reflect.TypeUtils.typeVariableToString(((java.lang.reflect.TypeVariable<?>)(type)));\n            } \n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.genericArrayTypeToString(((java.lang.reflect.GenericArrayType)(type)));\n            } \n            throw new java.lang.IllegalArgumentException(org.apache.commons.lang3.ObjectUtils.identityToString(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeArgument":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:253","type":"CtBinaryOperatorImpl","sourcecode":"input != null"},"failures":[],"tindex":"37086328-3e6e-11e6-8bf4-658cf97e6e19","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:199","type":"CtMethodImpl","sourcecode":"public static int reflectionCompare(final java.lang.Object lhs, final java.lang.Object rhs, final java.util.Collection<java.lang.String> excludeFields) {\n    if (lhs != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.CompareToBuilder.reflectionCompare(lhs, rhs, org.apache.commons.lang3.builder.ReflectionToStringBuilder.toNoNullStringArray(excludeFields));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"lhs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4954","type":"CtBinaryOperatorImpl","sourcecode":"end > len"},"failures":[],"tindex":"37088a39-3e6e-11e6-8bf4-393a5fca94e5","method":{"position":"org.apache.commons.lang3.time.DateUtils:1327","type":"CtMethodImpl","sourcecode":"public static long getFragmentInSeconds(final java.util.Date date, final int fragment) {\n    if (fragment > fragment) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.getFragment(date, fragment, java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"fragment","end":"fragment"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:970","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[188],"tindex":"37088a3a-3e6e-11e6-8bf4-c1517aab0a62","method":{"position":"org.apache.commons.lang3.ArrayUtils:2090","type":"CtMethodImpl","sourcecode":"public static boolean contains(final long[] array, final long valueToFind) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:726","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"37088a3b-3e6e-11e6-8bf4-69a9e3821287","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:583","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void set(final java.lang.String obj) {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException(\"set() is unsupported\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2073","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[189,190],"tindex":"37088a3c-3e6e-11e6-8bf4-b1ac2ef9e4e2","method":{"position":"org.apache.commons.lang3.StringUtils:1759","type":"CtMethodImpl","sourcecode":"public static int indexOfAnyBut(final java.lang.CharSequence seq, final java.lang.CharSequence searchChars) {\n    if (searchChars == null) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(seq)) || (org.apache.commons.lang3.StringUtils.isEmpty(searchChars))) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            final int int = seq.length();\n            for (int int = 0 ; i < strLen ; i++) {\n                final char char = seq.charAt(i);\n                final boolean boolean = (org.apache.commons.lang3.CharSequenceUtils.indexOf(searchChars, ch, 0)) >= 0;\n                if (((i + 1) < strLen) && (java.lang.Character.isHighSurrogate(ch))) {\n                    final char char = seq.charAt((i + 1));\n                    if (chFound && ((org.apache.commons.lang3.CharSequenceUtils.indexOf(searchChars, ch2, 0)) < 0)) {\n                        return i;\n                    } \n                } else {\n                    if (!chFound) {\n                        return i;\n                    } \n                }\n            }\n            return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"searchChars"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:1128","type":"CtBinaryOperatorImpl","sourcecode":"(className.length()) > 0"},"failures":[191],"tindex":"3708b14d-3e6e-11e6-8bf4-11f198d38407","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1179","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendWithSeparators(final java.util.Iterator<?> it, final java.lang.String separator) {\n    if ((separator.length()) > 0) {\n        {\n            if (it != null) {\n                @java.lang.SuppressWarnings(value = \"deprecation\")\n                final java.lang.String java.lang.String = org.apache.commons.lang3.ObjectUtils.toString(separator);\n                while (it.hasNext()) {\n                    append(it.next());\n                    if (it.hasNext()) {\n                        append(sep);\n                    } \n                }\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.RecursiveToStringStyle:72","type":"CtBinaryOperatorImpl","sourcecode":"((!(org.apache.commons.lang3.ClassUtils.isPrimitiveWrapper(value.getClass()))) && (!(java.lang.String.class.equals(value.getClass())))) && (accept(value.getClass()))"},"failures":[],"tindex":"3708b14e-3e6e-11e6-8bf4-2395533a6f28","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:528","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if ((obj instanceof org.apache.commons.lang3.time.FastDatePrinter) == false) {\n        return false;\n    } \n    final org.apache.commons.lang3.time.FastDatePrinter org.apache.commons.lang3.time.FastDatePrinter = ((org.apache.commons.lang3.time.FastDatePrinter)(obj));\n    return ((java.lang.String.equals(other.java.lang.String)) && (java.util.TimeZone.equals(other.java.util.TimeZone))) && (java.util.Locale.equals(other.java.util.Locale));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"obj","this":"obj","value":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1291","type":"CtBinaryOperatorImpl","sourcecode":"0 == nBytes"},"failures":[],"tindex":"3708d85f-3e6e-11e6-8bf4-5f1f3342f272","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:337","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle, final java.util.TimeZone timeZone) {\n    if (0 == timeStyle) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBytes":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1145","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(valueDelimiter)"},"failures":[137,192,30,138,139,31,32,33],"tindex":"3708d860-3e6e-11e6-8bf4-31d0b146e0ea","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:203","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setArrayStart(final java.lang.String arrayStart) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(arrayStart)) {\n        {\n            super.setArrayStart(arrayStart);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"valueDelimiter":"arrayStart"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2030","type":"CtBinaryOperatorImpl","sourcecode":"tmp > ret"},"failures":[],"tindex":"3708d861-3e6e-11e6-8bf4-3d228f14bd45","method":{"position":"org.apache.commons.lang3.CharSequenceUtils:144","type":"CtMethodImpl","sourcecode":"static int lastIndexOf(final java.lang.CharSequence cs, final java.lang.CharSequence searchChar, final int start) {\n    if (start > start) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return cs.toString().lastIndexOf(searchChar.toString(), start);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ret":"start","tmp":"start"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1552","type":"CtBinaryOperatorImpl","sourcecode":"0 == nBools"},"failures":[189,190,193,194,195],"tindex":"3708ff72-3e6e-11e6-8bf4-93bddf08fff8","method":{"position":"org.apache.commons.lang3.CharSequenceUtils:69","type":"CtMethodImpl","sourcecode":"static int indexOf(final java.lang.CharSequence cs, final int searchChar, int start) {\n    if (0 == start) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cs instanceof java.lang.String) {\n                return ((java.lang.String)(cs)).indexOf(searchChar, start);\n            } else {\n                final int int = cs.length();\n                if (start < 0) {\n                    start = 0;\n                } \n                for (int int = start ; i < sz ; i++) {\n                    if ((cs.charAt(i)) == searchChar) {\n                        return i;\n                    } \n                }\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"start"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:135","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,125,125,211,211,1,1,126,126,127,127,2,2,3,3,4,4,128,128,212,212,5,5,129,129,130,130,6,6,7,7,8,8,131,131,213,213,9,9,132,132,133,133,10,10,11,11,12,12,13,14,214,215,216,217,218,219,220,15,16,17,18,19,20,21,22,23,24,25,134,134,221,221,26,26,135,135,136,136,27,27,28,28,29,29,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,137,192,30,138,139,31,32,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,140,141,142,143,143,264,264,108,108,144,144,145,145,109,109,110,110,111,111,146,146,265,265,112,112,147,147,148,148,113,113,114,114,115,115,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,191,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,183,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,149,150,151,152,153,154,155,156,351,352,353,354,116,355,356,357,358,359,360,361,362,363,364,365,157,366,117,367],"tindex":"3708ff73-3e6e-11e6-8bf4-d7955f768497","method":{"position":"org.apache.commons.lang3.SystemUtils:1344","type":"CtMethodImpl","sourcecode":"private static java.lang.String getSystemProperty(final java.lang.String property) {\n    if (property == null) {\n        {\n            try {\n                return java.lang.System.getProperty(property);\n            } catch (final java.lang.SecurityException ex) {\n                java.lang.System.java.lang.System.java.io.PrintStream.println(((\"Caught a SecurityException reading the system property '\" + property) + \"'; the SystemUtils property value will default to null.\"));\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1693","type":"CtBinaryOperatorImpl","sourcecode":"nBytes >= 8"},"failures":[194],"tindex":"37092684-3e6e-11e6-8bf4-8940152b6545","method":{"position":"org.apache.commons.lang3.StringUtils:862","type":"CtMethodImpl","sourcecode":"public static int indexOf(final java.lang.CharSequence seq, final int searchChar) {\n    if (searchChar >= 8) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.indexOf(seq, searchChar, 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBytes":"searchChar"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:578","type":"CtBinaryOperatorImpl","sourcecode":"(u == 0) || (v == 0)"},"failures":[],"tindex":"37092685-3e6e-11e6-8bf4-23b2b263b2d5","method":{"position":"org.apache.commons.lang3.BooleanUtils:465","type":"CtMethodImpl","sourcecode":"public static int toInteger(final java.lang.Boolean bool, final int trueValue, final int falseValue, final int nullValue) {\n    if ((trueValue == 0) || (falseValue == 0)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bool == null) {\n                return nullValue;\n            } \n            return bool.booleanValue() ? trueValue : falseValue;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"u":"trueValue","v":"falseValue"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1886","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isHighSurrogate(ch)"},"failures":[304],"tindex":"37094d96-3e6e-11e6-8bf4-71f90e10b507","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1417","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(final int value, final int width, final char padChar) {\n    if (java.lang.Character.isHighSurrogate(padChar)) {\n        {\n            return appendFixedWidthPadLeft(java.lang.String.valueOf(value), width, padChar);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"padChar"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1431","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[287,289],"tindex":"37094d97-3e6e-11e6-8bf4-a3e5cae23021","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1363","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type unrollVariables(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeArguments, final java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            if (typeArguments == null) {\n                typeArguments = java.util.Collections.<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>emptyMap();\n            } \n            if (org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(type)) {\n                if (type instanceof java.lang.reflect.TypeVariable<?>) {\n                    return org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(typeArguments, typeArguments.get(type));\n                } \n                if (type instanceof java.lang.reflect.ParameterizedType) {\n                    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n                    final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>;\n                    if ((p.getOwnerType()) == null) {\n                        parameterizedTypeArguments = typeArguments;\n                    } else {\n                        parameterizedTypeArguments = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>(typeArguments);\n                        parameterizedTypeArguments.putAll(org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(p));\n                    }\n                    final java.lang.reflect.Type[] java.lang.reflect.Type[] = p.getActualTypeArguments();\n                    for (int int = 0 ; i < (args.int) ; i++) {\n                        final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(parameterizedTypeArguments, args[i]);\n                        if (unrolled != null) {\n                            args[i] = unrolled;\n                        } \n                    }\n                    return org.apache.commons.lang3.reflect.TypeUtils.parameterizeWithOwner(p.getOwnerType(), ((java.lang.Class<?>)(p.getRawType())), args);\n                } \n                if (type instanceof java.lang.reflect.WildcardType) {\n                    final java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n                    return org.apache.commons.lang3.reflect.TypeUtils.wildcardType().withUpperBounds(org.apache.commons.lang3.reflect.TypeUtils.unrollBounds(typeArguments, wild.getUpperBounds())).withLowerBounds(org.apache.commons.lang3.reflect.TypeUtils.unrollBounds(typeArguments, wild.getLowerBounds())).build();\n                } \n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:854","type":"CtBinaryOperatorImpl","sourcecode":"lhs == null"},"failures":[368],"tindex":"370974a8-3e6e-11e6-8bf4-9de90cf21a81","method":{"position":"org.apache.commons.lang3.ArrayUtils:4070","type":"CtMethodImpl","sourcecode":"public static byte[] add(final byte[] array, final byte element) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final byte[] byte[] = ((byte[])(org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(array, java.lang.Byte.java.lang.Byte.java.lang.Class<java.lang.Byte>)));\n            newArray[((newArray.int) - 1)] = element;\n            return newArray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1393","type":"CtBinaryOperatorImpl","sourcecode":"strLen >= width"},"failures":[369,370],"tindex":"370974a9-3e6e-11e6-8bf4-b3f680cdafe6","method":{"position":"org.apache.commons.lang3.time.FormatCache:159","type":"CtMethodImpl","sourcecode":"F getDateInstance(final int dateStyle, final java.util.TimeZone timeZone, java.util.Locale locale) {\n    if (dateStyle >= dateStyle) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return getDateTimeInstance(java.lang.Integer.valueOf(dateStyle), null, timeZone, locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strLen":"dateStyle","width":"dateStyle"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.SystemUtils:1429","type":"CtBinaryOperatorImpl","sourcecode":"version == null"},"failures":[371,372,373,374,375],"tindex":"370974aa-3e6e-11e6-8bf4-cf8830e80e9b","method":{"position":"org.apache.commons.lang3.tuple.Triple:110","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"deprecation\")\n@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj == null) {\n        {\n            if (obj == (org.apache.commons.lang3.tuple.Triple.this)) {\n                return true;\n            } \n            if (obj instanceof org.apache.commons.lang3.tuple.Triple<?, ?, ?>) {\n                final org.apache.commons.lang3.tuple.Triple<?, ?, ?> org.apache.commons.lang3.tuple.Triple<?, ?, ?> = ((org.apache.commons.lang3.tuple.Triple<?, ?, ?>)(obj));\n                return ((org.apache.commons.lang3.ObjectUtils.equals(getLeft(), other.getLeft())) && (org.apache.commons.lang3.ObjectUtils.equals(getMiddle(), other.getMiddle()))) && (org.apache.commons.lang3.ObjectUtils.equals(getRight(), other.getRight()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:762","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[376,377],"tindex":"37099bbb-3e6e-11e6-8bf4-f71ec8837f13","method":{"position":"org.apache.commons.lang3.StringUtils:6392","type":"CtMethodImpl","sourcecode":"public static java.lang.String abbreviate(final java.lang.String str, int offset, final int maxWidth) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (maxWidth < 4) {\n                throw new java.lang.IllegalArgumentException(\"Minimum abbreviation width is 4\");\n            } \n            if ((str.length()) <= maxWidth) {\n                return str;\n            } \n            if (offset > (str.length())) {\n                offset = str.length();\n            } \n            if (((str.length()) - offset) < (maxWidth - 3)) {\n                offset = (str.length()) - (maxWidth - 3);\n            } \n            final java.lang.String java.lang.String = \"...\";\n            if (offset <= 4) {\n                return (str.substring(0, (maxWidth - 3))) + abrevMarker;\n            } \n            if (maxWidth < 7) {\n                throw new java.lang.IllegalArgumentException(\"Minimum abbreviation width with offset is 7\");\n            } \n            if (((offset + maxWidth) - 3) < (str.length())) {\n                return abrevMarker + (org.apache.commons.lang3.StringUtils.abbreviate(str.substring(offset), (maxWidth - 3)));\n            } \n            return abrevMarker + (str.substring(((str.length()) - (maxWidth - 3))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:355","type":"CtBinaryOperatorImpl","sourcecode":"ch < 256"},"failures":[],"tindex":"370a10ec-3e6e-11e6-8bf4-d9e6a3d4b114","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1016","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final char ch) {\n    if (ch < 256) {\n        {\n            return append(ch).appendNewLine();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:801","type":"CtBinaryOperatorImpl","sourcecode":"(((nBytes - 1) * 8) + dstPos) >= 64"},"failures":[297,334],"tindex":"370b225d-3e6e-11e6-8bf4-17a74821105a","method":{"position":"org.apache.commons.lang3.text.StrBuilder:808","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final int value) {\n    if ((((value - 1) * 8) + value) >= 64) {\n        {\n            return append(java.lang.String.valueOf(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"value","nBytes":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:511","type":"CtBinaryOperatorImpl","sourcecode":"(comparison) != 0"},"failures":[],"tindex":"370b225e-3e6e-11e6-8bf4-09db0b2e323d","method":{"position":"org.apache.commons.lang3.time.DateUtils:828","type":"CtMethodImpl","sourcecode":"public static java.util.Calendar truncate(final java.util.Calendar date, final int field) {\n    if (field != 0) {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            final java.util.Calendar java.util.Calendar = ((java.util.Calendar)(date.clone()));\n            org.apache.commons.lang3.time.DateUtils.modify(truncated, field, org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int);\n            return truncated;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:735","type":"CtInvocationImpl","sourcecode":"str.equals(falseString)"},"failures":[125,1,126,127,2,3,4,128,5,129,130,6,7,8,131,9,132,133,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,134,26,135,136,27,28,29,137,30,138,139,31,32,33,34,34,35,35,36,36,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,52,53,54,54,55,55,56,57,57,58,58,59,59,60,61,61,62,62,63,63,64,65,66,66,67,67,68,68,69,70,71,72,72,73,73,74,75,76,77,78,79,80,80,81,82,82,83,83,84,84,85,85,86,86,87,88,89,89,90,90,91,92,93,93,94,94,95,95,96,97,97,98,98,99,99,100,100,101,102,103,104,104,105,105,106,106,107,140,141,142,143,108,144,145,109,110,111,146,112,147,148,113,114,115,149,150,151,152,153,154,155,156,116,157],"tindex":"370b496f-3e6e-11e6-8bf4-2fb3a4f15d0d","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1521","type":"CtMethodImpl","sourcecode":"protected void appendFieldStart(final java.lang.StringBuffer buffer, final java.lang.String fieldName) {\n    if (fieldName.equals(fieldName)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((boolean) && (fieldName != null)) {\n                buffer.append(fieldName);\n                buffer.append(java.lang.String);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"fieldName","falseString":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:995","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[378],"tindex":"370b7080-3e6e-11e6-8bf4-1703367ba57f","method":{"position":"org.apache.commons.lang3.mutable.MutableLong:235","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj == null) {\n        {\n            if (obj instanceof org.apache.commons.lang3.mutable.MutableLong) {\n                return (long) == (((org.apache.commons.lang3.mutable.MutableLong)(obj)).longValue());\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSetUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[379,380],"tindex":"370b7081-3e6e-11e6-8bf4-b95554193131","method":{"position":"org.apache.commons.lang3.StringUtils:4283","type":"CtMethodImpl","sourcecode":"public static java.lang.String removeEnd(final java.lang.String str, final java.lang.String remove) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {\n                return str;\n            } \n            if (str.endsWith(remove)) {\n                return str.substring(0, ((str.length()) - (remove.length())));\n            } \n            return str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7059","type":"CtBinaryOperatorImpl","sourcecode":"(m1.length()) != (m2.length())"},"failures":[],"tindex":"370b7082-3e6e-11e6-8bf4-a535835346a8","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:164","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.StrTokenizer getCSVInstance(final java.lang.String input) {\n    if ((input.length()) != (input.length())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.lang3.text.StrTokenizer org.apache.commons.lang3.text.StrTokenizer = org.apache.commons.lang3.text.StrTokenizer.getCSVClone();\n            tok.reset(input);\n            return tok;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m1":"input","m2":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1349","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"370b7083-3e6e-11e6-8bf4-c7bd25e78011","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1623","type":"CtMethodImpl","sourcecode":"private static boolean equals(java.lang.reflect.WildcardType w, java.lang.reflect.Type t) {\n    if (t instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (t instanceof java.lang.reflect.WildcardType) {\n                final java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(t));\n                return (org.apache.commons.lang3.reflect.TypeUtils.equals(w.getLowerBounds(), other.getLowerBounds())) && (org.apache.commons.lang3.reflect.TypeUtils.equals(org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(w), org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(other)));\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"t"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2559","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[381],"tindex":"370b9794-3e6e-11e6-8bf4-fb4385fa0bfb","method":{"position":"org.apache.commons.lang3.ArrayUtils:3665","type":"CtMethodImpl","sourcecode":"public static boolean isNotEmpty(final double[] array) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        {\n            return (array != null) && ((array.int) != 0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:353","type":"CtBinaryOperatorImpl","sourcecode":"ch < 16"},"failures":[],"tindex":"370b9795-3e6e-11e6-8bf4-11006b61ed57","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1869","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder replaceFirst(final char search, final char replace) {\n    if (replace < 16) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (search != replace) {\n                for (int int = 0 ; i < (int) ; i++) {\n                    if ((char[][i]) == search) {\n                        char[][i] = replace;\n                        break;\n                    } \n                }\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"replace"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:536","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[382],"tindex":"370b9796-3e6e-11e6-8bf4-19dac4db3669","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:728","type":"CtMethodImpl","sourcecode":"public static java.lang.String escapeXml11(final java.lang.String input) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(input)) {\n        {\n            return org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(input);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomStringUtils:238","type":"CtBinaryOperatorImpl","sourcecode":"(!letters) && (!numbers)"},"failures":[383],"tindex":"370bbea7-3e6e-11e6-8bf4-93748ebf0cd8","method":{"position":"org.apache.commons.lang3.ArrayUtils:2939","type":"CtMethodImpl","sourcecode":"public static boolean contains(final boolean[] array, final boolean valueToFind) {\n    if ((!valueToFind) && (!valueToFind)) {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"numbers":"valueToFind","letters":"valueToFind"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomStringUtils:274","type":"CtBinaryOperatorImpl","sourcecode":"count == 0"},"failures":[],"tindex":"370bbea8-3e6e-11e6-8bf4-55e8fdc65d29","method":{"position":"org.apache.commons.lang3.time.DateUtils:1726","type":"CtMethodImpl","sourcecode":"public static boolean truncatedEquals(final java.util.Calendar cal1, final java.util.Calendar cal2, final int field) {\n    if (field == 0) {\n        {\n            return (org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(cal1, cal2, field)) == 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2271","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[384],"tindex":"370bbea9-3e6e-11e6-8bf4-e3f9d7359e96","method":{"position":"org.apache.commons.lang3.ObjectUtils:422","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String toString(final java.lang.Object obj, final java.lang.String nullStr) {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return obj == null ? nullStr : obj.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:671","type":"CtInvocationImpl","sourcecode":"str.equals(nullString)"},"failures":[385],"tindex":"370bbeaa-3e6e-11e6-8bf4-53763785f6b1","method":{"position":"org.apache.commons.lang3.BooleanUtils:709","type":"CtMethodImpl","sourcecode":"public static boolean toBoolean(final java.lang.String str) {\n    if (str.equals(str)) {\n        {\n            return (org.apache.commons.lang3.BooleanUtils.toBooleanObject(str)) == (java.lang.Boolean.java.lang.Boolean.java.lang.Boolean);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str","nullString":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5356","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))"},"failures":[386],"tindex":"370be5bb-3e6e-11e6-8bf4-5db69d39b88d","method":{"position":"org.apache.commons.lang3.ArrayUtils:5355","type":"CtMethodImpl","sourcecode":"public static byte[] removeElements(final byte[] array, final byte... values) {\n    if ((org.apache.commons.lang3.ArrayUtils.isEmpty(values)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(array))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            final java.util.HashMap<java.lang.Byte, org.apache.commons.lang3.mutable.MutableInt> java.util.HashMap<java.lang.Byte, org.apache.commons.lang3.mutable.MutableInt> = new java.util.HashMap<java.lang.Byte, org.apache.commons.lang3.mutable.MutableInt>(values.int);\n            for (final byte byte : values) {\n                final java.lang.Byte java.lang.Byte = java.lang.Byte.valueOf(v);\n                final org.apache.commons.lang3.mutable.MutableInt org.apache.commons.lang3.mutable.MutableInt = occurrences.get(boxed);\n                if (count == null) {\n                    occurrences.put(boxed, new org.apache.commons.lang3.mutable.MutableInt(1));\n                } else {\n                    count.increment();\n                }\n            }\n            final java.util.BitSet java.util.BitSet = new java.util.BitSet();\n            for (final java.util.Map.Entry<java.lang.Byte, org.apache.commons.lang3.mutable.MutableInt> java.util.Map.Entry<java.lang.Byte, org.apache.commons.lang3.mutable.MutableInt> : occurrences.entrySet()) {\n                final java.lang.Byte java.lang.Byte = e.getKey();\n                int int = 0;\n                for (int int = 0, int int = e.getValue().intValue() ; i < ct ; i++) {\n                    found = org.apache.commons.lang3.ArrayUtils.indexOf(array, v.byteValue(), found);\n                    if (found < 0) {\n                        break;\n                    } \n                    toRemove.set((found++));\n                }\n            }\n            return ((byte[])(org.apache.commons.lang3.ArrayUtils.removeAll(array, toRemove)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"values","values":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.AnnotationUtils:126","type":"CtBinaryOperatorImpl","sourcecode":"(a1 == null) || (a2 == null)"},"failures":[],"tindex":"370be5bc-3e6e-11e6-8bf4-5f87cd073531","method":{"position":"org.apache.commons.lang3.AnnotationUtils:195","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final java.lang.annotation.Annotation a) {\n    if ((a == null) || (a == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.lang3.builder.ToStringBuilder org.apache.commons.lang3.builder.ToStringBuilder = new org.apache.commons.lang3.builder.ToStringBuilder(a , org.apache.commons.lang3.AnnotationUtils.org.apache.commons.lang3.AnnotationUtils.org.apache.commons.lang3.builder.ToStringStyle);\n            for (final java.lang.reflect.Method java.lang.reflect.Method : a.annotationType().getDeclaredMethods()) {\n                if ((m.getParameterTypes().int) > 0) {\n                    continue;\n                } \n                try {\n                    builder.append(m.getName(), m.invoke(a));\n                } catch (final java.lang.RuntimeException ex) {\n                    throw ex;\n                } catch (final java.lang.Exception ex) {\n                    throw new java.lang.RuntimeException(ex);\n                }\n            }\n            return builder.build();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a1":"a","a2":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:738","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[],"tindex":"370c0ccd-3e6e-11e6-8bf4-cfe043946452","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:434","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String format(final java.util.Calendar calendar) {\n    if (calendar == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.FastDatePrinter.format(calendar);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"calendar"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1854","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[387,388,389],"tindex":"370d454e-3e6e-11e6-8bf4-abb9deaec897","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:767","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final short[] lhs, final short[] rhs) {\n    if (rhs == null) {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:593","type":"CtBinaryOperatorImpl","sourcecode":"v > 0"},"failures":[319],"tindex":"370d6c5f-3e6e-11e6-8bf4-791c644a2a5e","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1348","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendSeparator(final char separator, final int loopIndex) {\n    if (loopIndex > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (loopIndex > 0) {\n                append(separator);\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"v":"loopIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5623","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))"},"failures":[],"tindex":"370d9370-3e6e-11e6-8bf4-31cad4151401","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:187","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final java.lang.Object object, final org.apache.commons.lang3.builder.ToStringStyle style, final boolean outputTransients) {\n    if ((org.apache.commons.lang3.ArrayUtils.isEmpty(object)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(object))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(object, style, outputTransients, false, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"object","values":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.CharUtils:130","type":"CtBinaryOperatorImpl","sourcecode":"ch == null"},"failures":[390,391,392,393,394,395],"tindex":"370d9371-3e6e-11e6-8bf4-77888d668420","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:641","type":"CtMethodImpl","sourcecode":"public static void writeField(final java.lang.reflect.Field field, final java.lang.Object target, final java.lang.Object value, final boolean forceAccess) throws java.lang.IllegalAccessException {\n    if (target == null) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((field != null), \"The field must not be null\");\n            if (forceAccess && (!(field.isAccessible()))) {\n                field.setAccessible(true);\n            } else {\n                org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(field);\n            }\n            field.set(target, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:658","type":"CtBinaryOperatorImpl","sourcecode":"trueString == null"},"failures":[],"tindex":"370d9372-3e6e-11e6-8bf4-5bc3af8739b2","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:394","type":"CtMethodImpl","sourcecode":"public void appendEnd(final java.lang.StringBuffer buffer, final java.lang.Object object) {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.builder.ToStringStyle.this.boolean) == false) {\n                removeLastFieldSeparator(buffer);\n            } \n            appendContentEnd(buffer);\n            org.apache.commons.lang3.builder.ToStringStyle.unregister(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"trueString":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:778","type":"CtBinaryOperatorImpl","sourcecode":"classes == null"},"failures":[269],"tindex":"370d9373-3e6e-11e6-8bf4-e97ad6c4a4bd","method":{"position":"org.apache.commons.lang3.ClassUtils:477","type":"CtMethodImpl","sourcecode":"public static boolean isAssignable(final java.lang.Class<?>[] classArray, final java.lang.Class<?>... toClassArray) {\n    if (toClassArray == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ClassUtils.isAssignable(classArray, toClassArray, org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion.org.apache.commons.lang3.JavaVersion.org.apache.commons.lang3.JavaVersion));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classes":"toClassArray"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2811","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"370dba84-3e6e-11e6-8bf4-a1be37b66b8b","method":{"position":"org.apache.commons.lang3.ArrayUtils:2808","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final float[] array, final float valueToFind, int startIndex) {\n    if (startIndex == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } else if (startIndex >= (array.int)) {\n                startIndex = (array.int) - 1;\n            } \n            for (int int = startIndex ; i >= 0 ; i--) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"startIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:732","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[396,397,398,399,400,401,402,403],"tindex":"370dba85-3e6e-11e6-8bf4-9b7de2cc2f2f","method":{"position":"org.apache.commons.lang3.StringUtils:1618","type":"CtMethodImpl","sourcecode":"public static boolean containsAny(final java.lang.CharSequence cs, final char... searchChars) {\n    if (cs != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars))) {\n                return false;\n            } \n            final int int = cs.length();\n            final int int = searchChars.int;\n            final int int = csLength - 1;\n            final int int = searchLength - 1;\n            for (int int = 0 ; i < csLength ; i++) {\n                final char char = cs.charAt(i);\n                for (int int = 0 ; j < searchLength ; j++) {\n                    if ((searchChars[j]) == ch) {\n                        if (java.lang.Character.isHighSurrogate(ch)) {\n                            if (j == searchLast) {\n                                return true;\n                            } \n                            if ((i < csLast) && ((searchChars[(j + 1)]) == (cs.charAt((i + 1))))) {\n                                return true;\n                            } \n                        } else {\n                            return true;\n                        }\n                    } \n                }\n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4253","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.startsWithIgnoreCase(str, remove)"},"failures":[],"tindex":"370de196-3e6e-11e6-8bf4-891b8e8338a3","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2072","type":"CtMethodImpl","sourcecode":"public boolean startsWith(final java.lang.String str) {\n    if (org.apache.commons.lang3.StringUtils.startsWithIgnoreCase(str, str)) {\n        {\n            if (str == null) {\n                return false;\n            } \n            final int int = str.length();\n            if (len == 0) {\n                return true;\n            } \n            if (len > (int)) {\n                return false;\n            } \n            for (int int = 0 ; i < len ; i++) {\n                if ((char[][i]) != (str.charAt(i))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str","remove":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:763","type":"CtFieldReadImpl","sourcecode":"objectsTriviallyEqual"},"failures":[404],"tindex":"370de197-3e6e-11e6-8bf4-e5ff405a7ea1","method":{"position":"org.apache.commons.lang3.BitField:266","type":"CtMethodImpl","sourcecode":"public short setShortBoolean(final short holder, final boolean flag) {\n    if (flag) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return flag ? setShort(holder) : clearShort(holder);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectsTriviallyEqual":"flag"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:146","type":"CtBinaryOperatorImpl","sourcecode":"(((org.apache.commons.lang3.StringUtils.isAllLowerCase(split[0])) && (((split[0].length()) == 2) || ((split[0].length()) == 3))) && (((split[1].length()) == 0) || (((split[1].length()) == 2) && (org.apache.commons.lang3.StringUtils.isAllUpperCase(split[1]))))) && ((split[2].length()) > 0)"},"failures":[],"tindex":"370de198-3e6e-11e6-8bf4-35337afe06c2","method":{"position":"org.apache.commons.lang3.CharSetUtils:64","type":"CtMethodImpl","sourcecode":"public static java.lang.String squeeze(final java.lang.String str, final java.lang.String... set) {\n    if ((((org.apache.commons.lang3.StringUtils.isAllLowerCase(set[0])) && (((split[0].length()) == 2) || ((split[0].length()) == 3))) && (((split[1].length()) == 0) || (((split[1].length()) == 2) && (org.apache.commons.lang3.StringUtils.isAllUpperCase(split[1]))))) && ((split[2].length()) > 0)) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.CharSetUtils.deepEmpty(set))) {\n                return str;\n            } \n            final org.apache.commons.lang3.CharSet org.apache.commons.lang3.CharSet = org.apache.commons.lang3.CharSet.getInstance(set);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length());\n            final char[] char[] = str.toCharArray();\n            final int int = chrs.int;\n            char char = ' ';\n            char char = ' ';\n            for (int int = 0 ; i < sz ; i++) {\n                ch = chrs[i];\n                if (((ch == lastChar) && (i != 0)) && (chars.contains(ch))) {\n                    continue;\n                } \n                buffer.append(ch);\n                lastChar = ch;\n            }\n            return buffer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"split":"set"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:220","type":"CtBinaryOperatorImpl","sourcecode":"lhs != rhs"},"failures":[],"tindex":"370e08a9-3e6e-11e6-8bf4-6533d26fcef3","method":{"position":"org.apache.commons.lang3.ObjectUtils:765","type":"CtMethodImpl","sourcecode":"public static byte CONST(final byte v) {\n    if (v != v) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return v;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"v","rhs":"v"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:425","type":"CtBinaryOperatorImpl","sourcecode":"classes == null"},"failures":[405],"tindex":"370e08aa-3e6e-11e6-8bf4-432029cfc379","method":{"position":"org.apache.commons.lang3.ClassUtils:424","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> convertClassesToClassNames(final java.util.List<java.lang.Class<?>> classes) {\n    if (classes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (classes == null) {\n                return null;\n            } \n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>(classes.size());\n            for (final java.lang.Class<?> java.lang.Class<?> : classes) {\n                if (cls == null) {\n                    classNames.add(null);\n                } else {\n                    classNames.add(cls.getName());\n                }\n            }\n            return classNames;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classes":"classes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:357","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[406],"tindex":"370e08ab-3e6e-11e6-8bf4-4d43f9632b34","method":{"position":"org.apache.commons.lang3.BooleanUtils:289","type":"CtMethodImpl","sourcecode":"public static boolean toBoolean(final java.lang.Integer value, final java.lang.Integer trueValue, final java.lang.Integer falseValue) {\n    if (falseValue == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                if (trueValue == null) {\n                    return true;\n                } \n                if (falseValue == null) {\n                    return false;\n                } \n            } else if (value.equals(trueValue)) {\n                return true;\n            } else if (value.equals(falseValue)) {\n                return false;\n            } \n            throw new java.lang.IllegalArgumentException(\"The Integer did not match either specified value\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"falseValue"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:388","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.doubleToLongBits(lhs)) != (java.lang.Double.doubleToLongBits(rhs))"},"failures":[],"tindex":"370e08ac-3e6e-11e6-8bf4-2518631a75e9","method":{"position":"org.apache.commons.lang3.Validate:1125","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"boxing\")\npublic static void exclusiveBetween(double start, double end, double value) {\n    if ((java.lang.Double.doubleToLongBits(start)) != (java.lang.Double.doubleToLongBits(end))) {\n        {\n            if ((value <= start) || (value >= end)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, value, start, end));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"start","rhs":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5731","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLowerCase(firstChar)"},"failures":[407],"tindex":"370e2fbd-3e6e-11e6-8bf4-d9561f57418e","method":{"position":"org.apache.commons.lang3.CharUtils:440","type":"CtMethodImpl","sourcecode":"public static boolean isAsciiControl(final char ch) {\n    if (java.lang.Character.isLowerCase(ch)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (ch < 32) || (ch == 127);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstChar":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2530","type":"CtBinaryOperatorImpl","sourcecode":"start < 0"},"failures":[],"tindex":"370e2fbe-3e6e-11e6-8bf4-b9c387f8c6ca","method":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:73","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.translate.UnicodeEscaper above(final int codepoint) {\n    if (codepoint < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.text.translate.UnicodeEscaper.outsideOf(0, codepoint);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"codepoint"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2202","type":"CtBinaryOperatorImpl","sourcecode":"length <= 0"},"failures":[408],"tindex":"370e2fbf-3e6e-11e6-8bf4-1d48e4509b28","method":{"position":"org.apache.commons.lang3.BooleanUtils:198","type":"CtMethodImpl","sourcecode":"public static boolean toBoolean(final int value) {\n    if (value <= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value != 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:64","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433],"tindex":"370e2fc0-3e6e-11e6-8bf4-a53fb0a3d3d9","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1080","type":"CtMethodImpl","sourcecode":"private static void validateArray(final java.lang.Object array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                throw new java.lang.IllegalArgumentException(\"The Array must not be null\");\n            } else if ((java.lang.reflect.Array.getLength(array)) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Array cannot be empty.\");\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2873","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[434],"tindex":"370e56d1-3e6e-11e6-8bf4-c53bbdbfb9ad","method":{"position":"org.apache.commons.lang3.ArrayUtils:2193","type":"CtMethodImpl","sourcecode":"public static boolean contains(final int[] array, final int valueToFind) {\n    if (valueToFind < 0) {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"valueToFind"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:688","type":"CtBinaryOperatorImpl","sourcecode":"(comparison) != 0"},"failures":[],"tindex":"370e56d2-3e6e-11e6-8bf4-4bf5c2c58e02","method":{"position":"org.apache.commons.lang3.math.Fraction:639","type":"CtMethodImpl","sourcecode":"private static int mulAndCheck(final int x, final int y) {\n    if (y != 0) {\n        {\n            final long long = ((long)(x)) * ((long)(y));\n            if ((m < (java.lang.Integer.java.lang.Integer.int)) || (m > (java.lang.Integer.java.lang.Integer.int))) {\n                throw new java.lang.ArithmeticException(\"overflow: mul\");\n            } \n            return ((int)(m));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"y"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5179","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || (separator == null)"},"failures":[435],"tindex":"370e56d3-3e6e-11e6-8bf4-5d06bbbb1805","method":{"position":"org.apache.commons.lang3.Validate:1148","type":"CtMethodImpl","sourcecode":"public static void exclusiveBetween(double start, double end, double value, java.lang.String message) {\n    if ((message == null) || (message == null)) {\n        {\n            if ((value <= start) || (value >= end)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"message","separator":"message"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:239","type":"CtBinaryOperatorImpl","sourcecode":"(cal1 == null) || (cal2 == null)"},"failures":[],"tindex":"370e56d4-3e6e-11e6-8bf4-47af165af018","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:790","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if ((calendar == null) || (calendar == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendTo(buffer, ((calendar.get(java.util.Calendar.java.util.Calendar.int)) + 1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cal2":"calendar","cal1":"calendar"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5271","type":"CtBinaryOperatorImpl","sourcecode":"count == null"},"failures":[436],"tindex":"370e7de5-3e6e-11e6-8bf4-c3089713ee64","method":{"position":"org.apache.commons.lang3.mutable.MutableDouble:167","type":"CtMethodImpl","sourcecode":"public void add(final java.lang.Number operand) {\n    if (operand == null) {\n        {\n            org.apache.commons.lang3.mutable.MutableDouble.this.double += operand.doubleValue();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"operand"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:651","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[437,438,439,440,441,442,443,444,445,446,447,389],"tindex":"370ea4f6-3e6e-11e6-8bf4-b9623d9f34ec","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:647","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final java.lang.Object[] lhs, final java.lang.Object[] rhs, final java.util.Comparator<?> comparator) {\n    if (rhs == lhs) {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i], comparator);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs","rhs":"lhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.reflect.InvocationTargetException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1954","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"370ecc07-3e6e-11e6-8bf4-23c8b2e32583","method":{"position":"org.apache.commons.lang3.reflect.ConstructorUtils:108","type":"CtMethodImpl","sourcecode":"public static <T>T invokeConstructor(final java.lang.Class<T> cls, java.lang.Object[] args, java.lang.Class<?>[] parameterTypes) throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (args == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.reflect.InvocationTargetException();\n    } else {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            parameterTypes = org.apache.commons.lang3.ArrayUtils.nullToEmpty(parameterTypes);\n            final java.lang.reflect.Constructor<T> java.lang.reflect.Constructor<T> = org.apache.commons.lang3.reflect.ConstructorUtils.getMatchingAccessibleConstructor(cls, parameterTypes);\n            if (ctor == null) {\n                throw new java.lang.NoSuchMethodException((\"No such accessible constructor on object: \" + (cls.getName())));\n            } \n            return ctor.newInstance(args);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"args"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:580","type":"CtBinaryOperatorImpl","sourcecode":"((ch0 == 'n') || (ch0 == 'N')) && ((ch1 == 'o') || (ch1 == 'O'))"},"failures":[],"tindex":"370f1a28-3e6e-11e6-8bf4-1f45c9a87eef","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:972","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer setIgnoredChar(final char ignored) {\n    if (((ignored == 'n') || (ch0 == 'N')) && ((ignored == 'o') || (ch1 == 'O'))) {\n        {\n            return setIgnoredMatcher(org.apache.commons.lang3.text.StrMatcher.charMatcher(ignored));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch0":"ignored","ch1":"ignored"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:236","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[448,449,450],"tindex":"370f1a29-3e6e-11e6-8bf4-71f9942d1840","method":{"position":"org.apache.commons.lang3.ClassUtils:759","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> wrapperToPrimitive(final java.lang.Class<?> cls) {\n    if (cls == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(cls);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2958","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[451],"tindex":"370f8f5a-3e6e-11e6-8bf4-5f29cdbe970e","method":{"position":"org.apache.commons.lang3.ArrayUtils:2957","type":"CtMethodImpl","sourcecode":"public static char[] toPrimitive(final java.lang.Character[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.char[];\n            } \n            final char[] char[] = new char[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = array[i].charValue();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:137","type":"CtBinaryOperatorImpl","sourcecode":"(((org.apache.commons.lang3.StringUtils.isAllLowerCase(split[0])) && (((split[0].length()) == 2) || ((split[0].length()) == 3))) && ((split[1].length()) == 2)) && (org.apache.commons.lang3.StringUtils.isAllUpperCase(split[1]))"},"failures":[],"tindex":"370fb66b-3e6e-11e6-8bf4-7fcbca55df80","method":{"position":"org.apache.commons.lang3.StringUtils:6591","type":"CtMethodImpl","sourcecode":"public static int indexOfDifference(final java.lang.CharSequence... css) {\n    if ((((org.apache.commons.lang3.StringUtils.isAllLowerCase(css[0])) && (((split[0].length()) == 2) || ((split[0].length()) == 3))) && ((split[1].length()) == 2)) && (org.apache.commons.lang3.StringUtils.isAllUpperCase(split[1]))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((css == null) || ((css.int) <= 1)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            boolean boolean = false;\n            boolean boolean = true;\n            final int int = css.int;\n            int int = java.lang.Integer.java.lang.Integer.int;\n            int int = 0;\n            for (int int = 0 ; i < arrayLen ; i++) {\n                if ((css[i]) == null) {\n                    anyStringNull = true;\n                    shortestStrLen = 0;\n                } else {\n                    allStringsNull = false;\n                    shortestStrLen = java.lang.Math.min(css[i].length(), shortestStrLen);\n                    longestStrLen = java.lang.Math.max(css[i].length(), longestStrLen);\n                }\n            }\n            if (allStringsNull || ((longestStrLen == 0) && (!anyStringNull))) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            if (shortestStrLen == 0) {\n                return 0;\n            } \n            int int = -1;\n            for (int int = 0 ; stringPos < shortestStrLen ; stringPos++) {\n                final char char = css[0].charAt(stringPos);\n                for (int int = 1 ; arrayPos < arrayLen ; arrayPos++) {\n                    if ((css[arrayPos].charAt(stringPos)) != comparisonChar) {\n                        firstDiff = stringPos;\n                        break;\n                    } \n                }\n                if (firstDiff != (-1)) {\n                    break;\n                } \n            }\n            if ((firstDiff == (-1)) && (shortestStrLen != longestStrLen)) {\n                return shortestStrLen;\n            } \n            return firstDiff;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"split":"css"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1102","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[452,453,454,455,456,457,458,393,459,460,461,462,463,464,395,465,466,467],"tindex":"3710048c-3e6e-11e6-8bf4-2b20021c7342","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:166","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Field getDeclaredField(final java.lang.Class<?> cls, final java.lang.String fieldName, final boolean forceAccess) {\n    if (fieldName == null) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((cls != null), \"The class must not be null\");\n            org.apache.commons.lang3.Validate.isTrue(org.apache.commons.lang3.StringUtils.isNotBlank(fieldName), \"The field name must not be blank/empty\");\n            try {\n                final java.lang.reflect.Field java.lang.reflect.Field = cls.getDeclaredField(fieldName);\n                if (!(org.apache.commons.lang3.reflect.MemberUtils.isAccessible(field))) {\n                    if (forceAccess) {\n                        field.setAccessible(true);\n                    } else {\n                        return null;\n                    }\n                } \n                return field;\n            } catch (final java.lang.NoSuchFieldException e) {\n            }\n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3711","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[468,469,470,471,472,473,474,475,476,477,478,479],"tindex":"3710048d-3e6e-11e6-8bf4-d73dc84efd71","method":{"position":"org.apache.commons.lang3.SerializationUtils:264","type":"CtMethodImpl","sourcecode":"public static <T>T deserialize(final byte[] objectData) {\n    if (objectData == null) {\n        {\n            if (objectData == null) {\n                throw new java.lang.IllegalArgumentException(\"The byte[] must not be null\");\n            } \n            return org.apache.commons.lang3.SerializationUtils.<T>deserialize(new java.io.ByteArrayInputStream(objectData));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"objectData"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:326","type":"CtBinaryOperatorImpl","sourcecode":"(toType == null) || (toType instanceof java.lang.Class<?>)"},"failures":[],"tindex":"37102b9e-3e6e-11e6-8bf4-69629a584fd3","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1427","type":"CtMethodImpl","sourcecode":"public static boolean containsTypeVariables(java.lang.reflect.Type type) {\n    if ((type == null) || (toType instanceof java.lang.Class<?>)) {\n        {\n            if (type instanceof java.lang.reflect.TypeVariable<?>) {\n                return true;\n            } \n            if (type instanceof java.lang.Class<?>) {\n                return (((java.lang.Class<?>)(type)).getTypeParameters().int) > 0;\n            } \n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                for (java.lang.reflect.Type java.lang.reflect.Type : ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()) {\n                    if (org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(arg)) {\n                        return true;\n                    } \n                }\n                return false;\n            } \n            if (type instanceof java.lang.reflect.WildcardType) {\n                java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n                return (org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wild)[0])) || (org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wild)[0]));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248838719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toType":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":13,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":35,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":10,"org.apache.commons.lang3.ArrayUtilsTest.testReverseDouble":8,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":16,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":31,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":18,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":14,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":12,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong":40,"org.apache.commons.lang3.RangeTest.testIsOverlappedBy":32,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":29,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":34,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":37,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":20,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":27,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":21,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLong":36,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":0,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":1,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":26,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":4,"org.apache.commons.lang3.ArrayUtilsTest.testReverseDoubleRange":9,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":41,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArrayEqualAsObject":24,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":5,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":3,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":6,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":23,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":22,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":39,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":2,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":30,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":38,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":7,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":11,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":17,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":28,"org.apache.commons.lang3.RangeTest.testIntersectionWithNull":33,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":25,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":15,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":19},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6905","type":"CtBinaryOperatorImpl","sourcecode":"n == 0"},"failures":[],"tindex":"e4ade0c1-2e84-11e6-b08b-618453782d56","method":{"position":"org.apache.commons.lang3.time.DateUtils:1726","type":"CtMethodImpl","sourcecode":"public static boolean truncatedEquals(final java.util.Calendar cal1, final java.util.Calendar cal2, final int field) {\n    if (field == 0) {\n        {\n            return (org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(cal1, cal2, field)) == 0;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"field"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:180","type":"CtBinaryOperatorImpl","sourcecode":"(cal1 == null) || (cal2 == null)"},"failures":[],"tindex":"e4aecb22-2e84-11e6-b08b-c128fdd511f8","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:900","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if ((calendar == null) || (calendar == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendTo(buffer, calendar.get(int));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cal2":"calendar","cal1":"calendar"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4788","type":"CtBinaryOperatorImpl","sourcecode":"tempIndex == (-1)"},"failures":[],"tindex":"e4aef233-2e84-11e6-b08b-3f352efe6e34","method":{"position":"org.apache.commons.lang3.time.DateUtils:517","type":"CtMethodImpl","sourcecode":"private static java.util.Date add(final java.util.Date date, final int calendarField, final int amount) {\n    if (calendarField == (-1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n            c.setTime(date);\n            c.add(calendarField, amount);\n            return c.getTime();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"tempIndex":"calendarField"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:1009","type":"CtBinaryOperatorImpl","sourcecode":"toString != null"},"failures":[0,1,2,3,4,5,6,7],"tindex":"e4af6764-2e84-11e6-b08b-39f71221503e","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:554","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setSummaryObjectEndText(final java.lang.String summaryObjectEndText) {\n    if (summaryObjectEndText != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            super.setSummaryObjectEndText(summaryObjectEndText);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toString":"summaryObjectEndText"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3115","type":"CtBinaryOperatorImpl","sourcecode":"(sizePlus1++) == max"},"failures":[8,9],"tindex":"e4af6765-2e84-11e6-b08b-93c2bff37a94","method":{"position":"org.apache.commons.lang3.ArrayUtils:1678","type":"CtMethodImpl","sourcecode":"public static void reverse(final double[] array, int startIndexInclusive, int endIndexExclusive) {\n    if ((endIndexExclusive++) == endIndexExclusive) {\n        {\n            if (array == null) {\n                return ;\n            } \n            int int = startIndexInclusive < 0 ? 0 : startIndexInclusive;\n            int int = (java.lang.Math.min(array.int, endIndexExclusive)) - 1;\n            double double;\n            while (j > i) {\n                tmp = array[j];\n                array[j] = array[i];\n                array[i] = tmp;\n                j--;\n                i++;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sizePlus1":"endIndexExclusive","max":"endIndexExclusive"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7053","type":"CtBinaryOperatorImpl","sourcecode":"((m1.length()) == 0) || ((m2.length()) == 0)"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"tindex":"e4b051c6-2e84-11e6-b08b-cf6b2adfc0b2","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:505","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final float[] lhs, final float[] rhs) {\n    if (((fieldName.length()) == 0) || ((fieldName.length()) == 0)) {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (!(java.util.Arrays.equals(lhs, rhs))) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Float[]>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Float[] getLeft() {\n                        return org.apache.commons.lang3.ArrayUtils.toObject(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Float[] getRight() {\n                        return org.apache.commons.lang3.ArrayUtils.toObject(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m1":"fieldName","m2":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Range:332","type":"CtBinaryOperatorImpl","sourcecode":"otherRange == null"},"failures":[32,33],"tindex":"e4b09fe7-2e84-11e6-b08b-1b0807cf773f","method":{"position":"org.apache.commons.lang3.Range:350","type":"CtMethodImpl","sourcecode":"public boolean isOverlappedBy(final org.apache.commons.lang3.Range<T> otherRange) {\n    if (otherRange == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (otherRange == null) {\n                return false;\n            } \n            return ((otherRange.contains(T)) || (otherRange.contains(T))) || (contains(otherRange.T));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"otherRange":"otherRange"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:426","type":"CtBinaryOperatorImpl","sourcecode":"type == null"},"failures":[],"tindex":"e4b1b158-2e84-11e6-b08b-a5831cb278c3","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:783","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> getTypeArguments(final java.lang.reflect.Type type, final java.lang.Class<?> toClass) {\n    if (type == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(type, toClass, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6502","type":"CtBinaryOperatorImpl","sourcecode":"str1 == null"},"failures":[34,35,2,36,37,37,38,39,40,41],"tindex":"e4b1b159-2e84-11e6-b08b-d7e25f8e7521","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:647","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final long value) {\n    if (fieldName == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendFieldStart(buffer, fieldName);\n            appendDetail(buffer, fieldName, value);\n            appendFieldEnd(buffer, fieldName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str1":"fieldName"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":9,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
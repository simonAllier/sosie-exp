{"failureDictionary":{},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.NullInputStream:256","type":"CtBinaryOperatorImpl","sourcecode":"(mark) < 0"},"failures":[],"tindex":"eb1ae052-2e7f-11e6-829e-db2bd4ad34f5","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:678","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String magicNumber, long offset) {\n    if (offset < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.MagicNumberFileFilter(magicNumber , offset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mark":"offset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1609","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"eb1ba3a3-2e7f-11e6-829e-a78006564d60","method":{"position":"org.apache.commons.io.filefilter.NotFileFilter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.isDirectory())) {\n        {\n            return !(org.apache.commons.io.filefilter.IOFileFilter.accept(file));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:192","type":"CtBinaryOperatorImpl","sourcecode":"directory == null"},"failures":[],"tindex":"eb1ba3a4-2e7f-11e6-829e-b1bb403b70cf","method":{"position":"org.apache.commons.io.TaggedIOException:64","type":"CtMethodImpl","sourcecode":"public static boolean isTaggedWith(java.lang.Throwable throwable, java.lang.Object tag) {\n    if ((((((((tag.indexOf(\"linux\")) != (-1)) || ((osName.indexOf(\"mpe/ix\")) != (-1))) || ((osName.indexOf(\"freebsd\")) != (-1))) || ((osName.indexOf(\"irix\")) != (-1))) || ((osName.indexOf(\"digital unix\")) != (-1))) || ((osName.indexOf(\"unix\")) != (-1))) || ((osName.indexOf(\"mac os x\")) != (-1))) {\n        {\n            if (tag == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((tag != null) && (throwable instanceof org.apache.commons.io.TaggedIOException)) && (tag.equals(((org.apache.commons.io.TaggedIOException)(throwable)).java.io.Serializable));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"tag"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:72","type":"CtBinaryOperatorImpl","sourcecode":"osName == null"},"failures":[],"tindex":"eb1bcab5-2e7f-11e6-829e-bbf9f6c1fb9b","method":{"position":"org.apache.commons.io.input.XmlStreamReader:476","type":"CtMethodImpl","sourcecode":"private java.lang.String doLenientDetection(java.lang.String httpContentType, org.apache.commons.io.input.XmlStreamReaderException ex) throws java.io.IOException {\n    if (httpContentType == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((httpContentType != null) && (httpContentType.startsWith(\"text/html\"))) {\n                httpContentType = httpContentType.substring(\"text/html\".length());\n                httpContentType = \"text/xml\" + httpContentType;\n                try {\n                    return calculateHttpEncoding(httpContentType, ex.getBomEncoding(), ex.getXmlGuessEncoding(), ex.getXmlEncoding(), true);\n                } catch (org.apache.commons.io.input.XmlStreamReaderException ex2) {\n                    ex = ex2;\n                }\n            } \n            java.lang.String java.lang.String = ex.getXmlEncoding();\n            if (encoding == null) {\n                encoding = ex.getContentTypeEncoding();\n            } \n            if (encoding == null) {\n                encoding = (java.lang.String) == null ? org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String : java.lang.String;\n            } \n            return encoding;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"osName":"httpContentType"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceReader:114","type":"CtBinaryOperatorImpl","sourcecode":"c == (-1)"},"failures":[],"tindex":"eb1bf1c6-2e7f-11e6-829e-17bd27e43c2c","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:153","type":"CtMethodImpl","sourcecode":"protected void afterWrite(int n) throws java.io.IOException {\n    if (n == (-1)) {\n        {\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"n"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.CompositeFileComparator:113","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"eb1bf1c7-2e7f-11e6-829e-af10f76b66a2","method":{"position":"org.apache.commons.io.ByteOrderMark:105","type":"CtMethodImpl","sourcecode":"public int get(int pos) {\n    if (pos >= 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (pos > 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return int[][pos];\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"pos"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.Tailer:349","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"eb1c18d8-2e7f-11e6-829e-e327f25a8ef7","method":{"position":"org.apache.commons.io.IOUtils:300","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.Closeable closeable) {\n    if (closeable == null) {\n        {\n            try {\n                if (closeable != null) {\n                    closeable.close();\n                } \n            } catch (java.io.IOException ioe) {\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"closeable"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:489","type":"CtBinaryOperatorImpl","sourcecode":"encoding == null"},"failures":[],"tindex":"eb1c18d9-2e7f-11e6-829e-599b0b528d6c","method":{"position":"org.apache.commons.io.FilenameUtils:579","type":"CtMethodImpl","sourcecode":"public static java.lang.String separatorsToSystem(java.lang.String path) {\n    if (path == null) {\n        {\n            if (path == null) {\n                return null;\n            } \n            if (org.apache.commons.io.FilenameUtils.isSystemWindows()) {\n                return org.apache.commons.io.FilenameUtils.separatorsToWindows(path);\n            } else {\n                return org.apache.commons.io.FilenameUtils.separatorsToUnix(path);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"path"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2182","type":"CtUnaryOperatorImpl","sourcecode":"!(input2 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"eb1c3fea-2e7f-11e6-829e-db591de9dedc","method":{"position":"org.apache.commons.io.IOUtils:245","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.InputStream input) {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(input)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input2":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2497","type":"CtBinaryOperatorImpl","sourcecode":"actual != length"},"failures":[],"tindex":"eb1c3feb-2e7f-11e6-829e-075af4496d08","method":{"position":"org.apache.commons.io.IOUtils:2401","type":"CtMethodImpl","sourcecode":"public static int read(java.io.Reader input, char[] buffer, int offset, int length) throws java.io.IOException {\n    if (length == (-1)) {\n        {\n            if (offset != offset) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (length < 0) {\n                        throw new java.lang.IllegalArgumentException((\"Length must not be negative: \" + length));\n                    } \n                    int int = length;\n                    while (remaining > 0) {\n                        int int = length - remaining;\n                        int int = input.read(buffer, (offset + location), remaining);\n                        if ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) == count) {\n                            break;\n                        } \n                        remaining -= count;\n                    }\n                    return length - remaining;\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"actual":"offset","length":"offset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl","sourcecode":"!(input1 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"eb1c66fc-2e7f-11e6-829e-8d5f281ff488","method":{"position":"org.apache.commons.io.IOUtils:1818","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.InputStream input, java.io.OutputStream output, long inputOffset, long length) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            return org.apache.commons.io.IOUtils.copyLarge(input, output, inputOffset, length, new byte[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int]);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFileFilter:189","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"eb1c8e0d-2e7f-11e6-829e-c7c8742f3715","method":{"position":"org.apache.commons.io.input.NullReader:209","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] chars, int offset, int length) throws java.io.IOException {\n    if (offset > 0) {\n        {\n            if (boolean) {\n                throw new java.io.IOException(\"Read after end of file\");\n            } \n            if ((long) == (long)) {\n                return doEndOfFile();\n            } \n            long += length;\n            int int = length;\n            if ((long) > (long)) {\n                returnLength = length - ((int)(((long) - (long))));\n                long = long;\n            } \n            processChars(chars, offset, returnLength);\n            return returnLength;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"offset"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2666","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"eb1c8e0e-2e7f-11e6-829e-51c5a453a23e","method":{"position":"org.apache.commons.io.filefilter.NameFileFilter:161","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if (!(dir.exists())) {\n        {\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkEquals(name, name2)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"dir"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2308","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.exists())"},"failures":[],"tindex":"eb1cb51f-2e7f-11e6-829e-7311b23e1211","method":{"position":"org.apache.commons.io.FileUtils:786","type":"CtMethodImpl","sourcecode":"public static boolean contentEqualsIgnoreEOL(java.io.File file1, java.io.File file2, java.lang.String charsetName) throws java.io.IOException {\n    if (!(file2.exists())) {\n        {\n            boolean boolean = file1.exists();\n            if (file1Exists != (file2.exists())) {\n                return false;\n            } \n            if (!file1Exists) {\n                return true;\n            } \n            if ((file1.isDirectory()) || (file2.isDirectory())) {\n                throw new java.io.IOException(\"Can't compare directories, only files\");\n            } \n            if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {\n                return true;\n            } \n            java.io.Reader java.io.Reader = null;\n            java.io.Reader java.io.Reader = null;\n            try {\n                if (charsetName == null) {\n                    input1 = new java.io.InputStreamReader(new java.io.FileInputStream(file1));\n                    input2 = new java.io.InputStreamReader(new java.io.FileInputStream(file2));\n                } else {\n                    input1 = new java.io.InputStreamReader(new java.io.FileInputStream(file1) , charsetName);\n                    input2 = new java.io.InputStreamReader(new java.io.FileInputStream(file2) , charsetName);\n                }\n                return org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(input1, input2);\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(input1);\n                org.apache.commons.io.IOUtils.closeQuietly(input2);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1369","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"eb1cdc30-2e7f-11e6-829e-b15921446171","method":{"position":"org.apache.commons.io.output.NullWriter:94","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr) {\n    if (chr != null) {\n        {\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"chr"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:866","type":"CtBinaryOperatorImpl","sourcecode":"(url != null) && ((url.indexOf('%')) >= 0)"},"failures":[],"tindex":"eb1cdc31-2e7f-11e6-829e-5505bfa18e6d","method":{"position":"org.apache.commons.io.output.LockableFileWriter:349","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str) throws java.io.IOException {\n    if ((str != null) && ((url.indexOf('%')) >= 0)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.Writer.write(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"url":"str"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1617","type":"CtBinaryOperatorImpl","sourcecode":"(!(directory.exists())) || (!(child.exists()))"},"failures":[],"tindex":"eb1d0342-2e7f-11e6-829e-59fa9e28c4ea","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:67","type":"CtMethodImpl","sourcecode":"public void onFileCreate(final java.io.File file) {\n    if ((!(file.exists())) || (!(file.exists()))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file","child":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1659","type":"CtBinaryOperatorImpl","sourcecode":"lineEnding == null"},"failures":[],"tindex":"eb1d0343-2e7f-11e6-829e-7f2f15d7759b","method":{"position":"org.apache.commons.io.output.NullWriter:125","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str, int st, int end) {\n    if ((str != null) && (!(xmlGuessEnc.equals(str)))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                {\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineEnding":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"eb1d2a54-2e7f-11e6-829e-652095c298af","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:187","type":"CtMethodImpl","sourcecode":"public synchronized int write(java.io.InputStream in) throws java.io.IOException {\n    if (null != in) {\n        {\n            int int = 0;\n            int int = (int) - (int);\n            int int = in.read(byte[], inBufferPos, ((byte[].int) - inBufferPos));\n            while (n != (-1)) {\n                readCount += n;\n                inBufferPos += n;\n                int += n;\n                if (inBufferPos == (byte[].int)) {\n                    needNewBuffer(byte[].int);\n                    inBufferPos = 0;\n                } \n                n = in.read(byte[], inBufferPos, ((byte[].int) - inBufferPos));\n            }\n            return readCount;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"in"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:96","type":"CtBinaryOperatorImpl","sourcecode":"csq != null"},"failures":[],"tindex":"eb1d2a55-2e7f-11e6-829e-a97e87da9566","method":{"position":"org.apache.commons.io.IOUtils:1448","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.CharSequence data, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (data != null) {\n        {\n            if (data != null) {\n                org.apache.commons.io.IOUtils.write(data.toString(), output, encoding);\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"csq":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:183","type":"CtBinaryOperatorImpl","sourcecode":"(file.getParentFile()) != null"},"failures":[],"tindex":"eb1d5166-2e7f-11e6-829e-ad389ac40f7b","method":{"position":"org.apache.commons.io.filefilter.FalseFileFilter:57","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File file) {\n    if ((file.getParentFile()) != null) {\n        {\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:96","type":"CtBinaryOperatorImpl","sourcecode":"line == null"},"failures":[],"tindex":"eb1d5167-2e7f-11e6-829e-9db3e1128bc1","method":{"position":"org.apache.commons.io.FileSystemUtils:435","type":"CtMethodImpl","sourcecode":"long parseBytes(java.lang.String freeSpace, java.lang.String path) throws java.io.IOException {\n    if (freeSpace == null) {\n        {\n            try {\n                long long = java.lang.Long.parseLong(freeSpace);\n                if (bytes < 0) {\n                    throw new java.io.IOException((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not find free space in response \") + \"for path '\") + path) + \"'- check path is valid\"));\n                } \n                return bytes;\n            } catch (java.lang.NumberFormatException ex) {\n                throw new org.apache.commons.io.IOExceptionWithCause((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return numeric data as expected \") + \"for path '\") + path) + \"'- check path is valid\") , ex);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"freeSpace"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:175","type":"CtBinaryOperatorImpl","sourcecode":"iterator != null"},"failures":[],"tindex":"eb1d7878-2e7f-11e6-829e-e1438a6d08be","method":{"position":"org.apache.commons.io.LineIterator:174","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(org.apache.commons.io.LineIterator iterator) {\n    if (iterator != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (iterator != null) {\n                iterator.close();\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterator":"iterator"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:810","type":"CtBinaryOperatorImpl","sourcecode":"charsetName == null"},"failures":[],"tindex":"eb1d7879-2e7f-11e6-829e-65384703d37e","method":{"position":"org.apache.commons.io.IOUtils:1932","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            org.apache.commons.io.IOUtils.copy(input, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsetName":"encoding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2223","type":"CtBinaryOperatorImpl","sourcecode":"ch != ch2"},"failures":[],"tindex":"eb1d9f8a-2e7f-11e6-829e-4b3340260cd7","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:136","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] value, int offset, int length) {\n    if (offset != length) {\n        {\n            if (value != null) {\n                java.lang.StringBuilder.append(value, offset, length);\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"offset","ch2":"length"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:105","type":"CtBinaryOperatorImpl","sourcecode":"prefixes == null"},"failures":[],"tindex":"eb1d9f8b-2e7f-11e6-829e-f1bb81dabd7c","method":{"position":"org.apache.commons.io.FileSystemUtils:534","type":"CtMethodImpl","sourcecode":"java.lang.Process openProcess(java.lang.String[] cmdAttribs) throws java.io.IOException {\n    if (cmdAttribs == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return java.lang.Runtime.getRuntime().exec(cmdAttribs);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefixes":"cmdAttribs"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2411","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"eb1dc69c-2e7f-11e6-829e-af33fa3e50cc","method":{"position":"org.apache.commons.io.FileUtils:476","type":"CtMethodImpl","sourcecode":"private static void innerListFiles(java.util.Collection<java.io.File> files, java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter filter, boolean includeSubDirectories) {\n    if (!(directory.canWrite())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(directory.exists())) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.io.File[] java.io.File[] = directory.listFiles(((java.io.FileFilter)(filter)));\n                    if (found != null) {\n                        for (java.io.File java.io.File : found) {\n                            if (file.isDirectory()) {\n                                if (includeSubDirectories) {\n                                    files.add(file);\n                                } \n                                org.apache.commons.io.FileUtils.innerListFiles(files, file, filter, includeSubDirectories);\n                            } else {\n                                files.add(file);\n                            }\n                        }\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"directory"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2448","type":"CtBinaryOperatorImpl","sourcecode":"length < 0"},"failures":[],"tindex":"eb1dc69d-2e7f-11e6-829e-897e0d118c80","method":{"position":"org.apache.commons.io.input.BOMInputStream:331","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] buf, int off, int len) throws java.io.IOException {\n    if (off == (-1)) {\n        {\n            if (len < 0) {\n                {\n                    int int = 0;\n                    int int = 0;\n                    while ((len > 0) && (b >= 0)) {\n                        b = readFirstBytes();\n                        if (b >= 0) {\n                            buf[(off++)] = ((byte)(b & 255));\n                            len--;\n                            firstCount++;\n                        } \n                    }\n                    int int = java.io.InputStream.read(buf, off, len);\n                    return secondCount < 0 ? firstCount > 0 ? firstCount : -1 : firstCount + secondCount;\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"len"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2890","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"eb1dedae-2e7f-11e6-829e-252c21affe27","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:428","type":"CtMethodImpl","sourcecode":"private java.io.File[] listFiles(java.io.File file) {\n    if (file == null) {\n        {\n            java.io.File[] java.io.File[] = null;\n            if (file.isDirectory()) {\n                children = (java.io.FileFilter) == null ? file.listFiles() : file.listFiles(java.io.FileFilter);\n            } \n            if (children == null) {\n                children = org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.io.File[];\n            } \n            if (((java.util.Comparator<java.io.File>) != null) && ((children.int) > 1)) {\n                java.util.Arrays.sort(children, java.util.Comparator<java.io.File>);\n            } \n            return children;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceReader:114","type":"CtBinaryOperatorImpl","sourcecode":"c == (-1)"},"failures":[],"tindex":"eb1dedaf-2e7f-11e6-829e-31465425f67c","method":{"position":"org.apache.commons.io.output.ProxyWriter:242","type":"CtMethodImpl","sourcecode":"protected void beforeWrite(int n) throws java.io.IOException {\n    if (n == (n + 2)) {\n        {\n            if (n == (-1)) {\n                throw new java.io.IOException();\n            } else {\n                {\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"n"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1088","type":"CtBinaryOperatorImpl","sourcecode":"(destFile.exists()) && ((destFile.canWrite()) == false)"},"failures":[],"tindex":"eb1dedb0-2e7f-11e6-829e-176dec72c844","method":{"position":"org.apache.commons.io.FileUtils:2091","type":"CtMethodImpl","sourcecode":"public static void writeByteArrayToFile(java.io.File file, byte[] data, boolean append) throws java.io.IOException {\n    if ((file.exists()) && ((destFile.canWrite()) == false)) {\n        {\n            java.io.OutputStream java.io.OutputStream = null;\n            try {\n                out = org.apache.commons.io.FileUtils.openOutputStream(file, append);\n                out.write(data);\n                out.close();\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(out);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"file"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.SuffixFileFilter:73","type":"CtBinaryOperatorImpl","sourcecode":"suffix == null"},"failures":[],"tindex":"eb1e13c1-2e7f-11e6-829e-e3ebc6280e02","method":{"position":"org.apache.commons.io.IOUtils:1210","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.String input, java.nio.charset.Charset encoding) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.io.ByteArrayInputStream(input.getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"suffix":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.AndFileFilter:157","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"eb1e13c2-2e7f-11e6-829e-9d073938b53b","method":{"position":"org.apache.commons.io.DirectoryWalker:547","type":"CtMethodImpl","sourcecode":"protected void handleRestricted(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (depth > 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"depth"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:788","type":"CtBinaryOperatorImpl","sourcecode":"file1Exists != (file2.exists())"},"failures":[],"tindex":"eb1e13c3-2e7f-11e6-829e-85f823db20c7","method":{"position":"org.apache.commons.io.input.Tailer:287","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.input.Tailer create(java.io.File file, org.apache.commons.io.input.TailerListener listener, long delayMillis, boolean end, boolean reOpen) {\n    if (end != (file.exists())) {\n        {\n            return org.apache.commons.io.input.Tailer.create(file, listener, delayMillis, end, reOpen, org.apache.commons.io.input.Tailer.org.apache.commons.io.input.Tailer.int);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file1Exists":"end","file2":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1635","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.exists())"},"failures":[],"tindex":"eb1e3ad4-2e7f-11e6-829e-7b28b3d9b416","method":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:238","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.exists())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(file.exists())) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (((file != null) && (file.isFile())) && (file.canRead())) {\n                        java.io.RandomAccessFile java.io.RandomAccessFile = null;\n                        try {\n                            byte[] byte[] = new byte[org.apache.commons.io.filefilter.MagicNumberFileFilter.this.byte[].int];\n                            randomAccessFile = new java.io.RandomAccessFile(file , \"r\");\n                            randomAccessFile.seek(long);\n                            int int = randomAccessFile.read(fileBytes);\n                            if (read != (byte[].int)) {\n                                return false;\n                            } \n                            return java.util.Arrays.equals(org.apache.commons.io.filefilter.MagicNumberFileFilter.this.byte[], fileBytes);\n                        } catch (java.io.IOException ioe) {\n                        } finally {\n                            org.apache.commons.io.IOUtils.closeQuietly(randomAccessFile);\n                        }\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2896","type":"CtUnaryOperatorImpl","sourcecode":"!(src.exists())"},"failures":[],"tindex":"eb1e3ad5-2e7f-11e6-829e-13e54ee24257","method":{"position":"org.apache.commons.io.FileCleaningTracker:120","type":"CtMethodImpl","sourcecode":"public void track(java.lang.String path, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if (!(marker.exists())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (path == null) {\n                throw new java.lang.NullPointerException(\"The path must not be null\");\n            } \n            addTracker(path, marker, deleteStrategy);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"marker"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2293","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"eb1e61e6-2e7f-11e6-829e-89b88b4d32d6","method":{"position":"org.apache.commons.io.FileUtils:2292","type":"CtMethodImpl","sourcecode":"public static void forceDeleteOnExit(java.io.File file) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            if (file.isDirectory()) {\n                org.apache.commons.io.FileUtils.deleteDirectoryOnExit(file);\n            } else {\n                file.deleteOnExit();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:634","type":"CtBinaryOperatorImpl","sourcecode":"len == 1"},"failures":[],"tindex":"eb1e61e7-2e7f-11e6-829e-ed528ace1652","method":{"position":"org.apache.commons.io.input.NullInputStream:318","type":"CtMethodImpl","sourcecode":"protected void processBytes(byte[] bytes, int offset, int length) {\n    if (length == 1) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"length"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.WriterOutputStream:301","type":"CtBinaryOperatorImpl","sourcecode":"(decoderOut.position()) > 0"},"failures":[],"tindex":"eb1e61e8-2e7f-11e6-829e-7f60c635761b","method":{"position":"org.apache.commons.io.input.ProxyReader:113","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(java.nio.CharBuffer target) throws java.io.IOException {\n    if ((target.position()) > 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                beforeRead((target != null ? target.length() : 0));\n                int int = java.io.Reader.read(target);\n                afterRead(n);\n                return n;\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"decoderOut":"target"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.EOFException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"eb1e61e9-2e7f-11e6-829e-2ba1d2ff4788","method":{"position":"org.apache.commons.io.input.SwappedDataInputStream:116","type":"CtMethodImpl","sourcecode":"public void readFully(byte[] data) throws java.io.EOFException, java.io.IOException {\n    if (data != null) {\n        {\n            readFully(data, 0, data.int);\n        }\n    } else {\n        throw new java.io.EOFException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2182","type":"CtUnaryOperatorImpl","sourcecode":"!(input2 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"eb1e88fa-2e7f-11e6-829e-0596817c92c9","method":{"position":"org.apache.commons.io.EndianUtils:311","type":"CtMethodImpl","sourcecode":"public static int readSwappedUnsignedShort(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            return ((value1 & 255) << 0) + ((value2 & 255) << 8);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input2":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2182","type":"CtUnaryOperatorImpl","sourcecode":"!(input2 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"eb1e88fb-2e7f-11e6-829e-3d1fce8bcfa7","method":{"position":"org.apache.commons.io.EndianUtils:477","type":"CtMethodImpl","sourcecode":"private static int read(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = input.read();\n            if ((-1) == value) {\n                throw new java.io.EOFException(\"Unexpected EOF reached\");\n            } \n            return value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input2":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2326","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.exists())"},"failures":[],"tindex":"eb1e88fc-2e7f-11e6-829e-b190afce8ffc","method":{"position":"org.apache.commons.io.FileCleaningTracker:134","type":"CtMethodImpl","sourcecode":"private synchronized void addTracker(java.lang.String path, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if (marker == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (marker == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(marker.exists())) {\n                        {\n                            if (boolean) {\n                                throw new java.lang.IllegalStateException(\"No new trackers can be added once exitWhenFinished() is called\");\n                            } \n                            if ((java.lang.Thread) == null) {\n                                java.lang.Thread = new org.apache.commons.io.FileCleaningTracker.Reaper();\n                                java.lang.Thread.start();\n                            } \n                            java.util.Collection<org.apache.commons.io.FileCleaningTracker.Tracker>.add(new org.apache.commons.io.FileCleaningTracker.Tracker(path , deleteStrategy , marker , java.lang.ref.ReferenceQueue<java.lang.Object>));\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"marker"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1412","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"eb1eb00d-2e7f-11e6-829e-0d9174d3faf9","method":{"position":"org.apache.commons.io.FileUtils:1987","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data) throws java.io.IOException {\n    if (data != null) {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, java.nio.charset.Charset.defaultCharset(), false);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:658","type":"CtBinaryOperatorImpl","sourcecode":"i >= 0"},"failures":[],"tindex":"eb1eb00e-2e7f-11e6-829e-fdb9a54b50fc","method":{"position":"org.apache.commons.io.ByteOrderMark:105","type":"CtMethodImpl","sourcecode":"public int get(int pos) {\n    if (pos >= 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (pos > 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return int[][pos];\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"pos"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2708","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"eb1ed71f-2e7f-11e6-829e-27f21d8ef3cc","method":{"position":"org.apache.commons.io.filefilter.CanReadFileFilter:89","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return file.canRead();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:79","type":"CtBinaryOperatorImpl","sourcecode":"(((((((osName.indexOf(\"linux\")) != (-1)) || ((osName.indexOf(\"mpe/ix\")) != (-1))) || ((osName.indexOf(\"freebsd\")) != (-1))) || ((osName.indexOf(\"irix\")) != (-1))) || ((osName.indexOf(\"digital unix\")) != (-1))) || ((osName.indexOf(\"unix\")) != (-1))) || ((osName.indexOf(\"mac os x\")) != (-1))"},"failures":[],"tindex":"eb1ed720-2e7f-11e6-829e-3d30250d0777","method":{"position":"org.apache.commons.io.TaggedIOException:64","type":"CtMethodImpl","sourcecode":"public static boolean isTaggedWith(java.lang.Throwable throwable, java.lang.Object tag) {\n    if ((((((((tag.indexOf(\"linux\")) != (-1)) || ((osName.indexOf(\"mpe/ix\")) != (-1))) || ((osName.indexOf(\"freebsd\")) != (-1))) || ((osName.indexOf(\"irix\")) != (-1))) || ((osName.indexOf(\"digital unix\")) != (-1))) || ((osName.indexOf(\"unix\")) != (-1))) || ((osName.indexOf(\"mac os x\")) != (-1))) {\n        {\n            if (tag == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((tag != null) && (throwable instanceof org.apache.commons.io.TaggedIOException)) && (tag.equals(((org.apache.commons.io.TaggedIOException)(throwable)).java.io.Serializable));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"osName":"tag"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:115","type":"CtBinaryOperatorImpl","sourcecode":"charset == (java.nio.charset.Charset.forName(\"UTF-16\"))"},"failures":[],"tindex":"eb1efe31-2e7f-11e6-829e-b70f885e970a","method":{"position":"org.apache.commons.io.IOUtils:2123","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.Reader input, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (encoding == (java.nio.charset.Charset.forName(\"UTF-16\"))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.OutputStreamWriter java.io.OutputStreamWriter = new java.io.OutputStreamWriter(output , org.apache.commons.io.Charsets.toCharset(encoding));\n            org.apache.commons.io.IOUtils.copy(input, out);\n            out.flush();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"encoding"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:431","type":"CtBinaryOperatorImpl","sourcecode":"size <= prefix"},"failures":[],"tindex":"eb1efe32-2e7f-11e6-829e-5faa684fb00f","method":{"position":"org.apache.commons.io.output.NullOutputStream:53","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) {\n    if (b <= b) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"b","prefix":"b"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:140","type":"CtBinaryOperatorImpl","sourcecode":"(writer) != null"},"failures":[],"tindex":"eb1efe33-2e7f-11e6-829e-77a17e7fd826","method":{"position":"org.apache.commons.io.IOUtils:218","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.Writer output) {\n    if (output != null) {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(output)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"writer":"output"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:259","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"eb1efe34-2e7f-11e6-829e-43f42bb2fbf3","method":{"position":"org.apache.commons.io.FilenameUtils:481","type":"CtMethodImpl","sourcecode":"public static java.lang.String concat(java.lang.String basePath, java.lang.String fullFilenameToAdd) {\n    if (fullFilenameToAdd == null) {\n        {\n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(fullFilenameToAdd);\n            if (prefix < 0) {\n                return null;\n            } \n            if (prefix > 0) {\n                return org.apache.commons.io.FilenameUtils.normalize(fullFilenameToAdd);\n            } \n            if (basePath == null) {\n                return null;\n            } \n            int int = basePath.length();\n            if (len == 0) {\n                return org.apache.commons.io.FilenameUtils.normalize(fullFilenameToAdd);\n            } \n            char char = basePath.charAt((len - 1));\n            if (org.apache.commons.io.FilenameUtils.isSeparator(ch)) {\n                return org.apache.commons.io.FilenameUtils.normalize((basePath + fullFilenameToAdd));\n            } else {\n                return org.apache.commons.io.FilenameUtils.normalize(((basePath + '/') + fullFilenameToAdd));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"fullFilenameToAdd"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:541","type":"CtBinaryOperatorImpl","sourcecode":"((xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16)))) && (!(xmlEnc.equals(bomEnc)))"},"failures":[],"tindex":"eb1f2545-2e7f-11e6-829e-09d6fc66c500","method":{"position":"org.apache.commons.io.IOUtils:1164","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.CharSequence input, java.nio.charset.Charset encoding) {\n    if (((input != null) && (!(xmlEnc.equals(input)))) && (!(xmlEnc.equals(input)))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toInputStream(input.toString(), encoding);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"input","xmlEnc":"input","org.apache.commons.io.input.XmlStreamReader.UTF_16":"input"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"eb1f2546-2e7f-11e6-829e-e3f0d8b8ff85","method":{"position":"org.apache.commons.io.IOUtils:539","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.Reader input) throws java.io.IOException {\n    if (input == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toByteArray(input, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2368","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"eb1f2547-2e7f-11e6-829e-7b51d63dc2b4","method":{"position":"org.apache.commons.io.FileCleaner:73","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void track(java.io.File file, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if (!(file.isDirectory())) {\n        {\n            org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaningTracker.track(file, marker, deleteStrategy);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:295","type":"CtBinaryOperatorImpl","sourcecode":"(file.canRead()) == false"},"failures":[],"tindex":"eb1f4c58-2e7f-11e6-829e-d70673de46ce","method":{"position":"org.apache.commons.io.FileUtils:591","type":"CtMethodImpl","sourcecode":"public static java.util.Collection<java.io.File> listFilesAndDirs(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter, org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if ((directory.canRead()) == false) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.validateListFilesParameters(directory, fileFilter);\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = org.apache.commons.io.FileUtils.setUpEffectiveFileFilter(fileFilter);\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(dirFilter);\n            java.util.Collection<java.io.File> java.util.Collection<java.io.File> = new java.util.LinkedList<java.io.File>();\n            if (directory.isDirectory()) {\n                files.add(directory);\n            } \n            org.apache.commons.io.FileUtils.innerListFiles(files, directory, org.apache.commons.io.filefilter.FileFilterUtils.or(effFileFilter, effDirFilter), true);\n            return files;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"directory"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:550","type":"CtBinaryOperatorImpl","sourcecode":"(xmlGuessEnc != null) && (!(xmlGuessEnc.equals(bomEnc)))"},"failures":[],"tindex":"eb1f4c59-2e7f-11e6-829e-7f53ae065f3a","method":{"position":"org.apache.commons.io.output.NullWriter:125","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str, int st, int end) {\n    if ((str != null) && (!(xmlGuessEnc.equals(str)))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                {\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"str","xmlGuessEnc":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:334","type":"CtBinaryOperatorImpl","sourcecode":"sock != null"},"failures":[],"tindex":"eb1f4c5a-2e7f-11e6-829e-5f09e55248c9","method":{"position":"org.apache.commons.io.IOUtils:333","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.net.Socket sock) {\n    if (sock != null) {\n        {\n            if (sock != null) {\n                try {\n                    sock.close();\n                } catch (java.io.IOException ioe) {\n                }\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sock":"sock"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:292","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"eb1f4c5b-2e7f-11e6-829e-0fd2ac11d6b4","method":{"position":"org.apache.commons.io.FileUtils:1308","type":"CtMethodImpl","sourcecode":"public static void copyDirectory(java.io.File srcDir, java.io.File destDir, java.io.FileFilter filter) throws java.io.IOException {\n    if (srcDir.isDirectory()) {\n        {\n            org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir, filter, true);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"srcDir"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:212","type":"CtBinaryOperatorImpl","sourcecode":"(xmlPrologWriter) != null"},"failures":[],"tindex":"eb1f736c-2e7f-11e6-829e-45d1d6928761","method":{"position":"org.apache.commons.io.CopyUtils:241","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output) throws java.io.IOException {\n    if (output != null) {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input);\n            org.apache.commons.io.CopyUtils.copy(in, output);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"xmlPrologWriter":"output"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:550","type":"CtBinaryOperatorImpl","sourcecode":"(xmlGuessEnc != null) && (!(xmlGuessEnc.equals(bomEnc)))"},"failures":[],"tindex":"eb1f736d-2e7f-11e6-829e-8f0ef99a87cd","method":{"position":"org.apache.commons.io.FilenameUtils:864","type":"CtMethodImpl","sourcecode":"public static java.lang.String getFullPath(java.lang.String filename) {\n    if ((filename != null) && (!(xmlGuessEnc.equals(filename)))) {\n        {\n            return org.apache.commons.io.FilenameUtils.doGetFullPath(filename, true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"filename","xmlGuessEnc":"filename"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:69","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"eb1f736e-2e7f-11e6-829e-d3877f98e001","method":{"position":"org.apache.commons.io.input.XmlStreamReader:704","type":"CtMethodImpl","sourcecode":"private static java.lang.String getXmlProlog(java.io.InputStream is, java.lang.String guessedEnc) throws java.io.IOException {\n    if (guessedEnc == null) {\n        {\n            java.lang.String java.lang.String = null;\n            if (guessedEnc != null) {\n                byte[] byte[] = new byte[org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int];\n                is.mark(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int);\n                int int = 0;\n                int int = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int;\n                int int = is.read(bytes, offset, max);\n                int int = -1;\n                java.lang.String java.lang.String = null;\n                while (((c != (-1)) && (firstGT == (-1))) && (offset < (org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int))) {\n                    offset += c;\n                    max -= c;\n                    c = is.read(bytes, offset, max);\n                    xmlProlog = new java.lang.String(bytes , 0 , offset , guessedEnc);\n                    firstGT = xmlProlog.indexOf('>');\n                }\n                if (firstGT == (-1)) {\n                    if (c == (-1)) {\n                        throw new java.io.IOException(\"Unexpected end of XML stream\");\n                    } else {\n                        throw new java.io.IOException(((\"XML prolog or ROOT element not found on first \" + offset) + \" bytes\"));\n                    }\n                } \n                int int = offset;\n                if (bytesRead > 0) {\n                    is.reset();\n                    java.io.BufferedReader java.io.BufferedReader = new java.io.BufferedReader(new java.io.StringReader(xmlProlog.substring(0, (firstGT + 1))));\n                    java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer();\n                    java.lang.String java.lang.String = bReader.readLine();\n                    while (line != null) {\n                        prolog.append(line);\n                        line = bReader.readLine();\n                    }\n                    java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.util.regex.Pattern.matcher(prolog);\n                    if (m.find()) {\n                        encoding = m.group(1).toUpperCase();\n                        encoding = encoding.substring(1, ((encoding.length()) - 1));\n                    } \n                } \n            } \n            return encoding;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"guessedEnc"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:628","type":"CtBinaryOperatorImpl","sourcecode":"(cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32BE)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32LE))"},"failures":[],"tindex":"eb1f9a7f-2e7f-11e6-829e-558732d69d68","method":{"position":"org.apache.commons.io.FileSystemUtils:141","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static long freeSpace(java.lang.String path) throws java.io.IOException {\n    if ((path.equals(path)) || (cTEnc.equals(path))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.freeSpaceOS(path, org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int, false, (-1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cTEnc":"path","org.apache.commons.io.input.XmlStreamReader.UTF_32BE":"path","org.apache.commons.io.input.XmlStreamReader.UTF_32LE":"path"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:72","type":"CtBinaryOperatorImpl","sourcecode":"osName == null"},"failures":[],"tindex":"eb1f9a80-2e7f-11e6-829e-d512c590066b","method":{"position":"org.apache.commons.io.FileUtils:1733","type":"CtMethodImpl","sourcecode":"public static java.lang.String readFileToString(java.io.File file, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            return org.apache.commons.io.FileUtils.readFileToString(file, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"osName":"encoding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:580","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"eb1fc191-2e7f-11e6-829e-4b624e34415f","method":{"position":"org.apache.commons.io.input.XmlStreamReader:678","type":"CtMethodImpl","sourcecode":"static java.lang.String getContentTypeEncoding(java.lang.String httpContentType) {\n    if (httpContentType == null) {\n        {\n            java.lang.String java.lang.String = null;\n            if (httpContentType != null) {\n                int int = httpContentType.indexOf(\";\");\n                if (i > (-1)) {\n                    java.lang.String java.lang.String = httpContentType.substring((i + 1));\n                    java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.util.regex.Pattern.matcher(postMime);\n                    encoding = m.find() ? m.group(1) : null;\n                    encoding = encoding != null ? encoding.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale) : null;\n                } \n            } \n            return encoding;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"httpContentType"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.SuffixFileFilter:73","type":"CtBinaryOperatorImpl","sourcecode":"suffix == null"},"failures":[],"tindex":"eb1fc192-2e7f-11e6-829e-e3dfdfb874a6","method":{"position":"org.apache.commons.io.FilenameUtils:749","type":"CtMethodImpl","sourcecode":"public static java.lang.String getPrefix(java.lang.String filename) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\n            if (len < 0) {\n                return null;\n            } \n            if (len > (filename.length())) {\n                return filename + (org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n            } \n            return filename.substring(0, len);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"suffix":"filename"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2367","type":"CtInvocationImpl","sourcecode":"directory.exists()"},"failures":[],"tindex":"eb1fc193-2e7f-11e6-829e-9ff42e435c68","method":{"position":"org.apache.commons.io.filefilter.HiddenFileFilter:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.exists()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return file.isHidden();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1030","type":"CtBinaryOperatorImpl","sourcecode":"index == (-1)"},"failures":[],"tindex":"eb1fe8a4-2e7f-11e6-829e-45d4fd5839fb","method":{"position":"org.apache.commons.io.input.BOMInputStream:331","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] buf, int off, int len) throws java.io.IOException {\n    if (off == (-1)) {\n        {\n            if (len < 0) {\n                {\n                    int int = 0;\n                    int int = 0;\n                    while ((len > 0) && (b >= 0)) {\n                        b = readFirstBytes();\n                        if (b >= 0) {\n                            buf[(off++)] = ((byte)(b & 255));\n                            len--;\n                            firstCount++;\n                        } \n                    }\n                    int int = java.io.InputStream.read(buf, off, len);\n                    return secondCount < 0 ? firstCount > 0 ? firstCount : -1 : firstCount + secondCount;\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"off"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2223","type":"CtBinaryOperatorImpl","sourcecode":"ch != ch2"},"failures":[],"tindex":"eb1fe8a5-2e7f-11e6-829e-6f4ad92a8c17","method":{"position":"org.apache.commons.io.input.ProxyInputStream:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void mark(int readlimit) {\n    if (readlimit != readlimit) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.InputStream.mark(readlimit);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"readlimit","ch2":"readlimit"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:72","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"eb1fe8a6-2e7f-11e6-829e-9dd96a794f4e","method":{"position":"org.apache.commons.io.IOUtils:273","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.OutputStream output) {\n    if (null != output) {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(output)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:223","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"eb1fe8a7-2e7f-11e6-829e-19e96b291b2e","method":{"position":"org.apache.commons.io.FileUtils:729","type":"CtMethodImpl","sourcecode":"public static boolean contentEquals(java.io.File file1, java.io.File file2) throws java.io.IOException {\n    if (file1 == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            boolean boolean = file1.exists();\n            if (file1Exists != (file2.exists())) {\n                return false;\n            } \n            if (!file1Exists) {\n                return true;\n            } \n            if ((file1.isDirectory()) || (file2.isDirectory())) {\n                throw new java.io.IOException(\"Can't compare directories, only files\");\n            } \n            if ((file1.length()) != (file2.length())) {\n                return false;\n            } \n            if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {\n                return true;\n            } \n            java.io.InputStream java.io.InputStream = null;\n            java.io.InputStream java.io.InputStream = null;\n            try {\n                input1 = new java.io.FileInputStream(file1);\n                input2 = new java.io.FileInputStream(file2);\n                return org.apache.commons.io.IOUtils.contentEquals(input1, input2);\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(input1);\n                org.apache.commons.io.IOUtils.closeQuietly(input2);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file1"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2787","type":"CtUnaryOperatorImpl","sourcecode":"!(destDir.exists())"},"failures":[],"tindex":"eb200fb8-2e7f-11e6-829e-c11b9ce3098d","method":{"position":"org.apache.commons.io.FileDeleteStrategy:114","type":"CtMethodImpl","sourcecode":"protected boolean doDelete(java.io.File fileToDelete) throws java.io.IOException {\n    if (!(fileToDelete.exists())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return fileToDelete.delete();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"fileToDelete"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2286","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.io.IOUtils.SKIP_BYTE_BUFFER) == null"},"failures":[],"tindex":"eb200fb9-2e7f-11e6-829e-6326128f13f6","method":{"position":"org.apache.commons.io.input.CharSequenceInputStream:160","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return read(b, 0, b.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.IOUtils.SKIP_BYTE_BUFFER":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2747","type":"CtInvocationImpl","sourcecode":"destDir.exists()"},"failures":[],"tindex":"eb200fba-2e7f-11e6-829e-45cebbe52162","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:83","type":"CtMethodImpl","sourcecode":"public void onFileDelete(final java.io.File file) {\n    if (file.exists()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:910","type":"CtBinaryOperatorImpl","sourcecode":"prefix < 0"},"failures":[],"tindex":"eb200fbb-2e7f-11e6-829e-c5634c9969dc","method":{"position":"org.apache.commons.io.output.NullOutputStream:44","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b, int off, int len) {\n    if (len < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"len"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:443","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"eb2036cc-2e7f-11e6-829e-6bd620dd1a8c","method":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:238","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.exists())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(file.exists())) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (((file != null) && (file.isFile())) && (file.canRead())) {\n                        java.io.RandomAccessFile java.io.RandomAccessFile = null;\n                        try {\n                            byte[] byte[] = new byte[org.apache.commons.io.filefilter.MagicNumberFileFilter.this.byte[].int];\n                            randomAccessFile = new java.io.RandomAccessFile(file , \"r\");\n                            randomAccessFile.seek(long);\n                            int int = randomAccessFile.read(fileBytes);\n                            if (read != (byte[].int)) {\n                                return false;\n                            } \n                            return java.util.Arrays.equals(org.apache.commons.io.filefilter.MagicNumberFileFilter.this.byte[], fileBytes);\n                        } catch (java.io.IOException ioe) {\n                        } finally {\n                            org.apache.commons.io.IOUtils.closeQuietly(randomAccessFile);\n                        }\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:790","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"eb2036cd-2e7f-11e6-829e-83ecf61b536a","method":{"position":"org.apache.commons.io.filefilter.OrFileFilter:100","type":"CtMethodImpl","sourcecode":"public boolean removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter ioFileFilter) {\n    if (ioFileFilter == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.filefilter.OrFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.remove(ioFileFilter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"ioFileFilter"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1030","type":"CtBinaryOperatorImpl","sourcecode":"index == (-1)"},"failures":[],"tindex":"eb205dde-2e7f-11e6-829e-c32f98921d46","method":{"position":"org.apache.commons.io.IOUtils:2401","type":"CtMethodImpl","sourcecode":"public static int read(java.io.Reader input, char[] buffer, int offset, int length) throws java.io.IOException {\n    if (length == (-1)) {\n        {\n            if (offset != offset) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (length < 0) {\n                        throw new java.lang.IllegalArgumentException((\"Length must not be negative: \" + length));\n                    } \n                    int int = length;\n                    while (remaining > 0) {\n                        int int = length - remaining;\n                        int int = input.read(buffer, (offset + location), remaining);\n                        if ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) == count) {\n                            break;\n                        } \n                        remaining -= count;\n                    }\n                    return length - remaining;\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"length"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:482","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"eb205ddf-2e7f-11e6-829e-a949998a43a6","method":{"position":"org.apache.commons.io.FileUtils:1560","type":"CtMethodImpl","sourcecode":"public static boolean deleteQuietly(java.io.File file) {\n    if (file.isDirectory()) {\n        {\n            if (file == null) {\n                return false;\n            } \n            try {\n                if (file.isDirectory()) {\n                    org.apache.commons.io.FileUtils.cleanDirectory(file);\n                } \n            } catch (java.lang.Exception ignored) {\n            }\n            try {\n                return file.delete();\n            } catch (java.lang.Exception ignored) {\n                return false;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:211","type":"CtBinaryOperatorImpl","sourcecode":"(firstBytes) == null"},"failures":[],"tindex":"eb2084f0-2e7f-11e6-829e-710ccdeec360","method":{"position":"org.apache.commons.io.FileCleaningTracker:134","type":"CtMethodImpl","sourcecode":"private synchronized void addTracker(java.lang.String path, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if (marker == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (marker == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(marker.exists())) {\n                        {\n                            if (boolean) {\n                                throw new java.lang.IllegalStateException(\"No new trackers can be added once exitWhenFinished() is called\");\n                            } \n                            if ((java.lang.Thread) == null) {\n                                java.lang.Thread = new org.apache.commons.io.FileCleaningTracker.Reaper();\n                                java.lang.Thread.start();\n                            } \n                            java.util.Collection<org.apache.commons.io.FileCleaningTracker.Tracker>.add(new org.apache.commons.io.FileCleaningTracker.Tracker(path , deleteStrategy , marker , java.lang.ref.ReferenceQueue<java.lang.Object>));\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstBytes":"marker"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:336","type":"CtBinaryOperatorImpl","sourcecode":"b >= 0"},"failures":[],"tindex":"eb2084f1-2e7f-11e6-829e-555b81f00925","method":{"position":"org.apache.commons.io.EndianUtils:239","type":"CtMethodImpl","sourcecode":"public static void writeSwappedFloat(byte[] data, int offset, float value) {\n    if (offset >= 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.EndianUtils.writeSwappedInteger(data, offset, java.lang.Float.floatToIntBits(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"offset"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1281","type":"CtBinaryOperatorImpl","sourcecode":"(filename == null) || (wildcardMatcher == null)"},"failures":[],"tindex":"eb2084f2-2e7f-11e6-829e-f905f3906555","method":{"position":"org.apache.commons.io.IOUtils:1010","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding == null) || (encoding == null)) {\n        {\n            return org.apache.commons.io.IOUtils.readLines(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"encoding","wildcardMatcher":"encoding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:270","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"eb20ac03-2e7f-11e6-829e-e73d2ae513dc","method":{"position":"org.apache.commons.io.filefilter.OrFileFilter:86","type":"CtMethodImpl","sourcecode":"public void addFileFilter(final org.apache.commons.io.filefilter.IOFileFilter ioFileFilter) {\n    if (ioFileFilter == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.filefilter.OrFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.add(ioFileFilter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"ioFileFilter"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:115","type":"CtBinaryOperatorImpl","sourcecode":"charset == (java.nio.charset.Charset.forName(\"UTF-16\"))"},"failures":[],"tindex":"eb20ac04-2e7f-11e6-829e-3b5881d9cccb","method":{"position":"org.apache.commons.io.IOUtils:695","type":"CtMethodImpl","sourcecode":"public static char[] toCharArray(java.io.InputStream is, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (encoding == (java.nio.charset.Charset.forName(\"UTF-16\"))) {\n        {\n            java.io.CharArrayWriter java.io.CharArrayWriter = new java.io.CharArrayWriter();\n            org.apache.commons.io.IOUtils.copy(is, output, encoding);\n            return output.toCharArray();\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"encoding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:631","type":"CtBinaryOperatorImpl","sourcecode":"ch0 == ':'"},"failures":[],"tindex":"eb20ac05-2e7f-11e6-829e-1776edd35fca","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:70","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(char value) {\n    if (value == ':') {\n        {\n            java.lang.StringBuilder.append(value);\n            return org.apache.commons.io.output.StringBuilderWriter.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch0":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileEntry:71","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"eb20ac06-2e7f-11e6-829e-6124a9772d55","method":{"position":"org.apache.commons.io.comparator.SizeFileComparator:108","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (file1 == null) {\n        {\n            long long = 0;\n            if (file1.isDirectory()) {\n                size1 = (boolean) && (file1.exists()) ? org.apache.commons.io.FileUtils.sizeOfDirectory(file1) : 0;\n            } else {\n                size1 = file1.length();\n            }\n            long long = 0;\n            if (file2.isDirectory()) {\n                size2 = (boolean) && (file2.exists()) ? org.apache.commons.io.FileUtils.sizeOfDirectory(file2) : 0;\n            } else {\n                size2 = file2.length();\n            }\n            long long = size1 - size2;\n            if (result < 0) {\n                return -1;\n            } else if (result > 0) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:921","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[],"tindex":"eb20d317-2e7f-11e6-829e-ebf94675666b","method":{"position":"org.apache.commons.io.IOUtils:2447","type":"CtMethodImpl","sourcecode":"public static int read(java.io.InputStream input, byte[] buffer, int offset, int length) throws java.io.IOException {\n    if (length < 0) {\n        {\n            if (length < 0) {\n                throw new java.lang.IllegalArgumentException((\"Length must not be negative: \" + length));\n            } \n            int int = length;\n            while (remaining > 0) {\n                int int = length - remaining;\n                int int = input.read(buffer, (offset + location), remaining);\n                if ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) == count) {\n                    break;\n                } \n                remaining -= count;\n            }\n            return length - remaining;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"length"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:405","type":"CtBinaryOperatorImpl","sourcecode":"i == (prefix + 2)"},"failures":[],"tindex":"eb20d318-2e7f-11e6-829e-17efc4a76f59","method":{"position":"org.apache.commons.io.output.ProxyWriter:242","type":"CtMethodImpl","sourcecode":"protected void beforeWrite(int n) throws java.io.IOException {\n    if (n == (n + 2)) {\n        {\n            if (n == (-1)) {\n                throw new java.io.IOException();\n            } else {\n                {\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"n","i":"n"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:237","type":"CtUnaryOperatorImpl","sourcecode":"!(lockDir.canWrite())"},"failures":[],"tindex":"eb20d319-2e7f-11e6-829e-3f396d2ee53c","method":{"position":"org.apache.commons.io.FileUtils:476","type":"CtMethodImpl","sourcecode":"private static void innerListFiles(java.util.Collection<java.io.File> files, java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter filter, boolean includeSubDirectories) {\n    if (!(directory.canWrite())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(directory.exists())) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.io.File[] java.io.File[] = directory.listFiles(((java.io.FileFilter)(filter)));\n                    if (found != null) {\n                        for (java.io.File java.io.File : found) {\n                            if (file.isDirectory()) {\n                                if (includeSubDirectories) {\n                                    files.add(file);\n                                } \n                                org.apache.commons.io.FileUtils.innerListFiles(files, file, filter, includeSubDirectories);\n                            } else {\n                                files.add(file);\n                            }\n                        }\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lockDir":"directory"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:253","type":"CtBinaryOperatorImpl","sourcecode":"listener != null"},"failures":[],"tindex":"eb20fa2a-2e7f-11e6-829e-931fe96a1f5c","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:241","type":"CtMethodImpl","sourcecode":"public void addListener(final org.apache.commons.io.monitor.FileAlterationListener listener) {\n    if (listener != null) {\n        {\n            if (listener != null) {\n                java.util.List<org.apache.commons.io.monitor.FileAlterationListener>.add(listener);\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"listener":"listener"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:489","type":"CtBinaryOperatorImpl","sourcecode":"encoding == null"},"failures":[],"tindex":"eb20fa2b-2e7f-11e6-829e-63658c000ece","method":{"position":"org.apache.commons.io.FileUtils:2014","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (data == null) {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, encoding, false);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2781","type":"CtBinaryOperatorImpl","sourcecode":"destDir == null"},"failures":[],"tindex":"eb20fa2c-2e7f-11e6-829e-9b0f0cab1206","method":{"position":"org.apache.commons.io.FileCleaningTracker:134","type":"CtMethodImpl","sourcecode":"private synchronized void addTracker(java.lang.String path, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if (marker == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (marker == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(marker.exists())) {\n                        {\n                            if (boolean) {\n                                throw new java.lang.IllegalStateException(\"No new trackers can be added once exitWhenFinished() is called\");\n                            } \n                            if ((java.lang.Thread) == null) {\n                                java.lang.Thread = new org.apache.commons.io.FileCleaningTracker.Reaper();\n                                java.lang.Thread.start();\n                            } \n                            java.util.Collection<org.apache.commons.io.FileCleaningTracker.Tracker>.add(new org.apache.commons.io.FileCleaningTracker.Tracker(path , deleteStrategy , marker , java.lang.ref.ReferenceQueue<java.lang.Object>));\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"marker"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:380","type":"CtBinaryOperatorImpl","sourcecode":"(path.length()) == 0"},"failures":[],"tindex":"eb21213d-2e7f-11e6-829e-99bc9945b1b9","method":{"position":"org.apache.commons.io.IOUtils:801","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding.length()) == 0) {\n        {\n            return org.apache.commons.io.IOUtils.toString(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"encoding"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.AutoCloseInputStream:76","type":"CtBinaryOperatorImpl","sourcecode":"n == (-1)"},"failures":[],"tindex":"eb21213e-2e7f-11e6-829e-f51d6723b91b","method":{"position":"org.apache.commons.io.EndianUtils:328","type":"CtMethodImpl","sourcecode":"public static void writeSwappedInteger(java.io.OutputStream output, int value) throws java.io.IOException {\n    if (value == (-1)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n            output.write(((byte)((value >> 16) & 255)));\n            output.write(((byte)((value >> 24) & 255)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1659","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"eb21213f-2e7f-11e6-829e-f187e99bbd8d","method":{"position":"org.apache.commons.io.output.TaggedOutputStream:112","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void handleIOException(java.io.IOException e) throws java.io.IOException {\n    if (null != e) {\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new org.apache.commons.io.TaggedIOException(e , java.io.Serializable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"e"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:680","type":"CtBinaryOperatorImpl","sourcecode":"httpContentType != null"},"failures":[],"tindex":"eb214850-2e7f-11e6-829e-5d722f24790e","method":{"position":"org.apache.commons.io.output.NullWriter:114","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str) {\n    if (str != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.Tailer:349","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"eb214851-2e7f-11e6-829e-978105af3b5a","method":{"position":"org.apache.commons.io.input.Tailer:448","type":"CtMethodImpl","sourcecode":"private long readLines(java.io.RandomAccessFile reader) throws java.io.IOException {\n    if (reader == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            long long = reader.getFilePointer();\n            long long = pos;\n            int int;\n            boolean boolean = false;\n            while ((boolean) && ((num = reader.read(byte[])) != (-1))) {\n                for (int int = 0 ; i < num ; i++) {\n                    byte byte = byte[][i];\n                    switch (ch) {\n                        case '\\n' :\n                            seenCR = false;\n                            org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                            sb.setLength(0);\n                            rePos = (pos + i) + 1;\n                            break;\n                        case '\\r' :\n                            if (seenCR) {\n                                sb.append('\\r');\n                            } \n                            seenCR = true;\n                            break;\n                        default :\n                            if (seenCR) {\n                                seenCR = false;\n                                org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                                sb.setLength(0);\n                                rePos = (pos + i) + 1;\n                            } \n                            sb.append(((char)(ch)));\n                    }\n                }\n                pos = reader.getFilePointer();\n            }\n            reader.seek(rePos);\n            return rePos;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"reader"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NotFileFilter:41","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"eb214852-2e7f-11e6-829e-85841eff7ca5","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:242","type":"CtMethodImpl","sourcecode":"public static java.util.Set<java.io.File> filterSet(org.apache.commons.io.filefilter.IOFileFilter filter, java.lang.Iterable<java.io.File> files) {\n    if (filter == null) {\n        {\n            return org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files, new java.util.HashSet<java.io.File>());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:658","type":"CtBinaryOperatorImpl","sourcecode":"i >= 0"},"failures":[],"tindex":"eb216f63-2e7f-11e6-829e-95455d7e1d6a","method":{"position":"org.apache.commons.io.input.AutoCloseInputStream:75","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void afterRead(int n) throws java.io.IOException {\n    if (n >= 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n == (-1)) {\n                close();\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"n"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2784","type":"CtBinaryOperatorImpl","sourcecode":"(!(destDir.exists())) && createDestDir"},"failures":[],"tindex":"eb216f64-2e7f-11e6-829e-47f14789845f","method":{"position":"org.apache.commons.io.FileUtils:1005","type":"CtMethodImpl","sourcecode":"public static void copyFileToDirectory(java.io.File srcFile, java.io.File destDir, boolean preserveFileDate) throws java.io.IOException {\n    if ((!(srcFile.exists())) && preserveFileDate) {\n        {\n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if ((destDir.exists()) && ((destDir.isDirectory()) == false)) {\n                throw new java.lang.IllegalArgumentException(((\"Destination '\" + destDir) + \"' is not a directory\"));\n            } \n            java.io.File java.io.File = new java.io.File(destDir , srcFile.getName());\n            org.apache.commons.io.FileUtils.copyFile(srcFile, destFile, preserveFileDate);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"createDestDir":"preserveFileDate","destDir":"srcFile"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceInputStream:114","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"eb216f65-2e7f-11e6-829e-d7ccea7ae174","method":{"position":"org.apache.commons.io.IOUtils:1285","type":"CtMethodImpl","sourcecode":"public static void write(byte[] data, java.io.Writer output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (data == null) {\n        {\n            if (data != null) {\n                output.write(new java.lang.String(data , org.apache.commons.io.Charsets.toCharset(encoding)));\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"data"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
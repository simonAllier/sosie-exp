{"failureDictionary":{},"transformations":[{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2858","type":"CtBinaryOperatorImpl","sourcecode":"destDir == null"},"failures":[],"tindex":"1a2a2611-2eca-11e6-a09f-d961141adf0a","method":{"position":"org.apache.commons.io.FileDeleteStrategy:114","type":"CtMethodImpl","sourcecode":"protected boolean doDelete(java.io.File fileToDelete) throws java.io.IOException {\n    if (fileToDelete == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return fileToDelete.delete();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"fileToDelete"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2663","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"1a2ae962-2eca-11e6-a09f-e78dae954bdd","method":{"position":"org.apache.commons.io.FileUtils:2014","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (file == null) {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, encoding, false);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:57","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"1a2ae963-2eca-11e6-a09f-f5cca3e146ea","method":{"position":"org.apache.commons.io.IOUtils:1473","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.CharSequence data, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:828","type":"CtBinaryOperatorImpl","sourcecode":"prefix < 0"},"failures":[],"tindex":"1a2b1074-2eca-11e6-a09f-4fc3087e9731","method":{"position":"org.apache.commons.io.input.ProxyReader:223","type":"CtMethodImpl","sourcecode":"protected void beforeRead(int n) throws java.io.IOException {\n    if (n < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"n"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1203","type":"CtInvocationImpl","sourcecode":"fileExt.equals(extension)"},"failures":[],"tindex":"1a2b1075-2eca-11e6-a09f-690d9a6e175f","method":{"position":"org.apache.commons.io.IOUtils:948","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(byte[] input, java.lang.String encoding) throws java.io.IOException {\n    if (encoding.equals(encoding)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return new java.lang.String(input , org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"extension":"encoding","fileExt":"encoding"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:611","type":"CtBinaryOperatorImpl","sourcecode":"bomEnc != null"},"failures":[],"tindex":"1a2b3786-2eca-11e6-a09f-939fc0d2e6c7","method":{"position":"org.apache.commons.io.IOUtils:1507","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.OutputStream output) throws java.io.IOException {\n    if (data != null) {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:111","type":"CtBinaryOperatorImpl","sourcecode":"(currentBuffer) == null"},"failures":[],"tindex":"1a2b3787-2eca-11e6-a09f-83f843b4747a","method":{"position":"org.apache.commons.io.CopyUtils:134","type":"CtMethodImpl","sourcecode":"public static void copy(byte[] input, java.io.OutputStream output) throws java.io.IOException {\n    if (input == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            output.write(input);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"currentBuffer":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOCase:147","type":"CtBinaryOperatorImpl","sourcecode":"(str1 == null) || (str2 == null)"},"failures":[],"tindex":"1a2b5e98-2eca-11e6-a09f-3703cd67c765","method":{"position":"org.apache.commons.io.input.XmlStreamReader:759","type":"CtMethodImpl","sourcecode":"static boolean isAppXml(java.lang.String mime) {\n    if ((mime == null) || (mime == null)) {\n        {\n            return (mime != null) && ((((mime.equals(\"application/xml\")) || (mime.equals(\"application/xml-dtd\"))) || (mime.equals(\"application/xml-external-parsed-entity\"))) || ((mime.startsWith(\"application/\")) && (mime.endsWith(\"+xml\"))));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str1":"mime","str2":"mime"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:303","type":"CtBinaryOperatorImpl","sourcecode":"remaining == 0"},"failures":[],"tindex":"1a2b85a9-2eca-11e6-a09f-31fbb621efc5","method":{"position":"org.apache.commons.io.DirectoryWalker:533","type":"CtMethodImpl","sourcecode":"protected void handleFile(java.io.File file, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (depth == 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"remaining":"depth"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2741","type":"CtUnaryOperatorImpl","sourcecode":"!(srcDir.exists())"},"failures":[],"tindex":"1a2b85aa-2eca-11e6-a09f-ad00cb842d8a","method":{"position":"org.apache.commons.io.FileUtils:1602","type":"CtMethodImpl","sourcecode":"public static boolean directoryContains(final java.io.File directory, final java.io.File child) throws java.io.IOException {\n    if (!(directory.exists())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (directory == null) {\n                throw new java.lang.IllegalArgumentException(\"Directory must not be null\");\n            } \n            if (!(directory.isDirectory())) {\n                throw new java.lang.IllegalArgumentException((\"Not a directory: \" + directory));\n            } \n            if (child == null) {\n                return false;\n            } \n            if ((!(directory.exists())) || (!(child.exists()))) {\n                return false;\n            } \n            java.lang.String java.lang.String = directory.getCanonicalPath();\n            java.lang.String java.lang.String = child.getCanonicalPath();\n            return org.apache.commons.io.FilenameUtils.directoryContains(canonicalParent, canonicalChild);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"directory"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.SwappedDataInputStream:142","type":"CtBinaryOperatorImpl","sourcecode":"(-1) == count"},"failures":[],"tindex":"1a2bacbb-2eca-11e6-a09f-3f8a9c3811d3","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:266","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int idx) throws java.io.IOException {\n    if ((-1) == idx) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.Writer.write(idx);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"idx"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.DirectoryWalker:359","type":"CtBinaryOperatorImpl","sourcecode":"childFiles == null"},"failures":[],"tindex":"1a2bd3cc-2eca-11e6-a09f-3f3d08f0f107","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:180","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.io.File> filterList(org.apache.commons.io.filefilter.IOFileFilter filter, java.io.File... files) {\n    if (files == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.File[] java.io.File[] = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files);\n            return java.util.Arrays.asList(acceptedFiles);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"childFiles":"files"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"1a2bd3cd-2eca-11e6-a09f-4fc530c0985d","method":{"position":"org.apache.commons.io.IOUtils:1654","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.util.Collection<?> lines, java.lang.String lineEnding, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (lines == null) {\n                return ;\n            } \n            if (lineEnding == null) {\n                lineEnding = org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.java.lang.String;\n            } \n            java.nio.charset.Charset java.nio.charset.Charset = org.apache.commons.io.Charsets.toCharset(encoding);\n            for (java.lang.Object java.lang.Object : lines) {\n                if (line != null) {\n                    output.write(line.toString().getBytes(cs));\n                } \n                output.write(lineEnding.getBytes(cs));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullReader:239","type":"CtBinaryOperatorImpl","sourcecode":"(mark) < 0"},"failures":[],"tindex":"1a2bfade-2eca-11e6-a09f-6bd50c0530e8","method":{"position":"org.apache.commons.io.IOUtils:2051","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.Reader input, java.io.Writer output, final long inputOffset, final long length, char[] buffer) throws java.io.IOException {\n    if (inputOffset < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (inputOffset > 0) {\n                org.apache.commons.io.IOUtils.skipFully(input, inputOffset);\n            } \n            if (length == 0) {\n                return 0;\n            } \n            int int = buffer.int;\n            if ((length > 0) && (length < (buffer.int))) {\n                bytesToRead = ((int)(length));\n            } \n            int int;\n            long long = 0;\n            while ((bytesToRead > 0) && ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) != (read = input.read(buffer, 0, bytesToRead)))) {\n                output.write(buffer, 0, read);\n                totalRead += read;\n                if (length > 0) {\n                    bytesToRead = ((int)(java.lang.Math.min((length - totalRead), buffer.int)));\n                } \n            }\n            return totalRead;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mark":"inputOffset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1530","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.exists())"},"failures":[],"tindex":"1a2c21ef-2eca-11e6-a09f-bdd13ee40d2e","method":{"position":"org.apache.commons.io.monitor.FileEntry:93","type":"CtMethodImpl","sourcecode":"public boolean refresh(java.io.File file) {\n    if (!(file.exists())) {\n        {\n            boolean boolean = boolean;\n            long long = long;\n            boolean boolean = boolean;\n            long long = long;\n            java.lang.String = file.getName();\n            boolean = file.exists();\n            boolean = boolean ? file.isDirectory() : false;\n            long = boolean ? file.lastModified() : 0;\n            long = (boolean) && (!(boolean)) ? file.length() : 0;\n            return ((((boolean) != origExists) || ((long) != origLastModified)) || ((boolean) != origDirectory)) || ((long) != origLength);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1711","type":"CtBinaryOperatorImpl","sourcecode":"lineEnding == null"},"failures":[],"tindex":"1a2c4900-2eca-11e6-a09f-a5e0bed7cd92","method":{"position":"org.apache.commons.io.IOCase:182","type":"CtMethodImpl","sourcecode":"public boolean checkStartsWith(java.lang.String str, java.lang.String start) {\n    if (str == null) {\n        {\n            return str.regionMatches((!(boolean)), 0, start, 0, start.length());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineEnding":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NotFileFilter:41","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"1a2c4901-2eca-11e6-a09f-85f5c7be8f83","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:774","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if ((filter == null) || (filter == null)) {\n        {\n            if (filter == null) {\n                {\n                    if (filter == null) {\n                        return org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter;\n                    } \n                    return new org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter , filter);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:246","type":"CtBinaryOperatorImpl","sourcecode":"read != (magicNumbers.length)"},"failures":[],"tindex":"1a2c7012-2eca-11e6-a09f-f359c7eec1e3","method":{"position":"org.apache.commons.io.EndianUtils:272","type":"CtMethodImpl","sourcecode":"public static double readSwappedDouble(byte[] data, int offset) {\n    if (offset != offset) {\n        {\n            return java.lang.Double.longBitsToDouble(org.apache.commons.io.EndianUtils.readSwappedLong(data, offset));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"read":"offset","magicNumbers":"data","length":"offset"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:116","type":"CtInvocationImpl","sourcecode":"file2.isDirectory()"},"failures":[],"tindex":"1a2c7013-2eca-11e6-a09f-d3df5c46c206","method":{"position":"org.apache.commons.io.FileUtils:2091","type":"CtMethodImpl","sourcecode":"public static void writeByteArrayToFile(java.io.File file, byte[] data, boolean append) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            java.io.OutputStream java.io.OutputStream = null;\n            try {\n                out = org.apache.commons.io.FileUtils.openOutputStream(file, append);\n                out.write(data);\n                out.close();\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(out);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1369","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"1a2c9724-2eca-11e6-a09f-09f341455785","method":{"position":"org.apache.commons.io.IOUtils:2401","type":"CtMethodImpl","sourcecode":"public static int read(java.io.Reader input, char[] buffer, int offset, int length) throws java.io.IOException {\n    if (buffer != null) {\n        {\n            if (length < 0) {\n                throw new java.lang.IllegalArgumentException((\"Length must not be negative: \" + length));\n            } \n            int int = length;\n            while (remaining > 0) {\n                int int = length - remaining;\n                int int = input.read(buffer, (offset + location), remaining);\n                if ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) == count) {\n                    break;\n                } \n                remaining -= count;\n            }\n            return length - remaining;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"buffer"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:788","type":"CtBinaryOperatorImpl","sourcecode":"file1Exists != (file2.exists())"},"failures":[],"tindex":"1a2cbe35-2eca-11e6-a09f-cd9f706b0254","method":{"position":"org.apache.commons.io.FileUtils:2043","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, java.nio.charset.Charset encoding, boolean append) throws java.io.IOException {\n    if (append != (file.exists())) {\n        {\n            java.lang.String java.lang.String = data == null ? null : data.toString();\n            org.apache.commons.io.FileUtils.writeStringToFile(file, str, encoding, append);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file1Exists":"append","file2":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:925","type":"CtBinaryOperatorImpl","sourcecode":"end == 0"},"failures":[],"tindex":"1a2cbe36-2eca-11e6-a09f-e7e06e6de90b","method":{"position":"org.apache.commons.io.input.NullInputStream:226","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] bytes, int offset, int length) throws java.io.IOException {\n    if (length == 0) {\n        {\n            if (boolean) {\n                throw new java.io.IOException(\"Read after end of file\");\n            } \n            if ((long) == (long)) {\n                return doEndOfFile();\n            } \n            long += length;\n            int int = length;\n            if ((long) > (long)) {\n                returnLength = length - ((int)(((long) - (long))));\n                long = long;\n            } \n            processBytes(bytes, offset, returnLength);\n            return returnLength;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"end":"length"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1199","type":"CtBinaryOperatorImpl","sourcecode":"(destDir.exists()) && ((destDir.isDirectory()) == false)"},"failures":[],"tindex":"1a2ce547-2eca-11e6-a09f-89387e08ccb2","method":{"position":"org.apache.commons.io.FileUtils:1708","type":"CtMethodImpl","sourcecode":"public static java.lang.String readFileToString(java.io.File file, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if ((file.exists()) && ((destDir.isDirectory()) == false)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = org.apache.commons.io.FileUtils.openInputStream(file);\n                return org.apache.commons.io.IOUtils.toString(in, org.apache.commons.io.Charsets.toCharset(encoding));\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2791","type":"CtUnaryOperatorImpl","sourcecode":"!(destDir.isDirectory())"},"failures":[],"tindex":"1a2ce548-2eca-11e6-a09f-a5c53647fc3f","method":{"position":"org.apache.commons.io.FileUtils:2920","type":"CtMethodImpl","sourcecode":"public static boolean isSymlink(java.io.File file) throws java.io.IOException {\n    if (!(file.isDirectory())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File must not be null\");\n            } \n            if (org.apache.commons.io.FilenameUtils.isSystemWindows()) {\n                return false;\n            } \n            java.io.File java.io.File = null;\n            if ((file.getParent()) == null) {\n                fileInCanonicalDir = file;\n            } else {\n                java.io.File java.io.File = file.getParentFile().getCanonicalFile();\n                fileInCanonicalDir = new java.io.File(canonicalDir , file.getName());\n            }\n            if (fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:71","type":"CtBinaryOperatorImpl","sourcecode":"reader instanceof java.io.BufferedReader"},"failures":[],"tindex":"1a2ce549-2eca-11e6-a09f-a5e9f0f18a26","method":{"position":"org.apache.commons.io.IOUtils:539","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.Reader input) throws java.io.IOException {\n    if (input instanceof java.io.BufferedReader) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (input instanceof java.io.BufferedReader) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.io.IOUtils.toByteArray(input, java.nio.charset.Charset.defaultCharset());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:754","type":"CtBinaryOperatorImpl","sourcecode":"len < 0"},"failures":[],"tindex":"1a2d0c5a-2eca-11e6-a09f-cd02b704af39","method":{"position":"org.apache.commons.io.ByteOrderMark:105","type":"CtMethodImpl","sourcecode":"public int get(int pos) {\n    if (pos < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return int[][pos];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"pos"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:628","type":"CtBinaryOperatorImpl","sourcecode":"(cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32BE)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32LE))"},"failures":[],"tindex":"1a2d0c5b-2eca-11e6-a09f-97505b5859d0","method":{"position":"org.apache.commons.io.FileUtils:1987","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data) throws java.io.IOException {\n    if ((data.equals(data)) || (cTEnc.equals(data))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, java.nio.charset.Charset.defaultCharset(), false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cTEnc":"data","org.apache.commons.io.input.XmlStreamReader.UTF_32BE":"data","org.apache.commons.io.input.XmlStreamReader.UTF_32LE":"data"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:758","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"1a2d0c5c-2eca-11e6-a09f-cf532a87d438","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:469","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if (filter == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.NotFileFilter(filter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:279","type":"CtBinaryOperatorImpl","sourcecode":"fileExistedAlready == false"},"failures":[],"tindex":"1a2d0c5d-2eca-11e6-a09f-2963457ed95d","method":{"position":"org.apache.commons.io.FileSystemUtils:258","type":"CtMethodImpl","sourcecode":"long freeSpaceOS(java.lang.String path, int os, boolean kb, long timeout) throws java.io.IOException {\n    if (kb == false) {\n        {\n            if (path == null) {\n                throw new java.lang.IllegalArgumentException(\"Path must not be empty\");\n            } \n            switch (os) {\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    return kb ? (freeSpaceWindows(path, timeout)) / (org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.long) : freeSpaceWindows(path, timeout);\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    return freeSpaceUnix(path, kb, false, timeout);\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    return freeSpaceUnix(path, kb, true, timeout);\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    throw new java.lang.IllegalStateException(\"Unsupported operating system\");\n                default :\n                    throw new java.lang.IllegalStateException(\"Exception caught when determining operating system\");\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileExistedAlready":"kb"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"1a2d336e-2eca-11e6-a09f-6dbea66decf7","method":{"position":"org.apache.commons.io.input.TaggedInputStream:101","type":"CtMethodImpl","sourcecode":"public void throwIfCauseOf(java.lang.Throwable throwable) throws java.io.IOException {\n    if (null != throwable) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(throwable, java.io.Serializable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"throwable"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:536","type":"CtBinaryOperatorImpl","sourcecode":"(bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE))"},"failures":[],"tindex":"1a2d336f-2eca-11e6-a09f-bf96f60b0baf","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:355","type":"CtMethodImpl","sourcecode":"public java.lang.String toString(java.lang.String enc) throws java.io.UnsupportedEncodingException {\n    if ((enc.equals(enc)) || (bomEnc.equals(enc))) {\n        {\n            return new java.lang.String(toByteArray() , enc);\n        }\n    } else {\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"enc","org.apache.commons.io.input.XmlStreamReader.UTF_16LE":"enc","org.apache.commons.io.input.XmlStreamReader.UTF_16BE":"enc"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:741","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"1a2d5a80-2eca-11e6-a09f-3dd7426ff640","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:242","type":"CtMethodImpl","sourcecode":"public static java.util.Set<java.io.File> filterSet(org.apache.commons.io.filefilter.IOFileFilter filter, java.lang.Iterable<java.io.File> files) {\n    if (filter == null) {\n        {\n            return org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files, new java.util.HashSet<java.io.File>());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:775","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"1a2d5a81-2eca-11e6-a09f-e7ba314bf6f4","method":{"position":"org.apache.commons.io.filefilter.AndFileFilter:101","type":"CtMethodImpl","sourcecode":"public boolean removeFileFilter(final org.apache.commons.io.filefilter.IOFileFilter ioFileFilter) {\n    if (ioFileFilter == null) {\n        {\n            return org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.remove(ioFileFilter);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"ioFileFilter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.ByteOrderMark:70","type":"CtBinaryOperatorImpl","sourcecode":"(charsetName == null) || ((charsetName.length()) == 0)"},"failures":[],"tindex":"1a2d5a82-2eca-11e6-a09f-0160b0225cfb","method":{"position":"org.apache.commons.io.FileUtils:2001","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, boolean append) throws java.io.IOException {\n    if ((data == null) || ((charsetName.length()) == 0)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, java.nio.charset.Charset.defaultCharset(), append);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsetName":"data"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1329","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"1a2d8193-2eca-11e6-a09f-71120fef0c80","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:276","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr) throws java.io.IOException {\n    if (chr != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.Writer.write(chr);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"chr"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"1a2d8194-2eca-11e6-a09f-a5a62789b977","method":{"position":"org.apache.commons.io.input.TaggedInputStream:112","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void handleIOException(java.io.IOException e) throws java.io.IOException {\n    if (null != e) {\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new org.apache.commons.io.TaggedIOException(e , java.io.Serializable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"e"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.LastModifiedFileComparator:69","type":"CtBinaryOperatorImpl","sourcecode":"result < 0"},"failures":[],"tindex":"1a2d8195-2eca-11e6-a09f-07820c6b56d2","method":{"position":"org.apache.commons.io.ThreadMonitor:67","type":"CtMethodImpl","sourcecode":"public static java.lang.Thread start(java.lang.Thread thread, long timeout) {\n    if (timeout < 0) {\n        {\n            java.lang.Thread java.lang.Thread = null;\n            if (timeout > 0) {\n                org.apache.commons.io.ThreadMonitor org.apache.commons.io.ThreadMonitor = new org.apache.commons.io.ThreadMonitor(thread , timeout);\n                monitor = new java.lang.Thread(timout , org.apache.commons.io.ThreadMonitor.org.apache.commons.io.ThreadMonitor.java.lang.Class.getSimpleName());\n                monitor.setDaemon(true);\n                monitor.start();\n            } \n            return monitor;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"timeout"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2068","type":"CtBinaryOperatorImpl","sourcecode":"length > 0"},"failures":[],"tindex":"1a2d8196-2eca-11e6-a09f-cf178176f282","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:542","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long cutoff, boolean acceptOlder) {\n    if (cutoff > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.AgeFileFilter(cutoff , acceptOlder);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"cutoff"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2308","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.exists())"},"failures":[],"tindex":"1a2da8a7-2eca-11e6-a09f-293e2984a1a1","method":{"position":"org.apache.commons.io.FileUtils:1961","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data) throws java.io.IOException {\n    if (!(file.exists())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeStringToFile(file, data, java.nio.charset.Charset.defaultCharset(), false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.ByteOrderMark:174","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"1a2da8a8-2eca-11e6-a09f-7707c6783094","method":{"position":"org.apache.commons.io.output.XmlStreamWriter:153","type":"CtMethodImpl","sourcecode":"private void detectEncoding(char[] cbuf, int off, int len) throws java.io.IOException {\n    if (off > 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = len;\n            java.lang.StringBuffer java.lang.StringBuffer = java.io.StringWriter.getBuffer();\n            if (((xmlProlog.length()) + len) > (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int)) {\n                size = (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int) - (xmlProlog.length());\n            } \n            java.io.StringWriter.write(cbuf, off, size);\n            if ((xmlProlog.length()) >= 5) {\n                if (xmlProlog.substring(0, 5).equals(\"<?xml\")) {\n                    int int = xmlProlog.indexOf(\"?>\");\n                    if (xmlPrologEnd > 0) {\n                        java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.java.util.regex.Pattern.matcher(xmlProlog.substring(0, xmlPrologEnd));\n                        if (m.find()) {\n                            java.lang.String = m.group(1).toUpperCase();\n                            java.lang.String = java.lang.String.substring(1, ((java.lang.String.length()) - 1));\n                        } else {\n                            java.lang.String = java.lang.String;\n                        }\n                    } else {\n                        if ((xmlProlog.length()) >= (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int)) {\n                            java.lang.String = java.lang.String;\n                        } \n                    }\n                } else {\n                    java.lang.String = java.lang.String;\n                }\n                if ((java.lang.String) != null) {\n                    java.io.StringWriter = null;\n                    java.io.Writer = new java.io.OutputStreamWriter(java.io.OutputStream , java.lang.String);\n                    java.io.Writer.write(xmlProlog.toString());\n                    if (len > size) {\n                        java.io.Writer.write(cbuf, (off + size), (len - size));\n                    } \n                } \n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"off"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:72","type":"CtBinaryOperatorImpl","sourcecode":"prefix == null"},"failures":[],"tindex":"1a2dcfb9-2eca-11e6-a09f-a56846e07063","method":{"position":"org.apache.commons.io.FileUtils:786","type":"CtMethodImpl","sourcecode":"public static boolean contentEqualsIgnoreEOL(java.io.File file1, java.io.File file2, java.lang.String charsetName) throws java.io.IOException {\n    if (charsetName == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            boolean boolean = file1.exists();\n            if (file1Exists != (file2.exists())) {\n                return false;\n            } \n            if (!file1Exists) {\n                return true;\n            } \n            if ((file1.isDirectory()) || (file2.isDirectory())) {\n                throw new java.io.IOException(\"Can't compare directories, only files\");\n            } \n            if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {\n                return true;\n            } \n            java.io.Reader java.io.Reader = null;\n            java.io.Reader java.io.Reader = null;\n            try {\n                if (charsetName == null) {\n                    input1 = new java.io.InputStreamReader(new java.io.FileInputStream(file1));\n                    input2 = new java.io.InputStreamReader(new java.io.FileInputStream(file2));\n                } else {\n                    input1 = new java.io.InputStreamReader(new java.io.FileInputStream(file1) , charsetName);\n                    input2 = new java.io.InputStreamReader(new java.io.FileInputStream(file2) , charsetName);\n                }\n                return org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(input1, input2);\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(input1);\n                org.apache.commons.io.IOUtils.closeQuietly(input2);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"charsetName"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:305","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[],"tindex":"1a2dcfba-2eca-11e6-a09f-35eb34e2ea92","method":{"position":"org.apache.commons.io.IOUtils:1138","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.LineIterator lineIterator(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding.length()) > 0) {\n        {\n            return org.apache.commons.io.IOUtils.lineIterator(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"encoding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:233","type":"CtUnaryOperatorImpl","sourcecode":"!(lockDir.exists())"},"failures":[],"tindex":"1a2df6cb-2eca-11e6-a09f-3b4c5f36404a","method":{"position":"org.apache.commons.io.comparator.CompositeFileComparator:91","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (!(file2.exists())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            for (java.util.Comparator<java.io.File> java.util.Comparator<java.io.File> : java.util.Comparator<java.io.File>[]) {\n                result = delegate.compare(file1, file2);\n                if (result != 0) {\n                    break;\n                } \n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lockDir":"file2"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.io.IOUtils.EOF) == count"},"failures":[],"tindex":"1a2df6cc-2eca-11e6-a09f-9d9b0baa5993","method":{"position":"org.apache.commons.io.input.ProxyInputStream:220","type":"CtMethodImpl","sourcecode":"protected void afterRead(int n) throws java.io.IOException {\n    if (n == n) {\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"n","org.apache.commons.io.IOUtils.EOF":"n"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:164","type":"CtBinaryOperatorImpl","sourcecode":"(magicNumber.length()) == 0"},"failures":[],"tindex":"1a2e1ddd-2eca-11e6-a09f-917fff1bab58","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence value) {\n    if ((value.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder.append(value);\n            return org.apache.commons.io.output.StringBuilderWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"magicNumber":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.AndFileFilter:61","type":"CtBinaryOperatorImpl","sourcecode":"fileFilters == null"},"failures":[],"tindex":"1a2e1dde-2eca-11e6-a09f-277cad4e2cd7","method":{"position":"org.apache.commons.io.filefilter.AndFileFilter:108","type":"CtMethodImpl","sourcecode":"public void setFileFilters(final java.util.List<org.apache.commons.io.filefilter.IOFileFilter> fileFilters) {\n    if (fileFilters == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.clear();\n            org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.addAll(fileFilters);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilters":"fileFilters"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2513","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.io.FileUtils.isSymlink(file))"},"failures":[],"tindex":"1a2e1ddf-2eca-11e6-a09f-33dc3e8399cd","method":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:72","type":"CtMethodImpl","sourcecode":"private int getType(java.io.File file) {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n        {\n            if (file.isDirectory()) {\n                return 1;\n            } else {\n                return 2;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2577","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[],"tindex":"1a2e44f0-2eca-11e6-a09f-354d32c44d1e","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:555","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date cutoffDate) {\n    if (cutoffDate == null) {\n        {\n            return new org.apache.commons.io.filefilter.AgeFileFilter(cutoffDate);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"cutoffDate"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2824","type":"CtInvocationImpl","sourcecode":"destFile.exists()"},"failures":[],"tindex":"1a2e44f1-2eca-11e6-a09f-2546d71322e8","method":{"position":"org.apache.commons.io.DirectoryWalker:561","type":"CtMethodImpl","sourcecode":"protected void handleDirectoryEnd(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (directory.exists()) {\n        {\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"directory"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:336","type":"CtBinaryOperatorImpl","sourcecode":"b >= 0"},"failures":[],"tindex":"1a2e44f2-2eca-11e6-a09f-cf25ea111c67","method":{"position":"org.apache.commons.io.input.NullReader:139","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void mark(int readlimit) {\n    if (readlimit >= 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(boolean)) {\n                throw new java.lang.UnsupportedOperationException(\"Mark not supported\");\n            } \n            long = long;\n            org.apache.commons.io.input.NullReader.this.long = readlimit;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"readlimit"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1176","type":"CtInvocationImpl","sourcecode":"fileExt.equals(extension)"},"failures":[],"tindex":"1a2e6c03-2eca-11e6-a09f-a77c97d4e452","method":{"position":"org.apache.commons.io.input.XmlStreamReader:654","type":"CtMethodImpl","sourcecode":"static java.lang.String getContentTypeMime(java.lang.String httpContentType) {\n    if (httpContentType.equals(httpContentType)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = null;\n            if (httpContentType != null) {\n                int int = httpContentType.indexOf(\";\");\n                if (i >= 0) {\n                    mime = httpContentType.substring(0, i);\n                } else {\n                    mime = httpContentType;\n                }\n                mime = mime.trim();\n            } \n            return mime;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"extension":"httpContentType","fileExt":"httpContentType"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:707","type":"CtBinaryOperatorImpl","sourcecode":"guessedEnc != null"},"failures":[],"tindex":"1a2e6c04-2eca-11e6-a09f-03d8f32c71b7","method":{"position":"org.apache.commons.io.FileCleaner:73","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void track(java.io.File file, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if (marker != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaningTracker.track(file, marker, deleteStrategy);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"guessedEnc":"marker"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2317","type":"CtBinaryOperatorImpl","sourcecode":"toSkip < 0"},"failures":[],"tindex":"1a2e6c05-2eca-11e6-a09f-e763ccb138ed","method":{"position":"org.apache.commons.io.input.ProxyInputStream:114","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long ln) throws java.io.IOException {\n    if (ln < 0) {\n        {\n            try {\n                return java.io.InputStream.skip(ln);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n                return 0;\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toSkip":"ln"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:443","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"1a2e9316-2eca-11e6-a09f-35c86ddc1896","method":{"position":"org.apache.commons.io.FileUtils:2502","type":"CtMethodImpl","sourcecode":"public static java.math.BigInteger sizeOfDirectoryAsBigInteger(java.io.File directory) {\n    if (!(directory.exists())) {\n        {\n            org.apache.commons.io.FileUtils.checkDirectory(directory);\n            final java.io.File[] java.io.File[] = directory.listFiles();\n            if (files == null) {\n                return java.math.BigInteger.java.math.BigInteger.java.math.BigInteger;\n            } \n            java.math.BigInteger java.math.BigInteger = java.math.BigInteger.java.math.BigInteger.java.math.BigInteger;\n            for (final java.io.File java.io.File : files) {\n                try {\n                    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n                        size = size.add(java.math.BigInteger.valueOf(org.apache.commons.io.FileUtils.sizeOf(file)));\n                    } \n                } catch (java.io.IOException ioe) {\n                }\n            }\n            return size;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BoundedInputStream:117","type":"CtBinaryOperatorImpl","sourcecode":"((max) >= 0) && ((pos) >= (max))"},"failures":[],"tindex":"1a2e9317-2eca-11e6-a09f-1d1687eadd7f","method":{"position":"org.apache.commons.io.input.CountingInputStream:57","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized long skip(final long length) throws java.io.IOException {\n    if ((length >= 0) && (length >= (long))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            final long long = super.skip(length);\n            org.apache.commons.io.input.CountingInputStream.this.long += skip;\n            return skip;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"max":"length","pos":"length"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"1a2e9318-2eca-11e6-a09f-13f4667fa41d","method":{"position":"org.apache.commons.io.IOUtils:758","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            if (null != input) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.io.IOUtils.toString(input, java.nio.charset.Charset.defaultCharset());\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:492","type":"CtBinaryOperatorImpl","sourcecode":"encoding == null"},"failures":[],"tindex":"1a2eba29-2eca-11e6-a09f-a5b051c1b6b8","method":{"position":"org.apache.commons.io.IOCase:217","type":"CtMethodImpl","sourcecode":"public int checkIndexOf(java.lang.String str, int strStartIndex, java.lang.String search) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (str.length()) - (search.length());\n            if (endIndex >= strStartIndex) {\n                for (int int = strStartIndex ; i <= endIndex ; i++) {\n                    if (checkRegionMatches(str, i, search)) {\n                        return i;\n                    } \n                }\n            } \n            return -1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"1a2eba2a-2eca-11e6-a09f-2fd9e1d1da19","method":{"position":"org.apache.commons.io.IOUtils:1590","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void write(java.lang.StringBuffer data, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, ((java.lang.String)(null)));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:251","type":"CtBinaryOperatorImpl","sourcecode":"fileExistedAlready == false"},"failures":[],"tindex":"1a2eba2b-2eca-11e6-a09f-a7d84cbf886a","method":{"position":"org.apache.commons.io.FileUtils:1950","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data, java.lang.String encoding, boolean append) throws java.io.IOException {\n    if (append == false) {\n        {\n            org.apache.commons.io.FileUtils.writeStringToFile(file, data, org.apache.commons.io.Charsets.toCharset(encoding), append);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileExistedAlready":"append"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.TeeInputStream:109","type":"CtBinaryOperatorImpl","sourcecode":"ch != (-1)"},"failures":[],"tindex":"1a2ee13c-2eca-11e6-a09f-67d8a464b80f","method":{"position":"org.apache.commons.io.output.NullWriter:105","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr, int st, int end) {\n    if (st != (-1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"st"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"(writer) == null"},"failures":[],"tindex":"1a2ee13d-2eca-11e6-a09f-b5938542cfb9","method":{"position":"org.apache.commons.io.IOUtils:1884","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output) throws java.io.IOException {\n    if (output == null) {\n        {\n            org.apache.commons.io.IOUtils.copy(input, output, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"writer":"output"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:115","type":"CtBinaryOperatorImpl","sourcecode":"charset == (java.nio.charset.Charset.forName(\"UTF-16\"))"},"failures":[],"tindex":"1a2ee13e-2eca-11e6-a09f-596a01377250","method":{"position":"org.apache.commons.io.IOUtils:847","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URI uri, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (encoding == (java.nio.charset.Charset.forName(\"UTF-16\"))) {\n        {\n            return org.apache.commons.io.IOUtils.toString(uri.toURL(), org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"encoding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:71","type":"CtBinaryOperatorImpl","sourcecode":"reader instanceof java.io.BufferedReader"},"failures":[],"tindex":"1a2ee13f-2eca-11e6-a09f-0d7962a784ea","method":{"position":"org.apache.commons.io.IOUtils:539","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.Reader input) throws java.io.IOException {\n    if (input instanceof java.io.BufferedReader) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (input instanceof java.io.BufferedReader) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.io.IOUtils.toByteArray(input, java.nio.charset.Charset.defaultCharset());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:192","type":"CtBinaryOperatorImpl","sourcecode":"directory == null"},"failures":[],"tindex":"1a2f0850-2eca-11e6-a09f-59360bf157cf","method":{"position":"org.apache.commons.io.filefilter.FileFileFilter:58","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return file.isFile();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:504","type":"CtBinaryOperatorImpl","sourcecode":"size < 0"},"failures":[],"tindex":"1a2f0851-2eca-11e6-a09f-054eac4f751e","method":{"position":"org.apache.commons.io.output.ThresholdingOutputStream:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b < 0) {\n        {\n            checkThreshold(1);\n            getStream().write(b);\n            (long)++;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:71","type":"CtBinaryOperatorImpl","sourcecode":"reader instanceof java.io.BufferedReader"},"failures":[],"tindex":"1a2f0852-2eca-11e6-a09f-1be8cb9ffaea","method":{"position":"org.apache.commons.io.IOUtils:2247","type":"CtMethodImpl","sourcecode":"public static boolean contentEqualsIgnoreEOL(java.io.Reader input1, java.io.Reader input2) throws java.io.IOException {\n    if (input2 instanceof java.io.BufferedReader) {\n        {\n            java.io.BufferedReader java.io.BufferedReader = org.apache.commons.io.IOUtils.toBufferedReader(input1);\n            java.io.BufferedReader java.io.BufferedReader = org.apache.commons.io.IOUtils.toBufferedReader(input2);\n            java.lang.String java.lang.String = br1.readLine();\n            java.lang.String java.lang.String = br2.readLine();\n            while (((line1 != null) && (line2 != null)) && (line1.equals(line2))) {\n                line1 = br1.readLine();\n                line2 = br2.readLine();\n            }\n            return line1 == null ? line2 == null ? true : false : line1.equals(line2);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1605","type":"CtBinaryOperatorImpl","sourcecode":"directory == null"},"failures":[],"tindex":"1a2f2f63-2eca-11e6-a09f-594951c78e1d","method":{"position":"org.apache.commons.io.FileUtils:2366","type":"CtMethodImpl","sourcecode":"public static void forceMkdir(java.io.File directory) throws java.io.IOException {\n    if (directory == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (directory.exists()) {\n                if (!(directory.isDirectory())) {\n                    java.lang.String java.lang.String = ((\"File \" + directory) + \" exists and is \") + \"not a directory. Unable to create directory.\";\n                    throw new java.io.IOException(message);\n                } \n            } else {\n                if (!(directory.mkdirs())) {\n                    if (!(directory.isDirectory())) {\n                        java.lang.String java.lang.String = \"Unable to create directory \" + directory;\n                        throw new java.io.IOException(message);\n                    } \n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1195","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"1a2f2f64-2eca-11e6-a09f-e769ed9d6fbc","method":{"position":"org.apache.commons.io.IOUtils:600","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] toByteArray(java.lang.String input) throws java.io.IOException {\n    if (input == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return input.getBytes();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.EOFException","condition":{"position":"org.apache.commons.io.IOUtils:2409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.io.IOUtils.EOF) == count"},"failures":[],"tindex":"1a2f2f65-2eca-11e6-a09f-fde76379dd9f","method":{"position":"org.apache.commons.io.input.SwappedDataInputStream:132","type":"CtMethodImpl","sourcecode":"public void readFully(byte[] data, int offset, int length) throws java.io.EOFException, java.io.IOException {\n    if (offset == length) {\n        {\n            int int = length;\n            while (remaining > 0) {\n                int int = (offset + length) - remaining;\n                int int = read(data, location, remaining);\n                if ((-1) == count) {\n                    throw new java.io.EOFException();\n                } \n                remaining -= count;\n            }\n        }\n    } else {\n        throw new java.io.EOFException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"length","org.apache.commons.io.IOUtils.EOF":"offset"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2448","type":"CtBinaryOperatorImpl","sourcecode":"length < 0"},"failures":[],"tindex":"1a2f2f66-2eca-11e6-a09f-b3d1d8f2d018","method":{"position":"org.apache.commons.io.EndianUtils:328","type":"CtMethodImpl","sourcecode":"public static void writeSwappedInteger(java.io.OutputStream output, int value) throws java.io.IOException {\n    if (value < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n            output.write(((byte)((value >> 16) & 255)));\n            output.write(((byte)((value >> 24) & 255)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:92","type":"CtBinaryOperatorImpl","sourcecode":"((osName.indexOf(\"hp-ux\")) != (-1)) || ((osName.indexOf(\"aix\")) != (-1))"},"failures":[],"tindex":"1a2f5677-2eca-11e6-a09f-334c1beec4d2","method":{"position":"org.apache.commons.io.IOUtils:1210","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.String input, java.nio.charset.Charset encoding) {\n    if (((input.indexOf(\"hp-ux\")) != (-1)) || ((osName.indexOf(\"aix\")) != (-1))) {\n        {\n            return new java.io.ByteArrayInputStream(input.getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"osName":"input"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:486","type":"CtBinaryOperatorImpl","sourcecode":"prefix > 0"},"failures":[],"tindex":"1a2f5678-2eca-11e6-a09f-e569046509ee","method":{"position":"org.apache.commons.io.output.NullWriter:125","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str, int st, int end) {\n    if (st > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"st"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:536","type":"CtBinaryOperatorImpl","sourcecode":"(bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE))"},"failures":[],"tindex":"1a2f5679-2eca-11e6-a09f-dbec184cadce","method":{"position":"org.apache.commons.io.FilenameUtils:193","type":"CtMethodImpl","sourcecode":"public static java.lang.String normalize(java.lang.String filename) {\n    if ((filename.equals(filename)) || (bomEnc.equals(filename))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.doNormalize(filename, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"filename","org.apache.commons.io.input.XmlStreamReader.UTF_16LE":"filename","org.apache.commons.io.input.XmlStreamReader.UTF_16BE":"filename"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"1a2f7d8a-2eca-11e6-a09f-c5282963ff92","method":{"position":"org.apache.commons.io.EndianUtils:439","type":"CtMethodImpl","sourcecode":"public static float readSwappedFloat(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return java.lang.Float.intBitsToFloat(org.apache.commons.io.EndianUtils.readSwappedInteger(input));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.AndFileFilter:76","type":"CtBinaryOperatorImpl","sourcecode":"(filter1 == null) || (filter2 == null)"},"failures":[],"tindex":"1a2f7d8b-2eca-11e6-a09f-3b8278807f5f","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:774","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if ((filter == null) || (filter == null)) {\n        {\n            if (filter == null) {\n                {\n                    if (filter == null) {\n                        return org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter;\n                    } \n                    return new org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter , filter);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"filter","filter2":"filter"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2182","type":"CtUnaryOperatorImpl","sourcecode":"!(input2 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"1a2fa49c-2eca-11e6-a09f-13f41f0a4fcb","method":{"position":"org.apache.commons.io.IOUtils:758","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            if (null != input) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.io.IOUtils.toString(input, java.nio.charset.Charset.defaultCharset());\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input2":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"1a2fa49d-2eca-11e6-a09f-910be4174879","method":{"position":"org.apache.commons.io.input.ReaderInputStream:260","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b) throws java.io.IOException {\n    if (b != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return read(b, 0, b.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2402","type":"CtBinaryOperatorImpl","sourcecode":"length < 0"},"failures":[],"tindex":"1a2fa49e-2eca-11e6-a09f-510c1642b0da","method":{"position":"org.apache.commons.io.EndianUtils:65","type":"CtMethodImpl","sourcecode":"public static int swapInteger(int value) {\n    if (value < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (((((value >> 0) & 255) << 24) + (((value >> 8) & 255) << 16)) + (((value >> 16) & 255) << 8)) + (((value >> 24) & 255) << 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1682","type":"CtBinaryOperatorImpl","sourcecode":"(timeout++) > seconds"},"failures":[],"tindex":"1a2fa49f-2eca-11e6-a09f-d79ef830cbf2","method":{"position":"org.apache.commons.io.EndianUtils:168","type":"CtMethodImpl","sourcecode":"public static int readSwappedInteger(byte[] data, int offset) {\n    if ((offset++) > offset) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (((((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8)) + (((data[(offset + 2)]) & 255) << 16)) + (((data[(offset + 3)]) & 255) << 24);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"seconds":"offset","timeout":"offset"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:71","type":"CtBinaryOperatorImpl","sourcecode":"reader instanceof java.io.BufferedReader"},"failures":[],"tindex":"1a2fcab0-2eca-11e6-a09f-4d4191340290","method":{"position":"org.apache.commons.io.IOUtils:2214","type":"CtMethodImpl","sourcecode":"public static boolean contentEquals(java.io.Reader input1, java.io.Reader input2) throws java.io.IOException {\n    if (input2 instanceof java.io.BufferedReader) {\n        {\n            input1 = org.apache.commons.io.IOUtils.toBufferedReader(input1);\n            input2 = org.apache.commons.io.IOUtils.toBufferedReader(input2);\n            int int = input1.read();\n            while ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) != ch) {\n                int int = input2.read();\n                if (ch != ch2) {\n                    return false;\n                } \n                ch = input1.read();\n            }\n            int int = input2.read();\n            return ch2 == (org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:107","type":"CtBinaryOperatorImpl","sourcecode":"charset == (java.nio.charset.Charset.forName(\"Shift_JIS\"))"},"failures":[],"tindex":"1a2fcab1-2eca-11e6-a09f-53fe8ada7e81","method":{"position":"org.apache.commons.io.IOUtils:985","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.InputStream input, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (encoding == (java.nio.charset.Charset.forName(\"Shift_JIS\"))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding));\n            return org.apache.commons.io.IOUtils.readLines(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"encoding"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"1a2fcab2-2eca-11e6-a09f-ef09bcbcb499","method":{"position":"org.apache.commons.io.IOUtils:817","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.Reader input) throws java.io.IOException {\n    if (input == null) {\n        {\n            org.apache.commons.io.output.StringBuilderWriter org.apache.commons.io.output.StringBuilderWriter = new org.apache.commons.io.output.StringBuilderWriter();\n            org.apache.commons.io.IOUtils.copy(input, sw);\n            return sw.toString();\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"1a2fcab3-2eca-11e6-a09f-b1a71249aa53","method":{"position":"org.apache.commons.io.IOUtils:677","type":"CtMethodImpl","sourcecode":"public static char[] toCharArray(java.io.InputStream is) throws java.io.IOException {\n    if (null != is) {\n        {\n            return org.apache.commons.io.IOUtils.toCharArray(is, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"is"},"type":"special","returnInThen":true,"status":0}],"header":{"groupId":"commons-io","transformationCount":83,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
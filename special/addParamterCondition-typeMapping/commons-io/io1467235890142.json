{"failureDictionary":{},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1682","type":"CtBinaryOperatorImpl","sourcecode":"(timeout++) > seconds"},"failures":[],"tindex":"d7d999f5-3e40-11e6-9bd4-3565c39e000b","method":{"position":"org.apache.commons.io.input.CountingInputStream:70","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected synchronized void afterRead(int n) {\n    if ((n++) > n) {\n        {\n            if (n != (-1)) {\n                org.apache.commons.io.input.CountingInputStream.this.long += n;\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"seconds":"n","timeout":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1070","type":"CtBinaryOperatorImpl","sourcecode":"destFile == null"},"failures":[],"tindex":"d7d9e816-3e40-11e6-9bd4-770aa5262abb","method":{"position":"org.apache.commons.io.FileUtils:976","type":"CtMethodImpl","sourcecode":"public static void copyFileToDirectory(java.io.File srcFile, java.io.File destDir) throws java.io.IOException {\n    if (srcFile.exists()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (destDir == null) {\n                {\n                    org.apache.commons.io.FileUtils.copyFileToDirectory(srcFile, destDir, true);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"destDir"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"d7d9e817-3e40-11e6-9bd4-372c0c1f0623","method":{"position":"org.apache.commons.io.IOUtils:817","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.Reader input) throws java.io.IOException {\n    if (input instanceof java.io.BufferedReader) {\n        {\n            if (input == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    org.apache.commons.io.output.StringBuilderWriter org.apache.commons.io.output.StringBuilderWriter = new org.apache.commons.io.output.StringBuilderWriter();\n                    org.apache.commons.io.IOUtils.copy(input, sw);\n                    return sw.toString();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2402","type":"CtBinaryOperatorImpl","sourcecode":"length < 0"},"failures":[],"tindex":"d7d9e818-3e40-11e6-9bd4-5b3058011c13","method":{"position":"org.apache.commons.io.input.AutoCloseInputStream:75","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void afterRead(int n) throws java.io.IOException {\n    if (n < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n == (-1)) {\n                close();\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:226","type":"CtBinaryOperatorImpl","sourcecode":"(byteOrderMark) != null"},"failures":[],"tindex":"d7da0f29-3e40-11e6-9bd4-4906c430cab4","method":{"position":"org.apache.commons.io.input.BOMInputStream:287","type":"CtMethodImpl","sourcecode":"private boolean matches(org.apache.commons.io.ByteOrderMark bom) {\n    if (bom != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (int int = 0 ; i < (bom.length()) ; i++) {\n                if ((bom.get(i)) != (int[][i])) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"byteOrderMark":"bom"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1067","type":"CtBinaryOperatorImpl","sourcecode":"srcFile == null"},"failures":[],"tindex":"d7da0f2a-3e40-11e6-9bd4-2142be8ca01f","method":{"position":"org.apache.commons.io.FileUtils:1037","type":"CtMethodImpl","sourcecode":"public static void copyFile(java.io.File srcFile, java.io.File destFile) throws java.io.IOException {\n    if (destFile == null) {\n        {\n            org.apache.commons.io.FileUtils.copyFile(srcFile, destFile, true);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"destFile"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1281","type":"CtBinaryOperatorImpl","sourcecode":"(filename == null) || (wildcardMatcher == null)"},"failures":[],"tindex":"d7da0f2b-3e40-11e6-9bd4-996f0c4f4e1e","method":{"position":"org.apache.commons.io.IOUtils:1932","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding == null) || (encoding == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.copy(input, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"encoding","wildcardMatcher":"encoding"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.DirectoryWalker:301","type":"CtBinaryOperatorImpl","sourcecode":"(directoryFilter == null) && (fileFilter == null)"},"failures":[],"tindex":"d7da0f2c-3e40-11e6-9bd4-575cd7d2cba6","method":{"position":"org.apache.commons.io.FileUtils:568","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if ((dirFilter == null) && (dirFilter == null)) {\n        {\n            return dirFilter == null ? org.apache.commons.io.filefilter.FalseFileFilter.org.apache.commons.io.filefilter.FalseFileFilter.org.apache.commons.io.filefilter.IOFileFilter : org.apache.commons.io.filefilter.FileFilterUtils.and(dirFilter, org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilter":"dirFilter","directoryFilter":"dirFilter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:71","type":"CtBinaryOperatorImpl","sourcecode":"reader instanceof java.io.BufferedReader"},"failures":[],"tindex":"d7da363d-3e40-11e6-9bd4-37561249f9c1","method":{"position":"org.apache.commons.io.IOUtils:192","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.Reader input) {\n    if (input instanceof java.io.BufferedReader) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(input)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:949","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"d7da363e-3e40-11e6-9bd4-79efde280ce3","method":{"position":"org.apache.commons.io.FilenameUtils:905","type":"CtMethodImpl","sourcecode":"private static java.lang.String doGetFullPath(java.lang.String filename, boolean includeSeparator) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\n            if (prefix < 0) {\n                return null;\n            } \n            if (prefix >= (filename.length())) {\n                if (includeSeparator) {\n                    return org.apache.commons.io.FilenameUtils.getPrefix(filename);\n                } else {\n                    return filename;\n                }\n            } \n            int int = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\n            if (index < 0) {\n                return filename.substring(0, prefix);\n            } \n            int int = index + (includeSeparator ? 1 : 0);\n            if (end == 0) {\n                end++;\n            } \n            return filename.substring(0, end);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:740","type":"CtBinaryOperatorImpl","sourcecode":"(file1.isDirectory()) || (file2.isDirectory())"},"failures":[],"tindex":"d7da363f-3e40-11e6-9bd4-a91b579a21e8","method":{"position":"org.apache.commons.io.filefilter.DelegateFileFilter:89","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if ((dir.isDirectory()) || (dir.isDirectory())) {\n        {\n            if ((java.io.FilenameFilter) != null) {\n                return java.io.FilenameFilter.accept(dir, name);\n            } else {\n                return super.accept(dir, name);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"dir","file1":"dir"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2787","type":"CtUnaryOperatorImpl","sourcecode":"!(destDir.exists())"},"failures":[],"tindex":"d7da5d50-3e40-11e6-9bd4-339ab1be03cc","method":{"position":"org.apache.commons.io.FileUtils:1818","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.File file) throws java.io.IOException {\n    if (!(file.exists())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.FileUtils.readLines(file, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1149","type":"CtBinaryOperatorImpl","sourcecode":"(extension == null) || ((extension.length()) == 0)"},"failures":[],"tindex":"d7da5d51-3e40-11e6-9bd4-43c998bbf2a5","method":{"position":"org.apache.commons.io.IOUtils:1395","type":"CtMethodImpl","sourcecode":"public static void write(char[] data, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding == null) || ((extension.length()) == 0)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"extension":"encoding"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:90","type":"CtBinaryOperatorImpl","sourcecode":"(totalByteLength) > 0"},"failures":[],"tindex":"d7da5d52-3e40-11e6-9bd4-91b568c93769","method":{"position":"org.apache.commons.io.monitor.FileEntry:227","type":"CtMethodImpl","sourcecode":"public void setLength(long length) {\n    if (length > 0) {\n        {\n            org.apache.commons.io.monitor.FileEntry.this.long = length;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"totalByteLength":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:723","type":"CtBinaryOperatorImpl","sourcecode":"c == (-1)"},"failures":[],"tindex":"d7da5d53-3e40-11e6-9bd4-2139b168e3b0","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:52","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int idx) throws java.io.IOException {\n    if (idx == (-1)) {\n        {\n            try {\n                beforeWrite(1);\n                java.io.OutputStream.write(idx);\n                afterWrite(1);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"idx"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:140","type":"CtBinaryOperatorImpl","sourcecode":"(writer) != null"},"failures":[],"tindex":"d7da8464-3e40-11e6-9bd4-6dcf50cd014f","method":{"position":"org.apache.commons.io.IOUtils:1267","type":"CtMethodImpl","sourcecode":"public static void write(byte[] data, java.io.Writer output) throws java.io.IOException {\n    if (output != null) {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"writer":"output"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"d7da8465-3e40-11e6-9bd4-b30d3f83788d","method":{"position":"org.apache.commons.io.IOUtils:2177","type":"CtMethodImpl","sourcecode":"public static boolean contentEquals(java.io.InputStream input1, java.io.InputStream input2) throws java.io.IOException {\n    if (null != input1) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(input1 instanceof java.io.BufferedInputStream)) {\n                input1 = new java.io.BufferedInputStream(input1);\n            } \n            if (!(input2 instanceof java.io.BufferedInputStream)) {\n                input2 = new java.io.BufferedInputStream(input2);\n            } \n            int int = input1.read();\n            while ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) != ch) {\n                int int = input2.read();\n                if (ch != ch2) {\n                    return false;\n                } \n                ch = input1.read();\n            }\n            int int = input2.read();\n            return ch2 == (org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:405","type":"CtBinaryOperatorImpl","sourcecode":"i == (prefix + 2)"},"failures":[],"tindex":"d7da8466-3e40-11e6-9bd4-a7bf07e080a7","method":{"position":"org.apache.commons.io.EndianUtils:261","type":"CtMethodImpl","sourcecode":"public static void writeSwappedDouble(byte[] data, int offset, double value) {\n    if (offset == (offset + 2)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.EndianUtils.writeSwappedLong(data, offset, java.lang.Double.doubleToLongBits(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"offset","i":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:391","type":"CtBinaryOperatorImpl","sourcecode":"i == (size - 1)"},"failures":[],"tindex":"d7da8467-3e40-11e6-9bd4-353065f5017f","method":{"position":"org.apache.commons.io.input.BoundedInputStream:192","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void mark(int readlimit) {\n    if (readlimit == (readlimit - 1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.InputStream.mark(readlimit);\n            long = long;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"readlimit","i":"readlimit"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.DirectoryWalker:301","type":"CtBinaryOperatorImpl","sourcecode":"(directoryFilter == null) && (fileFilter == null)"},"failures":[],"tindex":"d7da8468-3e40-11e6-9bd4-019efc255184","method":{"position":"org.apache.commons.io.FileUtils:543","type":"CtMethodImpl","sourcecode":"private static void validateListFilesParameters(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter) {\n    if ((fileFilter == null) && (fileFilter == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(directory.isDirectory())) {\n                throw new java.lang.IllegalArgumentException(\"Parameter 'directory' is not a directory\");\n            } \n            if (fileFilter == null) {\n                throw new java.lang.NullPointerException(\"Parameter 'fileFilter' is null\");\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilter":"fileFilter","directoryFilter":"fileFilter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:72","type":"CtBinaryOperatorImpl","sourcecode":"prefix == null"},"failures":[],"tindex":"d7daab79-3e40-11e6-9bd4-93a10d31fb73","method":{"position":"org.apache.commons.io.Charsets:79","type":"CtMethodImpl","sourcecode":"public static java.nio.charset.Charset toCharset(java.lang.String charset) {\n    if (charset == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return charset == null ? java.nio.charset.Charset.defaultCharset() : java.nio.charset.Charset.forName(charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"charset"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl","sourcecode":"!(input1 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"d7daab7a-3e40-11e6-9bd4-53efdd279aa3","method":{"position":"org.apache.commons.io.IOUtils:677","type":"CtMethodImpl","sourcecode":"public static char[] toCharArray(java.io.InputStream is) throws java.io.IOException {\n    if (!(is instanceof java.io.BufferedInputStream)) {\n        {\n            return org.apache.commons.io.IOUtils.toCharArray(is, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"is"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1129","type":"CtBinaryOperatorImpl","sourcecode":"(destFile.exists()) && (destFile.isDirectory())"},"failures":[],"tindex":"d7daab7b-3e40-11e6-9bd4-2b7d586f476b","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:83","type":"CtMethodImpl","sourcecode":"public void onFileDelete(final java.io.File file) {\n    if ((file.exists()) && (destFile.isDirectory())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:119","type":"CtBinaryOperatorImpl","sourcecode":"prefix == null"},"failures":[],"tindex":"d7daab7c-3e40-11e6-9bd4-07a2490d26f4","method":{"position":"org.apache.commons.io.IOUtils:1197","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.String input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toInputStream(input, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2367","type":"CtInvocationImpl","sourcecode":"directory.exists()"},"failures":[],"tindex":"d7daab7d-3e40-11e6-9bd4-11664a7584bf","method":{"position":"org.apache.commons.io.comparator.PathFileComparator:102","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (file1.exists()) {\n        {\n            return org.apache.commons.io.IOCase.checkCompareTo(file1.getPath(), file2.getPath());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:745","type":"CtBinaryOperatorImpl","sourcecode":"(file1.length()) != (file2.length())"},"failures":[],"tindex":"d7daab7e-3e40-11e6-9bd4-01b805138971","method":{"position":"org.apache.commons.io.FileUtils:2920","type":"CtMethodImpl","sourcecode":"public static boolean isSymlink(java.io.File file) throws java.io.IOException {\n    if ((file.length()) != (file.length())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File must not be null\");\n            } \n            if (org.apache.commons.io.FilenameUtils.isSystemWindows()) {\n                return false;\n            } \n            java.io.File java.io.File = null;\n            if ((file.getParent()) == null) {\n                fileInCanonicalDir = file;\n            } else {\n                java.io.File java.io.File = file.getParentFile().getCanonicalFile();\n                fileInCanonicalDir = new java.io.File(canonicalDir , file.getName());\n            }\n            if (fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file","file1":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:531","type":"CtBinaryOperatorImpl","sourcecode":"canonicalParent == null"},"failures":[],"tindex":"d7dad28f-3e40-11e6-9bd4-9f1823ad5ca5","method":{"position":"org.apache.commons.io.FileSystemUtils:287","type":"CtMethodImpl","sourcecode":"long freeSpaceWindows(java.lang.String path, long timeout) throws java.io.IOException {\n    if (path == null) {\n        {\n            path = org.apache.commons.io.FilenameUtils.normalize(path, false);\n            if (((path.length()) > 0) && ((path.charAt(0)) != '\"')) {\n                path = (\"\\\"\" + path) + \"\\\"\";\n            } \n            java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"cmd.exe\" , \"/C\" , \"dir /a /-c \" + path };\n            java.util.List<java.lang.String> java.util.List<java.lang.String> = performCommand(cmdAttribs, java.lang.Integer.java.lang.Integer.int, timeout);\n            for (int int = (lines.size()) - 1 ; i >= 0 ; i--) {\n                java.lang.String java.lang.String = lines.get(i);\n                if ((line.length()) > 0) {\n                    return parseDir(line, path);\n                } \n            }\n            throw new java.io.IOException((((\"Command line 'dir /-c' did not return any info \" + \"for path '\") + path) + \"'\"));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"canonicalParent":"path"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.OrFileFilter:75","type":"CtBinaryOperatorImpl","sourcecode":"(filter1 == null) || (filter2 == null)"},"failures":[],"tindex":"d7dad290-3e40-11e6-9bd4-4ddcaa5b0df8","method":{"position":"org.apache.commons.io.filefilter.AndFileFilter:87","type":"CtMethodImpl","sourcecode":"public void addFileFilter(final org.apache.commons.io.filefilter.IOFileFilter ioFileFilter) {\n    if ((ioFileFilter == null) || (ioFileFilter == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.add(ioFileFilter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"ioFileFilter","filter2":"ioFileFilter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2644","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[],"tindex":"d7dad291-3e40-11e6-9bd4-5b3401091723","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:555","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date cutoffDate) {\n    if (cutoffDate == null) {\n        {\n            return new org.apache.commons.io.filefilter.AgeFileFilter(cutoffDate);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"cutoffDate"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:515","type":"CtBinaryOperatorImpl","sourcecode":"(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16)) && ((xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE)))"},"failures":[],"tindex":"d7dad292-3e40-11e6-9bd4-e5d821abc519","method":{"position":"org.apache.commons.io.input.XmlStreamReader:704","type":"CtMethodImpl","sourcecode":"private static java.lang.String getXmlProlog(java.io.InputStream is, java.lang.String guessedEnc) throws java.io.IOException {\n    if ((guessedEnc.equals(guessedEnc)) && ((guessedEnc.equals(guessedEnc)) || (xmlGuessEnc.equals(guessedEnc)))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String java.lang.String = null;\n            if (guessedEnc != null) {\n                byte[] byte[] = new byte[org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int];\n                is.mark(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int);\n                int int = 0;\n                int int = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int;\n                int int = is.read(bytes, offset, max);\n                int int = -1;\n                java.lang.String java.lang.String = null;\n                while (((c != (-1)) && (firstGT == (-1))) && (offset < (org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int))) {\n                    offset += c;\n                    max -= c;\n                    c = is.read(bytes, offset, max);\n                    xmlProlog = new java.lang.String(bytes , 0 , offset , guessedEnc);\n                    firstGT = xmlProlog.indexOf('>');\n                }\n                if (firstGT == (-1)) {\n                    if (c == (-1)) {\n                        throw new java.io.IOException(\"Unexpected end of XML stream\");\n                    } else {\n                        throw new java.io.IOException(((\"XML prolog or ROOT element not found on first \" + offset) + \" bytes\"));\n                    }\n                } \n                int int = offset;\n                if (bytesRead > 0) {\n                    is.reset();\n                    java.io.BufferedReader java.io.BufferedReader = new java.io.BufferedReader(new java.io.StringReader(xmlProlog.substring(0, (firstGT + 1))));\n                    java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer();\n                    java.lang.String java.lang.String = bReader.readLine();\n                    while (line != null) {\n                        prolog.append(line);\n                        line = bReader.readLine();\n                    }\n                    java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.util.regex.Pattern.matcher(prolog);\n                    if (m.find()) {\n                        encoding = m.group(1).toUpperCase();\n                        encoding = encoding.substring(1, ((encoding.length()) - 1));\n                    } \n                } \n            } \n            return encoding;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.input.XmlStreamReader.UTF_16LE":"guessedEnc","xmlEnc":"guessedEnc","org.apache.commons.io.input.XmlStreamReader.UTF_16":"guessedEnc","xmlGuessEnc":"guessedEnc","org.apache.commons.io.input.XmlStreamReader.UTF_16BE":"guessedEnc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:541","type":"CtBinaryOperatorImpl","sourcecode":"((xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16)))) && (!(xmlEnc.equals(bomEnc)))"},"failures":[],"tindex":"d7daf9a3-3e40-11e6-9bd4-6b61f8b7a056","method":{"position":"org.apache.commons.io.FilenameUtils:749","type":"CtMethodImpl","sourcecode":"public static java.lang.String getPrefix(java.lang.String filename) {\n    if (((filename != null) && (!(xmlEnc.equals(filename)))) && (!(xmlEnc.equals(filename)))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\n            if (len < 0) {\n                return null;\n            } \n            if (len > (filename.length())) {\n                return filename + (org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n            } \n            return filename.substring(0, len);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"filename","xmlEnc":"filename","org.apache.commons.io.input.XmlStreamReader.UTF_16":"filename"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:611","type":"CtBinaryOperatorImpl","sourcecode":"bomEnc != null"},"failures":[],"tindex":"d7daf9a4-3e40-11e6-9bd4-2fadf56dd3bc","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str, int st, int end) throws java.io.IOException {\n    if (str != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.Writer.write(str, st, end);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1370","type":"CtBinaryOperatorImpl","sourcecode":"(srcDir.isDirectory()) == false"},"failures":[],"tindex":"d7daf9a5-3e40-11e6-9bd4-6b3854f68554","method":{"position":"org.apache.commons.io.FileUtils:1950","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data, java.lang.String encoding, boolean append) throws java.io.IOException {\n    if ((file.isDirectory()) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeStringToFile(file, data, org.apache.commons.io.Charsets.toCharset(encoding), append);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1030","type":"CtBinaryOperatorImpl","sourcecode":"index == (-1)"},"failures":[],"tindex":"d7daf9a6-3e40-11e6-9bd4-4d44b59e7bc5","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:153","type":"CtMethodImpl","sourcecode":"protected void afterWrite(int n) throws java.io.IOException {\n    if (n == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"n"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.CountingOutputStream:70","type":"CtBinaryOperatorImpl","sourcecode":"result > (java.lang.Integer.MAX_VALUE)"},"failures":[],"tindex":"d7daf9a7-3e40-11e6-9bd4-1115c963a713","method":{"position":"org.apache.commons.io.EndianUtils:200","type":"CtMethodImpl","sourcecode":"public static void writeSwappedLong(byte[] data, int offset, long value) {\n    if (value > offset) {\n        {\n            data[(offset + 0)] = ((byte)((value >> 0) & 255));\n            data[(offset + 1)] = ((byte)((value >> 8) & 255));\n            data[(offset + 2)] = ((byte)((value >> 16) & 255));\n            data[(offset + 3)] = ((byte)((value >> 24) & 255));\n            data[(offset + 4)] = ((byte)((value >> 32) & 255));\n            data[(offset + 5)] = ((byte)((value >> 40) & 255));\n            data[(offset + 6)] = ((byte)((value >> 48) & 255));\n            data[(offset + 7)] = ((byte)((value >> 56) & 255));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"value","java.lang.Integer.MAX_VALUE":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.AbstractFileComparator:61","type":"CtBinaryOperatorImpl","sourcecode":"files != null"},"failures":[],"tindex":"d7db20b8-3e40-11e6-9bd4-a1102c9188bd","method":{"position":"org.apache.commons.io.FileUtils:462","type":"CtMethodImpl","sourcecode":"public static java.io.File[] convertFileCollectionToFileArray(java.util.Collection<java.io.File> files) {\n    if (files != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return files.toArray(new java.io.File[files.size()]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:72","type":"CtBinaryOperatorImpl","sourcecode":"osName == null"},"failures":[],"tindex":"d7db20b9-3e40-11e6-9bd4-856cc1f9f8f5","method":{"position":"org.apache.commons.io.IOCase:146","type":"CtMethodImpl","sourcecode":"public int checkCompareTo(java.lang.String str1, java.lang.String str2) {\n    if (str2 == null) {\n        {\n            if ((str1 == null) || (str2 == null)) {\n                throw new java.lang.NullPointerException(\"The strings must not be null\");\n            } \n            return boolean ? str1.compareTo(str2) : str1.compareToIgnoreCase(str2);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"osName":"str2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"(writer) == null"},"failures":[],"tindex":"d7db20ba-3e40-11e6-9bd4-35ad8b9920c1","method":{"position":"org.apache.commons.io.IOUtils:1884","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output) throws java.io.IOException {\n    if (output == null) {\n        {\n            org.apache.commons.io.IOUtils.copy(input, output, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"writer":"output"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.StringBuilderWriter:123","type":"CtBinaryOperatorImpl","sourcecode":"value != null"},"failures":[],"tindex":"d7db20bb-3e40-11e6-9bd4-f18b6041c9e9","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:293","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String prefix) {\n    if (prefix != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.PrefixFileFilter(prefix);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"prefix"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1199","type":"CtBinaryOperatorImpl","sourcecode":"(destDir.exists()) && ((destDir.isDirectory()) == false)"},"failures":[],"tindex":"d7db20bc-3e40-11e6-9bd4-974219809c98","method":{"position":"org.apache.commons.io.DirectoryWalker:547","type":"CtMethodImpl","sourcecode":"protected void handleRestricted(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if ((directory.exists()) && ((destDir.isDirectory()) == false)) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:250","type":"CtUnaryOperatorImpl","sourcecode":"!(lockFile.createNewFile())"},"failures":[],"tindex":"d7db47cd-3e40-11e6-9bd4-555129a70764","method":{"position":"org.apache.commons.io.output.LockableFileWriter:232","type":"CtMethodImpl","sourcecode":"private void testLockDir(java.io.File lockDir) throws java.io.IOException {\n    if (!(lockDir.createNewFile())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(lockDir.exists())) {\n                throw new java.io.IOException((\"Could not find lockDir: \" + (lockDir.getAbsolutePath())));\n            } \n            if (!(lockDir.canWrite())) {\n                throw new java.io.IOException((\"Could not write to lockDir: \" + (lockDir.getAbsolutePath())));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lockFile":"lockDir"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileCleaningTracker:91","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"d7db47ce-3e40-11e6-9bd4-2f58cbf13902","method":{"position":"org.apache.commons.io.FileUtils:1111","type":"CtMethodImpl","sourcecode":"public static long copyFile(java.io.File input, java.io.OutputStream output) throws java.io.IOException {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            final java.io.FileInputStream java.io.FileInputStream = new java.io.FileInputStream(input);\n            try {\n                return org.apache.commons.io.IOUtils.copyLarge(fis, output);\n            } finally {\n                fis.close();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:482","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"d7db47cf-3e40-11e6-9bd4-57a66ff143d4","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:582","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.io.File cutoffReference) {\n    if (cutoffReference.isDirectory()) {\n        {\n            return new org.apache.commons.io.filefilter.AgeFileFilter(cutoffReference);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"cutoffReference"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:73","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"d7db47d0-3e40-11e6-9bd4-e963b9700501","method":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:72","type":"CtMethodImpl","sourcecode":"private int getType(java.io.File file) {\n    if (file.isDirectory()) {\n        {\n            if (file.isDirectory()) {\n                return 1;\n            } else {\n                return 2;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.OrFileFilter:150","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"d7db47d1-3e40-11e6-9bd4-c3f3c6a82b35","method":{"position":"org.apache.commons.io.output.BrokenOutputStream:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            throw java.io.IOException;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:797","type":"CtBinaryOperatorImpl","sourcecode":"(file1.isDirectory()) || (file2.isDirectory())"},"failures":[],"tindex":"d7db47d2-3e40-11e6-9bd4-d57720bea655","method":{"position":"org.apache.commons.io.FileUtils:2001","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, boolean append) throws java.io.IOException {\n    if ((data.equals(data)) || (cTEnc.equals(data))) {\n        {\n            if ((file.isDirectory()) || (file.isDirectory())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    org.apache.commons.io.FileUtils.write(file, data, java.nio.charset.Charset.defaultCharset(), append);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file","file1":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:292","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"d7db6ee3-3e40-11e6-9bd4-832242c103ec","method":{"position":"org.apache.commons.io.FileUtils:1508","type":"CtMethodImpl","sourcecode":"public static void copyInputStreamToFile(java.io.InputStream source, java.io.File destination) throws java.io.IOException {\n    if (destination.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                java.io.FileOutputStream java.io.FileOutputStream = org.apache.commons.io.FileUtils.openOutputStream(destination);\n                try {\n                    org.apache.commons.io.IOUtils.copy(source, output);\n                    output.close();\n                } finally {\n                    org.apache.commons.io.IOUtils.closeQuietly(output);\n                }\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(source);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"destination"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1281","type":"CtBinaryOperatorImpl","sourcecode":"(filename == null) || (wildcardMatcher == null)"},"failures":[],"tindex":"d7db6ee4-3e40-11e6-9bd4-0d05476ddd9f","method":{"position":"org.apache.commons.io.FilenameUtils:973","type":"CtMethodImpl","sourcecode":"public static java.lang.String getBaseName(java.lang.String filename) {\n    if ((filename == null) || (filename == null)) {\n        {\n            return org.apache.commons.io.FilenameUtils.removeExtension(org.apache.commons.io.FilenameUtils.getName(filename));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename","wildcardMatcher":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:611","type":"CtBinaryOperatorImpl","sourcecode":"bomEnc != null"},"failures":[],"tindex":"d7db6ee5-3e40-11e6-9bd4-b97b837955f2","method":{"position":"org.apache.commons.io.LineIterator:117","type":"CtMethodImpl","sourcecode":"protected boolean isValidLine(java.lang.String line) {\n    if (line != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"line"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:508","type":"CtBinaryOperatorImpl","sourcecode":"size == 0"},"failures":[],"tindex":"d7db6ee6-3e40-11e6-9bd4-e97da80d8bb8","method":{"position":"org.apache.commons.io.FileSystemUtils:258","type":"CtMethodImpl","sourcecode":"long freeSpaceOS(java.lang.String path, int os, boolean kb, long timeout) throws java.io.IOException {\n    if (os == 0) {\n        {\n            if (path == null) {\n                throw new java.lang.IllegalArgumentException(\"Path must not be empty\");\n            } \n            switch (os) {\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    return kb ? (freeSpaceWindows(path, timeout)) / (org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.long) : freeSpaceWindows(path, timeout);\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    return freeSpaceUnix(path, kb, false, timeout);\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    return freeSpaceUnix(path, kb, true, timeout);\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    throw new java.lang.IllegalStateException(\"Unsupported operating system\");\n                default :\n                    throw new java.lang.IllegalStateException(\"Exception caught when determining operating system\");\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"os"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1489","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"d7db6ee7-3e40-11e6-9bd4-a9783f5cc91e","method":{"position":"org.apache.commons.io.input.XmlStreamReader:654","type":"CtMethodImpl","sourcecode":"static java.lang.String getContentTypeMime(java.lang.String httpContentType) {\n    if (httpContentType != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = null;\n            if (httpContentType != null) {\n                int int = httpContentType.indexOf(\";\");\n                if (i >= 0) {\n                    mime = httpContentType.substring(0, i);\n                } else {\n                    mime = httpContentType;\n                }\n                mime = mime.trim();\n            } \n            return mime;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"httpContentType"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:88","type":"CtBinaryOperatorImpl","sourcecode":"(cachedLine) != null"},"failures":[],"tindex":"d7db6ee8-3e40-11e6-9bd4-8703eaf5e28c","method":{"position":"org.apache.commons.io.input.XmlStreamReader:759","type":"CtMethodImpl","sourcecode":"static boolean isAppXml(java.lang.String mime) {\n    if (mime != null) {\n        {\n            return (mime != null) && ((((mime.equals(\"application/xml\")) || (mime.equals(\"application/xml-dtd\"))) || (mime.equals(\"application/xml-external-parsed-entity\"))) || ((mime.startsWith(\"application/\")) && (mime.endsWith(\"+xml\"))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cachedLine":"mime"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2189","type":"CtBinaryOperatorImpl","sourcecode":"ch != ch2"},"failures":[],"tindex":"d7db6ee9-3e40-11e6-9bd4-9d869c0e2315","method":{"position":"org.apache.commons.io.output.XmlStreamWriter:153","type":"CtMethodImpl","sourcecode":"private void detectEncoding(char[] cbuf, int off, int len) throws java.io.IOException {\n    if (len < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (len != off) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    int int = len;\n                    java.lang.StringBuffer java.lang.StringBuffer = java.io.StringWriter.getBuffer();\n                    if (((xmlProlog.length()) + len) > (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int)) {\n                        size = (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int) - (xmlProlog.length());\n                    } \n                    java.io.StringWriter.write(cbuf, off, size);\n                    if ((xmlProlog.length()) >= 5) {\n                        if (xmlProlog.substring(0, 5).equals(\"<?xml\")) {\n                            int int = xmlProlog.indexOf(\"?>\");\n                            if (xmlPrologEnd > 0) {\n                                java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.java.util.regex.Pattern.matcher(xmlProlog.substring(0, xmlPrologEnd));\n                                if (m.find()) {\n                                    java.lang.String = m.group(1).toUpperCase();\n                                    java.lang.String = java.lang.String.substring(1, ((java.lang.String.length()) - 1));\n                                } else {\n                                    java.lang.String = java.lang.String;\n                                }\n                            } else {\n                                if ((xmlProlog.length()) >= (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int)) {\n                                    java.lang.String = java.lang.String;\n                                } \n                            }\n                        } else {\n                            java.lang.String = java.lang.String;\n                        }\n                        if ((java.lang.String) != null) {\n                            java.io.StringWriter = null;\n                            java.io.Writer = new java.io.OutputStreamWriter(java.io.OutputStream , java.lang.String);\n                            java.io.Writer.write(xmlProlog.toString());\n                            if (len > size) {\n                                java.io.Writer.write(cbuf, (off + size), (len - size));\n                            } \n                        } \n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"len","ch2":"off"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1006","type":"CtBinaryOperatorImpl","sourcecode":"destDir == null"},"failures":[],"tindex":"d7db95fa-3e40-11e6-9bd4-735216b02109","method":{"position":"org.apache.commons.io.filefilter.NameFileFilter:143","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = file.getName();\n            for (java.lang.String java.lang.String : org.apache.commons.io.filefilter.NameFileFilter.this.java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkEquals(name, name2)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.ByteOrderMark:174","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"d7db95fb-3e40-11e6-9bd4-63e6e777ebe8","method":{"position":"org.apache.commons.io.output.WriterOutputStream:240","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            write(new byte[]{ ((byte)(b)) }, 0, 1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:923","type":"CtBinaryOperatorImpl","sourcecode":"url != null"},"failures":[],"tindex":"d7db95fc-3e40-11e6-9bd4-07e059024d5d","method":{"position":"org.apache.commons.io.IOUtils:893","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URL url, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if ((url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))) {\n        {\n            if (url != null) {\n                {\n                    java.io.InputStream java.io.InputStream = url.openStream();\n                    try {\n                        return org.apache.commons.io.IOUtils.toString(inputStream, encoding);\n                    } finally {\n                        inputStream.close();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"url":"url"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.TeeInputStream:109","type":"CtBinaryOperatorImpl","sourcecode":"ch != (-1)"},"failures":[],"tindex":"d7dbbd0d-3e40-11e6-9bd4-a31e697a3732","method":{"position":"org.apache.commons.io.IOCase:241","type":"CtMethodImpl","sourcecode":"public boolean checkRegionMatches(java.lang.String str, int strStartIndex, java.lang.String search) {\n    if (strStartIndex != (-1)) {\n        {\n            return str.regionMatches((!(boolean)), strStartIndex, search, 0, search.length());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"strStartIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1329","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"d7dbbd0e-3e40-11e6-9bd4-e3206f5195ee","method":{"position":"org.apache.commons.io.input.NullReader:191","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] chars) throws java.io.IOException {\n    if (chars != null) {\n        {\n            return read(chars, 0, chars.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"chars"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:71","type":"CtBinaryOperatorImpl","sourcecode":"reader instanceof java.io.BufferedReader"},"failures":[],"tindex":"d7dbbd0f-3e40-11e6-9bd4-e70ba2849c8b","method":{"position":"org.apache.commons.io.IOUtils:817","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.Reader input) throws java.io.IOException {\n    if (input instanceof java.io.BufferedReader) {\n        {\n            if (input == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    org.apache.commons.io.output.StringBuilderWriter org.apache.commons.io.output.StringBuilderWriter = new org.apache.commons.io.output.StringBuilderWriter();\n                    org.apache.commons.io.IOUtils.copy(input, sw);\n                    return sw.toString();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:628","type":"CtBinaryOperatorImpl","sourcecode":"(cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32BE)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32LE))"},"failures":[],"tindex":"d7dbbd10-3e40-11e6-9bd4-87969fa89949","method":{"position":"org.apache.commons.io.FileUtils:2001","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, boolean append) throws java.io.IOException {\n    if ((data.equals(data)) || (cTEnc.equals(data))) {\n        {\n            if ((file.isDirectory()) || (file.isDirectory())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    org.apache.commons.io.FileUtils.write(file, data, java.nio.charset.Charset.defaultCharset(), append);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cTEnc":"data","org.apache.commons.io.input.XmlStreamReader.UTF_32BE":"data","org.apache.commons.io.input.XmlStreamReader.UTF_32LE":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1659","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"d7dbbd11-3e40-11e6-9bd4-63225885483a","method":{"position":"org.apache.commons.io.output.TaggedOutputStream:112","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void handleIOException(java.io.IOException e) throws java.io.IOException {\n    if (null != e) {\n        {\n            throw new org.apache.commons.io.TaggedIOException(e , java.io.Serializable);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"e"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:57","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"d7dbbd12-3e40-11e6-9bd4-cbe3e3ad5171","method":{"position":"org.apache.commons.io.IOUtils:948","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(byte[] input, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return new java.lang.String(input , org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"encoding"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:246","type":"CtBinaryOperatorImpl","sourcecode":"read != (magicNumbers.length)"},"failures":[],"tindex":"d7dbe423-3e40-11e6-9bd4-45584174255e","method":{"position":"org.apache.commons.io.EndianUtils:168","type":"CtMethodImpl","sourcecode":"public static int readSwappedInteger(byte[] data, int offset) {\n    if (offset != offset) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (((((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8)) + (((data[(offset + 2)]) & 255) << 16)) + (((data[(offset + 3)]) & 255) << 24);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"read":"offset","magicNumbers":"data","length":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:161","type":"CtBinaryOperatorImpl","sourcecode":"magicNumber == null"},"failures":[],"tindex":"d7dbe424-3e40-11e6-9bd4-af2c2d9c97c2","method":{"position":"org.apache.commons.io.FileUtils:1733","type":"CtMethodImpl","sourcecode":"public static java.lang.String readFileToString(java.io.File file, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            return org.apache.commons.io.FileUtils.readFileToString(file, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"magicNumber":"encoding"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1149","type":"CtBinaryOperatorImpl","sourcecode":"(extension == null) || ((extension.length()) == 0)"},"failures":[],"tindex":"d7dbe425-3e40-11e6-9bd4-dbfaea069564","method":{"position":"org.apache.commons.io.output.ProxyWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str) throws java.io.IOException {\n    if ((str == null) || ((extension.length()) == 0)) {\n        {\n            try {\n                int int = 0;\n                if (str != null) {\n                    len = str.length();\n                } \n                beforeWrite(len);\n                java.io.Writer.write(str);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"extension":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:758","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"d7dbe426-3e40-11e6-9bd4-79e2228a3bab","method":{"position":"org.apache.commons.io.FileUtils:1403","type":"CtMethodImpl","sourcecode":"private static void doCopyDirectory(java.io.File srcDir, java.io.File destDir, java.io.FileFilter filter, boolean preserveFileDate, java.util.List<java.lang.String> exclusionList) throws java.io.IOException {\n    if (filter == null) {\n        {\n            java.io.File[] java.io.File[] = filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);\n            if (srcFiles == null) {\n                throw new java.io.IOException((\"Failed to list contents of \" + srcDir));\n            } \n            if (destDir.exists()) {\n                if ((destDir.isDirectory()) == false) {\n                    throw new java.io.IOException(((\"Destination '\" + destDir) + \"' exists but is not a directory\"));\n                } \n            } else {\n                if ((!(destDir.mkdirs())) && (!(destDir.isDirectory()))) {\n                    throw new java.io.IOException(((\"Destination '\" + destDir) + \"' directory cannot be created\"));\n                } \n            }\n            if ((destDir.canWrite()) == false) {\n                throw new java.io.IOException(((\"Destination '\" + destDir) + \"' cannot be written to\"));\n            } \n            for (java.io.File java.io.File : srcFiles) {\n                java.io.File java.io.File = new java.io.File(destDir , srcFile.getName());\n                if ((exclusionList == null) || (!(exclusionList.contains(srcFile.getCanonicalPath())))) {\n                    if (srcFile.isDirectory()) {\n                        org.apache.commons.io.FileUtils.doCopyDirectory(srcFile, dstFile, filter, preserveFileDate, exclusionList);\n                    } else {\n                        org.apache.commons.io.FileUtils.doCopyFile(srcFile, dstFile, preserveFileDate);\n                    }\n                } \n            }\n            if (preserveFileDate) {\n                destDir.setLastModified(srcDir.lastModified());\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileCleaningTracker:136","type":"CtFieldReadImpl","sourcecode":"exitWhenFinished"},"failures":[],"tindex":"d7dc0b37-3e40-11e6-9bd4-e19cb925c582","method":{"position":"org.apache.commons.io.input.Tailer:287","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.input.Tailer create(java.io.File file, org.apache.commons.io.input.TailerListener listener, long delayMillis, boolean end, boolean reOpen) {\n    if (end) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.input.Tailer.create(file, listener, delayMillis, end, reOpen, org.apache.commons.io.input.Tailer.org.apache.commons.io.input.Tailer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exitWhenFinished":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1190","type":"CtBinaryOperatorImpl","sourcecode":"srcDir == null"},"failures":[],"tindex":"d7dc0b38-3e40-11e6-9bd4-611f04cfc38d","method":{"position":"org.apache.commons.io.FileCleaner:57","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void track(java.io.File file, java.lang.Object marker) {\n    if (marker == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaningTracker.track(file, marker);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"marker"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"d7dc0b39-3e40-11e6-9bd4-5d06b0ce0133","method":{"position":"org.apache.commons.io.CopyUtils:241","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output) throws java.io.IOException {\n    if (null != input) {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input);\n            org.apache.commons.io.CopyUtils.copy(in, output);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:600","type":"CtInvocationImpl","sourcecode":"directory.isDirectory()"},"failures":[],"tindex":"d7dc0b3a-3e40-11e6-9bd4-4d3877f0bacd","method":{"position":"org.apache.commons.io.DirectoryWalker:393","type":"CtMethodImpl","sourcecode":"protected final void checkIfCancelled(java.io.File file, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (file.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (handleIsCancelled(file, depth, results)) {\n                throw new org.apache.commons.io.DirectoryWalker.CancelException(file , depth);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1412","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"d7dc0b3b-3e40-11e6-9bd4-93c4f0d95a27","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence value) {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder.append(value);\n            return org.apache.commons.io.output.StringBuilderWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:195","type":"CtBinaryOperatorImpl","sourcecode":"names == null"},"failures":[],"tindex":"d7dc0b3c-3e40-11e6-9bd4-e7f57867478d","method":{"position":"org.apache.commons.io.input.ClassLoaderObjectInputStream:91","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected java.lang.Class<?> resolveProxyClass(java.lang.String[] interfaces) throws java.io.IOException, java.lang.ClassNotFoundException {\n    if (interfaces == null) {\n        {\n            java.lang.Class<?>[] java.lang.Class<?>[] = new java.lang.Class[interfaces.int];\n            for (int int = 0 ; i < (interfaces.int) ; i++) {\n                interfaceClasses[i] = java.lang.Class.forName(interfaces[i], false, java.lang.ClassLoader);\n            }\n            try {\n                return java.lang.reflect.Proxy.getProxyClass(java.lang.ClassLoader, interfaceClasses);\n            } catch (java.lang.IllegalArgumentException e) {\n                return super.resolveProxyClass(interfaces);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"names":"interfaces"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.Tailer:349","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"d7dc324d-3e40-11e6-9bd4-f9174a2601f7","method":{"position":"org.apache.commons.io.input.Tailer:448","type":"CtMethodImpl","sourcecode":"private long readLines(java.io.RandomAccessFile reader) throws java.io.IOException {\n    if (reader == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            long long = reader.getFilePointer();\n            long long = pos;\n            int int;\n            boolean boolean = false;\n            while ((boolean) && ((num = reader.read(byte[])) != (-1))) {\n                for (int int = 0 ; i < num ; i++) {\n                    byte byte = byte[][i];\n                    switch (ch) {\n                        case '\\n' :\n                            seenCR = false;\n                            org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                            sb.setLength(0);\n                            rePos = (pos + i) + 1;\n                            break;\n                        case '\\r' :\n                            if (seenCR) {\n                                sb.append('\\r');\n                            } \n                            seenCR = true;\n                            break;\n                        default :\n                            if (seenCR) {\n                                seenCR = false;\n                                org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                                sb.setLength(0);\n                                rePos = (pos + i) + 1;\n                            } \n                            sb.append(((char)(ch)));\n                    }\n                }\n                pos = reader.getFilePointer();\n            }\n            reader.seek(rePos);\n            return rePos;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"reader"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl","sourcecode":"!(input1 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"d7dc324e-3e40-11e6-9bd4-cd7fcae419da","method":{"position":"org.apache.commons.io.IOUtils:967","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            return org.apache.commons.io.IOUtils.readLines(input, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1149","type":"CtBinaryOperatorImpl","sourcecode":"(extension == null) || ((extension.length()) == 0)"},"failures":[],"tindex":"d7dc324f-3e40-11e6-9bd4-ddd743e464dc","method":{"position":"org.apache.commons.io.IOUtils:1507","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.OutputStream output) throws java.io.IOException {\n    if ((data == null) || ((extension.length()) == 0)) {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"extension":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullReader:242","type":"CtBinaryOperatorImpl","sourcecode":"(position) > ((mark) + (readlimit))"},"failures":[],"tindex":"d7dc3250-3e40-11e6-9bd4-25540496e664","method":{"position":"org.apache.commons.io.input.ProxyInputStream:114","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long ln) throws java.io.IOException {\n    if (ln == ln) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (ln > (ln + ln)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    try {\n                        return java.io.InputStream.skip(ln);\n                    } catch (java.io.IOException e) {\n                        handleIOException(e);\n                        return 0;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"readlimit":"ln","position":"ln","mark":"ln"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:352","type":"CtInvocationImpl","sourcecode":"file.exists()"},"failures":[],"tindex":"d7dc3251-3e40-11e6-9bd4-27d158eefe71","method":{"position":"org.apache.commons.io.FileUtils:976","type":"CtMethodImpl","sourcecode":"public static void copyFileToDirectory(java.io.File srcFile, java.io.File destDir) throws java.io.IOException {\n    if (srcFile.exists()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (destDir == null) {\n                {\n                    org.apache.commons.io.FileUtils.copyFileToDirectory(srcFile, destDir, true);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"srcFile"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:775","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"d7dc5962-3e40-11e6-9bd4-4992e32331b8","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:242","type":"CtMethodImpl","sourcecode":"public static java.util.Set<java.io.File> filterSet(org.apache.commons.io.filefilter.IOFileFilter filter, java.lang.Iterable<java.io.File> files) {\n    if (filter == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files, new java.util.HashSet<java.io.File>());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:828","type":"CtBinaryOperatorImpl","sourcecode":"prefix < 0"},"failures":[],"tindex":"d7dc5963-3e40-11e6-9bd4-4b6a32298d3e","method":{"position":"org.apache.commons.io.output.XmlStreamWriter:153","type":"CtMethodImpl","sourcecode":"private void detectEncoding(char[] cbuf, int off, int len) throws java.io.IOException {\n    if (len < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (len != off) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    int int = len;\n                    java.lang.StringBuffer java.lang.StringBuffer = java.io.StringWriter.getBuffer();\n                    if (((xmlProlog.length()) + len) > (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int)) {\n                        size = (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int) - (xmlProlog.length());\n                    } \n                    java.io.StringWriter.write(cbuf, off, size);\n                    if ((xmlProlog.length()) >= 5) {\n                        if (xmlProlog.substring(0, 5).equals(\"<?xml\")) {\n                            int int = xmlProlog.indexOf(\"?>\");\n                            if (xmlPrologEnd > 0) {\n                                java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.java.util.regex.Pattern.matcher(xmlProlog.substring(0, xmlPrologEnd));\n                                if (m.find()) {\n                                    java.lang.String = m.group(1).toUpperCase();\n                                    java.lang.String = java.lang.String.substring(1, ((java.lang.String.length()) - 1));\n                                } else {\n                                    java.lang.String = java.lang.String;\n                                }\n                            } else {\n                                if ((xmlProlog.length()) >= (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int)) {\n                                    java.lang.String = java.lang.String;\n                                } \n                            }\n                        } else {\n                            java.lang.String = java.lang.String;\n                        }\n                        if ((java.lang.String) != null) {\n                            java.io.StringWriter = null;\n                            java.io.Writer = new java.io.OutputStreamWriter(java.io.OutputStream , java.lang.String);\n                            java.io.Writer.write(xmlProlog.toString());\n                            if (len > size) {\n                                java.io.Writer.write(cbuf, (off + size), (len - size));\n                            } \n                        } \n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"len"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:303","type":"CtInvocationImpl","sourcecode":"rootFile.exists()"},"failures":[],"tindex":"d7dc5964-3e40-11e6-9bd4-bd710cd1350d","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:357","type":"CtMethodImpl","sourcecode":"private org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry parent, java.io.File file) {\n    if (file.exists()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.monitor.FileEntry org.apache.commons.io.monitor.FileEntry = parent.newChildInstance(file);\n            entry.refresh(file);\n            java.io.File[] java.io.File[] = listFiles(file);\n            org.apache.commons.io.monitor.FileEntry[] org.apache.commons.io.monitor.FileEntry[] = (files.int) > 0 ? new org.apache.commons.io.monitor.FileEntry[files.int] : org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry[];\n            for (int int = 0 ; i < (files.int) ; i++) {\n                children[i] = createFileEntry(entry, files[i]);\n            }\n            entry.setChildren(children);\n            return entry;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rootFile":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:841","type":"CtBinaryOperatorImpl","sourcecode":"(url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))"},"failures":[],"tindex":"d7dc5965-3e40-11e6-9bd4-036b745932d9","method":{"position":"org.apache.commons.io.IOUtils:893","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URL url, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if ((url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))) {\n        {\n            if (url != null) {\n                {\n                    java.io.InputStream java.io.InputStream = url.openStream();\n                    try {\n                        return org.apache.commons.io.IOUtils.toString(inputStream, encoding);\n                    } finally {\n                        inputStream.close();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"url":"url"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullInputStream:189","type":"CtBinaryOperatorImpl","sourcecode":"(position) == (size)"},"failures":[],"tindex":"d7dc8076-3e40-11e6-9bd4-1fb7e80d6b37","method":{"position":"org.apache.commons.io.input.ProxyInputStream:114","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long ln) throws java.io.IOException {\n    if (ln == ln) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (ln > (ln + ln)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    try {\n                        return java.io.InputStream.skip(ln);\n                    } catch (java.io.IOException e) {\n                        handleIOException(e);\n                        return 0;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"ln","position":"ln"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2791","type":"CtUnaryOperatorImpl","sourcecode":"!(destDir.isDirectory())"},"failures":[],"tindex":"d7dc8077-3e40-11e6-9bd4-470b75596711","method":{"position":"org.apache.commons.io.filefilter.DelegateFileFilter:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.isDirectory())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.io.FileFilter) != null) {\n                return java.io.FileFilter.accept(file);\n            } else {\n                return super.accept(file);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2223","type":"CtBinaryOperatorImpl","sourcecode":"ch != ch2"},"failures":[],"tindex":"d7dc8078-3e40-11e6-9bd4-4fe27a58513d","method":{"position":"org.apache.commons.io.output.LockableFileWriter:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int idx) throws java.io.IOException {\n    if (idx != idx) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.Writer.write(idx);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"idx","ch2":"idx"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.AbstractFileComparator:61","type":"CtBinaryOperatorImpl","sourcecode":"files != null"},"failures":[],"tindex":"d7dc8079-3e40-11e6-9bd4-1b59d5947b85","method":{"position":"org.apache.commons.io.comparator.AbstractFileComparator:60","type":"CtMethodImpl","sourcecode":"public java.util.List<java.io.File> sort(java.util.List<java.io.File> files) {\n    if (files != null) {\n        {\n            if (files != null) {\n                java.util.Collections.sort(files, org.apache.commons.io.comparator.AbstractFileComparator.this);\n            } \n            return files;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1861","type":"CtBinaryOperatorImpl","sourcecode":"length > 0"},"failures":[],"tindex":"d7dc807a-3e40-11e6-9bd4-6f16aa56729b","method":{"position":"org.apache.commons.io.input.BoundedInputStream:138","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long n) throws java.io.IOException {\n    if (n > 0) {\n        {\n            long long = (long) >= 0 ? java.lang.Math.min(n, ((long) - (long))) : n;\n            long long = java.io.InputStream.skip(toSkip);\n            long += skippedBytes;\n            return skippedBytes;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"n"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:188","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"d7dca78b-3e40-11e6-9bd4-6dfc78e16214","method":{"position":"org.apache.commons.io.input.XmlStreamReader:399","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buf, int offset, int len) throws java.io.IOException {\n    if (offset > 0) {\n        {\n            return java.io.Reader.read(buf, offset, len);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:638","type":"CtBinaryOperatorImpl","sourcecode":"(bomEnc != null) && (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.UTF_32))"},"failures":[],"tindex":"d7dca78c-3e40-11e6-9bd4-d9d80c8aa637","method":{"position":"org.apache.commons.io.filefilter.AndFileFilter:133","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(final java.io.File file, final java.lang.String name) {\n    if ((name != null) && (bomEnc.startsWith(name))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.isEmpty()) {\n                return false;\n            } \n            for (org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter : java.util.List<org.apache.commons.io.filefilter.IOFileFilter>) {\n                if (!(fileFilter.accept(file, name))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"name","org.apache.commons.io.input.XmlStreamReader.UTF_32":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:841","type":"CtBinaryOperatorImpl","sourcecode":"(url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))"},"failures":[],"tindex":"d7dca78d-3e40-11e6-9bd4-5f3e635cb353","method":{"position":"org.apache.commons.io.FileUtils:840","type":"CtMethodImpl","sourcecode":"public static java.io.File toFile(java.net.URL url) {\n    if ((url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))) {\n                return null;\n            } else {\n                java.lang.String java.lang.String = url.getFile().replace('/', java.io.File.java.io.File.char);\n                filename = org.apache.commons.io.FileUtils.decodeUrl(filename);\n                return new java.io.File(filename);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"url":"url"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:775","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"d7dca78e-3e40-11e6-9bd4-113cfd699506","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:180","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.io.File> filterList(org.apache.commons.io.filefilter.IOFileFilter filter, java.io.File... files) {\n    if (filter == null) {\n        {\n            java.io.File[] java.io.File[] = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files);\n            return java.util.Arrays.asList(acceptedFiles);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:65","type":"CtBinaryOperatorImpl","sourcecode":"wildcard == null"},"failures":[],"tindex":"d7dca78f-3e40-11e6-9bd4-65b013ae5dc6","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:330","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String suffix, org.apache.commons.io.IOCase caseSensitivity) {\n    if (suffix == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.SuffixFileFilter(suffix , caseSensitivity);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"wildcard":"suffix"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2182","type":"CtUnaryOperatorImpl","sourcecode":"!(input2 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"d7dca790-3e40-11e6-9bd4-f78477dc4dfb","method":{"position":"org.apache.commons.io.EndianUtils:344","type":"CtMethodImpl","sourcecode":"public static int readSwappedInteger(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            return ((((value1 & 255) << 0) + ((value2 & 255) << 8)) + ((value3 & 255) << 16)) + ((value4 & 255) << 24);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input2":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:620","type":"CtBinaryOperatorImpl","sourcecode":"(bomEnc != null) && (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.UTF_16))"},"failures":[],"tindex":"d7dccea1-3e40-11e6-9bd4-c350ef755132","method":{"position":"org.apache.commons.io.FilenameUtils:1145","type":"CtMethodImpl","sourcecode":"public static boolean isExtension(java.lang.String filename, java.lang.String extension) {\n    if ((extension != null) && (bomEnc.startsWith(extension))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                return false;\n            } \n            if ((extension == null) || ((extension.length()) == 0)) {\n                return (org.apache.commons.io.FilenameUtils.indexOfExtension(filename)) == (-1);\n            } \n            java.lang.String java.lang.String = org.apache.commons.io.FilenameUtils.getExtension(filename);\n            return fileExt.equals(extension);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"extension","org.apache.commons.io.input.XmlStreamReader.UTF_16":"extension"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2497","type":"CtBinaryOperatorImpl","sourcecode":"actual != length"},"failures":[],"tindex":"d7dccea2-3e40-11e6-9bd4-6f61d62e9ea8","method":{"position":"org.apache.commons.io.output.XmlStreamWriter:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] cbuf, int off, int len) throws java.io.IOException {\n    if (len != off) {\n        {\n            if ((java.io.StringWriter) != null) {\n                detectEncoding(cbuf, off, len);\n            } else {\n                java.io.Writer.write(cbuf, off, len);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"actual":"len","length":"off"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReaderInputStream:223","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"d7dccea3-3e40-11e6-9bd4-85e7ecdc6150","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:68","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] bts) throws java.io.IOException {\n    if (bts == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                int int = bts != null ? bts.int : 0;\n                beforeWrite(len);\n                java.io.OutputStream.write(bts);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bts"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:638","type":"CtBinaryOperatorImpl","sourcecode":"(bomEnc != null) && (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.UTF_32))"},"failures":[],"tindex":"d7dccea4-3e40-11e6-9bd4-139d250fd3c6","method":{"position":"org.apache.commons.io.filefilter.AbstractFileFilter:50","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File dir, java.lang.String name) {\n    if ((name != null) && (bomEnc.startsWith(name))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return accept(new java.io.File(dir , name));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"name","org.apache.commons.io.input.XmlStreamReader.UTF_32":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:114","type":"CtInvocationImpl","sourcecode":"org.apache.commons.io.FilenameUtils.wildcardMatch(name, wildcard)"},"failures":[],"tindex":"d7dccea5-3e40-11e6-9bd4-81b015fa5dc1","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:317","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String suffix) {\n    if (org.apache.commons.io.FilenameUtils.wildcardMatch(suffix, suffix)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.SuffixFileFilter(suffix);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"suffix","wildcard":"suffix"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:361","type":"CtBinaryOperatorImpl","sourcecode":"parent != null"},"failures":[],"tindex":"d7dccea6-3e40-11e6-9bd4-3d0b74b51519","method":{"position":"org.apache.commons.io.FileUtils:651","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<java.io.File> iterateFilesAndDirs(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter, org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if (directory != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FileUtils.listFilesAndDirs(directory, fileFilter, dirFilter).iterator();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"directory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1146","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"d7dcf5b7-3e40-11e6-9bd4-678bd95f4d67","method":{"position":"org.apache.commons.io.IOUtils:1164","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.CharSequence input, java.nio.charset.Charset encoding) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toInputStream(input.toString(), encoding);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:107","type":"CtBinaryOperatorImpl","sourcecode":"charset == (java.nio.charset.Charset.forName(\"Shift_JIS\"))"},"failures":[],"tindex":"d7dcf5b8-3e40-11e6-9bd4-39118bcadfd2","method":{"position":"org.apache.commons.io.IOUtils:695","type":"CtMethodImpl","sourcecode":"public static char[] toCharArray(java.io.InputStream is, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (encoding == (java.nio.charset.Charset.forName(\"Shift_JIS\"))) {\n        {\n            java.io.CharArrayWriter java.io.CharArrayWriter = new java.io.CharArrayWriter();\n            org.apache.commons.io.IOUtils.copy(is, output, encoding);\n            return output.toCharArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229047038/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"encoding"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
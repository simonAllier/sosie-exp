{"failureDictionary":{},"transformations":[{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:71","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f37297a6-3f22-11e6-aa23-e71ce7e15a23","method":{"position":"org.apache.commons.io.IOUtils:2516","type":"CtMethodImpl","sourcecode":"public static void readFully(java.io.Reader input, char[] buffer) throws java.io.IOException {\n    if (input instanceof java.io.BufferedReader) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.readFully(input, buffer, 0, buffer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1410","type":"CtInvocationImpl"},"failures":[],"tindex":"f372e5c7-3f22-11e6-aa23-653fea6a7056","method":{"position":"org.apache.commons.io.FileUtils:2307","type":"CtMethodImpl","sourcecode":"private static void deleteDirectoryOnExit(java.io.File directory) throws java.io.IOException {\n    if (directory.exists()) {\n        {\n            if (!(directory.exists())) {\n                return ;\n            } \n            directory.deleteOnExit();\n            if (!(org.apache.commons.io.FileUtils.isSymlink(directory))) {\n                org.apache.commons.io.FileUtils.cleanDirectoryOnExit(directory);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2890","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f372e5c8-3f22-11e6-aa23-b937989efd79","method":{"position":"org.apache.commons.io.FileUtils:2553","type":"CtMethodImpl","sourcecode":"public static boolean isFileNewer(java.io.File file, java.io.File reference) {\n    if ((file.exists()) && ((destDir.isDirectory()) == false)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((reference.isDirectory()) || (reference.isDirectory())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (file == null) {\n                        {\n                            if (reference == null) {\n                                throw new java.lang.IllegalArgumentException(\"No specified reference file\");\n                            } \n                            if (!(reference.exists())) {\n                                throw new java.lang.IllegalArgumentException(((\"The reference file '\" + reference) + \"' doesn't exist\"));\n                            } \n                            return org.apache.commons.io.FileUtils.isFileNewer(file, reference.lastModified());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:343","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3730cd9-3f22-11e6-aa23-d569403a5b6f","method":{"position":"org.apache.commons.io.output.ProxyWriter:53","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(char c) throws java.io.IOException {\n    if (((!(java.lang.Character.isDigit(c))) && (c != ',')) && (c != '.')) {\n        {\n            try {\n                beforeWrite(1);\n                java.io.Writer.append(c);\n                afterWrite(1);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n            return org.apache.commons.io.output.ProxyWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2368","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3730cda-3f22-11e6-aa23-f3787b010827","method":{"position":"org.apache.commons.io.FileUtils:1950","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data, java.lang.String encoding, boolean append) throws java.io.IOException {\n    if (!(file.isDirectory())) {\n        {\n            org.apache.commons.io.FileUtils.writeStringToFile(file, data, org.apache.commons.io.Charsets.toCharset(encoding), append);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:223","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3730cdb-3f22-11e6-aa23-d163628797b8","method":{"position":"org.apache.commons.io.FileUtils:2643","type":"CtMethodImpl","sourcecode":"public static boolean isFileOlder(java.io.File file, java.util.Date date) {\n    if (file == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified date\");\n            } \n            return org.apache.commons.io.FileUtils.isFileOlder(file, date.getTime());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileCleaningTracker:121","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f37333ec-3f22-11e6-aa23-5d4237ac8d1b","method":{"position":"org.apache.commons.io.FilenameUtils:995","type":"CtMethodImpl","sourcecode":"public static java.lang.String getExtension(java.lang.String filename) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.indexOfExtension(filename);\n            if (index == (-1)) {\n                return \"\";\n            } else {\n                return filename.substring((index + 1));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2538","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f37333ed-3f22-11e6-aa23-432252fd6285","method":{"position":"org.apache.commons.io.IOUtils:2447","type":"CtMethodImpl","sourcecode":"public static int read(java.io.InputStream input, byte[] buffer, int offset, int length) throws java.io.IOException {\n    if (offset != length) {\n        {\n            if (length < 0) {\n                throw new java.lang.IllegalArgumentException((\"Length must not be negative: \" + length));\n            } \n            int int = length;\n            while (remaining > 0) {\n                int int = length - remaining;\n                int int = input.read(buffer, (offset + location), remaining);\n                if ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) == count) {\n                    break;\n                } \n                remaining -= count;\n            }\n            return length - remaining;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"actual":"offset","length":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:206","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f37333ee-3f22-11e6-aa23-5b6f3db13acf","method":{"position":"org.apache.commons.io.input.TeeInputStream:143","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] bts) throws java.io.IOException {\n    if (bts == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = super.read(bts);\n            if (n != (-1)) {\n                java.io.OutputStream.write(bts, 0, n);\n            } \n            return n;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"magicNumber":"bts"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2827","type":"CtInvocationImpl"},"failures":[],"tindex":"f37333ef-3f22-11e6-aa23-a38f62ae461c","method":{"position":"org.apache.commons.io.filefilter.EmptyFileFilter:76","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        {\n            if (file.isDirectory()) {\n                java.io.File[] java.io.File[] = file.listFiles();\n                return (files == null) || ((files.int) == 0);\n            } else {\n                return (file.length()) == 0;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.StringBuilderWriter:137","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3735b00-3f22-11e6-aa23-912a8b36deea","method":{"position":"org.apache.commons.io.output.ProxyWriter:154","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr, int st, int len) throws java.io.IOException {\n    if (chr != null) {\n        {\n            try {\n                beforeWrite(len);\n                java.io.Writer.write(chr, st, len);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"chr"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:656","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3735b01-3f22-11e6-aa23-e9208d3768f9","method":{"position":"org.apache.commons.io.output.ProxyWriter:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str, int st, int len) throws java.io.IOException {\n    if (str != null) {\n        {\n            try {\n                beforeWrite(len);\n                java.io.Writer.write(str, st, len);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullInputStream:235","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3735b02-3f22-11e6-aa23-85d26217f0ee","method":{"position":"org.apache.commons.io.FileSystemUtils:379","type":"CtMethodImpl","sourcecode":"long freeSpaceUnix(java.lang.String path, boolean kb, boolean posix, long timeout) throws java.io.IOException {\n    if (timeout > timeout) {\n        {\n            if ((path.length()) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Path must not be empty\");\n            } \n            java.lang.String java.lang.String = \"-\";\n            if (kb) {\n                flags += \"k\";\n            } \n            if (posix) {\n                flags += \"P\";\n            } \n            java.lang.String[] java.lang.String[] = (flags.length()) > 1 ? new java.lang.String[]{ org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String , flags , path } : new java.lang.String[]{ org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String , path };\n            java.util.List<java.lang.String> java.util.List<java.lang.String> = performCommand(cmdAttribs, 3, timeout);\n            if ((lines.size()) < 2) {\n                throw new java.io.IOException(((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return info as expected \") + \"for path '\") + path) + \"'- response was \") + lines));\n            } \n            java.lang.String java.lang.String = lines.get(1);\n            java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(line2 , \" \");\n            if ((tok.countTokens()) < 4) {\n                if (((tok.countTokens()) == 1) && ((lines.size()) >= 3)) {\n                    java.lang.String java.lang.String = lines.get(2);\n                    tok = new java.util.StringTokenizer(line3 , \" \");\n                } else {\n                    throw new java.io.IOException((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return data as expected \") + \"for path '\") + path) + \"'- check path is valid\"));\n                }\n            } else {\n                tok.nextToken();\n            }\n            tok.nextToken();\n            tok.nextToken();\n            java.lang.String java.lang.String = tok.nextToken();\n            return parseBytes(freeSpace, path);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"timeout","position":"timeout"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:334","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3738213-3f22-11e6-aa23-f9d4f6cfffc6","method":{"position":"org.apache.commons.io.IOUtils:333","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.net.Socket sock) {\n    if (sock != null) {\n        {\n            if (sock != null) {\n                try {\n                    sock.close();\n                } catch (java.io.IOException ioe) {\n                }\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sock":"sock"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2273","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3738214-3f22-11e6-aa23-656f4be5859e","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:75","type":"CtMethodImpl","sourcecode":"public void onFileChange(final java.io.File file) {\n    if (file.exists()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(file.delete())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:212","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3738215-3f22-11e6-aa23-551b67ad7bf8","method":{"position":"org.apache.commons.io.TaggedIOException:64","type":"CtMethodImpl","sourcecode":"public static boolean isTaggedWith(java.lang.Throwable throwable, java.lang.Object tag) {\n    if (tag != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((tag != null) && (throwable instanceof org.apache.commons.io.TaggedIOException)) && (tag.equals(((org.apache.commons.io.TaggedIOException)(throwable)).java.io.Serializable));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"xmlPrologWriter":"tag"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:740","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3738216-3f22-11e6-aa23-9f56adca6130","method":{"position":"org.apache.commons.io.FileUtils:2553","type":"CtMethodImpl","sourcecode":"public static boolean isFileNewer(java.io.File file, java.io.File reference) {\n    if ((file.exists()) && ((destDir.isDirectory()) == false)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((reference.isDirectory()) || (reference.isDirectory())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (file == null) {\n                        {\n                            if (reference == null) {\n                                throw new java.lang.IllegalArgumentException(\"No specified reference file\");\n                            } \n                            if (!(reference.exists())) {\n                                throw new java.lang.IllegalArgumentException(((\"The reference file '\" + reference) + \"' doesn't exist\"));\n                            } \n                            return org.apache.commons.io.FileUtils.isFileNewer(file, reference.lastModified());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"reference","file1":"reference"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f373a927-3f22-11e6-aa23-659f7f288fc7","method":{"position":"org.apache.commons.io.EndianUtils:344","type":"CtMethodImpl","sourcecode":"public static int readSwappedInteger(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            return ((((value1 & 255) << 0) + ((value2 & 255) << 8)) + ((value3 & 255) << 16)) + ((value4 & 255) << 24);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullInputStream:256","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f373a928-3f22-11e6-aa23-257b1fbf2b75","method":{"position":"org.apache.commons.io.IOUtils:1843","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.InputStream input, java.io.OutputStream output, final long inputOffset, final long length, byte[] buffer) throws java.io.IOException {\n    if (length < 0) {\n        {\n            if (inputOffset > 0) {\n                org.apache.commons.io.IOUtils.skipFully(input, inputOffset);\n            } \n            if (length == 0) {\n                return 0;\n            } \n            final int int = buffer.int;\n            int int = bufferLength;\n            if ((length > 0) && (length < bufferLength)) {\n                bytesToRead = ((int)(length));\n            } \n            int int;\n            long long = 0;\n            while ((bytesToRead > 0) && ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) != (read = input.read(buffer, 0, bytesToRead)))) {\n                output.write(buffer, 0, read);\n                totalRead += read;\n                if (length > 0) {\n                    bytesToRead = ((int)(java.lang.Math.min((length - totalRead), bufferLength)));\n                } \n            }\n            return totalRead;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mark":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1380","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f373a929-3f22-11e6-aa23-896b5d790f19","method":{"position":"org.apache.commons.io.HexDump:154","type":"CtMethodImpl","sourcecode":"private static java.lang.StringBuilder dump(java.lang.StringBuilder _cbuffer, byte value) {\n    if ((_cbuffer.length()) != 0) {\n        {\n            for (int int = 0 ; j < 2 ; j++) {\n                _cbuffer.append(org.apache.commons.io.HexDump.org.apache.commons.io.HexDump.char[][((value >> (org.apache.commons.io.HexDump.org.apache.commons.io.HexDump.int[][(j + 6)])) & 15)]);\n            }\n            return _cbuffer;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"_cbuffer"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2182","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f373d03a-3f22-11e6-aa23-eb60b6bbf51c","method":{"position":"org.apache.commons.io.IOUtils:2177","type":"CtMethodImpl","sourcecode":"public static boolean contentEquals(java.io.InputStream input1, java.io.InputStream input2) throws java.io.IOException {\n    if (!(input1 instanceof java.io.BufferedInputStream)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(input1 instanceof java.io.BufferedInputStream)) {\n                input1 = new java.io.BufferedInputStream(input1);\n            } \n            if (!(input2 instanceof java.io.BufferedInputStream)) {\n                input2 = new java.io.BufferedInputStream(input2);\n            } \n            int int = input1.read();\n            while ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) != ch) {\n                int int = input2.read();\n                if (ch != ch2) {\n                    return false;\n                } \n                ch = input1.read();\n            }\n            int int = input2.read();\n            return ch2 == (org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input2":"input1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:658","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f373d03b-3f22-11e6-aa23-8d068955d88a","method":{"position":"org.apache.commons.io.EndianUtils:328","type":"CtMethodImpl","sourcecode":"public static void writeSwappedInteger(java.io.OutputStream output, int value) throws java.io.IOException {\n    if (value >= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n            output.write(((byte)((value >> 16) & 255)));\n            output.write(((byte)((value >> 24) & 255)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:100","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f373d03c-3f22-11e6-aa23-f5f92a11b016","method":{"position":"org.apache.commons.io.EndianUtils:95","type":"CtMethodImpl","sourcecode":"public static float swapFloat(float value) {\n    if (value == 1.0F) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.Float.intBitsToFloat(org.apache.commons.io.EndianUtils.swapInteger(java.lang.Float.floatToIntBits(value)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"maxBytesPerChar":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1168","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f373d03d-3f22-11e6-aa23-d792f4cf8566","method":{"position":"org.apache.commons.io.filefilter.SuffixFileFilter:168","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file, java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (java.lang.String java.lang.String : org.apache.commons.io.filefilter.SuffixFileFilter.this.java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkEndsWith(name, suffix)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1410","type":"CtInvocationImpl"},"failures":[],"tindex":"f373f74e-3f22-11e6-aa23-49df4bc6f696","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:75","type":"CtMethodImpl","sourcecode":"public void onFileChange(final java.io.File file) {\n    if (file.exists()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(file.delete())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f373f74f-3f22-11e6-aa23-fd5c75eea905","method":{"position":"org.apache.commons.io.EndianUtils:465","type":"CtMethodImpl","sourcecode":"public static double readSwappedDouble(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return java.lang.Double.longBitsToDouble(org.apache.commons.io.EndianUtils.readSwappedLong(input));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1425","type":"CtInvocationImpl"},"failures":[],"tindex":"f373f750-3f22-11e6-aa23-c3a463ba9ef1","method":{"position":"org.apache.commons.io.FileUtils:442","type":"CtMethodImpl","sourcecode":"public static void touch(java.io.File file) throws java.io.IOException {\n    if (file.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(file.exists())) {\n                java.io.OutputStream java.io.OutputStream = org.apache.commons.io.FileUtils.openOutputStream(file);\n                org.apache.commons.io.IOUtils.closeQuietly(out);\n            } \n            boolean boolean = file.setLastModified(java.lang.System.currentTimeMillis());\n            if (!success) {\n                throw new java.io.IOException((\"Unable to set the last modification time for \" + file));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:741","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f373f751-3f22-11e6-aa23-25e9a59ebf59","method":{"position":"org.apache.commons.io.filefilter.AndFileFilter:101","type":"CtMethodImpl","sourcecode":"public boolean removeFileFilter(final org.apache.commons.io.filefilter.IOFileFilter ioFileFilter) {\n    if (ioFileFilter == null) {\n        {\n            return org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.remove(ioFileFilter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"ioFileFilter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.Exception","condition":{"position":"org.apache.commons.io.input.Tailer:369","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f373f752-3f22-11e6-aa23-5544b878bcbf","method":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:161","type":"CtMethodImpl","sourcecode":"public synchronized void stop(long stopInterval) throws java.lang.Exception {\n    if (stopInterval < stopInterval) {\n        {\n            if ((boolean) == false) {\n                throw new java.lang.IllegalStateException(\"Monitor is not running\");\n            } \n            boolean = false;\n            try {\n                java.lang.Thread.join(stopInterval);\n            } catch (java.lang.InterruptedException e) {\n                java.lang.Thread.currentThread().interrupt();\n            }\n            for (org.apache.commons.io.monitor.FileAlterationObserver org.apache.commons.io.monitor.FileAlterationObserver : java.util.List<org.apache.commons.io.monitor.FileAlterationObserver>) {\n                observer.destroy();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.Exception();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"stopInterval","position":"stopInterval"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFileFilter:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f373f753-3f22-11e6-aa23-2fbb1ed34ba5","method":{"position":"org.apache.commons.io.FilenameUtils:579","type":"CtMethodImpl","sourcecode":"public static java.lang.String separatorsToSystem(java.lang.String path) {\n    if (path == null) {\n        {\n            if (path == null) {\n                return null;\n            } \n            if (org.apache.commons.io.FilenameUtils.isSystemWindows()) {\n                return org.apache.commons.io.FilenameUtils.separatorsToWindows(path);\n            } else {\n                return org.apache.commons.io.FilenameUtils.separatorsToUnix(path);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"wildcard":"path"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:797","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3741e64-3f22-11e6-aa23-637e90604f4f","method":{"position":"org.apache.commons.io.filefilter.WildcardFilter:129","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if ((file.isDirectory()) || (file.isDirectory())) {\n        {\n            if (file.isDirectory()) {\n                return false;\n            } \n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.FilenameUtils.wildcardMatch(file.getName(), wildcard)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file","file1":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2781","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3741e65-3f22-11e6-aa23-ffeb39a77532","method":{"position":"org.apache.commons.io.filefilter.NameFileFilter:161","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if (dir == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkEquals(name, name2)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"dir"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3741e66-3f22-11e6-aa23-f18f4384e79e","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:35","type":"CtMethodImpl","sourcecode":"public void onStart(final org.apache.commons.io.monitor.FileAlterationObserver observer) {\n    if (observer != null) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"observer":"observer"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:270","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3741e67-3f22-11e6-aa23-69f2d7eb9501","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:211","type":"CtMethodImpl","sourcecode":"public static java.util.Set<java.io.File> filterSet(org.apache.commons.io.filefilter.IOFileFilter filter, java.io.File... files) {\n    if (filter == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.File[] java.io.File[] = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files);\n            return new java.util.HashSet<java.io.File>(java.util.Arrays.asList(acceptedFiles));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceReader:140","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3741e68-3f22-11e6-aa23-8f9c4bb45b21","method":{"position":"org.apache.commons.io.input.CountingInputStream:57","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized long skip(final long length) throws java.io.IOException {\n    if (length < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            final long long = super.skip(length);\n            org.apache.commons.io.input.CountingInputStream.this.long += skip;\n            return skip;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:754","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3741e69-3f22-11e6-aa23-45ac444f1773","method":{"position":"org.apache.commons.io.input.ProxyReader:223","type":"CtMethodImpl","sourcecode":"protected void beforeRead(int n) throws java.io.IOException {\n    if (n < 0) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.ByteOrderMark:70","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f374457a-3f22-11e6-aa23-619488285f15","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:317","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String suffix) {\n    if ((suffix == null) || ((charsetName.length()) == 0)) {\n        {\n            return new org.apache.commons.io.filefilter.SuffixFileFilter(suffix);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsetName":"suffix"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2818","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f374457b-3f22-11e6-aa23-7f1d64f46cf4","method":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:167","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file, java.lang.String name) {\n    if (!(file.exists())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkStartsWith(name, prefix)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:72","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f374457c-3f22-11e6-aa23-cd08c94d701d","method":{"position":"org.apache.commons.io.IOUtils:1210","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.String input, java.nio.charset.Charset encoding) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.io.ByteArrayInputStream(input.getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.AndFileFilter:122","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f374457d-3f22-11e6-aa23-5310ccd3c99e","method":{"position":"org.apache.commons.io.ByteOrderMark:130","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (!(obj.accept(obj))) {\n        {\n            if (!(obj instanceof org.apache.commons.io.ByteOrderMark)) {\n                return false;\n            } \n            org.apache.commons.io.ByteOrderMark org.apache.commons.io.ByteOrderMark = ((org.apache.commons.io.ByteOrderMark)(obj));\n            if ((int[].int) != (bom.length())) {\n                return false;\n            } \n            for (int int = 0 ; i < (int[].int) ; i++) {\n                if ((int[][i]) != (bom.get(i))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilter":"obj","file":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:628","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f374457e-3f22-11e6-aa23-53e68697dca1","method":{"position":"org.apache.commons.io.FilenameUtils:1097","type":"CtMethodImpl","sourcecode":"public static boolean equalsNormalizedOnSystem(java.lang.String filename1, java.lang.String filename2) {\n    if ((filename2.equals(filename1)) || (cTEnc.equals(filename2))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, true, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cTEnc":"filename2","org.apache.commons.io.input.XmlStreamReader.UTF_32BE":"filename1","org.apache.commons.io.input.XmlStreamReader.UTF_32LE":"filename2"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1009","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f374457f-3f22-11e6-aa23-f1cd8bf209ab","method":{"position":"org.apache.commons.io.FileUtils:2553","type":"CtMethodImpl","sourcecode":"public static boolean isFileNewer(java.io.File file, java.io.File reference) {\n    if ((file.exists()) && ((destDir.isDirectory()) == false)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((reference.isDirectory()) || (reference.isDirectory())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (file == null) {\n                        {\n                            if (reference == null) {\n                                throw new java.lang.IllegalArgumentException(\"No specified reference file\");\n                            } \n                            if (!(reference.exists())) {\n                                throw new java.lang.IllegalArgumentException(((\"The reference file '\" + reference) + \"' doesn't exist\"));\n                            } \n                            return org.apache.commons.io.FileUtils.isFileNewer(file, reference.lastModified());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2286","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3746c90-3f22-11e6-aa23-214c378200f8","method":{"position":"org.apache.commons.io.input.ProxyInputStream:74","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] bts) throws java.io.IOException {\n    if (bts == null) {\n        {\n            try {\n                beforeRead((bts != null ? bts.int : 0));\n                int int = java.io.InputStream.read(bts);\n                afterRead(n);\n                return n;\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.IOUtils.SKIP_BYTE_BUFFER":"bts"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:428","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3746c91-3f22-11e6-aa23-d14cae6cff00","method":{"position":"org.apache.commons.io.output.LockableFileWriter:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str, int st, int end) throws java.io.IOException {\n    if (st <= 0) {\n        {\n            java.io.Writer.write(str, st, end);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"st"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.ThreadMonitor:69","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3746c92-3f22-11e6-aa23-05ed0ea42706","method":{"position":"org.apache.commons.io.IOUtils:2027","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.Reader input, java.io.Writer output, final long inputOffset, final long length) throws java.io.IOException {\n    if (inputOffset > 0) {\n        {\n            return org.apache.commons.io.IOUtils.copyLarge(input, output, inputOffset, length, new char[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"timeout":"inputOffset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2449","type":"CtInvocationImpl"},"failures":[],"tindex":"f3746c93-3f22-11e6-aa23-519a5c697929","method":{"position":"org.apache.commons.io.filefilter.FileFileFilter:58","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        {\n            return file.isFile();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NotFileFilter:41","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3746c94-3f22-11e6-aa23-cde188d44b5e","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:469","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if (filter == null) {\n        {\n            return new org.apache.commons.io.filefilter.NotFileFilter(filter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:115","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3746c95-3f22-11e6-aa23-9df8e4709704","method":{"position":"org.apache.commons.io.IOUtils:847","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URI uri, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (encoding == (java.nio.charset.Charset.forName(\"UTF-16\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toString(uri.toURL(), org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"encoding"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:259","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f37493a6-3f22-11e6-aa23-fbe3c2f0c5ef","method":{"position":"org.apache.commons.io.FilenameUtils:1167","type":"CtMethodImpl","sourcecode":"public static boolean isExtension(java.lang.String filename, java.lang.String[] extensions) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                return false;\n            } \n            if ((extensions == null) || ((extensions.int) == 0)) {\n                return (org.apache.commons.io.FilenameUtils.indexOfExtension(filename)) == (-1);\n            } \n            java.lang.String java.lang.String = org.apache.commons.io.FilenameUtils.getExtension(filename);\n            for (java.lang.String java.lang.String : extensions) {\n                if (fileExt.equals(extension)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1030","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f37493a7-3f22-11e6-aa23-6baf72b7c562","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:101","type":"CtMethodImpl","sourcecode":"private void needNewBuffer(int newcount) {\n    if (newcount == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) < ((java.util.List<byte[]>.size()) - 1)) {\n                int += byte[].int;\n                (int)++;\n                byte[] = java.util.List<byte[]>.get(int);\n            } else {\n                int int;\n                if ((byte[]) == null) {\n                    newBufferSize = newcount;\n                    int = 0;\n                } else {\n                    newBufferSize = java.lang.Math.max(((byte[].int) << 1), (newcount - (int)));\n                    int += byte[].int;\n                }\n                (int)++;\n                byte[] = new byte[newBufferSize];\n                java.util.List<byte[]>.add(byte[]);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"newcount"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:71","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f37493a8-3f22-11e6-aa23-f96719016ff6","method":{"position":"org.apache.commons.io.FileCleaner:88","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void track(java.lang.String path, java.lang.Object marker) {\n    if (marker instanceof java.io.BufferedReader) {\n        {\n            org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaningTracker.track(path, marker);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"marker"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:186","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f37493a9-3f22-11e6-aa23-93c54dd7593e","method":{"position":"org.apache.commons.io.FileSystemUtils:534","type":"CtMethodImpl","sourcecode":"java.lang.Process openProcess(java.lang.String[] cmdAttribs) throws java.io.IOException {\n    if (cmdAttribs != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return java.lang.Runtime.getRuntime().exec(cmdAttribs);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefixes":"cmdAttribs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:77","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f37493aa-3f22-11e6-aa23-cd38ee010047","method":{"position":"org.apache.commons.io.FilenameUtils:1049","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.String filename1, java.lang.String filename2) {\n    if ((filename2.indexOf(\"windows\")) != (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, false, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"osName":"filename2"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2855","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f374babb-3f22-11e6-aa23-d56aad58567d","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:67","type":"CtMethodImpl","sourcecode":"public void onFileCreate(final java.io.File file) {\n    if (file == null) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:88","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f374babc-3f22-11e6-aa23-0779c01648cf","method":{"position":"org.apache.commons.io.IOUtils:2157","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.Reader input, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding != null) {\n        {\n            org.apache.commons.io.IOUtils.copy(input, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cachedLine":"encoding"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:661","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f374babd-3f22-11e6-aa23-abbdef64a085","method":{"position":"org.apache.commons.io.FilenameUtils:148","type":"CtMethodImpl","sourcecode":"private static boolean isSeparator(char ch) {\n    if ((org.apache.commons.io.FilenameUtils.isSeparator(ch)) && (org.apache.commons.io.FilenameUtils.isSeparator(ch))) {\n        {\n            return (ch == (org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char)) || (ch == (org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch0":"ch","ch1":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2286","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f374babe-3f22-11e6-aa23-e16598577ddb","method":{"position":"org.apache.commons.io.IOUtils:1285","type":"CtMethodImpl","sourcecode":"public static void write(byte[] data, java.io.Writer output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (data == null) {\n        {\n            if (data != null) {\n                output.write(new java.lang.String(data , org.apache.commons.io.Charsets.toCharset(encoding)));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.IOUtils.SKIP_BYTE_BUFFER":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f374babf-3f22-11e6-aa23-05b8af283771","method":{"position":"org.apache.commons.io.EndianUtils:409","type":"CtMethodImpl","sourcecode":"public static long readSwappedLong(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            byte[] byte[] = new byte[8];\n            for (int int = 0 ; i < 8 ; i++) {\n                bytes[i] = ((byte)(org.apache.commons.io.EndianUtils.read(input)));\n            }\n            return org.apache.commons.io.EndianUtils.readSwappedLong(bytes, 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:352","type":"CtInvocationImpl"},"failures":[],"tindex":"f374bac0-3f22-11e6-aa23-d9157add2ba2","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:357","type":"CtMethodImpl","sourcecode":"private org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry parent, java.io.File file) {\n    if (file.exists()) {\n        {\n            org.apache.commons.io.monitor.FileEntry org.apache.commons.io.monitor.FileEntry = parent.newChildInstance(file);\n            entry.refresh(file);\n            java.io.File[] java.io.File[] = listFiles(file);\n            org.apache.commons.io.monitor.FileEntry[] org.apache.commons.io.monitor.FileEntry[] = (files.int) > 0 ? new org.apache.commons.io.monitor.FileEntry[files.int] : org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry[];\n            for (int int = 0 ; i < (files.int) ; i++) {\n                children[i] = createFileEntry(entry, files[i]);\n            }\n            entry.setChildren(children);\n            return entry;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2293","type":"CtInvocationImpl"},"failures":[],"tindex":"f374e1d1-3f22-11e6-aa23-634452ee246f","method":{"position":"org.apache.commons.io.FileDeleteStrategy:92","type":"CtMethodImpl","sourcecode":"public void delete(java.io.File fileToDelete) throws java.io.IOException {\n    if (fileToDelete.isDirectory()) {\n        {\n            if ((fileToDelete.exists()) && ((doDelete(fileToDelete)) == false)) {\n                throw new java.io.IOException((\"Deletion failed: \" + fileToDelete));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"fileToDelete"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f374e1d2-3f22-11e6-aa23-eb6799b6d782","method":{"position":"org.apache.commons.io.IOUtils:2475","type":"CtMethodImpl","sourcecode":"public static int read(java.io.InputStream input, byte[] buffer) throws java.io.IOException {\n    if (buffer != null) {\n        {\n            return org.apache.commons.io.IOUtils.read(input, buffer, 0, buffer.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"buffer"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.EndianUtils:482","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f374e1d3-3f22-11e6-aa23-9d35fe36023c","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:136","type":"CtMethodImpl","sourcecode":"protected void beforeWrite(int n) throws java.io.IOException {\n    if ((-1) == n) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"n"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:211","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f374e1d4-3f22-11e6-aa23-c1b7f21fd609","method":{"position":"org.apache.commons.io.output.DemuxOutputStream:39","type":"CtMethodImpl","sourcecode":"public java.io.OutputStream bindStream(java.io.OutputStream output) {\n    if (output != null) {\n        {\n            java.io.OutputStream java.io.OutputStream = java.lang.InheritableThreadLocal<java.io.OutputStream>.get();\n            java.lang.InheritableThreadLocal<java.io.OutputStream>.set(output);\n            return stream;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"memoryOutputStream":"output"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.AbstractFileComparator:61","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f374e1d5-3f22-11e6-aa23-971c916ec0aa","method":{"position":"org.apache.commons.io.FileUtils:462","type":"CtMethodImpl","sourcecode":"public static java.io.File[] convertFileCollectionToFileArray(java.util.Collection<java.io.File> files) {\n    if (files != null) {\n        {\n            return files.toArray(new java.io.File[files.size()]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:190","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f374e1d6-3f22-11e6-aa23-c1d14839ca54","method":{"position":"org.apache.commons.io.FilenameUtils:334","type":"CtMethodImpl","sourcecode":"public static java.lang.String normalizeNoEndSeparator(java.lang.String filename, boolean unixSeparator) {\n    if (filename != null) {\n        {\n            char char = unixSeparator ? org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char : org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char;\n            return org.apache.commons.io.FilenameUtils.doNormalize(filename, separator, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"filename"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f37508e7-3f22-11e6-aa23-eb2700f0c3fd","method":{"position":"org.apache.commons.io.IOUtils:776","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.InputStream input, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.output.StringBuilderWriter org.apache.commons.io.output.StringBuilderWriter = new org.apache.commons.io.output.StringBuilderWriter();\n            org.apache.commons.io.IOUtils.copy(input, sw, encoding);\n            return sw.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.EmptyFileFilter:77","type":"CtInvocationImpl"},"failures":[],"tindex":"f37508e8-3f22-11e6-aa23-93705e3079b4","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:59","type":"CtMethodImpl","sourcecode":"public void onDirectoryDelete(final java.io.File directory) {\n    if (directory.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2286","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f37508e9-3f22-11e6-aa23-73e93eca75a6","method":{"position":"org.apache.commons.io.EndianUtils:154","type":"CtMethodImpl","sourcecode":"public static void writeSwappedInteger(byte[] data, int offset, int value) {\n    if (data == null) {\n        {\n            data[(offset + 0)] = ((byte)((value >> 0) & 255));\n            data[(offset + 1)] = ((byte)((value >> 8) & 255));\n            data[(offset + 2)] = ((byte)((value >> 16) & 255));\n            data[(offset + 3)] = ((byte)((value >> 24) & 255));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.IOUtils.SKIP_BYTE_BUFFER":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:541","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f37508ea-3f22-11e6-aa23-756a8324d218","method":{"position":"org.apache.commons.io.FileSystemUtils:141","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static long freeSpace(java.lang.String path) throws java.io.IOException {\n    if (((path != null) && (!(xmlEnc.equals(path)))) && (!(xmlEnc.equals(path)))) {\n        {\n            return org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.freeSpaceOS(path, org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int, false, (-1));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"path","xmlEnc":"path","org.apache.commons.io.input.XmlStreamReader.UTF_16":"path"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1369","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f37508eb-3f22-11e6-aa23-15e8f4e35187","method":{"position":"org.apache.commons.io.output.LockableFileWriter:327","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr) throws java.io.IOException {\n    if (chr != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328082580/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.Writer.write(chr);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"chr"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1}],"header":{"groupId":"commons-io","transformationCount":70,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
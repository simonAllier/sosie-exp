{"failureDictionary":{},"transformations":[{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2858","type":"CtBinaryOperatorImpl","sourcecode":"destDir == null"},"failures":[],"tindex":"c5a11af2-2e80-11e6-8545-a50131efc76c","method":{"position":"org.apache.commons.io.FileUtils:1484","type":"CtMethodImpl","sourcecode":"public static void copyURLToFile(java.net.URL source, java.io.File destination, int connectionTimeout, int readTimeout) throws java.io.IOException {\n    if (destination == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.net.URLConnection java.net.URLConnection = source.openConnection();\n            connection.setConnectTimeout(connectionTimeout);\n            connection.setReadTimeout(readTimeout);\n            java.io.InputStream java.io.InputStream = connection.getInputStream();\n            org.apache.commons.io.FileUtils.copyInputStreamToFile(input, destination);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"destination"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:797","type":"CtBinaryOperatorImpl","sourcecode":"(file1.isDirectory()) || (file2.isDirectory())"},"failures":[],"tindex":"c5a1b733-2e80-11e6-8545-4b136f64d87e","method":{"position":"org.apache.commons.io.DirectoryWalker:453","type":"CtMethodImpl","sourcecode":"protected void handleCancelled(java.io.File startDirectory, java.util.Collection<T> results, org.apache.commons.io.DirectoryWalker.CancelException cancel) throws java.io.IOException {\n    if ((startDirectory.isDirectory()) || (startDirectory.isDirectory())) {\n        {\n            throw cancel;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"startDirectory","file1":"startDirectory"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:291","type":"CtInvocationImpl","sourcecode":"file.exists()"},"failures":[],"tindex":"c5a1b734-2e80-11e6-8545-13afbe2aa5a9","method":{"position":"org.apache.commons.io.input.Tailer:311","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.input.Tailer create(java.io.File file, org.apache.commons.io.input.TailerListener listener) {\n    if (file.exists()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.input.Tailer.create(file, listener, org.apache.commons.io.input.Tailer.org.apache.commons.io.input.Tailer.int, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"c5a1de45-2e80-11e6-8545-1123e40ecaf2","method":{"position":"org.apache.commons.io.IOUtils:1101","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.LineIterator lineIterator(java.io.InputStream input, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != input) {\n        {\n            return new org.apache.commons.io.LineIterator(new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding)));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1084","type":"CtBinaryOperatorImpl","sourcecode":"(!(parentFile.mkdirs())) && (!(parentFile.isDirectory()))"},"failures":[],"tindex":"c5a1de46-2e80-11e6-8545-9777bed58456","method":{"position":"org.apache.commons.io.FileUtils:2043","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, java.nio.charset.Charset encoding, boolean append) throws java.io.IOException {\n    if ((!(file.mkdirs())) && (!(parentFile.isDirectory()))) {\n        {\n            java.lang.String java.lang.String = data == null ? null : data.toString();\n            org.apache.commons.io.FileUtils.writeStringToFile(file, str, encoding, append);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parentFile":"file"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:173","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[],"tindex":"c5a20557-2e80-11e6-8545-7b3ff2b11015","method":{"position":"org.apache.commons.io.IOUtils:600","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] toByteArray(java.lang.String input) throws java.io.IOException {\n    if (input != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return input.getBytes();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"c5a20558-2e80-11e6-8545-df369bb9e361","method":{"position":"org.apache.commons.io.IOUtils:1590","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void write(java.lang.StringBuffer data, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, ((java.lang.String)(null)));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:554","type":"CtBinaryOperatorImpl","sourcecode":"((xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32)))) && (!(xmlEnc.equals(bomEnc)))"},"failures":[],"tindex":"c5a22c69-2e80-11e6-8545-07f9e1345e8a","method":{"position":"org.apache.commons.io.input.XmlStreamReader:774","type":"CtMethodImpl","sourcecode":"static boolean isTextXml(java.lang.String mime) {\n    if (((mime != null) && (!(xmlEnc.equals(mime)))) && (!(xmlEnc.equals(mime)))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (mime != null) && (((mime.equals(\"text/xml\")) || (mime.equals(\"text/xml-external-parsed-entity\"))) || ((mime.startsWith(\"text/\")) && (mime.endsWith(\"+xml\"))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"mime","xmlEnc":"mime","org.apache.commons.io.input.XmlStreamReader.UTF_32":"mime"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2935","type":"CtInvocationImpl","sourcecode":"fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())"},"failures":[],"tindex":"c5a22c6a-2e80-11e6-8545-b9f6ad893ea6","method":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:62","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (file2.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {\n        {\n            return (getType(file1)) - (getType(file2));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileInCanonicalDir":"file2"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2182","type":"CtUnaryOperatorImpl","sourcecode":"!(input2 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"c5a2537b-2e80-11e6-8545-a5066c6db5f6","method":{"position":"org.apache.commons.io.IOUtils:245","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.InputStream input) {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(input)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input2":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1361","type":"CtBinaryOperatorImpl","sourcecode":"srcDir == null"},"failures":[],"tindex":"c5a2537c-2e80-11e6-8545-11dc7139f431","method":{"position":"org.apache.commons.io.filefilter.WildcardFileFilter:151","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if (dir == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.FilenameUtils.wildcardMatch(name, wildcard, org.apache.commons.io.IOCase)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"dir"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1190","type":"CtBinaryOperatorImpl","sourcecode":"srcDir == null"},"failures":[],"tindex":"c5a27a8d-2e80-11e6-8545-b54c9cd984ca","method":{"position":"org.apache.commons.io.FileUtils:1189","type":"CtMethodImpl","sourcecode":"public static void copyDirectoryToDirectory(java.io.File srcDir, java.io.File destDir) throws java.io.IOException {\n    if (destDir == null) {\n        {\n            if (srcDir == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if ((srcDir.exists()) && ((srcDir.isDirectory()) == false)) {\n                throw new java.lang.IllegalArgumentException(((\"Source '\" + destDir) + \"' is not a directory\"));\n            } \n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if ((destDir.exists()) && ((destDir.isDirectory()) == false)) {\n                throw new java.lang.IllegalArgumentException(((\"Destination '\" + destDir) + \"' is not a directory\"));\n            } \n            org.apache.commons.io.FileUtils.copyDirectory(srcDir, new java.io.File(destDir , srcDir.getName()), true);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"destDir"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2896","type":"CtUnaryOperatorImpl","sourcecode":"!(src.exists())"},"failures":[],"tindex":"c5a2a19e-2e80-11e6-8545-f589ac498e68","method":{"position":"org.apache.commons.io.filefilter.HiddenFileFilter:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.exists())) {\n        {\n            return file.isHidden();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:164","type":"CtBinaryOperatorImpl","sourcecode":"conn instanceof java.net.HttpURLConnection"},"failures":[],"tindex":"c5a2a19f-2e80-11e6-8545-3d463e0f3614","method":{"position":"org.apache.commons.io.IOUtils:163","type":"CtMethodImpl","sourcecode":"public static void close(java.net.URLConnection conn) {\n    if (conn instanceof java.net.HttpURLConnection) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (conn instanceof java.net.HttpURLConnection) {\n                ((java.net.HttpURLConnection)(conn)).disconnect();\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"conn":"conn"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:164","type":"CtBinaryOperatorImpl","sourcecode":"(magicNumber.length()) == 0"},"failures":[],"tindex":"c5a2a1a0-2e80-11e6-8545-230479a2df63","method":{"position":"org.apache.commons.io.FilenameUtils:1233","type":"CtMethodImpl","sourcecode":"public static boolean wildcardMatch(java.lang.String filename, java.lang.String wildcardMatcher) {\n    if ((filename == null) && (wildcardMatcher == null)) {\n        {\n            if ((wildcardMatcher.length()) == 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.io.FilenameUtils.wildcardMatch(filename, wildcardMatcher, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"magicNumber":"wildcardMatcher"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2444","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"c5a2c8b1-2e80-11e6-8545-a5b55844c95f","method":{"position":"org.apache.commons.io.FileUtils:1529","type":"CtMethodImpl","sourcecode":"public static void deleteDirectory(java.io.File directory) throws java.io.IOException {\n    if (!(directory.exists())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(directory.exists())) {\n                return ;\n            } \n            if (!(org.apache.commons.io.FileUtils.isSymlink(directory))) {\n                org.apache.commons.io.FileUtils.cleanDirectory(directory);\n            } \n            if (!(directory.delete())) {\n                java.lang.String java.lang.String = (\"Unable to delete directory \" + directory) + \".\";\n                throw new java.io.IOException(message);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"directory"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.Tailer:349","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"c5a2efc2-2e80-11e6-8545-a91ac26b27c6","method":{"position":"org.apache.commons.io.input.Tailer:448","type":"CtMethodImpl","sourcecode":"private long readLines(java.io.RandomAccessFile reader) throws java.io.IOException {\n    if (reader == null) {\n        {\n            if (reader == null) {\n                {\n                    if (reader == null) {\n                        {\n                            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            long long = reader.getFilePointer();\n                            long long = pos;\n                            int int;\n                            boolean boolean = false;\n                            while ((boolean) && ((num = reader.read(byte[])) != (-1))) {\n                                for (int int = 0 ; i < num ; i++) {\n                                    byte byte = byte[][i];\n                                    switch (ch) {\n                                        case '\\n' :\n                                            seenCR = false;\n                                            org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                                            sb.setLength(0);\n                                            rePos = (pos + i) + 1;\n                                            break;\n                                        case '\\r' :\n                                            if (seenCR) {\n                                                sb.append('\\r');\n                                            } \n                                            seenCR = true;\n                                            break;\n                                        default :\n                                            if (seenCR) {\n                                                seenCR = false;\n                                                org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                                                sb.setLength(0);\n                                                rePos = (pos + i) + 1;\n                                            } \n                                            sb.append(((char)(ch)));\n                                    }\n                                }\n                                pos = reader.getFilePointer();\n                            }\n                            reader.seek(rePos);\n                            return rePos;\n                        }\n                    } else {\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"reader"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.Tailer:349","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"c5a316d3-2e80-11e6-8545-3d8e03fbcf6c","method":{"position":"org.apache.commons.io.input.Tailer:448","type":"CtMethodImpl","sourcecode":"private long readLines(java.io.RandomAccessFile reader) throws java.io.IOException {\n    if (reader == null) {\n        {\n            if (reader == null) {\n                {\n                    if (reader == null) {\n                        {\n                            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            long long = reader.getFilePointer();\n                            long long = pos;\n                            int int;\n                            boolean boolean = false;\n                            while ((boolean) && ((num = reader.read(byte[])) != (-1))) {\n                                for (int int = 0 ; i < num ; i++) {\n                                    byte byte = byte[][i];\n                                    switch (ch) {\n                                        case '\\n' :\n                                            seenCR = false;\n                                            org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                                            sb.setLength(0);\n                                            rePos = (pos + i) + 1;\n                                            break;\n                                        case '\\r' :\n                                            if (seenCR) {\n                                                sb.append('\\r');\n                                            } \n                                            seenCR = true;\n                                            break;\n                                        default :\n                                            if (seenCR) {\n                                                seenCR = false;\n                                                org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                                                sb.setLength(0);\n                                                rePos = (pos + i) + 1;\n                                            } \n                                            sb.append(((char)(ch)));\n                                    }\n                                }\n                                pos = reader.getFilePointer();\n                            }\n                            reader.seek(rePos);\n                            return rePos;\n                        }\n                    } else {\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"reader"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:996","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"c5a33de4-2e80-11e6-8545-6577a931d88c","method":{"position":"org.apache.commons.io.filefilter.NotFileFilter:66","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file, java.lang.String name) {\n    if (name == null) {\n        {\n            return !(org.apache.commons.io.filefilter.IOFileFilter.accept(file, name));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"name"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2708","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"c5a364f5-2e80-11e6-8545-2d448ed21a32","method":{"position":"org.apache.commons.io.FileUtils:2811","type":"CtMethodImpl","sourcecode":"public static void moveFile(java.io.File srcFile, java.io.File destFile) throws java.io.IOException {\n    if (destFile.isDirectory()) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (srcFile == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destFile == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if (!(srcFile.exists())) {\n                throw new java.io.FileNotFoundException(((\"Source '\" + srcFile) + \"' does not exist\"));\n            } \n            if (srcFile.isDirectory()) {\n                throw new java.io.IOException(((\"Source '\" + srcFile) + \"' is a directory\"));\n            } \n            if (destFile.exists()) {\n                throw new org.apache.commons.io.FileExistsException(((\"Destination '\" + destFile) + \"' already exists\"));\n            } \n            if (destFile.isDirectory()) {\n                throw new java.io.IOException(((\"Destination '\" + destFile) + \"' is a directory\"));\n            } \n            boolean boolean = srcFile.renameTo(destFile);\n            if (!rename) {\n                org.apache.commons.io.FileUtils.copyFile(srcFile, destFile);\n                if (!(srcFile.delete())) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(destFile);\n                    throw new java.io.IOException(((((\"Failed to delete original file '\" + srcFile) + \"' after copy to '\") + destFile) + \"'\"));\n                } \n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"destFile"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:400","type":"CtBinaryOperatorImpl","sourcecode":"sock != null"},"failures":[],"tindex":"c5a364f6-2e80-11e6-8545-470c0589d8e5","method":{"position":"org.apache.commons.io.IOUtils:399","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.net.ServerSocket sock) {\n    if (sock != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (sock != null) {\n                try {\n                    sock.close();\n                } catch (java.io.IOException ioe) {\n                }\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sock":"sock"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.HexDump:90","type":"CtBinaryOperatorImpl","sourcecode":"chars_read > 16"},"failures":[],"tindex":"c5a364f7-2e80-11e6-8545-d57dce7aac76","method":{"position":"org.apache.commons.io.DirectoryWalker:547","type":"CtMethodImpl","sourcecode":"protected void handleRestricted(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (depth > 16) {\n        {\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chars_read":"depth"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"c5a38c08-2e80-11e6-8545-dd8e0f5524aa","method":{"position":"org.apache.commons.io.IOUtils:738","type":"CtMethodImpl","sourcecode":"public static char[] toCharArray(java.io.Reader input) throws java.io.IOException {\n    if (input == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.CharArrayWriter java.io.CharArrayWriter = new java.io.CharArrayWriter();\n            org.apache.commons.io.IOUtils.copy(input, sw);\n            return sw.toCharArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1538","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.delete())"},"failures":[],"tindex":"c5a38c09-2e80-11e6-8545-c3baa983681c","method":{"position":"org.apache.commons.io.FileUtils:2662","type":"CtMethodImpl","sourcecode":"public static boolean isFileOlder(java.io.File file, long timeMillis) {\n    if (!(file.delete())) {\n        {\n            if (file == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified file\");\n            } \n            if (!(file.exists())) {\n                return false;\n            } \n            return (file.lastModified()) < timeMillis;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"c5a38c0a-2e80-11e6-8545-853c343d4d98","method":{"position":"org.apache.commons.io.output.TaggedOutputStream:87","type":"CtMethodImpl","sourcecode":"public boolean isCauseOf(java.lang.Exception exception) {\n    if (null != exception) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.TaggedIOException.isTaggedWith(exception, java.io.Serializable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"exception"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:600","type":"CtInvocationImpl","sourcecode":"directory.isDirectory()"},"failures":[],"tindex":"c5a38c0b-2e80-11e6-8545-f3fbdd623384","method":{"position":"org.apache.commons.io.FileUtils:2467","type":"CtMethodImpl","sourcecode":"public static long sizeOfDirectory(java.io.File directory) {\n    if (directory.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.checkDirectory(directory);\n            final java.io.File[] java.io.File[] = directory.listFiles();\n            if (files == null) {\n                return 0L;\n            } \n            long long = 0;\n            for (final java.io.File java.io.File : files) {\n                try {\n                    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n                        size += org.apache.commons.io.FileUtils.sizeOf(file);\n                        if (size < 0) {\n                            break;\n                        } \n                    } \n                } catch (java.io.IOException ioe) {\n                }\n            }\n            return size;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl","sourcecode":"!(input1 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"c5a3b31c-2e80-11e6-8545-75cce77c23c7","method":{"position":"org.apache.commons.io.IOUtils:1138","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.LineIterator lineIterator(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            return org.apache.commons.io.IOUtils.lineIterator(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:775","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"c5a3b31d-2e80-11e6-8545-4d5ea3390345","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:390","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter1, org.apache.commons.io.filefilter.IOFileFilter filter2) {\n    if (filter1 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.AndFileFilter(filter1 , filter2);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter1"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:745","type":"CtBinaryOperatorImpl","sourcecode":"(file1.length()) != (file2.length())"},"failures":[],"tindex":"c5a3b31e-2e80-11e6-8545-c94c546e75b1","method":{"position":"org.apache.commons.io.FileUtils:1876","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.LineIterator lineIterator(java.io.File file) throws java.io.IOException {\n    if ((file.length()) != (file.length())) {\n        {\n            return org.apache.commons.io.FileUtils.lineIterator(file, null);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file","file1":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:352","type":"CtBinaryOperatorImpl","sourcecode":"size == 0"},"failures":[],"tindex":"c5a3da2f-2e80-11e6-8545-e19addf27821","method":{"position":"org.apache.commons.io.EndianUtils:250","type":"CtMethodImpl","sourcecode":"public static float readSwappedFloat(byte[] data, int offset) {\n    if (offset == 0) {\n        {\n            return java.lang.Float.intBitsToFloat(org.apache.commons.io.EndianUtils.readSwappedInteger(data, offset));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"offset"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2444","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"c5a3da30-2e80-11e6-8545-13a766f1878f","method":{"position":"org.apache.commons.io.FileUtils:2091","type":"CtMethodImpl","sourcecode":"public static void writeByteArrayToFile(java.io.File file, byte[] data, boolean append) throws java.io.IOException {\n    if (!(file.exists())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.OutputStream java.io.OutputStream = null;\n            try {\n                out = org.apache.commons.io.FileUtils.openOutputStream(file, append);\n                out.write(data);\n                out.close();\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(out);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1329","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"c5a3da31-2e80-11e6-8545-8df0afb569be","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:276","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr) throws java.io.IOException {\n    if (chr != null) {\n        {\n            java.io.Writer.write(chr);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"chr"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.Tailer:349","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"c5a40142-2e80-11e6-8545-0d5e0cc815c5","method":{"position":"org.apache.commons.io.input.Tailer:448","type":"CtMethodImpl","sourcecode":"private long readLines(java.io.RandomAccessFile reader) throws java.io.IOException {\n    if (reader == null) {\n        {\n            if (reader == null) {\n                {\n                    if (reader == null) {\n                        {\n                            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            long long = reader.getFilePointer();\n                            long long = pos;\n                            int int;\n                            boolean boolean = false;\n                            while ((boolean) && ((num = reader.read(byte[])) != (-1))) {\n                                for (int int = 0 ; i < num ; i++) {\n                                    byte byte = byte[][i];\n                                    switch (ch) {\n                                        case '\\n' :\n                                            seenCR = false;\n                                            org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                                            sb.setLength(0);\n                                            rePos = (pos + i) + 1;\n                                            break;\n                                        case '\\r' :\n                                            if (seenCR) {\n                                                sb.append('\\r');\n                                            } \n                                            seenCR = true;\n                                            break;\n                                        default :\n                                            if (seenCR) {\n                                                seenCR = false;\n                                                org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                                                sb.setLength(0);\n                                                rePos = (pos + i) + 1;\n                                            } \n                                            sb.append(((char)(ch)));\n                                    }\n                                }\n                                pos = reader.getFilePointer();\n                            }\n                            reader.seek(rePos);\n                            return rePos;\n                        }\n                    } else {\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"reader"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"c5a42853-2e80-11e6-8545-3f3968c6a3b8","method":{"position":"org.apache.commons.io.IOUtils:985","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.InputStream input, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding));\n            return org.apache.commons.io.IOUtils.readLines(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"c5a42854-2e80-11e6-8545-d5bf46e6853f","method":{"position":"org.apache.commons.io.input.ProxyReader:255","type":"CtMethodImpl","sourcecode":"protected void handleIOException(java.io.IOException e) throws java.io.IOException {\n    if (null != e) {\n        throw new java.io.IOException();\n    } else {\n        {\n            throw e;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"e"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2890","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"c5a42855-2e80-11e6-8545-2b6edc6a9dd0","method":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:149","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = file.getName();\n            for (java.lang.String java.lang.String : org.apache.commons.io.filefilter.PrefixFileFilter.this.java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkStartsWith(name, prefix)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:601","type":"CtBinaryOperatorImpl","sourcecode":"cTEnc == null"},"failures":[],"tindex":"c5a42856-2e80-11e6-8545-ed4866eaed52","method":{"position":"org.apache.commons.io.FilenameUtils:622","type":"CtMethodImpl","sourcecode":"public static int getPrefixLength(java.lang.String filename) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                return -1;\n            } \n            int int = filename.length();\n            if (len == 0) {\n                return 0;\n            } \n            char char = filename.charAt(0);\n            if (ch0 == ':') {\n                return -1;\n            } \n            if (len == 1) {\n                if (ch0 == '~') {\n                    return 2;\n                } \n                return org.apache.commons.io.FilenameUtils.isSeparator(ch0) ? 1 : 0;\n            } else {\n                if (ch0 == '~') {\n                    int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 1);\n                    int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 1);\n                    if ((posUnix == (-1)) && (posWin == (-1))) {\n                        return len + 1;\n                    } \n                    posUnix = posUnix == (-1) ? posWin : posUnix;\n                    posWin = posWin == (-1) ? posUnix : posWin;\n                    return (java.lang.Math.min(posUnix, posWin)) + 1;\n                } \n                char char = filename.charAt(1);\n                if (ch1 == ':') {\n                    ch0 = java.lang.Character.toUpperCase(ch0);\n                    if ((ch0 >= 'A') && (ch0 <= 'Z')) {\n                        if ((len == 2) || ((org.apache.commons.io.FilenameUtils.isSeparator(filename.charAt(2))) == false)) {\n                            return 2;\n                        } \n                        return 3;\n                    } \n                    return -1;\n                } else if ((org.apache.commons.io.FilenameUtils.isSeparator(ch0)) && (org.apache.commons.io.FilenameUtils.isSeparator(ch1))) {\n                    int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 2);\n                    int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 2);\n                    if ((((posUnix == (-1)) && (posWin == (-1))) || (posUnix == 2)) || (posWin == 2)) {\n                        return -1;\n                    } \n                    posUnix = posUnix == (-1) ? posWin : posUnix;\n                    posWin = posWin == (-1) ? posUnix : posWin;\n                    return (java.lang.Math.min(posUnix, posWin)) + 1;\n                } else {\n                    return org.apache.commons.io.FilenameUtils.isSeparator(ch0) ? 1 : 0;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cTEnc":"filename"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:218","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"c5a44f67-2e80-11e6-8545-b3218c84c411","method":{"position":"org.apache.commons.io.FileUtils:1894","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (file == null) {\n        {\n            org.apache.commons.io.FileUtils.writeStringToFile(file, data, encoding, false);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1026","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"c5a44f68-2e80-11e6-8545-cd3da37a2c60","method":{"position":"org.apache.commons.io.FilenameUtils:566","type":"CtMethodImpl","sourcecode":"public static java.lang.String separatorsToWindows(java.lang.String path) {\n    if (path == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((path == null) || ((path.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char)) == (-1))) {\n                return path;\n            } \n            return path.replace(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"path"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFileFilter:187","type":"CtBinaryOperatorImpl","sourcecode":"(wildcards) != null"},"failures":[],"tindex":"c5a47679-2e80-11e6-8545-977788d84f0d","method":{"position":"org.apache.commons.io.FileUtils:663","type":"CtMethodImpl","sourcecode":"private static java.lang.String[] toSuffixes(java.lang.String[] extensions) {\n    if (extensions != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = new java.lang.String[extensions.int];\n            for (int int = 0 ; i < (extensions.int) ; i++) {\n                suffixes[i] = \".\" + (extensions[i]);\n            }\n            return suffixes;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"wildcards":"extensions"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:634","type":"CtBinaryOperatorImpl","sourcecode":"len == 1"},"failures":[],"tindex":"c5a4767a-2e80-11e6-8545-9d1890db5b05","method":{"position":"org.apache.commons.io.output.ProxyWriter:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str, int st, int len) throws java.io.IOException {\n    if (st == 1) {\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                beforeWrite(len);\n                java.io.Writer.write(str, st, len);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"st"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"c5a4767b-2e80-11e6-8545-27c6cecab0f7","method":{"position":"org.apache.commons.io.output.TeeOutputStream:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(byte[] b) throws java.io.IOException {\n    if (b != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            super.write(b);\n            org.apache.commons.io.output.TeeOutputStream.this.java.io.OutputStream.write(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"b"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.ReaderInputStream:231","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"c5a49d8c-2e80-11e6-8545-334760d9825f","method":{"position":"org.apache.commons.io.EndianUtils:168","type":"CtMethodImpl","sourcecode":"public static int readSwappedInteger(byte[] data, int offset) {\n    if (offset == 0) {\n        {\n            return (((((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8)) + (((data[(offset + 2)]) & 255) << 16)) + (((data[(offset + 3)]) & 255) << 24);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"offset"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:735","type":"CtUnaryOperatorImpl","sourcecode":"!file1Exists"},"failures":[],"tindex":"c5a49d8d-2e80-11e6-8545-45976f5a9e37","method":{"position":"org.apache.commons.io.FileUtils:2001","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, boolean append) throws java.io.IOException {\n    if (!append) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, java.nio.charset.Charset.defaultCharset(), append);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file1Exists":"append"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:723","type":"CtBinaryOperatorImpl","sourcecode":"c == (-1)"},"failures":[],"tindex":"c5a49d8e-2e80-11e6-8545-9d292a08e89b","method":{"position":"org.apache.commons.io.input.NullInputStream:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void mark(int readlimit) {\n    if (readlimit == (-1)) {\n        {\n            if (!(boolean)) {\n                throw new java.lang.UnsupportedOperationException(\"Mark not supported\");\n            } \n            long = long;\n            org.apache.commons.io.input.NullInputStream.this.long = readlimit;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"readlimit"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.DirectoryWalker:359","type":"CtBinaryOperatorImpl","sourcecode":"childFiles == null"},"failures":[],"tindex":"c5a4c49f-2e80-11e6-8545-3b67c856dc5b","method":{"position":"org.apache.commons.io.comparator.AbstractFileComparator:43","type":"CtMethodImpl","sourcecode":"public java.io.File[] sort(java.io.File... files) {\n    if (files == null) {\n        {\n            if (files != null) {\n                java.util.Arrays.sort(files, org.apache.commons.io.comparator.AbstractFileComparator.this);\n            } \n            return files;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"childFiles":"files"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:264","type":"CtUnaryOperatorImpl","sourcecode":"!(closed)"},"failures":[],"tindex":"c5a4c4a0-2e80-11e6-8545-c5719064fb63","method":{"position":"org.apache.commons.io.output.WriterOutputStream:275","type":"CtMethodImpl","sourcecode":"private void processInput(boolean endOfInput) throws java.io.IOException {\n    if (!endOfInput) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.nio.ByteBuffer.flip();\n            java.nio.charset.CoderResult java.nio.charset.CoderResult;\n            while (true) {\n                coderResult = java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer, java.nio.CharBuffer, endOfInput);\n                if (coderResult.isOverflow()) {\n                    flushOutput();\n                } else if (coderResult.isUnderflow()) {\n                    break;\n                } else {\n                    throw new java.io.IOException(\"Unexpected coder result\");\n                }\n            }\n            java.nio.ByteBuffer.compact();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"closed":"endOfInput"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.io.IOUtils.EOF) == count"},"failures":[],"tindex":"c5a4ebb1-2e80-11e6-8545-4341b754b793","method":{"position":"org.apache.commons.io.input.ProxyInputStream:95","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] bts, int off, int len) throws java.io.IOException {\n    if (len == off) {\n        {\n            try {\n                beforeRead(len);\n                int int = java.io.InputStream.read(bts, off, len);\n                afterRead(n);\n                return n;\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n                return -1;\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"off","org.apache.commons.io.IOUtils.EOF":"len"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:478","type":"CtBinaryOperatorImpl","sourcecode":"(httpContentType != null) && (httpContentType.startsWith(\"text/html\"))"},"failures":[],"tindex":"c5a4ebb2-2e80-11e6-8545-1324c9b46aed","method":{"position":"org.apache.commons.io.output.NullWriter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence csq, int start, int end) {\n    if ((csq != null) && (httpContentType.startsWith(\"text/html\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.output.NullWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"csq"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileDeleteStrategy:72","type":"CtBinaryOperatorImpl","sourcecode":"(fileToDelete == null) || ((fileToDelete.exists()) == false)"},"failures":[],"tindex":"c5a4ebb3-2e80-11e6-8545-ed317646e2b0","method":{"position":"org.apache.commons.io.FileCleaningTracker:106","type":"CtMethodImpl","sourcecode":"public void track(java.lang.String path, java.lang.Object marker) {\n    if ((marker == null) || ((fileToDelete.exists()) == false)) {\n        {\n            track(path, marker, ((org.apache.commons.io.FileDeleteStrategy)(null)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileToDelete":"marker"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:242","type":"CtBinaryOperatorImpl","sourcecode":"listener != null"},"failures":[],"tindex":"c5a512c4-2e80-11e6-8545-e1178de5f0d5","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:252","type":"CtMethodImpl","sourcecode":"public void removeListener(final org.apache.commons.io.monitor.FileAlterationListener listener) {\n    if (listener != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (listener != null) {\n                while (java.util.List<org.apache.commons.io.monitor.FileAlterationListener>.remove(listener)) {\n                }\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"listener":"listener"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"c5a512c5-2e80-11e6-8545-87a39b8aeeda","method":{"position":"org.apache.commons.io.CopyUtils:151","type":"CtMethodImpl","sourcecode":"public static void copy(byte[] input, java.io.Writer output) throws java.io.IOException {\n    if (input != null) {\n        {\n            java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream(input);\n            org.apache.commons.io.CopyUtils.copy(in, output);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl","sourcecode":"!(input1 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"c5a512c6-2e80-11e6-8545-a7d24d04894d","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:276","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toBufferedInputStream(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.output.ByteArrayOutputStream org.apache.commons.io.output.ByteArrayOutputStream = new org.apache.commons.io.output.ByteArrayOutputStream();\n            output.write(input);\n            return output.toBufferedInputStream();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:192","type":"CtBinaryOperatorImpl","sourcecode":"directory == null"},"failures":[],"tindex":"c5a512c7-2e80-11e6-8545-89d11d44e610","method":{"position":"org.apache.commons.io.FileUtils:2268","type":"CtMethodImpl","sourcecode":"public static void forceDelete(java.io.File file) throws java.io.IOException {\n    if (file == null) {\n        {\n            if (file.isDirectory()) {\n                org.apache.commons.io.FileUtils.deleteDirectory(file);\n            } else {\n                boolean boolean = file.exists();\n                if (!(file.delete())) {\n                    if (!filePresent) {\n                        throw new java.io.FileNotFoundException((\"File does not exist: \" + file));\n                    } \n                    java.lang.String java.lang.String = \"Unable to delete file: \" + file;\n                    throw new java.io.IOException(message);\n                } \n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1664","type":"CtBinaryOperatorImpl","sourcecode":"line != null"},"failures":[],"tindex":"c5a539d8-2e80-11e6-8545-7d6e5ea731a4","method":{"position":"org.apache.commons.io.TaggedIOException:92","type":"CtMethodImpl","sourcecode":"public static void throwCauseIfTaggedWith(java.lang.Throwable throwable, java.lang.Object tag) throws java.io.IOException {\n    if (tag != null) {\n        {\n            if (org.apache.commons.io.TaggedIOException.isTaggedWith(throwable, tag)) {\n                throw ((org.apache.commons.io.TaggedIOException)(throwable)).getCause();\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"tag"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:188","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"c5a539d9-2e80-11e6-8545-5b5c9f3403d7","method":{"position":"org.apache.commons.io.output.NullOutputStream:44","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b, int off, int len) {\n    if (off > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"off"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:167","type":"CtBinaryOperatorImpl","sourcecode":"xmlPrologEnd > 0"},"failures":[],"tindex":"c5a539da-2e80-11e6-8545-a3b71df9c9ef","method":{"position":"org.apache.commons.io.input.ReaderInputStream:222","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b, int off, int len) throws java.io.IOException {\n    if (off > 0) {\n        {\n            if (b == null) {\n                throw new java.lang.NullPointerException(\"Byte array must not be null\");\n            } \n            if (((len < 0) || (off < 0)) || ((off + len) > (b.int))) {\n                throw new java.lang.IndexOutOfBoundsException((((((\"Array Size=\" + (b.int)) + \", offset=\") + off) + \", length=\") + len));\n            } \n            int int = 0;\n            if (len == 0) {\n                return 0;\n            } \n            while (len > 0) {\n                if (java.nio.ByteBuffer.hasRemaining()) {\n                    int int = java.lang.Math.min(java.nio.ByteBuffer.remaining(), len);\n                    java.nio.ByteBuffer.get(b, off, c);\n                    off += c;\n                    len -= c;\n                    read += c;\n                } else {\n                    fillBuffer();\n                    if ((boolean) && (!(java.nio.ByteBuffer.hasRemaining()))) {\n                        break;\n                    } \n                }\n            }\n            return (read == 0) && (boolean) ? -1 : read;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"xmlPrologEnd":"off"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:211","type":"CtBinaryOperatorImpl","sourcecode":"(memoryOutputStream) != null"},"failures":[],"tindex":"c5a560eb-2e80-11e6-8545-4397589f0662","method":{"position":"org.apache.commons.io.IOUtils:273","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.OutputStream output) {\n    if (output != null) {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(output)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"memoryOutputStream":"output"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2663","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"c5a560ec-2e80-11e6-8545-8bd09f849005","method":{"position":"org.apache.commons.io.filefilter.WildcardFilter:108","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if (dir.isDirectory()) {\n        {\n            if (dir == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((dir != null) && (new java.io.File(dir , name).isDirectory())) {\n                        return false;\n                    } \n                    for (java.lang.String java.lang.String : java.lang.String[]) {\n                        if (org.apache.commons.io.FilenameUtils.wildcardMatch(name, wildcard)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"dir"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:680","type":"CtBinaryOperatorImpl","sourcecode":"httpContentType != null"},"failures":[],"tindex":"c5a560ed-2e80-11e6-8545-e9e1f20ddffe","method":{"position":"org.apache.commons.io.IOUtils:1507","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.OutputStream output) throws java.io.IOException {\n    if (data != null) {\n        {\n            if (data != null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    org.apache.commons.io.IOUtils.write(data, output, java.nio.charset.Charset.defaultCharset());\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1489","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"c5a587fe-2e80-11e6-8545-ddb9731f16b6","method":{"position":"org.apache.commons.io.IOUtils:1507","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.OutputStream output) throws java.io.IOException {\n    if (data != null) {\n        {\n            if (data != null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    org.apache.commons.io.IOUtils.write(data, output, java.nio.charset.Charset.defaultCharset());\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"c5a587ff-2e80-11e6-8545-39c8d6015a07","method":{"position":"org.apache.commons.io.IOUtils:2447","type":"CtMethodImpl","sourcecode":"public static int read(java.io.InputStream input, byte[] buffer, int offset, int length) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (length < 0) {\n                throw new java.lang.IllegalArgumentException((\"Length must not be negative: \" + length));\n            } \n            int int = length;\n            while (remaining > 0) {\n                int int = length - remaining;\n                int int = input.read(buffer, (offset + location), remaining);\n                if ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) == count) {\n                    break;\n                } \n                remaining -= count;\n            }\n            return length - remaining;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1379","type":"CtInvocationImpl","sourcecode":"destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())"},"failures":[],"tindex":"c5a58800-2e80-11e6-8545-35ab711d6d25","method":{"position":"org.apache.commons.io.FileUtils:682","type":"CtMethodImpl","sourcecode":"public static java.util.Collection<java.io.File> listFiles(java.io.File directory, java.lang.String[] extensions, boolean recursive) {\n    if (directory.getCanonicalPath().startsWith(directory.getCanonicalPath())) {\n        {\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter;\n            if (extensions == null) {\n                filter = org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.IOFileFilter;\n            } else {\n                java.lang.String[] java.lang.String[] = org.apache.commons.io.FileUtils.toSuffixes(extensions);\n                filter = new org.apache.commons.io.filefilter.SuffixFileFilter(suffixes);\n            }\n            return org.apache.commons.io.FileUtils.listFiles(directory, filter, (recursive ? org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.IOFileFilter : org.apache.commons.io.filefilter.FalseFileFilter.org.apache.commons.io.filefilter.FalseFileFilter.org.apache.commons.io.filefilter.IOFileFilter));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"directory","destDir":"directory"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReaderInputStream:223","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"c5a58801-2e80-11e6-8545-052029bef06d","method":{"position":"org.apache.commons.io.input.CharSequenceInputStream:160","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return read(b, 0, b.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:114","type":"CtInvocationImpl","sourcecode":"org.apache.commons.io.FilenameUtils.wildcardMatch(name, wildcard)"},"failures":[],"tindex":"c5a5af12-2e80-11e6-8545-5b49a30ae0e2","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:293","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String prefix) {\n    if (org.apache.commons.io.FilenameUtils.wildcardMatch(prefix, prefix)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.PrefixFileFilter(prefix);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"prefix","wildcard":"prefix"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.EndianUtils:482","type":"CtBinaryOperatorImpl","sourcecode":"(-1) == value"},"failures":[],"tindex":"c5a5af13-2e80-11e6-8545-1bdf1bb47822","method":{"position":"org.apache.commons.io.EndianUtils:328","type":"CtMethodImpl","sourcecode":"public static void writeSwappedInteger(java.io.OutputStream output, int value) throws java.io.IOException {\n    if ((-1) == value) {\n        throw new java.io.IOException();\n    } else {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n            output.write(((byte)((value >> 16) & 255)));\n            output.write(((byte)((value >> 24) & 255)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.EOFException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:722","type":"CtBinaryOperatorImpl","sourcecode":"firstGT == (-1)"},"failures":[],"tindex":"c5a5af14-2e80-11e6-8545-d5d3642e411c","method":{"position":"org.apache.commons.io.input.SwappedDataInputStream:244","type":"CtMethodImpl","sourcecode":"public int skipBytes(int count) throws java.io.EOFException, java.io.IOException {\n    if (count > 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (count == (-1)) {\n                {\n                    return ((int)(java.io.InputStream.skip(count)));\n                }\n            } else {\n                throw new java.io.EOFException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstGT":"count"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:544","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"c5a5d625-2e80-11e6-8545-a1f8ae69d8cb","method":{"position":"org.apache.commons.io.FileUtils:1925","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data, java.nio.charset.Charset encoding, boolean append) throws java.io.IOException {\n    if (!(file.isDirectory())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.OutputStream java.io.OutputStream = null;\n            try {\n                out = org.apache.commons.io.FileUtils.openOutputStream(file, append);\n                org.apache.commons.io.IOUtils.write(data, out, encoding);\n                out.close();\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(out);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:449","type":"CtBinaryOperatorImpl","sourcecode":"filters == null"},"failures":[],"tindex":"c5a5d626-2e80-11e6-8545-e1cb6d74de00","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:435","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter... filters) {\n    if (filters == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.toList(filters));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filters":"filters"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2380","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"c5a5d627-2e80-11e6-8545-f1408464578f","method":{"position":"org.apache.commons.io.FileUtils:2185","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.lang.String encoding, java.util.Collection<?> lines, java.lang.String lineEnding) throws java.io.IOException {\n    if (!(file.isDirectory())) {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, encoding, lines, lineEnding, false);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.NullInputStream:259","type":"CtBinaryOperatorImpl","sourcecode":"(position) > ((mark) + (readlimit))"},"failures":[],"tindex":"c5a5d628-2e80-11e6-8545-9f8eb5719f86","method":{"position":"org.apache.commons.io.monitor.FileEntry:209","type":"CtMethodImpl","sourcecode":"public void setLastModified(long lastModified) {\n    if (lastModified > (lastModified + lastModified)) {\n        {\n            org.apache.commons.io.monitor.FileEntry.this.long = lastModified;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"readlimit":"lastModified","position":"lastModified","mark":"lastModified"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:741","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"c5a5fd39-2e80-11e6-8545-e7577fcc68e7","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:503","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FileFilter filter) {\n    if (filter == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.DelegateFileFilter(filter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:173","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[],"tindex":"c5a5fd3a-2e80-11e6-8545-1d9f21ea8ac8","method":{"position":"org.apache.commons.io.TaggedIOException:64","type":"CtMethodImpl","sourcecode":"public static boolean isTaggedWith(java.lang.Throwable throwable, java.lang.Object tag) {\n    if (tag != null) {\n        {\n            return ((tag != null) && (throwable instanceof org.apache.commons.io.TaggedIOException)) && (tag.equals(((org.apache.commons.io.TaggedIOException)(throwable)).java.io.Serializable));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"tag"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:925","type":"CtBinaryOperatorImpl","sourcecode":"end == 0"},"failures":[],"tindex":"c5a5fd3b-2e80-11e6-8545-cb4269d91d85","method":{"position":"org.apache.commons.io.EndianUtils:218","type":"CtMethodImpl","sourcecode":"public static long readSwappedLong(byte[] data, int offset) {\n    if (offset == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            long long = (((((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8)) + (((data[(offset + 2)]) & 255) << 16)) + (((data[(offset + 3)]) & 255) << 24);\n            long long = (((((data[(offset + 4)]) & 255) << 0) + (((data[(offset + 5)]) & 255) << 8)) + (((data[(offset + 6)]) & 255) << 16)) + (((data[(offset + 7)]) & 255) << 24);\n            return (high << 32) + (4294967295L & low);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"end":"offset"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.TeeInputStream:145","type":"CtBinaryOperatorImpl","sourcecode":"n != (-1)"},"failures":[],"tindex":"c5a5fd3c-2e80-11e6-8545-e1444fe2f472","method":{"position":"org.apache.commons.io.DirectoryWalker:350","type":"CtMethodImpl","sourcecode":"private void walk(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (depth != (-1)) {\n        {\n            checkIfCancelled(directory, depth, results);\n            if (handleDirectory(directory, depth, results)) {\n                handleDirectoryStart(directory, depth, results);\n                int int = depth + 1;\n                if (((int) < 0) || (childDepth <= (int))) {\n                    checkIfCancelled(directory, depth, results);\n                    java.io.File[] java.io.File[] = (java.io.FileFilter) == null ? directory.listFiles() : directory.listFiles(java.io.FileFilter);\n                    childFiles = filterDirectoryContents(directory, depth, childFiles);\n                    if (childFiles == null) {\n                        handleRestricted(directory, childDepth, results);\n                    } else {\n                        for (java.io.File java.io.File : childFiles) {\n                            if (childFile.isDirectory()) {\n                                walk(childFile, childDepth, results);\n                            } else {\n                                checkIfCancelled(childFile, childDepth, results);\n                                handleFile(childFile, childDepth, results);\n                                checkIfCancelled(childFile, childDepth, results);\n                            }\n                        }\n                    }\n                } \n                handleDirectoryEnd(directory, depth, results);\n            } \n            checkIfCancelled(directory, depth, results);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"depth"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl","sourcecode":"!(input1 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"c5a6244d-2e80-11e6-8545-21976932c66c","method":{"position":"org.apache.commons.io.IOUtils:1743","type":"CtMethodImpl","sourcecode":"public static int copy(java.io.InputStream input, java.io.OutputStream output) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            long long = org.apache.commons.io.IOUtils.copyLarge(input, output);\n            if (count > (java.lang.Integer.java.lang.Integer.int)) {\n                return -1;\n            } \n            return ((int)(count));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1659","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"c5a6244e-2e80-11e6-8545-c577815c6961","method":{"position":"org.apache.commons.io.input.ProxyInputStream:232","type":"CtMethodImpl","sourcecode":"protected void handleIOException(java.io.IOException e) throws java.io.IOException {\n    if (null != e) {\n        {\n            throw e;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"e"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:750","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"c5a6244f-2e80-11e6-8545-c5714cfdb868","method":{"position":"org.apache.commons.io.input.XmlStreamReader:678","type":"CtMethodImpl","sourcecode":"static java.lang.String getContentTypeEncoding(java.lang.String httpContentType) {\n    if (httpContentType == null) {\n        {\n            java.lang.String java.lang.String = null;\n            if (httpContentType != null) {\n                int int = httpContentType.indexOf(\";\");\n                if (i > (-1)) {\n                    java.lang.String java.lang.String = httpContentType.substring((i + 1));\n                    java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.util.regex.Pattern.matcher(postMime);\n                    encoding = m.find() ? m.group(1) : null;\n                    encoding = encoding != null ? encoding.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale) : null;\n                } \n            } \n            return encoding;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"httpContentType"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:111","type":"CtBinaryOperatorImpl","sourcecode":"(charset == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))"},"failures":[],"tindex":"c5a64b60-2e80-11e6-8545-4f0ae5f903ed","method":{"position":"org.apache.commons.io.Charsets:66","type":"CtMethodImpl","sourcecode":"public static java.nio.charset.Charset toCharset(java.nio.charset.Charset charset) {\n    if ((charset == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return charset == null ? java.nio.charset.Charset.defaultCharset() : charset;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"charset"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOCase:219","type":"CtBinaryOperatorImpl","sourcecode":"endIndex >= strStartIndex"},"failures":[],"tindex":"c5a64b61-2e80-11e6-8545-ff497b0f8ae1","method":{"position":"org.apache.commons.io.input.BoundedInputStream:116","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b, int off, int len) throws java.io.IOException {\n    if (off >= len) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (((long) >= 0) && ((long) >= (long))) {\n                return -1;\n            } \n            long long = (long) >= 0 ? java.lang.Math.min(len, ((long) - (long))) : len;\n            int int = java.io.InputStream.read(b, off, ((int)(maxRead)));\n            if (bytesRead == (-1)) {\n                return -1;\n            } \n            long += bytesRead;\n            return bytesRead;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"endIndex":"off","strStartIndex":"len"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.io.IOUtils.EOF) == count"},"failures":[],"tindex":"c5a64b62-2e80-11e6-8545-3d323b11c458","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:153","type":"CtMethodImpl","sourcecode":"protected void afterWrite(int n) throws java.io.IOException {\n    if (n == n) {\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"n","org.apache.commons.io.IOUtils.EOF":"n"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2448","type":"CtBinaryOperatorImpl","sourcecode":"length < 0"},"failures":[],"tindex":"c5a64b63-2e80-11e6-8545-773d6e6dcd1a","method":{"position":"org.apache.commons.io.input.BOMInputStream:331","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] buf, int off, int len) throws java.io.IOException {\n    if (len < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = 0;\n            int int = 0;\n            while ((len > 0) && (b >= 0)) {\n                b = readFirstBytes();\n                if (b >= 0) {\n                    buf[(off++)] = ((byte)(b & 255));\n                    len--;\n                    firstCount++;\n                } \n            }\n            int int = java.io.InputStream.read(buf, off, len);\n            return secondCount < 0 ? firstCount > 0 ? firstCount : -1 : firstCount + secondCount;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"len"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:72","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"c5a67274-2e80-11e6-8545-fd5651a5dc1d","method":{"position":"org.apache.commons.io.FileCleaningTracker:76","type":"CtMethodImpl","sourcecode":"public void track(java.io.File file, java.lang.Object marker) {\n    if (marker == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            track(file, marker, ((org.apache.commons.io.FileDeleteStrategy)(null)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"marker"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:130","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"c5a67275-2e80-11e6-8545-e14902f6624f","method":{"position":"org.apache.commons.io.filefilter.WildcardFilter:108","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if (dir.isDirectory()) {\n        {\n            if (dir == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((dir != null) && (new java.io.File(dir , name).isDirectory())) {\n                        return false;\n                    } \n                    for (java.lang.String java.lang.String : java.lang.String[]) {\n                        if (org.apache.commons.io.FilenameUtils.wildcardMatch(name, wildcard)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"dir"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1278","type":"CtBinaryOperatorImpl","sourcecode":"(filename == null) && (wildcardMatcher == null)"},"failures":[],"tindex":"c5a67276-2e80-11e6-8545-8b3569c0055a","method":{"position":"org.apache.commons.io.FilenameUtils:1233","type":"CtMethodImpl","sourcecode":"public static boolean wildcardMatch(java.lang.String filename, java.lang.String wildcardMatcher) {\n    if ((filename == null) && (wildcardMatcher == null)) {\n        {\n            if ((wildcardMatcher.length()) == 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.io.FilenameUtils.wildcardMatch(filename, wildcardMatcher, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename","wildcardMatcher":"wildcardMatcher"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullInputStream:126","type":"CtBinaryOperatorImpl","sourcecode":"avail <= 0"},"failures":[],"tindex":"c5a69987-2e80-11e6-8545-0dd35637801c","method":{"position":"org.apache.commons.io.IOUtils:2379","type":"CtMethodImpl","sourcecode":"public static void skipFully(java.io.Reader input, long toSkip) throws java.io.IOException {\n    if (toSkip <= 0) {\n        {\n            long long = org.apache.commons.io.IOUtils.skip(input, toSkip);\n            if (skipped != toSkip) {\n                throw new java.io.EOFException((((\"Chars to skip: \" + toSkip) + \" actual: \") + skipped));\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"avail":"toSkip"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:167","type":"CtBinaryOperatorImpl","sourcecode":"xmlPrologEnd > 0"},"failures":[],"tindex":"c5a69988-2e80-11e6-8545-fb299b10941a","method":{"position":"org.apache.commons.io.input.SwappedDataInputStream:244","type":"CtMethodImpl","sourcecode":"public int skipBytes(int count) throws java.io.EOFException, java.io.IOException {\n    if (count > 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (count == (-1)) {\n                {\n                    return ((int)(java.io.InputStream.skip(count)));\n                }\n            } else {\n                throw new java.io.EOFException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"xmlPrologEnd":"count"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.CompositeFileComparator:95","type":"CtBinaryOperatorImpl","sourcecode":"result != 0"},"failures":[],"tindex":"c5a69989-2e80-11e6-8545-b9323e2f98ae","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:52","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int idx) throws java.io.IOException {\n    if (idx != 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                beforeWrite(1);\n                java.io.OutputStream.write(idx);\n                afterWrite(1);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"idx"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2448","type":"CtBinaryOperatorImpl","sourcecode":"length < 0"},"failures":[],"tindex":"c5a6998a-2e80-11e6-8545-eb4287536122","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:288","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr, int st, int end) throws java.io.IOException {\n    if (end < 0) {\n        {\n            java.io.Writer.write(chr, st, end);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"end"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.CompositeFileComparator:113","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"c5a6c09b-2e80-11e6-8545-e1c5096fb9be","method":{"position":"org.apache.commons.io.input.ProxyReader:223","type":"CtMethodImpl","sourcecode":"protected void beforeRead(int n) throws java.io.IOException {\n    if (n > 0) {\n        {\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"n"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:537","type":"CtBinaryOperatorImpl","sourcecode":"(xmlGuessEnc != null) && (!(xmlGuessEnc.equals(bomEnc)))"},"failures":[],"tindex":"c5a6c09c-2e80-11e6-8545-5589db9faa10","method":{"position":"org.apache.commons.io.monitor.FileEntry:189","type":"CtMethodImpl","sourcecode":"public void setName(java.lang.String name) {\n    if ((name != null) && (!(xmlGuessEnc.equals(name)))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.monitor.FileEntry.this.java.lang.String = name;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"name","xmlGuessEnc":"name"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.StringBuilderWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"value != null"},"failures":[],"tindex":"c5a6c09d-2e80-11e6-8545-41346add765d","method":{"position":"org.apache.commons.io.IOUtils:1328","type":"CtMethodImpl","sourcecode":"public static void write(char[] data, java.io.Writer output) throws java.io.IOException {\n    if (data != null) {\n        {\n            if (data != null) {\n                output.write(data);\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:239","type":"CtBinaryOperatorImpl","sourcecode":"((file != null) && (file.isFile())) && (file.canRead())"},"failures":[],"tindex":"c5a6c09e-2e80-11e6-8545-df760d90a937","method":{"position":"org.apache.commons.io.filefilter.DelegateFileFilter:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (((file != null) && (file.isFile())) && (file.canRead())) {\n        {\n            if ((java.io.FileFilter) != null) {\n                return java.io.FileFilter.accept(file);\n            } else {\n                return super.accept(file);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:544","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"c5a6e7af-2e80-11e6-8545-8772c3b68b36","method":{"position":"org.apache.commons.io.FileUtils:1229","type":"CtMethodImpl","sourcecode":"public static void copyDirectory(java.io.File srcDir, java.io.File destDir) throws java.io.IOException {\n    if (!(srcDir.isDirectory())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"srcDir"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:741","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"c5a6e7b0-2e80-11e6-8545-0bd19beb203f","method":{"position":"org.apache.commons.io.filefilter.AndFileFilter:101","type":"CtMethodImpl","sourcecode":"public boolean removeFileFilter(final org.apache.commons.io.filefilter.IOFileFilter ioFileFilter) {\n    if (ioFileFilter == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.remove(ioFileFilter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"ioFileFilter"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:380","type":"CtBinaryOperatorImpl","sourcecode":"(path.length()) == 0"},"failures":[],"tindex":"c5a6e7b1-2e80-11e6-8545-7702c6023ebc","method":{"position":"org.apache.commons.io.FileSystemUtils:141","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static long freeSpace(java.lang.String path) throws java.io.IOException {\n    if ((path.length()) == 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.freeSpaceOS(path, org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int, false, (-1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:601","type":"CtBinaryOperatorImpl","sourcecode":"cTEnc == null"},"failures":[],"tindex":"c5a70ec2-2e80-11e6-8545-01a4ca98ac73","method":{"position":"org.apache.commons.io.FilenameUtils:864","type":"CtMethodImpl","sourcecode":"public static java.lang.String getFullPath(java.lang.String filename) {\n    if (filename == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.doGetFullPath(filename, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cTEnc":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2286","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.io.IOUtils.SKIP_BYTE_BUFFER) == null"},"failures":[],"tindex":"c5a70ec3-2e80-11e6-8545-1560c1020dfb","method":{"position":"org.apache.commons.io.input.BoundedInputStream:102","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.input.BoundedInputStream.this.read(b, 0, b.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.IOUtils.SKIP_BYTE_BUFFER":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2068","type":"CtBinaryOperatorImpl","sourcecode":"length > 0"},"failures":[],"tindex":"c5a70ec4-2e80-11e6-8545-eb8200e04f1b","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:636","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter sizeRangeFileFilter(long minSizeInclusive, long maxSizeInclusive) {\n    if (maxSizeInclusive > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = new org.apache.commons.io.filefilter.SizeFileFilter(minSizeInclusive , true);\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = new org.apache.commons.io.filefilter.SizeFileFilter((maxSizeInclusive + 1L) , false);\n            return new org.apache.commons.io.filefilter.AndFileFilter(minimumFilter , maximumFilter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"maxSizeInclusive"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:483","type":"CtBinaryOperatorImpl","sourcecode":"prefix < 0"},"failures":[],"tindex":"c5a70ec5-2e80-11e6-8545-3db019804c20","method":{"position":"org.apache.commons.io.DirectoryWalker:434","type":"CtMethodImpl","sourcecode":"protected boolean handleIsCancelled(java.io.File file, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (depth < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"depth"},"type":"special","returnInThen":false,"status":0}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
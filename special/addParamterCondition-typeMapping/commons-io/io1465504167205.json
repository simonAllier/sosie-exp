{"failureDictionary":{},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:270","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"dc8f2914-2e80-11e6-9dd3-f398410f1cc8","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:789","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if (filter == null) {\n        {\n            if (filter == null) {\n                return org.apache.commons.io.filefilter.FileFileFilter.org.apache.commons.io.filefilter.FileFileFilter.org.apache.commons.io.filefilter.IOFileFilter;\n            } \n            return new org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.FileFileFilter.org.apache.commons.io.filefilter.FileFileFilter.org.apache.commons.io.filefilter.IOFileFilter , filter);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NotFileFilter:41","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"dc8fec65-2e80-11e6-9dd3-df1d9bccb310","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:242","type":"CtMethodImpl","sourcecode":"public static java.util.Set<java.io.File> filterSet(org.apache.commons.io.filefilter.IOFileFilter filter, java.lang.Iterable<java.io.File> files) {\n    if (filter == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files, new java.util.HashSet<java.io.File>());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:206","type":"CtBinaryOperatorImpl","sourcecode":"magicNumber == null"},"failures":[],"tindex":"dc8fec66-2e80-11e6-9dd3-2b9fe2824fc9","method":{"position":"org.apache.commons.io.IOUtils:2475","type":"CtMethodImpl","sourcecode":"public static int read(java.io.InputStream input, byte[] buffer) throws java.io.IOException {\n    if (buffer == null) {\n        {\n            return org.apache.commons.io.IOUtils.read(input, buffer, 0, buffer.int);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"magicNumber":"buffer"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.Tailer:349","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"dc901377-2e80-11e6-9dd3-a7a9f92bf49b","method":{"position":"org.apache.commons.io.input.Tailer:448","type":"CtMethodImpl","sourcecode":"private long readLines(java.io.RandomAccessFile reader) throws java.io.IOException {\n    if (reader == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            long long = reader.getFilePointer();\n            long long = pos;\n            int int;\n            boolean boolean = false;\n            while ((boolean) && ((num = reader.read(byte[])) != (-1))) {\n                for (int int = 0 ; i < num ; i++) {\n                    byte byte = byte[][i];\n                    switch (ch) {\n                        case '\\n' :\n                            seenCR = false;\n                            org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                            sb.setLength(0);\n                            rePos = (pos + i) + 1;\n                            break;\n                        case '\\r' :\n                            if (seenCR) {\n                                sb.append('\\r');\n                            } \n                            seenCR = true;\n                            break;\n                        default :\n                            if (seenCR) {\n                                seenCR = false;\n                                org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                                sb.setLength(0);\n                                rePos = (pos + i) + 1;\n                            } \n                            sb.append(((char)(ch)));\n                    }\n                }\n                pos = reader.getFilePointer();\n            }\n            reader.seek(rePos);\n            return rePos;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"reader"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:211","type":"CtBinaryOperatorImpl","sourcecode":"(memoryOutputStream) != null"},"failures":[],"tindex":"dc903a88-2e80-11e6-9dd3-9faa95da5dab","method":{"position":"org.apache.commons.io.IOUtils:300","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.Closeable closeable) {\n    if (closeable != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                if (closeable != null) {\n                    closeable.close();\n                } \n            } catch (java.io.IOException ioe) {\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"memoryOutputStream":"closeable"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2056","type":"CtBinaryOperatorImpl","sourcecode":"length == 0"},"failures":[],"tindex":"dc906199-2e80-11e6-9dd3-4fa2b1e7ac68","method":{"position":"org.apache.commons.io.input.CharSequenceReader:139","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long n) {\n    if (n == 0) {\n        {\n            if (n < 0) {\n                throw new java.lang.IllegalArgumentException((\"Number of characters to skip is less than zero: \" + n));\n            } \n            if ((int) >= (java.lang.CharSequence.length())) {\n                return -1;\n            } \n            int int = ((int)(java.lang.Math.min(java.lang.CharSequence.length(), ((int) + n))));\n            int int = dest - (int);\n            int = dest;\n            return count;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"n"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:634","type":"CtBinaryOperatorImpl","sourcecode":"len == 1"},"failures":[],"tindex":"dc90619a-2e80-11e6-9dd3-11df7214f097","method":{"position":"org.apache.commons.io.EndianUtils:65","type":"CtMethodImpl","sourcecode":"public static int swapInteger(int value) {\n    if (value == 1) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (((((value >> 0) & 255) << 24) + (((value >> 8) & 255) << 16)) + (((value >> 16) & 255) << 8)) + (((value >> 24) & 255) << 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2858","type":"CtBinaryOperatorImpl","sourcecode":"destDir == null"},"failures":[],"tindex":"dc9088ab-2e80-11e6-9dd3-43e0f9554e7a","method":{"position":"org.apache.commons.io.filefilter.WildcardFileFilter:151","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if (dir == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.FilenameUtils.wildcardMatch(name, wildcard, org.apache.commons.io.IOCase)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"dir"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:239","type":"CtBinaryOperatorImpl","sourcecode":"((file != null) && (file.isFile())) && (file.canRead())"},"failures":[],"tindex":"dc9088ac-2e80-11e6-9dd3-e9402a6fc832","method":{"position":"org.apache.commons.io.FileUtils:2091","type":"CtMethodImpl","sourcecode":"public static void writeByteArrayToFile(java.io.File file, byte[] data, boolean append) throws java.io.IOException {\n    if (!(file.isDirectory())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (((file != null) && (file.isFile())) && (file.canRead())) {\n                {\n                    java.io.OutputStream java.io.OutputStream = null;\n                    try {\n                        out = org.apache.commons.io.FileUtils.openOutputStream(file, append);\n                        out.write(data);\n                        out.close();\n                    } finally {\n                        org.apache.commons.io.IOUtils.closeQuietly(out);\n                    }\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"dc90afbd-2e80-11e6-9dd3-6b78985329ad","method":{"position":"org.apache.commons.io.IOUtils:758","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toString(input, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:386","type":"CtVariableReadImpl","sourcecode":"kb"},"failures":[],"tindex":"dc90d6ce-2e80-11e6-9dd3-9783d674cf6b","method":{"position":"org.apache.commons.io.FileUtils:2854","type":"CtMethodImpl","sourcecode":"public static void moveFileToDirectory(java.io.File srcFile, java.io.File destDir, boolean createDestDir) throws java.io.IOException {\n    if (createDestDir) {\n        {\n            if (srcFile == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination directory must not be null\");\n            } \n            if ((!(destDir.exists())) && createDestDir) {\n                destDir.mkdirs();\n            } \n            if (!(destDir.exists())) {\n                throw new java.io.FileNotFoundException(((((\"Destination directory '\" + destDir) + \"' does not exist [createDestDir=\") + createDestDir) + \"]\"));\n            } \n            if (!(destDir.isDirectory())) {\n                throw new java.io.IOException(((\"Destination '\" + destDir) + \"' is not a directory\"));\n            } \n            org.apache.commons.io.FileUtils.moveFile(srcFile, new java.io.File(destDir , srcFile.getName()));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"kb":"createDestDir"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BoundedInputStream:150","type":"CtBinaryOperatorImpl","sourcecode":"((max) >= 0) && ((pos) >= (max))"},"failures":[],"tindex":"dc90fddf-2e80-11e6-9dd3-c95efe45fbd6","method":{"position":"org.apache.commons.io.input.BoundedInputStream:138","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long n) throws java.io.IOException {\n    if ((n >= 0) && (n >= (long))) {\n        {\n            long long = (long) >= 0 ? java.lang.Math.min(n, ((long) - (long))) : n;\n            long long = java.io.InputStream.skip(toSkip);\n            long += skippedBytes;\n            return skippedBytes;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"max":"n","pos":"n"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2747","type":"CtInvocationImpl","sourcecode":"destDir.exists()"},"failures":[],"tindex":"dc90fde0-2e80-11e6-9dd3-03913f099cbb","method":{"position":"org.apache.commons.io.FileUtils:191","type":"CtMethodImpl","sourcecode":"public static java.io.File getFile(java.io.File directory, java.lang.String... names) {\n    if (directory.exists()) {\n        {\n            if (directory == null) {\n                throw new java.lang.NullPointerException(\"directorydirectory must not be null\");\n            } \n            if (names == null) {\n                throw new java.lang.NullPointerException(\"names must not be null\");\n            } \n            java.io.File java.io.File = directory;\n            for (java.lang.String java.lang.String : names) {\n                file = new java.io.File(file , name);\n            }\n            return file;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:550","type":"CtBinaryOperatorImpl","sourcecode":"(xmlGuessEnc != null) && (!(xmlGuessEnc.equals(bomEnc)))"},"failures":[],"tindex":"dc9124f1-2e80-11e6-9dd3-9beee5198055","method":{"position":"org.apache.commons.io.IOUtils:916","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URL url, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding == null) || (encoding == null)) {\n        {\n            if ((encoding != null) && (!(xmlGuessEnc.equals(encoding)))) {\n                {\n                    return org.apache.commons.io.IOUtils.toString(url, org.apache.commons.io.Charsets.toCharset(encoding));\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"encoding","xmlGuessEnc":"encoding"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.StringBuilderWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"value != null"},"failures":[],"tindex":"dc9124f2-2e80-11e6-9dd3-0185094f6562","method":{"position":"org.apache.commons.io.output.LockableFileWriter:327","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr) throws java.io.IOException {\n    if (chr != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.Writer.write(chr);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"chr"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:486","type":"CtBinaryOperatorImpl","sourcecode":"prefix > 0"},"failures":[],"tindex":"dc914c03-2e80-11e6-9dd3-13dca204944e","method":{"position":"org.apache.commons.io.input.NullInputStream:226","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] bytes, int offset, int length) throws java.io.IOException {\n    if (length > 0) {\n        {\n            if (boolean) {\n                throw new java.io.IOException(\"Read after end of file\");\n            } \n            if ((long) == (long)) {\n                return doEndOfFile();\n            } \n            long += length;\n            int int = length;\n            if ((long) > (long)) {\n                returnLength = length - ((int)(((long) - (long))));\n                long = long;\n            } \n            processBytes(bytes, offset, returnLength);\n            return returnLength;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"length"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1617","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"dc917314-2e80-11e6-9dd3-79cb15951072","method":{"position":"org.apache.commons.io.FileCleaner:57","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void track(java.io.File file, java.lang.Object marker) {\n    if (marker != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaningTracker.track(file, marker);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"marker"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:190","type":"CtBinaryOperatorImpl","sourcecode":"(encoding) != null"},"failures":[],"tindex":"dc917315-2e80-11e6-9dd3-973506edef71","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:678","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String magicNumber, long offset) {\n    if (magicNumber != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.MagicNumberFileFilter(magicNumber , offset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"magicNumber"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"dc919a26-2e80-11e6-9dd3-89301c988e34","method":{"position":"org.apache.commons.io.IOUtils:460","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.output.ByteArrayOutputStream org.apache.commons.io.output.ByteArrayOutputStream = new org.apache.commons.io.output.ByteArrayOutputStream();\n            org.apache.commons.io.IOUtils.copy(input, output);\n            return output.toByteArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:333","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isDigit(c)"},"failures":[],"tindex":"dc919a27-2e80-11e6-9dd3-f11988a9d822","method":{"position":"org.apache.commons.io.output.NullWriter:49","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(char c) {\n    if (java.lang.Character.isDigit(c)) {\n        {\n            return org.apache.commons.io.output.NullWriter.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2368","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"dc91c138-2e80-11e6-9dd3-435ab2185061","method":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:167","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file, java.lang.String name) {\n    if (!(file.isDirectory())) {\n        {\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkStartsWith(name, prefix)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2554","type":"CtBinaryOperatorImpl","sourcecode":"reference == null"},"failures":[],"tindex":"dc91c139-2e80-11e6-9dd3-439b75ae80ef","method":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:238","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((file != null) && (file.isFile())) && (file.canRead())) {\n                java.io.RandomAccessFile java.io.RandomAccessFile = null;\n                try {\n                    byte[] byte[] = new byte[org.apache.commons.io.filefilter.MagicNumberFileFilter.this.byte[].int];\n                    randomAccessFile = new java.io.RandomAccessFile(file , \"r\");\n                    randomAccessFile.seek(long);\n                    int int = randomAccessFile.read(fileBytes);\n                    if (read != (byte[].int)) {\n                        return false;\n                    } \n                    return java.util.Arrays.equals(org.apache.commons.io.filefilter.MagicNumberFileFilter.this.byte[], fileBytes);\n                } catch (java.io.IOException ioe) {\n                } finally {\n                    org.apache.commons.io.IOUtils.closeQuietly(randomAccessFile);\n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reference":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:73","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"dc91e84a-2e80-11e6-9dd3-3de2a2c83722","method":{"position":"org.apache.commons.io.FileUtils:1780","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.File file, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (file.isDirectory()) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = org.apache.commons.io.FileUtils.openInputStream(file);\n                return org.apache.commons.io.IOUtils.readLines(in, org.apache.commons.io.Charsets.toCharset(encoding));\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2557","type":"CtUnaryOperatorImpl","sourcecode":"!(reference.exists())"},"failures":[],"tindex":"dc920f5b-2e80-11e6-9dd3-41f9ba51905f","method":{"position":"org.apache.commons.io.FileUtils:2502","type":"CtMethodImpl","sourcecode":"public static java.math.BigInteger sizeOfDirectoryAsBigInteger(java.io.File directory) {\n    if (!(directory.exists())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.checkDirectory(directory);\n            final java.io.File[] java.io.File[] = directory.listFiles();\n            if (files == null) {\n                return java.math.BigInteger.java.math.BigInteger.java.math.BigInteger;\n            } \n            java.math.BigInteger java.math.BigInteger = java.math.BigInteger.java.math.BigInteger.java.math.BigInteger;\n            for (final java.io.File java.io.File : files) {\n                try {\n                    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n                        size = size.add(java.math.BigInteger.valueOf(org.apache.commons.io.FileUtils.sizeOf(file)));\n                    } \n                } catch (java.io.IOException ioe) {\n                }\n            }\n            return size;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reference":"directory"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReaderInputStream:223","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"dc92ab9c-2e80-11e6-9dd3-c9ad0ec2aa52","method":{"position":"org.apache.commons.io.output.NullOutputStream:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2815","type":"CtBinaryOperatorImpl","sourcecode":"destFile == null"},"failures":[],"tindex":"dc92d2ad-2e80-11e6-9dd3-1b6d945c5fd7","method":{"position":"org.apache.commons.io.FileUtils:1602","type":"CtMethodImpl","sourcecode":"public static boolean directoryContains(final java.io.File directory, final java.io.File child) throws java.io.IOException {\n    if (directory == null) {\n        {\n            if (directory == null) {\n                throw new java.lang.IllegalArgumentException(\"Directory must not be null\");\n            } \n            if (!(directory.isDirectory())) {\n                throw new java.lang.IllegalArgumentException((\"Not a directory: \" + directory));\n            } \n            if (child == null) {\n                return false;\n            } \n            if ((!(directory.exists())) || (!(child.exists()))) {\n                return false;\n            } \n            java.lang.String java.lang.String = directory.getCanonicalPath();\n            java.lang.String java.lang.String = child.getCanonicalPath();\n            return org.apache.commons.io.FilenameUtils.directoryContains(canonicalParent, canonicalChild);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:924","type":"CtBinaryOperatorImpl","sourcecode":"(url.getProtocol().equals(\"file\")) == false"},"failures":[],"tindex":"dc92d2ae-2e80-11e6-9dd3-f5372ddf55b0","method":{"position":"org.apache.commons.io.IOUtils:878","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URL url) throws java.io.IOException {\n    if ((url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((url.getProtocol().equals(\"file\")) == false) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.io.IOUtils.toString(url, java.nio.charset.Charset.defaultCharset());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"url":"url"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:554","type":"CtBinaryOperatorImpl","sourcecode":"((xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32)))) && (!(xmlEnc.equals(bomEnc)))"},"failures":[],"tindex":"dc92d2af-2e80-11e6-9dd3-65dd2d5643ff","method":{"position":"org.apache.commons.io.FilenameUtils:688","type":"CtMethodImpl","sourcecode":"public static int indexOfLastSeparator(java.lang.String filename) {\n    if (((filename != null) && (!(xmlEnc.equals(filename)))) && (!(xmlEnc.equals(filename)))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                return -1;\n            } \n            int int = filename.lastIndexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n            int int = filename.lastIndexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n            return java.lang.Math.max(lastUnixPos, lastWindowsPos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"filename","xmlEnc":"filename","org.apache.commons.io.input.XmlStreamReader.UTF_32":"filename"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:601","type":"CtBinaryOperatorImpl","sourcecode":"cTEnc == null"},"failures":[],"tindex":"dc92f9c0-2e80-11e6-9dd3-d1be9a7a73eb","method":{"position":"org.apache.commons.io.FileUtils:1950","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data, java.lang.String encoding, boolean append) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeStringToFile(file, data, org.apache.commons.io.Charsets.toCharset(encoding), append);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cTEnc":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.Tailer:412","type":"CtFieldReadImpl","sourcecode":"reOpen"},"failures":[],"tindex":"dc92f9c1-2e80-11e6-9dd3-97710f2dc9c6","method":{"position":"org.apache.commons.io.monitor.FileEntry:247","type":"CtMethodImpl","sourcecode":"public void setExists(boolean exists) {\n    if (exists) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (exists) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.io.monitor.FileEntry.this.boolean = exists;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reOpen":"exists"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullReader:239","type":"CtBinaryOperatorImpl","sourcecode":"(mark) < 0"},"failures":[],"tindex":"dc9320d2-2e80-11e6-9dd3-1b1885634e99","method":{"position":"org.apache.commons.io.IOUtils:2354","type":"CtMethodImpl","sourcecode":"public static void skipFully(java.io.InputStream input, long toSkip) throws java.io.IOException {\n    if (toSkip < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (toSkip < 0) {\n                throw new java.lang.IllegalArgumentException((\"Bytes to skip must not be negative: \" + toSkip));\n            } \n            long long = org.apache.commons.io.IOUtils.skip(input, toSkip);\n            if (skipped != toSkip) {\n                throw new java.io.EOFException((((\"Bytes to skip: \" + toSkip) + \" actual: \") + skipped));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mark":"toSkip"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2827","type":"CtInvocationImpl","sourcecode":"destFile.isDirectory()"},"failures":[],"tindex":"dc9320d3-2e80-11e6-9dd3-6f4960856c54","method":{"position":"org.apache.commons.io.FileUtils:1634","type":"CtMethodImpl","sourcecode":"public static void cleanDirectory(java.io.File directory) throws java.io.IOException {\n    if (directory.isDirectory()) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(directory.exists())) {\n                java.lang.String java.lang.String = directory + \" does not exist\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            if (!(directory.isDirectory())) {\n                java.lang.String java.lang.String = directory + \" is not a directory\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            java.io.File[] java.io.File[] = directory.listFiles();\n            if (files == null) {\n                throw new java.io.IOException((\"Failed to list contents of \" + directory));\n            } \n            java.io.IOException java.io.IOException = null;\n            for (java.io.File java.io.File : files) {\n                try {\n                    org.apache.commons.io.FileUtils.forceDelete(file);\n                } catch (java.io.IOException ioe) {\n                    exception = ioe;\n                }\n            }\n            if (null != exception) {\n                throw exception;\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"directory"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2815","type":"CtBinaryOperatorImpl","sourcecode":"destFile == null"},"failures":[],"tindex":"dc9320d4-2e80-11e6-9dd3-011e42f3955f","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:357","type":"CtMethodImpl","sourcecode":"private org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry parent, java.io.File file) {\n    if (file == null) {\n        {\n            org.apache.commons.io.monitor.FileEntry org.apache.commons.io.monitor.FileEntry = parent.newChildInstance(file);\n            entry.refresh(file);\n            java.io.File[] java.io.File[] = listFiles(file);\n            org.apache.commons.io.monitor.FileEntry[] org.apache.commons.io.monitor.FileEntry[] = (files.int) > 0 ? new org.apache.commons.io.monitor.FileEntry[files.int] : org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry[];\n            for (int int = 0 ; i < (files.int) ; i++) {\n                children[i] = createFileEntry(entry, files[i]);\n            }\n            entry.setChildren(children);\n            return entry;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1659","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"dc9347e5-2e80-11e6-9dd3-e3ec261761af","method":{"position":"org.apache.commons.io.input.TaggedInputStream:101","type":"CtMethodImpl","sourcecode":"public void throwIfCauseOf(java.lang.Throwable throwable) throws java.io.IOException {\n    if (null != throwable) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(throwable, java.io.Serializable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"throwable"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:653","type":"CtBinaryOperatorImpl","sourcecode":"(ch0 >= 'A') && (ch0 <= 'Z')"},"failures":[],"tindex":"dc9347e6-2e80-11e6-9dd3-a3bc9e7f0862","method":{"position":"org.apache.commons.io.output.ProxyWriter:53","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(char c) throws java.io.IOException {\n    if ((c >= 'A') && (ch0 <= 'Z')) {\n        {\n            try {\n                beforeWrite(1);\n                java.io.Writer.append(c);\n                afterWrite(1);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n            return org.apache.commons.io.output.ProxyWriter.this;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch0":"c"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:303","type":"CtInvocationImpl","sourcecode":"rootFile.exists()"},"failures":[],"tindex":"dc936ef7-2e80-11e6-9dd3-b96b95827a13","method":{"position":"org.apache.commons.io.filefilter.NotFileFilter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.exists()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return !(org.apache.commons.io.filefilter.IOFileFilter.accept(file));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rootFile":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:408","type":"CtBinaryOperatorImpl","sourcecode":"i == (size - 1)"},"failures":[],"tindex":"dc936ef8-2e80-11e6-9dd3-ef37c355b7f6","method":{"position":"org.apache.commons.io.EndianUtils:328","type":"CtMethodImpl","sourcecode":"public static void writeSwappedInteger(java.io.OutputStream output, int value) throws java.io.IOException {\n    if (value == (value - 1)) {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n            output.write(((byte)((value >> 16) & 255)));\n            output.write(((byte)((value >> 24) & 255)));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"value","i":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.EOFException","condition":{"position":"org.apache.commons.io.FilenameUtils:431","type":"CtBinaryOperatorImpl","sourcecode":"size <= prefix"},"failures":[],"tindex":"dc936ef9-2e80-11e6-9dd3-93b3b272e7f9","method":{"position":"org.apache.commons.io.input.SwappedDataInputStream:244","type":"CtMethodImpl","sourcecode":"public int skipBytes(int count) throws java.io.EOFException, java.io.IOException {\n    if (count <= count) {\n        throw new java.io.EOFException();\n    } else {\n        {\n            return ((int)(java.io.InputStream.skip(count)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"count","prefix":"count"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2791","type":"CtUnaryOperatorImpl","sourcecode":"!(destDir.isDirectory())"},"failures":[],"tindex":"dc936efa-2e80-11e6-9dd3-4faa27c2c0d8","method":{"position":"org.apache.commons.io.FileUtils:2091","type":"CtMethodImpl","sourcecode":"public static void writeByteArrayToFile(java.io.File file, byte[] data, boolean append) throws java.io.IOException {\n    if (!(file.isDirectory())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (((file != null) && (file.isFile())) && (file.canRead())) {\n                {\n                    java.io.OutputStream java.io.OutputStream = null;\n                    try {\n                        out = org.apache.commons.io.FileUtils.openOutputStream(file, append);\n                        out.write(data);\n                        out.close();\n                    } finally {\n                        org.apache.commons.io.IOUtils.closeQuietly(out);\n                    }\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:758","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"dc93960b-2e80-11e6-9dd3-3726e6220d68","method":{"position":"org.apache.commons.io.filefilter.AndFileFilter:101","type":"CtMethodImpl","sourcecode":"public boolean removeFileFilter(final org.apache.commons.io.filefilter.IOFileFilter ioFileFilter) {\n    if (ioFileFilter == null) {\n        {\n            return org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.remove(ioFileFilter);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"ioFileFilter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1009","type":"CtBinaryOperatorImpl","sourcecode":"(destDir.exists()) && ((destDir.isDirectory()) == false)"},"failures":[],"tindex":"dc93bd1c-2e80-11e6-9dd3-39aee787d68a","method":{"position":"org.apache.commons.io.filefilter.AndFileFilter:117","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(final java.io.File file) {\n    if ((file.exists()) && ((destDir.isDirectory()) == false)) {\n        {\n            if (org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.isEmpty()) {\n                return false;\n            } \n            for (org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter : java.util.List<org.apache.commons.io.filefilter.IOFileFilter>) {\n                if (!(fileFilter.accept(file))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:531","type":"CtBinaryOperatorImpl","sourcecode":"canonicalParent == null"},"failures":[],"tindex":"dc93bd1d-2e80-11e6-9dd3-b736ca826c91","method":{"position":"org.apache.commons.io.FilenameUtils:1112","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.String filename1, java.lang.String filename2, boolean normalized, org.apache.commons.io.IOCase caseSensitivity) {\n    if (filename2 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((filename1 == null) || (filename2 == null)) {\n                return (filename1 == null) && (filename2 == null);\n            } \n            if (normalized) {\n                filename1 = org.apache.commons.io.FilenameUtils.normalize(filename1);\n                filename2 = org.apache.commons.io.FilenameUtils.normalize(filename2);\n                if ((filename1 == null) || (filename2 == null)) {\n                    throw new java.lang.NullPointerException(\"Error normalizing one or both of the file names\");\n                } \n            } \n            if (caseSensitivity == null) {\n                caseSensitivity = org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase;\n            } \n            return caseSensitivity.checkEquals(filename1, filename2);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"canonicalParent":"filename2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:351","type":"CtBinaryOperatorImpl","sourcecode":"j < 0"},"failures":[],"tindex":"dc93bd1e-2e80-11e6-9dd3-45ef06a40b45","method":{"position":"org.apache.commons.io.EndianUtils:261","type":"CtMethodImpl","sourcecode":"public static void writeSwappedDouble(byte[] data, int offset, double value) {\n    if (offset < 0) {\n        {\n            org.apache.commons.io.EndianUtils.writeSwappedLong(data, offset, java.lang.Double.doubleToLongBits(value));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"j":"offset"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:680","type":"CtBinaryOperatorImpl","sourcecode":"httpContentType != null"},"failures":[],"tindex":"dc93e42f-2e80-11e6-9dd3-af770ab3330c","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:298","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str) throws java.io.IOException {\n    if (str != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.Writer.write(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2864","type":"CtUnaryOperatorImpl","sourcecode":"!(destDir.exists())"},"failures":[],"tindex":"dc93e430-2e80-11e6-9dd3-cddbd4bad05d","method":{"position":"org.apache.commons.io.comparator.LastModifiedFileComparator:67","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (!(file1.exists())) {\n        {\n            long long = (file1.lastModified()) - (file2.lastModified());\n            if (result < 0) {\n                return -1;\n            } else if (result > 0) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:680","type":"CtBinaryOperatorImpl","sourcecode":"httpContentType != null"},"failures":[],"tindex":"dc93e431-2e80-11e6-9dd3-579eb0c6e580","method":{"position":"org.apache.commons.io.FilenameUtils:973","type":"CtMethodImpl","sourcecode":"public static java.lang.String getBaseName(java.lang.String filename) {\n    if (filename != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.removeExtension(org.apache.commons.io.FilenameUtils.getName(filename));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.HexDump:81","type":"CtBinaryOperatorImpl","sourcecode":"stream == null"},"failures":[],"tindex":"dc940b42-2e80-11e6-9dd3-8f4546c42125","method":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:259","type":"CtMethodImpl","sourcecode":"public void writeTo(java.io.OutputStream out) throws java.io.IOException {\n    if (out == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean)) {\n                throw new java.io.IOException(\"Stream not closed\");\n            } \n            if (isInMemory()) {\n                org.apache.commons.io.output.ByteArrayOutputStream.writeTo(out);\n            } else {\n                java.io.FileInputStream java.io.FileInputStream = new java.io.FileInputStream(java.io.File);\n                try {\n                    org.apache.commons.io.IOUtils.copy(fis, out);\n                } finally {\n                    org.apache.commons.io.IOUtils.closeQuietly(fis);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stream":"out"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:382","type":"CtFieldReadImpl","sourcecode":"markedAtStart"},"failures":[],"tindex":"dc940b43-2e80-11e6-9dd3-1770b0dd6012","method":{"position":"org.apache.commons.io.monitor.FileEntry:247","type":"CtMethodImpl","sourcecode":"public void setExists(boolean exists) {\n    if (exists) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (exists) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.io.monitor.FileEntry.this.boolean = exists;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"markedAtStart":"exists"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:152","type":"CtBinaryOperatorImpl","sourcecode":"remaining > 0"},"failures":[],"tindex":"dc940b44-2e80-11e6-9dd3-8bc22ddf3e34","method":{"position":"org.apache.commons.io.input.ProxyInputStream:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void mark(int readlimit) {\n    if (readlimit > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.InputStream.mark(readlimit);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"remaining":"readlimit"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:57","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"dc943255-2e80-11e6-9dd3-79d0949e3029","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:96","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence value, int start, int end) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder.append(value, start, end);\n            return org.apache.commons.io.output.StringBuilderWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:72","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"dc943256-2e80-11e6-9dd3-752b1f935144","method":{"position":"org.apache.commons.io.IOUtils:1690","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.util.Collection<?> lines, java.lang.String lineEnding, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.writeLines(lines, lineEnding, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"encoding"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOCase:84","type":"CtInvocationImpl","sourcecode":"org.apache.commons.io.IOCase.INSENSITIVE.name.equals(name)"},"failures":[],"tindex":"dc943257-2e80-11e6-9dd3-039c8a223e60","method":{"position":"org.apache.commons.io.FileCleaningTracker:134","type":"CtMethodImpl","sourcecode":"private synchronized void addTracker(java.lang.String path, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if (marker.java.lang.String.equals(path)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (boolean) {\n                throw new java.lang.IllegalStateException(\"No new trackers can be added once exitWhenFinished() is called\");\n            } \n            if ((java.lang.Thread) == null) {\n                java.lang.Thread = new org.apache.commons.io.FileCleaningTracker.Reaper();\n                java.lang.Thread.start();\n            } \n            java.util.Collection<org.apache.commons.io.FileCleaningTracker.Tracker>.add(new org.apache.commons.io.FileCleaningTracker.Tracker(path , deleteStrategy , marker , java.lang.ref.ReferenceQueue<java.lang.Object>));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.IOCase.INSENSITIVE":"marker","name":"path"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"dc945968-2e80-11e6-9dd3-bb0806fd8d94","method":{"position":"org.apache.commons.io.input.ProxyInputStream:232","type":"CtMethodImpl","sourcecode":"protected void handleIOException(java.io.IOException e) throws java.io.IOException {\n    if (null != e) {\n        {\n            throw e;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"e"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:549","type":"CtBinaryOperatorImpl","sourcecode":"(bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32BE)) || (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32LE))"},"failures":[],"tindex":"dc948079-2e80-11e6-9dd3-ebb41d71b96a","method":{"position":"org.apache.commons.io.FilenameUtils:553","type":"CtMethodImpl","sourcecode":"public static java.lang.String separatorsToUnix(java.lang.String path) {\n    if ((path.equals(path)) || (bomEnc.equals(path))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((path == null) || ((path.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char)) == (-1))) {\n                return path;\n            } \n            return path.replace(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"path","org.apache.commons.io.input.XmlStreamReader.UTF_32BE":"path","org.apache.commons.io.input.XmlStreamReader.UTF_32LE":"path"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:71","type":"CtBinaryOperatorImpl","sourcecode":"reader instanceof java.io.BufferedReader"},"failures":[],"tindex":"dc94807a-2e80-11e6-9dd3-a72a80980b97","method":{"position":"org.apache.commons.io.IOUtils:192","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.Reader input) {\n    if (input instanceof java.io.BufferedReader) {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(input)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileCleaningTracker:91","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"dc94a78b-2e80-11e6-9dd3-17f419be2286","method":{"position":"org.apache.commons.io.FileUtils:2920","type":"CtMethodImpl","sourcecode":"public static boolean isSymlink(java.io.File file) throws java.io.IOException {\n    if (file == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File must not be null\");\n            } \n            if (org.apache.commons.io.FilenameUtils.isSystemWindows()) {\n                return false;\n            } \n            java.io.File java.io.File = null;\n            if ((file.getParent()) == null) {\n                fileInCanonicalDir = file;\n            } else {\n                java.io.File java.io.File = file.getParentFile().getCanonicalFile();\n                fileInCanonicalDir = new java.io.File(canonicalDir , file.getName());\n            }\n            if (fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:103","type":"CtBinaryOperatorImpl","sourcecode":"charset == (java.nio.charset.Charset.forName(\"UTF-8\"))"},"failures":[],"tindex":"dc94a78c-2e80-11e6-9dd3-ad7092bdbd31","method":{"position":"org.apache.commons.io.IOUtils:893","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URL url, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (encoding == (java.nio.charset.Charset.forName(\"UTF-8\"))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStream java.io.InputStream = url.openStream();\n            try {\n                return org.apache.commons.io.IOUtils.toString(inputStream, encoding);\n            } finally {\n                inputStream.close();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"encoding"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:356","type":"CtBinaryOperatorImpl","sourcecode":"(file.canWrite()) == false"},"failures":[],"tindex":"dc94ce9d-2e80-11e6-9dd3-b1aac529875d","method":{"position":"org.apache.commons.io.FileDeleteStrategy:92","type":"CtMethodImpl","sourcecode":"public void delete(java.io.File fileToDelete) throws java.io.IOException {\n    if ((fileToDelete.canWrite()) == false) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((fileToDelete.exists()) && ((doDelete(fileToDelete)) == false)) {\n                throw new java.io.IOException((\"Deletion failed: \" + fileToDelete));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"fileToDelete"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFileFilter:107","type":"CtBinaryOperatorImpl","sourcecode":"wildcards == null"},"failures":[],"tindex":"dc94ce9e-2e80-11e6-9dd3-f595f093f459","method":{"position":"org.apache.commons.io.FileSystemUtils:534","type":"CtMethodImpl","sourcecode":"java.lang.Process openProcess(java.lang.String[] cmdAttribs) throws java.io.IOException {\n    if (cmdAttribs == null) {\n        {\n            return java.lang.Runtime.getRuntime().exec(cmdAttribs);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"wildcards":"cmdAttribs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1640","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"dc94f5af-2e80-11e6-9dd3-b7674da30bb6","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:222","type":"CtMethodImpl","sourcecode":"private static java.io.Writer initWriter(java.io.File file, java.lang.Object encoding, boolean append) throws java.io.IOException {\n    if (!(encoding.isDirectory())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File is missing\");\n            } \n            if (encoding == null) {\n                throw new java.lang.NullPointerException(\"Encoding is missing\");\n            } \n            boolean boolean = file.exists();\n            java.io.OutputStream java.io.OutputStream = null;\n            java.io.Writer java.io.Writer = null;\n            try {\n                stream = new java.io.FileOutputStream(file , append);\n                if (encoding instanceof java.nio.charset.Charset) {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.nio.charset.Charset)(encoding)));\n                } else if (encoding instanceof java.nio.charset.CharsetEncoder) {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.nio.charset.CharsetEncoder)(encoding)));\n                } else {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.lang.String)(encoding)));\n                }\n            } catch (java.io.IOException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            }\n            return writer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"encoding"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:735","type":"CtUnaryOperatorImpl","sourcecode":"!file1Exists"},"failures":[],"tindex":"dc951cc0-2e80-11e6-9dd3-91764b8ee523","method":{"position":"org.apache.commons.io.input.XmlStreamReader:423","type":"CtMethodImpl","sourcecode":"private java.lang.String doRawStream(org.apache.commons.io.input.BOMInputStream bom, org.apache.commons.io.input.BOMInputStream pis, boolean lenient) throws java.io.IOException {\n    if (!lenient) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String java.lang.String = bom.getBOMCharsetName();\n            java.lang.String java.lang.String = pis.getBOMCharsetName();\n            java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getXmlProlog(pis, xmlGuessEnc);\n            try {\n                return calculateRawEncoding(bomEnc, xmlGuessEnc, xmlEnc);\n            } catch (org.apache.commons.io.input.XmlStreamReaderException ex) {\n                if (lenient) {\n                    return doLenientDetection(null, ex);\n                } else {\n                    throw ex;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file1Exists":"lenient"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1122","type":"CtBinaryOperatorImpl","sourcecode":"(filename1 == null) || (filename2 == null)"},"failures":[],"tindex":"dc951cc1-2e80-11e6-9dd3-d93e35856697","method":{"position":"org.apache.commons.io.IOUtils:916","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URL url, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding == null) || (encoding == null)) {\n        {\n            if ((encoding != null) && (!(xmlGuessEnc.equals(encoding)))) {\n                {\n                    return org.apache.commons.io.IOUtils.toString(url, org.apache.commons.io.Charsets.toCharset(encoding));\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename2":"encoding","filename1":"encoding"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:124","type":"CtBinaryOperatorImpl","sourcecode":"result > 0"},"failures":[],"tindex":"dc951cc2-2e80-11e6-9dd3-af3904eab3a9","method":{"position":"org.apache.commons.io.EndianUtils:389","type":"CtMethodImpl","sourcecode":"public static void writeSwappedLong(java.io.OutputStream output, long value) throws java.io.IOException {\n    if (value > 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n            output.write(((byte)((value >> 16) & 255)));\n            output.write(((byte)((value >> 24) & 255)));\n            output.write(((byte)((value >> 32) & 255)));\n            output.write(((byte)((value >> 40) & 255)));\n            output.write(((byte)((value >> 48) & 255)));\n            output.write(((byte)((value >> 56) & 255)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:449","type":"CtBinaryOperatorImpl","sourcecode":"filters == null"},"failures":[],"tindex":"dc9543d3-2e80-11e6-9dd3-03dbe4baef93","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:448","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.io.filefilter.IOFileFilter> toList(org.apache.commons.io.filefilter.IOFileFilter... filters) {\n    if (filters == null) {\n        {\n            if (filters == null) {\n                throw new java.lang.IllegalArgumentException(\"The filters must not be null\");\n            } \n            java.util.List<org.apache.commons.io.filefilter.IOFileFilter> java.util.List<org.apache.commons.io.filefilter.IOFileFilter> = new java.util.ArrayList<org.apache.commons.io.filefilter.IOFileFilter>(filters.int);\n            for (int int = 0 ; i < (filters.int) ; i++) {\n                if ((filters[i]) == null) {\n                    throw new java.lang.IllegalArgumentException(((\"The filter[\" + i) + \"] is null\"));\n                } \n                list.add(filters[i]);\n            }\n            return list;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filters":"filters"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:537","type":"CtBinaryOperatorImpl","sourcecode":"(xmlGuessEnc != null) && (!(xmlGuessEnc.equals(bomEnc)))"},"failures":[],"tindex":"dc9543d4-2e80-11e6-9dd3-45589b053b26","method":{"position":"org.apache.commons.io.output.ProxyWriter:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence csq) throws java.io.IOException {\n    if ((csq != null) && (!(xmlGuessEnc.equals(csq)))) {\n        {\n            try {\n                int int = 0;\n                if (csq != null) {\n                    len = csq.length();\n                } \n                beforeWrite(len);\n                java.io.Writer.append(csq);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n            return org.apache.commons.io.output.ProxyWriter.this;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"csq","xmlGuessEnc":"csq"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:212","type":"CtBinaryOperatorImpl","sourcecode":"(xmlPrologWriter) != null"},"failures":[],"tindex":"dc956ae5-2e80-11e6-9dd3-e5d7ab1a416a","method":{"position":"org.apache.commons.io.IOUtils:1905","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (output != null) {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding));\n            org.apache.commons.io.IOUtils.copy(in, output);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"xmlPrologWriter":"output"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.OrFileFilter:148","type":"CtBinaryOperatorImpl","sourcecode":"(fileFilters) != null"},"failures":[],"tindex":"dc956ae6-2e80-11e6-9dd3-29ab457584f7","method":{"position":"org.apache.commons.io.filefilter.AndFileFilter:108","type":"CtMethodImpl","sourcecode":"public void setFileFilters(final java.util.List<org.apache.commons.io.filefilter.IOFileFilter> fileFilters) {\n    if (fileFilters != null) {\n        {\n            org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.clear();\n            org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.addAll(fileFilters);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilters":"fileFilters"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:239","type":"CtBinaryOperatorImpl","sourcecode":"((file != null) && (file.isFile())) && (file.canRead())"},"failures":[],"tindex":"dc956ae7-2e80-11e6-9dd3-e5e291bc8879","method":{"position":"org.apache.commons.io.FileUtils:2001","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, boolean append) throws java.io.IOException {\n    if (((file != null) && (file.isFile())) && (file.canRead())) {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, java.nio.charset.Charset.defaultCharset(), append);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:656","type":"CtBinaryOperatorImpl","sourcecode":"httpContentType != null"},"failures":[],"tindex":"dc9591f8-2e80-11e6-9dd3-a34d02b806e0","method":{"position":"org.apache.commons.io.filefilter.NameFileFilter:161","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if (name != null) {\n        {\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkEquals(name, name2)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"name"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:111","type":"CtBinaryOperatorImpl","sourcecode":"(currentBuffer) == null"},"failures":[],"tindex":"dc9591f9-2e80-11e6-9dd3-b7894ce2cce5","method":{"position":"org.apache.commons.io.input.BOMInputStream:356","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] buf) throws java.io.IOException {\n    if (buf == null) {\n        {\n            return read(buf, 0, buf.int);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"currentBuffer":"buf"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:356","type":"CtBinaryOperatorImpl","sourcecode":"prefix < 0"},"failures":[],"tindex":"dc9591fa-2e80-11e6-9dd3-65c06056577b","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:166","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(int b) {\n    if (b < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (int) - (int);\n            if (inBufferPos == (byte[].int)) {\n                needNewBuffer(((int) + 1));\n                inBufferPos = 0;\n            } \n            byte[][inBufferPos] = ((byte)(b));\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:111","type":"CtBinaryOperatorImpl","sourcecode":"(currentBuffer) == null"},"failures":[],"tindex":"dc9591fb-2e80-11e6-9dd3-dd31dc230a34","method":{"position":"org.apache.commons.io.output.ThresholdingOutputStream:107","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            checkThreshold(b.int);\n            getStream().write(b);\n            long += b.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"currentBuffer":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:270","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"dc95b90c-2e80-11e6-9dd3-1591ebd44213","method":{"position":"org.apache.commons.io.FileUtils:568","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if (dirFilter == null) {\n        {\n            return dirFilter == null ? org.apache.commons.io.filefilter.FalseFileFilter.org.apache.commons.io.filefilter.FalseFileFilter.org.apache.commons.io.filefilter.IOFileFilter : org.apache.commons.io.filefilter.FileFilterUtils.and(dirFilter, org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"dirFilter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2182","type":"CtUnaryOperatorImpl","sourcecode":"!(input2 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"dc95b90d-2e80-11e6-9dd3-95da76fe1add","method":{"position":"org.apache.commons.io.IOUtils:1767","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.InputStream input, java.io.OutputStream output) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.copyLarge(input, output, new byte[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input2":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:637","type":"CtInvocationImpl","sourcecode":"cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32)"},"failures":[],"tindex":"dc95b90e-2e80-11e6-9dd3-a501a6897204","method":{"position":"org.apache.commons.io.FilenameUtils:1064","type":"CtMethodImpl","sourcecode":"public static boolean equalsOnSystem(java.lang.String filename1, java.lang.String filename2) {\n    if (filename2.equals(filename1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, false, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cTEnc":"filename2","org.apache.commons.io.input.XmlStreamReader.UTF_32":"filename1"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.monitor.FileEntry:71","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"dc95e01f-2e80-11e6-9dd3-d97fcd8382c8","method":{"position":"org.apache.commons.io.FileUtils:2734","type":"CtMethodImpl","sourcecode":"public static void moveDirectory(java.io.File srcDir, java.io.File destDir) throws java.io.IOException {\n    if (srcDir == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (srcDir == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if (!(srcDir.exists())) {\n                throw new java.io.FileNotFoundException(((\"Source '\" + srcDir) + \"' does not exist\"));\n            } \n            if (!(srcDir.isDirectory())) {\n                throw new java.io.IOException(((\"Source '\" + srcDir) + \"' is not a directory\"));\n            } \n            if (destDir.exists()) {\n                throw new org.apache.commons.io.FileExistsException(((\"Destination '\" + destDir) + \"' already exists\"));\n            } \n            boolean boolean = srcDir.renameTo(destDir);\n            if (!rename) {\n                if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {\n                    throw new java.io.IOException((((\"Cannot move directory: \" + srcDir) + \" to a subdirectory of itself: \") + destDir));\n                } \n                org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);\n                org.apache.commons.io.FileUtils.deleteDirectory(srcDir);\n                if (srcDir.exists()) {\n                    throw new java.io.IOException(((((\"Failed to delete original directory '\" + srcDir) + \"' after copy to '\") + destDir) + \"'\"));\n                } \n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"srcDir"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:291","type":"CtInvocationImpl","sourcecode":"file.exists()"},"failures":[],"tindex":"dc95e020-2e80-11e6-9dd3-3be5513befb7","method":{"position":"org.apache.commons.io.TaggedIOException:64","type":"CtMethodImpl","sourcecode":"public static boolean isTaggedWith(java.lang.Throwable throwable, java.lang.Object tag) {\n    if (tag.exists()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((tag != null) && (throwable instanceof org.apache.commons.io.TaggedIOException)) && (tag.equals(((org.apache.commons.io.TaggedIOException)(throwable)).java.io.Serializable));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"tag"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:841","type":"CtBinaryOperatorImpl","sourcecode":"(url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))"},"failures":[],"tindex":"dc95e021-2e80-11e6-9dd3-39c3a53f1da8","method":{"position":"org.apache.commons.io.IOUtils:878","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URL url) throws java.io.IOException {\n    if ((url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((url.getProtocol().equals(\"file\")) == false) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.io.IOUtils.toString(url, java.nio.charset.Charset.defaultCharset());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"url":"url"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.io.IOUtils.EOF) == count"},"failures":[],"tindex":"dc960732-2e80-11e6-9dd3-dbdce0a28aa0","method":{"position":"org.apache.commons.io.output.NullOutputStream:53","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) {\n    if (b == b) {\n        {\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"b","org.apache.commons.io.IOUtils.EOF":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileCleaningTracker:139","type":"CtBinaryOperatorImpl","sourcecode":"(reaper) == null"},"failures":[],"tindex":"dc960733-2e80-11e6-9dd3-63634dad03a4","method":{"position":"org.apache.commons.io.ThreadMonitor:83","type":"CtMethodImpl","sourcecode":"public static void stop(java.lang.Thread thread) {\n    if (thread == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (thread != null) {\n                thread.interrupt();\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reaper":"thread"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:57","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"dc960734-2e80-11e6-9dd3-69766b61719a","method":{"position":"org.apache.commons.io.IOUtils:1550","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"encoding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.OrFileFilter:75","type":"CtBinaryOperatorImpl","sourcecode":"(filter1 == null) || (filter2 == null)"},"failures":[],"tindex":"dc960735-2e80-11e6-9dd3-2b0c3b10b712","method":{"position":"org.apache.commons.io.FileUtils:558","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveFileFilter(org.apache.commons.io.filefilter.IOFileFilter fileFilter) {\n    if ((fileFilter == null) || (fileFilter == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.filefilter.FileFilterUtils.and(fileFilter, org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"fileFilter","filter2":"fileFilter"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.TeeInputStream:109","type":"CtBinaryOperatorImpl","sourcecode":"ch != (-1)"},"failures":[],"tindex":"dc962e46-2e80-11e6-9dd3-a704011f5347","method":{"position":"org.apache.commons.io.input.CharSequenceReader:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void mark(int readAheadLimit) {\n    if (readAheadLimit != (-1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int = int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"readAheadLimit"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:536","type":"CtBinaryOperatorImpl","sourcecode":"(bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE))"},"failures":[],"tindex":"dc962e47-2e80-11e6-9dd3-9b4a4f5f249f","method":{"position":"org.apache.commons.io.filefilter.NotFileFilter:66","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file, java.lang.String name) {\n    if ((name.equals(name)) || (bomEnc.equals(name))) {\n        {\n            return !(org.apache.commons.io.filefilter.IOFileFilter.accept(file, name));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"name","org.apache.commons.io.input.XmlStreamReader.UTF_16LE":"name","org.apache.commons.io.input.XmlStreamReader.UTF_16BE":"name"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:433","type":"CtBinaryOperatorImpl","sourcecode":"children == null"},"failures":[],"tindex":"dc962e48-2e80-11e6-9dd3-1d896c270dff","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:180","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.io.File> filterList(org.apache.commons.io.filefilter.IOFileFilter filter, java.io.File... files) {\n    if (files == null) {\n        {\n            java.io.File[] java.io.File[] = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files);\n            return java.util.Arrays.asList(acceptedFiles);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"children":"files"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1000","type":"CtBinaryOperatorImpl","sourcecode":"index == (-1)"},"failures":[],"tindex":"dc965559-2e80-11e6-9dd3-315da3fc4e5b","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:52","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int idx) throws java.io.IOException {\n    if (idx == (-1)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                beforeWrite(1);\n                java.io.OutputStream.write(idx);\n                afterWrite(1);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"idx"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:629","type":"CtBinaryOperatorImpl","sourcecode":"bomEnc != null"},"failures":[],"tindex":"dc96555a-2e80-11e6-9dd3-4732bd6ce9c1","method":{"position":"org.apache.commons.io.IOUtils:1932","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.copy(input, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"encoding"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:478","type":"CtBinaryOperatorImpl","sourcecode":"(httpContentType != null) && (httpContentType.startsWith(\"text/html\"))"},"failures":[],"tindex":"dc96555b-2e80-11e6-9dd3-53c4ce421c96","method":{"position":"org.apache.commons.io.CopyUtils:303","type":"CtMethodImpl","sourcecode":"public static void copy(java.lang.String input, java.io.OutputStream output) throws java.io.IOException {\n    if ((input != null) && (httpContentType.startsWith(\"text/html\"))) {\n        {\n            java.io.StringReader java.io.StringReader = new java.io.StringReader(input);\n            java.io.OutputStreamWriter java.io.OutputStreamWriter = new java.io.OutputStreamWriter(output);\n            org.apache.commons.io.CopyUtils.copy(in, out);\n            out.flush();\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"input"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:180","type":"CtBinaryOperatorImpl","sourcecode":"(names) != null"},"failures":[],"tindex":"dc96555c-2e80-11e6-9dd3-2d452f9661b8","method":{"position":"org.apache.commons.io.FileUtils:663","type":"CtMethodImpl","sourcecode":"private static java.lang.String[] toSuffixes(java.lang.String[] extensions) {\n    if (extensions != null) {\n        {\n            java.lang.String[] java.lang.String[] = new java.lang.String[extensions.int];\n            for (int int = 0 ; i < (extensions.int) ; i++) {\n                suffixes[i] = \".\" + (extensions[i]);\n            }\n            return suffixes;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"names":"extensions"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:72","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"dc967c6d-2e80-11e6-9dd3-6748920ab4c1","method":{"position":"org.apache.commons.io.IOUtils:273","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.OutputStream output) {\n    if (null != output) {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(output)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2735","type":"CtBinaryOperatorImpl","sourcecode":"srcDir == null"},"failures":[],"tindex":"dc967c6e-2e80-11e6-9dd3-9b28f9f0c53e","method":{"position":"org.apache.commons.io.FileUtils:1459","type":"CtMethodImpl","sourcecode":"public static void copyURLToFile(java.net.URL source, java.io.File destination) throws java.io.IOException {\n    if (destination == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStream java.io.InputStream = source.openStream();\n            org.apache.commons.io.FileUtils.copyInputStreamToFile(input, destination);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"destination"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceInputStream:121","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"dc967c6f-2e80-11e6-9dd3-dff3599a2520","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:136","type":"CtMethodImpl","sourcecode":"protected void beforeWrite(int n) throws java.io.IOException {\n    if (n == 0) {\n        {\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"n"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2890","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"dc967c70-2e80-11e6-9dd3-316205d937b2","method":{"position":"org.apache.commons.io.FileUtils:2307","type":"CtMethodImpl","sourcecode":"private static void deleteDirectoryOnExit(java.io.File directory) throws java.io.IOException {\n    if (directory == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(directory.exists())) {\n                return ;\n            } \n            directory.deleteOnExit();\n            if (!(org.apache.commons.io.FileUtils.isSymlink(directory))) {\n                org.apache.commons.io.FileUtils.cleanDirectoryOnExit(directory);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"directory"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:741","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"dc96a381-2e80-11e6-9dd3-6b7ddc7ac888","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:740","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if (filter == null) {\n        {\n            if (filter == null) {\n                return org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.IOFileFilter;\n            } else {\n                return org.apache.commons.io.filefilter.FileFilterUtils.and(filter, org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.IOFileFilter);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NotFileFilter:41","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"dc96f1a2-2e80-11e6-9dd3-8d45eeb302c4","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:515","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FilenameFilter filter) {\n    if (filter == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.DelegateFileFilter(filter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:90","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"dc9718b3-2e80-11e6-9dd3-6f6ea7e6bf06","method":{"position":"org.apache.commons.io.IOUtils:2157","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.Reader input, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.copy(input, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"encoding"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1367","type":"CtBinaryOperatorImpl","sourcecode":"(srcDir.exists()) == false"},"failures":[],"tindex":"dc9718b4-2e80-11e6-9dd3-2b054ac12ca8","method":{"position":"org.apache.commons.io.input.Tailer:255","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.input.Tailer create(java.io.File file, org.apache.commons.io.input.TailerListener listener, long delayMillis, boolean end, boolean reOpen, int bufSize) {\n    if ((file.exists()) == false) {\n        {\n            org.apache.commons.io.input.Tailer org.apache.commons.io.input.Tailer = new org.apache.commons.io.input.Tailer(file , listener , delayMillis , end , reOpen , bufSize);\n            java.lang.Thread java.lang.Thread = new java.lang.Thread(tailer);\n            thread.setDaemon(true);\n            thread.start();\n            return tailer;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:629","type":"CtBinaryOperatorImpl","sourcecode":"bomEnc != null"},"failures":[],"tindex":"dc9718b5-2e80-11e6-9dd3-1bdd816f0aa0","method":{"position":"org.apache.commons.io.FilenameUtils:334","type":"CtMethodImpl","sourcecode":"public static java.lang.String normalizeNoEndSeparator(java.lang.String filename, boolean unixSeparator) {\n    if (filename != null) {\n        {\n            char char = unixSeparator ? org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char : org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char;\n            return org.apache.commons.io.FilenameUtils.doNormalize(filename, separator, false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"filename"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:162","type":"CtBinaryOperatorImpl","sourcecode":"(running) == false"},"failures":[],"tindex":"dc973fc6-2e80-11e6-9dd3-6944424dc503","method":{"position":"org.apache.commons.io.FileUtils:1359","type":"CtMethodImpl","sourcecode":"public static void copyDirectory(java.io.File srcDir, java.io.File destDir, java.io.FileFilter filter, boolean preserveFileDate) throws java.io.IOException {\n    if (preserveFileDate == false) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (srcDir == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if ((srcDir.exists()) == false) {\n                throw new java.io.FileNotFoundException(((\"Source '\" + srcDir) + \"' does not exist\"));\n            } \n            if ((srcDir.isDirectory()) == false) {\n                throw new java.io.IOException(((\"Source '\" + srcDir) + \"' exists but is not a directory\"));\n            } \n            if (srcDir.getCanonicalPath().equals(destDir.getCanonicalPath())) {\n                throw new java.io.IOException(((((\"Source '\" + srcDir) + \"' and destination '\") + destDir) + \"' are the same\"));\n            } \n            java.util.List<java.lang.String> java.util.List<java.lang.String> = null;\n            if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {\n                java.io.File[] java.io.File[] = filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);\n                if ((srcFiles != null) && ((srcFiles.int) > 0)) {\n                    exclusionList = new java.util.ArrayList<java.lang.String>(srcFiles.int);\n                    for (java.io.File java.io.File : srcFiles) {\n                        java.io.File java.io.File = new java.io.File(destDir , srcFile.getName());\n                        exclusionList.add(copiedFile.getCanonicalPath());\n                    }\n                } \n            } \n            org.apache.commons.io.FileUtils.doCopyDirectory(srcDir, destDir, filter, preserveFileDate, exclusionList);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"running":"preserveFileDate"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2182","type":"CtUnaryOperatorImpl","sourcecode":"!(input2 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"dc973fc7-2e80-11e6-9dd3-5732fd053f88","method":{"position":"org.apache.commons.io.CopyUtils:190","type":"CtMethodImpl","sourcecode":"public static int copy(java.io.InputStream input, java.io.OutputStream output) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            byte[] byte[] = new byte[org.apache.commons.io.CopyUtils.org.apache.commons.io.CopyUtils.int];\n            int int = 0;\n            int int = 0;\n            while ((-1) != (n = input.read(buffer))) {\n                output.write(buffer, 0, n);\n                count += n;\n            }\n            return count;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input2":"input"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
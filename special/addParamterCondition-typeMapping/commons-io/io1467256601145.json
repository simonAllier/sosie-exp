{"failureDictionary":{},"transformations":[{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2331","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"1091dd65-3e71-11e6-96d2-d5540aec124c","method":{"position":"org.apache.commons.io.FileUtils:2325","type":"CtMethodImpl","sourcecode":"private static void cleanDirectoryOnExit(java.io.File directory) throws java.io.IOException {\n    if (!(directory.isDirectory())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(directory.exists())) {\n                java.lang.String java.lang.String = directory + \" does not exist\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            if (!(directory.isDirectory())) {\n                java.lang.String java.lang.String = directory + \" is not a directory\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            java.io.File[] java.io.File[] = directory.listFiles();\n            if (files == null) {\n                throw new java.io.IOException((\"Failed to list contents of \" + directory));\n            } \n            java.io.IOException java.io.IOException = null;\n            for (java.io.File java.io.File : files) {\n                try {\n                    org.apache.commons.io.FileUtils.forceDeleteOnExit(file);\n                } catch (java.io.IOException ioe) {\n                    exception = ioe;\n                }\n            }\n            if (null != exception) {\n                throw exception;\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1565","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"10922b86-3e71-11e6-96d2-69d338fdb54d","method":{"position":"org.apache.commons.io.FileDeleteStrategy:71","type":"CtMethodImpl","sourcecode":"public boolean deleteQuietly(java.io.File fileToDelete) {\n    if (fileToDelete.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((fileToDelete == null) || ((fileToDelete.exists()) == false)) {\n                return true;\n            } \n            try {\n                return doDelete(fileToDelete);\n            } catch (java.io.IOException ex) {\n                return false;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"fileToDelete"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.WriterOutputStream:301","type":"CtBinaryOperatorImpl","sourcecode":"(decoderOut.position()) > 0"},"failures":[],"tindex":"10922b87-3e71-11e6-96d2-85ba4c448cfd","method":{"position":"org.apache.commons.io.output.ProxyWriter:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence csq) throws java.io.IOException {\n    if ((csq == null) || (csq == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((csq.position()) > 0) {\n                {\n                    try {\n                        int int = 0;\n                        if (csq != null) {\n                            len = csq.length();\n                        } \n                        beforeWrite(len);\n                        java.io.Writer.append(csq);\n                        afterWrite(len);\n                    } catch (java.io.IOException e) {\n                        handleIOException(e);\n                    }\n                    return org.apache.commons.io.output.ProxyWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"decoderOut":"csq"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"10925298-3e71-11e6-96d2-d9ecfdd781c1","method":{"position":"org.apache.commons.io.input.TaggedInputStream:101","type":"CtMethodImpl","sourcecode":"public void throwIfCauseOf(java.lang.Throwable throwable) throws java.io.IOException {\n    if (null != throwable) {\n        {\n            org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(throwable, java.io.Serializable);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"throwable"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1006","type":"CtBinaryOperatorImpl","sourcecode":"destDir == null"},"failures":[],"tindex":"10925299-3e71-11e6-96d2-1565a9dcbf4c","method":{"position":"org.apache.commons.io.filefilter.DirectoryFileFilter:69","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return file.isDirectory();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.Tailer:392","type":"CtBinaryOperatorImpl","sourcecode":"length > position"},"failures":[],"tindex":"1092529a-3e71-11e6-96d2-652619a8b24c","method":{"position":"org.apache.commons.io.FileSystemUtils:233","type":"CtMethodImpl","sourcecode":"public static long freeSpaceKb(long timeout) throws java.io.IOException {\n    if (timeout > timeout) {\n        {\n            return org.apache.commons.io.FileSystemUtils.freeSpaceKb(new java.io.File(\".\").getAbsolutePath(), timeout);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"timeout","position":"timeout"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullReader:242","type":"CtBinaryOperatorImpl","sourcecode":"(position) > ((mark) + (readlimit))"},"failures":[],"tindex":"1092529b-3e71-11e6-96d2-5fb4a8571c90","method":{"position":"org.apache.commons.io.FileSystemUtils:258","type":"CtMethodImpl","sourcecode":"long freeSpaceOS(java.lang.String path, int os, boolean kb, long timeout) throws java.io.IOException {\n    if (timeout > (timeout + timeout)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (path == null) {\n                throw new java.lang.IllegalArgumentException(\"Path must not be empty\");\n            } \n            switch (os) {\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    return kb ? (freeSpaceWindows(path, timeout)) / (org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.long) : freeSpaceWindows(path, timeout);\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    return freeSpaceUnix(path, kb, false, timeout);\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    return freeSpaceUnix(path, kb, true, timeout);\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    throw new java.lang.IllegalStateException(\"Unsupported operating system\");\n                default :\n                    throw new java.lang.IllegalStateException(\"Exception caught when determining operating system\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"readlimit":"timeout","position":"timeout","mark":"timeout"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2367","type":"CtInvocationImpl","sourcecode":"directory.exists()"},"failures":[],"tindex":"109279ac-3e71-11e6-96d2-a99dc1c15187","method":{"position":"org.apache.commons.io.FileUtils:2576","type":"CtMethodImpl","sourcecode":"public static boolean isFileNewer(java.io.File file, java.util.Date date) {\n    if (!(file.isDirectory())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file.exists()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (date == null) {\n                        throw new java.lang.IllegalArgumentException(\"No specified date\");\n                    } \n                    return org.apache.commons.io.FileUtils.isFileNewer(file, date.getTime());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:111","type":"CtBinaryOperatorImpl","sourcecode":"(currentBuffer) == null"},"failures":[],"tindex":"109279ad-3e71-11e6-96d2-219029566c71","method":{"position":"org.apache.commons.io.CopyUtils:151","type":"CtMethodImpl","sourcecode":"public static void copy(byte[] input, java.io.Writer output) throws java.io.IOException {\n    if (output != null) {\n        {\n            if (input == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream(input);\n                    org.apache.commons.io.CopyUtils.copy(in, output);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"currentBuffer":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileCleaningTracker:121","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"1092a0be-3e71-11e6-96d2-d709242b5d9d","method":{"position":"org.apache.commons.io.FilenameUtils:1080","type":"CtMethodImpl","sourcecode":"public static boolean equalsNormalized(java.lang.String filename1, java.lang.String filename2) {\n    if (filename2 == null) {\n        {\n            return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, true, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"filename2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:637","type":"CtInvocationImpl","sourcecode":"cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32)"},"failures":[],"tindex":"1092a0bf-3e71-11e6-96d2-6bd4c006e0b8","method":{"position":"org.apache.commons.io.IOCase:146","type":"CtMethodImpl","sourcecode":"public int checkCompareTo(java.lang.String str1, java.lang.String str2) {\n    if (str2.equals(str1)) {\n        {\n            if ((str1 == null) || (str2 == null)) {\n                throw new java.lang.NullPointerException(\"The strings must not be null\");\n            } \n            return boolean ? str1.compareTo(str2) : str1.compareToIgnoreCase(str2);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cTEnc":"str2","org.apache.commons.io.input.XmlStreamReader.UTF_32":"str1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2928","type":"CtBinaryOperatorImpl","sourcecode":"(file.getParent()) == null"},"failures":[],"tindex":"1092a0c0-3e71-11e6-96d2-7948e4084886","method":{"position":"org.apache.commons.io.DirectoryWalker:434","type":"CtMethodImpl","sourcecode":"protected boolean handleIsCancelled(java.io.File file, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (!(file.isDirectory())) {\n        {\n            if ((file.getParent()) == null) {\n                {\n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:524","type":"CtBinaryOperatorImpl","sourcecode":"(xmlGuessEnc != null) && (!(xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_8)))"},"failures":[],"tindex":"1092a0c1-3e71-11e6-96d2-eb5d25544c6c","method":{"position":"org.apache.commons.io.input.TailerListenerAdapter:54","type":"CtMethodImpl","sourcecode":"public void handle(java.lang.String line) {\n    if ((line != null) && (!(xmlGuessEnc.equals(line)))) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.input.XmlStreamReader.UTF_8":"line","xmlGuessEnc":"line"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:924","type":"CtBinaryOperatorImpl","sourcecode":"(url.getProtocol().equals(\"file\")) == false"},"failures":[],"tindex":"1092c7d2-3e71-11e6-96d2-d14554f8b047","method":{"position":"org.apache.commons.io.FileUtils:840","type":"CtMethodImpl","sourcecode":"public static java.io.File toFile(java.net.URL url) {\n    if ((url.getProtocol().equals(\"file\")) == false) {\n        {\n            if ((url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))) {\n                return null;\n            } else {\n                java.lang.String java.lang.String = url.getFile().replace('/', java.io.File.java.io.File.char);\n                filename = org.apache.commons.io.FileUtils.decodeUrl(filename);\n                return new java.io.File(filename);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"url":"url"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1609","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"1092c7d3-3e71-11e6-96d2-a1d37ac9000a","method":{"position":"org.apache.commons.io.DirectoryWalker:434","type":"CtMethodImpl","sourcecode":"protected boolean handleIsCancelled(java.io.File file, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (!(file.isDirectory())) {\n        {\n            if ((file.getParent()) == null) {\n                {\n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOCase:165","type":"CtBinaryOperatorImpl","sourcecode":"(str1 == null) || (str2 == null)"},"failures":[],"tindex":"1092c7d4-3e71-11e6-96d2-b5c866c5d0fb","method":{"position":"org.apache.commons.io.output.ProxyWriter:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence csq) throws java.io.IOException {\n    if ((csq == null) || (csq == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((csq.position()) > 0) {\n                {\n                    try {\n                        int int = 0;\n                        if (csq != null) {\n                            len = csq.length();\n                        } \n                        beforeWrite(len);\n                        java.io.Writer.append(csq);\n                        afterWrite(len);\n                    } catch (java.io.IOException e) {\n                        handleIOException(e);\n                    }\n                    return org.apache.commons.io.output.ProxyWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str1":"csq","str2":"csq"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:96","type":"CtBinaryOperatorImpl","sourcecode":"line == null"},"failures":[],"tindex":"1092eee5-3e71-11e6-96d2-6d26567e2901","method":{"position":"org.apache.commons.io.FilenameUtils:1064","type":"CtMethodImpl","sourcecode":"public static boolean equalsOnSystem(java.lang.String filename1, java.lang.String filename2) {\n    if (filename1 == null) {\n        {\n            return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, false, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"filename1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2534","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"1092eee6-3e71-11e6-96d2-316facf23404","method":{"position":"org.apache.commons.io.FileCleaningTracker:134","type":"CtMethodImpl","sourcecode":"private synchronized void addTracker(java.lang.String path, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if (!(marker.isDirectory())) {\n        {\n            if (boolean) {\n                throw new java.lang.IllegalStateException(\"No new trackers can be added once exitWhenFinished() is called\");\n            } \n            if ((java.lang.Thread) == null) {\n                java.lang.Thread = new org.apache.commons.io.FileCleaningTracker.Reaper();\n                java.lang.Thread.start();\n            } \n            java.util.Collection<org.apache.commons.io.FileCleaningTracker.Tracker>.add(new org.apache.commons.io.FileCleaningTracker.Tracker(path , deleteStrategy , marker , java.lang.ref.ReferenceQueue<java.lang.Object>));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"marker"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:790","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"1092eee7-3e71-11e6-96d2-252707136cec","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:390","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter1, org.apache.commons.io.filefilter.IOFileFilter filter2) {\n    if (filter1 == null) {\n        {\n            return new org.apache.commons.io.filefilter.AndFileFilter(filter1 , filter2);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter1"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2331","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[],"tindex":"1092eee8-3e71-11e6-96d2-dfb7167dcffd","method":{"position":"org.apache.commons.io.IOUtils:2379","type":"CtMethodImpl","sourcecode":"public static void skipFully(java.io.Reader input, long toSkip) throws java.io.IOException {\n    if (toSkip < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            long long = org.apache.commons.io.IOUtils.skip(input, toSkip);\n            if (skipped != toSkip) {\n                throw new java.io.EOFException((((\"Chars to skip: \" + toSkip) + \" actual: \") + skipped));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"toSkip"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2182","type":"CtUnaryOperatorImpl","sourcecode":"!(input2 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"1092eee9-3e71-11e6-96d2-cdaee0d87227","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:276","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toBufferedInputStream(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            org.apache.commons.io.output.ByteArrayOutputStream org.apache.commons.io.output.ByteArrayOutputStream = new org.apache.commons.io.output.ByteArrayOutputStream();\n            output.write(input);\n            return output.toBufferedInputStream();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input2":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:408","type":"CtBinaryOperatorImpl","sourcecode":"i == (size - 1)"},"failures":[],"tindex":"1092eeea-3e71-11e6-96d2-a30f4a42caf6","method":{"position":"org.apache.commons.io.output.ThresholdingOutputStream:126","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b, int off, int len) throws java.io.IOException {\n    if (off == (len - 1)) {\n        {\n            checkThreshold(len);\n            getStream().write(b, off, len);\n            long += len;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"len","i":"off"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:303","type":"CtInvocationImpl","sourcecode":"rootFile.exists()"},"failures":[],"tindex":"109315fb-3e71-11e6-96d2-6fae5bf9232b","method":{"position":"org.apache.commons.io.FileUtils:1925","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data, java.nio.charset.Charset encoding, boolean append) throws java.io.IOException {\n    if (file.exists()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.OutputStream java.io.OutputStream = null;\n            try {\n                out = org.apache.commons.io.FileUtils.openOutputStream(file, append);\n                org.apache.commons.io.IOUtils.write(data, out, encoding);\n                out.close();\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(out);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rootFile":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2278","type":"CtBinaryOperatorImpl","sourcecode":"toSkip < 0"},"failures":[],"tindex":"109315fc-3e71-11e6-96d2-db4e3a994d2b","method":{"position":"org.apache.commons.io.EndianUtils:389","type":"CtMethodImpl","sourcecode":"public static void writeSwappedLong(java.io.OutputStream output, long value) throws java.io.IOException {\n    if (value < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n            output.write(((byte)((value >> 16) & 255)));\n            output.write(((byte)((value >> 24) & 255)));\n            output.write(((byte)((value >> 32) & 255)));\n            output.write(((byte)((value >> 40) & 255)));\n            output.write(((byte)((value >> 48) & 255)));\n            output.write(((byte)((value >> 56) & 255)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toSkip":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.SuffixFileFilter:189","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"109315fd-3e71-11e6-96d2-d3aa2af8072b","method":{"position":"org.apache.commons.io.output.BrokenOutputStream:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b > 0) {\n        {\n            throw java.io.IOException;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"109315fe-3e71-11e6-96d2-0b530422a397","method":{"position":"org.apache.commons.io.IOUtils:1905","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != input) {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding));\n            org.apache.commons.io.IOUtils.copy(in, output);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2053","type":"CtBinaryOperatorImpl","sourcecode":"inputOffset > 0"},"failures":[],"tindex":"109315ff-3e71-11e6-96d2-2b05e1f2f64b","method":{"position":"org.apache.commons.io.input.ProxyInputStream:114","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long ln) throws java.io.IOException {\n    if (ln > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                return java.io.InputStream.skip(ln);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n                return 0;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inputOffset":"ln"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:515","type":"CtBinaryOperatorImpl","sourcecode":"(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16)) && ((xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE)))"},"failures":[],"tindex":"10933c10-3e71-11e6-96d2-6dbd09f74d3e","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:657","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String magicNumber) {\n    if ((magicNumber.equals(magicNumber)) && ((magicNumber.equals(magicNumber)) || (xmlGuessEnc.equals(magicNumber)))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.MagicNumberFileFilter(magicNumber);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.input.XmlStreamReader.UTF_16LE":"magicNumber","xmlEnc":"magicNumber","org.apache.commons.io.input.XmlStreamReader.UTF_16":"magicNumber","xmlGuessEnc":"magicNumber","org.apache.commons.io.input.XmlStreamReader.UTF_16BE":"magicNumber"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2827","type":"CtInvocationImpl","sourcecode":"destFile.isDirectory()"},"failures":[],"tindex":"10933c11-3e71-11e6-96d2-f7bb9486e576","method":{"position":"org.apache.commons.io.filefilter.NameFileFilter:161","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if (dir.isDirectory()) {\n        {\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkEquals(name, name2)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"dir"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:334","type":"CtBinaryOperatorImpl","sourcecode":"sock != null"},"failures":[],"tindex":"10933c12-3e71-11e6-96d2-83b7981b6113","method":{"position":"org.apache.commons.io.IOUtils:333","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.net.Socket sock) {\n    if (sock != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (sock != null) {\n                try {\n                    sock.close();\n                } catch (java.io.IOException ioe) {\n                }\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sock":"sock"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:237","type":"CtUnaryOperatorImpl","sourcecode":"!(lockDir.canWrite())"},"failures":[],"tindex":"10933c13-3e71-11e6-96d2-33dc46ba7d14","method":{"position":"org.apache.commons.io.FileUtils:2777","type":"CtMethodImpl","sourcecode":"public static void moveDirectoryToDirectory(java.io.File src, java.io.File destDir, boolean createDestDir) throws java.io.IOException {\n    if (!(src.canWrite())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (src == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination directory must not be null\");\n            } \n            if ((!(destDir.exists())) && createDestDir) {\n                destDir.mkdirs();\n            } \n            if (!(destDir.exists())) {\n                throw new java.io.FileNotFoundException(((((\"Destination directory '\" + destDir) + \"' does not exist [createDestDir=\") + createDestDir) + \"]\"));\n            } \n            if (!(destDir.isDirectory())) {\n                throw new java.io.IOException(((\"Destination '\" + destDir) + \"' is not a directory\"));\n            } \n            org.apache.commons.io.FileUtils.moveDirectory(src, new java.io.File(destDir , src.getName()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lockDir":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:72","type":"CtBinaryOperatorImpl","sourcecode":"prefix == null"},"failures":[],"tindex":"10933c14-3e71-11e6-96d2-f3dd1a24025f","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:222","type":"CtMethodImpl","sourcecode":"private static java.io.Writer initWriter(java.io.File file, java.lang.Object encoding, boolean append) throws java.io.IOException {\n    if (encoding == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File is missing\");\n            } \n            if (encoding == null) {\n                throw new java.lang.NullPointerException(\"Encoding is missing\");\n            } \n            boolean boolean = file.exists();\n            java.io.OutputStream java.io.OutputStream = null;\n            java.io.Writer java.io.Writer = null;\n            try {\n                stream = new java.io.FileOutputStream(file , append);\n                if (encoding instanceof java.nio.charset.Charset) {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.nio.charset.Charset)(encoding)));\n                } else if (encoding instanceof java.nio.charset.CharsetEncoder) {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.nio.charset.CharsetEncoder)(encoding)));\n                } else {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.lang.String)(encoding)));\n                }\n            } catch (java.io.IOException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            }\n            return writer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"encoding"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1325","type":"CtBinaryOperatorImpl","sourcecode":"textIdx == (-1)"},"failures":[],"tindex":"10936325-3e71-11e6-96d2-b14cf4d74eaf","method":{"position":"org.apache.commons.io.IOUtils:2495","type":"CtMethodImpl","sourcecode":"public static void readFully(java.io.Reader input, char[] buffer, int offset, int length) throws java.io.IOException {\n    if (length != (-1)) {\n        {\n            if (buffer != null) {\n                {\n                    if (length == (-1)) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            int int = org.apache.commons.io.IOUtils.read(input, buffer, offset, length);\n                            if (actual != length) {\n                                throw new java.io.EOFException((((\"Length to read: \" + length) + \" actual: \") + actual));\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"textIdx":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.TeeInputStream:109","type":"CtBinaryOperatorImpl","sourcecode":"ch != (-1)"},"failures":[],"tindex":"10936326-3e71-11e6-96d2-57903a67462c","method":{"position":"org.apache.commons.io.input.NullReader:139","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void mark(int readlimit) {\n    if (readlimit != (-1)) {\n        {\n            if (!(boolean)) {\n                throw new java.lang.UnsupportedOperationException(\"Mark not supported\");\n            } \n            long = long;\n            org.apache.commons.io.input.NullReader.this.long = readlimit;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"readlimit"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:86","type":"CtBinaryOperatorImpl","sourcecode":"size < 0"},"failures":[],"tindex":"10936327-3e71-11e6-96d2-9141fd7c945f","method":{"position":"org.apache.commons.io.DirectoryWalker:503","type":"CtMethodImpl","sourcecode":"protected void handleDirectoryStart(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (depth == (-1)) {\n        {\n            if (depth < 0) {\n                {\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"depth"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2757","type":"CtInvocationImpl","sourcecode":"srcDir.exists()"},"failures":[],"tindex":"10936328-3e71-11e6-96d2-67baac860151","method":{"position":"org.apache.commons.io.FileUtils:1229","type":"CtMethodImpl","sourcecode":"public static void copyDirectory(java.io.File srcDir, java.io.File destDir) throws java.io.IOException {\n    if (destDir.exists()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"destDir"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl","sourcecode":"!(input1 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"10938a39-3e71-11e6-96d2-d943f1d2d1b0","method":{"position":"org.apache.commons.io.IOUtils:2475","type":"CtMethodImpl","sourcecode":"public static int read(java.io.InputStream input, byte[] buffer) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.read(input, buffer, 0, buffer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2791","type":"CtUnaryOperatorImpl","sourcecode":"!(destDir.isDirectory())"},"failures":[],"tindex":"10938a3a-3e71-11e6-96d2-a9f44eed801a","method":{"position":"org.apache.commons.io.FileUtils:2576","type":"CtMethodImpl","sourcecode":"public static boolean isFileNewer(java.io.File file, java.util.Date date) {\n    if (!(file.isDirectory())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file.exists()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (date == null) {\n                        throw new java.lang.IllegalArgumentException(\"No specified date\");\n                    } \n                    return org.apache.commons.io.FileUtils.isFileNewer(file, date.getTime());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2480","type":"CtBinaryOperatorImpl","sourcecode":"size < 0"},"failures":[],"tindex":"10938a3b-3e71-11e6-96d2-b93fe055293d","method":{"position":"org.apache.commons.io.input.BrokenInputStream:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long n) throws java.io.IOException {\n    if (n < 0) {\n        {\n            throw java.io.IOException;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:554","type":"CtBinaryOperatorImpl","sourcecode":"((xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32)))) && (!(xmlEnc.equals(bomEnc)))"},"failures":[],"tindex":"10938a3c-3e71-11e6-96d2-6377404839c7","method":{"position":"org.apache.commons.io.FileUtils:1733","type":"CtMethodImpl","sourcecode":"public static java.lang.String readFileToString(java.io.File file, java.lang.String encoding) throws java.io.IOException {\n    if (((encoding != null) && (!(xmlEnc.equals(encoding)))) && (!(xmlEnc.equals(encoding)))) {\n        {\n            return org.apache.commons.io.FileUtils.readFileToString(file, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"encoding","xmlEnc":"encoding","org.apache.commons.io.input.XmlStreamReader.UTF_32":"encoding"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"10938a3d-3e71-11e6-96d2-43f957a65241","method":{"position":"org.apache.commons.io.IOUtils:758","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        {\n            return org.apache.commons.io.IOUtils.toString(input, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2449","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"1093b14e-3e71-11e6-96d2-01d3a726fa45","method":{"position":"org.apache.commons.io.FileUtils:651","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<java.io.File> iterateFilesAndDirs(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter, org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if ((directory.exists()) == false) {\n        {\n            if (directory.isDirectory()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.io.FileUtils.listFilesAndDirs(directory, fileFilter, dirFilter).iterator();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"directory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:623","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"1093b14f-3e71-11e6-96d2-b548e03f68f1","method":{"position":"org.apache.commons.io.IOUtils:1197","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.String input) {\n    if (input == null) {\n        {\n            return org.apache.commons.io.IOUtils.toInputStream(input, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:183","type":"CtBinaryOperatorImpl","sourcecode":"(file.getParentFile()) != null"},"failures":[],"tindex":"1093b150-3e71-11e6-96d2-d1e11cc362d9","method":{"position":"org.apache.commons.io.FileUtils:2442","type":"CtMethodImpl","sourcecode":"public static java.math.BigInteger sizeOfAsBigInteger(java.io.File file) {\n    if ((file.getParentFile()) != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(file.exists())) {\n                java.lang.String java.lang.String = file + \" does not exist\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            if (file.isDirectory()) {\n                return org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);\n            } else {\n                return java.math.BigInteger.valueOf(file.length());\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"1093b151-3e71-11e6-96d2-53af2fef2d40","method":{"position":"org.apache.commons.io.IOUtils:192","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.Reader input) {\n    if (input == null) {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(input)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:524","type":"CtBinaryOperatorImpl","sourcecode":"(xmlGuessEnc != null) && (!(xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_8)))"},"failures":[],"tindex":"1093b152-3e71-11e6-96d2-1da3cb3eb1a9","method":{"position":"org.apache.commons.io.CopyUtils:259","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding != null) && (!(xmlGuessEnc.equals(encoding)))) {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , encoding);\n            org.apache.commons.io.CopyUtils.copy(in, output);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.input.XmlStreamReader.UTF_8":"encoding","xmlGuessEnc":"encoding"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:85","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"1093b153-3e71-11e6-96d2-59bbb552166d","method":{"position":"org.apache.commons.io.FileUtils:1560","type":"CtMethodImpl","sourcecode":"public static boolean deleteQuietly(java.io.File file) {\n    if (file == null) {\n        {\n            if (file == null) {\n                return false;\n            } \n            try {\n                if (file.isDirectory()) {\n                    org.apache.commons.io.FileUtils.cleanDirectory(file);\n                } \n            } catch (java.lang.Exception ignored) {\n            }\n            try {\n                return file.delete();\n            } catch (java.lang.Exception ignored) {\n                return false;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1073","type":"CtBinaryOperatorImpl","sourcecode":"(srcFile.exists()) == false"},"failures":[],"tindex":"1093d864-3e71-11e6-96d2-97a4efc51989","method":{"position":"org.apache.commons.io.FileUtils:651","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<java.io.File> iterateFilesAndDirs(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter, org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if ((directory.exists()) == false) {\n        {\n            if (directory.isDirectory()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.io.FileUtils.listFilesAndDirs(directory, fileFilter, dirFilter).iterator();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2182","type":"CtUnaryOperatorImpl","sourcecode":"!(input2 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"1093d865-3e71-11e6-96d2-3fed234821ba","method":{"position":"org.apache.commons.io.IOUtils:245","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.InputStream input) {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(input)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input2":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.CountingInputStream:71","type":"CtBinaryOperatorImpl","sourcecode":"n != (-1)"},"failures":[],"tindex":"1093d866-3e71-11e6-96d2-b512478f1de3","method":{"position":"org.apache.commons.io.output.NullOutputStream:44","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b, int off, int len) {\n    if (len != (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"len"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:515","type":"CtBinaryOperatorImpl","sourcecode":"(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16)) && ((xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE)))"},"failures":[],"tindex":"1093d867-3e71-11e6-96d2-3f8c448df177","method":{"position":"org.apache.commons.io.FilenameUtils:688","type":"CtMethodImpl","sourcecode":"public static int indexOfLastSeparator(java.lang.String filename) {\n    if ((filename.equals(filename)) && ((filename.equals(filename)) || (xmlGuessEnc.equals(filename)))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                return -1;\n            } \n            int int = filename.lastIndexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n            int int = filename.lastIndexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n            return java.lang.Math.max(lastUnixPos, lastWindowsPos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.input.XmlStreamReader.UTF_16LE":"filename","xmlEnc":"filename","org.apache.commons.io.input.XmlStreamReader.UTF_16":"filename","xmlGuessEnc":"filename","org.apache.commons.io.input.XmlStreamReader.UTF_16BE":"filename"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"10944d98-3e71-11e6-96d2-c97dbbf50f46","method":{"position":"org.apache.commons.io.IOUtils:583","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.Reader input, java.lang.String encoding) throws java.io.IOException {\n    if (input == null) {\n        {\n            return org.apache.commons.io.IOUtils.toByteArray(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1026","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"109474a9-3e71-11e6-96d2-33de45e2dda9","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:678","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String magicNumber, long offset) {\n    if (magicNumber == null) {\n        {\n            return new org.apache.commons.io.filefilter.MagicNumberFileFilter(magicNumber , offset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"magicNumber"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:212","type":"CtBinaryOperatorImpl","sourcecode":"(xmlPrologWriter) != null"},"failures":[],"tindex":"109474aa-3e71-11e6-96d2-79318bcfcd97","method":{"position":"org.apache.commons.io.CopyUtils:151","type":"CtMethodImpl","sourcecode":"public static void copy(byte[] input, java.io.Writer output) throws java.io.IOException {\n    if (output != null) {\n        {\n            if (input == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream(input);\n                    org.apache.commons.io.CopyUtils.copy(in, output);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"xmlPrologWriter":"output"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceInputStream:114","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"109474ab-3e71-11e6-96d2-5f71c5ac3266","method":{"position":"org.apache.commons.io.input.SwappedDataInputStream:116","type":"CtMethodImpl","sourcecode":"public void readFully(byte[] data) throws java.io.EOFException, java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            readFully(data, 0, data.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:140","type":"CtBinaryOperatorImpl","sourcecode":"(writer) != null"},"failures":[],"tindex":"109474ac-3e71-11e6-96d2-65fc5fe31465","method":{"position":"org.apache.commons.io.IOUtils:218","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.Writer output) {\n    if (output != null) {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(output)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"writer":"output"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1617","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"10949bbd-3e71-11e6-96d2-1f4e514e9488","method":{"position":"org.apache.commons.io.IOUtils:1568","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void write(java.lang.StringBuffer data, java.io.Writer output) throws java.io.IOException {\n    if (data != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data != null) {\n                output.write(data.toString());\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2621","type":"CtBinaryOperatorImpl","sourcecode":"reference == null"},"failures":[],"tindex":"10949bbe-3e71-11e6-96d2-e5dacc74c7c4","method":{"position":"org.apache.commons.io.filefilter.CanWriteFileFilter:77","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.isDirectory())) {\n        {\n            if (file == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return file.canWrite();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reference":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2744","type":"CtUnaryOperatorImpl","sourcecode":"!(srcDir.isDirectory())"},"failures":[],"tindex":"10949bbf-3e71-11e6-96d2-a57502e9f087","method":{"position":"org.apache.commons.io.filefilter.AbstractFileFilter:39","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File file) {\n    if (!(file.isDirectory())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return accept(file.getParentFile(), file.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:656","type":"CtBinaryOperatorImpl","sourcecode":"httpContentType != null"},"failures":[],"tindex":"10949bc0-3e71-11e6-96d2-1f4406eb1282","method":{"position":"org.apache.commons.io.output.LockableFileWriter:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str, int st, int end) throws java.io.IOException {\n    if (str != null) {\n        {\n            java.io.Writer.write(str, st, end);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:431","type":"CtBinaryOperatorImpl","sourcecode":"size <= prefix"},"failures":[],"tindex":"10949bc1-3e71-11e6-96d2-e576201b32ef","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:136","type":"CtMethodImpl","sourcecode":"protected void beforeWrite(int n) throws java.io.IOException {\n    if ((n++) > n) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n <= n) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"n","prefix":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:291","type":"CtInvocationImpl","sourcecode":"file.exists()"},"failures":[],"tindex":"10949bc2-3e71-11e6-96d2-434545f99229","method":{"position":"org.apache.commons.io.FileUtils:2247","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.util.Collection<?> lines, java.lang.String lineEnding, boolean append) throws java.io.IOException {\n    if (file.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file.exists()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    org.apache.commons.io.FileUtils.writeLines(file, null, lines, lineEnding, append);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1367","type":"CtBinaryOperatorImpl","sourcecode":"(srcDir.exists()) == false"},"failures":[],"tindex":"10949bc3-3e71-11e6-96d2-f71dac4a0961","method":{"position":"org.apache.commons.io.FileUtils:1780","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.File file, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if ((file.exists()) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = org.apache.commons.io.FileUtils.openInputStream(file);\n                return org.apache.commons.io.IOUtils.readLines(in, org.apache.commons.io.Charsets.toCharset(encoding));\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1682","type":"CtBinaryOperatorImpl","sourcecode":"(timeout++) > seconds"},"failures":[],"tindex":"1094c2d4-3e71-11e6-96d2-db1f6a17c031","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:136","type":"CtMethodImpl","sourcecode":"protected void beforeWrite(int n) throws java.io.IOException {\n    if ((n++) > n) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n <= n) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"seconds":"n","timeout":"n"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1367","type":"CtBinaryOperatorImpl","sourcecode":"(srcDir.exists()) == false"},"failures":[],"tindex":"1094c2d5-3e71-11e6-96d2-c53086033771","method":{"position":"org.apache.commons.io.monitor.FileEntry:93","type":"CtMethodImpl","sourcecode":"public boolean refresh(java.io.File file) {\n    if ((file.exists()) == false) {\n        {\n            boolean boolean = boolean;\n            long long = long;\n            boolean boolean = boolean;\n            long long = long;\n            java.lang.String = file.getName();\n            boolean = file.exists();\n            boolean = boolean ? file.isDirectory() : false;\n            long = boolean ? file.lastModified() : 0;\n            long = (boolean) && (!(boolean)) ? file.length() : 0;\n            return ((((boolean) != origExists) || ((long) != origLastModified)) || ((boolean) != origDirectory)) || ((long) != origLength);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:750","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"1094c2d6-3e71-11e6-96d2-93c154e7fa1b","method":{"position":"org.apache.commons.io.FileUtils:864","type":"CtMethodImpl","sourcecode":"static java.lang.String decodeUrl(java.lang.String url) {\n    if (url == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = url;\n            if ((url != null) && ((url.indexOf('%')) >= 0)) {\n                int int = url.length();\n                java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer();\n                java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer.allocate(n);\n                for (int int = 0 ; i < n ; ) {\n                    if ((url.charAt(i)) == '%') {\n                        try {\n                            do {\n                                byte byte = ((byte)(java.lang.Integer.parseInt(url.substring((i + 1), (i + 3)), 16)));\n                                bytes.put(octet);\n                                i += 3;\n                            } while ((i < n) && ((url.charAt(i)) == '%') );\n                            continue;\n                        } catch (java.lang.RuntimeException e) {\n                        } finally {\n                            if ((bytes.position()) > 0) {\n                                bytes.flip();\n                                buffer.append(org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.nio.charset.Charset.decode(bytes).toString());\n                                bytes.clear();\n                            } \n                        }\n                    } \n                    buffer.append(url.charAt((i++)));\n                }\n                decoded = buffer.toString();\n            } \n            return decoded;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"url"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1659","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"1094e9e7-3e71-11e6-96d2-85c28c99f1d1","method":{"position":"org.apache.commons.io.output.TaggedOutputStream:101","type":"CtMethodImpl","sourcecode":"public void throwIfCauseOf(java.lang.Exception exception) throws java.io.IOException {\n    if (null != exception) {\n        {\n            org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(exception, java.io.Serializable);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"exception"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOCase:165","type":"CtBinaryOperatorImpl","sourcecode":"(str1 == null) || (str2 == null)"},"failures":[],"tindex":"1094e9e8-3e71-11e6-96d2-b72f92b2ed13","method":{"position":"org.apache.commons.io.CopyUtils:168","type":"CtMethodImpl","sourcecode":"public static void copy(byte[] input, java.io.Writer output, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding == null) || (encoding == null)) {\n        {\n            java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream(input);\n            org.apache.commons.io.CopyUtils.copy(in, output, encoding);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str1":"encoding","str2":"encoding"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:504","type":"CtBinaryOperatorImpl","sourcecode":"size < 0"},"failures":[],"tindex":"1094e9e9-3e71-11e6-96d2-5fbbdf53ed3e","method":{"position":"org.apache.commons.io.input.BOMInputStream:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void mark(int readlimit) {\n    if (readlimit < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int = int;\n            boolean = (int[]) == null;\n            java.io.InputStream.mark(readlimit);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"readlimit"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:741","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"1094e9ea-3e71-11e6-96d2-4100bac1695f","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:76","type":"CtMethodImpl","sourcecode":"public static java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter filter, java.io.File... files) {\n    if (filter == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filter == null) {\n                throw new java.lang.IllegalArgumentException(\"file filter is null\");\n            } \n            if (files == null) {\n                return new java.io.File[0];\n            } \n            java.util.List<java.io.File> java.util.List<java.io.File> = new java.util.ArrayList<java.io.File>();\n            for (java.io.File java.io.File : files) {\n                if (file == null) {\n                    throw new java.lang.IllegalArgumentException(\"file array contains null\");\n                } \n                if (filter.accept(file)) {\n                    acceptedFiles.add(file);\n                } \n            }\n            return acceptedFiles.toArray(new java.io.File[acceptedFiles.size()]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2554","type":"CtBinaryOperatorImpl","sourcecode":"reference == null"},"failures":[],"tindex":"1094e9eb-3e71-11e6-96d2-b1b762fc2ff6","method":{"position":"org.apache.commons.io.FileUtils:2268","type":"CtMethodImpl","sourcecode":"public static void forceDelete(java.io.File file) throws java.io.IOException {\n    if (file == null) {\n        {\n            if (file.isDirectory()) {\n                org.apache.commons.io.FileUtils.deleteDirectory(file);\n            } else {\n                boolean boolean = file.exists();\n                if (!(file.delete())) {\n                    if (!filePresent) {\n                        throw new java.io.FileNotFoundException((\"File does not exist: \" + file));\n                    } \n                    java.lang.String java.lang.String = \"Unable to delete file: \" + file;\n                    throw new java.io.IOException(message);\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reference":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1079","type":"CtInvocationImpl","sourcecode":"srcFile.getCanonicalPath().equals(destFile.getCanonicalPath())"},"failures":[],"tindex":"1094e9ec-3e71-11e6-96d2-bb5f78f5e661","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:59","type":"CtMethodImpl","sourcecode":"public void onDirectoryDelete(final java.io.File directory) {\n    if (directory.getCanonicalPath().equals(directory.getCanonicalPath())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"directory","srcFile":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"109510fd-3e71-11e6-96d2-d5fd5a504889","method":{"position":"org.apache.commons.io.IOUtils:2214","type":"CtMethodImpl","sourcecode":"public static boolean contentEquals(java.io.Reader input1, java.io.Reader input2) throws java.io.IOException {\n    if (input2 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            input1 = org.apache.commons.io.IOUtils.toBufferedReader(input1);\n            input2 = org.apache.commons.io.IOUtils.toBufferedReader(input2);\n            int int = input1.read();\n            while ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) != ch) {\n                int int = input2.read();\n                if (ch != ch2) {\n                    return false;\n                } \n                ch = input1.read();\n            }\n            int int = input2.read();\n            return ch2 == (org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input2"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2331","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"109510fe-3e71-11e6-96d2-517c6dd8fa7c","method":{"position":"org.apache.commons.io.FileCleaningTracker:120","type":"CtMethodImpl","sourcecode":"public void track(java.lang.String path, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if (!(marker.isDirectory())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (path == null) {\n                throw new java.lang.NullPointerException(\"The path must not be null\");\n            } \n            addTracker(path, marker, deleteStrategy);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"marker"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.StringBuilderWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"value != null"},"failures":[],"tindex":"109510ff-3e71-11e6-96d2-5d24c197b804","method":{"position":"org.apache.commons.io.IOUtils:2495","type":"CtMethodImpl","sourcecode":"public static void readFully(java.io.Reader input, char[] buffer, int offset, int length) throws java.io.IOException {\n    if (length != (-1)) {\n        {\n            if (buffer != null) {\n                {\n                    if (length == (-1)) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            int int = org.apache.commons.io.IOUtils.read(input, buffer, offset, length);\n                            if (actual != length) {\n                                throw new java.io.EOFException((((\"Length to read: \" + length) + \" actual: \") + actual));\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"buffer"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.BoundedInputStream:123","type":"CtBinaryOperatorImpl","sourcecode":"bytesRead == (-1)"},"failures":[],"tindex":"10951100-3e71-11e6-96d2-1ff2b1dc37b7","method":{"position":"org.apache.commons.io.output.CountingOutputStream:53","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected synchronized void beforeWrite(int n) {\n    if (n == (-1)) {\n        {\n            long += n;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytesRead":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.CountingInputStream:71","type":"CtBinaryOperatorImpl","sourcecode":"n != (-1)"},"failures":[],"tindex":"10951101-3e71-11e6-96d2-b58cd992e8ff","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:136","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] value, int offset, int length) {\n    if (offset != (-1)) {\n        {\n            if (value != null) {\n                java.lang.StringBuilder.append(value, offset, length);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:449","type":"CtBinaryOperatorImpl","sourcecode":"filters == null"},"failures":[],"tindex":"10951102-3e71-11e6-96d2-47371a0951f3","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:448","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.io.filefilter.IOFileFilter> toList(org.apache.commons.io.filefilter.IOFileFilter... filters) {\n    if (filters == null) {\n        {\n            if (filters == null) {\n                throw new java.lang.IllegalArgumentException(\"The filters must not be null\");\n            } \n            java.util.List<org.apache.commons.io.filefilter.IOFileFilter> java.util.List<org.apache.commons.io.filefilter.IOFileFilter> = new java.util.ArrayList<org.apache.commons.io.filefilter.IOFileFilter>(filters.int);\n            for (int int = 0 ; i < (filters.int) ; i++) {\n                if ((filters[i]) == null) {\n                    throw new java.lang.IllegalArgumentException(((\"The filter[\" + i) + \"] is null\"));\n                } \n                list.add(filters[i]);\n            }\n            return list;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filters":"filters"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:212","type":"CtBinaryOperatorImpl","sourcecode":"(xmlPrologWriter) != null"},"failures":[],"tindex":"10953813-3e71-11e6-96d2-2d875595fd58","method":{"position":"org.apache.commons.io.IOUtils:1267","type":"CtMethodImpl","sourcecode":"public static void write(byte[] data, java.io.Writer output) throws java.io.IOException {\n    if (output != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"xmlPrologWriter":"output"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2402","type":"CtBinaryOperatorImpl","sourcecode":"length < 0"},"failures":[],"tindex":"10953814-3e71-11e6-96d2-c1996781fe22","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:166","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(int b) {\n    if (b < 0) {\n        {\n            int int = (int) - (int);\n            if (inBufferPos == (byte[].int)) {\n                needNewBuffer(((int) + 1));\n                inBufferPos = 0;\n            } \n            byte[][inBufferPos] = ((byte)(b));\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:750","type":"CtInvocationImpl","sourcecode":"file1.getCanonicalFile().equals(file2.getCanonicalFile())"},"failures":[],"tindex":"10953815-3e71-11e6-96d2-e795c48c895b","method":{"position":"org.apache.commons.io.filefilter.AndFileFilter:117","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(final java.io.File file) {\n    if (file.getCanonicalFile().equals(file.getCanonicalFile())) {\n        {\n            if (org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.isEmpty()) {\n                return false;\n            } \n            for (org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter : java.util.List<org.apache.commons.io.filefilter.IOFileFilter>) {\n                if (!(fileFilter.accept(file))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file","file1":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.DirectoryWalker:301","type":"CtBinaryOperatorImpl","sourcecode":"(directoryFilter == null) && (fileFilter == null)"},"failures":[],"tindex":"10953816-3e71-11e6-96d2-e3afaafea16b","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:740","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if ((filter == null) && (filter == null)) {\n        {\n            if (filter == null) {\n                return org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.IOFileFilter;\n            } else {\n                return org.apache.commons.io.filefilter.FileFilterUtils.and(filter, org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.IOFileFilter);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilter":"filter","directoryFilter":"filter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2791","type":"CtUnaryOperatorImpl","sourcecode":"!(destDir.isDirectory())"},"failures":[],"tindex":"10953817-3e71-11e6-96d2-2f25d4e513fd","method":{"position":"org.apache.commons.io.filefilter.CanWriteFileFilter:77","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.isDirectory())) {\n        {\n            if (file == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return file.canWrite();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.NullInputStream:189","type":"CtBinaryOperatorImpl","sourcecode":"(position) == (size)"},"failures":[],"tindex":"10955f28-3e71-11e6-96d2-037d039092e2","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:542","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long cutoff, boolean acceptOlder) {\n    if (cutoff == cutoff) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.AgeFileFilter(cutoff , acceptOlder);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"cutoff","position":"cutoff"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.TeeInputStream:109","type":"CtBinaryOperatorImpl","sourcecode":"ch != (-1)"},"failures":[],"tindex":"10955f29-3e71-11e6-96d2-89f811f4d7c8","method":{"position":"org.apache.commons.io.IOUtils:2495","type":"CtMethodImpl","sourcecode":"public static void readFully(java.io.Reader input, char[] buffer, int offset, int length) throws java.io.IOException {\n    if (length != (-1)) {\n        {\n            if (buffer != null) {\n                {\n                    if (length == (-1)) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            int int = org.apache.commons.io.IOUtils.read(input, buffer, offset, length);\n                            if (actual != length) {\n                                throw new java.io.EOFException((((\"Length to read: \" + length) + \" actual: \") + actual));\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.ByteOrderMark:174","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"10955f2a-3e71-11e6-96d2-b39abcdc73a5","method":{"position":"org.apache.commons.io.output.ProxyWriter:259","type":"CtMethodImpl","sourcecode":"protected void afterWrite(int n) throws java.io.IOException {\n    if (n > 0) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:996","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"10955f2b-3e71-11e6-96d2-ed9661c1cb7b","method":{"position":"org.apache.commons.io.output.LockableFileWriter:349","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str) throws java.io.IOException {\n    if (str == null) {\n        {\n            java.io.Writer.write(str);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"(writer) == null"},"failures":[],"tindex":"10955f2c-3e71-11e6-96d2-db0ae7e65ffd","method":{"position":"org.apache.commons.io.IOUtils:1328","type":"CtMethodImpl","sourcecode":"public static void write(char[] data, java.io.Writer output) throws java.io.IOException {\n    if (output == null) {\n        {\n            if (data != null) {\n                output.write(data);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"writer":"output"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1325","type":"CtBinaryOperatorImpl","sourcecode":"textIdx == (-1)"},"failures":[],"tindex":"10955f2d-3e71-11e6-96d2-5f30e0feabbd","method":{"position":"org.apache.commons.io.DirectoryWalker:503","type":"CtMethodImpl","sourcecode":"protected void handleDirectoryStart(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (depth == (-1)) {\n        {\n            if (depth < 0) {\n                {\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"textIdx":"depth"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:996","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"10955f2e-3e71-11e6-96d2-2da3686e2230","method":{"position":"org.apache.commons.io.IOUtils:1525","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data != null) {\n                output.write(data.getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2896","type":"CtUnaryOperatorImpl","sourcecode":"!(src.exists())"},"failures":[],"tindex":"10955f2f-3e71-11e6-96d2-97aeb8b60d5e","method":{"position":"org.apache.commons.io.FileUtils:976","type":"CtMethodImpl","sourcecode":"public static void copyFileToDirectory(java.io.File srcFile, java.io.File destDir) throws java.io.IOException {\n    if (!(destDir.exists())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.copyFileToDirectory(srcFile, destDir, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"destDir"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:356","type":"CtBinaryOperatorImpl","sourcecode":"(file.canWrite()) == false"},"failures":[],"tindex":"10958640-3e71-11e6-96d2-fde16e23ffb8","method":{"position":"org.apache.commons.io.comparator.NameFileComparator:101","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if ((file1.canWrite()) == false) {\n        {\n            return org.apache.commons.io.IOCase.checkCompareTo(file1.getName(), file2.getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BoundedInputStream:123","type":"CtBinaryOperatorImpl","sourcecode":"bytesRead == (-1)"},"failures":[],"tindex":"10958641-3e71-11e6-96d2-6111075fd46d","method":{"position":"org.apache.commons.io.output.ThresholdingOutputStream:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            checkThreshold(1);\n            getStream().write(b);\n            (long)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytesRead":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1367","type":"CtBinaryOperatorImpl","sourcecode":"(srcDir.exists()) == false"},"failures":[],"tindex":"10958642-3e71-11e6-96d2-030478938a39","method":{"position":"org.apache.commons.io.FileUtils:2920","type":"CtMethodImpl","sourcecode":"public static boolean isSymlink(java.io.File file) throws java.io.IOException {\n    if ((file.exists()) == false) {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File must not be null\");\n            } \n            if (org.apache.commons.io.FilenameUtils.isSystemWindows()) {\n                return false;\n            } \n            java.io.File java.io.File = null;\n            if ((file.getParent()) == null) {\n                fileInCanonicalDir = file;\n            } else {\n                java.io.File java.io.File = file.getParentFile().getCanonicalFile();\n                fileInCanonicalDir = new java.io.File(canonicalDir , file.getName());\n            }\n            if (fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2506","type":"CtBinaryOperatorImpl","sourcecode":"files == null"},"failures":[],"tindex":"10958643-3e71-11e6-96d2-17c557bb34cc","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:180","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.io.File> filterList(org.apache.commons.io.filefilter.IOFileFilter filter, java.io.File... files) {\n    if (files == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.File[] java.io.File[] = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files);\n            return java.util.Arrays.asList(acceptedFiles);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.AbstractFileComparator:61","type":"CtBinaryOperatorImpl","sourcecode":"files != null"},"failures":[],"tindex":"10958644-3e71-11e6-96d2-89424cf1524a","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:121","type":"CtMethodImpl","sourcecode":"public static java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter filter, java.lang.Iterable<java.io.File> files) {\n    if (files != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<java.io.File> java.util.List<java.io.File> = org.apache.commons.io.filefilter.FileFilterUtils.filterList(filter, files);\n            return acceptedFiles.toArray(new java.io.File[acceptedFiles.size()]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:270","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"10958645-3e71-11e6-96d2-071da3e0fba6","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:268","type":"CtMethodImpl","sourcecode":"private static <T extends java.util.Collection<java.io.File>>T filter(org.apache.commons.io.filefilter.IOFileFilter filter, java.lang.Iterable<java.io.File> files, T acceptedFiles) {\n    if (filter == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filter == null) {\n                throw new java.lang.IllegalArgumentException(\"file filter is null\");\n            } \n            if (files != null) {\n                for (java.io.File java.io.File : files) {\n                    if (file == null) {\n                        throw new java.lang.IllegalArgumentException(\"file collection contains null\");\n                    } \n                    if (filter.accept(file)) {\n                        acceptedFiles.add(file);\n                    } \n                }\n            } \n            return acceptedFiles;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:116","type":"CtInvocationImpl","sourcecode":"file2.isDirectory()"},"failures":[],"tindex":"10958646-3e71-11e6-96d2-fd38571b29d7","method":{"position":"org.apache.commons.io.FileUtils:2247","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.util.Collection<?> lines, java.lang.String lineEnding, boolean append) throws java.io.IOException {\n    if (file.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file.exists()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    org.apache.commons.io.FileUtils.writeLines(file, null, lines, lineEnding, append);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.EmptyFileFilter:77","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"1095ad57-3e71-11e6-96d2-4ddfd8774d23","method":{"position":"org.apache.commons.io.DirectoryWalker:329","type":"CtMethodImpl","sourcecode":"protected final void walk(java.io.File startDirectory, java.util.Collection<T> results) throws java.io.IOException {\n    if (startDirectory.isDirectory()) {\n        {\n            if (startDirectory == null) {\n                throw new java.lang.NullPointerException(\"Start Directory is null\");\n            } \n            try {\n                handleStart(startDirectory, results);\n                walk(startDirectory, 0, results);\n                handleEnd(results);\n            } catch (org.apache.commons.io.DirectoryWalker.CancelException cancel) {\n                handleCancelled(startDirectory, results, cancel);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"startDirectory"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:750","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"1095ad58-3e71-11e6-96d2-fd92e9f648eb","method":{"position":"org.apache.commons.io.FilenameUtils:1259","type":"CtMethodImpl","sourcecode":"public static boolean wildcardMatchOnSystem(java.lang.String filename, java.lang.String wildcardMatcher) {\n    if (wildcardMatcher == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249907140/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.wildcardMatch(filename, wildcardMatcher, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"wildcardMatcher"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
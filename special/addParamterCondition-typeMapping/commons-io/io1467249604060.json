{"failureDictionary":{},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:57","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"c5fb6bc1-3e60-11e6-9cbb-d3d4dd4057e0","method":{"position":"org.apache.commons.io.FilenameUtils:553","type":"CtMethodImpl","sourcecode":"public static java.lang.String separatorsToUnix(java.lang.String path) {\n    if (path == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (path == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (path == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((path == null) || ((path.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char)) == (-1))) {\n                                return path;\n                            } \n                            return path.replace(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"path"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:508","type":"CtBinaryOperatorImpl","sourcecode":"size == 0"},"failures":[],"tindex":"c5fbb9e2-3e60-11e6-9cbb-a37d83672416","method":{"position":"org.apache.commons.io.output.XmlStreamWriter:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] cbuf, int off, int len) throws java.io.IOException {\n    if (len == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (off == 0) {\n                {\n                    if ((java.io.StringWriter) != null) {\n                        detectEncoding(cbuf, off, len);\n                    } else {\n                        java.io.Writer.write(cbuf, off, len);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"off"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:492","type":"CtBinaryOperatorImpl","sourcecode":"encoding == null"},"failures":[],"tindex":"c5fbb9e3-3e60-11e6-9cbb-bb2376cd6299","method":{"position":"org.apache.commons.io.IOCase:164","type":"CtMethodImpl","sourcecode":"public boolean checkEquals(java.lang.String str1, java.lang.String str2) {\n    if (str1 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((str1 == null) || (str2 == null)) {\n                throw new java.lang.NullPointerException(\"The strings must not be null\");\n            } \n            return boolean ? str1.equals(str2) : str1.equalsIgnoreCase(str2);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"str1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2273","type":"CtUnaryOperatorImpl","sourcecode":"!(file.delete())"},"failures":[],"tindex":"c5fbe0f4-3e60-11e6-9cbb-6337e7aa9a1c","method":{"position":"org.apache.commons.io.filefilter.AgeFileFilter:142","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.delete())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = org.apache.commons.io.FileUtils.isFileNewer(file, long);\n            return boolean ? !newer : newer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceInputStream:114","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"c5fbe0f5-3e60-11e6-9cbb-0d509f37ffbf","method":{"position":"org.apache.commons.io.input.ReaderInputStream:260","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        {\n            return read(b, 0, b.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2812","type":"CtBinaryOperatorImpl","sourcecode":"srcFile == null"},"failures":[],"tindex":"c5fbe0f6-3e60-11e6-9cbb-c9d79f53817e","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:394","type":"CtMethodImpl","sourcecode":"private void doMatch(org.apache.commons.io.monitor.FileEntry entry, java.io.File file) {\n    if (file == null) {\n        {\n            if (entry.refresh(file)) {\n                for (org.apache.commons.io.monitor.FileAlterationListener org.apache.commons.io.monitor.FileAlterationListener : java.util.List<org.apache.commons.io.monitor.FileAlterationListener>) {\n                    if (entry.isDirectory()) {\n                        listener.onDirectoryChange(file);\n                    } else {\n                        listener.onFileChange(file);\n                    }\n                }\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2855","type":"CtBinaryOperatorImpl","sourcecode":"srcFile == null"},"failures":[],"tindex":"c5fbe0f7-3e60-11e6-9cbb-595093ed3310","method":{"position":"org.apache.commons.io.FileUtils:1975","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data, boolean append) throws java.io.IOException {\n    if (file == null) {\n        {\n            if (file == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    org.apache.commons.io.FileUtils.writeStringToFile(file, data, java.nio.charset.Charset.defaultCharset(), append);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl","sourcecode":"!(input1 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"c5fc0808-3e60-11e6-9cbb-03eb1d634674","method":{"position":"org.apache.commons.io.IOUtils:1767","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.InputStream input, java.io.OutputStream output) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.copyLarge(input, output, new byte[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1129","type":"CtBinaryOperatorImpl","sourcecode":"(destFile.exists()) && (destFile.isDirectory())"},"failures":[],"tindex":"c5fc0809-3e60-11e6-9cbb-158bd71d8953","method":{"position":"org.apache.commons.io.filefilter.AbstractFileFilter:39","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File file) {\n    if (file == null) {\n        {\n            if ((file.exists()) && (destFile.isDirectory())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return accept(file.getParentFile(), file.getName());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1530","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.exists())"},"failures":[],"tindex":"c5fc080a-3e60-11e6-9cbb-9d5e2f14ae05","method":{"position":"org.apache.commons.io.filefilter.FalseFileFilter:57","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File file) {\n    if (!(file.exists())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.OrFileFilter:75","type":"CtBinaryOperatorImpl","sourcecode":"(filter1 == null) || (filter2 == null)"},"failures":[],"tindex":"c5fc080b-3e60-11e6-9cbb-99e41d74d692","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:757","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if ((filter == null) || (filter == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((filter == null) || (filter == null)) {\n                {\n                    if (filter == null) {\n                        return org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.IOFileFilter;\n                    } else {\n                        return org.apache.commons.io.filefilter.FileFilterUtils.and(filter, org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.IOFileFilter);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"filter","filter2":"filter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1449","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"c5fc2f1c-3e60-11e6-9cbb-3f021e672176","method":{"position":"org.apache.commons.io.output.ProxyWriter:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence csq) throws java.io.IOException {\n    if (csq != null) {\n        {\n            try {\n                int int = 0;\n                if (csq != null) {\n                    len = csq.length();\n                } \n                beforeWrite(len);\n                java.io.Writer.append(csq);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n            return org.apache.commons.io.output.ProxyWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"csq"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2368","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"c5fc2f1d-3e60-11e6-9cbb-f99798bd83d8","method":{"position":"org.apache.commons.io.filefilter.HiddenFileFilter:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.isDirectory())) {\n        {\n            return file.isHidden();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:134","type":"CtBinaryOperatorImpl","sourcecode":"chr != null"},"failures":[],"tindex":"c5fc2f1e-3e60-11e6-9cbb-011a5c297eb2","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:136","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] value, int offset, int length) {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value != null) {\n                java.lang.StringBuilder.append(value, offset, length);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:689","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"c5fc562f-3e60-11e6-9cbb-5df2d8bdcad6","method":{"position":"org.apache.commons.io.FilenameUtils:553","type":"CtMethodImpl","sourcecode":"public static java.lang.String separatorsToUnix(java.lang.String path) {\n    if (path == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (path == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (path == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((path == null) || ((path.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char)) == (-1))) {\n                                return path;\n                            } \n                            return path.replace(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"path"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:610","type":"CtBinaryOperatorImpl","sourcecode":"(cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE))"},"failures":[],"tindex":"c5fc5630-3e60-11e6-9cbb-d7866fa5ac77","method":{"position":"org.apache.commons.io.output.NullWriter:75","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence csq) {\n    if ((csq.equals(csq)) || (cTEnc.equals(csq))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.output.NullWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cTEnc":"csq","org.apache.commons.io.input.XmlStreamReader.UTF_16LE":"csq","org.apache.commons.io.input.XmlStreamReader.UTF_16BE":"csq"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:430","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"c5fc5631-3e60-11e6-9cbb-b5ef5786ca96","method":{"position":"org.apache.commons.io.FileUtils:2643","type":"CtMethodImpl","sourcecode":"public static boolean isFileOlder(java.io.File file, java.util.Date date) {\n    if (!(file.isDirectory())) {\n        {\n            if (file.isDirectory()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (date == null) {\n                        throw new java.lang.IllegalArgumentException(\"No specified date\");\n                    } \n                    return org.apache.commons.io.FileUtils.isFileOlder(file, date.getTime());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1079","type":"CtInvocationImpl","sourcecode":"srcFile.getCanonicalPath().equals(destFile.getCanonicalPath())"},"failures":[],"tindex":"c5fc5632-3e60-11e6-9cbb-bf5463c100f8","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:83","type":"CtMethodImpl","sourcecode":"public void onFileDelete(final java.io.File file) {\n    if (file.getCanonicalPath().equals(file.getCanonicalPath())) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"file","srcFile":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullInputStream:284","type":"CtBinaryOperatorImpl","sourcecode":"(position) == (size)"},"failures":[],"tindex":"c5fc5633-3e60-11e6-9cbb-adac13f83391","method":{"position":"org.apache.commons.io.IOUtils:2277","type":"CtMethodImpl","sourcecode":"public static long skip(java.io.InputStream input, long toSkip) throws java.io.IOException {\n    if (toSkip == toSkip) {\n        {\n            if (toSkip < 0) {\n                throw new java.lang.IllegalArgumentException((\"Skip count must be non-negative, actual: \" + toSkip));\n            } \n            if ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.byte[]) == null) {\n                org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.byte[] = new byte[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int];\n            } \n            long long = toSkip;\n            while (remain > 0) {\n                long long = input.read(org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.byte[], 0, ((int)(java.lang.Math.min(remain, org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int))));\n                if (n < 0) {\n                    break;\n                } \n                remain -= n;\n            }\n            return toSkip - remain;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"toSkip","position":"toSkip"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:486","type":"CtBinaryOperatorImpl","sourcecode":"prefix > 0"},"failures":[],"tindex":"c5fc7d44-3e60-11e6-9cbb-0d8369cc5cc2","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:96","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence value, int start, int end) {\n    if (start == 0) {\n        {\n            if (end > 0) {\n                {\n                    java.lang.StringBuilder.append(value, start, end);\n                    return org.apache.commons.io.output.StringBuilderWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:72","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"c5fc7d45-3e60-11e6-9cbb-212e2817099e","method":{"position":"org.apache.commons.io.IOUtils:916","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URL url, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            return org.apache.commons.io.IOUtils.toString(url, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"encoding"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.ByteOrderMark:174","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"c5fc7d46-3e60-11e6-9cbb-add671394f04","method":{"position":"org.apache.commons.io.input.ProxyReader:223","type":"CtMethodImpl","sourcecode":"protected void beforeRead(int n) throws java.io.IOException {\n    if ((n++) > n) {\n        {\n            if (n > 0) {\n                {\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.Exception","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:124","type":"CtBinaryOperatorImpl","sourcecode":"result > 0"},"failures":[],"tindex":"c5fc7d47-3e60-11e6-9cbb-491c48cb78c1","method":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:161","type":"CtMethodImpl","sourcecode":"public synchronized void stop(long stopInterval) throws java.lang.Exception {\n    if (stopInterval > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.Exception();\n    } else {\n        {\n            if ((boolean) == false) {\n                throw new java.lang.IllegalStateException(\"Monitor is not running\");\n            } \n            boolean = false;\n            try {\n                java.lang.Thread.join(stopInterval);\n            } catch (java.lang.InterruptedException e) {\n                java.lang.Thread.currentThread().interrupt();\n            }\n            for (org.apache.commons.io.monitor.FileAlterationObserver org.apache.commons.io.monitor.FileAlterationObserver : java.util.List<org.apache.commons.io.monitor.FileAlterationObserver>) {\n                observer.destroy();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"stopInterval"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2663","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"c5fc7d48-3e60-11e6-9cbb-27baddf926d3","method":{"position":"org.apache.commons.io.filefilter.SuffixFileFilter:168","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file, java.lang.String name) {\n    if (file == null) {\n        {\n            for (java.lang.String java.lang.String : org.apache.commons.io.filefilter.SuffixFileFilter.this.java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkEndsWith(name, suffix)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:167","type":"CtBinaryOperatorImpl","sourcecode":"xmlPrologEnd > 0"},"failures":[],"tindex":"c5fca459-3e60-11e6-9cbb-ef4e715b6cb5","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:153","type":"CtMethodImpl","sourcecode":"protected void afterWrite(int n) throws java.io.IOException {\n    if (n > 0) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"xmlPrologEnd":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1680","type":"CtBinaryOperatorImpl","sourcecode":"(tick++) >= 10"},"failures":[],"tindex":"c5fca45a-3e60-11e6-9cbb-631648bc2d21","method":{"position":"org.apache.commons.io.IOUtils:502","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.InputStream input, int size) throws java.io.IOException {\n    if ((size++) >= 10) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (size < 0) {\n                throw new java.lang.IllegalArgumentException((\"Size must be equal or greater than zero: \" + size));\n            } \n            if (size == 0) {\n                return new byte[0];\n            } \n            byte[] byte[] = new byte[size];\n            int int = 0;\n            int int;\n            while ((offset < size) && ((readed = input.read(data, offset, (size - offset))) != (org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int))) {\n                offset += readed;\n            }\n            if (offset != size) {\n                throw new java.io.IOException((((\"Unexpected readed size. current: \" + offset) + \", excepted: \") + size));\n            } \n            return data;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"tick":"size"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2663","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"c5fca45b-3e60-11e6-9cbb-cdb143e90c57","method":{"position":"org.apache.commons.io.FileUtils:1975","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data, boolean append) throws java.io.IOException {\n    if (file == null) {\n        {\n            if (file == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    org.apache.commons.io.FileUtils.writeStringToFile(file, data, java.nio.charset.Charset.defaultCharset(), append);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1379","type":"CtInvocationImpl","sourcecode":"destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())"},"failures":[],"tindex":"c5fca45c-3e60-11e6-9cbb-57dd6569a6ae","method":{"position":"org.apache.commons.io.FileUtils:1560","type":"CtMethodImpl","sourcecode":"public static boolean deleteQuietly(java.io.File file) {\n    if (file.getCanonicalPath().startsWith(file.getCanonicalPath())) {\n        {\n            if (file == null) {\n                return false;\n            } \n            try {\n                if (file.isDirectory()) {\n                    org.apache.commons.io.FileUtils.cleanDirectory(file);\n                } \n            } catch (java.lang.Exception ignored) {\n            }\n            try {\n                return file.delete();\n            } catch (java.lang.Exception ignored) {\n                return false;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file","destDir":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.AndFileFilter:118","type":"CtInvocationImpl","sourcecode":"org.apache.commons.io.filefilter.AndFileFilter.this.fileFilters.isEmpty()"},"failures":[],"tindex":"c5fccb6d-3e60-11e6-9cbb-df8e47feb461","method":{"position":"org.apache.commons.io.filefilter.OrFileFilter:107","type":"CtMethodImpl","sourcecode":"public void setFileFilters(final java.util.List<org.apache.commons.io.filefilter.IOFileFilter> fileFilters) {\n    if (fileFilters.isEmpty()) {\n        {\n            org.apache.commons.io.filefilter.OrFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.clear();\n            org.apache.commons.io.filefilter.OrFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.addAll(fileFilters);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilters":"fileFilters"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:741","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"c5fccb6e-3e60-11e6-9cbb-0f6ce850c609","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:515","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FilenameFilter filter) {\n    if (filter == null) {\n        {\n            return new org.apache.commons.io.filefilter.DelegateFileFilter(filter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:841","type":"CtBinaryOperatorImpl","sourcecode":"(url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))"},"failures":[],"tindex":"c5fccb6f-3e60-11e6-9cbb-af4752f99d36","method":{"position":"org.apache.commons.io.FileUtils:840","type":"CtMethodImpl","sourcecode":"public static java.io.File toFile(java.net.URL url) {\n    if ((url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))) {\n        {\n            if ((url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))) {\n                return null;\n            } else {\n                java.lang.String java.lang.String = url.getFile().replace('/', java.io.File.java.io.File.char);\n                filename = org.apache.commons.io.FileUtils.decodeUrl(filename);\n                return new java.io.File(filename);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"url":"url"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:380","type":"CtBinaryOperatorImpl","sourcecode":"(path.length()) == 0"},"failures":[],"tindex":"c5fccb70-3e60-11e6-9cbb-fb5fb72bf93e","method":{"position":"org.apache.commons.io.IOCase:80","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.IOCase forName(java.lang.String name) {\n    if ((name.length()) == 0) {\n        {\n            if (org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.java.lang.String.equals(name)) {\n                return org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase;\n            } \n            if (org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.java.lang.String.equals(name)) {\n                return org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase;\n            } \n            if (org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.java.lang.String.equals(name)) {\n                return org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase;\n            } \n            throw new java.lang.IllegalArgumentException((\"Invalid IOCase name: \" + name));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1361","type":"CtBinaryOperatorImpl","sourcecode":"srcDir == null"},"failures":[],"tindex":"c5fccb71-3e60-11e6-9cbb-7bb1323a5ed5","method":{"position":"org.apache.commons.io.FileUtils:2734","type":"CtMethodImpl","sourcecode":"public static void moveDirectory(java.io.File srcDir, java.io.File destDir) throws java.io.IOException {\n    if (srcDir == null) {\n        {\n            if (srcDir == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if (!(srcDir.exists())) {\n                throw new java.io.FileNotFoundException(((\"Source '\" + srcDir) + \"' does not exist\"));\n            } \n            if (!(srcDir.isDirectory())) {\n                throw new java.io.IOException(((\"Source '\" + srcDir) + \"' is not a directory\"));\n            } \n            if (destDir.exists()) {\n                throw new org.apache.commons.io.FileExistsException(((\"Destination '\" + destDir) + \"' already exists\"));\n            } \n            boolean boolean = srcDir.renameTo(destDir);\n            if (!rename) {\n                if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {\n                    throw new java.io.IOException((((\"Cannot move directory: \" + srcDir) + \" to a subdirectory of itself: \") + destDir));\n                } \n                org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);\n                org.apache.commons.io.FileUtils.deleteDirectory(srcDir);\n                if (srcDir.exists()) {\n                    throw new java.io.IOException(((((\"Failed to delete original directory '\" + srcDir) + \"' after copy to '\") + destDir) + \"'\"));\n                } \n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"srcDir"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2534","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"c5fcf282-3e60-11e6-9cbb-c3a0d902700e","method":{"position":"org.apache.commons.io.FileUtils:2643","type":"CtMethodImpl","sourcecode":"public static boolean isFileOlder(java.io.File file, java.util.Date date) {\n    if (!(file.isDirectory())) {\n        {\n            if (file.isDirectory()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (date == null) {\n                        throw new java.lang.IllegalArgumentException(\"No specified date\");\n                    } \n                    return org.apache.commons.io.FileUtils.isFileOlder(file, date.getTime());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:184","type":"CtUnaryOperatorImpl","sourcecode":"!(running)"},"failures":[],"tindex":"c5fcf283-3e60-11e6-9cbb-870eade9bb58","method":{"position":"org.apache.commons.io.monitor.FileEntry:247","type":"CtMethodImpl","sourcecode":"public void setExists(boolean exists) {\n    if (!exists) {\n        {\n            org.apache.commons.io.monitor.FileEntry.this.boolean = exists;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"running":"exists"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:110","type":"CtInvocationImpl","sourcecode":"file1.isDirectory()"},"failures":[],"tindex":"c5fcf284-3e60-11e6-9cbb-91d114714f71","method":{"position":"org.apache.commons.io.filefilter.NotFileFilter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        {\n            return !(org.apache.commons.io.filefilter.IOFileFilter.accept(file));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file1":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.SuffixFileFilter:73","type":"CtBinaryOperatorImpl","sourcecode":"suffix == null"},"failures":[],"tindex":"c5fcf285-3e60-11e6-9cbb-777d5574afaa","method":{"position":"org.apache.commons.io.FilenameUtils:553","type":"CtMethodImpl","sourcecode":"public static java.lang.String separatorsToUnix(java.lang.String path) {\n    if (path == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (path == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (path == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((path == null) || ((path.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char)) == (-1))) {\n                                return path;\n                            } \n                            return path.replace(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"suffix":"path"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.DirectoryWalker:363","type":"CtInvocationImpl","sourcecode":"childFile.isDirectory()"},"failures":[],"tindex":"c5fcf286-3e60-11e6-9cbb-6d0b241c860a","method":{"position":"org.apache.commons.io.FileUtils:2620","type":"CtMethodImpl","sourcecode":"public static boolean isFileOlder(java.io.File file, java.io.File reference) {\n    if (reference.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (reference == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified reference file\");\n            } \n            if (!(reference.exists())) {\n                throw new java.lang.IllegalArgumentException(((\"The reference file '\" + reference) + \"' doesn't exist\"));\n            } \n            return org.apache.commons.io.FileUtils.isFileOlder(file, reference.lastModified());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"childFile":"reference"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:134","type":"CtBinaryOperatorImpl","sourcecode":"chr != null"},"failures":[],"tindex":"c5fd1997-3e60-11e6-9cbb-41384d43c559","method":{"position":"org.apache.commons.io.IOUtils:1328","type":"CtMethodImpl","sourcecode":"public static void write(char[] data, java.io.Writer output) throws java.io.IOException {\n    if (data != null) {\n        {\n            if (data != null) {\n                output.write(data);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2747","type":"CtInvocationImpl","sourcecode":"destDir.exists()"},"failures":[],"tindex":"c5fd1998-3e60-11e6-9cbb-b7386a1e0b03","method":{"position":"org.apache.commons.io.filefilter.DelegateFileFilter:89","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if (dir.exists()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.io.FilenameFilter) != null) {\n                return java.io.FilenameFilter.accept(dir, name);\n            } else {\n                return super.accept(dir, name);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"dir"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:841","type":"CtBinaryOperatorImpl","sourcecode":"(url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))"},"failures":[],"tindex":"c5fd1999-3e60-11e6-9cbb-93358aa05c65","method":{"position":"org.apache.commons.io.IOUtils:878","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URL url) throws java.io.IOException {\n    if ((url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))) {\n        {\n            return org.apache.commons.io.IOUtils.toString(url, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"url":"url"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:508","type":"CtBinaryOperatorImpl","sourcecode":"size == 0"},"failures":[],"tindex":"c5fd199a-3e60-11e6-9cbb-37c340a679e5","method":{"position":"org.apache.commons.io.input.BoundedInputStream:116","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b, int off, int len) throws java.io.IOException {\n    if (len == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (((long) >= 0) && ((long) >= (long))) {\n                return -1;\n            } \n            long long = (long) >= 0 ? java.lang.Math.min(len, ((long) - (long))) : len;\n            int int = java.io.InputStream.read(b, off, ((int)(maxRead)));\n            if (bytesRead == (-1)) {\n                return -1;\n            } \n            long += bytesRead;\n            return bytesRead;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"len"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:512","type":"CtBinaryOperatorImpl","sourcecode":"(xmlGuessEnc == null) || (xmlEnc == null)"},"failures":[],"tindex":"c5fd199b-3e60-11e6-9cbb-c14de13f887c","method":{"position":"org.apache.commons.io.IOUtils:801","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding == null) || (encoding == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toString(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"xmlEnc":"encoding","xmlGuessEnc":"encoding"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"c5fd199c-3e60-11e6-9cbb-d7d38ec23d0b","method":{"position":"org.apache.commons.io.IOUtils:931","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String toString(byte[] input) throws java.io.IOException {\n    if (input == null) {\n        {\n            if (input != null) {\n                {\n                    return new java.lang.String(input);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1156","type":"CtBinaryOperatorImpl","sourcecode":"(srcFile.length()) != (destFile.length())"},"failures":[],"tindex":"c5fd40ad-3e60-11e6-9cbb-e17da16b314a","method":{"position":"org.apache.commons.io.FileUtils:2307","type":"CtMethodImpl","sourcecode":"private static void deleteDirectoryOnExit(java.io.File directory) throws java.io.IOException {\n    if ((directory.length()) != (directory.length())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(directory.exists())) {\n                return ;\n            } \n            directory.deleteOnExit();\n            if (!(org.apache.commons.io.FileUtils.isSymlink(directory))) {\n                org.apache.commons.io.FileUtils.cleanDirectoryOnExit(directory);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"directory","srcFile":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.AndFileFilter:76","type":"CtBinaryOperatorImpl","sourcecode":"(filter1 == null) || (filter2 == null)"},"failures":[],"tindex":"c5fd40ae-3e60-11e6-9cbb-091d82aad77f","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:469","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if ((filter == null) || (filter == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.NotFileFilter(filter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"filter","filter2":"filter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:914","type":"CtVariableReadImpl","sourcecode":"includeSeparator"},"failures":[],"tindex":"c5fd40af-3e60-11e6-9cbb-434e780a40df","method":{"position":"org.apache.commons.io.input.XmlStreamReader:579","type":"CtMethodImpl","sourcecode":"java.lang.String calculateHttpEncoding(java.lang.String httpContentType, java.lang.String bomEnc, java.lang.String xmlGuessEnc, java.lang.String xmlEnc, boolean lenient) throws java.io.IOException {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (lenient && (xmlEnc != null)) {\n                return xmlEnc;\n            } \n            java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(httpContentType);\n            java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(httpContentType);\n            boolean boolean = org.apache.commons.io.input.XmlStreamReader.isAppXml(cTMime);\n            boolean boolean = org.apache.commons.io.input.XmlStreamReader.isTextXml(cTMime);\n            if ((!appXml) && (!textXml)) {\n                java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n            } \n            if (cTEnc == null) {\n                if (appXml) {\n                    return calculateRawEncoding(bomEnc, xmlGuessEnc, xmlEnc);\n                } else {\n                    return (java.lang.String) == null ? org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String : java.lang.String;\n                }\n            } \n            if ((cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                if (bomEnc != null) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                return cTEnc;\n            } \n            if (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) {\n                if ((bomEnc != null) && (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                    return bomEnc;\n                } \n                java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n            } \n            if ((cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                if (bomEnc != null) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                return cTEnc;\n            } \n            if (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) {\n                if ((bomEnc != null) && (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                    return bomEnc;\n                } \n                java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n            } \n            return cTEnc;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"includeSeparator":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1367","type":"CtBinaryOperatorImpl","sourcecode":"(srcDir.exists()) == false"},"failures":[],"tindex":"c5fd67c0-3e60-11e6-9cbb-cb5b55726bf8","method":{"position":"org.apache.commons.io.comparator.DefaultFileComparator:63","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if ((file1.exists()) == false) {\n        {\n            return file1.compareTo(file2);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file1"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BoundedInputStream:150","type":"CtBinaryOperatorImpl","sourcecode":"((max) >= 0) && ((pos) >= (max))"},"failures":[],"tindex":"c5fd67c1-3e60-11e6-9cbb-eb6d417bb431","method":{"position":"org.apache.commons.io.IOUtils:1818","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.InputStream input, java.io.OutputStream output, long inputOffset, long length) throws java.io.IOException {\n    if ((length >= 0) && (length >= (long))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.copyLarge(input, output, inputOffset, length, new byte[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"max":"length","pos":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1371","type":"CtBinaryOperatorImpl","sourcecode":"((text.indexOf('?')) == (-1)) && ((text.indexOf('*')) == (-1))"},"failures":[],"tindex":"c5fd67c2-3e60-11e6-9cbb-65657ffa3c52","method":{"position":"org.apache.commons.io.FilenameUtils:1233","type":"CtMethodImpl","sourcecode":"public static boolean wildcardMatch(java.lang.String filename, java.lang.String wildcardMatcher) {\n    if (((wildcardMatcher.indexOf('?')) == (-1)) && ((text.indexOf('*')) == (-1))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.wildcardMatch(filename, wildcardMatcher, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"wildcardMatcher"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:111","type":"CtBinaryOperatorImpl","sourcecode":"(charset == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))"},"failures":[],"tindex":"c5fd67c3-3e60-11e6-9cbb-c72c0c41e195","method":{"position":"org.apache.commons.io.Charsets:66","type":"CtMethodImpl","sourcecode":"public static java.nio.charset.Charset toCharset(java.nio.charset.Charset charset) {\n    if ((charset == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return charset == null ? java.nio.charset.Charset.defaultCharset() : charset;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"charset"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:65","type":"CtBinaryOperatorImpl","sourcecode":"wildcard == null"},"failures":[],"tindex":"c5fd67c4-3e60-11e6-9cbb-7bcd7f2a49fc","method":{"position":"org.apache.commons.io.IOUtils:865","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URI uri, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toString(uri, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"wildcard":"encoding"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"c5fd67c5-3e60-11e6-9cbb-6506c79a6afc","method":{"position":"org.apache.commons.io.input.TaggedInputStream:101","type":"CtMethodImpl","sourcecode":"public void throwIfCauseOf(java.lang.Throwable throwable) throws java.io.IOException {\n    if (null != throwable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(throwable, java.io.Serializable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"throwable"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2278","type":"CtBinaryOperatorImpl","sourcecode":"toSkip < 0"},"failures":[],"tindex":"c5fd8ed6-3e60-11e6-9cbb-0d26fbb0d1ec","method":{"position":"org.apache.commons.io.IOUtils:2316","type":"CtMethodImpl","sourcecode":"public static long skip(java.io.Reader input, long toSkip) throws java.io.IOException {\n    if (toSkip < 0) {\n        {\n            if (toSkip < 0) {\n                throw new java.lang.IllegalArgumentException((\"Skip count must be non-negative, actual: \" + toSkip));\n            } \n            if ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.char[]) == null) {\n                org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.char[] = new char[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int];\n            } \n            long long = toSkip;\n            while (remain > 0) {\n                long long = input.read(org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.char[], 0, ((int)(java.lang.Math.min(remain, org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int))));\n                if (n < 0) {\n                    break;\n                } \n                remain -= n;\n            }\n            return toSkip - remain;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toSkip":"toSkip"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2812","type":"CtBinaryOperatorImpl","sourcecode":"srcFile == null"},"failures":[],"tindex":"c5fd8ed7-3e60-11e6-9cbb-3b4072e45d74","method":{"position":"org.apache.commons.io.comparator.ReverseComparator:54","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (file1 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.Comparator<java.io.File>.compare(file2, file1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"file1"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.ReaderInputStream:199","type":"CtBinaryOperatorImpl","sourcecode":"c == (-1)"},"failures":[],"tindex":"c5fd8ed8-3e60-11e6-9cbb-bd6843c5e316","method":{"position":"org.apache.commons.io.EndianUtils:261","type":"CtMethodImpl","sourcecode":"public static void writeSwappedDouble(byte[] data, int offset, double value) {\n    if (offset == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.EndianUtils.writeSwappedLong(data, offset, java.lang.Double.doubleToLongBits(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.AbstractFileComparator:61","type":"CtBinaryOperatorImpl","sourcecode":"files != null"},"failures":[],"tindex":"c5fd8ed9-3e60-11e6-9cbb-bdeef9dff43b","method":{"position":"org.apache.commons.io.FileUtils:462","type":"CtMethodImpl","sourcecode":"public static java.io.File[] convertFileCollectionToFileArray(java.util.Collection<java.io.File> files) {\n    if (files != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return files.toArray(new java.io.File[files.size()]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:135","type":"CtInvocationImpl","sourcecode":"org.apache.commons.io.FilenameUtils.wildcardMatch(file.getName(), wildcard)"},"failures":[],"tindex":"c5fd8eda-3e60-11e6-9cbb-dbb86c12f2d0","method":{"position":"org.apache.commons.io.FileUtils:1910","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data, java.lang.String encoding) throws java.io.IOException {\n    if (org.apache.commons.io.FilenameUtils.wildcardMatch(file.getName(), data)) {\n        {\n            org.apache.commons.io.FileUtils.writeStringToFile(file, data, encoding, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file","wildcard":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1682","type":"CtBinaryOperatorImpl","sourcecode":"(timeout++) > seconds"},"failures":[],"tindex":"c5fd8edb-3e60-11e6-9cbb-d951ff12c402","method":{"position":"org.apache.commons.io.input.ProxyReader:223","type":"CtMethodImpl","sourcecode":"protected void beforeRead(int n) throws java.io.IOException {\n    if ((n++) > n) {\n        {\n            if (n > 0) {\n                {\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"seconds":"n","timeout":"n"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2355","type":"CtBinaryOperatorImpl","sourcecode":"toSkip < 0"},"failures":[],"tindex":"c5fdb5ec-3e60-11e6-9cbb-255e4ea076f7","method":{"position":"org.apache.commons.io.FileSystemUtils:233","type":"CtMethodImpl","sourcecode":"public static long freeSpaceKb(long timeout) throws java.io.IOException {\n    if (timeout < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.FileSystemUtils.freeSpaceKb(new java.io.File(\".\").getAbsolutePath(), timeout);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toSkip":"timeout"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1425","type":"CtInvocationImpl","sourcecode":"srcFile.isDirectory()"},"failures":[],"tindex":"c5fdb5ed-3e60-11e6-9cbb-03e24b472ccc","method":{"position":"org.apache.commons.io.FileUtils:2920","type":"CtMethodImpl","sourcecode":"public static boolean isSymlink(java.io.File file) throws java.io.IOException {\n    if (file.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File must not be null\");\n            } \n            if (org.apache.commons.io.FilenameUtils.isSystemWindows()) {\n                return false;\n            } \n            java.io.File java.io.File = null;\n            if ((file.getParent()) == null) {\n                fileInCanonicalDir = file;\n            } else {\n                java.io.File java.io.File = file.getParentFile().getCanonicalFile();\n                fileInCanonicalDir = new java.io.File(canonicalDir , file.getName());\n            }\n            if (fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2449","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"c5fdb5ee-3e60-11e6-9cbb-f1fbbe078054","method":{"position":"org.apache.commons.io.filefilter.WildcardFileFilter:167","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        {\n            java.lang.String java.lang.String = file.getName();\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.FilenameUtils.wildcardMatch(name, wildcard, org.apache.commons.io.IOCase)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:528","type":"CtBinaryOperatorImpl","sourcecode":"(xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_8)))"},"failures":[],"tindex":"c5fdb5ef-3e60-11e6-9cbb-fb439e197837","method":{"position":"org.apache.commons.io.IOCase:146","type":"CtMethodImpl","sourcecode":"public int checkCompareTo(java.lang.String str1, java.lang.String str2) {\n    if ((str1 != null) && (!(xmlEnc.equals(str1)))) {\n        {\n            if ((str1 == null) || (str2 == null)) {\n                throw new java.lang.NullPointerException(\"The strings must not be null\");\n            } \n            return boolean ? str1.compareTo(str2) : str1.compareToIgnoreCase(str2);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.input.XmlStreamReader.UTF_8":"str1","xmlEnc":"str1"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"c5fdb5f0-3e60-11e6-9cbb-4df675e857e7","method":{"position":"org.apache.commons.io.IOUtils:817","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.Reader input) throws java.io.IOException {\n    if (input == null) {\n        {\n            org.apache.commons.io.output.StringBuilderWriter org.apache.commons.io.output.StringBuilderWriter = new org.apache.commons.io.output.StringBuilderWriter();\n            org.apache.commons.io.IOUtils.copy(input, sw);\n            return sw.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:249","type":"CtBinaryOperatorImpl","sourcecode":"remaining == 0"},"failures":[],"tindex":"c5fddd01-3e60-11e6-9cbb-a7c508e5e933","method":{"position":"org.apache.commons.io.input.NullInputStream:318","type":"CtMethodImpl","sourcecode":"protected void processBytes(byte[] bytes, int offset, int length) {\n    if (length == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"remaining":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:620","type":"CtBinaryOperatorImpl","sourcecode":"(bomEnc != null) && (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.UTF_16))"},"failures":[],"tindex":"c5fddd02-3e60-11e6-9cbb-ed0848e3f622","method":{"position":"org.apache.commons.io.CopyUtils:168","type":"CtMethodImpl","sourcecode":"public static void copy(byte[] input, java.io.Writer output, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding != null) && (bomEnc.startsWith(encoding))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream(input);\n            org.apache.commons.io.CopyUtils.copy(in, output, encoding);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"encoding","org.apache.commons.io.input.XmlStreamReader.UTF_16":"encoding"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:658","type":"CtBinaryOperatorImpl","sourcecode":"i >= 0"},"failures":[],"tindex":"c5fddd03-3e60-11e6-9cbb-2573f2f2362f","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:166","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(int b) {\n    if (b >= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (int) - (int);\n            if (inBufferPos == (byte[].int)) {\n                needNewBuffer(((int) + 1));\n                inBufferPos = 0;\n            } \n            byte[][inBufferPos] = ((byte)(b));\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:88","type":"CtBinaryOperatorImpl","sourcecode":"(cachedLine) != null"},"failures":[],"tindex":"c5fddd04-3e60-11e6-9cbb-af24a67e4a8e","method":{"position":"org.apache.commons.io.output.ProxyWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str) throws java.io.IOException {\n    if (str != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                int int = 0;\n                if (str != null) {\n                    len = str.length();\n                } \n                beforeWrite(len);\n                java.io.Writer.write(str);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cachedLine":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1030","type":"CtBinaryOperatorImpl","sourcecode":"index == (-1)"},"failures":[],"tindex":"c5fe0415-3e60-11e6-9cbb-9f9687ad65af","method":{"position":"org.apache.commons.io.IOUtils:2401","type":"CtMethodImpl","sourcecode":"public static int read(java.io.Reader input, char[] buffer, int offset, int length) throws java.io.IOException {\n    if (offset == (-1)) {\n        {\n            if (length < 0) {\n                throw new java.lang.IllegalArgumentException((\"Length must not be negative: \" + length));\n            } \n            int int = length;\n            while (remaining > 0) {\n                int int = length - remaining;\n                int int = input.read(buffer, (offset + location), remaining);\n                if ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) == count) {\n                    break;\n                } \n                remaining -= count;\n            }\n            return length - remaining;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:122","type":"CtBinaryOperatorImpl","sourcecode":"result < 0"},"failures":[],"tindex":"c5fe0416-3e60-11e6-9cbb-7796b06d3dec","method":{"position":"org.apache.commons.io.IOUtils:2051","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.Reader input, java.io.Writer output, final long inputOffset, final long length, char[] buffer) throws java.io.IOException {\n    if (inputOffset < 0) {\n        {\n            if (inputOffset > 0) {\n                org.apache.commons.io.IOUtils.skipFully(input, inputOffset);\n            } \n            if (length == 0) {\n                return 0;\n            } \n            int int = buffer.int;\n            if ((length > 0) && (length < (buffer.int))) {\n                bytesToRead = ((int)(length));\n            } \n            int int;\n            long long = 0;\n            while ((bytesToRead > 0) && ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) != (read = input.read(buffer, 0, bytesToRead)))) {\n                output.write(buffer, 0, read);\n                totalRead += read;\n                if (length > 0) {\n                    bytesToRead = ((int)(java.lang.Math.min((length - totalRead), buffer.int)));\n                } \n            }\n            return totalRead;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"inputOffset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:810","type":"CtBinaryOperatorImpl","sourcecode":"charsetName == null"},"failures":[],"tindex":"c5fe0417-3e60-11e6-9cbb-639099bd9643","method":{"position":"org.apache.commons.io.FileSystemUtils:435","type":"CtMethodImpl","sourcecode":"long parseBytes(java.lang.String freeSpace, java.lang.String path) throws java.io.IOException {\n    if (freeSpace == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                long long = java.lang.Long.parseLong(freeSpace);\n                if (bytes < 0) {\n                    throw new java.io.IOException((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not find free space in response \") + \"for path '\") + path) + \"'- check path is valid\"));\n                } \n                return bytes;\n            } catch (java.lang.NumberFormatException ex) {\n                throw new org.apache.commons.io.IOExceptionWithCause((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return numeric data as expected \") + \"for path '\") + path) + \"'- check path is valid\") , ex);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsetName":"freeSpace"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:79","type":"CtBinaryOperatorImpl","sourcecode":"(((((((osName.indexOf(\"linux\")) != (-1)) || ((osName.indexOf(\"mpe/ix\")) != (-1))) || ((osName.indexOf(\"freebsd\")) != (-1))) || ((osName.indexOf(\"irix\")) != (-1))) || ((osName.indexOf(\"digital unix\")) != (-1))) || ((osName.indexOf(\"unix\")) != (-1))) || ((osName.indexOf(\"mac os x\")) != (-1))"},"failures":[],"tindex":"c5fe0418-3e60-11e6-9cbb-c9569cbeb220","method":{"position":"org.apache.commons.io.IOUtils:1184","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.CharSequence input, java.lang.String encoding) throws java.io.IOException {\n    if ((((((((input.indexOf(\"linux\")) != (-1)) || ((osName.indexOf(\"mpe/ix\")) != (-1))) || ((osName.indexOf(\"freebsd\")) != (-1))) || ((osName.indexOf(\"irix\")) != (-1))) || ((osName.indexOf(\"digital unix\")) != (-1))) || ((osName.indexOf(\"unix\")) != (-1))) || ((osName.indexOf(\"mac os x\")) != (-1))) {\n        {\n            return org.apache.commons.io.IOUtils.toInputStream(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"osName":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2928","type":"CtBinaryOperatorImpl","sourcecode":"(file.getParent()) == null"},"failures":[],"tindex":"c5fe0419-3e60-11e6-9cbb-a37c1480d622","method":{"position":"org.apache.commons.io.FileUtils:2149","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.util.Collection<?> lines) throws java.io.IOException {\n    if ((file.getParent()) == null) {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, null, lines, null, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:168","type":"CtBinaryOperatorImpl","sourcecode":"inBufferPos == (currentBuffer.length)"},"failures":[],"tindex":"c5fe2b2a-3e60-11e6-9cbb-2df36c09ded6","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:134","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b, int off, int len) {\n    if (off == off) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((((off < 0) || (off > (b.int))) || (len < 0)) || ((off + len) > (b.int))) || ((off + len) < 0)) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if (len == 0) {\n                return ;\n            } \n            synchronized(org.apache.commons.io.output.ByteArrayOutputStream.this) {\n                int int = (int) + len;\n                int int = len;\n                int int = (int) - (int);\n                while (remaining > 0) {\n                    int int = java.lang.Math.min(remaining, ((byte[].int) - inBufferPos));\n                    java.lang.System.arraycopy(b, ((off + len) - remaining), byte[], inBufferPos, part);\n                    remaining -= part;\n                    if (remaining > 0) {\n                        needNewBuffer(newcount);\n                        inBufferPos = 0;\n                    } \n                }\n                int = newcount;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"currentBuffer":"b","inBufferPos":"off","length":"off"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.DirectoryWalker:330","type":"CtBinaryOperatorImpl","sourcecode":"startDirectory == null"},"failures":[],"tindex":"c5fe2b2b-3e60-11e6-9cbb-47576f08ed84","method":{"position":"org.apache.commons.io.DirectoryWalker:503","type":"CtMethodImpl","sourcecode":"protected void handleDirectoryStart(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (directory == null) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startDirectory":"directory"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:627","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"c5fe2b2c-3e60-11e6-9cbb-4b18ee477a06","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:101","type":"CtMethodImpl","sourcecode":"private void needNewBuffer(int newcount) {\n    if (newcount == 0) {\n        {\n            if ((int) < ((java.util.List<byte[]>.size()) - 1)) {\n                int += byte[].int;\n                (int)++;\n                byte[] = java.util.List<byte[]>.get(int);\n            } else {\n                int int;\n                if ((byte[]) == null) {\n                    newBufferSize = newcount;\n                    int = 0;\n                } else {\n                    newBufferSize = java.lang.Math.max(((byte[].int) << 1), (newcount - (int)));\n                    int += byte[].int;\n                }\n                (int)++;\n                byte[] = new byte[newBufferSize];\n                java.util.List<byte[]>.add(byte[]);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"newcount"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2708","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"c5fe2b2d-3e60-11e6-9cbb-954d34f18ff5","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:43","type":"CtMethodImpl","sourcecode":"public void onDirectoryCreate(final java.io.File directory) {\n    if (directory.isDirectory()) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:140","type":"CtBinaryOperatorImpl","sourcecode":"(writer) != null"},"failures":[],"tindex":"c5fe2b2e-3e60-11e6-9cbb-fffc4022d144","method":{"position":"org.apache.commons.io.IOUtils:218","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.Writer output) {\n    if (output != null) {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(output)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"writer":"output"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:226","type":"CtBinaryOperatorImpl","sourcecode":"(byteOrderMark) != null"},"failures":[],"tindex":"c5fe523f-3e60-11e6-9cbb-75d082726d44","method":{"position":"org.apache.commons.io.input.BOMInputStream:196","type":"CtMethodImpl","sourcecode":"public boolean hasBOM(org.apache.commons.io.ByteOrderMark bom) throws java.io.IOException {\n    if (bom != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(java.util.List<org.apache.commons.io.ByteOrderMark>.contains(bom))) {\n                throw new java.lang.IllegalArgumentException((\"Stream not configure to detect \" + bom));\n            } \n            return ((org.apache.commons.io.ByteOrderMark) != null) && (getBOM().equals(bom));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"byteOrderMark":"bom"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:319","type":"CtBinaryOperatorImpl","sourcecode":"remaining == 0"},"failures":[],"tindex":"c5fe5240-3e60-11e6-9cbb-85001a971f45","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:96","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence value, int start, int end) {\n    if (start == 0) {\n        {\n            if (end > 0) {\n                {\n                    java.lang.StringBuilder.append(value, start, end);\n                    return org.apache.commons.io.output.StringBuilderWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"remaining":"start"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"c5fe5241-3e60-11e6-9cbb-3b9046493391","method":{"position":"org.apache.commons.io.EndianUtils:365","type":"CtMethodImpl","sourcecode":"public static long readSwappedUnsignedInteger(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            long long = (((value1 & 255) << 0) + ((value2 & 255) << 8)) + ((value3 & 255) << 16);\n            long long = value4 & 255;\n            return (high << 24) + (4294967295L & low);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1070","type":"CtBinaryOperatorImpl","sourcecode":"destFile == null"},"failures":[],"tindex":"c5fe5242-3e60-11e6-9cbb-a725701fe160","method":{"position":"org.apache.commons.io.filefilter.CanWriteFileFilter:77","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file == null) {\n        {\n            return file.canWrite();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.ByteOrderMark:70","type":"CtBinaryOperatorImpl","sourcecode":"(charsetName == null) || ((charsetName.length()) == 0)"},"failures":[],"tindex":"c5fe5243-3e60-11e6-9cbb-75c2c6b4d0fe","method":{"position":"org.apache.commons.io.input.XmlStreamReader:704","type":"CtMethodImpl","sourcecode":"private static java.lang.String getXmlProlog(java.io.InputStream is, java.lang.String guessedEnc) throws java.io.IOException {\n    if ((guessedEnc == null) || ((charsetName.length()) == 0)) {\n        {\n            java.lang.String java.lang.String = null;\n            if (guessedEnc != null) {\n                byte[] byte[] = new byte[org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int];\n                is.mark(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int);\n                int int = 0;\n                int int = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int;\n                int int = is.read(bytes, offset, max);\n                int int = -1;\n                java.lang.String java.lang.String = null;\n                while (((c != (-1)) && (firstGT == (-1))) && (offset < (org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int))) {\n                    offset += c;\n                    max -= c;\n                    c = is.read(bytes, offset, max);\n                    xmlProlog = new java.lang.String(bytes , 0 , offset , guessedEnc);\n                    firstGT = xmlProlog.indexOf('>');\n                }\n                if (firstGT == (-1)) {\n                    if (c == (-1)) {\n                        throw new java.io.IOException(\"Unexpected end of XML stream\");\n                    } else {\n                        throw new java.io.IOException(((\"XML prolog or ROOT element not found on first \" + offset) + \" bytes\"));\n                    }\n                } \n                int int = offset;\n                if (bytesRead > 0) {\n                    is.reset();\n                    java.io.BufferedReader java.io.BufferedReader = new java.io.BufferedReader(new java.io.StringReader(xmlProlog.substring(0, (firstGT + 1))));\n                    java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer();\n                    java.lang.String java.lang.String = bReader.readLine();\n                    while (line != null) {\n                        prolog.append(line);\n                        line = bReader.readLine();\n                    }\n                    java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.util.regex.Pattern.matcher(prolog);\n                    if (m.find()) {\n                        encoding = m.group(1).toUpperCase();\n                        encoding = encoding.substring(1, ((encoding.length()) - 1));\n                    } \n                } \n            } \n            return encoding;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsetName":"guessedEnc"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"c5fe7954-3e60-11e6-9cbb-35aac1adda1a","method":{"position":"org.apache.commons.io.output.WriterOutputStream:229","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b) throws java.io.IOException {\n    if (b != null) {\n        {\n            write(b, 0, b.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:550","type":"CtBinaryOperatorImpl","sourcecode":"(xmlGuessEnc != null) && (!(xmlGuessEnc.equals(bomEnc)))"},"failures":[],"tindex":"c5fe7955-3e60-11e6-9cbb-711abb1e9c42","method":{"position":"org.apache.commons.io.FileSystemUtils:141","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static long freeSpace(java.lang.String path) throws java.io.IOException {\n    if ((path != null) && (!(xmlGuessEnc.equals(path)))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.freeSpaceOS(path, org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int, false, (-1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"path","xmlGuessEnc":"path"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileEntry:71","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"c5fe7956-3e60-11e6-9cbb-bfa394524ff1","method":{"position":"org.apache.commons.io.filefilter.AbstractFileFilter:39","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File file) {\n    if (file == null) {\n        {\n            if ((file.exists()) && (destFile.isDirectory())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return accept(file.getParentFile(), file.getName());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.TeeInputStream:145","type":"CtBinaryOperatorImpl","sourcecode":"n != (-1)"},"failures":[],"tindex":"c5fe7957-3e60-11e6-9cbb-33e84a3d015a","method":{"position":"org.apache.commons.io.EndianUtils:200","type":"CtMethodImpl","sourcecode":"public static void writeSwappedLong(byte[] data, int offset, long value) {\n    if (offset != (-1)) {\n        {\n            data[(offset + 0)] = ((byte)((value >> 0) & 255));\n            data[(offset + 1)] = ((byte)((value >> 8) & 255));\n            data[(offset + 2)] = ((byte)((value >> 16) & 255));\n            data[(offset + 3)] = ((byte)((value >> 24) & 255));\n            data[(offset + 4)] = ((byte)((value >> 32) & 255));\n            data[(offset + 5)] = ((byte)((value >> 40) & 255));\n            data[(offset + 6)] = ((byte)((value >> 48) & 255));\n            data[(offset + 7)] = ((byte)((value >> 56) & 255));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:413","type":"CtInvocationImpl","sourcecode":"entry.isDirectory()"},"failures":[],"tindex":"c5fe7958-3e60-11e6-9cbb-9da75152760d","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:374","type":"CtMethodImpl","sourcecode":"private void doCreate(org.apache.commons.io.monitor.FileEntry entry) {\n    if (entry.isDirectory()) {\n        {\n            for (org.apache.commons.io.monitor.FileAlterationListener org.apache.commons.io.monitor.FileAlterationListener : java.util.List<org.apache.commons.io.monitor.FileAlterationListener>) {\n                if (entry.isDirectory()) {\n                    listener.onDirectoryCreate(entry.getFile());\n                } else {\n                    listener.onFileCreate(entry.getFile());\n                }\n            }\n            org.apache.commons.io.monitor.FileEntry[] org.apache.commons.io.monitor.FileEntry[] = entry.getChildren();\n            for (org.apache.commons.io.monitor.FileEntry org.apache.commons.io.monitor.FileEntry : children) {\n                doCreate(aChildren);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"entry":"entry"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:212","type":"CtBinaryOperatorImpl","sourcecode":"offset < 0"},"failures":[],"tindex":"c5fea069-3e60-11e6-9cbb-c70263265f5a","method":{"position":"org.apache.commons.io.input.BOMInputStream:399","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long n) throws java.io.IOException {\n    if (n < 0) {\n        {\n            while ((n > 0) && ((readFirstBytes()) >= 0)) {\n                n--;\n            }\n            return java.io.InputStream.skip(n);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:740","type":"CtBinaryOperatorImpl","sourcecode":"(file1.isDirectory()) || (file2.isDirectory())"},"failures":[],"tindex":"c5fea06a-3e60-11e6-9cbb-2d9b14c857e5","method":{"position":"org.apache.commons.io.FileUtils:2077","type":"CtMethodImpl","sourcecode":"public static void writeByteArrayToFile(java.io.File file, byte[] data) throws java.io.IOException {\n    if ((file.isDirectory()) || (file.isDirectory())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeByteArrayToFile(file, data, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file","file1":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2513","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.io.FileUtils.isSymlink(file))"},"failures":[],"tindex":"c5fea06b-3e60-11e6-9cbb-dfa7532aef81","method":{"position":"org.apache.commons.io.FileDeleteStrategy:71","type":"CtMethodImpl","sourcecode":"public boolean deleteQuietly(java.io.File fileToDelete) {\n    if (fileToDelete.isDirectory()) {\n        {\n            if (!(org.apache.commons.io.FileUtils.isSymlink(fileToDelete))) {\n                {\n                    if ((fileToDelete == null) || ((fileToDelete.exists()) == false)) {\n                        return true;\n                    } \n                    try {\n                        return doDelete(fileToDelete);\n                    } catch (java.io.IOException ex) {\n                        return false;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"fileToDelete"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:295","type":"CtBinaryOperatorImpl","sourcecode":"remaining == 0"},"failures":[],"tindex":"c5fea06c-3e60-11e6-9cbb-a74cc11da380","method":{"position":"org.apache.commons.io.output.XmlStreamWriter:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] cbuf, int off, int len) throws java.io.IOException {\n    if (len == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (off == 0) {\n                {\n                    if ((java.io.StringWriter) != null) {\n                        detectEncoding(cbuf, off, len);\n                    } else {\n                        java.io.Writer.write(cbuf, off, len);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"remaining":"len"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.OrFileFilter:75","type":"CtBinaryOperatorImpl","sourcecode":"(filter1 == null) || (filter2 == null)"},"failures":[],"tindex":"c5fea06d-3e60-11e6-9cbb-a51f5195138d","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:757","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if ((filter == null) || (filter == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((filter == null) || (filter == null)) {\n                {\n                    if (filter == null) {\n                        return org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.IOFileFilter;\n                    } else {\n                        return org.apache.commons.io.filefilter.FileFilterUtils.and(filter, org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.IOFileFilter);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"filter","filter2":"filter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2182","type":"CtUnaryOperatorImpl","sourcecode":"!(input2 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"c5fea06e-3e60-11e6-9cbb-01f38f20d2a2","method":{"position":"org.apache.commons.io.IOUtils:2557","type":"CtMethodImpl","sourcecode":"public static void readFully(java.io.InputStream input, byte[] buffer) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            org.apache.commons.io.IOUtils.readFully(input, buffer, 0, buffer.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input2":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.AbstractFileComparator:44","type":"CtBinaryOperatorImpl","sourcecode":"files != null"},"failures":[],"tindex":"c5fec77f-3e60-11e6-9cbb-f5a9c7df7092","method":{"position":"org.apache.commons.io.comparator.AbstractFileComparator:43","type":"CtMethodImpl","sourcecode":"public java.io.File[] sort(java.io.File... files) {\n    if (files != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (files != null) {\n                java.util.Arrays.sort(files, org.apache.commons.io.comparator.AbstractFileComparator.this);\n            } \n            return files;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1079","type":"CtInvocationImpl","sourcecode":"srcFile.getCanonicalPath().equals(destFile.getCanonicalPath())"},"failures":[],"tindex":"c5fec780-3e60-11e6-9cbb-23c79e07925c","method":{"position":"org.apache.commons.io.DirectoryWalker:329","type":"CtMethodImpl","sourcecode":"protected final void walk(java.io.File startDirectory, java.util.Collection<T> results) throws java.io.IOException {\n    if (startDirectory.getCanonicalPath().equals(startDirectory.getCanonicalPath())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (startDirectory == null) {\n                throw new java.lang.NullPointerException(\"Start Directory is null\");\n            } \n            try {\n                handleStart(startDirectory, results);\n                walk(startDirectory, 0, results);\n                handleEnd(results);\n            } catch (org.apache.commons.io.DirectoryWalker.CancelException cancel) {\n                handleCancelled(startDirectory, results, cancel);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"startDirectory","srcFile":"startDirectory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:600","type":"CtInvocationImpl","sourcecode":"directory.isDirectory()"},"failures":[],"tindex":"c5fec781-3e60-11e6-9cbb-a1b8a94ba283","method":{"position":"org.apache.commons.io.FileDeleteStrategy:71","type":"CtMethodImpl","sourcecode":"public boolean deleteQuietly(java.io.File fileToDelete) {\n    if (fileToDelete.isDirectory()) {\n        {\n            if (!(org.apache.commons.io.FileUtils.isSymlink(fileToDelete))) {\n                {\n                    if ((fileToDelete == null) || ((fileToDelete.exists()) == false)) {\n                        return true;\n                    } \n                    try {\n                        return doDelete(fileToDelete);\n                    } catch (java.io.IOException ex) {\n                        return false;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"fileToDelete"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1659","type":"CtBinaryOperatorImpl","sourcecode":"lineEnding == null"},"failures":[],"tindex":"c5fec782-3e60-11e6-9cbb-45326a534594","method":{"position":"org.apache.commons.io.FileUtils:2247","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.util.Collection<?> lines, java.lang.String lineEnding, boolean append) throws java.io.IOException {\n    if (lineEnding == null) {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, null, lines, lineEnding, append);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineEnding":"lineEnding"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.CharSequenceReader:114","type":"CtBinaryOperatorImpl","sourcecode":"c == (-1)"},"failures":[],"tindex":"c5fec783-3e60-11e6-9cbb-3d0273fd052b","method":{"position":"org.apache.commons.io.input.NullReader:139","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void mark(int readlimit) {\n    if (readlimit == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(boolean)) {\n                throw new java.lang.UnsupportedOperationException(\"Mark not supported\");\n            } \n            long = long;\n            org.apache.commons.io.input.NullReader.this.long = readlimit;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"readlimit"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:111","type":"CtBinaryOperatorImpl","sourcecode":"(currentBuffer) == null"},"failures":[],"tindex":"c5fec784-3e60-11e6-9cbb-ed591ba45816","method":{"position":"org.apache.commons.io.IOUtils:931","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String toString(byte[] input) throws java.io.IOException {\n    if (input == null) {\n        {\n            if (input != null) {\n                {\n                    return new java.lang.String(input);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242995522/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"currentBuffer":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
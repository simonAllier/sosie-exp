{"failureDictionary":{},"transformations":[{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2538","type":"CtBinaryOperatorImpl","sourcecode":"actual != length"},"failures":[],"tindex":"30dde375-3e81-11e6-8a15-edee9531da0f","method":{"position":"org.apache.commons.io.output.ProxyWriter:242","type":"CtMethodImpl","sourcecode":"protected void beforeWrite(int n) throws java.io.IOException {\n    if (n > 0) {\n        {\n            if (n != n) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"actual":"n","length":"n"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl","sourcecode":"!(input1 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"30de3196-3e81-11e6-8a15-117bce71763e","method":{"position":"org.apache.commons.io.IOUtils:1743","type":"CtMethodImpl","sourcecode":"public static int copy(java.io.InputStream input, java.io.OutputStream output) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            long long = org.apache.commons.io.IOUtils.copyLarge(input, output);\n            if (count > (java.lang.Integer.java.lang.Integer.int)) {\n                return -1;\n            } \n            return ((int)(count));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:122","type":"CtBinaryOperatorImpl","sourcecode":"result < 0"},"failures":[],"tindex":"30de58a7-3e81-11e6-8a15-01a221d1e9d8","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:609","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long threshold) {\n    if (threshold < 0) {\n        {\n            return new org.apache.commons.io.filefilter.SizeFileFilter(threshold);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"threshold"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:226","type":"CtBinaryOperatorImpl","sourcecode":"(byteOrderMark) != null"},"failures":[],"tindex":"30de58a8-3e81-11e6-8a15-294436ee33e1","method":{"position":"org.apache.commons.io.input.BOMInputStream:139","type":"CtMethodImpl","sourcecode":"public int compare(org.apache.commons.io.ByteOrderMark bom1, org.apache.commons.io.ByteOrderMark bom2) {\n    if (bom2 != null) {\n        {\n            int int = bom1.length();\n            int int = bom2.length();\n            if (len1 > len2) {\n                return -1;\n            } \n            if (len2 > len1) {\n                return 1;\n            } \n            return 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"byteOrderMark":"bom2"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:401","type":"CtBinaryOperatorImpl","sourcecode":"(size.divide(org.apache.commons.io.FileUtils.ONE_KB_BI).compareTo(java.math.BigInteger.ZERO)) > 0"},"failures":[],"tindex":"30de58a9-3e81-11e6-8a15-ff5e9468cb11","method":{"position":"org.apache.commons.io.FileUtils:388","type":"CtMethodImpl","sourcecode":"public static java.lang.String byteCountToDisplaySize(java.math.BigInteger size) {\n    if ((size.divide(size).compareTo(size)) > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String;\n            if ((size.divide(org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.math.BigInteger).compareTo(java.math.BigInteger.java.math.BigInteger.java.math.BigInteger)) > 0) {\n                displaySize = (java.lang.String.valueOf(size.divide(org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.math.BigInteger))) + \" EB\";\n            } else if ((size.divide(org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.math.BigInteger).compareTo(java.math.BigInteger.java.math.BigInteger.java.math.BigInteger)) > 0) {\n                displaySize = (java.lang.String.valueOf(size.divide(org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.math.BigInteger))) + \" PB\";\n            } else if ((size.divide(org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.math.BigInteger).compareTo(java.math.BigInteger.java.math.BigInteger.java.math.BigInteger)) > 0) {\n                displaySize = (java.lang.String.valueOf(size.divide(org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.math.BigInteger))) + \" TB\";\n            } else if ((size.divide(org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.math.BigInteger).compareTo(java.math.BigInteger.java.math.BigInteger.java.math.BigInteger)) > 0) {\n                displaySize = (java.lang.String.valueOf(size.divide(org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.math.BigInteger))) + \" GB\";\n            } else if ((size.divide(org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.math.BigInteger).compareTo(java.math.BigInteger.java.math.BigInteger.java.math.BigInteger)) > 0) {\n                displaySize = (java.lang.String.valueOf(size.divide(org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.math.BigInteger))) + \" MB\";\n            } else if ((size.divide(org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.math.BigInteger).compareTo(java.math.BigInteger.java.math.BigInteger.java.math.BigInteger)) > 0) {\n                displaySize = (java.lang.String.valueOf(size.divide(org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.math.BigInteger))) + \" KB\";\n            } else {\n                displaySize = (java.lang.String.valueOf(size)) + \" bytes\";\n            }\n            return displaySize;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"size","org.apache.commons.io.FileUtils.ONE_KB_BI":"size","java.math.BigInteger.ZERO":"size"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"30de7fba-3e81-11e6-8a15-9f1467a737fe","method":{"position":"org.apache.commons.io.IOUtils:1285","type":"CtMethodImpl","sourcecode":"public static void write(byte[] data, java.io.Writer output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (data != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data != null) {\n                output.write(new java.lang.String(data , org.apache.commons.io.Charsets.toCharset(encoding)));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:362","type":"CtBinaryOperatorImpl","sourcecode":"(!(parent.mkdirs())) && (!(parent.isDirectory()))"},"failures":[],"tindex":"30de7fbb-3e81-11e6-8a15-d9b76cbd352b","method":{"position":"org.apache.commons.io.output.LockableFileWriter:232","type":"CtMethodImpl","sourcecode":"private void testLockDir(java.io.File lockDir) throws java.io.IOException {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(lockDir))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(lockDir.mkdirs())) && (!(parent.isDirectory()))) {\n                {\n                    if (!(lockDir.exists())) {\n                        throw new java.io.IOException((\"Could not find lockDir: \" + (lockDir.getAbsolutePath())));\n                    } \n                    if (!(lockDir.canWrite())) {\n                        throw new java.io.IOException((\"Could not write to lockDir: \" + (lockDir.getAbsolutePath())));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"lockDir"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:431","type":"CtBinaryOperatorImpl","sourcecode":"size <= prefix"},"failures":[],"tindex":"30de7fbc-3e81-11e6-8a15-d5eb23f1946f","method":{"position":"org.apache.commons.io.output.ClosedOutputStream:47","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b <= b) {\n        {\n            throw new java.io.IOException(((\"write(\" + b) + \") failed: stream is closed\"));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"b","prefix":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"30dea6cd-3e81-11e6-8a15-1b88caf78a10","method":{"position":"org.apache.commons.io.EndianUtils:283","type":"CtMethodImpl","sourcecode":"public static void writeSwappedShort(java.io.OutputStream output, short value) throws java.io.IOException {\n    if (null != output) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:96","type":"CtBinaryOperatorImpl","sourcecode":"line == null"},"failures":[],"tindex":"30dea6ce-3e81-11e6-8a15-dfb54bb8ea03","method":{"position":"org.apache.commons.io.FilenameUtils:1097","type":"CtMethodImpl","sourcecode":"public static boolean equalsNormalizedOnSystem(java.lang.String filename1, java.lang.String filename2) {\n    if (filename1 == null) {\n        {\n            return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, true, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"filename1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:183","type":"CtBinaryOperatorImpl","sourcecode":"(file.getParentFile()) != null"},"failures":[],"tindex":"30dea6cf-3e81-11e6-8a15-633fb65daad0","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:222","type":"CtMethodImpl","sourcecode":"private static java.io.Writer initWriter(java.io.File file, java.lang.Object encoding, boolean append) throws java.io.IOException {\n    if ((file.getParentFile()) != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File is missing\");\n            } \n            if (encoding == null) {\n                throw new java.lang.NullPointerException(\"Encoding is missing\");\n            } \n            boolean boolean = file.exists();\n            java.io.OutputStream java.io.OutputStream = null;\n            java.io.Writer java.io.Writer = null;\n            try {\n                stream = new java.io.FileOutputStream(file , append);\n                if (encoding instanceof java.nio.charset.Charset) {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.nio.charset.Charset)(encoding)));\n                } else if (encoding instanceof java.nio.charset.CharsetEncoder) {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.nio.charset.CharsetEncoder)(encoding)));\n                } else {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.lang.String)(encoding)));\n                }\n            } catch (java.io.IOException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            }\n            return writer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:750","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"30decde0-3e81-11e6-8a15-f1d8bc8078b4","method":{"position":"org.apache.commons.io.FilenameUtils:193","type":"CtMethodImpl","sourcecode":"public static java.lang.String normalize(java.lang.String filename) {\n    if (filename == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.doNormalize(filename, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1079","type":"CtInvocationImpl","sourcecode":"srcFile.getCanonicalPath().equals(destFile.getCanonicalPath())"},"failures":[],"tindex":"30decde1-3e81-11e6-8a15-c5b892923105","method":{"position":"org.apache.commons.io.FileUtils:191","type":"CtMethodImpl","sourcecode":"public static java.io.File getFile(java.io.File directory, java.lang.String... names) {\n    if (directory.getCanonicalPath().equals(directory.getCanonicalPath())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (directory == null) {\n                throw new java.lang.NullPointerException(\"directorydirectory must not be null\");\n            } \n            if (names == null) {\n                throw new java.lang.NullPointerException(\"names must not be null\");\n            } \n            java.io.File java.io.File = directory;\n            for (java.lang.String java.lang.String : names) {\n                file = new java.io.File(file , name);\n            }\n            return file;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"directory","srcFile":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:209","type":"CtBinaryOperatorImpl","sourcecode":"(magicNumber.length) == 0"},"failures":[],"tindex":"30decde2-3e81-11e6-8a15-974953afd09b","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:87","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] bts, int st, int end) throws java.io.IOException {\n    if (end == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                beforeWrite(end);\n                java.io.OutputStream.write(bts, st, end);\n                afterWrite(end);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"magicNumber":"bts","length":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:722","type":"CtBinaryOperatorImpl","sourcecode":"firstGT == (-1)"},"failures":[],"tindex":"30def4f3-3e81-11e6-8a15-3d9b14e091e0","method":{"position":"org.apache.commons.io.input.CharSequenceInputStream:113","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b, int off, int len) throws java.io.IOException {\n    if (len == off) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (off == (-1)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (b == null) {\n                        throw new java.lang.NullPointerException(\"Byte array is null\");\n                    } \n                    if ((len < 0) || ((off + len) > (b.int))) {\n                        throw new java.lang.IndexOutOfBoundsException((((((\"Array Size=\" + (b.int)) + \", offset=\") + off) + \", length=\") + len));\n                    } \n                    if (len == 0) {\n                        return 0;\n                    } \n                    if ((!(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.ByteBuffer.hasRemaining())) && (!(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.CharBuffer.hasRemaining()))) {\n                        return -1;\n                    } \n                    int int = 0;\n                    while (len > 0) {\n                        if (org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.ByteBuffer.hasRemaining()) {\n                            int int = java.lang.Math.min(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.ByteBuffer.remaining(), len);\n                            org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.ByteBuffer.get(b, off, chunk);\n                            off += chunk;\n                            len -= chunk;\n                            bytesRead += chunk;\n                        } else {\n                            fillBuffer();\n                            if ((!(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.ByteBuffer.hasRemaining())) && (!(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.CharBuffer.hasRemaining()))) {\n                                break;\n                            } \n                        }\n                    }\n                    return (bytesRead == 0) && (!(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.CharBuffer.hasRemaining())) ? -1 : bytesRead;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstGT":"off"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:111","type":"CtBinaryOperatorImpl","sourcecode":"(charset == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))"},"failures":[],"tindex":"30def4f4-3e81-11e6-8a15-3fae32a0365d","method":{"position":"org.apache.commons.io.IOUtils:695","type":"CtMethodImpl","sourcecode":"public static char[] toCharArray(java.io.InputStream is, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if ((encoding == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))) {\n        {\n            if ((encoding == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.io.CharArrayWriter java.io.CharArrayWriter = new java.io.CharArrayWriter();\n                    org.apache.commons.io.IOUtils.copy(is, output, encoding);\n                    return output.toCharArray();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"encoding"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.BoundedInputStream:86","type":"CtBinaryOperatorImpl","sourcecode":"((max) >= 0) && ((pos) >= (max))"},"failures":[],"tindex":"30def4f5-3e81-11e6-8a15-69672b1a11c1","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:636","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter sizeRangeFileFilter(long minSizeInclusive, long maxSizeInclusive) {\n    if ((maxSizeInclusive >= 0) && (minSizeInclusive >= (long))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = new org.apache.commons.io.filefilter.SizeFileFilter(minSizeInclusive , true);\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = new org.apache.commons.io.filefilter.SizeFileFilter((maxSizeInclusive + 1L) , false);\n            return new org.apache.commons.io.filefilter.AndFileFilter(minimumFilter , maximumFilter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"max":"maxSizeInclusive","pos":"minSizeInclusive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"30df1c06-3e81-11e6-8a15-735a59fda7bf","method":{"position":"org.apache.commons.io.input.TaggedInputStream:101","type":"CtMethodImpl","sourcecode":"public void throwIfCauseOf(java.lang.Throwable throwable) throws java.io.IOException {\n    if (null != throwable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(throwable, java.io.Serializable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"throwable"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2896","type":"CtUnaryOperatorImpl","sourcecode":"!(src.exists())"},"failures":[],"tindex":"30df1c07-3e81-11e6-8a15-d13e534bc8bc","method":{"position":"org.apache.commons.io.FileUtils:2920","type":"CtMethodImpl","sourcecode":"public static boolean isSymlink(java.io.File file) throws java.io.IOException {\n    if (!(file.exists())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File must not be null\");\n            } \n            if (org.apache.commons.io.FilenameUtils.isSystemWindows()) {\n                return false;\n            } \n            java.io.File java.io.File = null;\n            if ((file.getParent()) == null) {\n                fileInCanonicalDir = file;\n            } else {\n                java.io.File java.io.File = file.getParentFile().getCanonicalFile();\n                fileInCanonicalDir = new java.io.File(canonicalDir , file.getName());\n            }\n            if (fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2821","type":"CtInvocationImpl","sourcecode":"srcFile.isDirectory()"},"failures":[],"tindex":"30df1c08-3e81-11e6-8a15-e72155eb6740","method":{"position":"org.apache.commons.io.FileUtils:2707","type":"CtMethodImpl","sourcecode":"public static java.util.zip.Checksum checksum(java.io.File file, java.util.zip.Checksum checksum) throws java.io.IOException {\n    if (file.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file.isDirectory()) {\n                throw new java.lang.IllegalArgumentException(\"Checksums can't be computed on directories\");\n            } \n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = new java.util.zip.CheckedInputStream(new java.io.FileInputStream(file) , checksum);\n                org.apache.commons.io.IOUtils.copy(in, new org.apache.commons.io.output.NullOutputStream());\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n            }\n            return checksum;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.OrFileFilter:150","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"30df1c09-3e81-11e6-8a15-3f0ed5e11070","method":{"position":"org.apache.commons.io.output.ProxyWriter:242","type":"CtMethodImpl","sourcecode":"protected void beforeWrite(int n) throws java.io.IOException {\n    if (n > 0) {\n        {\n            if (n != n) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"n"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2308","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.exists())"},"failures":[],"tindex":"30df1c0a-3e81-11e6-8a15-79da7f3f9533","method":{"position":"org.apache.commons.io.FileUtils:1950","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data, java.lang.String encoding, boolean append) throws java.io.IOException {\n    if (!(file.exists())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeStringToFile(file, data, org.apache.commons.io.Charsets.toCharset(encoding), append);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:921","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[],"tindex":"30df431b-3e81-11e6-8a15-7976d0fffd4c","method":{"position":"org.apache.commons.io.IOUtils:502","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.InputStream input, int size) throws java.io.IOException {\n    if (size < 0) {\n        {\n            if (size < 0) {\n                throw new java.lang.IllegalArgumentException((\"Size must be equal or greater than zero: \" + size));\n            } \n            if (size == 0) {\n                return new byte[0];\n            } \n            byte[] byte[] = new byte[size];\n            int int = 0;\n            int int;\n            while ((offset < size) && ((readed = input.read(data, offset, (size - offset))) != (org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int))) {\n                offset += readed;\n            }\n            if (offset != size) {\n                throw new java.io.IOException((((\"Unexpected readed size. current: \" + offset) + \", excepted: \") + size));\n            } \n            return data;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"size"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:86","type":"CtBinaryOperatorImpl","sourcecode":"lastBlockLength > 0"},"failures":[],"tindex":"30df431c-3e81-11e6-8a15-6309150da93d","method":{"position":"org.apache.commons.io.input.ProxyReader:223","type":"CtMethodImpl","sourcecode":"protected void beforeRead(int n) throws java.io.IOException {\n    if (n > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lastBlockLength":"n"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:547","type":"CtBinaryOperatorImpl","sourcecode":"fileFilter == null"},"failures":[],"tindex":"30df431d-3e81-11e6-8a15-5f137276e217","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:151","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.io.File> filterList(org.apache.commons.io.filefilter.IOFileFilter filter, java.lang.Iterable<java.io.File> files) {\n    if ((filter == null) || (filter == null)) {\n        {\n            if (filter == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files, new java.util.ArrayList<java.io.File>());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilter":"filter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:391","type":"CtBinaryOperatorImpl","sourcecode":"i == (size - 1)"},"failures":[],"tindex":"30df431e-3e81-11e6-8a15-9960e7eef198","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:153","type":"CtMethodImpl","sourcecode":"protected void afterWrite(int n) throws java.io.IOException {\n    if (n == (n - 1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"n","i":"n"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2478","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.io.FileUtils.isSymlink(file))"},"failures":[],"tindex":"30df431f-3e81-11e6-8a15-c1624f0f2da0","method":{"position":"org.apache.commons.io.output.LockableFileWriter:232","type":"CtMethodImpl","sourcecode":"private void testLockDir(java.io.File lockDir) throws java.io.IOException {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(lockDir))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(lockDir.mkdirs())) && (!(parent.isDirectory()))) {\n                {\n                    if (!(lockDir.exists())) {\n                        throw new java.io.IOException((\"Could not find lockDir: \" + (lockDir.getAbsolutePath())));\n                    } \n                    if (!(lockDir.canWrite())) {\n                        throw new java.io.IOException((\"Could not write to lockDir: \" + (lockDir.getAbsolutePath())));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"lockDir"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:524","type":"CtBinaryOperatorImpl","sourcecode":"(xmlGuessEnc != null) && (!(xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_8)))"},"failures":[],"tindex":"30df4320-3e81-11e6-8a15-29059978b043","method":{"position":"org.apache.commons.io.FileSystemUtils:435","type":"CtMethodImpl","sourcecode":"long parseBytes(java.lang.String freeSpace, java.lang.String path) throws java.io.IOException {\n    if ((path != null) && (!(xmlGuessEnc.equals(freeSpace)))) {\n        {\n            try {\n                long long = java.lang.Long.parseLong(freeSpace);\n                if (bytes < 0) {\n                    throw new java.io.IOException((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not find free space in response \") + \"for path '\") + path) + \"'- check path is valid\"));\n                } \n                return bytes;\n            } catch (java.lang.NumberFormatException ex) {\n                throw new org.apache.commons.io.IOExceptionWithCause((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return numeric data as expected \") + \"for path '\") + path) + \"'- check path is valid\") , ex);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.input.XmlStreamReader.UTF_8":"freeSpace","xmlGuessEnc":"path"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceReader:104","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"30df6a31-3e81-11e6-8a15-f5ba8ec907ec","method":{"position":"org.apache.commons.io.input.NullReader:191","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] chars) throws java.io.IOException {\n    if (chars == null) {\n        {\n            return read(chars, 0, chars.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"chars"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:190","type":"CtBinaryOperatorImpl","sourcecode":"(encoding) != null"},"failures":[],"tindex":"30df6a32-3e81-11e6-8a15-2b860ea526ec","method":{"position":"org.apache.commons.io.FileUtils:1894","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (data != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeStringToFile(file, data, encoding, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2778","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"30df6a33-3e81-11e6-8a15-51fdaaedeb2c","method":{"position":"org.apache.commons.io.FileUtils:2530","type":"CtMethodImpl","sourcecode":"private static void checkDirectory(java.io.File directory) {\n    if (directory == null) {\n        {\n            if (!(directory.exists())) {\n                throw new java.lang.IllegalArgumentException((directory + \" does not exist\"));\n            } \n            if (!(directory.isDirectory())) {\n                throw new java.lang.IllegalArgumentException((directory + \" is not a directory\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"directory"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:482","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"30df6a34-3e81-11e6-8a15-69fe317afdd3","method":{"position":"org.apache.commons.io.filefilter.HiddenFileFilter:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return file.isHidden();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2893","type":"CtBinaryOperatorImpl","sourcecode":"destDir == null"},"failures":[],"tindex":"30df6a35-3e81-11e6-8a15-ebb820f66967","method":{"position":"org.apache.commons.io.filefilter.OrFileFilter:116","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(final java.io.File file) {\n    if (file == null) {\n        {\n            for (org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter : java.util.List<org.apache.commons.io.filefilter.IOFileFilter>) {\n                if (fileFilter.accept(file)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:72","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"30df9146-3e81-11e6-8a15-076ce92c7d47","method":{"position":"org.apache.commons.io.EndianUtils:426","type":"CtMethodImpl","sourcecode":"public static void writeSwappedFloat(java.io.OutputStream output, float value) throws java.io.IOException {\n    if (null != output) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.EndianUtils.writeSwappedInteger(output, java.lang.Float.floatToIntBits(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:711","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"30df9147-3e81-11e6-8a15-f575f5cfa794","method":{"position":"org.apache.commons.io.IOUtils:1184","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.CharSequence input, java.lang.String encoding) throws java.io.IOException {\n    if (input == null) {\n        {\n            return org.apache.commons.io.IOUtils.toInputStream(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2778","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"30df9148-3e81-11e6-8a15-3355f2789a04","method":{"position":"org.apache.commons.io.FileUtils:2043","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, java.nio.charset.Charset encoding, boolean append) throws java.io.IOException {\n    if (file == null) {\n        {\n            java.lang.String java.lang.String = data == null ? null : data.toString();\n            org.apache.commons.io.FileUtils.writeStringToFile(file, str, encoding, append);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:239","type":"CtBinaryOperatorImpl","sourcecode":"((file != null) && (file.isFile())) && (file.canRead())"},"failures":[],"tindex":"30df9149-3e81-11e6-8a15-a56fcca0d8dd","method":{"position":"org.apache.commons.io.FileUtils:2117","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.lang.String encoding, java.util.Collection<?> lines) throws java.io.IOException {\n    if (((file != null) && (file.isFile())) && (file.canRead())) {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, encoding, lines, null, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:408","type":"CtBinaryOperatorImpl","sourcecode":"i == (size - 1)"},"failures":[],"tindex":"30df914a-3e81-11e6-8a15-43e04363b118","method":{"position":"org.apache.commons.io.output.TeeOutputStream:74","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(int b) throws java.io.IOException {\n    if (b != b) {\n        {\n            if (b == (b - 1)) {\n                {\n                    super.write(b);\n                    org.apache.commons.io.output.TeeOutputStream.this.java.io.OutputStream.write(b);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"b","i":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.CharSequenceInputStream:121","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"30df914b-3e81-11e6-8a15-918898fb30dc","method":{"position":"org.apache.commons.io.ByteOrderMark:105","type":"CtMethodImpl","sourcecode":"public int get(int pos) {\n    if (pos == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return int[][pos];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"pos"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2928","type":"CtBinaryOperatorImpl","sourcecode":"(file.getParent()) == null"},"failures":[],"tindex":"30dfb85c-3e81-11e6-8a15-010646da5950","method":{"position":"org.apache.commons.io.FileUtils:1560","type":"CtMethodImpl","sourcecode":"public static boolean deleteQuietly(java.io.File file) {\n    if ((file.getParent()) == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file == null) {\n                return false;\n            } \n            try {\n                if (file.isDirectory()) {\n                    org.apache.commons.io.FileUtils.cleanDirectory(file);\n                } \n            } catch (java.lang.Exception ignored) {\n            }\n            try {\n                return file.delete();\n            } catch (java.lang.Exception ignored) {\n                return false;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:57","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"30dfb85d-3e81-11e6-8a15-19158314a229","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:657","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String magicNumber) {\n    if (magicNumber == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.MagicNumberFileFilter(magicNumber);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"magicNumber"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2455","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.io.IOUtils.EOF) == count"},"failures":[],"tindex":"30dfb85e-3e81-11e6-8a15-bb06a0227f81","method":{"position":"org.apache.commons.io.input.CharSequenceInputStream:113","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b, int off, int len) throws java.io.IOException {\n    if (len == off) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (off == (-1)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (b == null) {\n                        throw new java.lang.NullPointerException(\"Byte array is null\");\n                    } \n                    if ((len < 0) || ((off + len) > (b.int))) {\n                        throw new java.lang.IndexOutOfBoundsException((((((\"Array Size=\" + (b.int)) + \", offset=\") + off) + \", length=\") + len));\n                    } \n                    if (len == 0) {\n                        return 0;\n                    } \n                    if ((!(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.ByteBuffer.hasRemaining())) && (!(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.CharBuffer.hasRemaining()))) {\n                        return -1;\n                    } \n                    int int = 0;\n                    while (len > 0) {\n                        if (org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.ByteBuffer.hasRemaining()) {\n                            int int = java.lang.Math.min(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.ByteBuffer.remaining(), len);\n                            org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.ByteBuffer.get(b, off, chunk);\n                            off += chunk;\n                            len -= chunk;\n                            bytesRead += chunk;\n                        } else {\n                            fillBuffer();\n                            if ((!(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.ByteBuffer.hasRemaining())) && (!(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.CharBuffer.hasRemaining()))) {\n                                break;\n                            } \n                        }\n                    }\n                    return (bytesRead == 0) && (!(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.CharBuffer.hasRemaining())) ? -1 : bytesRead;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"off","org.apache.commons.io.IOUtils.EOF":"len"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1076","type":"CtInvocationImpl","sourcecode":"srcFile.isDirectory()"},"failures":[],"tindex":"30dfb85f-3e81-11e6-8a15-417392785ce2","method":{"position":"org.apache.commons.io.FileUtils:2135","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.lang.String encoding, java.util.Collection<?> lines, boolean append) throws java.io.IOException {\n    if (file.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, encoding, lines, null, append);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2286","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.io.IOUtils.SKIP_BYTE_BUFFER) == null"},"failures":[],"tindex":"30dfdf70-3e81-11e6-8a15-a5970fe9cda9","method":{"position":"org.apache.commons.io.output.ThresholdingOutputStream:107","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            checkThreshold(b.int);\n            getStream().write(b);\n            long += b.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.IOUtils.SKIP_BYTE_BUFFER":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.AbstractFileComparator:44","type":"CtBinaryOperatorImpl","sourcecode":"files != null"},"failures":[],"tindex":"30dfdf71-3e81-11e6-8a15-59f21e2a1ed0","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:324","type":"CtMethodImpl","sourcecode":"private void checkAndNotify(org.apache.commons.io.monitor.FileEntry parent, org.apache.commons.io.monitor.FileEntry[] previous, java.io.File[] files) {\n    if (files != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            org.apache.commons.io.monitor.FileEntry[] org.apache.commons.io.monitor.FileEntry[] = (files.int) > 0 ? new org.apache.commons.io.monitor.FileEntry[files.int] : org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry[];\n            for (org.apache.commons.io.monitor.FileEntry org.apache.commons.io.monitor.FileEntry : previous) {\n                while ((c < (files.int)) && ((java.util.Comparator<java.io.File>.compare(entry.getFile(), files[c])) > 0)) {\n                    current[c] = createFileEntry(parent, files[c]);\n                    doCreate(current[c]);\n                    c++;\n                }\n                if ((c < (files.int)) && ((java.util.Comparator<java.io.File>.compare(entry.getFile(), files[c])) == 0)) {\n                    doMatch(entry, files[c]);\n                    checkAndNotify(entry, entry.getChildren(), listFiles(files[c]));\n                    current[c] = entry;\n                    c++;\n                } else {\n                    checkAndNotify(entry, entry.getChildren(), org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.io.File[]);\n                    doDelete(entry);\n                }\n            }\n            for ( ; c < (files.int) ; c++) {\n                current[c] = createFileEntry(parent, files[c]);\n                doCreate(current[c]);\n            }\n            parent.setChildren(current);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:520","type":"CtBinaryOperatorImpl","sourcecode":"offset != size"},"failures":[],"tindex":"30dfdf72-3e81-11e6-8a15-cf7b406c73d1","method":{"position":"org.apache.commons.io.output.XmlStreamWriter:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] cbuf, int off, int len) throws java.io.IOException {\n    if (off != len) {\n        {\n            if ((java.io.StringWriter) != null) {\n                detectEncoding(cbuf, off, len);\n            } else {\n                java.io.Writer.write(cbuf, off, len);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"off","size":"len"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2223","type":"CtBinaryOperatorImpl","sourcecode":"ch != ch2"},"failures":[],"tindex":"30dfdf73-3e81-11e6-8a15-89c185e39171","method":{"position":"org.apache.commons.io.output.TeeOutputStream:74","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(int b) throws java.io.IOException {\n    if (b != b) {\n        {\n            if (b == (b - 1)) {\n                {\n                    super.write(b);\n                    org.apache.commons.io.output.TeeOutputStream.this.java.io.OutputStream.write(b);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"b","ch2":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.LastModifiedFileComparator:69","type":"CtBinaryOperatorImpl","sourcecode":"result < 0"},"failures":[],"tindex":"30e00684-3e81-11e6-8a15-29fc620c217f","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:718","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[] magicNumber, long offset) {\n    if (offset < 0) {\n        {\n            return new org.apache.commons.io.filefilter.MagicNumberFileFilter(magicNumber , offset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:627","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"30e00685-3e81-11e6-8a15-b97a3d26d6da","method":{"position":"org.apache.commons.io.output.ProxyWriter:74","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence csq, int start, int end) throws java.io.IOException {\n    if (start == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                beforeWrite((end - start));\n                java.io.Writer.append(csq, start, end);\n                afterWrite((end - start));\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n            return org.apache.commons.io.output.ProxyWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"start"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:541","type":"CtBinaryOperatorImpl","sourcecode":"((xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16)))) && (!(xmlEnc.equals(bomEnc)))"},"failures":[],"tindex":"30e00686-3e81-11e6-8a15-d75c065b8831","method":{"position":"org.apache.commons.io.input.TailerListenerAdapter:54","type":"CtMethodImpl","sourcecode":"public void handle(java.lang.String line) {\n    if (((line != null) && (!(xmlEnc.equals(line)))) && (!(xmlEnc.equals(line)))) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"line","xmlEnc":"line","org.apache.commons.io.input.XmlStreamReader.UTF_16":"line"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1367","type":"CtBinaryOperatorImpl","sourcecode":"(srcDir.exists()) == false"},"failures":[],"tindex":"30e00687-3e81-11e6-8a15-59f766798e87","method":{"position":"org.apache.commons.io.FileUtils:1508","type":"CtMethodImpl","sourcecode":"public static void copyInputStreamToFile(java.io.InputStream source, java.io.File destination) throws java.io.IOException {\n    if ((destination.exists()) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                java.io.FileOutputStream java.io.FileOutputStream = org.apache.commons.io.FileUtils.openOutputStream(destination);\n                try {\n                    org.apache.commons.io.IOUtils.copy(source, output);\n                    output.close();\n                } finally {\n                    org.apache.commons.io.IOUtils.closeQuietly(output);\n                }\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(source);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"destination"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1958","type":"CtBinaryOperatorImpl","sourcecode":"count > (java.lang.Integer.MAX_VALUE)"},"failures":[],"tindex":"30e00688-3e81-11e6-8a15-239c2823f959","method":{"position":"org.apache.commons.io.input.Tailer:236","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.input.Tailer create(java.io.File file, org.apache.commons.io.input.TailerListener listener, long delayMillis, boolean end, int bufSize) {\n    if (delayMillis > bufSize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.input.Tailer org.apache.commons.io.input.Tailer = new org.apache.commons.io.input.Tailer(file , listener , delayMillis , end , bufSize);\n            java.lang.Thread java.lang.Thread = new java.lang.Thread(tailer);\n            thread.setDaemon(true);\n            thread.start();\n            return tailer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"delayMillis","java.lang.Integer.MAX_VALUE":"bufSize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:352","type":"CtInvocationImpl","sourcecode":"file.exists()"},"failures":[],"tindex":"30e00689-3e81-11e6-8a15-4be4d2fca1f8","method":{"position":"org.apache.commons.io.FileUtils:1708","type":"CtMethodImpl","sourcecode":"public static java.lang.String readFileToString(java.io.File file, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (file.exists()) {\n        {\n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = org.apache.commons.io.FileUtils.openInputStream(file);\n                return org.apache.commons.io.IOUtils.toString(in, org.apache.commons.io.Charsets.toCharset(encoding));\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.SuffixFileFilter:189","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"30e02d9a-3e81-11e6-8a15-5d08ac53715d","method":{"position":"org.apache.commons.io.input.AutoCloseInputStream:75","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void afterRead(int n) throws java.io.IOException {\n    if (n > 0) {\n        {\n            if (n == (-1)) {\n                close();\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2367","type":"CtInvocationImpl","sourcecode":"directory.exists()"},"failures":[],"tindex":"30e02d9b-3e81-11e6-8a15-754d7edbf51e","method":{"position":"org.apache.commons.io.filefilter.TrueFileFilter:67","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File dir, java.lang.String name) {\n    if (dir.exists()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"dir"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1278","type":"CtBinaryOperatorImpl","sourcecode":"(filename == null) && (wildcardMatcher == null)"},"failures":[],"tindex":"30e02d9c-3e81-11e6-8a15-157808405a3b","method":{"position":"org.apache.commons.io.input.XmlStreamReader:774","type":"CtMethodImpl","sourcecode":"static boolean isTextXml(java.lang.String mime) {\n    if ((mime == null) && (mime == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (mime != null) && (((mime.equals(\"text/xml\")) || (mime.equals(\"text/xml-external-parsed-entity\"))) || ((mime.startsWith(\"text/\")) && (mime.endsWith(\"+xml\"))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"mime","wildcardMatcher":"mime"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:382","type":"CtFieldReadImpl","sourcecode":"markedAtStart"},"failures":[],"tindex":"30e02d9d-3e81-11e6-8a15-814d8f4fe9b5","method":{"position":"org.apache.commons.io.input.BoundedInputStream:227","type":"CtMethodImpl","sourcecode":"public void setPropagateClose(boolean propagateClose) {\n    if (propagateClose) {\n        {\n            org.apache.commons.io.input.BoundedInputStream.this.boolean = propagateClose;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"markedAtStart":"propagateClose"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:218","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"30e02d9e-3e81-11e6-8a15-6fceb6c694ef","method":{"position":"org.apache.commons.io.filefilter.DelegateFileFilter:89","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if (dir == null) {\n        {\n            if ((java.io.FilenameFilter) != null) {\n                return java.io.FilenameFilter.accept(dir, name);\n            } else {\n                return super.accept(dir, name);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"dir"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:140","type":"CtBinaryOperatorImpl","sourcecode":"(writer) != null"},"failures":[],"tindex":"30e02d9f-3e81-11e6-8a15-1d5c5dd74ec1","method":{"position":"org.apache.commons.io.IOUtils:1568","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void write(java.lang.StringBuffer data, java.io.Writer output) throws java.io.IOException {\n    if (output != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data != null) {\n                output.write(data.toString());\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"writer":"output"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.NullReader:169","type":"CtFieldReadImpl","sourcecode":"eof"},"failures":[],"tindex":"30e02da0-3e81-11e6-8a15-f3c8d827a161","method":{"position":"org.apache.commons.io.input.Tailer:255","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.input.Tailer create(java.io.File file, org.apache.commons.io.input.TailerListener listener, long delayMillis, boolean end, boolean reOpen, int bufSize) {\n    if (end) {\n        {\n            org.apache.commons.io.input.Tailer org.apache.commons.io.input.Tailer = new org.apache.commons.io.input.Tailer(file , listener , delayMillis , end , reOpen , bufSize);\n            java.lang.Thread java.lang.Thread = new java.lang.Thread(tailer);\n            thread.setDaemon(true);\n            thread.start();\n            return tailer;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"eof":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullReader:172","type":"CtBinaryOperatorImpl","sourcecode":"(position) == (size)"},"failures":[],"tindex":"30e054b1-3e81-11e6-8a15-992b2f472650","method":{"position":"org.apache.commons.io.IOUtils:482","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.InputStream input, long size) throws java.io.IOException {\n    if (size == size) {\n        {\n            if (size > (java.lang.Integer.java.lang.Integer.int)) {\n                throw new java.lang.IllegalArgumentException((\"Size cannot be greater than Integer max value: \" + size));\n            } \n            return org.apache.commons.io.IOUtils.toByteArray(input, ((int)(size)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"size","position":"size"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.OrFileFilter:60","type":"CtBinaryOperatorImpl","sourcecode":"fileFilters == null"},"failures":[],"tindex":"30e054b2-3e81-11e6-8a15-ed5c79d9b487","method":{"position":"org.apache.commons.io.filefilter.OrFileFilter:107","type":"CtMethodImpl","sourcecode":"public void setFileFilters(final java.util.List<org.apache.commons.io.filefilter.IOFileFilter> fileFilters) {\n    if (fileFilters == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.filefilter.OrFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.clear();\n            org.apache.commons.io.filefilter.OrFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.addAll(fileFilters);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilters":"fileFilters"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:259","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"30e054b3-3e81-11e6-8a15-dde8a661be8b","method":{"position":"org.apache.commons.io.FilenameUtils:481","type":"CtMethodImpl","sourcecode":"public static java.lang.String concat(java.lang.String basePath, java.lang.String fullFilenameToAdd) {\n    if (basePath == null) {\n        {\n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(fullFilenameToAdd);\n            if (prefix < 0) {\n                return null;\n            } \n            if (prefix > 0) {\n                return org.apache.commons.io.FilenameUtils.normalize(fullFilenameToAdd);\n            } \n            if (basePath == null) {\n                return null;\n            } \n            int int = basePath.length();\n            if (len == 0) {\n                return org.apache.commons.io.FilenameUtils.normalize(fullFilenameToAdd);\n            } \n            char char = basePath.charAt((len - 1));\n            if (org.apache.commons.io.FilenameUtils.isSeparator(ch)) {\n                return org.apache.commons.io.FilenameUtils.normalize((basePath + fullFilenameToAdd));\n            } else {\n                return org.apache.commons.io.FilenameUtils.normalize(((basePath + '/') + fullFilenameToAdd));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"basePath"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.HexDump:95","type":"CtBinaryOperatorImpl","sourcecode":"k < chars_read"},"failures":[],"tindex":"30e054b4-3e81-11e6-8a15-71b78aba8e1c","method":{"position":"org.apache.commons.io.input.BOMInputStream:331","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] buf, int off, int len) throws java.io.IOException {\n    if (off < off) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = 0;\n            int int = 0;\n            while ((len > 0) && (b >= 0)) {\n                b = readFirstBytes();\n                if (b >= 0) {\n                    buf[(off++)] = ((byte)(b & 255));\n                    len--;\n                    firstCount++;\n                } \n            }\n            int int = java.io.InputStream.read(buf, off, len);\n            return secondCount < 0 ? firstCount > 0 ? firstCount : -1 : firstCount + secondCount;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chars_read":"off","k":"off"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"30e07bc5-3e81-11e6-8a15-114dfc3fde88","method":{"position":"org.apache.commons.io.input.BOMInputStream:356","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] buf) throws java.io.IOException {\n    if (buf != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return read(buf, 0, buf.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"buf"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1190","type":"CtBinaryOperatorImpl","sourcecode":"srcDir == null"},"failures":[],"tindex":"30e07bc6-3e81-11e6-8a15-03757f73d247","method":{"position":"org.apache.commons.io.FileUtils:2684","type":"CtMethodImpl","sourcecode":"public static long checksumCRC32(java.io.File file) throws java.io.IOException {\n    if (file == null) {\n        {\n            java.util.zip.CRC32 java.util.zip.CRC32 = new java.util.zip.CRC32();\n            org.apache.commons.io.FileUtils.checksum(file, crc);\n            return crc.getValue();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"30e07bc7-3e81-11e6-8a15-fdb096496bb2","method":{"position":"org.apache.commons.io.input.TailerListenerAdapter:61","type":"CtMethodImpl","sourcecode":"public void handle(java.lang.Exception ex) {\n    if (null != ex) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"ex"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:511","type":"CtBinaryOperatorImpl","sourcecode":"bomEnc == null"},"failures":[],"tindex":"30e07bc8-3e81-11e6-8a15-2fe068736130","method":{"position":"org.apache.commons.io.FileUtils:2014","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, encoding, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:218","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"30e07bc9-3e81-11e6-8a15-6979dadd932b","method":{"position":"org.apache.commons.io.DirectoryWalker:561","type":"CtMethodImpl","sourcecode":"protected void handleDirectoryEnd(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (directory == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2899","type":"CtInvocationImpl","sourcecode":"src.isDirectory()"},"failures":[],"tindex":"30e07bca-3e81-11e6-8a15-69505cc00b7a","method":{"position":"org.apache.commons.io.FileUtils:2553","type":"CtMethodImpl","sourcecode":"public static boolean isFileNewer(java.io.File file, java.io.File reference) {\n    if (reference.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (reference == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified reference file\");\n            } \n            if (!(reference.exists())) {\n                throw new java.lang.IllegalArgumentException(((\"The reference file '\" + reference) + \"' doesn't exist\"));\n            } \n            return org.apache.commons.io.FileUtils.isFileNewer(file, reference.lastModified());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"reference"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2747","type":"CtInvocationImpl","sourcecode":"destDir.exists()"},"failures":[],"tindex":"30e0a2db-3e81-11e6-8a15-d3160124c6e2","method":{"position":"org.apache.commons.io.FileUtils:1308","type":"CtMethodImpl","sourcecode":"public static void copyDirectory(java.io.File srcDir, java.io.File destDir, java.io.FileFilter filter) throws java.io.IOException {\n    if (destDir.exists()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir, filter, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"destDir"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.ByteOrderMark:70","type":"CtBinaryOperatorImpl","sourcecode":"(charsetName == null) || ((charsetName.length()) == 0)"},"failures":[],"tindex":"30e0a2dc-3e81-11e6-8a15-2968dff21ca4","method":{"position":"org.apache.commons.io.IOCase:217","type":"CtMethodImpl","sourcecode":"public int checkIndexOf(java.lang.String str, int strStartIndex, java.lang.String search) {\n    if ((str == null) || ((charsetName.length()) == 0)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (str.length()) - (search.length());\n            if (endIndex >= strStartIndex) {\n                for (int int = strStartIndex ; i <= endIndex ; i++) {\n                    if (checkRegionMatches(str, i, search)) {\n                        return i;\n                    } \n                }\n            } \n            return -1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsetName":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.NullReader:315","type":"CtFieldReadImpl","sourcecode":"throwEofException"},"failures":[],"tindex":"30e0a2dd-3e81-11e6-8a15-6d7cc6984cb8","method":{"position":"org.apache.commons.io.input.Tailer:273","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.input.Tailer create(java.io.File file, org.apache.commons.io.input.TailerListener listener, long delayMillis, boolean end) {\n    if (end) {\n        {\n            return org.apache.commons.io.input.Tailer.create(file, listener, delayMillis, end, org.apache.commons.io.input.Tailer.org.apache.commons.io.input.Tailer.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwEofException":"end"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileEntry:71","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"30e0a2de-3e81-11e6-8a15-73eaede2ad17","method":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:118","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if (dir == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.regex.Pattern.matcher(name).matches();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"dir"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2273","type":"CtUnaryOperatorImpl","sourcecode":"!(file.delete())"},"failures":[],"tindex":"30e0a2df-3e81-11e6-8a15-c90fc27aa972","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:357","type":"CtMethodImpl","sourcecode":"private org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry parent, java.io.File file) {\n    if (!(file.delete())) {\n        {\n            org.apache.commons.io.monitor.FileEntry org.apache.commons.io.monitor.FileEntry = parent.newChildInstance(file);\n            entry.refresh(file);\n            java.io.File[] java.io.File[] = listFiles(file);\n            org.apache.commons.io.monitor.FileEntry[] org.apache.commons.io.monitor.FileEntry[] = (files.int) > 0 ? new org.apache.commons.io.monitor.FileEntry[files.int] : org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry[];\n            for (int int = 0 ; i < (files.int) ; i++) {\n                children[i] = createFileEntry(entry, files[i]);\n            }\n            entry.setChildren(children);\n            return entry;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:111","type":"CtBinaryOperatorImpl","sourcecode":"(charset == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))"},"failures":[],"tindex":"30e0a2e0-3e81-11e6-8a15-597c4a99933a","method":{"position":"org.apache.commons.io.IOUtils:695","type":"CtMethodImpl","sourcecode":"public static char[] toCharArray(java.io.InputStream is, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if ((encoding == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))) {\n        {\n            if ((encoding == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.io.CharArrayWriter java.io.CharArrayWriter = new java.io.CharArrayWriter();\n                    org.apache.commons.io.IOUtils.copy(is, output, encoding);\n                    return output.toCharArray();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"encoding"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:492","type":"CtBinaryOperatorImpl","sourcecode":"encoding == null"},"failures":[],"tindex":"30e0c9f1-3e81-11e6-8a15-6f479918e9fc","method":{"position":"org.apache.commons.io.IOUtils:865","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URI uri, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            return org.apache.commons.io.IOUtils.toString(uri, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.OrFileFilter:75","type":"CtBinaryOperatorImpl","sourcecode":"(filter1 == null) || (filter2 == null)"},"failures":[],"tindex":"30e0c9f2-3e81-11e6-8a15-f78bdb202238","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:151","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.io.File> filterList(org.apache.commons.io.filefilter.IOFileFilter filter, java.lang.Iterable<java.io.File> files) {\n    if ((filter == null) || (filter == null)) {\n        {\n            if (filter == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files, new java.util.ArrayList<java.io.File>());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"filter","filter2":"filter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:637","type":"CtInvocationImpl","sourcecode":"cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32)"},"failures":[],"tindex":"30e0c9f3-3e81-11e6-8a15-d326f3169f05","method":{"position":"org.apache.commons.io.IOUtils:1210","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.String input, java.nio.charset.Charset encoding) {\n    if (input.equals(input)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.io.ByteArrayInputStream(input.getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cTEnc":"input","org.apache.commons.io.input.XmlStreamReader.UTF_32":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:92","type":"CtBinaryOperatorImpl","sourcecode":"((osName.indexOf(\"hp-ux\")) != (-1)) || ((osName.indexOf(\"aix\")) != (-1))"},"failures":[],"tindex":"30e0c9f4-3e81-11e6-8a15-6de2e4506c90","method":{"position":"org.apache.commons.io.input.XmlStreamReader:507","type":"CtMethodImpl","sourcecode":"java.lang.String calculateRawEncoding(java.lang.String bomEnc, java.lang.String xmlGuessEnc, java.lang.String xmlEnc) throws java.io.IOException {\n    if (((xmlEnc.indexOf(\"hp-ux\")) != (-1)) || ((osName.indexOf(\"aix\")) != (-1))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (bomEnc == null) {\n                if ((xmlGuessEnc == null) || (xmlEnc == null)) {\n                    return (java.lang.String) == null ? org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String : java.lang.String;\n                } \n                if ((xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) && ((xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) || (xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)))) {\n                    return xmlGuessEnc;\n                } \n                return xmlEnc;\n            } \n            if (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) {\n                if ((xmlGuessEnc != null) && (!(xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)))) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, new java.lang.Object[]{ bomEnc , xmlGuessEnc , xmlEnc });\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                if ((xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)))) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, new java.lang.Object[]{ bomEnc , xmlGuessEnc , xmlEnc });\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                return bomEnc;\n            } \n            if ((bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) || (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                if ((xmlGuessEnc != null) && (!(xmlGuessEnc.equals(bomEnc)))) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, new java.lang.Object[]{ bomEnc , xmlGuessEnc , xmlEnc });\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                if (((xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)))) && (!(xmlEnc.equals(bomEnc)))) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, new java.lang.Object[]{ bomEnc , xmlGuessEnc , xmlEnc });\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                return bomEnc;\n            } \n            if ((bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) || (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                if ((xmlGuessEnc != null) && (!(xmlGuessEnc.equals(bomEnc)))) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, new java.lang.Object[]{ bomEnc , xmlGuessEnc , xmlEnc });\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                if (((xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)))) && (!(xmlEnc.equals(bomEnc)))) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, new java.lang.Object[]{ bomEnc , xmlGuessEnc , xmlEnc });\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                return bomEnc;\n            } \n            java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, new java.lang.Object[]{ bomEnc , xmlGuessEnc , xmlEnc });\n            throw new org.apache.commons.io.input.XmlStreamReaderException(msg , bomEnc , xmlGuessEnc , xmlEnc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"osName":"xmlEnc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:797","type":"CtBinaryOperatorImpl","sourcecode":"(file1.isDirectory()) || (file2.isDirectory())"},"failures":[],"tindex":"30e0f105-3e81-11e6-8a15-8185a5e21bc3","method":{"position":"org.apache.commons.io.FileUtils:682","type":"CtMethodImpl","sourcecode":"public static java.util.Collection<java.io.File> listFiles(java.io.File directory, java.lang.String[] extensions, boolean recursive) {\n    if ((directory.isDirectory()) || (directory.isDirectory())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter;\n            if (extensions == null) {\n                filter = org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.IOFileFilter;\n            } else {\n                java.lang.String[] java.lang.String[] = org.apache.commons.io.FileUtils.toSuffixes(extensions);\n                filter = new org.apache.commons.io.filefilter.SuffixFileFilter(suffixes);\n            }\n            return org.apache.commons.io.FileUtils.listFiles(directory, filter, (recursive ? org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.IOFileFilter : org.apache.commons.io.filefilter.FalseFileFilter.org.apache.commons.io.filefilter.FalseFileFilter.org.apache.commons.io.filefilter.IOFileFilter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"directory","file1":"directory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"30e0f106-3e81-11e6-8a15-191dfec5a767","method":{"position":"org.apache.commons.io.CopyUtils:134","type":"CtMethodImpl","sourcecode":"public static void copy(byte[] input, java.io.OutputStream output) throws java.io.IOException {\n    if (input != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            output.write(input);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullReader:242","type":"CtBinaryOperatorImpl","sourcecode":"(position) > ((mark) + (readlimit))"},"failures":[],"tindex":"30e0f107-3e81-11e6-8a15-f54f6d53a575","method":{"position":"org.apache.commons.io.FileSystemUtils:233","type":"CtMethodImpl","sourcecode":"public static long freeSpaceKb(long timeout) throws java.io.IOException {\n    if (timeout > (timeout + timeout)) {\n        {\n            return org.apache.commons.io.FileSystemUtils.freeSpaceKb(new java.io.File(\".\").getAbsolutePath(), timeout);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"readlimit":"timeout","position":"timeout","mark":"timeout"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:175","type":"CtBinaryOperatorImpl","sourcecode":"(prefix) != null"},"failures":[],"tindex":"30e0f108-3e81-11e6-8a15-2d5261e4de7c","method":{"position":"org.apache.commons.io.IOUtils:1151","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.CharSequence input) {\n    if (input != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toInputStream(input, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1156","type":"CtBinaryOperatorImpl","sourcecode":"(srcFile.length()) != (destFile.length())"},"failures":[],"tindex":"30e0f109-3e81-11e6-8a15-19f0abd185a5","method":{"position":"org.apache.commons.io.FileUtils:2307","type":"CtMethodImpl","sourcecode":"private static void deleteDirectoryOnExit(java.io.File directory) throws java.io.IOException {\n    if ((directory.length()) != (directory.length())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(directory.exists())) {\n                return ;\n            } \n            directory.deleteOnExit();\n            if (!(org.apache.commons.io.FileUtils.isSymlink(directory))) {\n                org.apache.commons.io.FileUtils.cleanDirectoryOnExit(directory);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"directory","srcFile":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:356","type":"CtBinaryOperatorImpl","sourcecode":"prefix < 0"},"failures":[],"tindex":"30e0f10a-3e81-11e6-8a15-5fe0014b0f0b","method":{"position":"org.apache.commons.io.EndianUtils:142","type":"CtMethodImpl","sourcecode":"public static int readSwappedUnsignedShort(byte[] data, int offset) {\n    if (offset < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:356","type":"CtBinaryOperatorImpl","sourcecode":"(file.canWrite()) == false"},"failures":[],"tindex":"30e1181b-3e81-11e6-8a15-156609a8f9ea","method":{"position":"org.apache.commons.io.FileUtils:2442","type":"CtMethodImpl","sourcecode":"public static java.math.BigInteger sizeOfAsBigInteger(java.io.File file) {\n    if ((file.canWrite()) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(file.exists())) {\n                java.lang.String java.lang.String = file + \" does not exist\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            if (file.isDirectory()) {\n                return org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file);\n            } else {\n                return java.math.BigInteger.valueOf(file.length());\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2864","type":"CtUnaryOperatorImpl","sourcecode":"!(destDir.exists())"},"failures":[],"tindex":"30e1181c-3e81-11e6-8a15-8f169324d9ce","method":{"position":"org.apache.commons.io.FileUtils:290","type":"CtMethodImpl","sourcecode":"public static java.io.FileInputStream openInputStream(java.io.File file) throws java.io.IOException {\n    if (!(file.exists())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file.exists()) {\n                if (file.isDirectory()) {\n                    throw new java.io.IOException(((\"File '\" + file) + \"' exists but is a directory\"));\n                } \n                if ((file.canRead()) == false) {\n                    throw new java.io.IOException(((\"File '\" + file) + \"' cannot be read\"));\n                } \n            } else {\n                throw new java.io.FileNotFoundException(((\"File '\" + file) + \"' does not exist\"));\n            }\n            return new java.io.FileInputStream(file);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.NullInputStream:189","type":"CtBinaryOperatorImpl","sourcecode":"(position) == (size)"},"failures":[],"tindex":"30e1181d-3e81-11e6-8a15-a119fbd729a3","method":{"position":"org.apache.commons.io.HexDump:139","type":"CtMethodImpl","sourcecode":"private static java.lang.StringBuilder dump(java.lang.StringBuilder _lbuffer, long value) {\n    if (value == value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (int int = 0 ; j < 8 ; j++) {\n                _lbuffer.append(org.apache.commons.io.HexDump.org.apache.commons.io.HexDump.char[][(((int)((value >> (org.apache.commons.io.HexDump.org.apache.commons.io.HexDump.int[][j])))) & 15)]);\n            }\n            return _lbuffer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"value","position":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:828","type":"CtBinaryOperatorImpl","sourcecode":"prefix < 0"},"failures":[],"tindex":"30e1181e-3e81-11e6-8a15-1bb236dbc5fd","method":{"position":"org.apache.commons.io.input.ProxyReader:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void mark(int idx) throws java.io.IOException {\n    if (idx < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                java.io.Reader.mark(idx);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"idx"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1369","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"30e1181f-3e81-11e6-8a15-134cd5541de3","method":{"position":"org.apache.commons.io.output.LockableFileWriter:327","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr) throws java.io.IOException {\n    if (chr != null) {\n        {\n            java.io.Writer.write(chr);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"chr"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:273","type":"CtInvocationImpl","sourcecode":"matches(bom)"},"failures":[],"tindex":"30e11820-3e81-11e6-8a15-e720f9ac8d8e","method":{"position":"org.apache.commons.io.FileCleaner:88","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void track(java.lang.String path, java.lang.Object marker) {\n    org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaningTracker.track(path, marker);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bom":"marker","this":"marker"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.TeeInputStream:145","type":"CtBinaryOperatorImpl","sourcecode":"n != (-1)"},"failures":[],"tindex":"30e11821-3e81-11e6-8a15-d1c398de1bbb","method":{"position":"org.apache.commons.io.input.ProxyInputStream:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void mark(int readlimit) {\n    if (readlimit != (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.InputStream.mark(readlimit);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"readlimit"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2935","type":"CtInvocationImpl","sourcecode":"fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())"},"failures":[],"tindex":"30e13e32-3e81-11e6-8a15-c3d77b71f9d1","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:59","type":"CtMethodImpl","sourcecode":"public void onDirectoryDelete(final java.io.File directory) {\n    if (directory.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileInCanonicalDir":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullReader:140","type":"CtUnaryOperatorImpl","sourcecode":"!(markSupported)"},"failures":[],"tindex":"30e13e33-3e81-11e6-8a15-d737644318ff","method":{"position":"org.apache.commons.io.FileUtils:2889","type":"CtMethodImpl","sourcecode":"public static void moveToDirectory(java.io.File src, java.io.File destDir, boolean createDestDir) throws java.io.IOException {\n    if (!createDestDir) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (src == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if (!(src.exists())) {\n                throw new java.io.FileNotFoundException(((\"Source '\" + src) + \"' does not exist\"));\n            } \n            if (src.isDirectory()) {\n                org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, createDestDir);\n            } else {\n                org.apache.commons.io.FileUtils.moveFileToDirectory(src, destDir, createDestDir);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"markSupported":"createDestDir"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.DirectoryWalker:301","type":"CtBinaryOperatorImpl","sourcecode":"(directoryFilter == null) && (fileFilter == null)"},"failures":[],"tindex":"30e13e34-3e81-11e6-8a15-310aa6440253","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:469","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if ((filter == null) && (filter == null)) {\n        {\n            return new org.apache.commons.io.filefilter.NotFileFilter(filter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilter":"filter","directoryFilter":"filter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2752","type":"CtInvocationImpl","sourcecode":"destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())"},"failures":[],"tindex":"30e13e35-3e81-11e6-8a15-6102e67b03eb","method":{"position":"org.apache.commons.io.FileUtils:1676","type":"CtMethodImpl","sourcecode":"public static boolean waitFor(java.io.File file, int seconds) {\n    if (file.getCanonicalPath().startsWith(file.getCanonicalPath())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            int int = 0;\n            while (!(file.exists())) {\n                if ((tick++) >= 10) {\n                    tick = 0;\n                    if ((timeout++) > seconds) {\n                        return false;\n                    } \n                } \n                try {\n                    java.lang.Thread.sleep(100);\n                } catch (java.lang.InterruptedException ignore) {\n                } catch (java.lang.Exception ex) {\n                    break;\n                }\n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file","destDir":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:182","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"30e13e36-3e81-11e6-8a15-35c4a960271a","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:166","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(int b) {\n    if (b > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (int) - (int);\n            if (inBufferPos == (byte[].int)) {\n                needNewBuffer(((int) + 1));\n                inBufferPos = 0;\n            } \n            byte[][inBufferPos] = ((byte)(b));\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:362","type":"CtBinaryOperatorImpl","sourcecode":"(!(parent.mkdirs())) && (!(parent.isDirectory()))"},"failures":[],"tindex":"30e13e37-3e81-11e6-8a15-1fd03abfc275","method":{"position":"org.apache.commons.io.FileUtils:325","type":"CtMethodImpl","sourcecode":"public static java.io.FileOutputStream openOutputStream(java.io.File file) throws java.io.IOException {\n    if ((!(file.mkdirs())) && (!(parent.isDirectory()))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.FileUtils.openOutputStream(file, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReaderInputStream:223","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"30e16548-3e81-11e6-8a15-a9b3120bcd0c","method":{"position":"org.apache.commons.io.IOUtils:948","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(byte[] input, java.lang.String encoding) throws java.io.IOException {\n    if (input == null) {\n        {\n            return new java.lang.String(input , org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256905180/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
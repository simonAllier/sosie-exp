{"failureDictionary":{},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2921","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"587e905e-2eb0-11e6-8762-6b5facb7c049","method":{"position":"org.apache.commons.io.filefilter.AbstractFileFilter:50","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File dir, java.lang.String name) {\n    if (dir == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return accept(new java.io.File(dir , name));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"dir"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.BoundedInputStream:172","type":"CtFieldReadImpl","sourcecode":"propagateClose"},"failures":[],"tindex":"587f2c9f-2eb0-11e6-8762-9b92dd818308","method":{"position":"org.apache.commons.io.FilenameUtils:334","type":"CtMethodImpl","sourcecode":"public static java.lang.String normalizeNoEndSeparator(java.lang.String filename, boolean unixSeparator) {\n    if (unixSeparator) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            char char = unixSeparator ? org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char : org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char;\n            return org.apache.commons.io.FilenameUtils.doNormalize(filename, separator, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"propagateClose":"unixSeparator"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFileFilter:76","type":"CtBinaryOperatorImpl","sourcecode":"wildcard == null"},"failures":[],"tindex":"587f53b0-2eb0-11e6-8762-47ee9f8f16c7","method":{"position":"org.apache.commons.io.FilenameUtils:864","type":"CtMethodImpl","sourcecode":"public static java.lang.String getFullPath(java.lang.String filename) {\n    if (filename == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.doGetFullPath(filename, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"wildcard":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:184","type":"CtUnaryOperatorImpl","sourcecode":"!(running)"},"failures":[],"tindex":"587f7ac1-2eb0-11e6-8762-c93fcf7fcc80","method":{"position":"org.apache.commons.io.input.XmlStreamReader:579","type":"CtMethodImpl","sourcecode":"java.lang.String calculateHttpEncoding(java.lang.String httpContentType, java.lang.String bomEnc, java.lang.String xmlGuessEnc, java.lang.String xmlEnc, boolean lenient) throws java.io.IOException {\n    if (!lenient) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (lenient && (xmlEnc != null)) {\n                return xmlEnc;\n            } \n            java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(httpContentType);\n            java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(httpContentType);\n            boolean boolean = org.apache.commons.io.input.XmlStreamReader.isAppXml(cTMime);\n            boolean boolean = org.apache.commons.io.input.XmlStreamReader.isTextXml(cTMime);\n            if ((!appXml) && (!textXml)) {\n                java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n            } \n            if (cTEnc == null) {\n                if (appXml) {\n                    return calculateRawEncoding(bomEnc, xmlGuessEnc, xmlEnc);\n                } else {\n                    return (java.lang.String) == null ? org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String : java.lang.String;\n                }\n            } \n            if ((cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                if (bomEnc != null) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                return cTEnc;\n            } \n            if (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) {\n                if ((bomEnc != null) && (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                    return bomEnc;\n                } \n                java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n            } \n            if ((cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                if (bomEnc != null) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                return cTEnc;\n            } \n            if (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) {\n                if ((bomEnc != null) && (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                    return bomEnc;\n                } \n                java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n            } \n            return cTEnc;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"running":"lenient"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:211","type":"CtBinaryOperatorImpl","sourcecode":"(memoryOutputStream) != null"},"failures":[],"tindex":"587fc8e2-2eb0-11e6-8762-8b5ecf6f8845","method":{"position":"org.apache.commons.io.IOUtils:2095","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.Reader input, java.io.OutputStream output) throws java.io.IOException {\n    if (output != null) {\n        {\n            org.apache.commons.io.IOUtils.copy(input, output, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"memoryOutputStream":"output"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2744","type":"CtUnaryOperatorImpl","sourcecode":"!(srcDir.isDirectory())"},"failures":[],"tindex":"587feff3-2eb0-11e6-8762-ed8011196cad","method":{"position":"org.apache.commons.io.FileUtils:2325","type":"CtMethodImpl","sourcecode":"private static void cleanDirectoryOnExit(java.io.File directory) throws java.io.IOException {\n    if (!(directory.isDirectory())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(directory.exists())) {\n                java.lang.String java.lang.String = directory + \" does not exist\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            if (!(directory.isDirectory())) {\n                java.lang.String java.lang.String = directory + \" is not a directory\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            java.io.File[] java.io.File[] = directory.listFiles();\n            if (files == null) {\n                throw new java.io.IOException((\"Failed to list contents of \" + directory));\n            } \n            java.io.IOException java.io.IOException = null;\n            for (java.io.File java.io.File : files) {\n                try {\n                    org.apache.commons.io.FileUtils.forceDeleteOnExit(file);\n                } catch (java.io.IOException ioe) {\n                    exception = ioe;\n                }\n            }\n            if (null != exception) {\n                throw exception;\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"directory"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2831","type":"CtUnaryOperatorImpl","sourcecode":"!rename"},"failures":[],"tindex":"58801704-2eb0-11e6-8762-55f304fe5a37","method":{"position":"org.apache.commons.io.FileUtils:1005","type":"CtMethodImpl","sourcecode":"public static void copyFileToDirectory(java.io.File srcFile, java.io.File destDir, boolean preserveFileDate) throws java.io.IOException {\n    if (!preserveFileDate) {\n        {\n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if ((destDir.exists()) && ((destDir.isDirectory()) == false)) {\n                throw new java.lang.IllegalArgumentException(((\"Destination '\" + destDir) + \"' is not a directory\"));\n            } \n            java.io.File java.io.File = new java.io.File(destDir , srcFile.getName());\n            org.apache.commons.io.FileUtils.copyFile(srcFile, destFile, preserveFileDate);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rename":"preserveFileDate"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2855","type":"CtBinaryOperatorImpl","sourcecode":"srcFile == null"},"failures":[],"tindex":"58801705-2eb0-11e6-8762-ebe08667d98a","method":{"position":"org.apache.commons.io.FileUtils:1359","type":"CtMethodImpl","sourcecode":"public static void copyDirectory(java.io.File srcDir, java.io.File destDir, java.io.FileFilter filter, boolean preserveFileDate) throws java.io.IOException {\n    if (destDir == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (srcDir == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if ((srcDir.exists()) == false) {\n                throw new java.io.FileNotFoundException(((\"Source '\" + srcDir) + \"' does not exist\"));\n            } \n            if ((srcDir.isDirectory()) == false) {\n                throw new java.io.IOException(((\"Source '\" + srcDir) + \"' exists but is not a directory\"));\n            } \n            if (srcDir.getCanonicalPath().equals(destDir.getCanonicalPath())) {\n                throw new java.io.IOException(((((\"Source '\" + srcDir) + \"' and destination '\") + destDir) + \"' are the same\"));\n            } \n            java.util.List<java.lang.String> java.util.List<java.lang.String> = null;\n            if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {\n                java.io.File[] java.io.File[] = filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);\n                if ((srcFiles != null) && ((srcFiles.int) > 0)) {\n                    exclusionList = new java.util.ArrayList<java.lang.String>(srcFiles.int);\n                    for (java.io.File java.io.File : srcFiles) {\n                        java.io.File java.io.File = new java.io.File(destDir , srcFile.getName());\n                        exclusionList.add(copiedFile.getCanonicalPath());\n                    }\n                } \n            } \n            org.apache.commons.io.FileUtils.doCopyDirectory(srcDir, destDir, filter, preserveFileDate, exclusionList);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"destDir"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:211","type":"CtBinaryOperatorImpl","sourcecode":"(memoryOutputStream) != null"},"failures":[],"tindex":"58806526-2eb0-11e6-8762-e1fbb2f6aa35","method":{"position":"org.apache.commons.io.IOUtils:1368","type":"CtMethodImpl","sourcecode":"public static void write(char[] data, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (output != null) {\n        {\n            if (data != null) {\n                output.write(new java.lang.String(data).getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"memoryOutputStream":"output"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:195","type":"CtBinaryOperatorImpl","sourcecode":"len > size"},"failures":[],"tindex":"58806527-2eb0-11e6-8762-0b6742ec761f","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str, int st, int end) throws java.io.IOException {\n    if (end > end) {\n        {\n            java.io.Writer.write(str, st, end);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"end","size":"end"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:498","type":"CtBinaryOperatorImpl","sourcecode":"(proc.exitValue()) != 0"},"failures":[],"tindex":"58808c38-2eb0-11e6-8762-6b6f12bbc0fd","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:222","type":"CtMethodImpl","sourcecode":"private static java.io.Writer initWriter(java.io.File file, java.lang.Object encoding, boolean append) throws java.io.IOException {\n    if ((encoding.exitValue()) != 0) {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File is missing\");\n            } \n            if (encoding == null) {\n                throw new java.lang.NullPointerException(\"Encoding is missing\");\n            } \n            boolean boolean = file.exists();\n            java.io.OutputStream java.io.OutputStream = null;\n            java.io.Writer java.io.Writer = null;\n            try {\n                stream = new java.io.FileOutputStream(file , append);\n                if (encoding instanceof java.nio.charset.Charset) {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.nio.charset.Charset)(encoding)));\n                } else if (encoding instanceof java.nio.charset.CharsetEncoder) {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.nio.charset.CharsetEncoder)(encoding)));\n                } else {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.lang.String)(encoding)));\n                }\n            } catch (java.io.IOException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            }\n            return writer;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"proc":"encoding"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2899","type":"CtInvocationImpl","sourcecode":"src.isDirectory()"},"failures":[],"tindex":"5880b349-2eb0-11e6-8762-970245805582","method":{"position":"org.apache.commons.io.filefilter.FalseFileFilter:57","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:212","type":"CtBinaryOperatorImpl","sourcecode":"(xmlPrologWriter) != null"},"failures":[],"tindex":"5880da5a-2eb0-11e6-8762-d9d483d48b9b","method":{"position":"org.apache.commons.io.IOUtils:2051","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.Reader input, java.io.Writer output, final long inputOffset, final long length, char[] buffer) throws java.io.IOException {\n    if (output != null) {\n        {\n            if (inputOffset > 0) {\n                org.apache.commons.io.IOUtils.skipFully(input, inputOffset);\n            } \n            if (length == 0) {\n                return 0;\n            } \n            int int = buffer.int;\n            if ((length > 0) && (length < (buffer.int))) {\n                bytesToRead = ((int)(length));\n            } \n            int int;\n            long long = 0;\n            while ((bytesToRead > 0) && ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) != (read = input.read(buffer, 0, bytesToRead)))) {\n                output.write(buffer, 0, read);\n                totalRead += read;\n                if (length > 0) {\n                    bytesToRead = ((int)(java.lang.Math.min((length - totalRead), buffer.int)));\n                } \n            }\n            return totalRead;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"xmlPrologWriter":"output"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl","sourcecode":"!(input1 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"5881016b-2eb0-11e6-8762-0d3d4b836488","method":{"position":"org.apache.commons.io.IOUtils:430","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toBufferedInputStream(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            return org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(input);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:483","type":"CtBinaryOperatorImpl","sourcecode":"prefix < 0"},"failures":[],"tindex":"5881016c-2eb0-11e6-8762-032833628e9f","method":{"position":"org.apache.commons.io.EndianUtils:168","type":"CtMethodImpl","sourcecode":"public static int readSwappedInteger(byte[] data, int offset) {\n    if (offset < 0) {\n        {\n            return (((((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8)) + (((data[(offset + 2)]) & 255) << 16)) + (((data[(offset + 3)]) & 255) << 24);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"offset"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1659","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"5881287d-2eb0-11e6-8762-9fe41fd6c6a9","method":{"position":"org.apache.commons.io.input.TaggedInputStream:101","type":"CtMethodImpl","sourcecode":"public void throwIfCauseOf(java.lang.Throwable throwable) throws java.io.IOException {\n    if (null != throwable) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(throwable, java.io.Serializable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"throwable"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:658","type":"CtBinaryOperatorImpl","sourcecode":"i >= 0"},"failures":[],"tindex":"5881287e-2eb0-11e6-8762-73a16bdb52f3","method":{"position":"org.apache.commons.io.output.NullOutputStream:44","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b, int off, int len) {\n    if (off >= 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"off"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.monitor.FileEntry:71","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"5881287f-2eb0-11e6-8762-b7986b16fd77","method":{"position":"org.apache.commons.io.FileUtils:2707","type":"CtMethodImpl","sourcecode":"public static java.util.zip.Checksum checksum(java.io.File file, java.util.zip.Checksum checksum) throws java.io.IOException {\n    if (file == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file.isDirectory()) {\n                throw new java.lang.IllegalArgumentException(\"Checksums can't be computed on directories\");\n            } \n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = new java.util.zip.CheckedInputStream(new java.io.FileInputStream(file) , checksum);\n                org.apache.commons.io.IOUtils.copy(in, new org.apache.commons.io.output.NullOutputStream());\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n            }\n            return checksum;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:482","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"58814f90-2eb0-11e6-8762-df8b3b32a326","method":{"position":"org.apache.commons.io.FileUtils:976","type":"CtMethodImpl","sourcecode":"public static void copyFileToDirectory(java.io.File srcFile, java.io.File destDir) throws java.io.IOException {\n    if (destDir.isDirectory()) {\n        {\n            org.apache.commons.io.FileUtils.copyFileToDirectory(srcFile, destDir, true);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"destDir"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:88","type":"CtBinaryOperatorImpl","sourcecode":"(cachedLine) != null"},"failures":[],"tindex":"58814f91-2eb0-11e6-8762-2ddc3a873e35","method":{"position":"org.apache.commons.io.input.XmlStreamReader:759","type":"CtMethodImpl","sourcecode":"static boolean isAppXml(java.lang.String mime) {\n    if (mime != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (mime != null) && ((((mime.equals(\"application/xml\")) || (mime.equals(\"application/xml-dtd\"))) || (mime.equals(\"application/xml-external-parsed-entity\"))) || ((mime.startsWith(\"application/\")) && (mime.endsWith(\"+xml\"))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cachedLine":"mime"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:124","type":"CtBinaryOperatorImpl","sourcecode":"result > 0"},"failures":[],"tindex":"58814f92-2eb0-11e6-8762-e7e4f422d618","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:529","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long cutoff) {\n    if (cutoff > 0) {\n        {\n            return new org.apache.commons.io.filefilter.AgeFileFilter(cutoff);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"cutoff"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1030","type":"CtBinaryOperatorImpl","sourcecode":"index == (-1)"},"failures":[],"tindex":"588176a3-2eb0-11e6-8762-9da8350c2e0e","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:136","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] value, int offset, int length) {\n    if (length == (-1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value != null) {\n                java.lang.StringBuilder.append(value, offset, length);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"length"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:107","type":"CtBinaryOperatorImpl","sourcecode":"charset == (java.nio.charset.Charset.forName(\"Shift_JIS\"))"},"failures":[],"tindex":"588176a4-2eb0-11e6-8762-67e6d493164c","method":{"position":"org.apache.commons.io.IOUtils:985","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.InputStream input, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (encoding == (java.nio.charset.Charset.forName(\"Shift_JIS\"))) {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding));\n            return org.apache.commons.io.IOUtils.readLines(reader);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"encoding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1371","type":"CtBinaryOperatorImpl","sourcecode":"((text.indexOf('?')) == (-1)) && ((text.indexOf('*')) == (-1))"},"failures":[],"tindex":"58819db5-2eb0-11e6-8762-1b6500878be3","method":{"position":"org.apache.commons.io.IOUtils:1654","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.util.Collection<?> lines, java.lang.String lineEnding, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (((lineEnding.indexOf('?')) == (-1)) && ((text.indexOf('*')) == (-1))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (lines == null) {\n                return ;\n            } \n            if (lineEnding == null) {\n                lineEnding = org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.java.lang.String;\n            } \n            java.nio.charset.Charset java.nio.charset.Charset = org.apache.commons.io.Charsets.toCharset(encoding);\n            for (java.lang.Object java.lang.Object : lines) {\n                if (line != null) {\n                    output.write(line.toString().getBytes(cs));\n                } \n                output.write(lineEnding.getBytes(cs));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"lineEnding"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1149","type":"CtBinaryOperatorImpl","sourcecode":"(extension == null) || ((extension.length()) == 0)"},"failures":[],"tindex":"58819db6-2eb0-11e6-8762-110c59cce107","method":{"position":"org.apache.commons.io.input.XmlStreamReader:476","type":"CtMethodImpl","sourcecode":"private java.lang.String doLenientDetection(java.lang.String httpContentType, org.apache.commons.io.input.XmlStreamReaderException ex) throws java.io.IOException {\n    if ((httpContentType == null) || ((extension.length()) == 0)) {\n        {\n            if ((httpContentType != null) && (httpContentType.startsWith(\"text/html\"))) {\n                httpContentType = httpContentType.substring(\"text/html\".length());\n                httpContentType = \"text/xml\" + httpContentType;\n                try {\n                    return calculateHttpEncoding(httpContentType, ex.getBomEncoding(), ex.getXmlGuessEncoding(), ex.getXmlEncoding(), true);\n                } catch (org.apache.commons.io.input.XmlStreamReaderException ex2) {\n                    ex = ex2;\n                }\n            } \n            java.lang.String java.lang.String = ex.getXmlEncoding();\n            if (encoding == null) {\n                encoding = ex.getContentTypeEncoding();\n            } \n            if (encoding == null) {\n                encoding = (java.lang.String) == null ? org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String : java.lang.String;\n            } \n            return encoding;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"extension":"httpContentType"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"5881c4c7-2eb0-11e6-8762-2b6c876cdc88","method":{"position":"org.apache.commons.io.IOUtils:1027","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.Reader input) throws java.io.IOException {\n    if (input == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.BufferedReader java.io.BufferedReader = org.apache.commons.io.IOUtils.toBufferedReader(input);\n            java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            java.lang.String java.lang.String = reader.readLine();\n            while (line != null) {\n                list.add(line);\n                line = reader.readLine();\n            }\n            return list;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1711","type":"CtBinaryOperatorImpl","sourcecode":"lineEnding == null"},"failures":[],"tindex":"5881c4c8-2eb0-11e6-8762-27c9737fce19","method":{"position":"org.apache.commons.io.IOUtils:583","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.Reader input, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            return org.apache.commons.io.IOUtils.toByteArray(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineEnding":"encoding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:110","type":"CtInvocationImpl","sourcecode":"file1.isDirectory()"},"failures":[],"tindex":"5881c4c9-2eb0-11e6-8762-fd22434121ca","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:75","type":"CtMethodImpl","sourcecode":"public void onFileChange(final java.io.File file) {\n    if (file.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file1":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:72","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"5881ebda-2eb0-11e6-8762-ff82e9b40553","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:657","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String magicNumber) {\n    if (magicNumber == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.MagicNumberFileFilter(magicNumber);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"magicNumber"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.SuffixFileFilter:189","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"5881ebdb-2eb0-11e6-8762-393947ccae31","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:87","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] bts, int st, int end) throws java.io.IOException {\n    if (st > 0) {\n        {\n            try {\n                beforeWrite(end);\n                java.io.OutputStream.write(bts, st, end);\n                afterWrite(end);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"st"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2757","type":"CtInvocationImpl","sourcecode":"srcDir.exists()"},"failures":[],"tindex":"5881ebdc-2eb0-11e6-8762-237e85d850af","method":{"position":"org.apache.commons.io.FileUtils:1634","type":"CtMethodImpl","sourcecode":"public static void cleanDirectory(java.io.File directory) throws java.io.IOException {\n    if (directory.exists()) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(directory.exists())) {\n                java.lang.String java.lang.String = directory + \" does not exist\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            if (!(directory.isDirectory())) {\n                java.lang.String java.lang.String = directory + \" is not a directory\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            java.io.File[] java.io.File[] = directory.listFiles();\n            if (files == null) {\n                throw new java.io.IOException((\"Failed to list contents of \" + directory));\n            } \n            java.io.IOException java.io.IOException = null;\n            for (java.io.File java.io.File : files) {\n                try {\n                    org.apache.commons.io.FileUtils.forceDelete(file);\n                } catch (java.io.IOException ioe) {\n                    exception = ioe;\n                }\n            }\n            if (null != exception) {\n                throw exception;\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"directory"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2818","type":"CtUnaryOperatorImpl","sourcecode":"!(srcFile.exists())"},"failures":[],"tindex":"588212ed-2eb0-11e6-8762-01da5ee2e3d8","method":{"position":"org.apache.commons.io.DirectoryWalker:561","type":"CtMethodImpl","sourcecode":"protected void handleDirectoryEnd(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (!(directory.exists())) {\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"directory"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2189","type":"CtBinaryOperatorImpl","sourcecode":"ch != ch2"},"failures":[],"tindex":"588212ee-2eb0-11e6-8762-730b6eb3bbc3","method":{"position":"org.apache.commons.io.input.ProxyInputStream:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void mark(int readlimit) {\n    if (readlimit != readlimit) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.InputStream.mark(readlimit);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"readlimit","ch2":"readlimit"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.CompositeFileComparator:113","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"588212ef-2eb0-11e6-8762-cf687bcd1fc3","method":{"position":"org.apache.commons.io.DirectoryWalker:350","type":"CtMethodImpl","sourcecode":"private void walk(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (depth > 0) {\n        {\n            checkIfCancelled(directory, depth, results);\n            if (handleDirectory(directory, depth, results)) {\n                handleDirectoryStart(directory, depth, results);\n                int int = depth + 1;\n                if (((int) < 0) || (childDepth <= (int))) {\n                    checkIfCancelled(directory, depth, results);\n                    java.io.File[] java.io.File[] = (java.io.FileFilter) == null ? directory.listFiles() : directory.listFiles(java.io.FileFilter);\n                    childFiles = filterDirectoryContents(directory, depth, childFiles);\n                    if (childFiles == null) {\n                        handleRestricted(directory, childDepth, results);\n                    } else {\n                        for (java.io.File java.io.File : childFiles) {\n                            if (childFile.isDirectory()) {\n                                walk(childFile, childDepth, results);\n                            } else {\n                                checkIfCancelled(childFile, childDepth, results);\n                                handleFile(childFile, childDepth, results);\n                                checkIfCancelled(childFile, childDepth, results);\n                            }\n                        }\n                    }\n                } \n                handleDirectoryEnd(directory, depth, results);\n            } \n            checkIfCancelled(directory, depth, results);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"depth"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NotFileFilter:41","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"58823a00-2eb0-11e6-8762-877d83cd65e4","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:503","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FileFilter filter) {\n    if (filter == null) {\n        {\n            return new org.apache.commons.io.filefilter.DelegateFileFilter(filter);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1009","type":"CtBinaryOperatorImpl","sourcecode":"(destDir.exists()) && ((destDir.isDirectory()) == false)"},"failures":[],"tindex":"58823a01-2eb0-11e6-8762-57484d5067c2","method":{"position":"org.apache.commons.io.FileUtils:2620","type":"CtMethodImpl","sourcecode":"public static boolean isFileOlder(java.io.File file, java.io.File reference) {\n    if ((file.exists()) && ((destDir.isDirectory()) == false)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (reference == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified reference file\");\n            } \n            if (!(reference.exists())) {\n                throw new java.lang.IllegalArgumentException(((\"The reference file '\" + reference) + \"' doesn't exist\"));\n            } \n            return org.apache.commons.io.FileUtils.isFileOlder(file, reference.lastModified());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1613","type":"CtBinaryOperatorImpl","sourcecode":"child == null"},"failures":[],"tindex":"58826112-2eb0-11e6-8762-b3239d7dfadc","method":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:62","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (file2 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (getType(file1)) - (getType(file2));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"child":"file2"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:103","type":"CtBinaryOperatorImpl","sourcecode":"charset == (java.nio.charset.Charset.forName(\"UTF-8\"))"},"failures":[],"tindex":"58826113-2eb0-11e6-8762-912fc39d7b58","method":{"position":"org.apache.commons.io.IOUtils:1285","type":"CtMethodImpl","sourcecode":"public static void write(byte[] data, java.io.Writer output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (encoding == (java.nio.charset.Charset.forName(\"UTF-8\"))) {\n        {\n            if (data != null) {\n                output.write(new java.lang.String(data , org.apache.commons.io.Charsets.toCharset(encoding)));\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"encoding"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullInputStream:126","type":"CtBinaryOperatorImpl","sourcecode":"avail <= 0"},"failures":[],"tindex":"58826114-2eb0-11e6-8762-970c2d6b0cb1","method":{"position":"org.apache.commons.io.EndianUtils:389","type":"CtMethodImpl","sourcecode":"public static void writeSwappedLong(java.io.OutputStream output, long value) throws java.io.IOException {\n    if (value <= 0) {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n            output.write(((byte)((value >> 16) & 255)));\n            output.write(((byte)((value >> 24) & 255)));\n            output.write(((byte)((value >> 32) & 255)));\n            output.write(((byte)((value >> 40) & 255)));\n            output.write(((byte)((value >> 48) & 255)));\n            output.write(((byte)((value >> 56) & 255)));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"avail":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1370","type":"CtBinaryOperatorImpl","sourcecode":"(srcDir.isDirectory()) == false"},"failures":[],"tindex":"58828825-2eb0-11e6-8762-3f8df45a3a69","method":{"position":"org.apache.commons.io.comparator.NameFileComparator:101","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if ((file1.isDirectory()) == false) {\n        {\n            return org.apache.commons.io.IOCase.checkCompareTo(file1.getName(), file2.getName());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl","sourcecode":"!(input1 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"58828826-2eb0-11e6-8762-bf9db9ee5beb","method":{"position":"org.apache.commons.io.EndianUtils:297","type":"CtMethodImpl","sourcecode":"public static short readSwappedShort(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            if (!(input instanceof java.io.BufferedInputStream)) {\n                {\n                    return ((short)((((org.apache.commons.io.EndianUtils.read(input)) & 255) << 0) + (((org.apache.commons.io.EndianUtils.read(input)) & 255) << 8)));\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl","sourcecode":"!(input1 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"58828827-2eb0-11e6-8762-47e7d7c2b471","method":{"position":"org.apache.commons.io.EndianUtils:297","type":"CtMethodImpl","sourcecode":"public static short readSwappedShort(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            if (!(input instanceof java.io.BufferedInputStream)) {\n                {\n                    return ((short)((((org.apache.commons.io.EndianUtils.read(input)) & 255) << 0) + (((org.apache.commons.io.EndianUtils.read(input)) & 255) << 8)));\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1682","type":"CtBinaryOperatorImpl","sourcecode":"(timeout++) > seconds"},"failures":[],"tindex":"5882af38-2eb0-11e6-8762-311504d28cee","method":{"position":"org.apache.commons.io.EndianUtils:250","type":"CtMethodImpl","sourcecode":"public static float readSwappedFloat(byte[] data, int offset) {\n    if ((offset++) > offset) {\n        {\n            return java.lang.Float.intBitsToFloat(org.apache.commons.io.EndianUtils.readSwappedInteger(data, offset));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"seconds":"offset","timeout":"offset"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"commons-io","transformationCount":43,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
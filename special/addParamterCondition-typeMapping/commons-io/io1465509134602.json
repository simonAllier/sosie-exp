{"failureDictionary":{},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:549","type":"CtBinaryOperatorImpl","sourcecode":"(bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32BE)) || (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32LE))"},"failures":[],"tindex":"6d5ae00c-2e8c-11e6-8061-b3b843c2ddda","method":{"position":"org.apache.commons.io.IOCase:197","type":"CtMethodImpl","sourcecode":"public boolean checkEndsWith(java.lang.String str, java.lang.String end) {\n    if ((str.equals(str)) || (bomEnc.equals(end))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = end.length();\n            return str.regionMatches((!(boolean)), ((str.length()) - endLen), end, 0, endLen);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"str","org.apache.commons.io.input.XmlStreamReader.UTF_32BE":"str","org.apache.commons.io.input.XmlStreamReader.UTF_32LE":"end"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.WriterOutputStream:301","type":"CtBinaryOperatorImpl","sourcecode":"(decoderOut.position()) > 0"},"failures":[],"tindex":"6d5bca6d-2e8c-11e6-8061-fda9e7602134","method":{"position":"org.apache.commons.io.input.ProxyReader:113","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(java.nio.CharBuffer target) throws java.io.IOException {\n    if ((target.position()) > 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                beforeRead((target != null ? target.length() : 0));\n                int int = java.io.Reader.read(target);\n                afterRead(n);\n                return n;\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"decoderOut":"target"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.ByteOrderMark:174","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"6d5bf17e-2e8c-11e6-8061-772707be9244","method":{"position":"org.apache.commons.io.output.XmlStreamWriter:153","type":"CtMethodImpl","sourcecode":"private void detectEncoding(char[] cbuf, int off, int len) throws java.io.IOException {\n    if (len > 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = len;\n            java.lang.StringBuffer java.lang.StringBuffer = java.io.StringWriter.getBuffer();\n            if (((xmlProlog.length()) + len) > (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int)) {\n                size = (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int) - (xmlProlog.length());\n            } \n            java.io.StringWriter.write(cbuf, off, size);\n            if ((xmlProlog.length()) >= 5) {\n                if (xmlProlog.substring(0, 5).equals(\"<?xml\")) {\n                    int int = xmlProlog.indexOf(\"?>\");\n                    if (xmlPrologEnd > 0) {\n                        java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.java.util.regex.Pattern.matcher(xmlProlog.substring(0, xmlPrologEnd));\n                        if (m.find()) {\n                            java.lang.String = m.group(1).toUpperCase();\n                            java.lang.String = java.lang.String.substring(1, ((java.lang.String.length()) - 1));\n                        } else {\n                            java.lang.String = java.lang.String;\n                        }\n                    } else {\n                        if ((xmlProlog.length()) >= (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int)) {\n                            java.lang.String = java.lang.String;\n                        } \n                    }\n                } else {\n                    java.lang.String = java.lang.String;\n                }\n                if ((java.lang.String) != null) {\n                    java.io.StringWriter = null;\n                    java.io.Writer = new java.io.OutputStreamWriter(java.io.OutputStream , java.lang.String);\n                    java.io.Writer.write(xmlProlog.toString());\n                    if (len > size) {\n                        java.io.Writer.write(cbuf, (off + size), (len - size));\n                    } \n                } \n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"len"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:114","type":"CtInvocationImpl","sourcecode":"org.apache.commons.io.FilenameUtils.wildcardMatch(name, wildcard)"},"failures":[],"tindex":"6d5c188f-2e8c-11e6-8061-e3dff5c6e232","method":{"position":"org.apache.commons.io.IOUtils:1473","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.CharSequence data, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (org.apache.commons.io.FilenameUtils.wildcardMatch(encoding, encoding)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"encoding","wildcard":"encoding"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.Tailer:349","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"6d5c3fa0-2e8c-11e6-8061-3fd671b41941","method":{"position":"org.apache.commons.io.input.Tailer:448","type":"CtMethodImpl","sourcecode":"private long readLines(java.io.RandomAccessFile reader) throws java.io.IOException {\n    if (reader == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            long long = reader.getFilePointer();\n            long long = pos;\n            int int;\n            boolean boolean = false;\n            while ((boolean) && ((num = reader.read(byte[])) != (-1))) {\n                for (int int = 0 ; i < num ; i++) {\n                    byte byte = byte[][i];\n                    switch (ch) {\n                        case '\\n' :\n                            seenCR = false;\n                            org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                            sb.setLength(0);\n                            rePos = (pos + i) + 1;\n                            break;\n                        case '\\r' :\n                            if (seenCR) {\n                                sb.append('\\r');\n                            } \n                            seenCR = true;\n                            break;\n                        default :\n                            if (seenCR) {\n                                seenCR = false;\n                                org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                                sb.setLength(0);\n                                rePos = (pos + i) + 1;\n                            } \n                            sb.append(((char)(ch)));\n                    }\n                }\n                pos = reader.getFilePointer();\n            }\n            reader.seek(rePos);\n            return rePos;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"reader"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:478","type":"CtBinaryOperatorImpl","sourcecode":"(httpContentType != null) && (httpContentType.startsWith(\"text/html\"))"},"failures":[],"tindex":"6d5c66b1-2e8c-11e6-8061-a7696c3d4a7c","method":{"position":"org.apache.commons.io.FileUtils:1853","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.LineIterator lineIterator(java.io.File file, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding != null) && (httpContentType.startsWith(\"text/html\"))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = org.apache.commons.io.FileUtils.openInputStream(file);\n                return org.apache.commons.io.IOUtils.lineIterator(in, encoding);\n            } catch (java.io.IOException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n                throw ex;\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n                throw ex;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"encoding"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NotFileFilter:41","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"6d5c66b2-2e8c-11e6-8061-fb22d1910f74","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:151","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.io.File> filterList(org.apache.commons.io.filefilter.IOFileFilter filter, java.lang.Iterable<java.io.File> files) {\n    if (filter == null) {\n        {\n            if (filter == null) {\n                {\n                    return org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files, new java.util.ArrayList<java.io.File>());\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2928","type":"CtBinaryOperatorImpl","sourcecode":"(file.getParent()) == null"},"failures":[],"tindex":"6d5d7823-2e8c-11e6-8061-05303f9e51bc","method":{"position":"org.apache.commons.io.FileUtils:1459","type":"CtMethodImpl","sourcecode":"public static void copyURLToFile(java.net.URL source, java.io.File destination) throws java.io.IOException {\n    if ((destination.getParent()) == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStream java.io.InputStream = source.openStream();\n            org.apache.commons.io.FileUtils.copyInputStreamToFile(input, destination);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"destination"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1659","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"6d5d7824-2e8c-11e6-8061-5d4a701e6c5d","method":{"position":"org.apache.commons.io.output.TaggedOutputStream:112","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void handleIOException(java.io.IOException e) throws java.io.IOException {\n    if (null != e) {\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new org.apache.commons.io.TaggedIOException(e , java.io.Serializable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"e"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:71","type":"CtBinaryOperatorImpl","sourcecode":"reader instanceof java.io.BufferedReader"},"failures":[],"tindex":"6d5d7825-2e8c-11e6-8061-5398bc54ed85","method":{"position":"org.apache.commons.io.IOUtils:817","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.Reader input) throws java.io.IOException {\n    if (input instanceof java.io.BufferedReader) {\n        {\n            org.apache.commons.io.output.StringBuilderWriter org.apache.commons.io.output.StringBuilderWriter = new org.apache.commons.io.output.StringBuilderWriter();\n            org.apache.commons.io.IOUtils.copy(input, sw);\n            return sw.toString();\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"6d5d9f36-2e8c-11e6-8061-2bfe9852509b","method":{"position":"org.apache.commons.io.IOUtils:539","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.Reader input) throws java.io.IOException {\n    if (input == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toByteArray(input, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:191","type":"CtBinaryOperatorImpl","sourcecode":"lockDir == null"},"failures":[],"tindex":"6d5d9f37-2e8c-11e6-8061-d30ca54e89ed","method":{"position":"org.apache.commons.io.FilenameUtils:1049","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.String filename1, java.lang.String filename2) {\n    if (filename2 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, false, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lockDir":"filename2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:92","type":"CtBinaryOperatorImpl","sourcecode":"((osName.indexOf(\"hp-ux\")) != (-1)) || ((osName.indexOf(\"aix\")) != (-1))"},"failures":[],"tindex":"6d5d9f38-2e8c-11e6-8061-c7ad2464032f","method":{"position":"org.apache.commons.io.IOUtils:1430","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.CharSequence data, java.io.OutputStream output) throws java.io.IOException {\n    if (((data.indexOf(\"hp-ux\")) != (-1)) || ((osName.indexOf(\"aix\")) != (-1))) {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"osName":"data"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:173","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[],"tindex":"6d5dc649-2e8c-11e6-8061-8bd6e29a534b","method":{"position":"org.apache.commons.io.IOCase:146","type":"CtMethodImpl","sourcecode":"public int checkCompareTo(java.lang.String str1, java.lang.String str2) {\n    if (str2 != null) {\n        {\n            if ((str1 == null) || (str2 == null)) {\n                throw new java.lang.NullPointerException(\"The strings must not be null\");\n            } \n            return boolean ? str1.compareTo(str2) : str1.compareToIgnoreCase(str2);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:580","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"6d5dc64a-2e8c-11e6-8061-353ebeb7d7c3","method":{"position":"org.apache.commons.io.IOUtils:1507","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.OutputStream output) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:275","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"6d5dc64b-2e8c-11e6-8061-1faab3c0cbb2","method":{"position":"org.apache.commons.io.FileUtils:1308","type":"CtMethodImpl","sourcecode":"public static void copyDirectory(java.io.File srcDir, java.io.File destDir, java.io.FileFilter filter) throws java.io.IOException {\n    if (destDir == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir, filter, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"destDir"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:107","type":"CtBinaryOperatorImpl","sourcecode":"observer != null"},"failures":[],"tindex":"6d5dc64c-2e8c-11e6-8061-a1df5094b39e","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:35","type":"CtMethodImpl","sourcecode":"public void onStart(final org.apache.commons.io.monitor.FileAlterationObserver observer) {\n    if (observer != null) {\n        {\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"observer":"observer"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2449","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"6d5ded5d-2e8c-11e6-8061-97ec202c71f2","method":{"position":"org.apache.commons.io.TaggedIOException:92","type":"CtMethodImpl","sourcecode":"public static void throwCauseIfTaggedWith(java.lang.Throwable throwable, java.lang.Object tag) throws java.io.IOException {\n    if (tag.isDirectory()) {\n        {\n            if (org.apache.commons.io.TaggedIOException.isTaggedWith(throwable, tag)) {\n                throw ((org.apache.commons.io.TaggedIOException)(throwable)).getCause();\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"tag"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.ThreadMonitor:69","type":"CtBinaryOperatorImpl","sourcecode":"timeout > 0"},"failures":[],"tindex":"6d5ded5e-2e8c-11e6-8061-396f4feea108","method":{"position":"org.apache.commons.io.monitor.FileEntry:209","type":"CtMethodImpl","sourcecode":"public void setLastModified(long lastModified) {\n    if (lastModified > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.monitor.FileEntry.this.long = lastModified;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"timeout":"lastModified"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.AbstractFileComparator:61","type":"CtBinaryOperatorImpl","sourcecode":"files != null"},"failures":[],"tindex":"6d5ded5f-2e8c-11e6-8061-9d747fa0c867","method":{"position":"org.apache.commons.io.comparator.AbstractFileComparator:60","type":"CtMethodImpl","sourcecode":"public java.util.List<java.io.File> sort(java.util.List<java.io.File> files) {\n    if (files != null) {\n        {\n            if (files != null) {\n                java.util.Collections.sort(files, org.apache.commons.io.comparator.AbstractFileComparator.this);\n            } \n            return files;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:183","type":"CtBinaryOperatorImpl","sourcecode":"(file.getParentFile()) != null"},"failures":[],"tindex":"6d5e1470-2e8c-11e6-8061-dfc90f2cebeb","method":{"position":"org.apache.commons.io.filefilter.SizeFileFilter:91","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if ((file.getParentFile()) != null) {\n        {\n            boolean boolean = (file.length()) < (long);\n            return boolean ? !smaller : smaller;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:259","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"6d5e1471-2e8c-11e6-8061-2593512276f1","method":{"position":"org.apache.commons.io.IOUtils:1488","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.Writer output) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data != null) {\n                output.write(data);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2741","type":"CtUnaryOperatorImpl","sourcecode":"!(srcDir.exists())"},"failures":[],"tindex":"6d5e1472-2e8c-11e6-8061-2d13d64940a0","method":{"position":"org.apache.commons.io.filefilter.NameFileFilter:143","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.exists())) {\n        {\n            java.lang.String java.lang.String = file.getName();\n            for (java.lang.String java.lang.String : org.apache.commons.io.filefilter.NameFileFilter.this.java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkEquals(name, name2)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2741","type":"CtUnaryOperatorImpl","sourcecode":"!(srcDir.exists())"},"failures":[],"tindex":"6d5e3b83-2e8c-11e6-8061-8dc1753b393d","method":{"position":"org.apache.commons.io.FileUtils:1560","type":"CtMethodImpl","sourcecode":"public static boolean deleteQuietly(java.io.File file) {\n    if (!(file.exists())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file == null) {\n                return false;\n            } \n            try {\n                if (file.isDirectory()) {\n                    org.apache.commons.io.FileUtils.cleanDirectory(file);\n                } \n            } catch (java.lang.Exception ignored) {\n            }\n            try {\n                return file.delete();\n            } catch (java.lang.Exception ignored) {\n                return false;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2325","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.io.IOUtils.SKIP_CHAR_BUFFER) == null"},"failures":[],"tindex":"6d5e3b84-2e8c-11e6-8061-778a863b1a38","method":{"position":"org.apache.commons.io.IOUtils:2429","type":"CtMethodImpl","sourcecode":"public static int read(java.io.Reader input, char[] buffer) throws java.io.IOException {\n    if (buffer == null) {\n        {\n            if (buffer == null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.io.IOUtils.read(input, buffer, 0, buffer.int);\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.IOUtils.SKIP_CHAR_BUFFER":"buffer"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:96","type":"CtBinaryOperatorImpl","sourcecode":"observer != null"},"failures":[],"tindex":"6d5e3b85-2e8c-11e6-8061-17af48c10bf2","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:91","type":"CtMethodImpl","sourcecode":"public void onStop(final org.apache.commons.io.monitor.FileAlterationObserver observer) {\n    if (observer != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"observer":"observer"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.io.FileSystemUtils:77","type":"CtBinaryOperatorImpl","sourcecode":"(osName.indexOf(\"windows\")) != (-1)"},"failures":[],"tindex":"6d5e3b86-2e8c-11e6-8061-fdb249f4dbed","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:355","type":"CtMethodImpl","sourcecode":"public java.lang.String toString(java.lang.String enc) throws java.io.UnsupportedEncodingException {\n    if ((enc.indexOf(\"windows\")) != (-1)) {\n        {\n            return new java.lang.String(toByteArray() , enc);\n        }\n    } else {\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"osName":"enc"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileDeleteStrategy:72","type":"CtBinaryOperatorImpl","sourcecode":"(fileToDelete == null) || ((fileToDelete.exists()) == false)"},"failures":[],"tindex":"6d5e6297-2e8c-11e6-8061-0bf18f15bae0","method":{"position":"org.apache.commons.io.filefilter.FalseFileFilter:68","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File dir, java.lang.String name) {\n    if ((dir == null) || ((fileToDelete.exists()) == false)) {\n        {\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileToDelete":"dir"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:775","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"6d5e6298-2e8c-11e6-8061-85c2ddca39a2","method":{"position":"org.apache.commons.io.FileUtils:591","type":"CtMethodImpl","sourcecode":"public static java.util.Collection<java.io.File> listFilesAndDirs(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter, org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if (fileFilter == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.validateListFilesParameters(directory, fileFilter);\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = org.apache.commons.io.FileUtils.setUpEffectiveFileFilter(fileFilter);\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(dirFilter);\n            java.util.Collection<java.io.File> java.util.Collection<java.io.File> = new java.util.LinkedList<java.io.File>();\n            if (directory.isDirectory()) {\n                files.add(directory);\n            } \n            org.apache.commons.io.FileUtils.innerListFiles(files, directory, org.apache.commons.io.filefilter.FileFilterUtils.or(effFileFilter, effDirFilter), true);\n            return files;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"fileFilter"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:212","type":"CtBinaryOperatorImpl","sourcecode":"(xmlPrologWriter) != null"},"failures":[],"tindex":"6d5e6299-2e8c-11e6-8061-2de9054e8983","method":{"position":"org.apache.commons.io.CopyUtils:241","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output) throws java.io.IOException {\n    if (output != null) {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input);\n            org.apache.commons.io.CopyUtils.copy(in, output);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"xmlPrologWriter":"output"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2286","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.io.IOUtils.SKIP_BYTE_BUFFER) == null"},"failures":[],"tindex":"6d5e89aa-2e8c-11e6-8061-c3d3e597b5dc","method":{"position":"org.apache.commons.io.IOUtils:931","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String toString(byte[] input) throws java.io.IOException {\n    if (input == null) {\n        {\n            return new java.lang.String(input);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.IOUtils.SKIP_BYTE_BUFFER":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1146","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"6d5e89ab-2e8c-11e6-8061-dfe71f6591eb","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:293","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String prefix) {\n    if (prefix == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.PrefixFileFilter(prefix);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"prefix"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2666","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"6d5e89ac-2e8c-11e6-8061-833055678357","method":{"position":"org.apache.commons.io.FileUtils:2811","type":"CtMethodImpl","sourcecode":"public static void moveFile(java.io.File srcFile, java.io.File destFile) throws java.io.IOException {\n    if (!(destFile.exists())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (srcFile == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destFile == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if (!(srcFile.exists())) {\n                throw new java.io.FileNotFoundException(((\"Source '\" + srcFile) + \"' does not exist\"));\n            } \n            if (srcFile.isDirectory()) {\n                throw new java.io.IOException(((\"Source '\" + srcFile) + \"' is a directory\"));\n            } \n            if (destFile.exists()) {\n                throw new org.apache.commons.io.FileExistsException(((\"Destination '\" + destFile) + \"' already exists\"));\n            } \n            if (destFile.isDirectory()) {\n                throw new java.io.IOException(((\"Destination '\" + destFile) + \"' is a directory\"));\n            } \n            boolean boolean = srcFile.renameTo(destFile);\n            if (!rename) {\n                org.apache.commons.io.FileUtils.copyFile(srcFile, destFile);\n                if (!(srcFile.delete())) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(destFile);\n                    throw new java.io.IOException(((((\"Failed to delete original file '\" + srcFile) + \"' after copy to '\") + destFile) + \"'\"));\n                } \n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"destFile"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:352","type":"CtBinaryOperatorImpl","sourcecode":"size == 0"},"failures":[],"tindex":"6d5e89ad-2e8c-11e6-8061-ed95c59ef622","method":{"position":"org.apache.commons.io.FilenameUtils:823","type":"CtMethodImpl","sourcecode":"private static java.lang.String doGetPath(java.lang.String filename, int separatorAdd) {\n    if (separatorAdd == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\n            if (prefix < 0) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\n            int int = index + separatorAdd;\n            if (((prefix >= (filename.length())) || (index < 0)) || (prefix >= endIndex)) {\n                return \"\";\n            } \n            return filename.substring(prefix, endIndex);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"separatorAdd"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2325","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.io.IOUtils.SKIP_CHAR_BUFFER) == null"},"failures":[],"tindex":"6d5eb0be-2e8c-11e6-8061-8513772b9ae2","method":{"position":"org.apache.commons.io.IOUtils:2429","type":"CtMethodImpl","sourcecode":"public static int read(java.io.Reader input, char[] buffer) throws java.io.IOException {\n    if (buffer == null) {\n        {\n            if (buffer == null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.io.IOUtils.read(input, buffer, 0, buffer.int);\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.IOUtils.SKIP_CHAR_BUFFER":"buffer"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:336","type":"CtBinaryOperatorImpl","sourcecode":"b >= 0"},"failures":[],"tindex":"6d5eb0bf-2e8c-11e6-8061-5de41237883b","method":{"position":"org.apache.commons.io.output.BrokenOutputStream:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b >= 0) {\n        {\n            throw java.io.IOException;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2921","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"6d60ac90-2e8c-11e6-8061-2bf3fee3bdb1","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:43","type":"CtMethodImpl","sourcecode":"public void onDirectoryCreate(final java.io.File directory) {\n    if (directory == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"directory"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1640","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"6d60ac91-2e8c-11e6-8061-a35525d368d7","method":{"position":"org.apache.commons.io.FileUtils:2409","type":"CtMethodImpl","sourcecode":"public static long sizeOf(java.io.File file) {\n    if (!(file.isDirectory())) {\n        {\n            if (!(file.exists())) {\n                java.lang.String java.lang.String = file + \" does not exist\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            if (file.isDirectory()) {\n                return org.apache.commons.io.FileUtils.sizeOfDirectory(file);\n            } else {\n                return file.length();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1149","type":"CtBinaryOperatorImpl","sourcecode":"(extension == null) || ((extension.length()) == 0)"},"failures":[],"tindex":"6d60ac92-2e8c-11e6-8061-51eff5f2cb6c","method":{"position":"org.apache.commons.io.FilenameUtils:1064","type":"CtMethodImpl","sourcecode":"public static boolean equalsOnSystem(java.lang.String filename1, java.lang.String filename2) {\n    if ((filename2 == null) || ((extension.length()) == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, false, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"extension":"filename2"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:88","type":"CtBinaryOperatorImpl","sourcecode":"(cachedLine) != null"},"failures":[],"tindex":"6d60d3a3-2e8c-11e6-8061-2b667aba4ead","method":{"position":"org.apache.commons.io.IOUtils:2157","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.Reader input, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding != null) && (!(xmlGuessEnc.equals(encoding)))) {\n        {\n            if (encoding != null) {\n                {\n                    org.apache.commons.io.IOUtils.copy(input, output, org.apache.commons.io.Charsets.toCharset(encoding));\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cachedLine":"encoding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:140","type":"CtBinaryOperatorImpl","sourcecode":"(writer) != null"},"failures":[],"tindex":"6d60d3a4-2e8c-11e6-8061-c7997768f958","method":{"position":"org.apache.commons.io.FileCleaningTracker:134","type":"CtMethodImpl","sourcecode":"private synchronized void addTracker(java.lang.String path, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if (marker != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (boolean) {\n                throw new java.lang.IllegalStateException(\"No new trackers can be added once exitWhenFinished() is called\");\n            } \n            if ((java.lang.Thread) == null) {\n                java.lang.Thread = new org.apache.commons.io.FileCleaningTracker.Reaper();\n                java.lang.Thread.start();\n            } \n            java.util.Collection<org.apache.commons.io.FileCleaningTracker.Tracker>.add(new org.apache.commons.io.FileCleaningTracker.Tracker(path , deleteStrategy , marker , java.lang.ref.ReferenceQueue<java.lang.Object>));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"writer":"marker"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:111","type":"CtBinaryOperatorImpl","sourcecode":"(currentBuffer) == null"},"failures":[],"tindex":"6d60fab5-2e8c-11e6-8061-35ff9dfd8b1a","method":{"position":"org.apache.commons.io.input.NullInputStream:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] bytes) throws java.io.IOException {\n    if (bytes == null) {\n        {\n            return read(bytes, 0, bytes.int);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"currentBuffer":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.HexDump:81","type":"CtBinaryOperatorImpl","sourcecode":"stream == null"},"failures":[],"tindex":"6d60fab6-2e8c-11e6-8061-912e12ed35a0","method":{"position":"org.apache.commons.io.IOUtils:273","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.OutputStream output) {\n    if (output == null) {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(output)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stream":"output"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReaderInputStream:223","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"6d60fab7-2e8c-11e6-8061-b31004485bd5","method":{"position":"org.apache.commons.io.IOUtils:1285","type":"CtMethodImpl","sourcecode":"public static void write(byte[] data, java.io.Writer output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (data == null) {\n        {\n            if (data != null) {\n                output.write(new java.lang.String(data , org.apache.commons.io.Charsets.toCharset(encoding)));\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2411","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"6d616fe8-2e8c-11e6-8061-775bb80dd30a","method":{"position":"org.apache.commons.io.input.Tailer:287","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.input.Tailer create(java.io.File file, org.apache.commons.io.input.TailerListener listener, long delayMillis, boolean end, boolean reOpen) {\n    if (!(file.exists())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.input.Tailer.create(file, listener, delayMillis, end, reOpen, org.apache.commons.io.input.Tailer.org.apache.commons.io.input.Tailer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:449","type":"CtBinaryOperatorImpl","sourcecode":"filters == null"},"failures":[],"tindex":"6d616fe9-2e8c-11e6-8061-f7a6d051c0ee","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:448","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.io.filefilter.IOFileFilter> toList(org.apache.commons.io.filefilter.IOFileFilter... filters) {\n    if (filters == null) {\n        {\n            if (filters == null) {\n                throw new java.lang.IllegalArgumentException(\"The filters must not be null\");\n            } \n            java.util.List<org.apache.commons.io.filefilter.IOFileFilter> java.util.List<org.apache.commons.io.filefilter.IOFileFilter> = new java.util.ArrayList<org.apache.commons.io.filefilter.IOFileFilter>(filters.int);\n            for (int int = 0 ; i < (filters.int) ; i++) {\n                if ((filters[i]) == null) {\n                    throw new java.lang.IllegalArgumentException(((\"The filter[\" + i) + \"] is null\"));\n                } \n                list.add(filters[i]);\n            }\n            return list;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filters":"filters"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2326","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.exists())"},"failures":[],"tindex":"6d6196fa-2e8c-11e6-8061-e93039c7cbf0","method":{"position":"org.apache.commons.io.filefilter.AndFileFilter:117","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(final java.io.File file) {\n    if (!(file.delete())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(file.exists())) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.isEmpty()) {\n                        return false;\n                    } \n                    for (org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter : java.util.List<org.apache.commons.io.filefilter.IOFileFilter>) {\n                        if (!(fileFilter.accept(file))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.TeeInputStream:109","type":"CtBinaryOperatorImpl","sourcecode":"ch != (-1)"},"failures":[],"tindex":"6d6196fb-2e8c-11e6-8061-ffe52122a09c","method":{"position":"org.apache.commons.io.output.ThresholdingOutputStream:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b != (-1)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            checkThreshold(1);\n            getStream().write(b);\n            (long)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BoundedInputStream:123","type":"CtBinaryOperatorImpl","sourcecode":"bytesRead == (-1)"},"failures":[],"tindex":"6d61be0c-2e8c-11e6-8061-595c43bd9065","method":{"position":"org.apache.commons.io.FileSystemUtils:463","type":"CtMethodImpl","sourcecode":"java.util.List<java.lang.String> performCommand(java.lang.String[] cmdAttribs, int max, long timeout) throws java.io.IOException {\n    if (max == (-1)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>(20);\n            java.lang.Process java.lang.Process = null;\n            java.io.InputStream java.io.InputStream = null;\n            java.io.OutputStream java.io.OutputStream = null;\n            java.io.InputStream java.io.InputStream = null;\n            java.io.BufferedReader java.io.BufferedReader = null;\n            try {\n                java.lang.Thread java.lang.Thread = org.apache.commons.io.ThreadMonitor.start(timeout);\n                proc = openProcess(cmdAttribs);\n                in = proc.getInputStream();\n                out = proc.getOutputStream();\n                err = proc.getErrorStream();\n                inr = new java.io.BufferedReader(new java.io.InputStreamReader(in));\n                java.lang.String java.lang.String = inr.readLine();\n                while ((line != null) && ((lines.size()) < max)) {\n                    line = line.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale).trim();\n                    lines.add(line);\n                    line = inr.readLine();\n                }\n                proc.waitFor();\n                org.apache.commons.io.ThreadMonitor.stop(monitor);\n                if ((proc.exitValue()) != 0) {\n                    throw new java.io.IOException((((\"Command line returned OS error code '\" + (proc.exitValue())) + \"' for command \") + (java.util.Arrays.asList(cmdAttribs))));\n                } \n                if (lines.isEmpty()) {\n                    throw new java.io.IOException(((\"Command line did not return any info \" + \"for command \") + (java.util.Arrays.asList(cmdAttribs))));\n                } \n                return lines;\n            } catch (java.lang.InterruptedException ex) {\n                throw new org.apache.commons.io.IOExceptionWithCause(((((\"Command line threw an InterruptedException \" + \"for command \") + (java.util.Arrays.asList(cmdAttribs))) + \" timeout=\") + timeout) , ex);\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n                org.apache.commons.io.IOUtils.closeQuietly(out);\n                org.apache.commons.io.IOUtils.closeQuietly(err);\n                org.apache.commons.io.IOUtils.closeQuietly(inr);\n                if (proc != null) {\n                    proc.destroy();\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytesRead":"max"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.AndFileFilter:155","type":"CtBinaryOperatorImpl","sourcecode":"(fileFilters) != null"},"failures":[],"tindex":"6d61e51d-2e8c-11e6-8061-093a1cfb6c8f","method":{"position":"org.apache.commons.io.filefilter.OrFileFilter:107","type":"CtMethodImpl","sourcecode":"public void setFileFilters(final java.util.List<org.apache.commons.io.filefilter.IOFileFilter> fileFilters) {\n    if (fileFilters != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.filefilter.OrFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.clear();\n            org.apache.commons.io.filefilter.OrFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.addAll(fileFilters);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilters":"fileFilters"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:270","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"6d61e51e-2e8c-11e6-8061-35c91ea975f8","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:151","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.io.File> filterList(org.apache.commons.io.filefilter.IOFileFilter filter, java.lang.Iterable<java.io.File> files) {\n    if (filter == null) {\n        {\n            if (filter == null) {\n                {\n                    return org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files, new java.util.ArrayList<java.io.File>());\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:549","type":"CtBinaryOperatorImpl","sourcecode":"(bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32BE)) || (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32LE))"},"failures":[],"tindex":"6d61e51f-2e8c-11e6-8061-4d735288cff1","method":{"position":"org.apache.commons.io.FilenameUtils:1080","type":"CtMethodImpl","sourcecode":"public static boolean equalsNormalized(java.lang.String filename1, java.lang.String filename2) {\n    if ((filename1.equals(filename2)) || (bomEnc.equals(filename1))) {\n        {\n            return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, true, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"filename1","org.apache.commons.io.input.XmlStreamReader.UTF_32BE":"filename2","org.apache.commons.io.input.XmlStreamReader.UTF_32LE":"filename1"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1122","type":"CtBinaryOperatorImpl","sourcecode":"(filename1 == null) || (filename2 == null)"},"failures":[],"tindex":"6d61e520-2e8c-11e6-8061-8d0a02a10c2c","method":{"position":"org.apache.commons.io.FilenameUtils:347","type":"CtMethodImpl","sourcecode":"private static java.lang.String doNormalize(java.lang.String filename, char separator, boolean keepSeparator) {\n    if ((filename == null) || (filename == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = filename.length();\n            if (size == 0) {\n                return filename;\n            } \n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\n            if (prefix < 0) {\n                return null;\n            } \n            char[] char[] = new char[size + 2];\n            filename.getChars(0, filename.length(), array, 0);\n            char char = separator == (org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char) ? org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char : org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char;\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if ((array[i]) == otherSeparator) {\n                    array[i] = separator;\n                } \n            }\n            boolean boolean = true;\n            if ((array[(size - 1)]) != separator) {\n                array[(size++)] = separator;\n                lastIsDirectory = false;\n            } \n            for (int int = prefix + 1 ; i < size ; i++) {\n                if (((array[i]) == separator) && ((array[(i - 1)]) == separator)) {\n                    java.lang.System.arraycopy(array, i, array, (i - 1), (size - i));\n                    size--;\n                    i--;\n                } \n            }\n            for (int int = prefix + 1 ; i < size ; i++) {\n                if ((((array[i]) == separator) && ((array[(i - 1)]) == '.')) && ((i == (prefix + 1)) || ((array[(i - 2)]) == separator))) {\n                    if (i == (size - 1)) {\n                        lastIsDirectory = true;\n                    } \n                    java.lang.System.arraycopy(array, (i + 1), array, (i - 1), (size - i));\n                    size -= 2;\n                    i--;\n                } \n            }\n            outer : for (int int = prefix + 2 ; i < size ; i++) {\n                if (((((array[i]) == separator) && ((array[(i - 1)]) == '.')) && ((array[(i - 2)]) == '.')) && ((i == (prefix + 2)) || ((array[(i - 3)]) == separator))) {\n                    if (i == (prefix + 2)) {\n                        return null;\n                    } \n                    if (i == (size - 1)) {\n                        lastIsDirectory = true;\n                    } \n                    int int;\n                    for (j = i - 4 ; j >= prefix ; j--) {\n                        if ((array[j]) == separator) {\n                            java.lang.System.arraycopy(array, (i + 1), array, (j + 1), (size - i));\n                            size -= i - j;\n                            i = j + 1;\n                            continue outer;\n                        } \n                    }\n                    java.lang.System.arraycopy(array, (i + 1), array, prefix, (size - i));\n                    size -= (i + 1) - prefix;\n                    i = prefix + 1;\n                } \n            }\n            if (size <= 0) {\n                return \"\";\n            } \n            if (size <= prefix) {\n                return new java.lang.String(array , 0 , size);\n            } \n            if (lastIsDirectory && keepSeparator) {\n                return new java.lang.String(array , 0 , size);\n            } \n            return new java.lang.String(array , 0 , (size - 1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename2":"filename","filename1":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2833","type":"CtUnaryOperatorImpl","sourcecode":"!(srcFile.delete())"},"failures":[],"tindex":"6d623341-2e8c-11e6-8061-0feedfa0da29","method":{"position":"org.apache.commons.io.FileUtils:1602","type":"CtMethodImpl","sourcecode":"public static boolean directoryContains(final java.io.File directory, final java.io.File child) throws java.io.IOException {\n    if (!(directory.delete())) {\n        {\n            if (directory == null) {\n                throw new java.lang.IllegalArgumentException(\"Directory must not be null\");\n            } \n            if (!(directory.isDirectory())) {\n                throw new java.lang.IllegalArgumentException((\"Not a directory: \" + directory));\n            } \n            if (child == null) {\n                return false;\n            } \n            if ((!(directory.exists())) || (!(child.exists()))) {\n                return false;\n            } \n            java.lang.String java.lang.String = directory.getCanonicalPath();\n            java.lang.String java.lang.String = child.getCanonicalPath();\n            return org.apache.commons.io.FilenameUtils.directoryContains(canonicalParent, canonicalChild);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2538","type":"CtBinaryOperatorImpl","sourcecode":"actual != length"},"failures":[],"tindex":"6d623342-2e8c-11e6-8061-1b9dcf0df3c2","method":{"position":"org.apache.commons.io.EndianUtils:65","type":"CtMethodImpl","sourcecode":"public static int swapInteger(int value) {\n    if (value != value) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (((((value >> 0) & 255) << 24) + (((value >> 8) & 255) << 16)) + (((value >> 16) & 255) << 8)) + (((value >> 24) & 255) << 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"actual":"value","length":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1116","type":"CtBinaryOperatorImpl","sourcecode":"(filename1 == null) || (filename2 == null)"},"failures":[],"tindex":"6d623343-2e8c-11e6-8061-c158adf1cb88","method":{"position":"org.apache.commons.io.filefilter.SuffixFileFilter:168","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file, java.lang.String name) {\n    if ((name == null) || (name == null)) {\n        {\n            for (java.lang.String java.lang.String : org.apache.commons.io.filefilter.SuffixFileFilter.this.java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkEndsWith(name, suffix)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename2":"name","filename1":"name"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFileFilter:189","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"6d625a54-2e8c-11e6-8061-37216860fdca","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:136","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] value, int offset, int length) {\n    if (length > 0) {\n        {\n            if (value != null) {\n                java.lang.StringBuilder.append(value, offset, length);\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"length"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:90","type":"CtFieldReadImpl","sourcecode":"finished"},"failures":[],"tindex":"6d625a55-2e8c-11e6-8061-970525ece33d","method":{"position":"org.apache.commons.io.FilenameUtils:905","type":"CtMethodImpl","sourcecode":"private static java.lang.String doGetFullPath(java.lang.String filename, boolean includeSeparator) {\n    if (includeSeparator) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\n            if (prefix < 0) {\n                return null;\n            } \n            if (prefix >= (filename.length())) {\n                if (includeSeparator) {\n                    return org.apache.commons.io.FilenameUtils.getPrefix(filename);\n                } else {\n                    return filename;\n                }\n            } \n            int int = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\n            if (index < 0) {\n                return filename.substring(0, prefix);\n            } \n            int int = index + (includeSeparator ? 1 : 0);\n            if (end == 0) {\n                end++;\n            } \n            return filename.substring(0, end);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"finished":"includeSeparator"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl","sourcecode":"!(input1 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"6d625a56-2e8c-11e6-8061-cdd14524654c","method":{"position":"org.apache.commons.io.IOUtils:460","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.output.ByteArrayOutputStream org.apache.commons.io.output.ByteArrayOutputStream = new org.apache.commons.io.output.ByteArrayOutputStream();\n            org.apache.commons.io.IOUtils.copy(input, output);\n            return output.toByteArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2068","type":"CtBinaryOperatorImpl","sourcecode":"length > 0"},"failures":[],"tindex":"6d628167-2e8c-11e6-8061-cde1e660556c","method":{"position":"org.apache.commons.io.input.CharSequenceReader:139","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long n) {\n    if (n > 0) {\n        {\n            if (n < 0) {\n                throw new java.lang.IllegalArgumentException((\"Number of characters to skip is less than zero: \" + n));\n            } \n            if ((int) >= (java.lang.CharSequence.length())) {\n                return -1;\n            } \n            int int = ((int)(java.lang.Math.min(java.lang.CharSequence.length(), ((int) + n))));\n            int int = dest - (int);\n            int = dest;\n            return count;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"n"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:270","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"6d628168-2e8c-11e6-8061-553cc82926a0","method":{"position":"org.apache.commons.io.filefilter.AndFileFilter:101","type":"CtMethodImpl","sourcecode":"public boolean removeFileFilter(final org.apache.commons.io.filefilter.IOFileFilter ioFileFilter) {\n    if (ioFileFilter == null) {\n        {\n            return org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.remove(ioFileFilter);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"ioFileFilter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"6d628169-2e8c-11e6-8061-0117a2f9eaf1","method":{"position":"org.apache.commons.io.IOUtils:758","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        {\n            return org.apache.commons.io.IOUtils.toString(input, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:750","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"6d62a87a-2e8c-11e6-8061-1ba86276458d","method":{"position":"org.apache.commons.io.output.NullWriter:75","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence csq) {\n    if (csq == null) {\n        {\n            return org.apache.commons.io.output.NullWriter.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"csq"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"6d62a87b-2e8c-11e6-8061-4393ddc58333","method":{"position":"org.apache.commons.io.output.ProxyWriter:271","type":"CtMethodImpl","sourcecode":"protected void handleIOException(java.io.IOException e) throws java.io.IOException {\n    if (null != e) {\n        throw new java.io.IOException();\n    } else {\n        {\n            throw e;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"e"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:627","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"6d62a87c-2e8c-11e6-8061-3703626bf72f","method":{"position":"org.apache.commons.io.EndianUtils:328","type":"CtMethodImpl","sourcecode":"public static void writeSwappedInteger(java.io.OutputStream output, int value) throws java.io.IOException {\n    if (value == 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n            output.write(((byte)((value >> 16) & 255)));\n            output.write(((byte)((value >> 24) & 255)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:259","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"6d62a87d-2e8c-11e6-8061-9f89091c528a","method":{"position":"org.apache.commons.io.FilenameUtils:688","type":"CtMethodImpl","sourcecode":"public static int indexOfLastSeparator(java.lang.String filename) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                return -1;\n            } \n            int int = filename.lastIndexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n            int int = filename.lastIndexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n            return java.lang.Math.max(lastUnixPos, lastWindowsPos);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"filename"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"6d62cf8e-2e8c-11e6-8061-95fef6e6fb49","method":{"position":"org.apache.commons.io.EndianUtils:365","type":"CtMethodImpl","sourcecode":"public static long readSwappedUnsignedInteger(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        {\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            long long = (((value1 & 255) << 0) + ((value2 & 255) << 8)) + ((value3 & 255) << 16);\n            long long = value4 & 255;\n            return (high << 24) + (4294967295L & low);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:405","type":"CtBinaryOperatorImpl","sourcecode":"i == (prefix + 2)"},"failures":[],"tindex":"6d62cf8f-2e8c-11e6-8061-9b8fba4c94d2","method":{"position":"org.apache.commons.io.output.NullOutputStream:44","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b, int off, int len) {\n    if (off == (len + 2)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"len","i":"off"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.OrFileFilter:75","type":"CtBinaryOperatorImpl","sourcecode":"(filter1 == null) || (filter2 == null)"},"failures":[],"tindex":"6d62cf90-2e8c-11e6-8061-055fd3113374","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:469","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if ((filter == null) || (filter == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.NotFileFilter(filter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"filter","filter2":"filter"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:134","type":"CtBinaryOperatorImpl","sourcecode":"chr != null"},"failures":[],"tindex":"6d62cf91-2e8c-11e6-8061-211ad1dec68c","method":{"position":"org.apache.commons.io.IOUtils:1998","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.Reader input, java.io.Writer output, char[] buffer) throws java.io.IOException {\n    if (buffer != null) {\n        {\n            long long = 0;\n            int int = 0;\n            while ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) != (n = input.read(buffer))) {\n                output.write(buffer, 0, n);\n                count += n;\n            }\n            return count;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"buffer"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:489","type":"CtBinaryOperatorImpl","sourcecode":"basePath == null"},"failures":[],"tindex":"6d62f6a2-2e8c-11e6-8061-85e85597194c","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence value) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder.append(value);\n            return org.apache.commons.io.output.StringBuilderWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"basePath":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.SwappedDataInputStream:142","type":"CtBinaryOperatorImpl","sourcecode":"(-1) == count"},"failures":[],"tindex":"6d62f6a3-2e8c-11e6-8061-a96f4d516758","method":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:329","type":"CtMethodImpl","sourcecode":"private int getNewLineMatchByteCount(byte[] data, int i) {\n    if ((-1) == i) {\n        {\n            for (byte[] byte[] : byte[][]) {\n                boolean boolean = true;\n                for (int int = (newLineSequence.int) - 1 ; j >= 0 ; j--) {\n                    int int = (i + j) - ((newLineSequence.int) - 1);\n                    match &= (k >= 0) && ((data[k]) == (newLineSequence[j]));\n                }\n                if (match) {\n                    return newLineSequence.int;\n                } \n            }\n            return 0;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"i"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2278","type":"CtBinaryOperatorImpl","sourcecode":"toSkip < 0"},"failures":[],"tindex":"6d62f6a4-2e8c-11e6-8061-03d3c84a9659","method":{"position":"org.apache.commons.io.EndianUtils:389","type":"CtMethodImpl","sourcecode":"public static void writeSwappedLong(java.io.OutputStream output, long value) throws java.io.IOException {\n    if (value < 0) {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n            output.write(((byte)((value >> 16) & 255)));\n            output.write(((byte)((value >> 24) & 255)));\n            output.write(((byte)((value >> 32) & 255)));\n            output.write(((byte)((value >> 40) & 255)));\n            output.write(((byte)((value >> 48) & 255)));\n            output.write(((byte)((value >> 56) & 255)));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toSkip":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"6d631db5-2e8c-11e6-8061-a39989294c7d","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:165","type":"CtMethodImpl","sourcecode":"protected void handleIOException(java.io.IOException e) throws java.io.IOException {\n    if (null != e) {\n        {\n            throw e;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"e"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:195","type":"CtBinaryOperatorImpl","sourcecode":"inBufferPos == (currentBuffer.length)"},"failures":[],"tindex":"6d631db6-2e8c-11e6-8061-09d6560868d6","method":{"position":"org.apache.commons.io.EndianUtils:183","type":"CtMethodImpl","sourcecode":"public static long readSwappedUnsignedInteger(byte[] data, int offset) {\n    if (offset == offset) {\n        {\n            long long = ((((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8)) + (((data[(offset + 2)]) & 255) << 16);\n            long long = (data[(offset + 3)]) & 255;\n            return (high << 24) + (4294967295L & low);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"currentBuffer":"data","inBufferPos":"offset","length":"offset"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl","sourcecode":"!(input1 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"6d631db7-2e8c-11e6-8061-b77be658301c","method":{"position":"org.apache.commons.io.EndianUtils:409","type":"CtMethodImpl","sourcecode":"public static long readSwappedLong(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            byte[] byte[] = new byte[8];\n            for (int int = 0 ; i < 8 ; i++) {\n                bytes[i] = ((byte)(org.apache.commons.io.EndianUtils.read(input)));\n            }\n            return org.apache.commons.io.EndianUtils.readSwappedLong(bytes, 0);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.CharSequenceReader:140","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[],"tindex":"6d6344c8-2e8c-11e6-8061-7fbc084b54ea","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:718","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[] magicNumber, long offset) {\n    if (offset < 0) {\n        {\n            return new org.apache.commons.io.filefilter.MagicNumberFileFilter(magicNumber , offset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"offset"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.LastModifiedFileComparator:71","type":"CtBinaryOperatorImpl","sourcecode":"result > 0"},"failures":[],"tindex":"6d6344c9-2e8c-11e6-8061-25862b703c7f","method":{"position":"org.apache.commons.io.EndianUtils:78","type":"CtMethodImpl","sourcecode":"public static long swapLong(long value) {\n    if (value > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (((((((((value >> 0) & 255) << 56) + (((value >> 8) & 255) << 48)) + (((value >> 16) & 255) << 40)) + (((value >> 24) & 255) << 32)) + (((value >> 32) & 255) << 24)) + (((value >> 40) & 255) << 16)) + (((value >> 48) & 255) << 8)) + (((value >> 56) & 255) << 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:391","type":"CtBinaryOperatorImpl","sourcecode":"i == (size - 1)"},"failures":[],"tindex":"6d6344ca-2e8c-11e6-8061-b9bb77275748","method":{"position":"org.apache.commons.io.EndianUtils:117","type":"CtMethodImpl","sourcecode":"public static void writeSwappedShort(byte[] data, int offset, short value) {\n    if (offset == (offset - 1)) {\n        {\n            data[(offset + 0)] = ((byte)((value >> 0) & 255));\n            data[(offset + 1)] = ((byte)((value >> 8) & 255));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"offset","i":"offset"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:797","type":"CtBinaryOperatorImpl","sourcecode":"(file1.isDirectory()) || (file2.isDirectory())"},"failures":[],"tindex":"6d6344cb-2e8c-11e6-8061-afda14dce5e4","method":{"position":"org.apache.commons.io.FileUtils:1037","type":"CtMethodImpl","sourcecode":"public static void copyFile(java.io.File srcFile, java.io.File destFile) throws java.io.IOException {\n    if ((destFile.isDirectory()) || (srcFile.isDirectory())) {\n        {\n            org.apache.commons.io.FileUtils.copyFile(srcFile, destFile, true);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"srcFile","file1":"destFile"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2273","type":"CtUnaryOperatorImpl","sourcecode":"!(file.delete())"},"failures":[],"tindex":"6d636bdc-2e8c-11e6-8061-639da134af19","method":{"position":"org.apache.commons.io.filefilter.AndFileFilter:117","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(final java.io.File file) {\n    if (!(file.delete())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(file.exists())) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.isEmpty()) {\n                        return false;\n                    } \n                    for (org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter : java.util.List<org.apache.commons.io.filefilter.IOFileFilter>) {\n                        if (!(fileFilter.accept(file))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.HexDump:81","type":"CtBinaryOperatorImpl","sourcecode":"stream == null"},"failures":[],"tindex":"6d636bdd-2e8c-11e6-8061-9512eef25d61","method":{"position":"org.apache.commons.io.EndianUtils:283","type":"CtMethodImpl","sourcecode":"public static void writeSwappedShort(java.io.OutputStream output, short value) throws java.io.IOException {\n    if (output == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stream":"output"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:124","type":"CtBinaryOperatorImpl","sourcecode":"result > 0"},"failures":[],"tindex":"6d636bde-2e8c-11e6-8061-a3c68e586f5a","method":{"position":"org.apache.commons.io.ThreadMonitor:54","type":"CtMethodImpl","sourcecode":"public static java.lang.Thread start(long timeout) {\n    if (timeout > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.ThreadMonitor.start(java.lang.Thread.currentThread(), timeout);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"timeout"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2752","type":"CtInvocationImpl","sourcecode":"destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())"},"failures":[],"tindex":"6d636bdf-2e8c-11e6-8061-b14132607e4c","method":{"position":"org.apache.commons.io.FileUtils:2920","type":"CtMethodImpl","sourcecode":"public static boolean isSymlink(java.io.File file) throws java.io.IOException {\n    if (file.getCanonicalPath().startsWith(file.getCanonicalPath())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File must not be null\");\n            } \n            if (org.apache.commons.io.FilenameUtils.isSystemWindows()) {\n                return false;\n            } \n            java.io.File java.io.File = null;\n            if ((file.getParent()) == null) {\n                fileInCanonicalDir = file;\n            } else {\n                java.io.File java.io.File = file.getParentFile().getCanonicalFile();\n                fileInCanonicalDir = new java.io.File(canonicalDir , file.getName());\n            }\n            if (fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file","destDir":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:275","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"6d6392f0-2e8c-11e6-8061-f3f471659c8a","method":{"position":"org.apache.commons.io.FileUtils:2043","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, java.nio.charset.Charset encoding, boolean append) throws java.io.IOException {\n    if (file == null) {\n        {\n            java.lang.String java.lang.String = data == null ? null : data.toString();\n            org.apache.commons.io.FileUtils.writeStringToFile(file, str, encoding, append);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:116","type":"CtInvocationImpl","sourcecode":"file2.isDirectory()"},"failures":[],"tindex":"6d6392f1-2e8c-11e6-8061-4d6d2137b423","method":{"position":"org.apache.commons.io.FileUtils:1876","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.LineIterator lineIterator(java.io.File file) throws java.io.IOException {\n    if (file.isDirectory()) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.FileUtils.lineIterator(file, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:602","type":"CtVariableReadImpl","sourcecode":"appXml"},"failures":[],"tindex":"6d6392f2-2e8c-11e6-8061-cda8a15e1db8","method":{"position":"org.apache.commons.io.FileUtils:2247","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.util.Collection<?> lines, java.lang.String lineEnding, boolean append) throws java.io.IOException {\n    if (append) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, null, lines, lineEnding, append);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"appXml":"append"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2735","type":"CtBinaryOperatorImpl","sourcecode":"srcDir == null"},"failures":[],"tindex":"6d63ba03-2e8c-11e6-8061-277f5709795d","method":{"position":"org.apache.commons.io.FileUtils:2230","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.util.Collection<?> lines, java.lang.String lineEnding) throws java.io.IOException {\n    if (file == null) {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, null, lines, lineEnding, false);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:723","type":"CtBinaryOperatorImpl","sourcecode":"c == (-1)"},"failures":[],"tindex":"6d63ba04-2e8c-11e6-8061-631137783784","method":{"position":"org.apache.commons.io.input.ReaderInputStream:222","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b, int off, int len) throws java.io.IOException {\n    if (len == (-1)) {\n        {\n            if (b == null) {\n                throw new java.lang.NullPointerException(\"Byte array must not be null\");\n            } \n            if (((len < 0) || (off < 0)) || ((off + len) > (b.int))) {\n                throw new java.lang.IndexOutOfBoundsException((((((\"Array Size=\" + (b.int)) + \", offset=\") + off) + \", length=\") + len));\n            } \n            int int = 0;\n            if (len == 0) {\n                return 0;\n            } \n            while (len > 0) {\n                if (java.nio.ByteBuffer.hasRemaining()) {\n                    int int = java.lang.Math.min(java.nio.ByteBuffer.remaining(), len);\n                    java.nio.ByteBuffer.get(b, off, c);\n                    off += c;\n                    len -= c;\n                    read += c;\n                } else {\n                    fillBuffer();\n                    if ((boolean) && (!(java.nio.ByteBuffer.hasRemaining()))) {\n                        break;\n                    } \n                }\n            }\n            return (read == 0) && (boolean) ? -1 : read;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"len"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2928","type":"CtBinaryOperatorImpl","sourcecode":"(file.getParent()) == null"},"failures":[],"tindex":"6d63ba05-2e8c-11e6-8061-470c28c41b0c","method":{"position":"org.apache.commons.io.FileUtils:1403","type":"CtMethodImpl","sourcecode":"private static void doCopyDirectory(java.io.File srcDir, java.io.File destDir, java.io.FileFilter filter, boolean preserveFileDate, java.util.List<java.lang.String> exclusionList) throws java.io.IOException {\n    if ((destDir.getParent()) == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.File[] java.io.File[] = filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);\n            if (srcFiles == null) {\n                throw new java.io.IOException((\"Failed to list contents of \" + srcDir));\n            } \n            if (destDir.exists()) {\n                if ((destDir.isDirectory()) == false) {\n                    throw new java.io.IOException(((\"Destination '\" + destDir) + \"' exists but is not a directory\"));\n                } \n            } else {\n                if ((!(destDir.mkdirs())) && (!(destDir.isDirectory()))) {\n                    throw new java.io.IOException(((\"Destination '\" + destDir) + \"' directory cannot be created\"));\n                } \n            }\n            if ((destDir.canWrite()) == false) {\n                throw new java.io.IOException(((\"Destination '\" + destDir) + \"' cannot be written to\"));\n            } \n            for (java.io.File java.io.File : srcFiles) {\n                java.io.File java.io.File = new java.io.File(destDir , srcFile.getName());\n                if ((exclusionList == null) || (!(exclusionList.contains(srcFile.getCanonicalPath())))) {\n                    if (srcFile.isDirectory()) {\n                        org.apache.commons.io.FileUtils.doCopyDirectory(srcFile, dstFile, filter, preserveFileDate, exclusionList);\n                    } else {\n                        org.apache.commons.io.FileUtils.doCopyFile(srcFile, dstFile, preserveFileDate);\n                    }\n                } \n            }\n            if (preserveFileDate) {\n                destDir.setLastModified(srcDir.lastModified());\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"destDir"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:524","type":"CtBinaryOperatorImpl","sourcecode":"(xmlGuessEnc != null) && (!(xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_8)))"},"failures":[],"tindex":"6d63e116-2e8c-11e6-8061-918c14771120","method":{"position":"org.apache.commons.io.IOUtils:2157","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.Reader input, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding != null) && (!(xmlGuessEnc.equals(encoding)))) {\n        {\n            if (encoding != null) {\n                {\n                    org.apache.commons.io.IOUtils.copy(input, output, org.apache.commons.io.Charsets.toCharset(encoding));\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.input.XmlStreamReader.UTF_8":"encoding","xmlGuessEnc":"encoding"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1281","type":"CtBinaryOperatorImpl","sourcecode":"(filename == null) || (wildcardMatcher == null)"},"failures":[],"tindex":"6d63e117-2e8c-11e6-8061-8711e72a3194","method":{"position":"org.apache.commons.io.CopyUtils:259","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding == null) || (encoding == null)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , encoding);\n            org.apache.commons.io.CopyUtils.copy(in, output);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"encoding","wildcardMatcher":"encoding"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:397","type":"CtBinaryOperatorImpl","sourcecode":"(size.divide(org.apache.commons.io.FileUtils.ONE_GB_BI).compareTo(java.math.BigInteger.ZERO)) > 0"},"failures":[],"tindex":"6d63e118-2e8c-11e6-8061-53545ca12a1d","method":{"position":"org.apache.commons.io.FileCleaningTracker:106","type":"CtMethodImpl","sourcecode":"public void track(java.lang.String path, java.lang.Object marker) {\n    if ((marker.divide(marker).compareTo(marker)) > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            track(path, marker, ((org.apache.commons.io.FileDeleteStrategy)(null)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.FileUtils.ONE_GB_BI":"marker","size":"marker","java.math.BigInteger.ZERO":"marker"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFileFilter:76","type":"CtBinaryOperatorImpl","sourcecode":"wildcard == null"},"failures":[],"tindex":"6d640829-2e8c-11e6-8061-952b6f8e2ac7","method":{"position":"org.apache.commons.io.input.XmlStreamReader:774","type":"CtMethodImpl","sourcecode":"static boolean isTextXml(java.lang.String mime) {\n    if (mime == null) {\n        {\n            return (mime != null) && (((mime.equals(\"text/xml\")) || (mime.equals(\"text/xml-external-parsed-entity\"))) || ((mime.startsWith(\"text/\")) && (mime.endsWith(\"+xml\"))));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"wildcard":"mime"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:270","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"6d64082a-2e8c-11e6-8061-c340c5c6a861","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:757","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if (filter == null) {\n        {\n            if (filter == null) {\n                return org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.IOFileFilter;\n            } else {\n                return org.apache.commons.io.filefilter.FileFilterUtils.and(filter, org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.IOFileFilter);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2818","type":"CtUnaryOperatorImpl","sourcecode":"!(srcFile.exists())"},"failures":[],"tindex":"6d64082b-2e8c-11e6-8061-83bbfe5004fc","method":{"position":"org.apache.commons.io.filefilter.FileFileFilter:58","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.exists())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return file.isFile();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:253","type":"CtBinaryOperatorImpl","sourcecode":"listener != null"},"failures":[],"tindex":"6d64082c-2e8c-11e6-8061-3bfd9dc4d6e7","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:241","type":"CtMethodImpl","sourcecode":"public void addListener(final org.apache.commons.io.monitor.FileAlterationListener listener) {\n    if (listener != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (listener != null) {\n                java.util.List<org.apache.commons.io.monitor.FileAlterationListener>.add(listener);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"listener":"listener"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:227","type":"CtUnaryOperatorImpl","sourcecode":"!(include)"},"failures":[],"tindex":"6d642f3d-2e8c-11e6-8061-cf2af5fa6d27","method":{"position":"org.apache.commons.io.FileUtils:1925","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data, java.nio.charset.Charset encoding, boolean append) throws java.io.IOException {\n    if (!append) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.OutputStream java.io.OutputStream = null;\n            try {\n                out = org.apache.commons.io.FileUtils.openOutputStream(file, append);\n                org.apache.commons.io.IOUtils.write(data, out, encoding);\n                out.close();\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(out);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"include":"append"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:90","type":"CtBinaryOperatorImpl","sourcecode":"(totalByteLength) > 0"},"failures":[],"tindex":"6d642f3e-2e8c-11e6-8061-4f010414449f","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:609","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long threshold) {\n    if (threshold > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.SizeFileFilter(threshold);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"totalByteLength":"threshold"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:600","type":"CtInvocationImpl","sourcecode":"directory.isDirectory()"},"failures":[],"tindex":"6d642f3f-2e8c-11e6-8061-439c691f1e87","method":{"position":"org.apache.commons.io.FileUtils:2467","type":"CtMethodImpl","sourcecode":"public static long sizeOfDirectory(java.io.File directory) {\n    if (directory.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.checkDirectory(directory);\n            final java.io.File[] java.io.File[] = directory.listFiles();\n            if (files == null) {\n                return 0L;\n            } \n            long long = 0;\n            for (final java.io.File java.io.File : files) {\n                try {\n                    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n                        size += org.apache.commons.io.FileUtils.sizeOf(file);\n                        if (size < 0) {\n                            break;\n                        } \n                    } \n                } catch (java.io.IOException ioe) {\n                }\n            }\n            return size;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
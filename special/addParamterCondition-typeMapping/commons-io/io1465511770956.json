{"failureDictionary":{},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:90","type":"CtFieldReadImpl","sourcecode":"finished"},"failures":[],"tindex":"90c325c9-2e92-11e6-a659-c57d0220eebc","method":{"position":"org.apache.commons.io.input.BoundedInputStream:227","type":"CtMethodImpl","sourcecode":"public void setPropagateClose(boolean propagateClose) {\n    if (propagateClose) {\n        {\n            org.apache.commons.io.input.BoundedInputStream.this.boolean = propagateClose;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"finished":"propagateClose"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullInputStream:284","type":"CtBinaryOperatorImpl","sourcecode":"(position) == (size)"},"failures":[],"tindex":"90c3e91a-2e92-11e6-a659-09a0d7eb2733","method":{"position":"org.apache.commons.io.input.ProxyInputStream:114","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long ln) throws java.io.IOException {\n    if (ln == ln) {\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                return java.io.InputStream.skip(ln);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n                return 0;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"ln","position":"ln"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2735","type":"CtBinaryOperatorImpl","sourcecode":"srcDir == null"},"failures":[],"tindex":"90c3e91b-2e92-11e6-a659-7fedd1f4dc09","method":{"position":"org.apache.commons.io.FileUtils:591","type":"CtMethodImpl","sourcecode":"public static java.util.Collection<java.io.File> listFilesAndDirs(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter, org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if (directory == null) {\n        {\n            org.apache.commons.io.FileUtils.validateListFilesParameters(directory, fileFilter);\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = org.apache.commons.io.FileUtils.setUpEffectiveFileFilter(fileFilter);\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(dirFilter);\n            java.util.Collection<java.io.File> java.util.Collection<java.io.File> = new java.util.LinkedList<java.io.File>();\n            if (directory.isDirectory()) {\n                files.add(directory);\n            } \n            org.apache.commons.io.FileUtils.innerListFiles(files, directory, org.apache.commons.io.filefilter.FileFilterUtils.or(effFileFilter, effDirFilter), true);\n            return files;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:619","type":"CtInvocationImpl","sourcecode":"cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16)"},"failures":[],"tindex":"90c4102c-2e92-11e6-a659-4fbd7a7d32f6","method":{"position":"org.apache.commons.io.FilenameUtils:1097","type":"CtMethodImpl","sourcecode":"public static boolean equalsNormalizedOnSystem(java.lang.String filename1, java.lang.String filename2) {\n    if (filename2 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename2.equals(filename1)) {\n                {\n                    return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, true, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cTEnc":"filename2","org.apache.commons.io.input.XmlStreamReader.UTF_16":"filename1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BoundedInputStream:117","type":"CtBinaryOperatorImpl","sourcecode":"((max) >= 0) && ((pos) >= (max))"},"failures":[],"tindex":"90c4373d-2e92-11e6-a659-771489f4f033","method":{"position":"org.apache.commons.io.FileSystemUtils:233","type":"CtMethodImpl","sourcecode":"public static long freeSpaceKb(long timeout) throws java.io.IOException {\n    if ((timeout >= 0) && (timeout >= (long))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.FileSystemUtils.freeSpaceKb(new java.io.File(\".\").getAbsolutePath(), timeout);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"max":"timeout","pos":"timeout"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.Tailer:398","type":"CtVariableReadImpl","sourcecode":"newer"},"failures":[],"tindex":"90c4373e-2e92-11e6-a659-3d785dc88404","method":{"position":"org.apache.commons.io.FileUtils:1128","type":"CtMethodImpl","sourcecode":"private static void doCopyFile(java.io.File srcFile, java.io.File destFile, boolean preserveFileDate) throws java.io.IOException {\n    if (preserveFileDate) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((destFile.exists()) && (destFile.isDirectory())) {\n                throw new java.io.IOException(((\"Destination '\" + destFile) + \"' exists but is a directory\"));\n            } \n            java.io.FileInputStream java.io.FileInputStream = null;\n            java.io.FileOutputStream java.io.FileOutputStream = null;\n            java.nio.channels.FileChannel java.nio.channels.FileChannel = null;\n            java.nio.channels.FileChannel java.nio.channels.FileChannel = null;\n            try {\n                fis = new java.io.FileInputStream(srcFile);\n                fos = new java.io.FileOutputStream(destFile);\n                input = fis.getChannel();\n                output = fos.getChannel();\n                long long = input.size();\n                long long = 0;\n                long long = 0;\n                while (pos < size) {\n                    count = (size - pos) > (org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.long) ? org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.long : size - pos;\n                    pos += output.transferFrom(input, pos, count);\n                }\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(output);\n                org.apache.commons.io.IOUtils.closeQuietly(fos);\n                org.apache.commons.io.IOUtils.closeQuietly(input);\n                org.apache.commons.io.IOUtils.closeQuietly(fis);\n            }\n            if ((srcFile.length()) != (destFile.length())) {\n                throw new java.io.IOException(((((\"Failed to copy full contents from '\" + srcFile) + \"' to '\") + destFile) + \"'\"));\n            } \n            if (preserveFileDate) {\n                destFile.setLastModified(srcFile.lastModified());\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"newer":"preserveFileDate"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.NullReader:267","type":"CtBinaryOperatorImpl","sourcecode":"(position) == (size)"},"failures":[],"tindex":"90c45e4f-2e92-11e6-a659-09c35992805b","method":{"position":"org.apache.commons.io.monitor.FileEntry:227","type":"CtMethodImpl","sourcecode":"public void setLength(long length) {\n    if (length == length) {\n        {\n            org.apache.commons.io.monitor.FileEntry.this.long = length;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"length","position":"length"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1116","type":"CtBinaryOperatorImpl","sourcecode":"(filename1 == null) || (filename2 == null)"},"failures":[],"tindex":"90c48560-2e92-11e6-a659-395334dc7311","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:354","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String name, org.apache.commons.io.IOCase caseSensitivity) {\n    if ((name == null) || (name == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.NameFileFilter(name , caseSensitivity);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename2":"name","filename1":"name"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:620","type":"CtBinaryOperatorImpl","sourcecode":"(bomEnc != null) && (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.UTF_16))"},"failures":[],"tindex":"90c48561-2e92-11e6-a659-99ab8880ae72","method":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:167","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file, java.lang.String name) {\n    if ((name != null) && (bomEnc.startsWith(name))) {\n        {\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkStartsWith(name, prefix)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"name","org.apache.commons.io.input.XmlStreamReader.UTF_16":"name"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:531","type":"CtBinaryOperatorImpl","sourcecode":"canonicalParent == null"},"failures":[],"tindex":"90c4ac72-2e92-11e6-a659-b7eaef5f30df","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:678","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String magicNumber, long offset) {\n    if (magicNumber == null) {\n        {\n            return new org.apache.commons.io.filefilter.MagicNumberFileFilter(magicNumber , offset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"canonicalParent":"magicNumber"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"90c4ac73-2e92-11e6-a659-55e5013a0e4d","method":{"position":"org.apache.commons.io.input.TaggedInputStream:87","type":"CtMethodImpl","sourcecode":"public boolean isCauseOf(java.lang.Throwable exception) {\n    if (null != exception) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.TaggedIOException.isTaggedWith(exception, java.io.Serializable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"exception"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2179","type":"CtUnaryOperatorImpl","sourcecode":"!(input1 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"90c4d384-2e92-11e6-a659-f1756aa39bf6","method":{"position":"org.apache.commons.io.IOUtils:985","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.InputStream input, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding));\n            return org.apache.commons.io.IOUtils.readLines(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input1":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1367","type":"CtBinaryOperatorImpl","sourcecode":"(srcDir.exists()) == false"},"failures":[],"tindex":"90c4d385-2e92-11e6-a659-97fca06e3c8d","method":{"position":"org.apache.commons.io.FileUtils:1229","type":"CtMethodImpl","sourcecode":"public static void copyDirectory(java.io.File srcDir, java.io.File destDir) throws java.io.IOException {\n    if ((srcDir.exists()) == false) {\n        {\n            org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir, true);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"srcDir"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2182","type":"CtUnaryOperatorImpl","sourcecode":"!(input2 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"90c4fa96-2e92-11e6-a659-d7b3e0ce8905","method":{"position":"org.apache.commons.io.EndianUtils:477","type":"CtMethodImpl","sourcecode":"private static int read(java.io.InputStream input) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            int int = input.read();\n            if ((-1) == value) {\n                throw new java.io.EOFException(\"Unexpected EOF reached\");\n            } \n            return value;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input2":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.NullInputStream:259","type":"CtBinaryOperatorImpl","sourcecode":"(position) > ((mark) + (readlimit))"},"failures":[],"tindex":"90c4fa97-2e92-11e6-a659-b5efd1766b0e","method":{"position":"org.apache.commons.io.ThreadMonitor:54","type":"CtMethodImpl","sourcecode":"public static java.lang.Thread start(long timeout) {\n    if (timeout > (timeout + timeout)) {\n        {\n            return org.apache.commons.io.ThreadMonitor.start(java.lang.Thread.currentThread(), timeout);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"readlimit":"timeout","position":"timeout","mark":"timeout"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:658","type":"CtBinaryOperatorImpl","sourcecode":"i >= 0"},"failures":[],"tindex":"90c521a8-2e92-11e6-a659-b935fdfc7cdb","method":{"position":"org.apache.commons.io.EndianUtils:250","type":"CtMethodImpl","sourcecode":"public static float readSwappedFloat(byte[] data, int offset) {\n    if (offset >= 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.Float.intBitsToFloat(org.apache.commons.io.EndianUtils.readSwappedInteger(data, offset));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"offset"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:391","type":"CtBinaryOperatorImpl","sourcecode":"i == (size - 1)"},"failures":[],"tindex":"90c521a9-2e92-11e6-a659-7d4f78918a11","method":{"position":"org.apache.commons.io.output.XmlStreamWriter:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] cbuf, int off, int len) throws java.io.IOException {\n    if (len == (len - 1)) {\n        {\n            if ((java.io.StringWriter) != null) {\n                detectEncoding(cbuf, off, len);\n            } else {\n                java.io.Writer.write(cbuf, off, len);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"len","i":"len"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.CompositeFileComparator:95","type":"CtBinaryOperatorImpl","sourcecode":"result != 0"},"failures":[],"tindex":"90c548ba-2e92-11e6-a659-4dac145ba64d","method":{"position":"org.apache.commons.io.input.CharSequenceInputStream:113","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b, int off, int len) throws java.io.IOException {\n    if (len != 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (b == null) {\n                throw new java.lang.NullPointerException(\"Byte array is null\");\n            } \n            if ((len < 0) || ((off + len) > (b.int))) {\n                throw new java.lang.IndexOutOfBoundsException((((((\"Array Size=\" + (b.int)) + \", offset=\") + off) + \", length=\") + len));\n            } \n            if (len == 0) {\n                return 0;\n            } \n            if ((!(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.ByteBuffer.hasRemaining())) && (!(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.CharBuffer.hasRemaining()))) {\n                return -1;\n            } \n            int int = 0;\n            while (len > 0) {\n                if (org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.ByteBuffer.hasRemaining()) {\n                    int int = java.lang.Math.min(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.ByteBuffer.remaining(), len);\n                    org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.ByteBuffer.get(b, off, chunk);\n                    off += chunk;\n                    len -= chunk;\n                    bytesRead += chunk;\n                } else {\n                    fillBuffer();\n                    if ((!(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.ByteBuffer.hasRemaining())) && (!(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.CharBuffer.hasRemaining()))) {\n                        break;\n                    } \n                }\n            }\n            return (bytesRead == 0) && (!(org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.CharBuffer.hasRemaining())) ? -1 : bytesRead;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"len"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CountingInputStream:71","type":"CtBinaryOperatorImpl","sourcecode":"n != (-1)"},"failures":[],"tindex":"90c56fcb-2e92-11e6-a659-bda0ecd3df32","method":{"position":"org.apache.commons.io.EndianUtils:328","type":"CtMethodImpl","sourcecode":"public static void writeSwappedInteger(java.io.OutputStream output, int value) throws java.io.IOException {\n    if (value >= 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value != (-1)) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    output.write(((byte)((value >> 0) & 255)));\n                    output.write(((byte)((value >> 8) & 255)));\n                    output.write(((byte)((value >> 16) & 255)));\n                    output.write(((byte)((value >> 24) & 255)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.CharSequenceInputStream:121","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"90c56fcc-2e92-11e6-a659-03391b936280","method":{"position":"org.apache.commons.io.EndianUtils:142","type":"CtMethodImpl","sourcecode":"public static int readSwappedUnsignedShort(byte[] data, int offset) {\n    if (offset == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"offset"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2827","type":"CtInvocationImpl","sourcecode":"destFile.isDirectory()"},"failures":[],"tindex":"90c596dd-2e92-11e6-a659-2540ff0d164b","method":{"position":"org.apache.commons.io.comparator.ExtensionFileComparator:106","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (!(file2.isDirectory())) {\n        {\n            if (file2 == null) {\n                {\n                    if (file1.isDirectory()) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            java.lang.String java.lang.String = org.apache.commons.io.FilenameUtils.getExtension(file1.getName());\n                            java.lang.String java.lang.String = org.apache.commons.io.FilenameUtils.getExtension(file2.getName());\n                            return org.apache.commons.io.IOCase.checkCompareTo(suffix1, suffix2);\n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"file1"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:658","type":"CtBinaryOperatorImpl","sourcecode":"i >= 0"},"failures":[],"tindex":"90c5bdee-2e92-11e6-a659-0b582e1c9b2d","method":{"position":"org.apache.commons.io.EndianUtils:328","type":"CtMethodImpl","sourcecode":"public static void writeSwappedInteger(java.io.OutputStream output, int value) throws java.io.IOException {\n    if (value >= 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value != (-1)) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    output.write(((byte)((value >> 0) & 255)));\n                    output.write(((byte)((value >> 8) & 255)));\n                    output.write(((byte)((value >> 16) & 255)));\n                    output.write(((byte)((value >> 24) & 255)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1076","type":"CtInvocationImpl","sourcecode":"srcFile.isDirectory()"},"failures":[],"tindex":"90c5bdef-2e92-11e6-a659-33f7a0559280","method":{"position":"org.apache.commons.io.FileUtils:2366","type":"CtMethodImpl","sourcecode":"public static void forceMkdir(java.io.File directory) throws java.io.IOException {\n    if (directory.isDirectory()) {\n        {\n            if (directory.exists()) {\n                if (!(directory.isDirectory())) {\n                    java.lang.String java.lang.String = ((\"File \" + directory) + \" exists and is \") + \"not a directory. Unable to create directory.\";\n                    throw new java.io.IOException(message);\n                } \n            } else {\n                if (!(directory.mkdirs())) {\n                    if (!(directory.isDirectory())) {\n                        java.lang.String java.lang.String = \"Unable to create directory \" + directory;\n                        throw new java.io.IOException(message);\n                    } \n                } \n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:489","type":"CtBinaryOperatorImpl","sourcecode":"encoding == null"},"failures":[],"tindex":"90c5e500-2e92-11e6-a659-370c75054ff3","method":{"position":"org.apache.commons.io.IOUtils:1411","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.CharSequence data, java.io.Writer output) throws java.io.IOException {\n    if (data == null) {\n        {\n            if (data != null) {\n                org.apache.commons.io.IOUtils.write(data.toString(), output);\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1073","type":"CtBinaryOperatorImpl","sourcecode":"(srcFile.exists()) == false"},"failures":[],"tindex":"90c5e501-2e92-11e6-a659-8dcf277dc5ed","method":{"position":"org.apache.commons.io.FileCleaningTracker:76","type":"CtMethodImpl","sourcecode":"public void track(java.io.File file, java.lang.Object marker) {\n    if ((file.exists()) == false) {\n        {\n            track(file, marker, ((org.apache.commons.io.FileDeleteStrategy)(null)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2293","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"90c60c12-2e92-11e6-a659-6f11b8cec5ef","method":{"position":"org.apache.commons.io.FileUtils:1529","type":"CtMethodImpl","sourcecode":"public static void deleteDirectory(java.io.File directory) throws java.io.IOException {\n    if (directory.isDirectory()) {\n        {\n            if (!(directory.exists())) {\n                return ;\n            } \n            if (!(org.apache.commons.io.FileUtils.isSymlink(directory))) {\n                org.apache.commons.io.FileUtils.cleanDirectory(directory);\n            } \n            if (!(directory.delete())) {\n                java.lang.String java.lang.String = (\"Unable to delete directory \" + directory) + \".\";\n                throw new java.io.IOException(message);\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2666","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"90c60c13-2e92-11e6-a659-8bde6a844509","method":{"position":"org.apache.commons.io.FileUtils:2920","type":"CtMethodImpl","sourcecode":"public static boolean isSymlink(java.io.File file) throws java.io.IOException {\n    if (!(file.exists())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File must not be null\");\n            } \n            if (org.apache.commons.io.FilenameUtils.isSystemWindows()) {\n                return false;\n            } \n            java.io.File java.io.File = null;\n            if ((file.getParent()) == null) {\n                fileInCanonicalDir = file;\n            } else {\n                java.io.File java.io.File = file.getParentFile().getCanonicalFile();\n                fileInCanonicalDir = new java.io.File(canonicalDir , file.getName());\n            }\n            if (fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1371","type":"CtBinaryOperatorImpl","sourcecode":"((text.indexOf('?')) == (-1)) && ((text.indexOf('*')) == (-1))"},"failures":[],"tindex":"90c60c14-2e92-11e6-a659-cb4d1f8916ec","method":{"position":"org.apache.commons.io.FileSystemUtils:379","type":"CtMethodImpl","sourcecode":"long freeSpaceUnix(java.lang.String path, boolean kb, boolean posix, long timeout) throws java.io.IOException {\n    if (timeout < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (((path.indexOf('?')) == (-1)) && ((text.indexOf('*')) == (-1))) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((path.length()) == 0) {\n                        throw new java.lang.IllegalArgumentException(\"Path must not be empty\");\n                    } \n                    java.lang.String java.lang.String = \"-\";\n                    if (kb) {\n                        flags += \"k\";\n                    } \n                    if (posix) {\n                        flags += \"P\";\n                    } \n                    java.lang.String[] java.lang.String[] = (flags.length()) > 1 ? new java.lang.String[]{ org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String , flags , path } : new java.lang.String[]{ org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String , path };\n                    java.util.List<java.lang.String> java.util.List<java.lang.String> = performCommand(cmdAttribs, 3, timeout);\n                    if ((lines.size()) < 2) {\n                        throw new java.io.IOException(((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return info as expected \") + \"for path '\") + path) + \"'- response was \") + lines));\n                    } \n                    java.lang.String java.lang.String = lines.get(1);\n                    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(line2 , \" \");\n                    if ((tok.countTokens()) < 4) {\n                        if (((tok.countTokens()) == 1) && ((lines.size()) >= 3)) {\n                            java.lang.String java.lang.String = lines.get(2);\n                            tok = new java.util.StringTokenizer(line3 , \" \");\n                        } else {\n                            throw new java.io.IOException((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return data as expected \") + \"for path '\") + path) + \"'- check path is valid\"));\n                        }\n                    } else {\n                        tok.nextToken();\n                    }\n                    tok.nextToken();\n                    tok.nextToken();\n                    java.lang.String java.lang.String = tok.nextToken();\n                    return parseBytes(freeSpace, path);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"path"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"90c68145-2e92-11e6-a659-9174dd69de2d","method":{"position":"org.apache.commons.io.IOUtils:2516","type":"CtMethodImpl","sourcecode":"public static void readFully(java.io.Reader input, char[] buffer) throws java.io.IOException {\n    if (input == null) {\n        {\n            org.apache.commons.io.IOUtils.readFully(input, buffer, 0, buffer.int);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.HexDump:90","type":"CtBinaryOperatorImpl","sourcecode":"chars_read > 16"},"failures":[],"tindex":"90c68146-2e92-11e6-a659-73fb17037183","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:101","type":"CtMethodImpl","sourcecode":"private void needNewBuffer(int newcount) {\n    if (newcount > 16) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) < ((java.util.List<byte[]>.size()) - 1)) {\n                int += byte[].int;\n                (int)++;\n                byte[] = java.util.List<byte[]>.get(int);\n            } else {\n                int int;\n                if ((byte[]) == null) {\n                    newBufferSize = newcount;\n                    int = 0;\n                } else {\n                    newBufferSize = java.lang.Math.max(((byte[].int) << 1), (newcount - (int)));\n                    int += byte[].int;\n                }\n                (int)++;\n                byte[] = new byte[newBufferSize];\n                java.util.List<byte[]>.add(byte[]);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chars_read":"newcount"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2596","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"90c6a857-2e92-11e6-a659-8fe69b850669","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:67","type":"CtMethodImpl","sourcecode":"public void onFileCreate(final java.io.File file) {\n    if (file == null) {\n        {\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:754","type":"CtBinaryOperatorImpl","sourcecode":"len < 0"},"failures":[],"tindex":"90c6a858-2e92-11e6-a659-c70ce4f2df15","method":{"position":"org.apache.commons.io.FileUtils:1484","type":"CtMethodImpl","sourcecode":"public static void copyURLToFile(java.net.URL source, java.io.File destination, int connectionTimeout, int readTimeout) throws java.io.IOException {\n    if (readTimeout < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.net.URLConnection java.net.URLConnection = source.openConnection();\n            connection.setConnectTimeout(connectionTimeout);\n            connection.setReadTimeout(readTimeout);\n            java.io.InputStream java.io.InputStream = connection.getInputStream();\n            org.apache.commons.io.FileUtils.copyInputStreamToFile(input, destination);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"readTimeout"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2599","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"90c6a859-2e92-11e6-a659-cba7cab5785a","method":{"position":"org.apache.commons.io.FileUtils:2001","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, boolean append) throws java.io.IOException {\n    if (!(file.exists())) {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, java.nio.charset.Charset.defaultCharset(), append);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileCleaningTracker:91","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"90c6cf6a-2e92-11e6-a659-275ad8cab82f","method":{"position":"org.apache.commons.io.DirectoryWalker:488","type":"CtMethodImpl","sourcecode":"protected boolean handleDirectory(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (directory == null) {\n        {\n            return true;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:211","type":"CtBinaryOperatorImpl","sourcecode":"(memoryOutputStream) != null"},"failures":[],"tindex":"90c6cf6b-2e92-11e6-a659-133e1e7db3d0","method":{"position":"org.apache.commons.io.EndianUtils:283","type":"CtMethodImpl","sourcecode":"public static void writeSwappedShort(java.io.OutputStream output, short value) throws java.io.IOException {\n    if (output != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"memoryOutputStream":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"90c6cf6c-2e92-11e6-a659-3716b5b78d45","method":{"position":"org.apache.commons.io.input.ProxyInputStream:232","type":"CtMethodImpl","sourcecode":"protected void handleIOException(java.io.IOException e) throws java.io.IOException {\n    if (null != e) {\n        {\n            throw e;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"e"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:389","type":"CtVariableReadImpl","sourcecode":"posix"},"failures":[],"tindex":"90c6f67d-2e92-11e6-a659-fb647b573b32","method":{"position":"org.apache.commons.io.input.XmlStreamReader:423","type":"CtMethodImpl","sourcecode":"private java.lang.String doRawStream(org.apache.commons.io.input.BOMInputStream bom, org.apache.commons.io.input.BOMInputStream pis, boolean lenient) throws java.io.IOException {\n    if (lenient) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String java.lang.String = bom.getBOMCharsetName();\n            java.lang.String java.lang.String = pis.getBOMCharsetName();\n            java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getXmlProlog(pis, xmlGuessEnc);\n            try {\n                return calculateRawEncoding(bomEnc, xmlGuessEnc, xmlEnc);\n            } catch (org.apache.commons.io.input.XmlStreamReaderException ex) {\n                if (lenient) {\n                    return doLenientDetection(null, ex);\n                } else {\n                    throw ex;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"posix":"lenient"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1129","type":"CtBinaryOperatorImpl","sourcecode":"(destFile.exists()) && (destFile.isDirectory())"},"failures":[],"tindex":"90c6f67e-2e92-11e6-a659-0dd7851cf8f5","method":{"position":"org.apache.commons.io.FileUtils:1747","type":"CtMethodImpl","sourcecode":"public static java.lang.String readFileToString(java.io.File file) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            if ((file.exists()) && (destFile.isDirectory())) {\n                {\n                    return org.apache.commons.io.FileUtils.readFileToString(file, java.nio.charset.Charset.defaultCharset());\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"file"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:87","type":"CtBinaryOperatorImpl","sourcecode":"(((osName.indexOf(\"sun os\")) != (-1)) || ((osName.indexOf(\"sunos\")) != (-1))) || ((osName.indexOf(\"solaris\")) != (-1))"},"failures":[],"tindex":"90c6f67f-2e92-11e6-a659-89c92100495d","method":{"position":"org.apache.commons.io.FileSystemUtils:170","type":"CtMethodImpl","sourcecode":"public static long freeSpaceKb(java.lang.String path) throws java.io.IOException {\n    if ((((path.indexOf(\"sun os\")) != (-1)) || ((osName.indexOf(\"sunos\")) != (-1))) || ((osName.indexOf(\"solaris\")) != (-1))) {\n        {\n            return org.apache.commons.io.FileSystemUtils.freeSpaceKb(path, (-1));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"osName":"path"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:750","type":"CtInvocationImpl","sourcecode":"file1.getCanonicalFile().equals(file2.getCanonicalFile())"},"failures":[],"tindex":"90c807f0-2e92-11e6-a659-2f88af92763e","method":{"position":"org.apache.commons.io.FileUtils:1308","type":"CtMethodImpl","sourcecode":"public static void copyDirectory(java.io.File srcDir, java.io.File destDir, java.io.FileFilter filter) throws java.io.IOException {\n    if (destDir.getCanonicalFile().equals(srcDir.getCanonicalFile())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir, filter, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"srcDir","file1":"destDir"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:528","type":"CtBinaryOperatorImpl","sourcecode":"(xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_8)))"},"failures":[],"tindex":"90c82f01-2e92-11e6-a659-7376e570ec56","method":{"position":"org.apache.commons.io.IOCase:182","type":"CtMethodImpl","sourcecode":"public boolean checkStartsWith(java.lang.String str, java.lang.String start) {\n    if ((str != null) && (!(xmlEnc.equals(str)))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return str.regionMatches((!(boolean)), 0, start, 0, start.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.input.XmlStreamReader.UTF_8":"str","xmlEnc":"str"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2855","type":"CtBinaryOperatorImpl","sourcecode":"srcFile == null"},"failures":[],"tindex":"90c82f02-2e92-11e6-a659-59409fba54e4","method":{"position":"org.apache.commons.io.comparator.ExtensionFileComparator:106","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (!(file2.isDirectory())) {\n        {\n            if (file2 == null) {\n                {\n                    if (file1.isDirectory()) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            java.lang.String java.lang.String = org.apache.commons.io.FilenameUtils.getExtension(file1.getName());\n                            java.lang.String java.lang.String = org.apache.commons.io.FilenameUtils.getExtension(file2.getName());\n                            return org.apache.commons.io.IOCase.checkCompareTo(suffix1, suffix2);\n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"file2"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1190","type":"CtBinaryOperatorImpl","sourcecode":"srcDir == null"},"failures":[],"tindex":"90c82f03-2e92-11e6-a659-7fc1945f60f0","method":{"position":"org.apache.commons.io.FileUtils:2620","type":"CtMethodImpl","sourcecode":"public static boolean isFileOlder(java.io.File file, java.io.File reference) {\n    if (file == null) {\n        {\n            if (reference == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified reference file\");\n            } \n            if (!(reference.exists())) {\n                throw new java.lang.IllegalArgumentException(((\"The reference file '\" + reference) + \"' doesn't exist\"));\n            } \n            return org.apache.commons.io.FileUtils.isFileOlder(file, reference.lastModified());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2554","type":"CtBinaryOperatorImpl","sourcecode":"reference == null"},"failures":[],"tindex":"90c85614-2e92-11e6-a659-093f0ed37136","method":{"position":"org.apache.commons.io.FileUtils:2292","type":"CtMethodImpl","sourcecode":"public static void forceDeleteOnExit(java.io.File file) throws java.io.IOException {\n    if (file == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file.isDirectory()) {\n                org.apache.commons.io.FileUtils.deleteDirectoryOnExit(file);\n            } else {\n                file.deleteOnExit();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reference":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:515","type":"CtBinaryOperatorImpl","sourcecode":"(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16)) && ((xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16BE)) || (xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_16LE)))"},"failures":[],"tindex":"90c85615-2e92-11e6-a659-21891c5cb6f7","method":{"position":"org.apache.commons.io.FileUtils:786","type":"CtMethodImpl","sourcecode":"public static boolean contentEqualsIgnoreEOL(java.io.File file1, java.io.File file2, java.lang.String charsetName) throws java.io.IOException {\n    if ((charsetName.equals(charsetName)) && ((charsetName.equals(charsetName)) || (xmlGuessEnc.equals(charsetName)))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            boolean boolean = file1.exists();\n            if (file1Exists != (file2.exists())) {\n                return false;\n            } \n            if (!file1Exists) {\n                return true;\n            } \n            if ((file1.isDirectory()) || (file2.isDirectory())) {\n                throw new java.io.IOException(\"Can't compare directories, only files\");\n            } \n            if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {\n                return true;\n            } \n            java.io.Reader java.io.Reader = null;\n            java.io.Reader java.io.Reader = null;\n            try {\n                if (charsetName == null) {\n                    input1 = new java.io.InputStreamReader(new java.io.FileInputStream(file1));\n                    input2 = new java.io.InputStreamReader(new java.io.FileInputStream(file2));\n                } else {\n                    input1 = new java.io.InputStreamReader(new java.io.FileInputStream(file1) , charsetName);\n                    input2 = new java.io.InputStreamReader(new java.io.FileInputStream(file2) , charsetName);\n                }\n                return org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(input1, input2);\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(input1);\n                org.apache.commons.io.IOUtils.closeQuietly(input2);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.input.XmlStreamReader.UTF_16LE":"charsetName","xmlEnc":"charsetName","org.apache.commons.io.input.XmlStreamReader.UTF_16":"charsetName","xmlGuessEnc":"charsetName","org.apache.commons.io.input.XmlStreamReader.UTF_16BE":"charsetName"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:658","type":"CtBinaryOperatorImpl","sourcecode":"i >= 0"},"failures":[],"tindex":"90c87d26-2e92-11e6-a659-933cabfaf500","method":{"position":"org.apache.commons.io.output.ProxyWriter:74","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence csq, int start, int end) throws java.io.IOException {\n    if (start >= 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                beforeWrite((end - start));\n                java.io.Writer.append(csq, start, end);\n                afterWrite((end - start));\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n            return org.apache.commons.io.output.ProxyWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"start"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1367","type":"CtBinaryOperatorImpl","sourcecode":"(srcDir.exists()) == false"},"failures":[],"tindex":"90c8a437-2e92-11e6-a659-3b3aebe6a09b","method":{"position":"org.apache.commons.io.FileUtils:2091","type":"CtMethodImpl","sourcecode":"public static void writeByteArrayToFile(java.io.File file, byte[] data, boolean append) throws java.io.IOException {\n    if ((file.exists()) == false) {\n        {\n            java.io.OutputStream java.io.OutputStream = null;\n            try {\n                out = org.apache.commons.io.FileUtils.openOutputStream(file, append);\n                out.write(data);\n                out.close();\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(out);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.HexDump:103","type":"CtBinaryOperatorImpl","sourcecode":"((data[(k + j)]) >= ' ') && ((data[(k + j)]) < 127)"},"failures":[],"tindex":"90c8cb48-2e92-11e6-a659-d5b11eebee1b","method":{"position":"org.apache.commons.io.output.WriterOutputStream:209","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b, int off, int len) throws java.io.IOException {\n    if (((b[(len + off)]) >= ' ') && ((data[(k + j)]) < 127)) {\n        {\n            while (len > 0) {\n                int int = java.lang.Math.min(len, java.nio.ByteBuffer.remaining());\n                java.nio.ByteBuffer.put(b, off, c);\n                processInput(false);\n                len -= c;\n                off += c;\n            }\n            if (boolean) {\n                flushOutput();\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"b","j":"off","k":"len"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:192","type":"CtBinaryOperatorImpl","sourcecode":"directory == null"},"failures":[],"tindex":"90c8cb49-2e92-11e6-a659-7fd39eb77a41","method":{"position":"org.apache.commons.io.FileUtils:1259","type":"CtMethodImpl","sourcecode":"public static void copyDirectory(java.io.File srcDir, java.io.File destDir, boolean preserveFileDate) throws java.io.IOException {\n    if (srcDir == null) {\n        {\n            org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir, null, preserveFileDate);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"srcDir"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:352","type":"CtInvocationImpl","sourcecode":"file.exists()"},"failures":[],"tindex":"90c8f25a-2e92-11e6-a659-335aab2ea9f4","method":{"position":"org.apache.commons.io.filefilter.AgeFileFilter:142","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.exists()) {\n        {\n            boolean boolean = org.apache.commons.io.FileUtils.isFileNewer(file, long);\n            return boolean ? !newer : newer;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:211","type":"CtBinaryOperatorImpl","sourcecode":"(memoryOutputStream) != null"},"failures":[],"tindex":"90c8f25b-2e92-11e6-a659-b5dd461f45bb","method":{"position":"org.apache.commons.io.output.DemuxOutputStream:39","type":"CtMethodImpl","sourcecode":"public java.io.OutputStream bindStream(java.io.OutputStream output) {\n    if (output != null) {\n        {\n            java.io.OutputStream java.io.OutputStream = java.lang.InheritableThreadLocal<java.io.OutputStream>.get();\n            java.lang.InheritableThreadLocal<java.io.OutputStream>.set(output);\n            return stream;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"memoryOutputStream":"output"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.NullInputStream:235","type":"CtBinaryOperatorImpl","sourcecode":"(position) > (size)"},"failures":[],"tindex":"90c9196c-2e92-11e6-a659-c5e0127cbca3","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:718","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[] magicNumber, long offset) {\n    if (offset > offset) {\n        {\n            return new org.apache.commons.io.filefilter.MagicNumberFileFilter(magicNumber , offset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"offset","position":"offset"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.AndFileFilter:76","type":"CtBinaryOperatorImpl","sourcecode":"(filter1 == null) || (filter2 == null)"},"failures":[],"tindex":"90c9196d-2e92-11e6-a659-15841b1ffa2b","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:774","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if ((filter == null) || (filter == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filter == null) {\n                return org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter;\n            } \n            return new org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter , filter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"filter","filter2":"filter"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1193","type":"CtBinaryOperatorImpl","sourcecode":"(srcDir.exists()) && ((srcDir.isDirectory()) == false)"},"failures":[],"tindex":"90c9407e-2e92-11e6-a659-5133ef4e9fd2","method":{"position":"org.apache.commons.io.FileUtils:290","type":"CtMethodImpl","sourcecode":"public static java.io.FileInputStream openInputStream(java.io.File file) throws java.io.IOException {\n    if ((file.exists()) && ((srcDir.isDirectory()) == false)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file.exists()) {\n                if (file.isDirectory()) {\n                    throw new java.io.IOException(((\"File '\" + file) + \"' exists but is a directory\"));\n                } \n                if ((file.canRead()) == false) {\n                    throw new java.io.IOException(((\"File '\" + file) + \"' cannot be read\"));\n                } \n            } else {\n                throw new java.io.FileNotFoundException(((\"File '\" + file) + \"' does not exist\"));\n            }\n            return new java.io.FileInputStream(file);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:554","type":"CtBinaryOperatorImpl","sourcecode":"((xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32)))) && (!(xmlEnc.equals(bomEnc)))"},"failures":[],"tindex":"90c9678f-2e92-11e6-a659-bbf274fe342e","method":{"position":"org.apache.commons.io.IOUtils:1616","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void write(java.lang.StringBuffer data, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (((encoding != null) && (!(xmlEnc.equals(encoding)))) && (!(xmlEnc.equals(encoding)))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data != null) {\n                output.write(data.toString().getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"encoding","xmlEnc":"encoding","org.apache.commons.io.input.XmlStreamReader.UTF_32":"encoding"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1659","type":"CtBinaryOperatorImpl","sourcecode":"lineEnding == null"},"failures":[],"tindex":"90c96790-2e92-11e6-a659-ab387974a1e9","method":{"position":"org.apache.commons.io.FilenameUtils:347","type":"CtMethodImpl","sourcecode":"private static java.lang.String doNormalize(java.lang.String filename, char separator, boolean keepSeparator) {\n    if (filename == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = filename.length();\n            if (size == 0) {\n                return filename;\n            } \n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\n            if (prefix < 0) {\n                return null;\n            } \n            char[] char[] = new char[size + 2];\n            filename.getChars(0, filename.length(), array, 0);\n            char char = separator == (org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char) ? org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char : org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char;\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if ((array[i]) == otherSeparator) {\n                    array[i] = separator;\n                } \n            }\n            boolean boolean = true;\n            if ((array[(size - 1)]) != separator) {\n                array[(size++)] = separator;\n                lastIsDirectory = false;\n            } \n            for (int int = prefix + 1 ; i < size ; i++) {\n                if (((array[i]) == separator) && ((array[(i - 1)]) == separator)) {\n                    java.lang.System.arraycopy(array, i, array, (i - 1), (size - i));\n                    size--;\n                    i--;\n                } \n            }\n            for (int int = prefix + 1 ; i < size ; i++) {\n                if ((((array[i]) == separator) && ((array[(i - 1)]) == '.')) && ((i == (prefix + 1)) || ((array[(i - 2)]) == separator))) {\n                    if (i == (size - 1)) {\n                        lastIsDirectory = true;\n                    } \n                    java.lang.System.arraycopy(array, (i + 1), array, (i - 1), (size - i));\n                    size -= 2;\n                    i--;\n                } \n            }\n            outer : for (int int = prefix + 2 ; i < size ; i++) {\n                if (((((array[i]) == separator) && ((array[(i - 1)]) == '.')) && ((array[(i - 2)]) == '.')) && ((i == (prefix + 2)) || ((array[(i - 3)]) == separator))) {\n                    if (i == (prefix + 2)) {\n                        return null;\n                    } \n                    if (i == (size - 1)) {\n                        lastIsDirectory = true;\n                    } \n                    int int;\n                    for (j = i - 4 ; j >= prefix ; j--) {\n                        if ((array[j]) == separator) {\n                            java.lang.System.arraycopy(array, (i + 1), array, (j + 1), (size - i));\n                            size -= i - j;\n                            i = j + 1;\n                            continue outer;\n                        } \n                    }\n                    java.lang.System.arraycopy(array, (i + 1), array, prefix, (size - i));\n                    size -= (i + 1) - prefix;\n                    i = prefix + 1;\n                } \n            }\n            if (size <= 0) {\n                return \"\";\n            } \n            if (size <= prefix) {\n                return new java.lang.String(array , 0 , size);\n            } \n            if (lastIsDirectory && keepSeparator) {\n                return new java.lang.String(array , 0 , size);\n            } \n            return new java.lang.String(array , 0 , (size - 1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineEnding":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:71","type":"CtBinaryOperatorImpl","sourcecode":"reader instanceof java.io.BufferedReader"},"failures":[],"tindex":"90c9b5b1-2e92-11e6-a659-43fca31c9700","method":{"position":"org.apache.commons.io.IOUtils:2214","type":"CtMethodImpl","sourcecode":"public static boolean contentEquals(java.io.Reader input1, java.io.Reader input2) throws java.io.IOException {\n    if (input2 instanceof java.io.BufferedReader) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (input1 instanceof java.io.BufferedReader) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    input1 = org.apache.commons.io.IOUtils.toBufferedReader(input1);\n                    input2 = org.apache.commons.io.IOUtils.toBufferedReader(input2);\n                    int int = input1.read();\n                    while ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) != ch) {\n                        int int = input2.read();\n                        if (ch != ch2) {\n                            return false;\n                        } \n                        ch = input1.read();\n                    }\n                    int int = input2.read();\n                    return ch2 == (org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input1"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.SwappedDataInputStream:142","type":"CtBinaryOperatorImpl","sourcecode":"(-1) == count"},"failures":[],"tindex":"90c9dcc2-2e92-11e6-a659-bd2dd0512271","method":{"position":"org.apache.commons.io.output.ProxyWriter:154","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr, int st, int len) throws java.io.IOException {\n    if ((-1) == len) {\n        {\n            try {\n                beforeWrite(len);\n                java.io.Writer.write(chr, st, len);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"len"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:443","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"90ca03d3-2e92-11e6-a659-87d135202f07","method":{"position":"org.apache.commons.io.FileUtils:682","type":"CtMethodImpl","sourcecode":"public static java.util.Collection<java.io.File> listFiles(java.io.File directory, java.lang.String[] extensions, boolean recursive) {\n    if (!(directory.exists())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter;\n            if (extensions == null) {\n                filter = org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.IOFileFilter;\n            } else {\n                java.lang.String[] java.lang.String[] = org.apache.commons.io.FileUtils.toSuffixes(extensions);\n                filter = new org.apache.commons.io.filefilter.SuffixFileFilter(suffixes);\n            }\n            return org.apache.commons.io.FileUtils.listFiles(directory, filter, (recursive ? org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.IOFileFilter : org.apache.commons.io.filefilter.FalseFileFilter.org.apache.commons.io.filefilter.FalseFileFilter.org.apache.commons.io.filefilter.IOFileFilter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"directory"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:226","type":"CtBinaryOperatorImpl","sourcecode":"(byteOrderMark) != null"},"failures":[],"tindex":"90ca03d4-2e92-11e6-a659-f553ab807f07","method":{"position":"org.apache.commons.io.input.BOMInputStream:287","type":"CtMethodImpl","sourcecode":"private boolean matches(org.apache.commons.io.ByteOrderMark bom) {\n    if (bom != null) {\n        {\n            for (int int = 0 ; i < (bom.length()) ; i++) {\n                if ((bom.get(i)) != (int[][i])) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"byteOrderMark":"bom"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.AndFileFilter:76","type":"CtBinaryOperatorImpl","sourcecode":"(filter1 == null) || (filter2 == null)"},"failures":[],"tindex":"90ca2ae5-2e92-11e6-a659-51910f5bb5a6","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:390","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter1, org.apache.commons.io.filefilter.IOFileFilter filter2) {\n    if ((filter1 == null) || (filter1 == null)) {\n        {\n            return new org.apache.commons.io.filefilter.AndFileFilter(filter1 , filter2);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"filter1","filter2":"filter1"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2791","type":"CtUnaryOperatorImpl","sourcecode":"!(destDir.isDirectory())"},"failures":[],"tindex":"90ca2ae6-2e92-11e6-a659-796f4cf50391","method":{"position":"org.apache.commons.io.comparator.ExtensionFileComparator:106","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (!(file2.isDirectory())) {\n        {\n            if (file2 == null) {\n                {\n                    if (file1.isDirectory()) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            java.lang.String java.lang.String = org.apache.commons.io.FilenameUtils.getExtension(file1.getName());\n                            java.lang.String java.lang.String = org.apache.commons.io.FilenameUtils.getExtension(file2.getName());\n                            return org.apache.commons.io.IOCase.checkCompareTo(suffix1, suffix2);\n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file2"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.ByteOrderMark:174","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"90ca51f7-2e92-11e6-a659-15704119495b","method":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:329","type":"CtMethodImpl","sourcecode":"private int getNewLineMatchByteCount(byte[] data, int i) {\n    if (i > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (byte[] byte[] : byte[][]) {\n                boolean boolean = true;\n                for (int int = (newLineSequence.int) - 1 ; j >= 0 ; j--) {\n                    int int = (i + j) - ((newLineSequence.int) - 1);\n                    match &= (k >= 0) && ((data[k]) == (newLineSequence[j]));\n                }\n                if (match) {\n                    return newLineSequence.int;\n                } \n            }\n            return 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"i"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:303","type":"CtBinaryOperatorImpl","sourcecode":"remaining == 0"},"failures":[],"tindex":"90ca7908-2e92-11e6-a659-a539a6b568fc","method":{"position":"org.apache.commons.io.input.ProxyInputStream:200","type":"CtMethodImpl","sourcecode":"protected void beforeRead(int n) throws java.io.IOException {\n    if (n == 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"remaining":"n"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2182","type":"CtUnaryOperatorImpl","sourcecode":"!(input2 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"90ca7909-2e92-11e6-a659-cf63aa54998c","method":{"position":"org.apache.commons.io.CopyUtils:190","type":"CtMethodImpl","sourcecode":"public static int copy(java.io.InputStream input, java.io.OutputStream output) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        {\n            byte[] byte[] = new byte[org.apache.commons.io.CopyUtils.org.apache.commons.io.CopyUtils.int];\n            int int = 0;\n            int int = 0;\n            while ((-1) != (n = input.read(buffer))) {\n                output.write(buffer, 0, n);\n                count += n;\n            }\n            return count;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input2":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:87","type":"CtBinaryOperatorImpl","sourcecode":"(((osName.indexOf(\"sun os\")) != (-1)) || ((osName.indexOf(\"sunos\")) != (-1))) || ((osName.indexOf(\"solaris\")) != (-1))"},"failures":[],"tindex":"90caa01a-2e92-11e6-a659-9344c802f3a3","method":{"position":"org.apache.commons.io.IOCase:241","type":"CtMethodImpl","sourcecode":"public boolean checkRegionMatches(java.lang.String str, int strStartIndex, java.lang.String search) {\n    if ((((search.indexOf(\"sun os\")) != (-1)) || ((osName.indexOf(\"sunos\")) != (-1))) || ((osName.indexOf(\"solaris\")) != (-1))) {\n        {\n            return str.regionMatches((!(boolean)), strStartIndex, search, 0, search.length());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"osName":"search"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceInputStream:195","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.io.input.CharSequenceInputStream.this.mark) != (-1)"},"failures":[],"tindex":"90caa01b-2e92-11e6-a659-23f131ec9b9d","method":{"position":"org.apache.commons.io.output.LockableFileWriter:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int idx) throws java.io.IOException {\n    if (idx != (-1)) {\n        {\n            java.io.Writer.write(idx);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mark":"idx"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:524","type":"CtBinaryOperatorImpl","sourcecode":"(xmlGuessEnc != null) && (!(xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_8)))"},"failures":[],"tindex":"90cac72c-2e92-11e6-a659-45066c894a27","method":{"position":"org.apache.commons.io.output.ProxyWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str) throws java.io.IOException {\n    if ((str != null) && (!(xmlGuessEnc.equals(str)))) {\n        {\n            try {\n                int int = 0;\n                if (str != null) {\n                    len = str.length();\n                } \n                beforeWrite(len);\n                java.io.Writer.write(str);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.input.XmlStreamReader.UTF_8":"str","xmlGuessEnc":"str"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2893","type":"CtBinaryOperatorImpl","sourcecode":"destDir == null"},"failures":[],"tindex":"90caee3d-2e92-11e6-a659-d585953dcc3a","method":{"position":"org.apache.commons.io.filefilter.DirectoryFileFilter:69","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file == null) {\n        {\n            return file.isDirectory();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.EOFException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:86","type":"CtBinaryOperatorImpl","sourcecode":"size < 0"},"failures":[],"tindex":"90caee3e-2e92-11e6-a659-5d45734e146c","method":{"position":"org.apache.commons.io.input.SwappedDataInputStream:244","type":"CtMethodImpl","sourcecode":"public int skipBytes(int count) throws java.io.EOFException, java.io.IOException {\n    if (count < 0) {\n        {\n            return ((int)(java.io.InputStream.skip(count)));\n        }\n    } else {\n        throw new java.io.EOFException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"count"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2331","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[],"tindex":"90caee3f-2e92-11e6-a659-0774cd0b3366","method":{"position":"org.apache.commons.io.EndianUtils:78","type":"CtMethodImpl","sourcecode":"public static long swapLong(long value) {\n    if (value < 0) {\n        {\n            return (((((((((value >> 0) & 255) << 56) + (((value >> 8) & 255) << 48)) + (((value >> 16) & 255) << 40)) + (((value >> 24) & 255) << 32)) + (((value >> 32) & 255) << 24)) + (((value >> 40) & 255) << 16)) + (((value >> 48) & 255) << 8)) + (((value >> 56) & 255) << 0);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullReader:272","type":"CtBinaryOperatorImpl","sourcecode":"(position) > (size)"},"failures":[],"tindex":"90cb1550-2e92-11e6-a659-f7e627adfd8f","method":{"position":"org.apache.commons.io.input.CharSequenceInputStream:165","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long n) throws java.io.IOException {\n    if (n > n) {\n        {\n            int int = 0;\n            while ((n > 0) && (org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.CharBuffer.hasRemaining())) {\n                org.apache.commons.io.input.CharSequenceInputStream.this.java.nio.CharBuffer.get();\n                n--;\n                skipped++;\n            }\n            return skipped;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"n","position":"n"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2781","type":"CtBinaryOperatorImpl","sourcecode":"destDir == null"},"failures":[],"tindex":"90cb1551-2e92-11e6-a659-5fa83fa91e30","method":{"position":"org.apache.commons.io.FileUtils:325","type":"CtMethodImpl","sourcecode":"public static java.io.FileOutputStream openOutputStream(java.io.File file) throws java.io.IOException {\n    if (file == null) {\n        {\n            return org.apache.commons.io.FileUtils.openOutputStream(file, false);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1534","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.io.FileUtils.isSymlink(directory))"},"failures":[],"tindex":"90cb3c62-2e92-11e6-a659-27e0a940fa04","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:428","type":"CtMethodImpl","sourcecode":"private java.io.File[] listFiles(java.io.File file) {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n        {\n            java.io.File[] java.io.File[] = null;\n            if (file.isDirectory()) {\n                children = (java.io.FileFilter) == null ? file.listFiles() : file.listFiles(java.io.FileFilter);\n            } \n            if (children == null) {\n                children = org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.io.File[];\n            } \n            if (((java.util.Comparator<java.io.File>) != null) && ((children.int) > 1)) {\n                java.util.Arrays.sort(children, java.util.Comparator<java.io.File>);\n            } \n            return children;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:110","type":"CtInvocationImpl","sourcecode":"file1.isDirectory()"},"failures":[],"tindex":"90cb3c63-2e92-11e6-a659-2743a9abc0fa","method":{"position":"org.apache.commons.io.FileUtils:1747","type":"CtMethodImpl","sourcecode":"public static java.lang.String readFileToString(java.io.File file) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            if ((file.exists()) && (destFile.isDirectory())) {\n                {\n                    return org.apache.commons.io.FileUtils.readFileToString(file, java.nio.charset.Charset.defaultCharset());\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file1":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:136","type":"CtBinaryOperatorImpl","sourcecode":"(threadFactory) != null"},"failures":[],"tindex":"90cb6374-2e92-11e6-a659-b1e568247f44","method":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:86","type":"CtMethodImpl","sourcecode":"public synchronized void setThreadFactory(java.util.concurrent.ThreadFactory threadFactory) {\n    if (threadFactory != null) {\n        {\n            org.apache.commons.io.monitor.FileAlterationMonitor.this.java.util.concurrent.ThreadFactory = threadFactory;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"threadFactory":"threadFactory"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:71","type":"CtBinaryOperatorImpl","sourcecode":"reader instanceof java.io.BufferedReader"},"failures":[],"tindex":"90cb6375-2e92-11e6-a659-e78f579d0ee0","method":{"position":"org.apache.commons.io.IOUtils:2214","type":"CtMethodImpl","sourcecode":"public static boolean contentEquals(java.io.Reader input1, java.io.Reader input2) throws java.io.IOException {\n    if (input2 instanceof java.io.BufferedReader) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (input1 instanceof java.io.BufferedReader) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    input1 = org.apache.commons.io.IOUtils.toBufferedReader(input1);\n                    input2 = org.apache.commons.io.IOUtils.toBufferedReader(input2);\n                    int int = input1.read();\n                    while ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) != ch) {\n                        int int = input2.read();\n                        if (ch != ch2) {\n                            return false;\n                        } \n                        ch = input1.read();\n                    }\n                    int int = input2.read();\n                    return ch2 == (org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input2"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2644","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[],"tindex":"90cb8a86-2e92-11e6-a659-79e806a60383","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:555","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date cutoffDate) {\n    if (cutoffDate == null) {\n        {\n            return new org.apache.commons.io.filefilter.AgeFileFilter(cutoffDate);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"cutoffDate"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:86","type":"CtBinaryOperatorImpl","sourcecode":"size < 0"},"failures":[],"tindex":"90cb8a87-2e92-11e6-a659-073e0de924c8","method":{"position":"org.apache.commons.io.EndianUtils:239","type":"CtMethodImpl","sourcecode":"public static void writeSwappedFloat(byte[] data, int offset, float value) {\n    if (offset < 0) {\n        {\n            org.apache.commons.io.EndianUtils.writeSwappedInteger(data, offset, java.lang.Float.floatToIntBits(value));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"offset"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:600","type":"CtInvocationImpl","sourcecode":"directory.isDirectory()"},"failures":[],"tindex":"90cbb198-2e92-11e6-a659-cf53dd348c11","method":{"position":"org.apache.commons.io.comparator.DefaultFileComparator:63","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (file1.isDirectory()) {\n        {\n            return file1.compareTo(file2);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileCleaningTracker:121","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"90cbb199-2e92-11e6-a659-b1eaf699ccb5","method":{"position":"org.apache.commons.io.FileUtils:1733","type":"CtMethodImpl","sourcecode":"public static java.lang.String readFileToString(java.io.File file, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.FileUtils.readFileToString(file, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"encoding"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2367","type":"CtInvocationImpl","sourcecode":"directory.exists()"},"failures":[],"tindex":"90cbd8aa-2e92-11e6-a659-8b20fee7f8a5","method":{"position":"org.apache.commons.io.filefilter.CanWriteFileFilter:77","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.exists()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return file.canWrite();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:620","type":"CtBinaryOperatorImpl","sourcecode":"(bomEnc != null) && (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.UTF_16))"},"failures":[],"tindex":"90cbd8ab-2e92-11e6-a659-ad9b65ac7b44","method":{"position":"org.apache.commons.io.FilenameUtils:1233","type":"CtMethodImpl","sourcecode":"public static boolean wildcardMatch(java.lang.String filename, java.lang.String wildcardMatcher) {\n    if ((wildcardMatcher != null) && (bomEnc.startsWith(wildcardMatcher))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.wildcardMatch(filename, wildcardMatcher, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"wildcardMatcher","org.apache.commons.io.input.XmlStreamReader.UTF_16":"wildcardMatcher"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1000","type":"CtBinaryOperatorImpl","sourcecode":"index == (-1)"},"failures":[],"tindex":"90cbd8ac-2e92-11e6-a659-7d4a664e0c61","method":{"position":"org.apache.commons.io.output.ThresholdingOutputStream:126","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b, int off, int len) throws java.io.IOException {\n    if (off == (-1)) {\n        {\n            checkThreshold(len);\n            getStream().write(b, off, len);\n            long += len;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"off"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.ByteOrderMark:70","type":"CtBinaryOperatorImpl","sourcecode":"(charsetName == null) || ((charsetName.length()) == 0)"},"failures":[],"tindex":"90cbffbd-2e92-11e6-a659-0f4b7c72b920","method":{"position":"org.apache.commons.io.input.XmlStreamReader:704","type":"CtMethodImpl","sourcecode":"private static java.lang.String getXmlProlog(java.io.InputStream is, java.lang.String guessedEnc) throws java.io.IOException {\n    if ((guessedEnc == null) || ((charsetName.length()) == 0)) {\n        {\n            java.lang.String java.lang.String = null;\n            if (guessedEnc != null) {\n                byte[] byte[] = new byte[org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int];\n                is.mark(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int);\n                int int = 0;\n                int int = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int;\n                int int = is.read(bytes, offset, max);\n                int int = -1;\n                java.lang.String java.lang.String = null;\n                while (((c != (-1)) && (firstGT == (-1))) && (offset < (org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int))) {\n                    offset += c;\n                    max -= c;\n                    c = is.read(bytes, offset, max);\n                    xmlProlog = new java.lang.String(bytes , 0 , offset , guessedEnc);\n                    firstGT = xmlProlog.indexOf('>');\n                }\n                if (firstGT == (-1)) {\n                    if (c == (-1)) {\n                        throw new java.io.IOException(\"Unexpected end of XML stream\");\n                    } else {\n                        throw new java.io.IOException(((\"XML prolog or ROOT element not found on first \" + offset) + \" bytes\"));\n                    }\n                } \n                int int = offset;\n                if (bytesRead > 0) {\n                    is.reset();\n                    java.io.BufferedReader java.io.BufferedReader = new java.io.BufferedReader(new java.io.StringReader(xmlProlog.substring(0, (firstGT + 1))));\n                    java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer();\n                    java.lang.String java.lang.String = bReader.readLine();\n                    while (line != null) {\n                        prolog.append(line);\n                        line = bReader.readLine();\n                    }\n                    java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.util.regex.Pattern.matcher(prolog);\n                    if (m.find()) {\n                        encoding = m.group(1).toUpperCase();\n                        encoding = encoding.substring(1, ((encoding.length()) - 1));\n                    } \n                } \n            } \n            return encoding;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsetName":"guessedEnc"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileCleaningTracker:91","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"90cc26ce-2e92-11e6-a659-0b127282ef18","method":{"position":"org.apache.commons.io.DirectoryWalker:434","type":"CtMethodImpl","sourcecode":"protected boolean handleIsCancelled(java.io.File file, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (file == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:71","type":"CtBinaryOperatorImpl","sourcecode":"reader instanceof java.io.BufferedReader"},"failures":[],"tindex":"90cc4ddf-2e92-11e6-a659-9b63bb62c9ec","method":{"position":"org.apache.commons.io.IOUtils:1998","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.Reader input, java.io.Writer output, char[] buffer) throws java.io.IOException {\n    if (input instanceof java.io.BufferedReader) {\n        throw new java.io.IOException();\n    } else {\n        {\n            long long = 0;\n            int int = 0;\n            while ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) != (n = input.read(buffer))) {\n                output.write(buffer, 0, n);\n                count += n;\n            }\n            return count;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceInputStream:114","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"90cc4de0-2e92-11e6-a659-d999e4b6eff9","method":{"position":"org.apache.commons.io.input.NullInputStream:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] bytes) throws java.io.IOException {\n    if (bytes == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return read(bytes, 0, bytes.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOCase:147","type":"CtBinaryOperatorImpl","sourcecode":"(str1 == null) || (str2 == null)"},"failures":[],"tindex":"90cc74f1-2e92-11e6-a659-7f96c6b715fc","method":{"position":"org.apache.commons.io.FilenameUtils:240","type":"CtMethodImpl","sourcecode":"public static java.lang.String normalize(java.lang.String filename, boolean unixSeparator) {\n    if ((filename == null) || (filename == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            char char = unixSeparator ? org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char : org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char;\n            return org.apache.commons.io.FilenameUtils.doNormalize(filename, separator, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str1":"filename","str2":"filename"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1526","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"90cc74f2-2e92-11e6-a659-77fcf47a8513","method":{"position":"org.apache.commons.io.FilenameUtils:749","type":"CtMethodImpl","sourcecode":"public static java.lang.String getPrefix(java.lang.String filename) {\n    if (filename != null) {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\n            if (len < 0) {\n                return null;\n            } \n            if (len > (filename.length())) {\n                return filename + (org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n            } \n            return filename.substring(0, len);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"filename"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:430","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"90cc9c03-2e92-11e6-a659-f758294bfa56","method":{"position":"org.apache.commons.io.FileDeleteStrategy:151","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected boolean doDelete(java.io.File fileToDelete) throws java.io.IOException {\n    if (fileToDelete.isDirectory()) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.forceDelete(fileToDelete);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"fileToDelete"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1659","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"90cc9c04-2e92-11e6-a659-b5b1281e83a8","method":{"position":"org.apache.commons.io.FileCleaner:73","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void track(java.io.File file, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if (null != marker) {\n        {\n            org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaningTracker.track(file, marker, deleteStrategy);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"marker"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"90cc9c05-2e92-11e6-a659-9511cd3b7341","method":{"position":"org.apache.commons.io.IOUtils:192","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.Reader input) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(input)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1605","type":"CtBinaryOperatorImpl","sourcecode":"directory == null"},"failures":[],"tindex":"90ccc316-2e92-11e6-a659-b343081a8ae9","method":{"position":"org.apache.commons.io.FileUtils:2325","type":"CtMethodImpl","sourcecode":"private static void cleanDirectoryOnExit(java.io.File directory) throws java.io.IOException {\n    if (directory == null) {\n        {\n            if (!(directory.exists())) {\n                java.lang.String java.lang.String = directory + \" does not exist\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            if (!(directory.isDirectory())) {\n                java.lang.String java.lang.String = directory + \" is not a directory\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            java.io.File[] java.io.File[] = directory.listFiles();\n            if (files == null) {\n                throw new java.io.IOException((\"Failed to list contents of \" + directory));\n            } \n            java.io.IOException java.io.IOException = null;\n            for (java.io.File java.io.File : files) {\n                try {\n                    org.apache.commons.io.FileUtils.forceDeleteOnExit(file);\n                } catch (java.io.IOException ioe) {\n                    exception = ioe;\n                }\n            }\n            if (null != exception) {\n                throw exception;\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:580","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"90ccea27-2e92-11e6-a659-9b9c11de02cb","method":{"position":"org.apache.commons.io.FilenameUtils:1097","type":"CtMethodImpl","sourcecode":"public static boolean equalsNormalizedOnSystem(java.lang.String filename1, java.lang.String filename2) {\n    if (filename2 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename2.equals(filename1)) {\n                {\n                    return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, true, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"filename2"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:259","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"90ccea28-2e92-11e6-a659-29a3873f1110","method":{"position":"org.apache.commons.io.input.XmlStreamReader:759","type":"CtMethodImpl","sourcecode":"static boolean isAppXml(java.lang.String mime) {\n    if (mime == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (mime != null) && ((((mime.equals(\"application/xml\")) || (mime.equals(\"application/xml-dtd\"))) || (mime.equals(\"application/xml-external-parsed-entity\"))) || ((mime.startsWith(\"application/\")) && (mime.endsWith(\"+xml\"))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"mime"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:212","type":"CtBinaryOperatorImpl","sourcecode":"offset < 0"},"failures":[],"tindex":"90ccea29-2e92-11e6-a659-69d37f61f187","method":{"position":"org.apache.commons.io.FileSystemUtils:379","type":"CtMethodImpl","sourcecode":"long freeSpaceUnix(java.lang.String path, boolean kb, boolean posix, long timeout) throws java.io.IOException {\n    if (timeout < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (((path.indexOf('?')) == (-1)) && ((text.indexOf('*')) == (-1))) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((path.length()) == 0) {\n                        throw new java.lang.IllegalArgumentException(\"Path must not be empty\");\n                    } \n                    java.lang.String java.lang.String = \"-\";\n                    if (kb) {\n                        flags += \"k\";\n                    } \n                    if (posix) {\n                        flags += \"P\";\n                    } \n                    java.lang.String[] java.lang.String[] = (flags.length()) > 1 ? new java.lang.String[]{ org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String , flags , path } : new java.lang.String[]{ org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String , path };\n                    java.util.List<java.lang.String> java.util.List<java.lang.String> = performCommand(cmdAttribs, 3, timeout);\n                    if ((lines.size()) < 2) {\n                        throw new java.io.IOException(((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return info as expected \") + \"for path '\") + path) + \"'- response was \") + lines));\n                    } \n                    java.lang.String java.lang.String = lines.get(1);\n                    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(line2 , \" \");\n                    if ((tok.countTokens()) < 4) {\n                        if (((tok.countTokens()) == 1) && ((lines.size()) >= 3)) {\n                            java.lang.String java.lang.String = lines.get(2);\n                            tok = new java.util.StringTokenizer(line3 , \" \");\n                        } else {\n                            throw new java.io.IOException((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return data as expected \") + \"for path '\") + path) + \"'- check path is valid\"));\n                        }\n                    } else {\n                        tok.nextToken();\n                    }\n                    tok.nextToken();\n                    tok.nextToken();\n                    java.lang.String java.lang.String = tok.nextToken();\n                    return parseBytes(freeSpace, path);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"timeout"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:111","type":"CtBinaryOperatorImpl","sourcecode":"(charset == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))"},"failures":[],"tindex":"90cd113a-2e92-11e6-a659-c1e1f369ef4a","method":{"position":"org.apache.commons.io.IOUtils:1905","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if ((encoding == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))) {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding));\n            org.apache.commons.io.IOUtils.copy(in, output);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"encoding"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:90","type":"CtBinaryOperatorImpl","sourcecode":"(totalByteLength) > 0"},"failures":[],"tindex":"90cd384b-2e92-11e6-a659-a3496ed46c2e","method":{"position":"org.apache.commons.io.FileUtils:2662","type":"CtMethodImpl","sourcecode":"public static boolean isFileOlder(java.io.File file, long timeMillis) {\n    if (timeMillis > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified file\");\n            } \n            if (!(file.exists())) {\n                return false;\n            } \n            return (file.lastModified()) < timeMillis;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"totalByteLength":"timeMillis"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:111","type":"CtBinaryOperatorImpl","sourcecode":"(charset == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))"},"failures":[],"tindex":"90cd384c-2e92-11e6-a659-db4b70f6aa02","method":{"position":"org.apache.commons.io.Charsets:66","type":"CtMethodImpl","sourcecode":"public static java.nio.charset.Charset toCharset(java.nio.charset.Charset charset) {\n    if ((charset == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return charset == null ? java.nio.charset.Charset.defaultCharset() : charset;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"charset"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
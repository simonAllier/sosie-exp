{"failureDictionary":{},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2791","type":"CtUnaryOperatorImpl","sourcecode":"!(destDir.isDirectory())"},"failures":[],"tindex":"b8aabbc3-2e7f-11e6-b7ad-1599f107fd8d","method":{"position":"org.apache.commons.io.comparator.ExtensionFileComparator:106","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (!(file2.isDirectory())) {\n        {\n            java.lang.String java.lang.String = org.apache.commons.io.FilenameUtils.getExtension(file1.getName());\n            java.lang.String java.lang.String = org.apache.commons.io.FilenameUtils.getExtension(file2.getName());\n            return org.apache.commons.io.IOCase.checkCompareTo(suffix1, suffix2);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"b8ab7f14-2e7f-11e6-b7ad-ff08a8d66a8e","method":{"position":"org.apache.commons.io.IOUtils:1743","type":"CtMethodImpl","sourcecode":"public static int copy(java.io.InputStream input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            long long = org.apache.commons.io.IOUtils.copyLarge(input, output);\n            if (count > (java.lang.Integer.java.lang.Integer.int)) {\n                return -1;\n            } \n            return ((int)(count));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.CharSequenceInputStream:114","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"b8ab7f15-2e7f-11e6-b7ad-8156feeabd78","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:697","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[] magicNumber) {\n    if (magicNumber == null) {\n        {\n            return new org.apache.commons.io.filefilter.MagicNumberFileFilter(magicNumber);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"magicNumber"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:289","type":"CtBinaryOperatorImpl","sourcecode":"((path.length()) > 0) && ((path.charAt(0)) != '\"')"},"failures":[],"tindex":"b8aba626-2e7f-11e6-b7ad-fdb3681ad5eb","method":{"position":"org.apache.commons.io.FileSystemUtils:435","type":"CtMethodImpl","sourcecode":"long parseBytes(java.lang.String freeSpace, java.lang.String path) throws java.io.IOException {\n    if (((path.length()) > 0) && ((path.charAt(0)) != '\"')) {\n        {\n            try {\n                long long = java.lang.Long.parseLong(freeSpace);\n                if (bytes < 0) {\n                    throw new java.io.IOException((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not find free space in response \") + \"for path '\") + path) + \"'- check path is valid\"));\n                } \n                return bytes;\n            } catch (java.lang.NumberFormatException ex) {\n                throw new org.apache.commons.io.IOExceptionWithCause((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return numeric data as expected \") + \"for path '\") + path) + \"'- check path is valid\") , ex);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:554","type":"CtBinaryOperatorImpl","sourcecode":"((xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32)))) && (!(xmlEnc.equals(bomEnc)))"},"failures":[],"tindex":"b8abcd37-2e7f-11e6-b7ad-8f2d8130993b","method":{"position":"org.apache.commons.io.FilenameUtils:1112","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.String filename1, java.lang.String filename2, boolean normalized, org.apache.commons.io.IOCase caseSensitivity) {\n    if (((filename2 != null) && (!(xmlEnc.equals(filename2)))) && (!(xmlEnc.equals(filename1)))) {\n        {\n            if ((filename1 == null) || (filename2 == null)) {\n                return (filename1 == null) && (filename2 == null);\n            } \n            if (normalized) {\n                filename1 = org.apache.commons.io.FilenameUtils.normalize(filename1);\n                filename2 = org.apache.commons.io.FilenameUtils.normalize(filename2);\n                if ((filename1 == null) || (filename2 == null)) {\n                    throw new java.lang.NullPointerException(\"Error normalizing one or both of the file names\");\n                } \n            } \n            if (caseSensitivity == null) {\n                caseSensitivity = org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase;\n            } \n            return caseSensitivity.checkEquals(filename1, filename2);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"filename1","xmlEnc":"filename2","org.apache.commons.io.input.XmlStreamReader.UTF_32":"filename2"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:356","type":"CtBinaryOperatorImpl","sourcecode":"(file.canWrite()) == false"},"failures":[],"tindex":"b8abf448-2e7f-11e6-b7ad-9bfbd610093b","method":{"position":"org.apache.commons.io.FileUtils:1780","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.File file, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if ((file.canWrite()) == false) {\n        {\n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = org.apache.commons.io.FileUtils.openInputStream(file);\n                return org.apache.commons.io.IOUtils.readLines(in, org.apache.commons.io.Charsets.toCharset(encoding));\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.NullReader:210","type":"CtFieldReadImpl","sourcecode":"eof"},"failures":[],"tindex":"b8abf449-2e7f-11e6-b7ad-bb84c54e9a5a","method":{"position":"org.apache.commons.io.input.BoundedInputStream:227","type":"CtMethodImpl","sourcecode":"public void setPropagateClose(boolean propagateClose) {\n    if (propagateClose) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.input.BoundedInputStream.this.boolean = propagateClose;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"eof":"propagateClose"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1371","type":"CtBinaryOperatorImpl","sourcecode":"((text.indexOf('?')) == (-1)) && ((text.indexOf('*')) == (-1))"},"failures":[],"tindex":"b8ac1b5a-2e7f-11e6-b7ad-d19dc935890a","method":{"position":"org.apache.commons.io.FileUtils:2117","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.lang.String encoding, java.util.Collection<?> lines) throws java.io.IOException {\n    if (((encoding.indexOf('?')) == (-1)) && ((text.indexOf('*')) == (-1))) {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, encoding, lines, null, false);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"encoding"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.NullReader:210","type":"CtFieldReadImpl","sourcecode":"eof"},"failures":[],"tindex":"b8ac426b-2e7f-11e6-b7ad-9beb6099baaa","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:542","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long cutoff, boolean acceptOlder) {\n    if (acceptOlder) {\n        {\n            return new org.apache.commons.io.filefilter.AgeFileFilter(cutoff , acceptOlder);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"eof":"acceptOlder"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"b8ac426c-2e7f-11e6-b7ad-a31e2ddd85c4","method":{"position":"org.apache.commons.io.input.TailerListenerAdapter:61","type":"CtMethodImpl","sourcecode":"public void handle(java.lang.Exception ex) {\n    if (null != ex) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"ex"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2554","type":"CtBinaryOperatorImpl","sourcecode":"reference == null"},"failures":[],"tindex":"b8ac697d-2e7f-11e6-b7ad-17d886c10e13","method":{"position":"org.apache.commons.io.DirectoryWalker:547","type":"CtMethodImpl","sourcecode":"protected void handleRestricted(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (directory == null) {\n        {\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reference":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2744","type":"CtUnaryOperatorImpl","sourcecode":"!(srcDir.isDirectory())"},"failures":[],"tindex":"b8ac697e-2e7f-11e6-b7ad-6f2a789dec78","method":{"position":"org.apache.commons.io.FileDeleteStrategy:151","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected boolean doDelete(java.io.File fileToDelete) throws java.io.IOException {\n    if (!(fileToDelete.isDirectory())) {\n        {\n            org.apache.commons.io.FileUtils.forceDelete(fileToDelete);\n            return true;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"fileToDelete"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2182","type":"CtUnaryOperatorImpl","sourcecode":"!(input2 instanceof java.io.BufferedInputStream)"},"failures":[],"tindex":"b8ac908f-2e7f-11e6-b7ad-ed32a7ffac51","method":{"position":"org.apache.commons.io.IOUtils:985","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.InputStream input, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (!(input instanceof java.io.BufferedInputStream)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding));\n            return org.apache.commons.io.IOUtils.readLines(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input2":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2791","type":"CtUnaryOperatorImpl","sourcecode":"!(destDir.isDirectory())"},"failures":[],"tindex":"b8ac9090-2e7f-11e6-b7ad-5b0ba722c18c","method":{"position":"org.apache.commons.io.filefilter.WildcardFilter:129","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.isDirectory())) {\n        {\n            if (file.isDirectory()) {\n                return false;\n            } \n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.FilenameUtils.wildcardMatch(file.getName(), wildcard)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2868","type":"CtUnaryOperatorImpl","sourcecode":"!(destDir.isDirectory())"},"failures":[],"tindex":"b8acb7a1-2e7f-11e6-b7ad-4fa9148b7566","method":{"position":"org.apache.commons.io.FileUtils:2409","type":"CtMethodImpl","sourcecode":"public static long sizeOf(java.io.File file) {\n    if (!(file.isDirectory())) {\n        {\n            if (!(file.exists())) {\n                java.lang.String java.lang.String = file + \" does not exist\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            if (file.isDirectory()) {\n                return org.apache.commons.io.FileUtils.sizeOfDirectory(file);\n            } else {\n                return file.length();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:152","type":"CtBinaryOperatorImpl","sourcecode":"remaining > 0"},"failures":[],"tindex":"b8acb7a2-2e7f-11e6-b7ad-47e086d35c45","method":{"position":"org.apache.commons.io.input.ProxyReader:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void mark(int idx) throws java.io.IOException {\n    if (idx == (-1)) {\n        {\n            if (idx > 0) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    try {\n                        java.io.Reader.mark(idx);\n                    } catch (java.io.IOException e) {\n                        handleIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"remaining":"idx"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"b8acdeb3-2e7f-11e6-b7ad-013ed2f66ffd","method":{"position":"org.apache.commons.io.IOUtils:245","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.InputStream input) {\n    if (null != input) {\n        {\n            if (null != input) {\n                {\n                    org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(input)));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:115","type":"CtBinaryOperatorImpl","sourcecode":"charset == (java.nio.charset.Charset.forName(\"UTF-16\"))"},"failures":[],"tindex":"b8ad05c4-2e7f-11e6-b7ad-27f10fa8c7c8","method":{"position":"org.apache.commons.io.IOUtils:1101","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.LineIterator lineIterator(java.io.InputStream input, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (encoding == (java.nio.charset.Charset.forName(\"UTF-16\"))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return new org.apache.commons.io.LineIterator(new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"encoding"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"(writer) == null"},"failures":[],"tindex":"b8ad05c5-2e7f-11e6-b7ad-b3b2c1ac61d7","method":{"position":"org.apache.commons.io.IOUtils:1285","type":"CtMethodImpl","sourcecode":"public static void write(byte[] data, java.io.Writer output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (output == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data != null) {\n                output.write(new java.lang.String(data , org.apache.commons.io.Charsets.toCharset(encoding)));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"writer":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2411","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"b8ad2cd6-2e7f-11e6-b7ad-e18afba6e702","method":{"position":"org.apache.commons.io.FileUtils:1005","type":"CtMethodImpl","sourcecode":"public static void copyFileToDirectory(java.io.File srcFile, java.io.File destDir, boolean preserveFileDate) throws java.io.IOException {\n    if (!(destDir.exists())) {\n        {\n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if ((destDir.exists()) && ((destDir.isDirectory()) == false)) {\n                throw new java.lang.IllegalArgumentException(((\"Destination '\" + destDir) + \"' is not a directory\"));\n            } \n            java.io.File java.io.File = new java.io.File(destDir , srcFile.getName());\n            org.apache.commons.io.FileUtils.copyFile(srcFile, destFile, preserveFileDate);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"destDir"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1613","type":"CtBinaryOperatorImpl","sourcecode":"child == null"},"failures":[],"tindex":"b8ad2cd7-2e7f-11e6-b7ad-7170cead6d32","method":{"position":"org.apache.commons.io.FileUtils:976","type":"CtMethodImpl","sourcecode":"public static void copyFileToDirectory(java.io.File srcFile, java.io.File destDir) throws java.io.IOException {\n    if (destDir == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.copyFileToDirectory(srcFile, destDir, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"child":"destDir"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:382","type":"CtFieldReadImpl","sourcecode":"markedAtStart"},"failures":[],"tindex":"b8ad53e8-2e7f-11e6-b7ad-5730baf59c89","method":{"position":"org.apache.commons.io.FileUtils:2062","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, java.lang.String encoding, boolean append) throws java.io.IOException {\n    if (append) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, org.apache.commons.io.Charsets.toCharset(encoding), append);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"markedAtStart":"append"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2928","type":"CtBinaryOperatorImpl","sourcecode":"(file.getParent()) == null"},"failures":[],"tindex":"b8ad53e9-2e7f-11e6-b7ad-6de9215c41de","method":{"position":"org.apache.commons.io.FileUtils:2185","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.lang.String encoding, java.util.Collection<?> lines, java.lang.String lineEnding) throws java.io.IOException {\n    if ((file.getParent()) == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, encoding, lines, lineEnding, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.io.FilenameUtils:1026","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"b8ad7afa-2e7f-11e6-b7ad-9bbd61996fee","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:355","type":"CtMethodImpl","sourcecode":"public java.lang.String toString(java.lang.String enc) throws java.io.UnsupportedEncodingException {\n    if (enc == null) {\n        throw new java.io.UnsupportedEncodingException();\n    } else {\n        {\n            if (enc == null) {\n                {\n                    return new java.lang.String(toByteArray() , enc);\n                }\n            } else {\n                throw new java.io.UnsupportedEncodingException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"enc"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:449","type":"CtBinaryOperatorImpl","sourcecode":"filters == null"},"failures":[],"tindex":"b8ad7afb-2e7f-11e6-b7ad-89f9fbbd9526","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:448","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.io.filefilter.IOFileFilter> toList(org.apache.commons.io.filefilter.IOFileFilter... filters) {\n    if (filters == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filters == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (filters == null) {\n                        throw new java.lang.IllegalArgumentException(\"The filters must not be null\");\n                    } \n                    java.util.List<org.apache.commons.io.filefilter.IOFileFilter> java.util.List<org.apache.commons.io.filefilter.IOFileFilter> = new java.util.ArrayList<org.apache.commons.io.filefilter.IOFileFilter>(filters.int);\n                    for (int int = 0 ; i < (filters.int) ; i++) {\n                        if ((filters[i]) == null) {\n                            throw new java.lang.IllegalArgumentException(((\"The filter[\" + i) + \"] is null\"));\n                        } \n                        list.add(filters[i]);\n                    }\n                    return list;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filters":"filters"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:253","type":"CtBinaryOperatorImpl","sourcecode":"listener != null"},"failures":[],"tindex":"b8ada20c-2e7f-11e6-b7ad-1b69c1d9a76d","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:252","type":"CtMethodImpl","sourcecode":"public void removeListener(final org.apache.commons.io.monitor.FileAlterationListener listener) {\n    if (listener != null) {\n        {\n            if (listener != null) {\n                while (java.util.List<org.apache.commons.io.monitor.FileAlterationListener>.remove(listener)) {\n                }\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"listener":"listener"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.io.IOUtils:1711","type":"CtBinaryOperatorImpl","sourcecode":"lineEnding == null"},"failures":[],"tindex":"b8adc91d-2e7f-11e6-b7ad-e7d09d60b2df","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:355","type":"CtMethodImpl","sourcecode":"public java.lang.String toString(java.lang.String enc) throws java.io.UnsupportedEncodingException {\n    if (enc == null) {\n        throw new java.io.UnsupportedEncodingException();\n    } else {\n        {\n            if (enc == null) {\n                {\n                    return new java.lang.String(toByteArray() , enc);\n                }\n            } else {\n                throw new java.io.UnsupportedEncodingException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineEnding":"enc"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOCase:147","type":"CtBinaryOperatorImpl","sourcecode":"(str1 == null) || (str2 == null)"},"failures":[],"tindex":"b8adc91e-2e7f-11e6-b7ad-2932c558a688","method":{"position":"org.apache.commons.io.IOUtils:583","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.Reader input, java.lang.String encoding) throws java.io.IOException {\n    if ((encoding == null) || (encoding == null)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toByteArray(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str1":"encoding","str2":"encoding"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1659","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"b8adc91f-2e7f-11e6-b7ad-9382d0f76f92","method":{"position":"org.apache.commons.io.output.TaggedOutputStream:87","type":"CtMethodImpl","sourcecode":"public boolean isCauseOf(java.lang.Exception exception) {\n    if (null != exception) {\n        {\n            return org.apache.commons.io.TaggedIOException.isTaggedWith(exception, java.io.Serializable);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"exception"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:680","type":"CtBinaryOperatorImpl","sourcecode":"httpContentType != null"},"failures":[],"tindex":"b8adc920-2e7f-11e6-b7ad-ef2514d179c3","method":{"position":"org.apache.commons.io.input.XmlStreamReader:774","type":"CtMethodImpl","sourcecode":"static boolean isTextXml(java.lang.String mime) {\n    if (mime != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (mime != null) && (((mime.equals(\"text/xml\")) || (mime.equals(\"text/xml-external-parsed-entity\"))) || ((mime.startsWith(\"text/\")) && (mime.endsWith(\"+xml\"))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"mime"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2824","type":"CtInvocationImpl","sourcecode":"destFile.exists()"},"failures":[],"tindex":"b8adf031-2e7f-11e6-b7ad-4b09ccdbc092","method":{"position":"org.apache.commons.io.FileUtils:2149","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.util.Collection<?> lines) throws java.io.IOException {\n    if (file.exists()) {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, null, lines, null, false);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:1325","type":"CtBinaryOperatorImpl","sourcecode":"textIdx == (-1)"},"failures":[],"tindex":"b8adf032-2e7f-11e6-b7ad-5d2f9e496df0","method":{"position":"org.apache.commons.io.input.ProxyReader:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void mark(int idx) throws java.io.IOException {\n    if (idx == (-1)) {\n        {\n            if (idx > 0) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    try {\n                        java.io.Reader.mark(idx);\n                    } catch (java.io.IOException e) {\n                        handleIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"textIdx":"idx"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:111","type":"CtBinaryOperatorImpl","sourcecode":"(charset == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))"},"failures":[],"tindex":"b8adf033-2e7f-11e6-b7ad-1f8a3ca9af36","method":{"position":"org.apache.commons.io.IOUtils:893","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URL url, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if ((encoding == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))) {\n        {\n            java.io.InputStream java.io.InputStream = url.openStream();\n            try {\n                return org.apache.commons.io.IOUtils.toString(inputStream, encoding);\n            } finally {\n                inputStream.close();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"encoding"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"b8ae1744-2e7f-11e6-b7ad-e90f79364a10","method":{"position":"org.apache.commons.io.EndianUtils:365","type":"CtMethodImpl","sourcecode":"public static long readSwappedUnsignedInteger(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            long long = (((value1 & 255) << 0) + ((value2 & 255) << 8)) + ((value3 & 255) << 16);\n            long long = value4 & 255;\n            return (high << 24) + (4294967295L & low);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2286","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.io.IOUtils.SKIP_BYTE_BUFFER) == null"},"failures":[],"tindex":"b8ae1745-2e7f-11e6-b7ad-d92d0ab0f3cd","method":{"position":"org.apache.commons.io.input.ProxyInputStream:74","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] bts) throws java.io.IOException {\n    if (bts == null) {\n        {\n            try {\n                beforeRead((bts != null ? bts.int : 0));\n                int int = java.io.InputStream.read(bts);\n                afterRead(n);\n                return n;\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n                return -1;\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.IOUtils.SKIP_BYTE_BUFFER":"bts"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1190","type":"CtBinaryOperatorImpl","sourcecode":"srcDir == null"},"failures":[],"tindex":"b8ae1746-2e7f-11e6-b7ad-2b436c299bd3","method":{"position":"org.apache.commons.io.comparator.PathFileComparator:102","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (file1 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.IOCase.checkCompareTo(file1.getPath(), file2.getPath());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file1"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:449","type":"CtBinaryOperatorImpl","sourcecode":"filters == null"},"failures":[],"tindex":"b8ae3e57-2e7f-11e6-b7ad-9bf8cfa011ff","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:420","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter... filters) {\n    if (filters == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filters == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (filters == null) {\n                        {\n                            return new org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.toList(filters));\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filters":"filters"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:627","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"b8ae3e58-2e7f-11e6-b7ad-517a69f31e20","method":{"position":"org.apache.commons.io.input.ProxyInputStream:220","type":"CtMethodImpl","sourcecode":"protected void afterRead(int n) throws java.io.IOException {\n    if (n == 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"n"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:90","type":"CtFieldReadImpl","sourcecode":"finished"},"failures":[],"tindex":"b8ae3e59-2e7f-11e6-b7ad-659ad7a75cea","method":{"position":"org.apache.commons.io.monitor.FileEntry:247","type":"CtMethodImpl","sourcecode":"public void setExists(boolean exists) {\n    if (exists) {\n        {\n            org.apache.commons.io.monitor.FileEntry.this.boolean = exists;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"finished":"exists"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"b8ae3e5a-2e7f-11e6-b7ad-9fdf24e9cb26","method":{"position":"org.apache.commons.io.output.ProxyWriter:271","type":"CtMethodImpl","sourcecode":"protected void handleIOException(java.io.IOException e) throws java.io.IOException {\n    if (null != e) {\n        {\n            if (null != e) {\n                {\n                    throw e;\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"e"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:511","type":"CtBinaryOperatorImpl","sourcecode":"bomEnc == null"},"failures":[],"tindex":"b8ae656b-2e7f-11e6-b7ad-9d4727e50e56","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:222","type":"CtMethodImpl","sourcecode":"private static java.io.Writer initWriter(java.io.File file, java.lang.Object encoding, boolean append) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File is missing\");\n            } \n            if (encoding == null) {\n                throw new java.lang.NullPointerException(\"Encoding is missing\");\n            } \n            boolean boolean = file.exists();\n            java.io.OutputStream java.io.OutputStream = null;\n            java.io.Writer java.io.Writer = null;\n            try {\n                stream = new java.io.FileOutputStream(file , append);\n                if (encoding instanceof java.nio.charset.Charset) {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.nio.charset.Charset)(encoding)));\n                } else if (encoding instanceof java.nio.charset.CharsetEncoder) {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.nio.charset.CharsetEncoder)(encoding)));\n                } else {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.lang.String)(encoding)));\n                }\n            } catch (java.io.IOException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            }\n            return writer;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"encoding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2896","type":"CtUnaryOperatorImpl","sourcecode":"!(src.exists())"},"failures":[],"tindex":"b8ae656c-2e7f-11e6-b7ad-5185639c134c","method":{"position":"org.apache.commons.io.FileUtils:2467","type":"CtMethodImpl","sourcecode":"public static long sizeOfDirectory(java.io.File directory) {\n    if (!(directory.exists())) {\n        {\n            org.apache.commons.io.FileUtils.checkDirectory(directory);\n            final java.io.File[] java.io.File[] = directory.listFiles();\n            if (files == null) {\n                return 0L;\n            } \n            long long = 0;\n            for (final java.io.File java.io.File : files) {\n                try {\n                    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n                        size += org.apache.commons.io.FileUtils.sizeOf(file);\n                        if (size < 0) {\n                            break;\n                        } \n                    } \n                } catch (java.io.IOException ioe) {\n                }\n            }\n            return size;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1526","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"b8ae656d-2e7f-11e6-b7ad-1d1ef38dd46e","method":{"position":"org.apache.commons.io.FileUtils:1853","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.LineIterator lineIterator(java.io.File file, java.lang.String encoding) throws java.io.IOException {\n    if (encoding != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = org.apache.commons.io.FileUtils.openInputStream(file);\n                return org.apache.commons.io.IOUtils.lineIterator(in, encoding);\n            } catch (java.io.IOException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n                throw ex;\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n                throw ex;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"encoding"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2286","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.io.IOUtils.SKIP_BYTE_BUFFER) == null"},"failures":[],"tindex":"b8ae8c7e-2e7f-11e6-b7ad-7305e0384d27","method":{"position":"org.apache.commons.io.output.ThresholdingOutputStream:107","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        {\n            checkThreshold(b.int);\n            getStream().write(b);\n            long += b.int;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.IOUtils.SKIP_BYTE_BUFFER":"b"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"b8ae8c7f-2e7f-11e6-b7ad-8946ba821b66","method":{"position":"org.apache.commons.io.IOUtils:738","type":"CtMethodImpl","sourcecode":"public static char[] toCharArray(java.io.Reader input) throws java.io.IOException {\n    if (input == null) {\n        {\n            java.io.CharArrayWriter java.io.CharArrayWriter = new java.io.CharArrayWriter();\n            org.apache.commons.io.IOUtils.copy(input, sw);\n            return sw.toCharArray();\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:72","type":"CtBinaryOperatorImpl","sourcecode":"prefix == null"},"failures":[],"tindex":"b8ae8c80-2e7f-11e6-b7ad-ef191b518b13","method":{"position":"org.apache.commons.io.output.NullWriter:114","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str) {\n    if (str == null) {\n        {\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2791","type":"CtUnaryOperatorImpl","sourcecode":"!(destDir.isDirectory())"},"failures":[],"tindex":"b8aeb391-2e7f-11e6-b7ad-97b853e6eceb","method":{"position":"org.apache.commons.io.FileUtils:2135","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.lang.String encoding, java.util.Collection<?> lines, boolean append) throws java.io.IOException {\n    if (!(file.isDirectory())) {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, encoding, lines, null, append);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullReader:267","type":"CtBinaryOperatorImpl","sourcecode":"(position) == (size)"},"failures":[],"tindex":"b8aeb392-2e7f-11e6-b7ad-af9a04f3b9b7","method":{"position":"org.apache.commons.io.input.CountingInputStream:57","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized long skip(final long length) throws java.io.IOException {\n    if (length == length) {\n        throw new java.io.IOException();\n    } else {\n        {\n            final long long = super.skip(length);\n            org.apache.commons.io.input.CountingInputStream.this.long += skip;\n            return skip;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"length","position":"length"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2747","type":"CtInvocationImpl","sourcecode":"destDir.exists()"},"failures":[],"tindex":"b8aeb393-2e7f-11e6-b7ad-e9af6dead07c","method":{"position":"org.apache.commons.io.filefilter.TrueFileFilter:56","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File file) {\n    if (file.exists()) {\n        {\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:73","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"b8aeb394-2e7f-11e6-b7ad-f73d5f3cf65e","method":{"position":"org.apache.commons.io.FileUtils:1529","type":"CtMethodImpl","sourcecode":"public static void deleteDirectory(java.io.File directory) throws java.io.IOException {\n    if (directory.isDirectory()) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(directory.exists())) {\n                return ;\n            } \n            if (!(org.apache.commons.io.FileUtils.isSymlink(directory))) {\n                org.apache.commons.io.FileUtils.cleanDirectory(directory);\n            } \n            if (!(directory.delete())) {\n                java.lang.String java.lang.String = (\"Unable to delete directory \" + directory) + \".\";\n                throw new java.io.IOException(message);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"directory"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:382","type":"CtFieldReadImpl","sourcecode":"markedAtStart"},"failures":[],"tindex":"b8aedaa5-2e7f-11e6-b7ad-39986c77308c","method":{"position":"org.apache.commons.io.input.XmlStreamReader:423","type":"CtMethodImpl","sourcecode":"private java.lang.String doRawStream(org.apache.commons.io.input.BOMInputStream bom, org.apache.commons.io.input.BOMInputStream pis, boolean lenient) throws java.io.IOException {\n    if (lenient) {\n        {\n            java.lang.String java.lang.String = bom.getBOMCharsetName();\n            java.lang.String java.lang.String = pis.getBOMCharsetName();\n            java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getXmlProlog(pis, xmlGuessEnc);\n            try {\n                return calculateRawEncoding(bomEnc, xmlGuessEnc, xmlEnc);\n            } catch (org.apache.commons.io.input.XmlStreamReaderException ex) {\n                if (lenient) {\n                    return doLenientDetection(null, ex);\n                } else {\n                    throw ex;\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"markedAtStart":"lenient"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:449","type":"CtBinaryOperatorImpl","sourcecode":"filters == null"},"failures":[],"tindex":"b8aedaa6-2e7f-11e6-b7ad-67d526c245e5","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:420","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter... filters) {\n    if (filters == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filters == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (filters == null) {\n                        {\n                            return new org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.toList(filters));\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filters":"filters"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileEntry:71","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"b8af01b7-2e7f-11e6-b7ad-29368e56dc1f","method":{"position":"org.apache.commons.io.comparator.LastModifiedFileComparator:67","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (file1 == null) {\n        {\n            long long = (file1.lastModified()) - (file2.lastModified());\n            if (result < 0) {\n                return -1;\n            } else if (result > 0) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:164","type":"CtBinaryOperatorImpl","sourcecode":"conn instanceof java.net.HttpURLConnection"},"failures":[],"tindex":"b8af01b8-2e7f-11e6-b7ad-fd6ec71b54bf","method":{"position":"org.apache.commons.io.IOUtils:653","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.net.URLConnection urlConn) throws java.io.IOException {\n    if (urlConn instanceof java.net.HttpURLConnection) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStream java.io.InputStream = urlConn.getInputStream();\n            try {\n                return org.apache.commons.io.IOUtils.toByteArray(inputStream);\n            } finally {\n                inputStream.close();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"conn":"urlConn"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:740","type":"CtBinaryOperatorImpl","sourcecode":"(file1.isDirectory()) || (file2.isDirectory())"},"failures":[],"tindex":"b8af01b9-2e7f-11e6-b7ad-c5f38dc3493c","method":{"position":"org.apache.commons.io.FileUtils:2230","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.util.Collection<?> lines, java.lang.String lineEnding) throws java.io.IOException {\n    if ((file.isDirectory()) || (file.isDirectory())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, null, lines, lineEnding, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file","file1":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:438","type":"CtBinaryOperatorImpl","sourcecode":"bytes < 0"},"failures":[],"tindex":"b8af01ba-2e7f-11e6-b7ad-c97106228040","method":{"position":"org.apache.commons.io.input.BrokenInputStream:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long n) throws java.io.IOException {\n    if (n < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            throw java.io.IOException;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"n"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"b8af28cb-2e7f-11e6-b7ad-55cc1515f475","method":{"position":"org.apache.commons.io.output.TaggedOutputStream:112","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void handleIOException(java.io.IOException e) throws java.io.IOException {\n    if (null != e) {\n        {\n            throw new org.apache.commons.io.TaggedIOException(e , java.io.Serializable);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"e"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:449","type":"CtBinaryOperatorImpl","sourcecode":"filters == null"},"failures":[],"tindex":"b8af28cc-2e7f-11e6-b7ad-334c2face5ca","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:420","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter... filters) {\n    if (filters == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filters == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (filters == null) {\n                        {\n                            return new org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.toList(filters));\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filters":"filters"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:520","type":"CtBinaryOperatorImpl","sourcecode":"offset != size"},"failures":[],"tindex":"b8af28cd-2e7f-11e6-b7ad-d50c9cc1d6d3","method":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:329","type":"CtMethodImpl","sourcecode":"private int getNewLineMatchByteCount(byte[] data, int i) {\n    if (i < 0) {\n        {\n            if (i != i) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (byte[] byte[] : byte[][]) {\n                        boolean boolean = true;\n                        for (int int = (newLineSequence.int) - 1 ; j >= 0 ; j--) {\n                            int int = (i + j) - ((newLineSequence.int) - 1);\n                            match &= (k >= 0) && ((data[k]) == (newLineSequence[j]));\n                        }\n                        if (match) {\n                            return newLineSequence.int;\n                        } \n                    }\n                    return 0;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"i","size":"i"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.NullInputStream:235","type":"CtBinaryOperatorImpl","sourcecode":"(position) > (size)"},"failures":[],"tindex":"b8af4fde-2e7f-11e6-b7ad-33205deefd98","method":{"position":"org.apache.commons.io.IOUtils:2051","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.Reader input, java.io.Writer output, final long inputOffset, final long length, char[] buffer) throws java.io.IOException {\n    if (length > length) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (inputOffset > 0) {\n                org.apache.commons.io.IOUtils.skipFully(input, inputOffset);\n            } \n            if (length == 0) {\n                return 0;\n            } \n            int int = buffer.int;\n            if ((length > 0) && (length < (buffer.int))) {\n                bytesToRead = ((int)(length));\n            } \n            int int;\n            long long = 0;\n            while ((bytesToRead > 0) && ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) != (read = input.read(buffer, 0, bytesToRead)))) {\n                output.write(buffer, 0, read);\n                totalRead += read;\n                if (length > 0) {\n                    bytesToRead = ((int)(java.lang.Math.min((length - totalRead), buffer.int)));\n                } \n            }\n            return totalRead;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"length","position":"length"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:107","type":"CtBinaryOperatorImpl","sourcecode":"observer != null"},"failures":[],"tindex":"b8af4fdf-2e7f-11e6-b7ad-992056ba3585","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:35","type":"CtMethodImpl","sourcecode":"public void onStart(final org.apache.commons.io.monitor.FileAlterationObserver observer) {\n    if (observer != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"observer":"observer"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2292","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[],"tindex":"b8af4fe0-2e7f-11e6-b7ad-37eb7d38e6fc","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:529","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long cutoff) {\n    if (cutoff < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.AgeFileFilter(cutoff);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"cutoff"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:211","type":"CtBinaryOperatorImpl","sourcecode":"(memoryOutputStream) != null"},"failures":[],"tindex":"b8af4fe1-2e7f-11e6-b7ad-cf933d620ddf","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:243","type":"CtMethodImpl","sourcecode":"public synchronized void writeTo(java.io.OutputStream out) throws java.io.IOException {\n    if (out != null) {\n        {\n            int int = int;\n            for (byte[] byte[] : java.util.List<byte[]>) {\n                int int = java.lang.Math.min(buf.int, remaining);\n                out.write(buf, 0, c);\n                remaining -= c;\n                if (remaining == 0) {\n                    break;\n                } \n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"memoryOutputStream":"out"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:182","type":"CtBinaryOperatorImpl","sourcecode":"i > 0"},"failures":[],"tindex":"b8af76f2-2e7f-11e6-b7ad-fb525c691c96","method":{"position":"org.apache.commons.io.EndianUtils:250","type":"CtMethodImpl","sourcecode":"public static float readSwappedFloat(byte[] data, int offset) {\n    if (offset > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.Float.intBitsToFloat(org.apache.commons.io.EndianUtils.readSwappedInteger(data, offset));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"offset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"b8af76f3-2e7f-11e6-b7ad-dfe63d899237","method":{"position":"org.apache.commons.io.IOUtils:245","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.InputStream input) {\n    if (null != input) {\n        {\n            if (null != input) {\n                {\n                    org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(input)));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:111","type":"CtBinaryOperatorImpl","sourcecode":"(charset == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))"},"failures":[],"tindex":"b8af76f4-2e7f-11e6-b7ad-3571ccfb10d4","method":{"position":"org.apache.commons.io.Charsets:66","type":"CtMethodImpl","sourcecode":"public static java.nio.charset.Charset toCharset(java.nio.charset.Charset charset) {\n    if ((charset == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return charset == null ? java.nio.charset.Charset.defaultCharset() : charset;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"charset"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1006","type":"CtBinaryOperatorImpl","sourcecode":"destDir == null"},"failures":[],"tindex":"b8af9e05-2e7f-11e6-b7ad-7d9d7bacfed6","method":{"position":"org.apache.commons.io.FileUtils:2366","type":"CtMethodImpl","sourcecode":"public static void forceMkdir(java.io.File directory) throws java.io.IOException {\n    if (directory == null) {\n        {\n            if (directory.exists()) {\n                if (!(directory.isDirectory())) {\n                    java.lang.String java.lang.String = ((\"File \" + directory) + \" exists and is \") + \"not a directory. Unable to create directory.\";\n                    throw new java.io.IOException(message);\n                } \n            } else {\n                if (!(directory.mkdirs())) {\n                    if (!(directory.isDirectory())) {\n                        java.lang.String java.lang.String = \"Unable to create directory \" + directory;\n                        throw new java.io.IOException(message);\n                    } \n                } \n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2781","type":"CtBinaryOperatorImpl","sourcecode":"destDir == null"},"failures":[],"tindex":"b8af9e06-2e7f-11e6-b7ad-edb5afb70eb6","method":{"position":"org.apache.commons.io.FileUtils:1128","type":"CtMethodImpl","sourcecode":"private static void doCopyFile(java.io.File srcFile, java.io.File destFile, boolean preserveFileDate) throws java.io.IOException {\n    if ((destFile.exists()) && ((destFile.canWrite()) == false)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (srcFile == null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((destFile.exists()) && (destFile.isDirectory())) {\n                        throw new java.io.IOException(((\"Destination '\" + destFile) + \"' exists but is a directory\"));\n                    } \n                    java.io.FileInputStream java.io.FileInputStream = null;\n                    java.io.FileOutputStream java.io.FileOutputStream = null;\n                    java.nio.channels.FileChannel java.nio.channels.FileChannel = null;\n                    java.nio.channels.FileChannel java.nio.channels.FileChannel = null;\n                    try {\n                        fis = new java.io.FileInputStream(srcFile);\n                        fos = new java.io.FileOutputStream(destFile);\n                        input = fis.getChannel();\n                        output = fos.getChannel();\n                        long long = input.size();\n                        long long = 0;\n                        long long = 0;\n                        while (pos < size) {\n                            count = (size - pos) > (org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.long) ? org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.long : size - pos;\n                            pos += output.transferFrom(input, pos, count);\n                        }\n                    } finally {\n                        org.apache.commons.io.IOUtils.closeQuietly(output);\n                        org.apache.commons.io.IOUtils.closeQuietly(fos);\n                        org.apache.commons.io.IOUtils.closeQuietly(input);\n                        org.apache.commons.io.IOUtils.closeQuietly(fis);\n                    }\n                    if ((srcFile.length()) != (destFile.length())) {\n                        throw new java.io.IOException(((((\"Failed to copy full contents from '\" + srcFile) + \"' to '\") + destFile) + \"'\"));\n                    } \n                    if (preserveFileDate) {\n                        destFile.setLastModified(srcFile.lastModified());\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"srcFile"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1367","type":"CtBinaryOperatorImpl","sourcecode":"(srcDir.exists()) == false"},"failures":[],"tindex":"b8afc517-2e7f-11e6-b7ad-9bc664a420f9","method":{"position":"org.apache.commons.io.FileUtils:1560","type":"CtMethodImpl","sourcecode":"public static boolean deleteQuietly(java.io.File file) {\n    if ((file.exists()) == false) {\n        {\n            if (file == null) {\n                return false;\n            } \n            try {\n                if (file.isDirectory()) {\n                    org.apache.commons.io.FileUtils.cleanDirectory(file);\n                } \n            } catch (java.lang.Exception ignored) {\n            }\n            try {\n                return file.delete();\n            } catch (java.lang.Exception ignored) {\n                return false;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1088","type":"CtBinaryOperatorImpl","sourcecode":"(destFile.exists()) && ((destFile.canWrite()) == false)"},"failures":[],"tindex":"b8afc518-2e7f-11e6-b7ad-57fd458ee856","method":{"position":"org.apache.commons.io.FileUtils:1128","type":"CtMethodImpl","sourcecode":"private static void doCopyFile(java.io.File srcFile, java.io.File destFile, boolean preserveFileDate) throws java.io.IOException {\n    if ((destFile.exists()) && ((destFile.canWrite()) == false)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (srcFile == null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((destFile.exists()) && (destFile.isDirectory())) {\n                        throw new java.io.IOException(((\"Destination '\" + destFile) + \"' exists but is a directory\"));\n                    } \n                    java.io.FileInputStream java.io.FileInputStream = null;\n                    java.io.FileOutputStream java.io.FileOutputStream = null;\n                    java.nio.channels.FileChannel java.nio.channels.FileChannel = null;\n                    java.nio.channels.FileChannel java.nio.channels.FileChannel = null;\n                    try {\n                        fis = new java.io.FileInputStream(srcFile);\n                        fos = new java.io.FileOutputStream(destFile);\n                        input = fis.getChannel();\n                        output = fos.getChannel();\n                        long long = input.size();\n                        long long = 0;\n                        long long = 0;\n                        while (pos < size) {\n                            count = (size - pos) > (org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.long) ? org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.long : size - pos;\n                            pos += output.transferFrom(input, pos, count);\n                        }\n                    } finally {\n                        org.apache.commons.io.IOUtils.closeQuietly(output);\n                        org.apache.commons.io.IOUtils.closeQuietly(fos);\n                        org.apache.commons.io.IOUtils.closeQuietly(input);\n                        org.apache.commons.io.IOUtils.closeQuietly(fis);\n                    }\n                    if ((srcFile.length()) != (destFile.length())) {\n                        throw new java.io.IOException(((((\"Failed to copy full contents from '\" + srcFile) + \"' to '\") + destFile) + \"'\"));\n                    } \n                    if (preserveFileDate) {\n                        destFile.setLastModified(srcFile.lastModified());\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"destFile"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:105","type":"CtBinaryOperatorImpl","sourcecode":"prefixes == null"},"failures":[],"tindex":"b8afc519-2e7f-11e6-b7ad-8bc864bb3e62","method":{"position":"org.apache.commons.io.FileUtils:212","type":"CtMethodImpl","sourcecode":"public static java.io.File getFile(java.lang.String... names) {\n    if (names == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (names == null) {\n                throw new java.lang.NullPointerException(\"names must not be null\");\n            } \n            java.io.File java.io.File = null;\n            for (java.lang.String java.lang.String : names) {\n                if (file == null) {\n                    file = new java.io.File(name);\n                } else {\n                    file = new java.io.File(file , name);\n                }\n            }\n            return file;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefixes":"names"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:72","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"b8afec2a-2e7f-11e6-b7ad-7be7bfb1e6dc","method":{"position":"org.apache.commons.io.FilenameUtils:579","type":"CtMethodImpl","sourcecode":"public static java.lang.String separatorsToSystem(java.lang.String path) {\n    if (path == null) {\n        {\n            if (path == null) {\n                return null;\n            } \n            if (org.apache.commons.io.FilenameUtils.isSystemWindows()) {\n                return org.apache.commons.io.FilenameUtils.separatorsToWindows(path);\n            } else {\n                return org.apache.commons.io.FilenameUtils.separatorsToUnix(path);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"path"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1371","type":"CtBinaryOperatorImpl","sourcecode":"((text.indexOf('?')) == (-1)) && ((text.indexOf('*')) == (-1))"},"failures":[],"tindex":"b8afec2b-2e7f-11e6-b7ad-e1ae909730dc","method":{"position":"org.apache.commons.io.IOCase:197","type":"CtMethodImpl","sourcecode":"public boolean checkEndsWith(java.lang.String str, java.lang.String end) {\n    if (((str.indexOf('?')) == (-1)) && ((text.indexOf('*')) == (-1))) {\n        {\n            int int = end.length();\n            return str.regionMatches((!(boolean)), ((str.length()) - endLen), end, 0, endLen);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"str"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1489","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"b8afec2c-2e7f-11e6-b7ad-4d386c2f9717","method":{"position":"org.apache.commons.io.FilenameUtils:1025","type":"CtMethodImpl","sourcecode":"public static java.lang.String removeExtension(java.lang.String filename) {\n    if (filename != null) {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.indexOfExtension(filename);\n            if (index == (-1)) {\n                return filename;\n            } else {\n                return filename.substring(0, index);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"filename"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.StringBuilderWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"value != null"},"failures":[],"tindex":"b8afec2d-2e7f-11e6-b7ad-6792eed01c45","method":{"position":"org.apache.commons.io.output.LockableFileWriter:327","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr) throws java.io.IOException {\n    if (chr != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.Writer.write(chr);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"chr"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:520","type":"CtBinaryOperatorImpl","sourcecode":"offset != size"},"failures":[],"tindex":"b8b0133e-2e7f-11e6-b7ad-73cee58ffbeb","method":{"position":"org.apache.commons.io.output.ProxyWriter:242","type":"CtMethodImpl","sourcecode":"protected void beforeWrite(int n) throws java.io.IOException {\n    if (n != n) {\n        {\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"n","size":"n"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1526","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"b8b0133f-2e7f-11e6-b7ad-b502ccae98b4","method":{"position":"org.apache.commons.io.FileSystemUtils:323","type":"CtMethodImpl","sourcecode":"long parseDir(java.lang.String line, java.lang.String path) throws java.io.IOException {\n    if (line != null) {\n        {\n            int int = 0;\n            int int = 0;\n            int int = (line.length()) - 1;\n            innerLoop1 : while (j >= 0) {\n                char char = line.charAt(j);\n                if (java.lang.Character.isDigit(c)) {\n                    bytesEnd = j + 1;\n                    break innerLoop1;\n                } \n                j--;\n            }\n            innerLoop2 : while (j >= 0) {\n                char char = line.charAt(j);\n                if (((!(java.lang.Character.isDigit(c))) && (c != ',')) && (c != '.')) {\n                    bytesStart = j + 1;\n                    break innerLoop2;\n                } \n                j--;\n            }\n            if (j < 0) {\n                throw new java.io.IOException((((\"Command line 'dir /-c' did not return valid info \" + \"for path '\") + path) + \"'\"));\n            } \n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(line.substring(bytesStart, bytesEnd));\n            for (int int = 0 ; k < (buf.length()) ; k++) {\n                if (((buf.charAt(k)) == ',') || ((buf.charAt(k)) == '.')) {\n                    buf.deleteCharAt((k--));\n                } \n            }\n            return parseBytes(buf.toString(), path);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"line"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2596","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"b8b03a50-2e7f-11e6-b7ad-1968c456ad83","method":{"position":"org.apache.commons.io.FileUtils:1975","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data, boolean append) throws java.io.IOException {\n    if (file == null) {\n        {\n            org.apache.commons.io.FileUtils.writeStringToFile(file, data, java.nio.charset.Charset.defaultCharset(), append);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:554","type":"CtBinaryOperatorImpl","sourcecode":"((xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_32)))) && (!(xmlEnc.equals(bomEnc)))"},"failures":[],"tindex":"b8b03a51-2e7f-11e6-b7ad-fb84ffe22c0f","method":{"position":"org.apache.commons.io.IOUtils:1430","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.CharSequence data, java.io.OutputStream output) throws java.io.IOException {\n    if (((data != null) && (!(xmlEnc.equals(data)))) && (!(xmlEnc.equals(data)))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"data","xmlEnc":"data","org.apache.commons.io.input.XmlStreamReader.UTF_32":"data"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2666","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"b8b03a52-2e7f-11e6-b7ad-371512285aaa","method":{"position":"org.apache.commons.io.DirectoryWalker:469","type":"CtMethodImpl","sourcecode":"protected void handleStart(java.io.File startDirectory, java.util.Collection<T> results) throws java.io.IOException {\n    if (!(startDirectory.exists())) {\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"startDirectory"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"b8b03a53-2e7f-11e6-b7ad-738803de0152","method":{"position":"org.apache.commons.io.output.ProxyWriter:271","type":"CtMethodImpl","sourcecode":"protected void handleIOException(java.io.IOException e) throws java.io.IOException {\n    if (null != e) {\n        {\n            if (null != e) {\n                {\n                    throw e;\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"e"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:828","type":"CtBinaryOperatorImpl","sourcecode":"prefix < 0"},"failures":[],"tindex":"b8b03a54-2e7f-11e6-b7ad-659ab3c4ebad","method":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:329","type":"CtMethodImpl","sourcecode":"private int getNewLineMatchByteCount(byte[] data, int i) {\n    if (i < 0) {\n        {\n            if (i != i) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (byte[] byte[] : byte[][]) {\n                        boolean boolean = true;\n                        for (int int = (newLineSequence.int) - 1 ; j >= 0 ; j--) {\n                            int int = (i + j) - ((newLineSequence.int) - 1);\n                            match &= (k >= 0) && ((data[k]) == (newLineSequence[j]));\n                        }\n                        if (match) {\n                            return newLineSequence.int;\n                        } \n                    }\n                    return 0;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"i"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1659","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"b8b06165-2e7f-11e6-b7ad-d392d07085b4","method":{"position":"org.apache.commons.io.input.TaggedInputStream:112","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void handleIOException(java.io.IOException e) throws java.io.IOException {\n    if (null != e) {\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new org.apache.commons.io.TaggedIOException(e , java.io.Serializable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"e"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:175","type":"CtBinaryOperatorImpl","sourcecode":"(prefix) != null"},"failures":[],"tindex":"b8b06166-2e7f-11e6-b7ad-bb3c760e4038","method":{"position":"org.apache.commons.io.FilenameUtils:1049","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.String filename1, java.lang.String filename2) {\n    if (filename2 != null) {\n        {\n            return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, false, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"filename2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:623","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"b8b06167-2e7f-11e6-b7ad-1ff6517fe164","method":{"position":"org.apache.commons.io.FilenameUtils:995","type":"CtMethodImpl","sourcecode":"public static java.lang.String getExtension(java.lang.String filename) {\n    if (filename == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.indexOfExtension(filename);\n            if (index == (-1)) {\n                return \"\";\n            } else {\n                return filename.substring((index + 1));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:810","type":"CtBinaryOperatorImpl","sourcecode":"charsetName == null"},"failures":[],"tindex":"b8b08878-2e7f-11e6-b7ad-df987981672b","method":{"position":"org.apache.commons.io.IOUtils:801","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            return org.apache.commons.io.IOUtils.toString(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsetName":"encoding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:524","type":"CtBinaryOperatorImpl","sourcecode":"(xmlGuessEnc != null) && (!(xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_8)))"},"failures":[],"tindex":"b8b08879-2e7f-11e6-b7ad-13b06360ea2a","method":{"position":"org.apache.commons.io.FilenameUtils:566","type":"CtMethodImpl","sourcecode":"public static java.lang.String separatorsToWindows(java.lang.String path) {\n    if ((path != null) && (!(xmlGuessEnc.equals(path)))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((path == null) || ((path.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char)) == (-1))) {\n                return path;\n            } \n            return path.replace(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.input.XmlStreamReader.UTF_8":"path","xmlGuessEnc":"path"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1088","type":"CtBinaryOperatorImpl","sourcecode":"(destFile.exists()) && ((destFile.canWrite()) == false)"},"failures":[],"tindex":"b8b0887a-2e7f-11e6-b7ad-4d2e643a9361","method":{"position":"org.apache.commons.io.filefilter.FalseFileFilter:68","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File dir, java.lang.String name) {\n    if ((dir.exists()) && ((destFile.canWrite()) == false)) {\n        {\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"dir"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:449","type":"CtBinaryOperatorImpl","sourcecode":"filters == null"},"failures":[],"tindex":"b8b0887b-2e7f-11e6-b7ad-bbbbdaacdd11","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:448","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.io.filefilter.IOFileFilter> toList(org.apache.commons.io.filefilter.IOFileFilter... filters) {\n    if (filters == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filters == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (filters == null) {\n                        throw new java.lang.IllegalArgumentException(\"The filters must not be null\");\n                    } \n                    java.util.List<org.apache.commons.io.filefilter.IOFileFilter> java.util.List<org.apache.commons.io.filefilter.IOFileFilter> = new java.util.ArrayList<org.apache.commons.io.filefilter.IOFileFilter>(filters.int);\n                    for (int int = 0 ; i < (filters.int) ; i++) {\n                        if ((filters[i]) == null) {\n                            throw new java.lang.IllegalArgumentException(((\"The filter[\" + i) + \"] is null\"));\n                        } \n                        list.add(filters[i]);\n                    }\n                    return list;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filters":"filters"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2317","type":"CtBinaryOperatorImpl","sourcecode":"toSkip < 0"},"failures":[],"tindex":"b8b0af8c-2e7f-11e6-b7ad-b92ce372b008","method":{"position":"org.apache.commons.io.ThreadMonitor:54","type":"CtMethodImpl","sourcecode":"public static java.lang.Thread start(long timeout) {\n    if (timeout < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.ThreadMonitor.start(java.lang.Thread.currentThread(), timeout);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toSkip":"timeout"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"b8b0af8d-2e7f-11e6-b7ad-33e5a07e6d0f","method":{"position":"org.apache.commons.io.IOUtils:1979","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.Reader input, java.io.Writer output) throws java.io.IOException {\n    if (input == null) {\n        {\n            return org.apache.commons.io.IOUtils.copyLarge(input, output, new char[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int]);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:524","type":"CtBinaryOperatorImpl","sourcecode":"(xmlGuessEnc != null) && (!(xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.UTF_8)))"},"failures":[],"tindex":"b8b0af8e-2e7f-11e6-b7ad-b97e2dba9374","method":{"position":"org.apache.commons.io.FilenameUtils:193","type":"CtMethodImpl","sourcecode":"public static java.lang.String normalize(java.lang.String filename) {\n    if ((filename != null) && (!(xmlGuessEnc.equals(filename)))) {\n        {\n            return org.apache.commons.io.FilenameUtils.doNormalize(filename, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.io.input.XmlStreamReader.UTF_8":"filename","xmlGuessEnc":"filename"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:352","type":"CtBinaryOperatorImpl","sourcecode":"size == 0"},"failures":[],"tindex":"b8b0af8f-2e7f-11e6-b7ad-af5390f3c0c9","method":{"position":"org.apache.commons.io.output.XmlStreamWriter:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] cbuf, int off, int len) throws java.io.IOException {\n    if (off == 0) {\n        {\n            if ((java.io.StringWriter) != null) {\n                detectEncoding(cbuf, off, len);\n            } else {\n                java.io.Writer.write(cbuf, off, len);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"off"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:212","type":"CtBinaryOperatorImpl","sourcecode":"(xmlPrologWriter) != null"},"failures":[],"tindex":"b8b0d6a0-2e7f-11e6-b7ad-65184a21af5c","method":{"position":"org.apache.commons.io.CopyUtils:241","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output) throws java.io.IOException {\n    if (output != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input);\n            org.apache.commons.io.CopyUtils.copy(in, output);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"xmlPrologWriter":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1411","type":"CtBinaryOperatorImpl","sourcecode":"(destDir.isDirectory()) == false"},"failures":[],"tindex":"b8b0d6a1-2e7f-11e6-b7ad-2f15ad9ed3bc","method":{"position":"org.apache.commons.io.FileUtils:2643","type":"CtMethodImpl","sourcecode":"public static boolean isFileOlder(java.io.File file, java.util.Date date) {\n    if ((file.isDirectory()) == false) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified date\");\n            } \n            return org.apache.commons.io.FileUtils.isFileOlder(file, date.getTime());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2538","type":"CtBinaryOperatorImpl","sourcecode":"actual != length"},"failures":[],"tindex":"b8b0d6a2-2e7f-11e6-b7ad-df7735216072","method":{"position":"org.apache.commons.io.output.ProxyWriter:259","type":"CtMethodImpl","sourcecode":"protected void afterWrite(int n) throws java.io.IOException {\n    if (n != n) {\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"actual":"n","length":"n"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1682","type":"CtBinaryOperatorImpl","sourcecode":"(timeout++) > seconds"},"failures":[],"tindex":"b8b0d6a3-2e7f-11e6-b7ad-9d2e98c24678","method":{"position":"org.apache.commons.io.output.XmlStreamWriter:153","type":"CtMethodImpl","sourcecode":"private void detectEncoding(char[] cbuf, int off, int len) throws java.io.IOException {\n    if ((len++) > len) {\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = len;\n            java.lang.StringBuffer java.lang.StringBuffer = java.io.StringWriter.getBuffer();\n            if (((xmlProlog.length()) + len) > (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int)) {\n                size = (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int) - (xmlProlog.length());\n            } \n            java.io.StringWriter.write(cbuf, off, size);\n            if ((xmlProlog.length()) >= 5) {\n                if (xmlProlog.substring(0, 5).equals(\"<?xml\")) {\n                    int int = xmlProlog.indexOf(\"?>\");\n                    if (xmlPrologEnd > 0) {\n                        java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.java.util.regex.Pattern.matcher(xmlProlog.substring(0, xmlPrologEnd));\n                        if (m.find()) {\n                            java.lang.String = m.group(1).toUpperCase();\n                            java.lang.String = java.lang.String.substring(1, ((java.lang.String.length()) - 1));\n                        } else {\n                            java.lang.String = java.lang.String;\n                        }\n                    } else {\n                        if ((xmlProlog.length()) >= (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int)) {\n                            java.lang.String = java.lang.String;\n                        } \n                    }\n                } else {\n                    java.lang.String = java.lang.String;\n                }\n                if ((java.lang.String) != null) {\n                    java.io.StringWriter = null;\n                    java.io.Writer = new java.io.OutputStreamWriter(java.io.OutputStream , java.lang.String);\n                    java.io.Writer.write(xmlProlog.toString());\n                    if (len > size) {\n                        java.io.Writer.write(cbuf, (off + size), (len - size));\n                    } \n                } \n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"seconds":"len","timeout":"len"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.LineIterator:96","type":"CtBinaryOperatorImpl","sourcecode":"line == null"},"failures":[],"tindex":"b8b0fdb4-2e7f-11e6-b7ad-f1f38ffd12cb","method":{"position":"org.apache.commons.io.IOUtils:1184","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.CharSequence input, java.lang.String encoding) throws java.io.IOException {\n    if (input == null) {\n        {\n            return org.apache.commons.io.IOUtils.toInputStream(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"input"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"commons-io","transformationCount":98,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
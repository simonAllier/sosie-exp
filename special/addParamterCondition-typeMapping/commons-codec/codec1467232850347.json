{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":30,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":180,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":45,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":222,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":132,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeNull":88,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":234,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":193,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":10,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":89,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":187,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":46,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":128,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":71,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":231,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":208,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":82,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":81,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":148,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":149,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":197,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":211,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":99,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":172,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":80,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":209,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData":92,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":150,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":151,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":170,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":84,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":126,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":60,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":130,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":229,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":158,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":73,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":87,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":93,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":144,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":176,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":156,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":217,"org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull":236,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":136,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":200,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":163,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":195,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":212,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":28,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":117,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":205,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":63,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":219,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":48,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":115,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":171,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":68,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":123,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":75,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":41,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":154,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":192,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":224,"org.apache.commons.codec.language.MetaphoneTest.testEncodeNull":226,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":227,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":214,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":7,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":85,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":175,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":161,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":78,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":199,"org.apache.commons.codec.binary.Base64Test.testUUID":98,"org.apache.commons.codec.binary.Base64Test.testSingletons":157,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":159,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":109,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":61,"org.apache.commons.codec.binary.Base64Test.testPairs":145,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero":27,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":165,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":160,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":189,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":118,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":34,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":179,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":105,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":168,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":194,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":25,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":65,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":77,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":83,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":173,"org.apache.commons.codec.language.SoundexTest.testEncodeNull":96,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":134,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":190,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull":162,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":38,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":140,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":164,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8":119,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":43,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":100,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":56,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":39,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":125,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":13,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":51,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le":185,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":147,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":40,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":221,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":203,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":137,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":58,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":57,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":67,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":204,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":210,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":37,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":133,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":201,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":216,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":220,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":120,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":18,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":94,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":17,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":225,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":59,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":22,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":53,"org.apache.commons.codec.binary.Base64Test.testTriplets":143,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":79,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":6,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":0,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":3,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":74,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":97,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":49,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative":26,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":152,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":52,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":114,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":21,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":121,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":20,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":36,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":4,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":131,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":135,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":47,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":127,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":233,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":86,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":124,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":228,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":230,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":54,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":167,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":174,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":202,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":215,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":101,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":16,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":116,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":223,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":69,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":191,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":186,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":106,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":206,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":166,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":104,"org.apache.commons.codec.binary.HexTest.testDecodeArrayOddCharacters":184,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":35,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":142,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":207,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":188,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":90,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":122,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":42,"org.apache.commons.codec.binary.HexTest.testDencodeEmpty":181,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":62,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":9,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":111,"org.apache.commons.codec.binary.Base64Test.testBase64":110,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":14,"org.apache.commons.codec.binary.HexTest.testDecodeStringOddCharacters":183,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":32,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":129,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":102,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":153,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":12,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":66,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":11,"org.apache.commons.codec.net.BCodecTest.testNullInput":169,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":23,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":70,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":232,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":112,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":55,"org.apache.commons.codec.binary.Base64Test.testCodec112":155,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":218,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":107,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters1":182,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":141,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":213,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":64,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":103,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":50,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":113,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":138,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":235,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":196,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":24,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":91,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":108,"org.apache.commons.codec.language.SoundexTest.testDifference":95,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":177,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":76,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":139,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":8,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":198,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":178,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":146,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16":72},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"c3fe4e5d-3e39-11e6-aaf4-55ca11ac5db2","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:135","type":"CtMethodImpl","sourcecode":"public void processNextReplacement(final java.lang.String replacement, final boolean forceAppend) {\n    if (replacement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = (((java.lang.String) == null) || (!(java.lang.String.endsWith(replacement)))) || forceAppend;\n            if (append && ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int))) {\n                java.lang.StringBuilder.append(replacement);\n                if ((java.lang.StringBuilder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n                    java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length());\n                } \n                java.lang.String = null;\n            } \n            java.lang.String = replacement;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"replacement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"tindex":"c3ff86de-3e39-11e6-aaf4-37250c8fad98","method":{"position":"org.apache.commons.codec.language.bm.Languages:202","type":"CtMethodImpl","sourcecode":"private static java.lang.String langResourceName(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_languages.txt\", nameType.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[],"tindex":"c3ff86df-3e39-11e6-aaf4-63a3ef462681","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:91","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.CharSequence str) {\n    if (str.startsWith(\"(\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str.endsWith(str)) {\n                {\n                    for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n                        ph.append(str);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:53","type":"CtBinaryOperatorImpl","sourcecode":"count == len"},"failures":[],"tindex":"c3ffadf0-3e39-11e6-aaf4-bbe3e9b815f0","method":{"position":"org.apache.commons.codec.language.Metaphone:338","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final java.lang.StringBuilder string, final int index) {\n    if (index == index) {\n        {\n            return (org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(string.charAt(index))) >= 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"index","count":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtInvocationImpl","sourcecode":"incl.contains(\" \")"},"failures":[28,29,30,31,32],"tindex":"c3ffadf1-3e39-11e6-aaf4-1dfea70fcdcf","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:968","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.String value) {\n    if (value.contains(\" \")) {\n        {\n            appendPrimary(value);\n            appendAlternate(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"incl":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[0,1,2,3,4,5,8,9,10,13,14,17,18,20],"tindex":"c3ffadf2-3e39-11e6-aaf4-a9099ad74286","method":{"position":"org.apache.commons.codec.language.bm.Rule:600","type":"CtMethodImpl","sourcecode":"private static boolean startsWith(final java.lang.CharSequence input, final java.lang.CharSequence prefix) {\n    if (prefix == null) {\n        {\n            if ((prefix.length()) > (input.length())) {\n                return false;\n            } \n            for (int int = 0 ; i < (prefix.length()) ; i++) {\n                if ((input.charAt(i)) != (prefix.charAt(i))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"prefix"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:342","type":"CtBinaryOperatorImpl","sourcecode":"inAvail < 0"},"failures":[],"tindex":"c3ffd503-3e39-11e6-aaf4-fb48bb7f539c","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:408","type":"CtMethodImpl","sourcecode":"private int handleG(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (index < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                index = handleGH(value, result, index);\n            } else if ((charAt(value, (index + 1))) == 'N') {\n                if (((index == 1) && (isVowel(charAt(value, 0)))) && (!slavoGermanic)) {\n                    result.append(\"KN\", \"N\");\n                } else if (((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"EY\"))) && ((charAt(value, (index + 1))) != 'Y')) && (!slavoGermanic)) {\n                    result.append(\"N\", \"KN\");\n                } else {\n                    result.append(\"KN\");\n                }\n                index = index + 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"LI\")) && (!slavoGermanic)) {\n                result.append(\"KL\", \"L\");\n                index += 2;\n            } else if ((index == 0) && (((charAt(value, (index + 1))) == 'Y') || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])))) {\n                result.append('K', 'J');\n                index += 2;\n            } else if (((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ER\")) || ((charAt(value, (index + 1))) == 'Y')) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"E\", \"I\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"RGY\", \"OGY\")))) {\n                result.append('K', 'J');\n                index += 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"E\", \"I\", \"Y\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"AGGI\", \"OGGI\"))) {\n                if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ET\"))) {\n                    result.append('K');\n                } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n                    result.append('J');\n                } else {\n                    result.append('J', 'K');\n                }\n                index += 2;\n            } else if ((charAt(value, (index + 1))) == 'G') {\n                index += 2;\n                result.append('K');\n            } else {\n                index++;\n                result.append('K');\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inAvail":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:70","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX)"},"failures":[],"tindex":"c3ffd504-3e39-11e6-aaf4-0d795fec24ce","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:647","type":"CtMethodImpl","sourcecode":"private int handleSC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (value.startsWith(value)) {\n        {\n            if ((charAt(value, (index + 2))) == 'H') {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n                        result.append(\"X\", \"SK\");\n                    } else {\n                        result.append(\"SK\");\n                    }\n                } else {\n                    if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n                        result.append('X', 'S');\n                    } else {\n                        result.append('X');\n                    }\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                result.append('S');\n            } else {\n                result.append(\"SK\");\n            }\n            return index + 3;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"value","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[33,34],"tindex":"c3fffc15-3e39-11e6-aaf4-ab98039409cb","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:101","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (salt == null) {\n                salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n            } \n            return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"salt"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtInvocationImpl","sourcecode":"ph.startsWith(\"(\")"},"failures":[],"tindex":"c4002326-3e39-11e6-aaf4-65ba9dbc1c0e","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:91","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.CharSequence str) {\n    if (str.startsWith(\"(\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str.endsWith(str)) {\n                {\n                    for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n                        ph.append(str);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:116","type":"CtBinaryOperatorImpl","sourcecode":"ascii == null"},"failures":[],"tindex":"c4004a37-3e39-11e6-aaf4-d938f031076e","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:412","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        {\n            if (obj == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n                    } \n                    return encode(((java.lang.String)(obj)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:264","type":"CtBinaryOperatorImpl","sourcecode":"(i % 3) != 0"},"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"tindex":"c4004a38-3e39-11e6-aaf4-b5e1aa62bdb3","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:128","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(final byte[] b, final int offset, final int len) throws java.io.IOException {\n    if ((offset % 3) != 0) {\n        {\n            if (b == null) {\n                throw new java.lang.NullPointerException();\n            } else if ((offset < 0) || (len < 0)) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if (len == 0) {\n                return 0;\n            } else {\n                int int = 0;\n                while (readLen == 0) {\n                    if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n                        final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n                        final int int = java.io.InputStream.read(buf);\n                        if (boolean) {\n                            org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        } else {\n                            org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        }\n                    } \n                    readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                }\n                return readLen;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:272","type":"CtBinaryOperatorImpl","sourcecode":"cmtI >= 0"},"failures":[],"tindex":"c4004a39-3e39-11e6-aaf4-0fa16ee69a16","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:498","type":"CtMethodImpl","sourcecode":"private int handleH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index >= 0) {\n        {\n            if (((index == 0) || (isVowel(charAt(value, (index - 1))))) && (isVowel(charAt(value, (index + 1))))) {\n                result.append('H');\n                index += 2;\n            } else {\n                index++;\n            }\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmtI":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:70","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX)"},"failures":[],"tindex":"c400714a-3e39-11e6-aaf4-f9e301e66e45","method":{"position":"org.apache.commons.codec.language.bm.Rule:353","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang.startsWith(lang)) {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.get(nameType).get(rt).get(lang);\n            if (rules == null) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n            } \n            return rules;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"lang","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"lang"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"c400714b-3e39-11e6-aaf4-0b921b3a6e29","method":{"position":"org.apache.commons.codec.language.bm.Lang:113","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang instance(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Lang>.get(nameType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:131","type":"CtBinaryOperatorImpl","sourcecode":"(offset < 0) || (len < 0)"},"failures":[],"tindex":"c400714c-3e39-11e6-aaf4-f1df2cb242dc","method":{"position":"org.apache.commons.codec.language.Soundex:245","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic void setMaxLength(final int maxLength) {\n    if (maxLength == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((maxLength < 0) || (maxLength < 0)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.codec.language.Soundex.this.int = maxLength;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"maxLength","len":"maxLength"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[66],"tindex":"c400714d-3e39-11e6-aaf4-cd5694bac429","method":{"position":"org.apache.commons.codec.digest.DigestUtils:320","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Hex(final java.lang.String data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:265","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[67],"tindex":"c400bf6e-3e39-11e6-aaf4-97cd89caebb1","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:482","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final java.lang.String basen) {\n    if (basen == null) {\n        {\n            return isInAlphabet(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(basen), true);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"basen"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:146","type":"CtBinaryOperatorImpl","sourcecode":"(m == null) || (!(m.find()))"},"failures":[],"tindex":"c400bf6f-3e39-11e6-aaf4-0b6351d05c2f","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if ((source == null) || (!(m.find()))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(source instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\");\n            } \n            return encode(((java.lang.String)(source)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[68],"tindex":"c400bf70-3e39-11e6-aaf4-519ac97ab5fa","method":{"position":"org.apache.commons.codec.digest.DigestUtils:672","type":"CtMethodImpl","sourcecode":"public static byte[] sha512(final java.lang.String data) {\n    if ((data.length()) > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[69],"tindex":"c400bf71-3e39-11e6-aaf4-998805a15678","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:104","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final java.lang.String keyBytes) {\n    if (keyBytes.equalsIgnoreCase(keyBytes)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"keyBytes","name1":"keyBytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[],"tindex":"c400e682-3e39-11e6-aaf4-f909c6ee3644","method":{"position":"org.apache.commons.codec.digest.DigestUtils:610","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha384Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[28,29,31,32],"tindex":"c400e683-3e39-11e6-aaf4-71e2837c365e","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:800","type":"CtMethodImpl","sourcecode":"private boolean conditionCH0(final java.lang.String value, final int index) {\n    if ((index & 1) != 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (index != 0) {\n                        return false;\n                    } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n                        return false;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:268","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[70],"tindex":"c4010d94-3e39-11e6-aaf4-eb574e96c32b","method":{"position":"org.apache.commons.codec.digest.DigestUtils:563","type":"CtMethodImpl","sourcecode":"public static byte[] sha384(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha384Digest(), data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[71],"tindex":"c4010d95-3e39-11e6-aaf4-5dccf3fb6b7a","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:133","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n            } \n            return soundex(((java.lang.String)(obj)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtInvocationImpl","sourcecode":"ph.startsWith(\"(\")"},"failures":[72],"tindex":"c4010d96-3e39-11e6-aaf4-3f32fb7f5ac6","method":{"position":"org.apache.commons.codec.binary.StringUtils:180","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16(final java.lang.String string) {\n    if (string.startsWith(\"(\")) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)"},"failures":[],"tindex":"c4010d97-3e39-11e6-aaf4-396a8902b824","method":{"position":"org.apache.commons.codec.digest.DigestUtils:399","type":"CtMethodImpl","sourcecode":"public static byte[] sha1(final java.lang.String data) {\n    if (data == null) {\n        {\n            if (data.startsWith(data)) {\n                {\n                    return org.apache.commons.codec.digest.DigestUtils.sha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"data","line":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:130","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'H'"},"failures":[73,74,75],"tindex":"c40134a8-3e39-11e6-aaf4-750d0af73776","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:171","type":"CtMethodImpl","sourcecode":"public static byte[] fromAscii(final char[] ascii) {\n    if ((ascii[1]) == 'H') {\n        {\n            if ((ascii == null) || ((ascii.int) == 0)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            final byte[] byte[] = new byte[(ascii.int) >> 3];\n            for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if ((ascii[(jj - bits)]) == '1') {\n                        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n                    } \n                }\n            }\n            return l_raw;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"ascii"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"c40134a9-3e39-11e6-aaf4-d1738b6f564b","method":{"position":"org.apache.commons.codec.binary.StringUtils:198","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Be(final java.lang.String string) {\n    if ((string == null) || ((txt.length()) == 0)) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"string"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:238","type":"CtBinaryOperatorImpl","sourcecode":"(ii & 1) == 1"},"failures":[76,77,78,79,35,36,37,39,43,44,45,46,47,48],"tindex":"c40134aa-3e39-11e6-aaf4-53a9286c0047","method":{"position":"org.apache.commons.codec.binary.Base32:336","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid decode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if ((inPos & 1) == 1) {\n        {\n            if (context.boolean) {\n                return ;\n            } \n            if (inAvail < 0) {\n                context.boolean = true;\n            } \n            for (int int = 0 ; i < inAvail ; i++) {\n                final byte byte = in[(inPos++)];\n                if (b == (byte)) {\n                    context.boolean = true;\n                    break;\n                } else {\n                    final byte[] byte[] = ensureBufferSize(int, context);\n                    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.byte[].int))) {\n                        final int int = org.apache.commons.codec.binary.Base32.this.byte[][b];\n                        if (result >= 0) {\n                            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n                            context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n                            if ((context.int) == 0) {\n                                buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                            } \n                        } \n                    } \n                }\n            }\n            if ((context.boolean) && ((context.int) >= 2)) {\n                final byte[] byte[] = ensureBufferSize(int, context);\n                switch (context.int) {\n                    case 2 :\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    case 3 :\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 7) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    case 4 :\n                        context.long = (context.long) >> 4;\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    case 5 :\n                        context.long = (context.long) >> 1;\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    case 6 :\n                        context.long = (context.long) >> 6;\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    case 7 :\n                        context.long = (context.long) >> 3;\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    default :\n                        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                }\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ii":"inPos"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:68","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX)"},"failures":[],"tindex":"c4015bbb-3e39-11e6-aaf4-8935125c8d10","method":{"position":"org.apache.commons.codec.language.Caverphone:57","type":"CtMethodImpl","sourcecode":"public java.lang.String caverphone(final java.lang.String source) {\n    if (source.startsWith(source)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.org.apache.commons.codec.language.Caverphone2.encode(source);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX":"source","salt":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[80,81,82,83,84,85,86,87,88,89,90],"tindex":"c4015bbc-3e39-11e6-aaf4-9d8d6c88a663","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:417","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String text) {\n    if (!(text.contains(\"[\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return colognePhonetic(text);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"text"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtBinaryOperatorImpl","sourcecode":"(content.length()) == 0"},"failures":[91],"tindex":"c40182cd-3e39-11e6-aaf4-f1e157361e05","method":{"position":"org.apache.commons.codec.digest.HmacUtils:673","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final java.lang.String key, final java.lang.String valueToDigest) {\n    if ((key.length()) == 0) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacSha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"content":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[92],"tindex":"c40182ce-3e39-11e6-aaf4-3f6b8c4d5003","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:140","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(keyBytes)) {\n        {\n            if (keyBytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (keyBytes == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))));\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"keyBytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:248","type":"CtBinaryOperatorImpl","sourcecode":"(cnt & 1) != 0"},"failures":[],"tindex":"c40182cf-3e39-11e6-aaf4-c9d8254b8753","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:800","type":"CtMethodImpl","sourcecode":"private boolean conditionCH0(final java.lang.String value, final int index) {\n    if ((index & 1) != 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (index != 0) {\n                        return false;\n                    } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n                        return false;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cnt":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[93,94],"tindex":"c40182d0-3e39-11e6-aaf4-effd586f5036","method":{"position":"org.apache.commons.codec.digest.HmacUtils:419","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"valueToDigest"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[70],"tindex":"c40182d1-3e39-11e6-aaf4-9945be466562","method":{"position":"org.apache.commons.codec.digest.DigestUtils:546","type":"CtMethodImpl","sourcecode":"public static byte[] sha384(final byte[] data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.getSha384Digest().digest(data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"c401a9e2-3e39-11e6-aaf4-391ae0587f72","method":{"position":"org.apache.commons.codec.digest.HmacUtils:723","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"c401a9e3-3e39-11e6-aaf4-a940b865bcad","method":{"position":"org.apache.commons.codec.digest.HmacUtils:741","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac updateHmac(final javax.crypto.Mac mac, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            mac.reset();\n            mac.update(valueToDigest);\n            return mac;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"valueToDigest"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)"},"failures":[95,96],"tindex":"c401a9e4-3e39-11e6-aaf4-4378f0a8d7a8","method":{"position":"org.apache.commons.codec.language.Soundex:258","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str.startsWith(str)) {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            final char[] char[] = new char[]{ '0' , '0' , '0' , '0' };\n            char char;\n            char char;\n            int int = 1;\n            int int = 1;\n            out[0] = str.charAt(0);\n            last = getMappingCode(str, 0);\n            while ((incount < (str.length())) && (count < (out.int))) {\n                mapped = getMappingCode(str, (incount++));\n                if (mapped != 0) {\n                    if ((mapped != '0') && (mapped != last)) {\n                        out[(count++)] = mapped;\n                    } \n                    last = mapped;\n                } \n            }\n            return new java.lang.String(out);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"str","line":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[97],"tindex":"c401a9e5-3e39-11e6-aaf4-671d4cf6973e","method":{"position":"org.apache.commons.codec.net.QCodec:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"c401d0f6-3e39-11e6-aaf4-ede5878f6553","method":{"position":"org.apache.commons.codec.digest.DigestUtils:531","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final java.lang.String data) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"c401d0f7-3e39-11e6-aaf4-f983d859667b","method":{"position":"org.apache.commons.codec.binary.Hex:160","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeHexString(final byte[] data) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(org.apache.commons.codec.binary.Hex.encodeHex(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"c401d0f8-3e39-11e6-aaf4-4b06e90f3b9c","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:140","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(keyBytes)) {\n        {\n            if (keyBytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (keyBytes == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))));\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"keyBytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:270","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[],"tindex":"c401d0f9-3e39-11e6-aaf4-cd5bc7c466d6","method":{"position":"org.apache.commons.codec.binary.Base32:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid encode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inAvail == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (context.boolean) {\n                return ;\n            } \n            if (inAvail < 0) {\n                context.boolean = true;\n                if ((0 == (context.int)) && ((int) == 0)) {\n                    return ;\n                } \n                final byte[] byte[] = ensureBufferSize(int, context);\n                final int int = context.int;\n                switch (context.int) {\n                    case 0 :\n                        break;\n                    case 1 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    case 2 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    case 3 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    case 4 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 22))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 7))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    default :\n                        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                }\n                context.int += (context.int) - savedPos;\n                if (((int) > 0) && ((context.int) > 0)) {\n                    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                    context.int += byte[].int;\n                } \n            } else {\n                for (int int = 0 ; i < inAvail ; i++) {\n                    final byte[] byte[] = ensureBufferSize(int, context);\n                    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n                    int int = in[(inPos++)];\n                    if (b < 0) {\n                        b += 256;\n                    } \n                    context.long = ((context.long) << 8) + b;\n                    if (0 == (context.int)) {\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n                        if (((int) > 0) && ((int) <= (context.int))) {\n                            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                            context.int += byte[].int;\n                            context.int = 0;\n                        } \n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"inAvail"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:87","type":"CtBinaryOperatorImpl","sourcecode":"(offset < 0) || (len < 0)"},"failures":[],"tindex":"c402462a-3e39-11e6-aaf4-5338de7ec81f","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:384","type":"CtMethodImpl","sourcecode":"private static int fourBytesToInt(final byte[] b, int offset) {\n    if ((offset < 0) || (offset < 0)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)]);\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 16;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24;\n            return value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"offset","len":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtBinaryOperatorImpl","sourcecode":"((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))"},"failures":[],"tindex":"c403097b-3e39-11e6-aaf4-8d8b6ee6a207","method":{"position":"org.apache.commons.codec.language.bm.Languages:169","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Languages getInstance(final java.lang.String languagesResourceName) {\n    if (((languagesResourceName == null) || (languagesResourceName.equalsIgnoreCase(name2))) || (languagesResourceName.equalsIgnoreCase(name2))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>();\n            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(languagesResourceName);\n            if (langIS == null) {\n                throw new java.lang.IllegalArgumentException((\"Unable to resolve required resource: \" + languagesResourceName));\n            } \n            final java.util.Scanner java.util.Scanner = new java.util.Scanner(langIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n            try {\n                boolean boolean = false;\n                while (lsScanner.hasNextLine()) {\n                    final java.lang.String java.lang.String = lsScanner.nextLine().trim();\n                    if (inExtendedComment) {\n                        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = false;\n                        } \n                    } else {\n                        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = true;\n                        } else if ((line.length()) > 0) {\n                            ls.add(line);\n                        } \n                    }\n                }\n            } finally {\n                lsScanner.close();\n            }\n            return new org.apache.commons.codec.language.bm.Languages(java.util.Collections.unmodifiableSet(ls));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"languagesResourceName","name2":"languagesResourceName","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"languagesResourceName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[98,99],"tindex":"c403097c-3e39-11e6-aaf4-71575773386f","method":{"position":"org.apache.commons.codec.binary.Base64:581","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64URLSafe(final byte[] binaryData) {\n    if (binaryData == null) {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[100,101,102,103,104,105,67,78,79,35,38,106,40,41,43,48,107,98,108,109,110,111,112,113,114,115,116,117,51,52,53,118,54,55,56,57,59,65,119,120,121,122,123,124,66,125,126,127,70,68,128,129,130,131,132,94,133,134,135,136,137,91],"tindex":"c403308d-3e39-11e6-aaf4-498fb45c9fcb","method":{"position":"org.apache.commons.codec.binary.StringUtils:234","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf8(final java.lang.String string) {\n    if (string == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[],"tindex":"c403308e-3e39-11e6-aaf4-671391808790","method":{"position":"org.apache.commons.codec.digest.HmacUtils:444","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key != null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest).doFinal();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[138,139,140,101,102,141,142,143,144,145,98,146,147,148,149,150,151,99,152,153,154,155,156,157,158,108,109,110,111,114,116,53,65],"tindex":"c403308f-3e39-11e6-aaf4-874dbfb4ab92","method":{"position":"org.apache.commons.codec.binary.Base64:639","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe) {\n    if (binaryData == null) {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, urlSafe, java.lang.Integer.java.lang.Integer.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:189","type":"CtBinaryOperatorImpl","sourcecode":"(sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))"},"failures":[],"tindex":"c4033090-3e39-11e6-aaf4-fdf1e605f0f3","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:182","type":"CtMethodImpl","sourcecode":"private static final int encodeQuotedPrintable(final int b, final java.io.ByteArrayOutputStream buffer) {\n    if ((b >= b) && (sumLength <= b)) {\n        {\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), 16));\n            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), 16));\n            buffer.write(hex1);\n            buffer.write(hex2);\n            return 3;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sumLength":"b","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"b","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"c40357a1-3e39-11e6-aaf4-a77bdc0c3985","method":{"position":"org.apache.commons.codec.language.Caverphone:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.caverphone(str);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\")\"))"},"failures":[],"tindex":"c40357a2-3e39-11e6-aaf4-3f324a0d64e3","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:758","type":"CtMethodImpl","sourcecode":"private int handleZ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (!(value.endsWith(\")\"))) {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                result.append('J');\n                index += 2;\n            } else {\n                if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n                    result.append(\"S\", \"TS\");\n                } else {\n                    result.append('S');\n                }\n                index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isWhitespace(ch)"},"failures":[],"tindex":"c40357a3-3e39-11e6-aaf4-d3d507cfe1cb","method":{"position":"org.apache.commons.codec.language.Nysiis:100","type":"CtMethodImpl","sourcecode":"private static boolean isVowel(final char c) {\n    if (java.lang.Character.isWhitespace(c)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((((c == 'A') || (c == 'E')) || (c == 'I')) || (c == 'O')) || (c == 'U');\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:289","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"c40357a4-3e39-11e6-aaf4-b783bfbbacb8","method":{"position":"org.apache.commons.codec.digest.DigestUtils:399","type":"CtMethodImpl","sourcecode":"public static byte[] sha1(final java.lang.String data) {\n    if (data == null) {\n        {\n            if (data.startsWith(data)) {\n                {\n                    return org.apache.commons.codec.digest.DigestUtils.sha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[],"tindex":"c4037eb5-3e39-11e6-aaf4-c5accd575619","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:978","type":"CtMethodImpl","sourcecode":"public void appendPrimary(final java.lang.String value) {\n    if (value.equalsIgnoreCase(value)) {\n        {\n            final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n            if ((value.length()) <= addChars) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } else {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"value","name1":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\"]\"))"},"failures":[159,160,161,162,97,163],"tindex":"c4037eb6-3e39-11e6-aaf4-5b1fb351d95e","method":{"position":"org.apache.commons.codec.net.QCodec:246","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (!(str.endsWith(\"]\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return encode(str, getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:334","type":"CtInvocationImpl","sourcecode":"finalRules.isEmpty()"},"failures":[8],"tindex":"c4037eb7-3e39-11e6-aaf4-3d881307861f","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:329","type":"CtMethodImpl","sourcecode":"private org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder applyFinalRules(final org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder phonemeBuilder, final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> finalRules) {\n    if (finalRules.isEmpty()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (finalRules == null) {\n                throw new java.lang.NullPointerException(\"finalRules can not be null\");\n            } \n            if (finalRules.isEmpty()) {\n                return phonemeBuilder;\n            } \n            final java.util.Map<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.Map<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.TreeMap<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme>(org.apache.commons.codec.language.bm.Rule.Phoneme.org.apache.commons.codec.language.bm.Rule.Phoneme.java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme>);\n            for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeBuilder.getPhonemes()) {\n                org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(phoneme.getLanguages());\n                final java.lang.String java.lang.String = phoneme.getPhonemeText().toString();\n                for (int int = 0 ; i < (phonemeText.length()) ; ) {\n                    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , int).invoke();\n                    final boolean boolean = rulesApplication.isFound();\n                    subBuilder = rulesApplication.getPhonemeBuilder();\n                    if (!found) {\n                        subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n                    } \n                    i = rulesApplication.getI();\n                }\n                for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n                    if (phonemes.containsKey(newPhoneme)) {\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n                        phonemes.put(mergedPhoneme, mergedPhoneme);\n                    } else {\n                        phonemes.put(newPhoneme, newPhoneme);\n                    }\n                }\n            }\n            return new org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder(phonemes.keySet());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"finalRules":"finalRules"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"c403a5c8-3e39-11e6-aaf4-47391638d95f","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:140","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(keyBytes)) {\n        {\n            if (keyBytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (keyBytes == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))));\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"keyBytes"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:116","type":"CtBinaryOperatorImpl","sourcecode":"ascii == null"},"failures":[],"tindex":"c403a5c9-3e39-11e6-aaf4-8fd31b078a1a","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:412","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        {\n            if (obj == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n                    } \n                    return encode(((java.lang.String)(obj)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"c403a5ca-3e39-11e6-aaf4-d59133bf7150","method":{"position":"org.apache.commons.codec.binary.Hex:108","type":"CtMethodImpl","sourcecode":"public static char[] encodeHex(final byte[] data) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHex(data, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:347","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AEIJOUY, chr)"},"failures":[80,81,82,83,84,164,85,86,87,89,90],"tindex":"c403a5cb-3e39-11e6-aaf4-1b693ac20b3b","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:299","type":"CtMethodImpl","sourcecode":"private static boolean arrayContains(final char[] arr, final char key) {\n    if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(arr, key)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final char char : arr) {\n                if (element == key) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.ColognePhonetic.AEIJOUY":"arr","chr":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:450","type":"CtFieldReadImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.this.concat"},"failures":[165,166,167,168],"tindex":"c403ccdc-3e39-11e6-aaf4-99868b8e6a4c","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:220","type":"CtMethodImpl","sourcecode":"private static int encodeByte(final int b, final boolean encode, final java.io.ByteArrayOutputStream buffer) {\n    if (encode) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (encode) {\n                return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n            } else {\n                buffer.write(b);\n                return 1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"concat":"encode"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[138,139,140,169],"tindex":"c403ccdd-3e39-11e6-aaf4-f3ff2f9ba3d1","method":{"position":"org.apache.commons.codec.net.BCodec:92","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == bytes) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.Base64.encodeBase64(bytes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"bytes","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"c403ccde-3e39-11e6-aaf4-f7acf5d109d7","method":{"position":"org.apache.commons.codec.digest.DigestUtils:687","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final byte[] data) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[111],"tindex":"c403ccdf-3e39-11e6-aaf4-1bbd4eb4df9d","method":{"position":"org.apache.commons.codec.binary.Base64:594","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeBase64URLSafeString(final byte[] binaryData) {\n    if (binaryData == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtBinaryOperatorImpl","sourcecode":"index > 0"},"failures":[101,79],"tindex":"c403f3f0-3e39-11e6-aaf4-33d1c2902918","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final int i) throws java.io.IOException {\n    if (i > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            byte[][0] = ((byte)(i));\n            write(byte[], 0, 1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"i"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:735","type":"CtBinaryOperatorImpl","sourcecode":"bigInt == null"},"failures":[148,149,150,151],"tindex":"c403f3f1-3e39-11e6-aaf4-573b86f104b7","method":{"position":"org.apache.commons.codec.binary.Base64:734","type":"CtMethodImpl","sourcecode":"public static byte[] encodeInteger(final java.math.BigInteger bigInt) {\n    if (bigInt == null) {\n        {\n            if (bigInt == null) {\n                throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\");\n            } \n            return org.apache.commons.codec.binary.Base64.encodeBase64(org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInt), false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[],"tindex":"c403f3f2-3e39-11e6-aaf4-8bc37213a338","method":{"position":"org.apache.commons.codec.language.Soundex:245","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic void setMaxLength(final int maxLength) {\n    if (maxLength == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((maxLength < 0) || (maxLength < 0)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.codec.language.Soundex.this.int = maxLength;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"maxLength"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:279","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[136,137],"tindex":"c403f3f3-3e39-11e6-aaf4-21958be5f1db","method":{"position":"org.apache.commons.codec.digest.HmacUtils:789","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac updateHmac(final javax.crypto.Mac mac, final java.lang.String valueToDigest) {\n    if ((valueToDigest.length()) == 0) {\n        {\n            mac.reset();\n            mac.update(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n            return mac;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"valueToDigest"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:225","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[170,171,172,173,174],"tindex":"c403f3f4-3e39-11e6-aaf4-f1fab5bfb32c","method":{"position":"org.apache.commons.codec.net.URLCodec:243","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return encode(str, getDefaultCharset());\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtBinaryOperatorImpl","sourcecode":"((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)"},"failures":[],"tindex":"c4041b05-3e39-11e6-aaf4-e16fe7ceb51f","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:376","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (((obj.length()) != 1) || ((obj.length()) != 1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (obj instanceof byte[]) {\n                return decode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"leftCharacter":"obj","rightCharacter":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtInvocationImpl","sourcecode":"str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[175,176,177,178,179,180],"tindex":"c4041b06-3e39-11e6-aaf4-a7acee5b89cd","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source.startsWith(source)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return null;\n            } \n            return soundex(source, false)[0];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[],"tindex":"c4041b07-3e39-11e6-aaf4-7321b8151ef6","method":{"position":"org.apache.commons.codec.binary.Hex:295","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(object, 0, 5, \"CHORE\")) {\n        {\n            try {\n                final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n                return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n            } catch (final java.lang.ClassCastException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[0,1,2,3,4,5,8,9,10,11,12,13,14,17,18,20,24,25],"tindex":"c4041b08-3e39-11e6-aaf4-21a97c397e74","method":{"position":"org.apache.commons.codec.language.bm.Rule:253","type":"CtMethodImpl","sourcecode":"private static java.util.Scanner createScanner(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang == null) {\n        {\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.createResourceName(nameType, rt, lang);\n            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName);\n            if (rulesIS == null) {\n                throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n            } \n            return new java.util.Scanner(rulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"lang"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:77","type":"CtBinaryOperatorImpl","sourcecode":"(cs1 instanceof java.lang.String) && (cs2 instanceof java.lang.String)"},"failures":[],"tindex":"c4044219-3e39-11e6-aaf4-1121e6c842f1","method":{"position":"org.apache.commons.codec.language.AbstractCaverphone:56","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if ((source instanceof java.lang.String) && (source instanceof java.lang.String)) {\n        {\n            if (!(source instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.AbstractCaverphone.this.encode(((java.lang.String)(source)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs1":"source","cs2":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:382","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"c404421a-3e39-11e6-aaf4-a5e3c7d22d09","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:240","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected char[] copyData(final int start, final int length) {\n    if (length < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char[] char[] = new char[length];\n            java.lang.System.arraycopy(char[], start, newData, 0, length);\n            return newData;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:126","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'R'"},"failures":[181,182,183,184],"tindex":"c404421b-3e39-11e6-aaf4-374b38326081","method":{"position":"org.apache.commons.codec.binary.Hex:77","type":"CtMethodImpl","sourcecode":"public static byte[] decodeHex(final char[] data) throws org.apache.commons.codec.DecoderException {\n    if ((data[1]) == 'R') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            final int int = data.int;\n            if ((len & 1) != 0) {\n                throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n            } \n            final byte[] byte[] = new byte[len >> 1];\n            for (int int = 0, int int = 0 ; j < len ; i++) {\n                int int = (org.apache.commons.codec.binary.Hex.toDigit(data[j], j)) << 4;\n                j++;\n                f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j));\n                j++;\n                out[i] = ((byte)(f & 255));\n            }\n            return out;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[185],"tindex":"c404421c-3e39-11e6-aaf4-6ba4345b48e1","method":{"position":"org.apache.commons.codec.binary.StringUtils:216","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Le(final java.lang.String string) {\n    if (string == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221],"tindex":"c404421d-3e39-11e6-aaf4-7b09955e7e72","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:294","type":"CtMethodImpl","sourcecode":"int leftToRightThenRightToLeftProcessing(final java.lang.String name1, final java.lang.String name2) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(name2, 0, 2, \"MC\")) {\n        {\n            final char[] char[] = name1.toCharArray();\n            final char[] char[] = name2.toCharArray();\n            final int int = (name1.length()) - 1;\n            final int int = (name2.length()) - 1;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            for (int int = 0 ; i < (name1Char.int) ; i++) {\n                if (i > name2Size) {\n                    break;\n                } \n                name1LtRStart = name1.substring(i, (i + 1));\n                name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n                name2RtLStart = name2.substring(i, (i + 1));\n                name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n                if (name1LtRStart.equals(name2RtLStart)) {\n                    name1Char[i] = ' ';\n                    name2Char[i] = ' ';\n                } \n                if (name1LtREnd.equals(name2RtLEnd)) {\n                    name1Char[(name1Size - i)] = ' ';\n                    name2Char[(name2Size - i)] = ' ';\n                } \n            }\n            final java.lang.String java.lang.String = new java.lang.String(name1Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            final java.lang.String java.lang.String = new java.lang.String(name2Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            if ((strA.length()) > (strB.length())) {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())));\n            } else {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\")\"))"},"failures":[138,139,140,159,160,161,97,163],"tindex":"c404692e-3e39-11e6-aaf4-e7fe5d5e4c51","method":{"position":"org.apache.commons.codec.net.RFC1522Codec:68","type":"CtMethodImpl","sourcecode":"protected java.lang.String encodeText(final java.lang.String text, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if (!(text.endsWith(\")\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (text == null) {\n                return null;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String);\n            buffer.append(charset);\n            buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char);\n            buffer.append(org.apache.commons.codec.net.RFC1522Codec.this.getEncoding());\n            buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char);\n            final byte[] byte[] = org.apache.commons.codec.net.RFC1522Codec.this.doEncoding(text.getBytes(charset));\n            buffer.append(org.apache.commons.codec.binary.StringUtils.newStringUsAscii(rawData));\n            buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String);\n            return buffer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"text"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"c404692f-3e39-11e6-aaf4-83f4b4ba23ee","method":{"position":"org.apache.commons.codec.language.bm.Lang:202","type":"CtMethodImpl","sourcecode":"public java.lang.String guessLanguage(final java.lang.String text) {\n    if (text == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text);\n            return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"text"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[],"tindex":"c4046930-3e39-11e6-aaf4-e31cc7cdc6f2","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:97","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object raw) throws org.apache.commons.codec.EncoderException {\n    if (raw.equalsIgnoreCase(raw)) {\n        {\n            if (!(raw instanceof byte[])) {\n                throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n            } \n            return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"raw","name1":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:132","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"c4046931-3e39-11e6-aaf4-9bab180fac57","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:291","type":"CtMethodImpl","sourcecode":"int readResults(final byte[] b, final int bPos, final int bAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (bAvail < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((context.byte[]) != null) {\n                final int int = java.lang.Math.min(available(context), bAvail);\n                java.lang.System.arraycopy(context.byte[], context.int, b, bPos, len);\n                context.int += len;\n                if ((context.int) >= (context.int)) {\n                    context.byte[] = null;\n                } \n                return len;\n            } \n            return context.boolean ? org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int : 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bAvail"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[159,160,161,222,163],"tindex":"c4049042-3e39-11e6-aaf4-bba8b3f8ba3a","method":{"position":"org.apache.commons.codec.net.QCodec:169","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            boolean boolean = false;\n            for (final byte byte : bytes) {\n                if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                    hasUnderscores = true;\n                    break;\n                } \n            }\n            if (hasUnderscores) {\n                final byte[] byte[] = new byte[bytes.int];\n                for (int int = 0 ; i < (bytes.int) ; i++) {\n                    final byte byte = bytes[i];\n                    if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                        tmp[i] = b;\n                    } else {\n                        tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                    }\n                }\n                return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n            } \n            return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[223,224,225,28,29,30,31,32],"tindex":"c4049043-3e39-11e6-aaf4-1d2a9c0b0c21","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:568","type":"CtMethodImpl","sourcecode":"private int handleP(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value.endsWith(value)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                result.append('F');\n                index += 2;\n            } else {\n                result.append('P');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:214","type":"CtBinaryOperatorImpl","sourcecode":"((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name1))"},"failures":[],"tindex":"c4049044-3e39-11e6-aaf4-5503cf4497ca","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:421","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEqual(final java.lang.String text1, final java.lang.String text2) {\n    if (((text2 == null) || (text1.equalsIgnoreCase(name1))) || (text1.equalsIgnoreCase(name1))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return colognePhonetic(text1).equals(colognePhonetic(text2));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"text1","name1":"text2","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"text1"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"c4049045-3e39-11e6-aaf4-83cb1c24d141","method":{"position":"org.apache.commons.codec.digest.DigestUtils:499","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final byte[] data) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[226],"tindex":"c4049046-3e39-11e6-aaf4-33a0c61550cd","method":{"position":"org.apache.commons.codec.language.Metaphone:402","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return metaphone(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:228","type":"CtUnaryOperatorImpl","sourcecode":"!(rt.equals(org.apache.commons.codec.language.bm.RuleType.RULES))"},"failures":[4,5,7,8,9,10,13,14,17,18,19,20],"tindex":"c404b757-3e39-11e6-aaf4-63fa8cbb0d72","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:160","type":"CtMethodImpl","sourcecode":"public void setRuleType(final org.apache.commons.codec.language.bm.RuleType ruleType) {\n    if (!(ruleType.equals(ruleType))) {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , ruleType , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"ruleType","rt":"ruleType"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[],"tindex":"c404b758-3e39-11e6-aaf4-9734ab62a79c","method":{"position":"org.apache.commons.codec.language.bm.Rule:531","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input.endsWith(input)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"input","line":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[],"tindex":"c404b759-3e39-11e6-aaf4-71956913740e","method":{"position":"org.apache.commons.codec.digest.DigestUtils:362","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] sha(final java.lang.String data) {\n    if (!(data.contains(\"[\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtInvocationImpl","sourcecode":"replacedName.contains(dc)"},"failures":[],"tindex":"c404b75a-3e39-11e6-aaf4-c18377d9d188","method":{"position":"org.apache.commons.codec.binary.StringUtils:279","type":"CtMethodImpl","sourcecode":"public static java.lang.String newString(final byte[] bytes, final java.lang.String charsetName) {\n    if (charsetName.contains(charsetName)) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            try {\n                return new java.lang.String(bytes , charsetName);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacedName":"charsetName","dc":"charsetName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[227],"tindex":"c404b75b-3e39-11e6-aaf4-b5d8db9d1cd6","method":{"position":"org.apache.commons.codec.digest.HmacUtils:134","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha512(final byte[] key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:268","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"c404de6c-3e39-11e6-aaf4-a71c0a0d90da","method":{"position":"org.apache.commons.codec.digest.DigestUtils:388","type":"CtMethodImpl","sourcecode":"public static byte[] sha1(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha1Digest(), data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Crypt:68","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX)"},"failures":[228,229,230,231,232,165,233,166,167,234,235,168],"tindex":"c404de6d-3e39-11e6-aaf4-7b95e31c157b","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:429","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str.startsWith(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX":"str","salt":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:447","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"c404de6e-3e39-11e6-aaf4-8fbbfcf183e7","method":{"position":"org.apache.commons.codec.digest.DigestUtils:761","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String shaHex(final java.lang.String data) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:394","type":"CtBinaryOperatorImpl","sourcecode":"(code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))"},"failures":[],"tindex":"c404de6f-3e39-11e6-aaf4-a99567929064","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:234","type":"CtMethodImpl","sourcecode":"public void addRight(final char chr) {\n    if ((chr != '-') && ((((chr != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            char[][int] = chr;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"code":"chr","lastCode":"chr"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[236],"tindex":"c404de70-3e39-11e6-aaf4-bd3d9b35ec4c","method":{"position":"org.apache.commons.codec.net.BCodec:158","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) throws org.apache.commons.codec.EncoderException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230951676/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } \n            return encode(value, org.apache.commons.codec.net.BCodec.this.getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":119,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":117,"org.apache.commons.codec.binary.HexTest.testCustomCharset":137,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":180,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":16,"org.apache.commons.codec.language.NysiisTest.testSnat":37,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":15,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":174,"org.apache.commons.codec.language.NysiisTest.testEncodeEmpty":160,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":173,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty":144,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":54,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":53,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":25,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":161,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":12,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":48,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":183,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":11,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":129,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":166,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":83,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":60,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":114,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":135,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":58,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":61,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData":153,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt":133,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":101,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":67,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":73,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":69,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":122,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse":89,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":121,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":185,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":84,"org.apache.commons.codec.language.NysiisTest.testCap":26,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":55,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":85,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":94,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":100,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":44,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":8,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":120,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt":131,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":167,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":98,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":155,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":99,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":124,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":1,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":82,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":169,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":181,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":127,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":0,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":104,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":140,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully":90,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":21,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":81,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":128,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":59,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":148,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":172,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":17,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":176,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":107,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":14,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":156,"org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull":87,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":182,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":70,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":115,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8":71,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":152,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":171,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":63,"org.apache.commons.codec.binary.HexTest.testDecodeArrayOddCharacters":142,"org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull":77,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":165,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":20,"org.apache.commons.codec.language.NysiisTest.testTranan":41,"org.apache.commons.codec.language.NysiisTest.testEncodeNull":159,"org.apache.commons.codec.language.NysiisTest.testFal":29,"org.apache.commons.codec.language.NysiisTest.testSnad":36,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":79,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":130,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":154,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":6,"org.apache.commons.codec.language.NysiisTest.testLocaleIndependence":43,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":184,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":111,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":110,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":146,"org.apache.commons.codec.binary.HexTest.testDencodeEmpty":136,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":116,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":47,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":68,"org.apache.commons.codec.language.NysiisTest.testDropBy":39,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":157,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":178,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":126,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":175,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":187,"org.apache.commons.codec.binary.Base64Test.testBase64":66,"org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull":134,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":10,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":52,"org.apache.commons.codec.binary.HexTest.testDecodeStringOddCharacters":141,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":23,"org.apache.commons.codec.binary.Base64Test.testUUID":96,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":186,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":18,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":102,"org.apache.commons.codec.binary.Base64Test.testSingletons":108,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":75,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":92,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":168,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":162,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":49,"org.apache.commons.codec.binary.Base64Test.testPairs":95,"org.apache.commons.codec.binary.Base64Test.testConstructors":64,"org.apache.commons.codec.language.NysiisTest.testRule2":31,"org.apache.commons.codec.language.NysiisTest.testRule1":30,"org.apache.commons.codec.language.NysiisTest.testRule7":34,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":74,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":145,"org.apache.commons.codec.language.NysiisTest.testRule6":33,"org.apache.commons.codec.language.NysiisTest.testRule5":32,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":45,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":112,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt":132,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":38,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":62,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty":143,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":149,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":188,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters1":139,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":179,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":138,"org.apache.commons.codec.language.NysiisTest.testBran":35,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":42,"org.apache.commons.codec.binary.Base64Test.testCodec68":109,"org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull":86,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":57,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":9,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":123,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":164,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":105,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":78,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull":147,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":3,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":150,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":5,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":106,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":125,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":170,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":19,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":13,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":72,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":56,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":113,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":51,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse":91,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":93,"org.apache.commons.codec.language.NysiisTest.testDad":27,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":76,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":158,"org.apache.commons.codec.language.NysiisTest.testOthers":40,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":65,"org.apache.commons.codec.language.SoundexTest.testDifference":151,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":177,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":24,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":163,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":7,"org.apache.commons.codec.language.NysiisTest.testDan":28,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":4,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":46,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":22,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":103,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch":88,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":97,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":80,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":118},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:145","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[0,1],"tindex":"6dec663b-2ebb-11e6-99fa-21082208d156","method":{"position":"org.apache.commons.codec.digest.HmacUtils:245","type":"CtMethodImpl","sourcecode":"public static byte[] hmacMd5(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key.endsWith(valueToDigest)) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacMd5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"valueToDigest","line":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[2],"tindex":"6ded027c-2ebb-11e6-99fa-df30cf220450","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof byte[]) {\n                return encode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtBinaryOperatorImpl","sourcecode":"(content.length()) == 0"},"failures":[],"tindex":"6ded298d-2ebb-11e6-99fa-03ece7ebcf95","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:781","type":"CtMethodImpl","sourcecode":"private boolean conditionC0(final java.lang.String value, final int index) {\n    if ((value.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHIA\")) {\n                return true;\n            } else if (index <= 1) {\n                return false;\n            } else if (isVowel(charAt(value, (index - 2)))) {\n                return false;\n            } else if (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ACH\"))) {\n                return false;\n            } else {\n                final char char = charAt(value, (index + 2));\n                return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"content":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"6ded509e-2ebb-11e6-99fa-b3417d01dd5f","method":{"position":"org.apache.commons.codec.language.bm.Rule:319","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.codec.language.bm.Rule> getInstance(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Rule.getInstance(nameType, rt, org.apache.commons.codec.language.bm.Languages.LanguageSet.from(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(lang))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"lang"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:68","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX)"},"failures":[],"tindex":"6ded77af-2ebb-11e6-99fa-3b5f889da6b6","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:262","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String original) {\n    if (original == null) {\n        {\n            if (original.startsWith(original)) {\n                {\n                    return org.apache.commons.codec.digest.UnixCrypt.crypt(original.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX":"original","salt":"original"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtInvocationImpl","sourcecode":"replacedName.contains(dc)"},"failures":[3,4,5],"tindex":"6ded77b0-2ebb-11e6-99fa-cbfeadd13ecb","method":{"position":"org.apache.commons.codec.net.BCodec:119","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if ((value.length()) == 0) {\n        {\n            if (value.contains(value)) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (value == null) {\n                        return null;\n                    } \n                    return encodeText(value, charset);\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacedName":"value","dc":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"6ded9ec1-2ebb-11e6-99fa-5364cde9235d","method":{"position":"org.apache.commons.codec.digest.HmacUtils:601","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha384Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[],"tindex":"6dedc5d2-2ebb-11e6-99fa-77bca1099f32","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:377","type":"CtMethodImpl","sourcecode":"private java.lang.String cleanup(final java.lang.String input) {\n    if (!(input.contains(\"[\"))) {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (char char : input.toCharArray()) {\n                if (java.lang.Character.isWhitespace(ch)) {\n                    continue;\n                } \n                ch = java.lang.Character.toLowerCase(ch);\n                if ((boolean) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.containsKey(ch))) {\n                    ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch);\n                } \n                sb.append(ch);\n            }\n            return sb.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:347","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[],"tindex":"6dedc5d3-2ebb-11e6-99fa-89455d447334","method":{"position":"org.apache.commons.codec.binary.Base32:536","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isInAlphabet(final byte octet) {\n    if (octet == octet) {\n        {\n            return ((octet >= 0) && (octet < (byte[].int))) && ((byte[][octet]) != (-1));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"octet","pad":"octet"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[6],"tindex":"6dedece4-2ebb-11e6-99fa-674619c093da","method":{"position":"org.apache.commons.codec.binary.Base64:537","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final byte[] arrayOctet) {\n    if (arrayOctet == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                if ((!(org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i]))) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"arrayOctet"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:248","type":"CtBinaryOperatorImpl","sourcecode":"(cnt & 1) != 0"},"failures":[],"tindex":"6dee13f5-2ebb-11e6-99fa-f79078ca9991","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:405","type":"CtMethodImpl","sourcecode":"private static void permOp(int a, int b, final int n, final int m, final int[] results) {\n    if ((m & 1) != 0) {\n        {\n            final int int = ((a >>> n) ^ b) & m;\n            a ^= t << n;\n            b ^= t;\n            results[0] = a;\n            results[1] = b;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cnt":"m"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:801","type":"CtBinaryOperatorImpl","sourcecode":"index != 0"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"6dee13f6-2ebb-11e6-99fa-15459df259e6","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final byte[] b, final int offset, final int len) throws java.io.IOException {\n    if (b == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (offset != 0) {\n                {\n                    if (b == null) {\n                        throw new java.lang.NullPointerException();\n                    } else if ((offset < 0) || (len < 0)) {\n                        throw new java.lang.IndexOutOfBoundsException();\n                    } else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n                        throw new java.lang.IndexOutOfBoundsException();\n                    } else if (len > 0) {\n                        if (boolean) {\n                            org.apache.commons.codec.binary.BaseNCodec.encode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        } else {\n                            org.apache.commons.codec.binary.BaseNCodec.decode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        }\n                        flush(false);\n                    } \n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"offset"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Crypt:72","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX)"},"failures":[],"tindex":"6dee3b07-2ebb-11e6-99fa-7b39c8bcd166","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if (object.startsWith(object)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(object instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.java.lang.String.java.lang.Class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"));\n            } \n            return encode(((java.lang.String)(object)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"object","org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX":"object"},"type":"special","returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"6dee6218-2ebb-11e6-99fa-f3a84da9db53","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:352","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(bytes)) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (int int = 0 ; i < (bytes.int) ; i++) {\n                final int int = bytes[i];\n                if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n                    try {\n                        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n                            continue;\n                        } \n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                        buffer.write(((char)((u << 4) + l)));\n                    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n                    }\n                } else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n                    buffer.write(b);\n                } \n            }\n            return buffer.toByteArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"bytes"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"6dee8929-2ebb-11e6-99fa-e9f645e86664","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:277","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String original, final java.lang.String salt) {\n    if (salt.startsWith((salt + \" \"))) {\n        {\n            if (salt == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.UnixCrypt.crypt(original.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"salt"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:191","type":"CtBinaryOperatorImpl","sourcecode":"(sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))"},"failures":[],"tindex":"6deeb03a-2ebb-11e6-99fa-4dd676716a96","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:281","type":"CtMethodImpl","sourcecode":"private static int[] body(final int[] schedule, final int eSwap0, final int eSwap1) {\n    if ((eSwap0 >= eSwap0) && (sumLength <= eSwap0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            int int = 0;\n            int int = 0;\n            for (int int = 0 ; j < 25 ; j++) {\n                for (int int = 0 ; i < 32 ; i += 4) {\n                    left = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(left, right, i, eSwap0, eSwap1, schedule);\n                    right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule);\n                }\n                t = left;\n                left = right;\n                right = t;\n            }\n            t = right;\n            right = (left >>> 1) | (left << 31);\n            left = (t >>> 1) | (t << 31);\n            final int[] int[] = new int[2];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 1, 1431655765, results);\n            right = results[0];\n            left = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 8, 16711935, results);\n            left = results[0];\n            right = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 2, 858993459, results);\n            right = results[0];\n            left = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 16, 65535, results);\n            left = results[0];\n            right = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 4, 252645135, results);\n            right = results[0];\n            left = results[1];\n            final int[] int[] = new int[2];\n            out[0] = left;\n            out[1] = right;\n            return out;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sumLength":"eSwap0","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"eSwap0","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"eSwap0"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[],"tindex":"6deed74b-2ebb-11e6-99fa-bb4fc9cd9ce4","method":{"position":"org.apache.commons.codec.digest.DigestUtils:309","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:296","type":"CtBinaryOperatorImpl","sourcecode":"lastChar == 'S'"},"failures":[20,21,22,23],"tindex":"6deefe5c-2ebb-11e6-99fa-7d87140bc8d2","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:865","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (ch == 'S') {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String.indexOf(ch)) != (-1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lastChar":"ch"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"tindex":"6deefe5d-2ebb-11e6-99fa-47dfed57313f","method":{"position":"org.apache.commons.codec.language.Nysiis:227","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        {\n            return org.apache.commons.codec.language.Nysiis.this.nysiis(str);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtInvocationImpl","sourcecode":"target.equals(element)"},"failures":[44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"tindex":"6def256e-2ebb-11e6-99fa-197e9c05f1f7","method":{"position":"org.apache.commons.codec.language.bm.Rule:381","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.PhonemeExpr parsePhonemeExpr(final java.lang.String ph) {\n    if (ph.equals(ph)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ph.startsWith(\"(\")) {\n                if (!(ph.endsWith(\")\"))) {\n                    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n                } \n                final java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();\n                final java.lang.String java.lang.String = ph.substring(1, ((ph.length()) - 1));\n                for (final java.lang.String java.lang.String : body.split(\"[|]\")) {\n                    phs.add(org.apache.commons.codec.language.bm.Rule.parsePhoneme(part));\n                }\n                if ((body.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n                    phs.add(new org.apache.commons.codec.language.bm.Rule.Phoneme(\"\" , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet));\n                } \n                return new org.apache.commons.codec.language.bm.Rule.PhonemeList(phs);\n            } else {\n                return org.apache.commons.codec.language.bm.Rule.parsePhoneme(ph);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"ph","element":"ph"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6def4c7f-2ebb-11e6-99fa-03b5c4891179","method":{"position":"org.apache.commons.codec.digest.DigestUtils:452","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final byte[] data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.getSha256Digest().digest(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,12,13,19],"tindex":"6def7390-2ebb-11e6-99fa-57adfb9b97cb","method":{"position":"org.apache.commons.codec.binary.StringUtils:256","type":"CtMethodImpl","sourcecode":"private static java.lang.String newString(final byte[] bytes, final java.nio.charset.Charset charset) {\n    if (bytes == null) {\n        {\n            return bytes == null ? null : new java.lang.String(bytes , charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:417","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[77],"tindex":"6def7391-2ebb-11e6-99fa-fd6169bab3ef","method":{"position":"org.apache.commons.codec.net.QCodec:225","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if (str.startsWith(str)) {\n        {\n            if (charset.startsWith(str)) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    try {\n                        return encodeText(str, charset);\n                    } catch (final java.io.UnsupportedEncodingException e) {\n                        throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n                    }\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"str","line":"charset"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[78,79],"tindex":"6def9aa2-2ebb-11e6-99fa-cd8c2a16cea9","method":{"position":"org.apache.commons.codec.digest.HmacUtils:62","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacMd5(final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:392","type":"CtBinaryOperatorImpl","sourcecode":"(body.startsWith(\"|\")) || (body.endsWith(\"|\"))"},"failures":[],"tindex":"6def9aa3-2ebb-11e6-99fa-b362cb8567b3","method":{"position":"org.apache.commons.codec.digest.HmacUtils:352","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (valueToDigest.startsWith(key)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((key.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"body":"key"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"6defc1b4-2ebb-11e6-99fa-f55c2a54aa18","method":{"position":"org.apache.commons.codec.language.bm.Rule:264","type":"CtMethodImpl","sourcecode":"private static java.util.Scanner createScanner(final java.lang.String lang) {\n    if (lang == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.String java.lang.String = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang);\n            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName);\n            if (rulesIS == null) {\n                throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n            } \n            return new java.util.Scanner(rulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"lang"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:200","type":"CtBinaryOperatorImpl","sourcecode":"value instanceof java.lang.String"},"failures":[],"tindex":"6defc1b5-2ebb-11e6-99fa-01fe973f2ece","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:133","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n            } \n            return soundex(((java.lang.String)(obj)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"obj"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:189","type":"CtBinaryOperatorImpl","sourcecode":"('H' == hwChar) || ('W' == hwChar)"},"failures":[],"tindex":"6defc1b6-2ebb-11e6-99fa-d30a98333a0a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:946","type":"CtMethodImpl","sourcecode":"public void append(final char value) {\n    if (('H' == value) || ('W' == hwChar)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendPrimary(value);\n            appendAlternate(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"hwChar":"value"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[80,81,82,83],"tindex":"6defe8c7-2ebb-11e6-99fa-2d9735ce3ea0","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:384","type":"CtMethodImpl","sourcecode":"private static int fourBytesToInt(final byte[] b, int offset) {\n    if (b == null) {\n        {\n            int int = org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)]);\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 16;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24;\n            return value;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"b"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:762","type":"CtBinaryOperatorImpl","sourcecode":"((bigInt.bitLength()) % 8) == 0"},"failures":[84,85],"tindex":"6defe8c8-2ebb-11e6-99fa-a72426ed02fc","method":{"position":"org.apache.commons.codec.binary.Base64:748","type":"CtMethodImpl","sourcecode":"static byte[] toIntegerBytes(final java.math.BigInteger bigInt) {\n    if (((bigInt.bitLength()) % 8) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = bigInt.bitLength();\n            bitlen = ((bitlen + 7) >> 3) << 3;\n            final byte[] byte[] = bigInt.toByteArray();\n            if ((((bigInt.bitLength()) % 8) != 0) && ((((bigInt.bitLength()) / 8) + 1) == (bitlen / 8))) {\n                return bigBytes;\n            } \n            int int = 0;\n            int int = bigBytes.int;\n            if (((bigInt.bitLength()) % 8) == 0) {\n                startSrc = 1;\n                len--;\n            } \n            final int int = (bitlen / 8) - len;\n            final byte[] byte[] = new byte[bitlen / 8];\n            java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n            return resizedBytes;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtInvocationImpl","sourcecode":"str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[86,87],"tindex":"6df00fd9-2ebb-11e6-99fa-c30e14f24a33","method":{"position":"org.apache.commons.codec.net.BCodec:176","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String value) throws org.apache.commons.codec.DecoderException {\n    if (value.startsWith(value)) {\n        {\n            if (value == null) {\n                return null;\n            } \n            try {\n                return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[],"tindex":"6df00fda-2ebb-11e6-99fa-83d1380050a4","method":{"position":"org.apache.commons.codec.language.bm.Rule:402","type":"CtMethodImpl","sourcecode":"private static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> parseRules(final java.util.Scanner scanner, final java.lang.String location) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(location, 0, 5, \"CHORE\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = new java.util.HashMap<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>();\n            int int = 0;\n            boolean boolean = false;\n            while (scanner.hasNextLine()) {\n                currentLine++;\n                final java.lang.String java.lang.String = scanner.nextLine();\n                java.lang.String java.lang.String = rawLine;\n                if (inMultilineComment) {\n                    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                        inMultilineComment = false;\n                    } \n                } else {\n                    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                        inMultilineComment = true;\n                    } else {\n                        final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                        if (cmtI >= 0) {\n                            line = line.substring(0, cmtI);\n                        } \n                        line = line.trim();\n                        if ((line.length()) == 0) {\n                            continue;\n                        } \n                        if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                            final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n                            if (incl.contains(\" \")) {\n                                throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n                            } else {\n                                lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n                            }\n                        } else {\n                            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                            if ((parts.int) != 4) {\n                                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                            } else {\n                                try {\n                                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                                    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                                    final int int = currentLine;\n                                    final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                                        private final int myLine = cLine;\n\n                                        private final java.lang.String loc = location;\n\n                                        @java.lang.Override\n                                        public java.lang.String toString() {\n                                            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                                            sb.append(\"Rule\");\n                                            sb.append(\"{line=\").append(int);\n                                            sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                                            sb.append(\", pat='\").append(pat).append('\\'');\n                                            sb.append(\", lcon='\").append(lCon).append('\\'');\n                                            sb.append(\", rcon='\").append(rCon).append('\\'');\n                                            sb.append('}');\n                                            return sb.toString();\n                                        }\n                                    };\n                                    final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                                    java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                                    if (rules == null) {\n                                        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                                        lines.put(patternKey, rules);\n                                    } \n                                    rules.add(r);\n                                } catch (final java.lang.IllegalArgumentException e) {\n                                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return lines;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"location"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:279","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[88,89,90,91],"tindex":"6df036eb-2ebb-11e6-99fa-a3a0f8484fe7","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:212","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEquals(java.lang.String name1, java.lang.String name2) {\n    if ((name1.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n                return false;\n            } else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n                return false;\n            } else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n                return false;\n            } else if (name1.equalsIgnoreCase(name2)) {\n                return true;\n            } \n            name1 = cleanName(name1);\n            name2 = cleanName(name2);\n            name1 = removeVowels(name1);\n            name2 = removeVowels(name2);\n            name1 = removeDoubleConsonants(name1);\n            name2 = removeDoubleConsonants(name2);\n            name1 = getFirst3Last3(name1);\n            name2 = getFirst3Last3(name2);\n            if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                return false;\n            } \n            final int int = java.lang.Math.abs(((name1.length()) + (name2.length())));\n            int int = 0;\n            minRating = getMinRating(sumLength);\n            final int int = leftToRightThenRightToLeftProcessing(name1, name2);\n            return count >= minRating;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"name1"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[92,93,94,95,96,97,84,85,98,99,100,101,102,103,104,105,106,107,108,109,110,111,3,4,112],"tindex":"6df05dfc-2ebb-11e6-99fa-2913ede75474","method":{"position":"org.apache.commons.codec.binary.Base64:705","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final byte[] base64Data) {\n    if (base64Data == null) {\n        {\n            return new org.apache.commons.codec.binary.Base64().decode(base64Data);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"base64Data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[113,114],"tindex":"6df0850d-2ebb-11e6-99fa-13fec1b8e21c","method":{"position":"org.apache.commons.codec.digest.DigestUtils:411","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final byte[] data) {\n    if (data == data) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"data","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[],"tindex":"6df0850e-2ebb-11e6-99fa-cd16e0c4f254","method":{"position":"org.apache.commons.codec.digest.DigestUtils:425","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"6df0850f-2ebb-11e6-99fa-33fc800d1b0b","method":{"position":"org.apache.commons.codec.net.BCodec:197","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object value) throws org.apache.commons.codec.EncoderException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(value)) {\n        {\n            if (value == null) {\n                return null;\n            } else if (value instanceof java.lang.String) {\n                return encode(((java.lang.String)(value)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"value"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:439","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"E\", \"I\", \"Y\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"AGGI\", \"OGGI\"))"},"failures":[115,116,20,21,117,118,22,23],"tindex":"6df08510-2ebb-11e6-99fa-0babb365d65a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:384","type":"CtMethodImpl","sourcecode":"private int handleD(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"E\", \"I\", \"Y\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"AGGI\", \"OGGI\"))) {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                    result.append('J');\n                    index += 3;\n                } else {\n                    result.append(\"TK\");\n                    index += 2;\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n                result.append('T');\n                index += 2;\n            } else {\n                result.append('T');\n                index++;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[119],"tindex":"6df0ac21-2ebb-11e6-99fa-2d723f4479c2","method":{"position":"org.apache.commons.codec.digest.HmacUtils:367","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        {\n            if (key == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:132","type":"CtBinaryOperatorImpl","sourcecode":"curr == 'Z'"},"failures":[120,121,122,123,124,125,126,127,128,129,130],"tindex":"6df0ac22-2ebb-11e6-99fa-af72ee7adedc","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:299","type":"CtMethodImpl","sourcecode":"private static boolean arrayContains(final char[] arr, final char key) {\n    if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(arr, key)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(arr, key)))) {\n        {\n            if (key == 'Z') {\n                {\n                    for (final char char : arr) {\n                        if (element == key) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"curr":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtBinaryOperatorImpl","sourcecode":"(salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))"},"failures":[131,132,133],"tindex":"6df0d333-2ebb-11e6-99fa-6b9fe3f77e83","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:133","type":"CtMethodImpl","sourcecode":"private static java.lang.String sha2Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String saltPrefix, final int blocksize, final java.lang.String algorithm) {\n    if (algorithm.contains(\"=\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((algorithm != null) && (!(salt.startsWith(saltPrefix)))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final int int = keyBytes.int;\n                    int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int;\n                    boolean boolean = false;\n                    if (salt == null) {\n                        throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n                    } \n                    final java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.util.regex.Pattern.matcher(salt);\n                    if ((m == null) || (!(m.find()))) {\n                        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n                    } \n                    if ((m.group(3)) != null) {\n                        rounds = java.lang.Integer.parseInt(m.group(3));\n                        rounds = java.lang.Math.max(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, java.lang.Math.min(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, rounds));\n                        roundsCustom = true;\n                    } \n                    final java.lang.String java.lang.String = m.group(4);\n                    final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                    final int int = saltBytes.int;\n                    java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    ctx.update(keyBytes);\n                    ctx.update(saltBytes);\n                    java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    altCtx.update(keyBytes);\n                    altCtx.update(saltBytes);\n                    altCtx.update(keyBytes);\n                    byte[] byte[] = altCtx.digest();\n                    int int = keyBytes.int;\n                    while (cnt > blocksize) {\n                        ctx.update(altResult, 0, blocksize);\n                        cnt -= blocksize;\n                    }\n                    ctx.update(altResult, 0, cnt);\n                    cnt = keyBytes.int;\n                    while (cnt > 0) {\n                        if ((cnt & 1) != 0) {\n                            ctx.update(altResult, 0, blocksize);\n                        } else {\n                            ctx.update(keyBytes);\n                        }\n                        cnt >>= 1;\n                    }\n                    altResult = ctx.digest();\n                    altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    for (int int = 1 ; i <= keyLen ; i++) {\n                        altCtx.update(keyBytes);\n                    }\n                    byte[] byte[] = altCtx.digest();\n                    final byte[] byte[] = new byte[keyLen];\n                    int int = 0;\n                    while (cp < (keyLen - blocksize)) {\n                        java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n                        cp += blocksize;\n                    }\n                    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, (keyLen - cp));\n                    altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n                        altCtx.update(saltBytes);\n                    }\n                    tempResult = altCtx.digest();\n                    final byte[] byte[] = new byte[saltLen];\n                    cp = 0;\n                    while (cp < (saltLen - blocksize)) {\n                        java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n                        cp += blocksize;\n                    }\n                    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp));\n                    for (int int = 0 ; i <= (rounds - 1) ; i++) {\n                        ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                        if ((i & 1) != 0) {\n                            ctx.update(pBytes, 0, keyLen);\n                        } else {\n                            ctx.update(altResult, 0, blocksize);\n                        }\n                        if ((i % 3) != 0) {\n                            ctx.update(sBytes, 0, saltLen);\n                        } \n                        if ((i % 7) != 0) {\n                            ctx.update(pBytes, 0, keyLen);\n                        } \n                        if ((i & 1) != 0) {\n                            ctx.update(altResult, 0, blocksize);\n                        } else {\n                            ctx.update(pBytes, 0, keyLen);\n                        }\n                        altResult = ctx.digest();\n                    }\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(saltPrefix);\n                    if (roundsCustom) {\n                        buffer.append(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String);\n                        buffer.append(rounds);\n                        buffer.append(\"$\");\n                    } \n                    buffer.append(saltString);\n                    buffer.append(\"$\");\n                    if (blocksize == 32) {\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer);\n                    } else {\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer);\n                    }\n                    java.util.Arrays.fill(tempResult, ((byte)(0)));\n                    java.util.Arrays.fill(pBytes, ((byte)(0)));\n                    java.util.Arrays.fill(sBytes, ((byte)(0)));\n                    ctx.reset();\n                    altCtx.reset();\n                    java.util.Arrays.fill(keyBytes, ((byte)(0)));\n                    java.util.Arrays.fill(saltBytes, ((byte)(0)));\n                    return buffer.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"algorithm","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"saltPrefix"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtInvocationImpl","sourcecode":"line.contains(\"=\")"},"failures":[],"tindex":"6df12154-2ebb-11e6-99fa-cb1409ab9a8d","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:133","type":"CtMethodImpl","sourcecode":"private static java.lang.String sha2Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String saltPrefix, final int blocksize, final java.lang.String algorithm) {\n    if (algorithm.contains(\"=\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((algorithm != null) && (!(salt.startsWith(saltPrefix)))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final int int = keyBytes.int;\n                    int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int;\n                    boolean boolean = false;\n                    if (salt == null) {\n                        throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n                    } \n                    final java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.util.regex.Pattern.matcher(salt);\n                    if ((m == null) || (!(m.find()))) {\n                        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n                    } \n                    if ((m.group(3)) != null) {\n                        rounds = java.lang.Integer.parseInt(m.group(3));\n                        rounds = java.lang.Math.max(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, java.lang.Math.min(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, rounds));\n                        roundsCustom = true;\n                    } \n                    final java.lang.String java.lang.String = m.group(4);\n                    final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                    final int int = saltBytes.int;\n                    java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    ctx.update(keyBytes);\n                    ctx.update(saltBytes);\n                    java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    altCtx.update(keyBytes);\n                    altCtx.update(saltBytes);\n                    altCtx.update(keyBytes);\n                    byte[] byte[] = altCtx.digest();\n                    int int = keyBytes.int;\n                    while (cnt > blocksize) {\n                        ctx.update(altResult, 0, blocksize);\n                        cnt -= blocksize;\n                    }\n                    ctx.update(altResult, 0, cnt);\n                    cnt = keyBytes.int;\n                    while (cnt > 0) {\n                        if ((cnt & 1) != 0) {\n                            ctx.update(altResult, 0, blocksize);\n                        } else {\n                            ctx.update(keyBytes);\n                        }\n                        cnt >>= 1;\n                    }\n                    altResult = ctx.digest();\n                    altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    for (int int = 1 ; i <= keyLen ; i++) {\n                        altCtx.update(keyBytes);\n                    }\n                    byte[] byte[] = altCtx.digest();\n                    final byte[] byte[] = new byte[keyLen];\n                    int int = 0;\n                    while (cp < (keyLen - blocksize)) {\n                        java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n                        cp += blocksize;\n                    }\n                    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, (keyLen - cp));\n                    altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n                        altCtx.update(saltBytes);\n                    }\n                    tempResult = altCtx.digest();\n                    final byte[] byte[] = new byte[saltLen];\n                    cp = 0;\n                    while (cp < (saltLen - blocksize)) {\n                        java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n                        cp += blocksize;\n                    }\n                    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp));\n                    for (int int = 0 ; i <= (rounds - 1) ; i++) {\n                        ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                        if ((i & 1) != 0) {\n                            ctx.update(pBytes, 0, keyLen);\n                        } else {\n                            ctx.update(altResult, 0, blocksize);\n                        }\n                        if ((i % 3) != 0) {\n                            ctx.update(sBytes, 0, saltLen);\n                        } \n                        if ((i % 7) != 0) {\n                            ctx.update(pBytes, 0, keyLen);\n                        } \n                        if ((i & 1) != 0) {\n                            ctx.update(altResult, 0, blocksize);\n                        } else {\n                            ctx.update(pBytes, 0, keyLen);\n                        }\n                        altResult = ctx.digest();\n                    }\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(saltPrefix);\n                    if (roundsCustom) {\n                        buffer.append(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String);\n                        buffer.append(rounds);\n                        buffer.append(\"$\");\n                    } \n                    buffer.append(saltString);\n                    buffer.append(\"$\");\n                    if (blocksize == 32) {\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer);\n                    } else {\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer);\n                    }\n                    java.util.Arrays.fill(tempResult, ((byte)(0)));\n                    java.util.Arrays.fill(pBytes, ((byte)(0)));\n                    java.util.Arrays.fill(sBytes, ((byte)(0)));\n                    ctx.reset();\n                    altCtx.reset();\n                    java.util.Arrays.fill(keyBytes, ((byte)(0)));\n                    java.util.Arrays.fill(saltBytes, ((byte)(0)));\n                    return buffer.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"algorithm"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"6df16f75-2ebb-11e6-99fa-27691131d63f","method":{"position":"org.apache.commons.codec.digest.DigestUtils:484","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final java.lang.String data) {\n    if ((data == null) || ((txt.length()) == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"data"},"type":"special","returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[134],"tindex":"6df19686-2ebb-11e6-99fa-b9cc804b44f2","method":{"position":"org.apache.commons.codec.net.URLCodec:243","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return encode(str, getDefaultCharset());\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:283","type":"CtBinaryOperatorImpl","sourcecode":"lineLength > 0"},"failures":[],"tindex":"6df19687-2ebb-11e6-99fa-05f114c8e67b","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:325","type":"CtMethodImpl","sourcecode":"private static int dEncrypt(int el, final int r, final int s, final int e0, final int e1, final int[] sArr) {\n    if (e1 == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (e1 > 0) {\n                {\n                    int int = r ^ (r >>> 16);\n                    int int = v & e0;\n                    v &= e1;\n                    u = ((u ^ (u << 16)) ^ r) ^ (sArr[s]);\n                    int int = ((v ^ (v << 16)) ^ r) ^ (sArr[(s + 1)]);\n                    t = (t >>> 4) | (t << 28);\n                    el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)]);\n                    return el;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineLength":"e1"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:101","type":"CtBinaryOperatorImpl","sourcecode":"r > 0"},"failures":[135],"tindex":"6df1bd98-2ebb-11e6-99fa-75ec4a6600b5","method":{"position":"org.apache.commons.codec.language.Metaphone:428","type":"CtMethodImpl","sourcecode":"public void setMaxCodeLen(final int maxCodeLen) {\n    if (maxCodeLen > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.Metaphone.this.int = maxCodeLen;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"r":"maxCodeLen"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:126","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'R'"},"failures":[62,96,68,136,137,138,139,140,141,142],"tindex":"6df1bd99-2ebb-11e6-99fa-eb62d410a6bd","method":{"position":"org.apache.commons.codec.binary.Hex:77","type":"CtMethodImpl","sourcecode":"public static byte[] decodeHex(final char[] data) throws org.apache.commons.codec.DecoderException {\n    if ((data[1]) == 'R') {\n        {\n            final int int = data.int;\n            if ((len & 1) != 0) {\n                throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n            } \n            final byte[] byte[] = new byte[len >> 1];\n            for (int int = 0, int int = 0 ; j < len ; i++) {\n                int int = (org.apache.commons.codec.binary.Hex.toDigit(data[j], j)) << 4;\n                j++;\n                f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j));\n                j++;\n                out[i] = ((byte)(f & 255));\n            }\n            return out;\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:548","type":"CtBinaryOperatorImpl","sourcecode":"startsWithBox && endsWithBox"},"failures":[],"tindex":"6df1e4aa-2ebb-11e6-99fa-959f554d4404","method":{"position":"org.apache.commons.codec.binary.Base64:639","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe) {\n    if (isChunked) {\n        {\n            if (isChunked && urlSafe) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, urlSafe, java.lang.Integer.java.lang.Integer.int);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"endsWithBox":"urlSafe","startsWithBox":"isChunked"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"ascii instanceof char[]"},"failures":[115,117,143,144],"tindex":"6df1e4ab-2ebb-11e6-99fa-4f8f022cab45","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:202","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof char[]) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\");\n            } \n            return doubleMetaphone(((java.lang.String)(obj)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"6df1e4ac-2ebb-11e6-99fa-d95f1dd505f8","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:147","type":"CtMethodImpl","sourcecode":"public void setNameType(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtInvocationImpl","sourcecode":"incl.contains(\" \")"},"failures":[44,45,46,47,51,52,53,54,55,56,57,58,59,60,61],"tindex":"6df20bbd-2ebb-11e6-99fa-6dff7630ce2c","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:383","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String input) {\n    if (input.contains(\" \")) {\n        {\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.Lang.guessLanguages(input);\n            return encode(input, languageSet);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"incl":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START)"},"failures":[],"tindex":"6df20bbe-2ebb-11e6-99fa-edf7ef52dc68","method":{"position":"org.apache.commons.codec.net.QCodec:225","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if (str.startsWith(str)) {\n        {\n            if (charset.startsWith(str)) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    try {\n                        return encodeText(str, charset);\n                    } catch (final java.io.UnsupportedEncodingException e) {\n                        throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n                    }\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"str","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[145],"tindex":"6df232cf-2ebb-11e6-99fa-057bbab1ddab","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:71","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final byte[] keyBytes) {\n    if (keyBytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyBytes == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"keyBytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtInvocationImpl","sourcecode":"value.startsWith(element)"},"failures":[],"tindex":"6df232d0-2ebb-11e6-99fa-fdf553e87dd5","method":{"position":"org.apache.commons.codec.digest.DigestUtils:66","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest getDigest(final java.lang.String algorithm) {\n    if (algorithm.startsWith(algorithm)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (algorithm.startsWith(algorithm)) {\n                {\n                    try {\n                        return java.security.MessageDigest.getInstance(algorithm);\n                    } catch (final java.security.NoSuchAlgorithmException e) {\n                        throw new java.lang.IllegalArgumentException(e);\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"algorithm","element":"algorithm"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:532","type":"CtVariableReadImpl","sourcecode":"branching"},"failures":[],"tindex":"6df232d1-2ebb-11e6-99fa-7d328a5a0084","method":{"position":"org.apache.commons.codec.binary.Base64:639","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe) {\n    if (isChunked) {\n        {\n            if (isChunked && urlSafe) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, urlSafe, java.lang.Integer.java.lang.Integer.int);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"branching":"isChunked"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[146,147,148,149],"tindex":"6df259e2-2ebb-11e6-99fa-a79df46ed673","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:268","type":"CtMethodImpl","sourcecode":"public static char[] toAsciiChars(final byte[] raw) {\n    if (raw == raw) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[];\n            } \n            final char[] char[] = new char[(raw.int) << 3];\n            for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                        l_ascii[(jj - bits)] = '0';\n                    } else {\n                        l_ascii[(jj - bits)] = '1';\n                    }\n                }\n            }\n            return l_ascii;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"raw","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"raw"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:68","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX)"},"failures":[],"tindex":"6df259e3-2ebb-11e6-99fa-8fe5c38d5bc2","method":{"position":"org.apache.commons.codec.digest.DigestUtils:437","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final java.lang.String data) {\n    if (data.startsWith(data)) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX":"data","salt":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"6df280f4-2ebb-11e6-99fa-1332a8473fcc","method":{"position":"org.apache.commons.codec.digest.DigestUtils:66","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest getDigest(final java.lang.String algorithm) {\n    if (algorithm.startsWith(algorithm)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (algorithm.startsWith(algorithm)) {\n                {\n                    try {\n                        return java.security.MessageDigest.getInstance(algorithm);\n                    } catch (final java.security.NoSuchAlgorithmException e) {\n                        throw new java.lang.IllegalArgumentException(e);\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"algorithm","line":"algorithm"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:289","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[150,151,152],"tindex":"6df280f5-2ebb-11e6-99fa-91611f4ba282","method":{"position":"org.apache.commons.codec.language.SoundexUtils:109","type":"CtMethodImpl","sourcecode":"static int differenceEncoded(final java.lang.String es1, final java.lang.String es2) {\n    if (es2 == null) {\n        {\n            if ((es1 == null) || (es2 == null)) {\n                return 0;\n            } \n            final int int = java.lang.Math.min(es1.length(), es2.length());\n            int int = 0;\n            for (int int = 0 ; i < lengthToMatch ; i++) {\n                if ((es1.charAt(i)) == (es2.charAt(i))) {\n                    diff++;\n                } \n            }\n            return diff;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"es2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[153,154,155,156],"tindex":"6df280f6-2ebb-11e6-99fa-03663d71c6a8","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:539","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (salt == null) {\n                salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n            } \n            return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[157,158],"tindex":"6df2a807-2ebb-11e6-99fa-7371ee21c487","method":{"position":"org.apache.commons.codec.digest.HmacUtils:633","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:350","type":"CtBinaryOperatorImpl","sourcecode":"lastCode == '/'"},"failures":[120,124],"tindex":"6df2a808-2ebb-11e6-99fa-2d58d8bb3849","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:253","type":"CtMethodImpl","sourcecode":"public void addLeft(final char ch) {\n    if (ch == '/') {\n        {\n            (int)++;\n            char[][getNextPos()] = ch;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lastCode":"ch"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6df2a809-2ebb-11e6-99fa-4b949a2f1681","method":{"position":"org.apache.commons.codec.digest.HmacUtils:280","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[],"tindex":"6df2a80a-2ebb-11e6-99fa-b14705d3f9a4","method":{"position":"org.apache.commons.codec.digest.DigestUtils:273","type":"CtMethodImpl","sourcecode":"public static byte[] md5(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd5Digest(), data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:367","type":"CtBinaryOperatorImpl","sourcecode":"open >= 0"},"failures":[48],"tindex":"6df2cf1b-2ebb-11e6-99fa-2f6b30885bb3","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:174","type":"CtMethodImpl","sourcecode":"public void setMaxPhonemes(final int maxPhonemes) {\n    if (maxPhonemes >= 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat() , maxPhonemes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"open":"maxPhonemes"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:325","type":"CtInvocationImpl","sourcecode":"name1LtREnd.equals(name2RtLEnd)"},"failures":[147,149],"tindex":"6df2cf1c-2ebb-11e6-99fa-dd0d941fc93c","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:97","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object raw) throws org.apache.commons.codec.EncoderException {\n    if (raw.equals(raw)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(raw instanceof byte[])) {\n                throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n            } \n            return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2RtLEnd":"raw","name1LtREnd":"raw"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[159,160],"tindex":"6df2cf1d-2ebb-11e6-99fa-714026b5d6da","method":{"position":"org.apache.commons.codec.language.Nysiis:247","type":"CtMethodImpl","sourcecode":"public java.lang.String nysiis(java.lang.String str) {\n    if (str.equals(\"\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"MCC\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"NN\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"C\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"FF\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"SSS\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"Y\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"D\");\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length());\n            key.append(str.charAt(0));\n            final char[] char[] = str.toCharArray();\n            final int int = chars.int;\n            for (int int = 1 ; i < len ; i++) {\n                final char char = i < (len - 1) ? chars[(i + 1)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n                final char char = i < (len - 2) ? chars[(i + 2)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n                final char[] char[] = org.apache.commons.codec.language.Nysiis.transcodeRemaining(chars[(i - 1)], chars[i], next, aNext);\n                java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int);\n                if ((chars[i]) != (chars[(i - 1)])) {\n                    key.append(chars[i]);\n                } \n            }\n            if ((key.length()) > 1) {\n                char char = key.charAt(((key.length()) - 1));\n                if (lastChar == 'S') {\n                    key.deleteCharAt(((key.length()) - 1));\n                    lastChar = key.charAt(((key.length()) - 1));\n                } \n                if ((key.length()) > 2) {\n                    final char char = key.charAt(((key.length()) - 2));\n                    if ((last2Char == 'A') && (lastChar == 'Y')) {\n                        key.deleteCharAt(((key.length()) - 2));\n                    } \n                } \n                if (lastChar == 'A') {\n                    key.deleteCharAt(((key.length()) - 1));\n                } \n            } \n            final java.lang.String java.lang.String = key.toString();\n            return org.apache.commons.codec.language.Nysiis.this.isStrict() ? string.substring(0, java.lang.Math.min(org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.int, string.length())) : string;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"6df2f62e-2ebb-11e6-99fa-bb5a270bcafb","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:71","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final byte[] keyBytes) {\n    if (keyBytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyBytes == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"keyBytes"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"6df31d3f-2ebb-11e6-99fa-7b7459e70482","method":{"position":"org.apache.commons.codec.net.QCodec:169","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == bytes) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            boolean boolean = false;\n            for (final byte byte : bytes) {\n                if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                    hasUnderscores = true;\n                    break;\n                } \n            }\n            if (hasUnderscores) {\n                final byte[] byte[] = new byte[bytes.int];\n                for (int int = 0 ; i < (bytes.int) ; i++) {\n                    final byte byte = bytes[i];\n                    if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                        tmp[i] = b;\n                    } else {\n                        tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                    }\n                }\n                return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n            } \n            return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"bytes","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"bytes"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[115,116,161,162,163,164,165,20,21,117,166,118,143,167,22,23,144,168],"tindex":"6df31d40-2ebb-11e6-99fa-bf7b84edf9d6","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:888","type":"CtMethodImpl","sourcecode":"private java.lang.String cleanInput(java.lang.String input) {\n    if (input == null) {\n        {\n            if (input == null) {\n                return null;\n            } \n            input = input.trim();\n            if ((input.length()) == 0) {\n                return null;\n            } \n            return input.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[],"tindex":"6df31d41-2ebb-11e6-99fa-abfe4a6ca74f","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:262","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String original) {\n    if (original == null) {\n        {\n            if (original.startsWith(original)) {\n                {\n                    return org.apache.commons.codec.digest.UnixCrypt.crypt(original.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"original"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[],"tindex":"6df34452-2ebb-11e6-99fa-1146f918ab1f","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:325","type":"CtMethodImpl","sourcecode":"private static int dEncrypt(int el, final int r, final int s, final int e0, final int e1, final int[] sArr) {\n    if (e1 == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (e1 > 0) {\n                {\n                    int int = r ^ (r >>> 16);\n                    int int = v & e0;\n                    v &= e1;\n                    u = ((u ^ (u << 16)) ^ r) ^ (sArr[s]);\n                    int int = ((v ^ (v << 16)) ^ r) ^ (sArr[(s + 1)]);\n                    t = (t >>> 4) | (t << 28);\n                    el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)]);\n                    return el;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"e1"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:188","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[169],"tindex":"6df34453-2ebb-11e6-99fa-4b9665025332","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:486","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if (str.startsWith(str)) {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset());\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"str","line":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:376","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SZ, lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHOUKQX, nextChar)))"},"failures":[],"tindex":"6df36b64-2ebb-11e6-99fa-69f6d2832501","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:299","type":"CtMethodImpl","sourcecode":"private static boolean arrayContains(final char[] arr, final char key) {\n    if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(arr, key)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(arr, key)))) {\n        {\n            if (key == 'Z') {\n                {\n                    for (final char char : arr) {\n                        if (element == key) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lastChar":"key","nextChar":"key","org.apache.commons.codec.language.ColognePhonetic.AHOUKQX":"arr","org.apache.commons.codec.language.ColognePhonetic.SZ":"arr"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtBinaryOperatorImpl","sourcecode":"(content.length()) == 0"},"failures":[],"tindex":"6df36b65-2ebb-11e6-99fa-9b14b1ed3a3b","method":{"position":"org.apache.commons.codec.net.BCodec:119","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if ((value.length()) == 0) {\n        {\n            if (value.contains(value)) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (value == null) {\n                        return null;\n                    } \n                    return encodeText(value, charset);\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"content":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[170,171,172,173,174,175,176,177,178,179,180],"tindex":"6df39276-2ebb-11e6-99fa-0716eb755b81","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:485","type":"CtMethodImpl","sourcecode":"private java.lang.String[] soundex(final java.lang.String source, final boolean branching) {\n    if ((source.length()) == 0) {\n        {\n            if (source == null) {\n                return null;\n            } \n            final java.lang.String java.lang.String = cleanup(source);\n            final java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = new java.util.LinkedHashSet<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>();\n            currentBranches.add(new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch());\n            char char = '\u0000';\n            for (int int = 0 ; index < (input.length()) ; index++) {\n                final char char = input.charAt(index);\n                if (java.lang.Character.isWhitespace(ch)) {\n                    continue;\n                } \n                final java.lang.String java.lang.String = input.substring(index);\n                final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(ch);\n                if (rules == null) {\n                    continue;\n                } \n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.Collections.java.util.List;\n                for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n                    if (rule.matches(inputContext)) {\n                        if (branching) {\n                            nextBranches.clear();\n                        } \n                        final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n                        final boolean boolean = ((replacements.int) > 1) && branching;\n                        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                            for (final java.lang.String java.lang.String : replacements) {\n                                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                                final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                                nextBranch.processNextReplacement(nextReplacement, force);\n                                if (branching) {\n                                    nextBranches.add(nextBranch);\n                                } else {\n                                    break;\n                                }\n                            }\n                        }\n                        if (branching) {\n                            currentBranches.clear();\n                            currentBranches.addAll(nextBranches);\n                        } \n                        index += (rule.getPatternLength()) - 1;\n                        break;\n                    } \n                }\n                lastChar = ch;\n            }\n            final java.lang.String[] java.lang.String[] = new java.lang.String[currentBranches.size()];\n            int int = 0;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                branch.finish();\n                result[(index++)] = branch.toString();\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:112","type":"CtBinaryOperatorImpl","sourcecode":"avail > 0"},"failures":[115,116,165,20,21,117,22,23],"tindex":"6df3e097-2ebb-11e6-99fa-1dc345138aae","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:514","type":"CtMethodImpl","sourcecode":"private int handleJ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (index > 0) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                    result.append('H');\n                } else {\n                    result.append('J', 'H');\n                }\n                index++;\n            } else {\n                if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n                    result.append('J', 'A');\n                } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n                    result.append('J', 'H');\n                } else if (index == ((value.length()) - 1)) {\n                    result.append('J', ' ');\n                } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n                    result.append('J');\n                } \n                if ((charAt(value, (index + 1))) == 'J') {\n                    index += 2;\n                } else {\n                    index++;\n                }\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"avail":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[181],"tindex":"6df3e098-2ebb-11e6-99fa-25cbbb759e54","method":{"position":"org.apache.commons.codec.digest.DigestUtils:499","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final byte[] data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"6df407a9-2ebb-11e6-99fa-0db6e627b028","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:198","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] original, java.lang.String salt) {\n    if ((salt == null) || ((txt.length()) == 0)) {\n        {\n            if (salt == null) {\n                final java.util.Random java.util.Random = new java.util.Random();\n                final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int;\n                salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)]);\n            } else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n                throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \");\n            final char char = salt.charAt(0);\n            final char char = salt.charAt(1);\n            buffer.setCharAt(0, charZero);\n            buffer.setCharAt(1, charOne);\n            final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charZero];\n            final int int = (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charOne]) << 4;\n            final byte[] byte[] = new byte[8];\n            for (int int = 0 ; i < (key.int) ; i++) {\n                key[i] = 0;\n            }\n            for (int int = 0 ; (i < (key.int)) && (i < (original.int)) ; i++) {\n                final int int = original[i];\n                key[i] = ((byte)(iChar << 1));\n            }\n            final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.desSetKey(key);\n            final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.body(schedule, eSwap0, eSwap1);\n            final byte[] byte[] = new byte[9];\n            org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[0], b, 0);\n            org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[1], b, 4);\n            b[8] = 0;\n            int int = 2;\n            int int = 0;\n            int int = 128;\n            for ( ; i < 13 ; i++) {\n                int int = 0;\n                int int = 0;\n                for ( ; j < 6 ; j++) {\n                    c <<= 1;\n                    if (((b[y]) & u) != 0) {\n                        c |= 1;\n                    } \n                    u >>>= 1;\n                    if (u == 0) {\n                        y++;\n                        u = 128;\n                    } \n                    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n                }\n            }\n            return buffer.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"salt"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"6df42eba-2ebb-11e6-99fa-15d3b12f43fb","method":{"position":"org.apache.commons.codec.binary.Base64:594","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeBase64URLSafeString(final byte[] binaryData) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(binaryData)) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"binaryData"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:289","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[162,182,183],"tindex":"6df42ebb-2ebb-11e6-99fa-1df915316848","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:75","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(final java.lang.String value) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return doubleMetaphone(value, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:188","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[62],"tindex":"6df42ebc-2ebb-11e6-99fa-d3dba4799a6f","method":{"position":"org.apache.commons.codec.binary.StringUtils:92","type":"CtMethodImpl","sourcecode":"private static byte[] getBytes(final java.lang.String string, final java.nio.charset.Charset charset) {\n    if (string.startsWith(string)) {\n        {\n            if (string == null) {\n                return null;\n            } \n            return string.getBytes(charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"string","line":"string"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:159","type":"CtFieldReadImpl","sourcecode":"doEncode"},"failures":[],"tindex":"6df42ebd-2ebb-11e6-99fa-8f1364af7798","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"doEncode":"concat"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6df455ce-2ebb-11e6-99fa-51c34e8a1b2a","method":{"position":"org.apache.commons.codec.digest.HmacUtils:367","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        {\n            if (key == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[184],"tindex":"6df455cf-2ebb-11e6-99fa-4b8988a0109e","method":{"position":"org.apache.commons.codec.digest.DigestUtils:657","type":"CtMethodImpl","sourcecode":"public static byte[] sha512(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha512Digest(), data);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[],"tindex":"6df47ce0-2ebb-11e6-99fa-753ea47c1db8","method":{"position":"org.apache.commons.codec.digest.HmacUtils:764","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac updateHmac(final javax.crypto.Mac mac, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (valueToDigest == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            mac.reset();\n            final byte[] byte[] = new byte[org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.int];\n            int int = valueToDigest.read(buffer, 0, org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.int);\n            while (read > (-1)) {\n                mac.update(buffer, 0, read);\n                read = valueToDigest.read(buffer, 0, org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.int);\n            }\n            return mac;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6df47ce1-2ebb-11e6-99fa-31c5f9d1a1e4","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final byte[] b, final int offset, final int len) throws java.io.IOException {\n    if (b == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (offset != 0) {\n                {\n                    if (b == null) {\n                        throw new java.lang.NullPointerException();\n                    } else if ((offset < 0) || (len < 0)) {\n                        throw new java.lang.IndexOutOfBoundsException();\n                    } else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n                        throw new java.lang.IndexOutOfBoundsException();\n                    } else if (len > 0) {\n                        if (boolean) {\n                            org.apache.commons.codec.binary.BaseNCodec.encode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        } else {\n                            org.apache.commons.codec.binary.BaseNCodec.decode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        }\n                        flush(false);\n                    } \n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:72","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX)"},"failures":[],"tindex":"6df47ce2-2ebb-11e6-99fa-bd70be42066e","method":{"position":"org.apache.commons.codec.digest.HmacUtils:352","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (valueToDigest.startsWith(key)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((key.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"valueToDigest","org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[185,186],"tindex":"6df4a3f3-2ebb-11e6-99fa-35c6793707d7","method":{"position":"org.apache.commons.codec.digest.DigestUtils:815","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest updateDigest(final java.security.MessageDigest messageDigest, final java.lang.String valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            messageDigest.update(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n            return messageDigest;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:331","type":"CtBinaryOperatorImpl","sourcecode":"finalRules == null"},"failures":[44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61],"tindex":"6df4a3f4-2ebb-11e6-99fa-1d305a4dae81","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:329","type":"CtMethodImpl","sourcecode":"private org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder applyFinalRules(final org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder phonemeBuilder, final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> finalRules) {\n    if (finalRules == null) {\n        {\n            if (finalRules == null) {\n                throw new java.lang.NullPointerException(\"finalRules can not be null\");\n            } \n            if (finalRules.isEmpty()) {\n                return phonemeBuilder;\n            } \n            final java.util.Map<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.Map<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.TreeMap<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme>(org.apache.commons.codec.language.bm.Rule.Phoneme.org.apache.commons.codec.language.bm.Rule.Phoneme.java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme>);\n            for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeBuilder.getPhonemes()) {\n                org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(phoneme.getLanguages());\n                final java.lang.String java.lang.String = phoneme.getPhonemeText().toString();\n                for (int int = 0 ; i < (phonemeText.length()) ; ) {\n                    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , int).invoke();\n                    final boolean boolean = rulesApplication.isFound();\n                    subBuilder = rulesApplication.getPhonemeBuilder();\n                    if (!found) {\n                        subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n                    } \n                    i = rulesApplication.getI();\n                }\n                for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n                    if (phonemes.containsKey(newPhoneme)) {\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n                        phonemes.put(mergedPhoneme, mergedPhoneme);\n                    } else {\n                        phonemes.put(newPhoneme, newPhoneme);\n                    }\n                }\n            }\n            return new org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder(phonemes.keySet());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"finalRules":"finalRules"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START)"},"failures":[],"tindex":"6df4cb05-2ebb-11e6-99fa-b306cf579d9b","method":{"position":"org.apache.commons.codec.language.bm.Rule:353","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang.startsWith(lang)) {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.get(nameType).get(rt).get(lang);\n            if (rules == null) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n            } \n            return rules;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"lang","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START":"lang"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtBinaryOperatorImpl","sourcecode":"((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))"},"failures":[],"tindex":"6df4f216-2ebb-11e6-99fa-17c8ffd415d9","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:276","type":"CtMethodImpl","sourcecode":"boolean isVowel(final java.lang.String letter) {\n    if (((letter == null) || (letter.equalsIgnoreCase(name2))) || (letter.equalsIgnoreCase(name2))) {\n        {\n            return ((((letter.equalsIgnoreCase(\"E\")) || (letter.equalsIgnoreCase(\"A\"))) || (letter.equalsIgnoreCase(\"O\"))) || (letter.equalsIgnoreCase(\"I\"))) || (letter.equalsIgnoreCase(\"U\"));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"letter","name2":"letter","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"letter"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtBinaryOperatorImpl","sourcecode":"cmtI >= 0"},"failures":[80,81,83],"tindex":"6df4f217-2ebb-11e6-99fa-15154017f855","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:392","type":"CtMethodImpl","sourcecode":"private static int hPermOp(int a, final int n, final int m) {\n    if (a >= 0) {\n        {\n            final int int = ((a << (16 - n)) ^ a) & m;\n            a = (a ^ t) ^ (t >>> (16 - n));\n            return a;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmtI":"a"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[184],"tindex":"6df4f218-2ebb-11e6-99fa-5fd765afbfe6","method":{"position":"org.apache.commons.codec.digest.DigestUtils:704","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:228","type":"CtUnaryOperatorImpl","sourcecode":"!(rt.equals(org.apache.commons.codec.language.bm.RuleType.RULES))"},"failures":[44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"tindex":"6df4f219-2ebb-11e6-99fa-03ce452658a2","method":{"position":"org.apache.commons.codec.language.bm.Rule:248","type":"CtMethodImpl","sourcecode":"private static java.lang.String createResourceName(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (!(rt.equals(rt))) {\n        {\n            return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_%s_%s.txt\", nameType.getName(), rt.getName(), lang);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"rt","rt":"rt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtBinaryOperatorImpl","sourcecode":"ruleType == (org.apache.commons.codec.language.bm.RuleType.RULES)"},"failures":[44,45,187,46,47,48,51,52,53,54,188,55],"tindex":"6df5192a-2ebb-11e6-99fa-e56d4ef4c437","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:160","type":"CtMethodImpl","sourcecode":"public void setRuleType(final org.apache.commons.codec.language.bm.RuleType ruleType) {\n    if (ruleType == ruleType) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , ruleType , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"ruleType","ruleType":"ruleType"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[],"tindex":"6df5192b-2ebb-11e6-99fa-798e15c2dd5f","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:968","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.String value) {\n    if ((value.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendPrimary(value);\n            appendAlternate(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6df5403c-2ebb-11e6-99fa-c7cf19b1d495","method":{"position":"org.apache.commons.codec.digest.DigestUtils:775","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest updateDigest(final java.security.MessageDigest messageDigest, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            messageDigest.update(valueToDigest);\n            return messageDigest;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:422","type":"CtBinaryOperatorImpl","sourcecode":"cmtI >= 0"},"failures":[],"tindex":"6df5403d-2ebb-11e6-99fa-b1988b432ec9","method":{"position":"org.apache.commons.codec.digest.B64:54","type":"CtMethodImpl","sourcecode":"static void b64from24bit(final byte b2, final byte b1, final byte b0, final int outLen, final java.lang.StringBuilder buffer) {\n    if (outLen >= 0) {\n        {\n            int int = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255);\n            int int = outLen;\n            while ((n--) > 0) {\n                buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)));\n                w >>= 6;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmtI":"outLen"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtInvocationImpl","sourcecode":"input.startsWith((l + \" \"))"},"failures":[],"tindex":"6df5403e-2ebb-11e6-99fa-e99145bcab0b","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:277","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String original, final java.lang.String salt) {\n    if (salt.startsWith((salt + \" \"))) {\n        {\n            if (salt == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.UnixCrypt.crypt(original.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"salt","l":"salt"},"type":"special","returnInThen":true,"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
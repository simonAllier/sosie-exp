{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":9,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":151,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":286,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":156,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":299,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":297,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":298,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeNull":109,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":183,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":186,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":300,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":144,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":199,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":71,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":46,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully":149,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":110,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":137,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse":170,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":287,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":209,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":146,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":246,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":262,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":16,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":88,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":93,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":164,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":307,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":309,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":102,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":308,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":101,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":124,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":125,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":150,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":168,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":226,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":24,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":100,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":165,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":65,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":126,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":23,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":127,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":104,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":206,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":245,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":271,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":38,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":234,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":108,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":64,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":221,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":279,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":6,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":232,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":285,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":176,"org.apache.commons.codec.language.MetaphoneTest.testEncodeEmpty":50,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":313,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":43,"org.apache.commons.codec.language.SoundexTest.testB650":296,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8":91,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":154,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":1,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":36,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":85,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16":195,"org.apache.commons.codec.language.SoundexTest.testNewInstance":303,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":147,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":169,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully":185,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":59,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":161,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":261,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":11,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":274,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":179,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleDoubleVowel_BEETLE_NotRemoved":187,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":289,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":208,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":259,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":244,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":143,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":229,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":119,"org.apache.commons.codec.language.NysiisTest.testDropBy":191,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":173,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":5,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":106,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":34,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":242,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":153,"org.apache.commons.codec.binary.Base64Test.testUUID":223,"org.apache.commons.codec.binary.Base64Test.testSingletons":233,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3_PETE_Returns_PETE":312,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":248,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":41,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":235,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":272,"org.apache.commons.codec.binary.Base64Test.testPairs":222,"org.apache.commons.codec.binary.Base64Test.testConstructors":86,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":247,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":18,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":139,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":304,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":214,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":192,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":145,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":80,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":237,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":241,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":103,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse":157,"org.apache.commons.codec.language.SoundexTest.testEncodeNull":117,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":197,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":140,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":202,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":254,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":193,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":51,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":255,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":105,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":264,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":99,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":98,"org.apache.commons.codec.binary.HexTest.testEncodeEmpty":216,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":115,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse":166,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":292,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":283,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":205,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":74,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le":49,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":96,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":129,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":25,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":225,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":182,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":158,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":132,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":270,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch":136,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":269,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":159,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":167,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":122,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":131,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":282,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":155,"org.apache.commons.codec.binary.HexTest.testCustomCharset":212,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":175,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":263,"org.apache.commons.codec.language.NysiisTest.testSnat":190,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":278,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":4,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameToSingleLetter_KARL_C_DoesNotMatch":178,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":277,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":181,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":77,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":133,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":196,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":76,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":27,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":265,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":120,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":97,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":236,"org.apache.commons.codec.binary.Base64Test.testTriplets":220,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":243,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse":134,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":83,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":81,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":84,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":113,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":52,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":53,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":266,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":63,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":227,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":90,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse":138,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":290,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":200,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":78,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":130,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":250,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":281,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":67,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":116,"org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey":310,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse":180,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":305,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":45,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":306,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":123,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":128,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":39,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":37,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":288,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":13,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":14,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":107,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":203,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":217,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":253,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":28,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully":160,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":268,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":60,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":276,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":316,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":231,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":258,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":82,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":301,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":174,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":26,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":238,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":66,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":291,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":40,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":58,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":142,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":314,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":135,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":162,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":194,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":213,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":280,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":219,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":163,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":22,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":118,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":315,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":111,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":201,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3__ALEXANDER_Returns_Aleder":311,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":284,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":257,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":293,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":294,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":295,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":273,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":70,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":89,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":8,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":251,"org.apache.commons.codec.binary.Base64Test.testBase64":87,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch":141,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":75,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":62,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":210,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":228,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":239,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":95,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":48,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":73,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":204,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":72,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":215,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":207,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully":184,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":94,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":260,"org.apache.commons.codec.binary.Base64Test.testCodec112":230,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":54,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":68,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":177,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":112,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":31,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty":44,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":55,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":172,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":218,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":275,"org.apache.commons.codec.binary.Base64Test.testCodec68":256,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":302,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":211,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":267,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":57,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":29,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":148,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":0,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":92,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":79,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse":171,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":249,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":198,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":56,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":7,"org.apache.commons.codec.language.SoundexTest.testDifference":114,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":21,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":121,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":240,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":19,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":30,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":69,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii":10,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":61,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":152,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":189,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":252,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":188,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":224},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:265","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"0144fe3d-2e87-11e6-ab27-3f804b4b1536","method":{"position":"org.apache.commons.codec.language.Caverphone:101","type":"CtMethodImpl","sourcecode":"public boolean isCaverphoneEqual(final java.lang.String str1, final java.lang.String str2) {\n    if (str2 == null) {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.caverphone(str1).equals(org.apache.commons.codec.language.Caverphone.this.caverphone(str2));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str2"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:263","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[0,1,2,3,4,5,6,7,8,9],"tindex":"0145e89e-2e87-11e6-ab27-b380bf906a1e","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:180","type":"CtMethodImpl","sourcecode":"public java.lang.String[] getReplacements(final java.lang.String context, final boolean atStart) {\n    if ((context.length()) == 0) {\n        {\n            if (atStart) {\n                return java.lang.String[];\n            } \n            final int int = getPatternLength();\n            final boolean boolean = nextIndex < (context.length()) ? isVowel(context.charAt(nextIndex)) : false;\n            if (nextCharIsVowel) {\n                return java.lang.String[];\n            } \n            return java.lang.String[];\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"context"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:314","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")"},"failures":[],"tindex":"01460faf-2e87-11e6-ab27-17be3994687f","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:384","type":"CtMethodImpl","sourcecode":"private int handleD(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                    result.append('J');\n                    index += 3;\n                } else {\n                    result.append(\"TK\");\n                    index += 2;\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n                result.append('T');\n                index += 2;\n            } else {\n                result.append('T');\n                index++;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"tindex":"014636c0-2e87-11e6-ab27-f12dd8be37bc","method":{"position":"org.apache.commons.codec.binary.StringUtils:162","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUsAscii(final java.lang.String string) {\n    if (string == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"string"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"014636c1-2e87-11e6-ab27-ed4b609da140","method":{"position":"org.apache.commons.codec.digest.HmacUtils:494","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (key == null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"01465dd2-2e87-11e6-ab27-97cec2d0f1b3","method":{"position":"org.apache.commons.codec.digest.HmacUtils:337","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (valueToDigest == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key), valueToDigest).doFinal();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[37],"tindex":"01465dd3-2e87-11e6-ab27-75e69dbcd280","method":{"position":"org.apache.commons.codec.digest.DigestUtils:469","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha256Digest(), data);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"014684e4-2e87-11e6-ab27-39b31b3af5ba","method":{"position":"org.apache.commons.codec.language.bm.Rule:124","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Rule.Phoneme append(final java.lang.CharSequence str) {\n    if ((str == null) || ((txt.length()) == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(str);\n            return org.apache.commons.codec.language.bm.Rule.Phoneme.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"str"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[38,39],"tindex":"014684e5-2e87-11e6-ab27-8dd7f7f94b8c","method":{"position":"org.apache.commons.codec.digest.HmacUtils:280","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtBinaryOperatorImpl","sourcecode":"cmtI >= 0"},"failures":[],"tindex":"0146abf6-2e87-11e6-ab27-2166557ba6a3","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:816","type":"CtMethodImpl","sourcecode":"private boolean conditionCH1(final java.lang.String value, final int index) {\n    if (index >= 0) {\n        {\n            return ((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"T\", \"S\"))) || (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (index == 0)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])) || ((index + 1) == ((value.length()) - 1))));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmtI":"index"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:429","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[40,41,42,43,44,45,46,47,48],"tindex":"0146d307-2e87-11e6-ab27-13d0caf8f22d","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:75","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(final java.lang.String value) {\n    if ((value.length()) == 0) {\n        {\n            return doubleMetaphone(value, false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:289","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"0146d308-2e87-11e6-ab27-e5dab16addab","method":{"position":"org.apache.commons.codec.net.URLCodec:269","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (charset.equalsIgnoreCase(charset)) {\n        {\n            if (charset == null) {\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"charset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtInvocationImpl","sourcecode":"str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[],"tindex":"0146fa19-2e87-11e6-ab27-c55be30b173d","method":{"position":"org.apache.commons.codec.digest.HmacUtils:616","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha384Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key.startsWith(valueToDigest)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"key","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"0147212a-2e87-11e6-ab27-f94d363031ed","method":{"position":"org.apache.commons.codec.digest.HmacUtils:581","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha384Hex(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtInvocationImpl","sourcecode":"value.startsWith(element)"},"failures":[49],"tindex":"0147212b-2e87-11e6-ab27-9d3aa2c00993","method":{"position":"org.apache.commons.codec.binary.StringUtils:216","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Le(final java.lang.String string) {\n    if (string.startsWith(string)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"string","element":"string"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[],"tindex":"0147483c-2e87-11e6-ab27-e5c4f78af351","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:331","type":"CtMethodImpl","sourcecode":"private int handleCC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index >= 0) {\n                {\n                    if (value.equals(\"\")) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n                                if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n                                    result.append(\"KS\");\n                                } else {\n                                    result.append('X');\n                                }\n                                index += 3;\n                            } else {\n                                result.append('K');\n                                index += 2;\n                            }\n                            return index;\n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtBinaryOperatorImpl","sourcecode":"cmtI >= 0"},"failures":[],"tindex":"01476f4d-2e87-11e6-ab27-cfc041c5aaed","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:331","type":"CtMethodImpl","sourcecode":"private int handleCC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index >= 0) {\n                {\n                    if (value.equals(\"\")) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n                                if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n                                    result.append(\"KS\");\n                                } else {\n                                    result.append('X');\n                                }\n                                index += 3;\n                            } else {\n                                result.append('K');\n                                index += 2;\n                            }\n                            return index;\n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmtI":"index"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[],"tindex":"0147965e-2e87-11e6-ab27-9131cc8a1009","method":{"position":"org.apache.commons.codec.digest.DigestUtils:198","type":"CtMethodImpl","sourcecode":"public static byte[] md2(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd2Digest(), data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:389","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[50],"tindex":"0147965f-2e87-11e6-ab27-e3f2cd87246d","method":{"position":"org.apache.commons.codec.language.Metaphone:388","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj instanceof java.lang.String)) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n            } \n            return metaphone(((java.lang.String)(obj)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:349","type":"CtBinaryOperatorImpl","sourcecode":"((chr == 'H') || (chr < 'A')) || (chr > 'Z')"},"failures":[],"tindex":"0147bd70-2e87-11e6-ab27-a9b74e09a5fb","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:194","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (((ch == 'H') || (chr < 'A')) || (chr > 'Z')) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u');\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"ch"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"0147bd71-2e87-11e6-ab27-ff1a806d2d8d","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:462","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(final java.lang.String source) {\n    if (source.startsWith(source)) {\n        {\n            final java.lang.String[] java.lang.String[] = soundex(source, true);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            for (final java.lang.String java.lang.String : branches) {\n                sb.append(branch);\n                if ((++index) < (branches.int)) {\n                    sb.append('|');\n                } \n            }\n            return sb.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"source","line":"source"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:268","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"0147e482-2e87-11e6-ab27-910c7ca3119f","method":{"position":"org.apache.commons.codec.digest.DigestUtils:425","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtInvocationImpl","sourcecode":"str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[29,30,51,32,33,34,52,36],"tindex":"0147e483-2e87-11e6-ab27-b15a79fbcc31","method":{"position":"org.apache.commons.codec.net.RFC1522Codec:68","type":"CtMethodImpl","sourcecode":"protected java.lang.String encodeText(final java.lang.String text, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if (text.startsWith(text)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (text == null) {\n                return null;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String);\n            buffer.append(charset);\n            buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char);\n            buffer.append(org.apache.commons.codec.net.RFC1522Codec.this.getEncoding());\n            buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char);\n            final byte[] byte[] = org.apache.commons.codec.net.RFC1522Codec.this.doEncoding(text.getBytes(charset));\n            buffer.append(org.apache.commons.codec.binary.StringUtils.newStringUsAscii(rawData));\n            buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String);\n            return buffer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"text","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"text"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[53,54],"tindex":"01480b94-2e87-11e6-ab27-7f543a8fbe59","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:140","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] ascii) {\n    if (ascii == ascii) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"ascii","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"ascii"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[55,56,57,58],"tindex":"014832a5-2e87-11e6-ab27-a1cfe13c264a","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:393","type":"CtMethodImpl","sourcecode":"public byte[] decode(final java.lang.String pArray) {\n    if (!(pArray.matches(((\"^[\" + pArray) + \"]{2,}$\")))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((pArray.length()) == 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"pArray"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:456","type":"CtBinaryOperatorImpl","sourcecode":"blocksize == 32"},"failures":[59,60,42,61,62],"tindex":"014832a6-2e87-11e6-ab27-638b1f39660f","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:827","type":"CtMethodImpl","sourcecode":"private boolean conditionL0(final java.lang.String value, final int index) {\n    if (index == 32) {\n        {\n            if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n                return true;\n            } else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"blocksize":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:725","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")"},"failures":[],"tindex":"014859b7-2e87-11e6-ab27-09b0e4ac6e1a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:331","type":"CtMethodImpl","sourcecode":"private int handleCC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index >= 0) {\n                {\n                    if (value.equals(\"\")) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n                                if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n                                    result.append(\"KS\");\n                                } else {\n                                    result.append('X');\n                                }\n                                index += 3;\n                            } else {\n                                result.append('K');\n                                index += 2;\n                            }\n                            return index;\n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)"},"failures":[],"tindex":"014859b8-2e87-11e6-ab27-37583c76e956","method":{"position":"org.apache.commons.codec.language.bm.Rule:512","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input.endsWith(input)) {\n        {\n            return (input.length()) == 0;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"input","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END":"input"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"014880c9-2e87-11e6-ab27-2ddf44d2c896","method":{"position":"org.apache.commons.codec.digest.HmacUtils:741","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac updateHmac(final javax.crypto.Mac mac, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            mac.reset();\n            mac.update(valueToDigest);\n            return mac;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:70","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX)"},"failures":[],"tindex":"014880ca-2e87-11e6-ab27-8f21bf56a092","method":{"position":"org.apache.commons.codec.digest.DigestUtils:719","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final java.lang.String data) {\n    if (data.startsWith(data)) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"data","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"014880cb-2e87-11e6-ab27-89d8813d7640","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:409","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[63],"tindex":"0148a7dc-2e87-11e6-ab27-65667dcc492b","method":{"position":"org.apache.commons.codec.digest.HmacUtils:116","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha384(final byte[] key) {\n    if (key != null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:325","type":"CtInvocationImpl","sourcecode":"name1LtREnd.equals(name2RtLEnd)"},"failures":[],"tindex":"0148a7dd-2e87-11e6-ab27-85d57975ebe5","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:968","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.String value) {\n    if (value.equals(value)) {\n        {\n            appendPrimary(value);\n            appendAlternate(value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2RtLEnd":"value","name1LtREnd":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[64],"tindex":"0149441e-2e87-11e6-ab27-f3dc9e1ed7b9","method":{"position":"org.apache.commons.codec.digest.HmacUtils:98","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha256(final byte[] key) {\n    if (key != null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:158","type":"CtBinaryOperatorImpl","sourcecode":"(curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))"},"failures":[],"tindex":"0149441f-2e87-11e6-ab27-69caf5807de8","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:956","type":"CtMethodImpl","sourcecode":"public void appendPrimary(final char value) {\n    if ((value == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(value))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(value))))) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int)) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"next":"value","prev":"value","curr":"value"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[65,66],"tindex":"01496a30-2e87-11e6-ab27-f13da28d3aa0","method":{"position":"org.apache.commons.codec.digest.Crypt:65","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] keyBytes, final java.lang.String salt) {\n    if (salt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (salt == null) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes, salt);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(keyBytes, salt);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt);\n            } else {\n                return org.apache.commons.codec.digest.UnixCrypt.crypt(keyBytes, salt);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"salt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:163","type":"CtBinaryOperatorImpl","sourcecode":"(curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))"},"failures":[],"tindex":"01496a31-2e87-11e6-ab27-a31436667bce","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:161","type":"CtMethodImpl","sourcecode":"char getMappingCode(final char c) {\n    if ((c == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(c))) {\n        {\n            if (!(java.lang.Character.isLetter(c))) {\n                return 0;\n            } \n            return org.apache.commons.codec.language.RefinedSoundex.this.char[][((java.lang.Character.toUpperCase(c)) - 'A')];\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prev":"c","curr":"c"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\"]\"))"},"failures":[67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"tindex":"01499142-2e87-11e6-ab27-2ddd6b8624f3","method":{"position":"org.apache.commons.codec.language.bm.Rule:402","type":"CtMethodImpl","sourcecode":"private static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> parseRules(final java.util.Scanner scanner, final java.lang.String location) {\n    if (!(location.endsWith(\"]\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = new java.util.HashMap<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>();\n            int int = 0;\n            boolean boolean = false;\n            while (scanner.hasNextLine()) {\n                currentLine++;\n                final java.lang.String java.lang.String = scanner.nextLine();\n                java.lang.String java.lang.String = rawLine;\n                if (inMultilineComment) {\n                    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                        inMultilineComment = false;\n                    } \n                } else {\n                    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                        inMultilineComment = true;\n                    } else {\n                        final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                        if (cmtI >= 0) {\n                            line = line.substring(0, cmtI);\n                        } \n                        line = line.trim();\n                        if ((line.length()) == 0) {\n                            continue;\n                        } \n                        if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                            final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n                            if (incl.contains(\" \")) {\n                                throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n                            } else {\n                                lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n                            }\n                        } else {\n                            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                            if ((parts.int) != 4) {\n                                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                            } else {\n                                try {\n                                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                                    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                                    final int int = currentLine;\n                                    final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                                        private final int myLine = cLine;\n\n                                        private final java.lang.String loc = location;\n\n                                        @java.lang.Override\n                                        public java.lang.String toString() {\n                                            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                                            sb.append(\"Rule\");\n                                            sb.append(\"{line=\").append(int);\n                                            sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                                            sb.append(\", pat='\").append(pat).append('\\'');\n                                            sb.append(\", lcon='\").append(lCon).append('\\'');\n                                            sb.append(\", rcon='\").append(rCon).append('\\'');\n                                            sb.append('}');\n                                            return sb.toString();\n                                        }\n                                    };\n                                    final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                                    java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                                    if (rules == null) {\n                                        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                                        lines.put(patternKey, rules);\n                                    } \n                                    rules.add(r);\n                                } catch (final java.lang.IllegalArgumentException e) {\n                                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return lines;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"location"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[55,85,86,56,87,88,89,90,58,91,92,93,94,95,96,97,98,99],"tindex":"0149df63-2e87-11e6-ab27-8597b6653347","method":{"position":"org.apache.commons.codec.binary.StringUtils:256","type":"CtMethodImpl","sourcecode":"private static java.lang.String newString(final byte[] bytes, final java.nio.charset.Charset charset) {\n    if (bytes == null) {\n        {\n            return bytes == null ? null : new java.lang.String(bytes , charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START)"},"failures":[100,101,102,103,104,105,106,107,108,109,110,111],"tindex":"014a7ba4-2e87-11e6-ab27-01389a5e9fd8","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:319","type":"CtMethodImpl","sourcecode":"public java.lang.String colognePhonetic(java.lang.String text) {\n    if (text.startsWith(text)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (text == null) {\n                return null;\n            } \n            text = preprocess(text);\n            final org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer = new org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer(((text.length()) * 2));\n            final org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer = new org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer(text.toCharArray());\n            char char;\n            char char = '-';\n            char char = '/';\n            char char;\n            char char;\n            int int = input.length();\n            while (rightLength > 0) {\n                chr = input.removeNext();\n                if ((rightLength = input.length()) > 0) {\n                    nextChar = input.getNextChar();\n                } else {\n                    nextChar = '-';\n                }\n                if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n                    code = '0';\n                } else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n                    if (lastCode == '/') {\n                        continue;\n                    } \n                    code = '-';\n                } else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n                    code = '1';\n                } else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n                    code = '2';\n                } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n                    code = '3';\n                } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n                    code = '4';\n                } else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)))) {\n                    code = '4';\n                    input.addLeft('S');\n                    rightLength++;\n                } else if ((chr == 'S') || (chr == 'Z')) {\n                    code = '8';\n                } else if (chr == 'C') {\n                    if (lastCode == '/') {\n                        if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)) {\n                            code = '4';\n                        } else {\n                            code = '8';\n                        }\n                    } else {\n                        if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n                            code = '8';\n                        } else {\n                            code = '4';\n                        }\n                    }\n                } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n                    code = '8';\n                } else if (chr == 'R') {\n                    code = '7';\n                } else if (chr == 'L') {\n                    code = '5';\n                } else if ((chr == 'M') || (chr == 'N')) {\n                    code = '6';\n                } else {\n                    code = chr;\n                }\n                if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n                    output.addRight(code);\n                } \n                lastChar = chr;\n                lastCode = code;\n            }\n            return output.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"text","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START":"text"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[112,113],"tindex":"014aa2b5-2e87-11e6-ab27-fb47e7aa8f77","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:191","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(final long n) throws java.io.IOException {\n    if (n < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n < 0) {\n                throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n            } \n            final byte[] byte[] = new byte[512];\n            long long = n;\n            while (todo > 0) {\n                int int = ((int)(java.lang.Math.min(b.int, todo)));\n                len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n                if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n                    break;\n                } \n                todo -= len;\n            }\n            return n - todo;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:218","type":"CtBinaryOperatorImpl","sourcecode":"((name1.length()) == 1) || ((name2.length()) == 1)"},"failures":[114,115,116,117,118],"tindex":"014ac9c6-2e87-11e6-ab27-4329378332ce","method":{"position":"org.apache.commons.codec.language.Soundex:166","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (((str.length()) == 1) || ((str.length()) == 1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return soundex(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"str","name1":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtBinaryOperatorImpl","sourcecode":"b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[11,12,13,16,17,18,19,20,21,22,23,26,28,32,34,35,36],"tindex":"014ac9c7-2e87-11e6-ab27-b18b6007b3ee","method":{"position":"org.apache.commons.codec.net.Utils:42","type":"CtMethodImpl","sourcecode":"static int digit16(final byte b) throws org.apache.commons.codec.DecoderException {\n    if (b == b) {\n        {\n            if (b != b) {\n                {\n                    final int int = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int);\n                    if (i == (-1)) {\n                        throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n                    } \n                    return i;\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","org.apache.commons.codec.net.QCodec.UNDERSCORE":"b"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:258","type":"CtBinaryOperatorImpl","sourcecode":"(i & 1) != 0"},"failures":[40,119,120,121,59,60,42,122,61,62],"tindex":"014ac9c8-2e87-11e6-ab27-d71d58e9385d","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:915","type":"CtMethodImpl","sourcecode":"protected static boolean contains(final java.lang.String value, final int start, final int length, final java.lang.String... criteria) {\n    if ((start & 1) != 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if ((start >= 0) && ((start + length) <= (value.length()))) {\n                final java.lang.String java.lang.String = value.substring(start, (start + length));\n                for (final java.lang.String java.lang.String : criteria) {\n                    if (target.equals(element)) {\n                        result = true;\n                        break;\n                    } \n                }\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"start"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:540","type":"CtVariableReadImpl","sourcecode":"branching"},"failures":[123],"tindex":"014af0d9-2e87-11e6-ab27-05e16d324f43","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:463","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final byte[] arrayOctet, final boolean allowWSPad) {\n    if (arrayOctet == null) {\n        {\n            if (allowWSPad) {\n                {\n                    for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                        if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"branching":"allowWSPad"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:115","type":"CtBinaryOperatorImpl","sourcecode":"c > 0"},"failures":[59,60,61,62],"tindex":"014af0da-2e87-11e6-ab27-f77294faab37","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:355","type":"CtMethodImpl","sourcecode":"private int handleCH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (index > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n                result.append('K', 'X');\n                return index + 2;\n            } else if (conditionCH0(value, index)) {\n                result.append('K');\n                return index + 2;\n            } else if (conditionCH1(value, index)) {\n                result.append('K');\n                return index + 2;\n            } else {\n                if (index > 0) {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n                        result.append('K');\n                    } else {\n                        result.append('X', 'K');\n                    }\n                } else {\n                    result.append('X');\n                }\n                return index + 2;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"014b17eb-2e87-11e6-ab27-9f99e4487e13","method":{"position":"org.apache.commons.codec.digest.HmacUtils:474","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == valueToDigest) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"key","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isLetter(c))"},"failures":[],"tindex":"014b17ec-2e87-11e6-ab27-85fc1b459296","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:951","type":"CtMethodImpl","sourcecode":"public void append(final char primary, final char alternate) {\n    if (!(java.lang.Character.isLetter(alternate))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendPrimary(primary);\n            appendAlternate(alternate);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"alternate"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtInvocationImpl","sourcecode":"str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[],"tindex":"014b3efd-2e87-11e6-ab27-3fe8014154a4","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:412","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj.startsWith(obj)) {\n        {\n            if (obj.startsWith(obj)) {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n                    } \n                    return encode(((java.lang.String)(obj)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"obj","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"obj"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:735","type":"CtBinaryOperatorImpl","sourcecode":"bigInt == null"},"failures":[124,125,126,127],"tindex":"014b3efe-2e87-11e6-ab27-2beca0e50993","method":{"position":"org.apache.commons.codec.binary.Base64:748","type":"CtMethodImpl","sourcecode":"static byte[] toIntegerBytes(final java.math.BigInteger bigInt) {\n    if (bigInt == null) {\n        {\n            int int = bigInt.bitLength();\n            bitlen = ((bitlen + 7) >> 3) << 3;\n            final byte[] byte[] = bigInt.toByteArray();\n            if ((((bigInt.bitLength()) % 8) != 0) && ((((bigInt.bitLength()) / 8) + 1) == (bitlen / 8))) {\n                return bigBytes;\n            } \n            int int = 0;\n            int int = bigBytes.int;\n            if (((bigInt.bitLength()) % 8) == 0) {\n                startSrc = 1;\n                len--;\n            } \n            final int int = (bitlen / 8) - len;\n            final byte[] byte[] = new byte[bitlen / 8];\n            java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n            return resizedBytes;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[67,68,69,70,71,74,75,76,77,78,81,82,83,84],"tindex":"014b3eff-2e87-11e6-ab27-af02a826892d","method":{"position":"org.apache.commons.codec.language.bm.Rule:600","type":"CtMethodImpl","sourcecode":"private static boolean startsWith(final java.lang.CharSequence input, final java.lang.CharSequence prefix) {\n    if (input == null) {\n        {\n            if ((prefix.length()) > (input.length())) {\n                return false;\n            } \n            for (int int = 0 ; i < (prefix.length()) ; i++) {\n                if ((input.charAt(i)) != (prefix.charAt(i))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[128,129,130,131,132,133],"tindex":"014b6610-2e87-11e6-ab27-83cdab090d7c","method":{"position":"org.apache.commons.codec.digest.HmacUtils:80","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha1(final byte[] key) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"014b6611-2e87-11e6-ab27-252e5f0f5044","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:147","type":"CtMethodImpl","sourcecode":"public void setNameType(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:288","type":"CtBinaryOperatorImpl","sourcecode":"pos < (org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH)"},"failures":[],"tindex":"014b8d22-2e87-11e6-ab27-e179afc0b40e","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:184","type":"CtMethodImpl","sourcecode":"int getMinRating(final int sumLength) {\n    if (sumLength < sumLength) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            }\n            return minRating;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"sumLength","org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH":"sumLength"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.Utils:44","type":"CtBinaryOperatorImpl","sourcecode":"i == (-1)"},"failures":[],"tindex":"014bb433-2e87-11e6-ab27-499bc36fbfe7","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:240","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected char[] copyData(final int start, final int length) {\n    if (start == (-1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char[] char[] = new char[length];\n            java.lang.System.arraycopy(char[], start, newData, 0, length);\n            return newData;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"start"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:68","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX)"},"failures":[],"tindex":"014bb434-2e87-11e6-ab27-21a2657f18b4","method":{"position":"org.apache.commons.codec.language.bm.Lang:202","type":"CtMethodImpl","sourcecode":"public java.lang.String guessLanguage(final java.lang.String text) {\n    if (text.startsWith(text)) {\n        {\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text);\n            return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX":"text","salt":"text"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"014bb435-2e87-11e6-ab27-d555bebef56b","method":{"position":"org.apache.commons.codec.digest.DigestUtils:388","type":"CtMethodImpl","sourcecode":"public static byte[] sha1(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data == null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha1Digest(), data);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:575","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"014bdb46-2e87-11e6-ab27-2d854e3bfb93","method":{"position":"org.apache.commons.codec.digest.DigestUtils:625","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha384Hex(final java.lang.String data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtUnaryOperatorImpl","sourcecode":"!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))"},"failures":[],"tindex":"014bdb47-2e87-11e6-ab27-ad24a3dfbdf5","method":{"position":"org.apache.commons.codec.net.BCodec:119","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if (!(value.matches(((\"^[\" + value) + \"]{2,}$\")))) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } \n            return encodeText(value, charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"value","org.apache.commons.codec.digest.B64.B64T":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:279","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182],"tindex":"014bdb48-2e87-11e6-ab27-d5542c168e87","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:212","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEquals(java.lang.String name1, java.lang.String name2) {\n    if ((name2.length()) == 0) {\n        {\n            if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n                return false;\n            } else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n                return false;\n            } else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n                return false;\n            } else if (name1.equalsIgnoreCase(name2)) {\n                return true;\n            } \n            name1 = cleanName(name1);\n            name2 = cleanName(name2);\n            name1 = removeVowels(name1);\n            name2 = removeVowels(name2);\n            name1 = removeDoubleConsonants(name1);\n            name2 = removeDoubleConsonants(name2);\n            name1 = getFirst3Last3(name1);\n            name2 = getFirst3Last3(name2);\n            if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                return false;\n            } \n            final int int = java.lang.Math.abs(((name1.length()) + (name2.length())));\n            int int = 0;\n            minRating = getMinRating(sumLength);\n            final int int = leftToRightThenRightToLeftProcessing(name1, name2);\n            return count >= minRating;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"name2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtInvocationImpl","sourcecode":"line.contains(\"=\")"},"failures":[],"tindex":"014c0259-2e87-11e6-ab27-c7cc48f3d139","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:125","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final java.lang.String keyBytes, final java.lang.String salt) {\n    if (salt.contains(\"=\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"salt"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"014c025a-2e87-11e6-ab27-a9eb6396569b","method":{"position":"org.apache.commons.codec.language.bm.Languages:202","type":"CtMethodImpl","sourcecode":"private static java.lang.String langResourceName(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        {\n            return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_languages.txt\", nameType.getName());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[],"tindex":"014c025b-2e87-11e6-ab27-cbba02a8fb41","method":{"position":"org.apache.commons.codec.language.bm.Languages:253","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.String language) {\n    if ((language.length()) > 0) {\n        {\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"language"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:388","type":"CtBinaryOperatorImpl","sourcecode":"(chr == 'M') || (chr == 'N')"},"failures":[],"tindex":"014c296c-2e87-11e6-ab27-5369108bbe29","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:946","type":"CtMethodImpl","sourcecode":"public void append(final char value) {\n    if ((value == 'M') || (chr == 'N')) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendPrimary(value);\n            appendAlternate(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"value"},"type":"special","returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:530","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof byte[]"},"failures":[183],"tindex":"014c296d-2e87-11e6-ab27-0dfcca085500","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof byte[]) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof byte[]) {\n                return encode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[135,137,139,140,142,143,144,145,146,147,148,184,185,150,151,152,153,154,186,155,156,158,159,161,162,163,164,165,167,187,168,169,172,173,174,175,176,177,179,188,189,181,182],"tindex":"014c507e-2e87-11e6-ab27-0fb2110e0b43","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:384","type":"CtMethodImpl","sourcecode":"java.lang.String removeDoubleConsonants(final java.lang.String name) {\n    if (name.startsWith(name)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = name.toUpperCase();\n            for (final java.lang.String java.lang.String : org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String[]) {\n                if (replacedName.contains(dc)) {\n                    final java.lang.String java.lang.String = dc.substring(0, 1);\n                    replacedName = replacedName.replace(dc, singleLetter);\n                } \n            }\n            return replacedName;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"name","line":"name"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:268","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"014c507f-2e87-11e6-ab27-cfb4883f5f95","method":{"position":"org.apache.commons.codec.digest.DigestUtils:388","type":"CtMethodImpl","sourcecode":"public static byte[] sha1(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data == null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha1Digest(), data);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[],"tindex":"014c5080-2e87-11e6-ab27-21799e40cada","method":{"position":"org.apache.commons.codec.digest.DigestUtils:516","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:325","type":"CtInvocationImpl","sourcecode":"name1LtREnd.equals(name2RtLEnd)"},"failures":[],"tindex":"014c7791-2e87-11e6-ab27-efdaca315e76","method":{"position":"org.apache.commons.codec.digest.DigestUtils:320","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Hex(final java.lang.String data) {\n    if (data.startsWith(data)) {\n        {\n            if (data.equals(data)) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2RtLEnd":"data","name1LtREnd":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:158","type":"CtBinaryOperatorImpl","sourcecode":"(curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))"},"failures":[190,191,192],"tindex":"014c7792-2e87-11e6-ab27-275637b620cd","method":{"position":"org.apache.commons.codec.language.Nysiis:100","type":"CtMethodImpl","sourcecode":"private static boolean isVowel(final char c) {\n    if ((c == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(c))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(c))))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((((c == 'A') || (c == 'E')) || (c == 'I')) || (c == 'O')) || (c == 'U');\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"next":"c","prev":"c","curr":"c"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[193,114,194],"tindex":"014c7793-2e87-11e6-ab27-7121511f9ee0","method":{"position":"org.apache.commons.codec.language.SoundexUtils:109","type":"CtMethodImpl","sourcecode":"static int differenceEncoded(final java.lang.String es1, final java.lang.String es2) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(es1, 0, 5, \"CHORE\")) {\n        {\n            if ((es1 == null) || (es2 == null)) {\n                return 0;\n            } \n            final int int = java.lang.Math.min(es1.length(), es2.length());\n            int int = 0;\n            for (int int = 0 ; i < lengthToMatch ; i++) {\n                if ((es1.charAt(i)) == (es2.charAt(i))) {\n                    diff++;\n                } \n            }\n            return diff;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"es1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[195],"tindex":"014c9ea4-2e87-11e6-ab27-0d9866d522ef","method":{"position":"org.apache.commons.codec.binary.StringUtils:334","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[38,128,129,196,131,197,39,132,133,198,199,200,201,202,203,204,205,206,37,207,208,209,210,211,212,213,214,215,216,217],"tindex":"014c9ea5-2e87-11e6-ab27-65e88d81f5c9","method":{"position":"org.apache.commons.codec.binary.Hex:108","type":"CtMethodImpl","sourcecode":"public static char[] encodeHex(final byte[] data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHex(data, true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:288","type":"CtBinaryOperatorImpl","sourcecode":"pos < (org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH)"},"failures":[218,219,220,221,222,223,224,225,124,125,126,127,226,227,228,229,230,231,232,233,234,56,235,87,89,90,58,236,237,238,239,29,30,51],"tindex":"014c9ea6-2e87-11e6-ab27-c12936093c6e","method":{"position":"org.apache.commons.codec.binary.Base64:660","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe, final int maxResultSize) {\n    if (maxResultSize < maxResultSize) {\n        {\n            if ((binaryData == null) || ((binaryData.int) == 0)) {\n                return binaryData;\n            } \n            final org.apache.commons.codec.binary.Base64 org.apache.commons.codec.binary.Base64 = isChunked ? new org.apache.commons.codec.binary.Base64(urlSafe) : new org.apache.commons.codec.binary.Base64(0 , org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[] , urlSafe);\n            final long long = b64.getEncodedLength(binaryData);\n            if (len > maxResultSize) {\n                throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + len) + \") than the specified maximum size of \") + maxResultSize));\n            } \n            return b64.encode(binaryData);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"maxResultSize","org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH":"maxResultSize"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"014cc5b7-2e87-11e6-ab27-e91e3dc72789","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] pArray) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(pArray)) {\n        {\n            if ((pArray == null) || ((pArray.int) == 0)) {\n                return pArray;\n            } \n            final org.apache.commons.codec.binary.BaseNCodec.Context org.apache.commons.codec.binary.BaseNCodec.Context = new org.apache.commons.codec.binary.BaseNCodec.Context();\n            decode(pArray, 0, pArray.int, context);\n            decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context);\n            final byte[] byte[] = new byte[context.int];\n            readResults(result, 0, result.int, context);\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"pArray"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:135","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[240,241,242,243,244,245,218,246,247,248,249,219,220,55,85,221,250,222,223,224,225,124,125,126,127,251,226,227,228,252,229,253,230,254,255,233,234,256,56,257,235,87,258,88,89,259,260,57,90,58,261,92,93,262,263,264,265,94,95,266,267,96,236,268,269,270,97,271,272,273,274,275,237,98,276,238,277,278,279,239,280,281,282,283,284,99,285,286,287,288,289,29,30,31,51],"tindex":"014cecc8-2e87-11e6-ab27-05616fdacc6e","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:268","type":"CtMethodImpl","sourcecode":"protected byte[] ensureBufferSize(final int size, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (size == 0) {\n        {\n            if (((context.byte[]) == null) || ((context.byte[].int) < ((context.int) + size))) {\n                return resizeBuffer(context);\n            } \n            return context.byte[];\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"size"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"014cecc9-2e87-11e6-ab27-d5c7118ab98a","method":{"position":"org.apache.commons.codec.language.bm.Rule:298","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.codec.language.bm.Rule> getInstance(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final org.apache.commons.codec.language.bm.Languages.LanguageSet langs) {\n    if (nameType == nameType) {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, langs);\n            final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            for (final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> : ruleMap.values()) {\n                allRules.addAll(rules);\n            }\n            return allRules;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isLetter(c))"},"failures":[290,291,292,293,294,295,296,297,298,299,300,301,302,114,303,304,115,305,306,116,307,308,309,118],"tindex":"014cecca-2e87-11e6-ab27-47d05d95000d","method":{"position":"org.apache.commons.codec.language.Soundex:229","type":"CtMethodImpl","sourcecode":"private char map(final char ch) {\n    if (!(java.lang.Character.isLetter(ch))) {\n        {\n            final int int = ch - 'A';\n            if ((index < 0) || (index >= (org.apache.commons.codec.language.Soundex.this.getSoundexMapping().int))) {\n                throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch));\n            } \n            return org.apache.commons.codec.language.Soundex.this.getSoundexMapping()[index];\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"ch"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[38,130,39,310],"tindex":"014d13db-2e87-11e6-ab27-c92d844ef452","method":{"position":"org.apache.commons.codec.digest.HmacUtils:62","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacMd5(final byte[] key) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[135,137,139,140,142,143,144,145,146,147,148,150,151,152,153,154,186,155,156,311,158,159,161,162,163,164,165,167,168,169,172,173,174,175,176,177,179,188,312,189,181,182],"tindex":"014d13dc-2e87-11e6-ab27-9f5c3ca85e14","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:159","type":"CtMethodImpl","sourcecode":"java.lang.String getFirst3Last3(final java.lang.String name) {\n    if (name == null) {\n        {\n            final int int = name.length();\n            if (nameLength > (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                final java.lang.String java.lang.String = name.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int);\n                final java.lang.String java.lang.String = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)), nameLength);\n                return firstThree + lastThree;\n            } else {\n                return name;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"014d13dd-2e87-11e6-ab27-0905659a7a64","method":{"position":"org.apache.commons.codec.digest.HmacUtils:494","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (key == null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"014d3aee-2e87-11e6-ab27-51df8c95a832","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:463","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final byte[] arrayOctet, final boolean allowWSPad) {\n    if (arrayOctet == null) {\n        {\n            if (allowWSPad) {\n                {\n                    for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                        if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"arrayOctet"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"014d3aef-2e87-11e6-ab27-13cd5f873246","method":{"position":"org.apache.commons.codec.binary.Hex:160","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeHexString(final byte[] data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(org.apache.commons.codec.binary.Hex.encodeHex(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:175","type":"CtBinaryOperatorImpl","sourcecode":"b == (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[],"tindex":"014d3af0-2e87-11e6-ab27-cf2c496d1fbc","method":{"position":"org.apache.commons.codec.net.Utils:42","type":"CtMethodImpl","sourcecode":"static int digit16(final byte b) throws org.apache.commons.codec.DecoderException {\n    if (b == b) {\n        {\n            if (b != b) {\n                {\n                    final int int = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int);\n                    if (i == (-1)) {\n                        throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n                    } \n                    return i;\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","org.apache.commons.codec.net.QCodec.UNDERSCORE":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)"},"failures":[],"tindex":"014d3af1-2e87-11e6-ab27-cb08e9588488","method":{"position":"org.apache.commons.codec.digest.DigestUtils:320","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Hex(final java.lang.String data) {\n    if (data.startsWith(data)) {\n        {\n            if (data.equals(data)) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"data","line":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[38,128,129,196,130,131,197,39,313,132,133,310,198],"tindex":"014d6202-2e87-11e6-ab27-cd0bfef84595","method":{"position":"org.apache.commons.codec.digest.HmacUtils:154","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final org.apache.commons.codec.digest.HmacAlgorithms algorithm, final byte[] key) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:51","type":"CtBinaryOperatorImpl","sourcecode":"(cs instanceof java.lang.String) && (substring instanceof java.lang.String)"},"failures":[68,69,70,74,75,76,77,78,80,81,83,84],"tindex":"014d6203-2e87-11e6-ab27-25727ff79b7f","method":{"position":"org.apache.commons.codec.language.bm.Rule:579","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if ((input instanceof java.lang.String) && (input instanceof java.lang.String)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"input","substring":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Crypt:68","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX)"},"failures":[],"tindex":"014d6204-2e87-11e6-ab27-d9c39578e93d","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:412","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj.startsWith(obj)) {\n        {\n            if (obj.startsWith(obj)) {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n                    } \n                    return encode(((java.lang.String)(obj)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX":"obj","salt":"obj"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"014d8915-2e87-11e6-ab27-515e6f3bd0d5","method":{"position":"org.apache.commons.codec.digest.HmacUtils:708","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(key)) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"key"},"type":"special","returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || ((str.length()) == 0)"},"failures":[],"tindex":"014d8916-2e87-11e6-ab27-6f1f90cdbdfd","method":{"position":"org.apache.commons.codec.language.Soundex:131","type":"CtMethodImpl","sourcecode":"public int difference(final java.lang.String s1, final java.lang.String s2) throws org.apache.commons.codec.EncoderException {\n    if ((s1 == null) || ((str.length()) == 0)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            return org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.language.Soundex.this, s1, s2);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"s1"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtInvocationImpl","sourcecode":"str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[],"tindex":"014d8917-2e87-11e6-ab27-2532ef770df1","method":{"position":"org.apache.commons.codec.digest.DigestUtils:578","type":"CtMethodImpl","sourcecode":"public static byte[] sha384(final java.lang.String data) {\n    if (data.startsWith(data)) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"data","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"014d8918-2e87-11e6-ab27-d3987f9977aa","method":{"position":"org.apache.commons.codec.digest.DigestUtils:222","type":"CtMethodImpl","sourcecode":"public static java.lang.String md2Hex(final byte[] data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[55,85,86,56,87,88,89,90,58,91,92,93,94,95,96,97,98,99],"tindex":"014d8919-2e87-11e6-ab27-a165a1bad750","method":{"position":"org.apache.commons.codec.binary.StringUtils:382","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf8(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.newString(bytes, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"014db02a-2e87-11e6-ab27-13f76ea1d4f0","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:109","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final java.lang.Object encode(final java.lang.Object pObject) throws org.apache.commons.codec.EncoderException {\n    if (pObject == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(pObject instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\");\n            } \n            return encode(((java.lang.String)(pObject)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"pObject"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[314],"tindex":"014db02b-2e87-11e6-ab27-153ea5214387","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:104","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final java.lang.String keyBytes) {\n    if (keyBytes.endsWith(keyBytes)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"keyBytes","line":"keyBytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:429","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[],"tindex":"014db02c-2e87-11e6-ab27-d5cfe7e548b9","method":{"position":"org.apache.commons.codec.digest.HmacUtils:459","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final java.lang.String key, final java.lang.String valueToDigest) {\n    if ((key.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[],"tindex":"014db02d-2e87-11e6-ab27-f1900bfa4722","method":{"position":"org.apache.commons.codec.net.URLCodec:269","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (charset.equalsIgnoreCase(charset)) {\n        {\n            if (charset == null) {\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"charset","name1":"charset"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtUnaryOperatorImpl","sourcecode":"!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))"},"failures":[],"tindex":"014dd73e-2e87-11e6-ab27-75e6e4c0e01b","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:393","type":"CtMethodImpl","sourcecode":"public byte[] decode(final java.lang.String pArray) {\n    if (!(pArray.matches(((\"^[\" + pArray) + \"]{2,}$\")))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((pArray.length()) == 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"pArray","org.apache.commons.codec.digest.B64.B64T":"pArray"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"014dd73f-2e87-11e6-ab27-67ea9ed7107e","method":{"position":"org.apache.commons.codec.binary.StringUtils:382","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf8(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.newString(bytes, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[135,137,315,139,140,142,143,144,145,147,148,150,151,152,153,154,155,316,156,158,159,161,162,163,164,165,167,168,169,172,173,174,175,176,177,179,181,182],"tindex":"014dd740-2e87-11e6-ab27-a7b03d78f369","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:294","type":"CtMethodImpl","sourcecode":"int leftToRightThenRightToLeftProcessing(final java.lang.String name1, final java.lang.String name2) {\n    if (name1 == null) {\n        {\n            final char[] char[] = name1.toCharArray();\n            final char[] char[] = name2.toCharArray();\n            final int int = (name1.length()) - 1;\n            final int int = (name2.length()) - 1;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            for (int int = 0 ; i < (name1Char.int) ; i++) {\n                if (i > name2Size) {\n                    break;\n                } \n                name1LtRStart = name1.substring(i, (i + 1));\n                name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n                name2RtLStart = name2.substring(i, (i + 1));\n                name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n                if (name1LtRStart.equals(name2RtLStart)) {\n                    name1Char[i] = ' ';\n                    name2Char[i] = ' ';\n                } \n                if (name1LtREnd.equals(name2RtLEnd)) {\n                    name1Char[(name1Size - i)] = ' ';\n                    name2Char[(name2Size - i)] = ' ';\n                } \n            }\n            final java.lang.String java.lang.String = new java.lang.String(name1Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            final java.lang.String java.lang.String = new java.lang.String(name2Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            if ((strA.length()) > (strB.length())) {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())));\n            } else {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name1"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
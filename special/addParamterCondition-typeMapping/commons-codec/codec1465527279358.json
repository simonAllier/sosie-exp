{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":7,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":103,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":219,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":108,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":161,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeNull":56,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":182,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":96,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":75,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully":101,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":89,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":190,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse":122,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":220,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":196,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":98,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":249,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":36,"org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull":231,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":154,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":198,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":255,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":116,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":59,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":58,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":19,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":102,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":120,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":23,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le":142,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":57,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":117,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":21,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":22,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":165,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":61,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":257,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":46,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii":140,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":260,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":170,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":177,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":2,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":45,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":65,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":0,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":234,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":218,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":128,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":202,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":228,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":106,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8":139,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":162,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":253,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16":143,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":99,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":121,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":51,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":52,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":113,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":248,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":151,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":261,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput":137,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":131,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":222,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":233,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":9,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":245,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":256,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":95,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":214,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":150,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":125,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":63,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc":144,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":160,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":206,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":105,"org.apache.commons.codec.binary.Base64Test.testUUID":16,"org.apache.commons.codec.binary.Base64Test.testSingletons":28,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":159,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":251,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":3,"org.apache.commons.codec.binary.Base64Test.testPairs":15,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":250,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":156,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":91,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":175,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":183,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":97,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":84,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":35,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":205,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse":109,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":92,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":240,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull":232,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":13,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":210,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":241,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":62,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8":185,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":199,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":216,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse":118,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":211,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":194,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":78,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le":189,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":18,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName":146,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":213,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":135,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":110,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":229,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch":88,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":111,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":119,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":44,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":55,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse":87,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":136,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":209,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":107,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":127,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":37,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameToSingleLetter_KARL_C_DoesNotMatch":130,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":152,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":133,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":81,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":80,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":38,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":48,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":34,"org.apache.commons.codec.binary.Base64Test.testTriplets":14,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":145,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":47,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse":85,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":69,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":67,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":70,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":217,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":176,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":173,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":258,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":263,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":24,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeNull":225,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse":90,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1":186,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":172,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":82,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":237,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":208,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":71,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":204,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse":132,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":8,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":235,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":171,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":179,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":191,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":221,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":64,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":153,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":178,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":192,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch":134,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":239,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully":112,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":167,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":181,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":169,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":27,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":244,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":68,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":126,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":166,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":40,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":33,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":147,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":94,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":86,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":212,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":114,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":180,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":207,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":39,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":115,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":164,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":168,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":43,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":66,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":215,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":243,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":174,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":31,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":74,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing":224,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":254,"org.apache.commons.codec.binary.Base64Test.testBase64":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch":93,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":79,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":149,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":25,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":41,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":201,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":6,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":77,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":193,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":76,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeEmpty":226,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":195,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":155,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":200,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":246,"org.apache.commons.codec.binary.Base64Test.testCodec112":26,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":72,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":129,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":230,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":236,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":10,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":4,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":124,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":262,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":188,"org.apache.commons.codec.binary.Base64Test.testCodec68":242,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":50,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be":141,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":259,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":247,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":42,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing":223,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":158,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":100,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":197,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":83,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse":123,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":252,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":227,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":29,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1":138,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":49,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":163,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":203,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":157,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":12,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":73,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":148,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii":187,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":104,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":238,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":17,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16":184},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:548","type":"CtBinaryOperatorImpl","sourcecode":"startsWithBox && endsWithBox"},"failures":[0,1,2,3,4],"tindex":"ac7a23c3-2eb6-11e6-83fa-f396a61071ab","method":{"position":"org.apache.commons.codec.binary.Base64:620","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked) {\n    if (isChunked) {\n        {\n            if (binaryData == binaryData) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (isChunked && isChunked) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, false);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"endsWithBox":"isChunked","startsWithBox":"isChunked"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[5],"tindex":"ac7ae714-2eb6-11e6-83fa-7363e4fd17a5","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:298","type":"CtMethodImpl","sourcecode":"public static java.lang.String toAsciiString(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (raw == null) {\n                        {\n                            return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw));\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"raw"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:68","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX)"},"failures":[],"tindex":"ac7ae715-2eb6-11e6-83fa-0bebe1768ea7","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:398","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(java.lang.String input, final org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet) {\n    if (input.startsWith(input)) {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType, languageSet);\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, \"common\");\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, languageSet);\n            input = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale).replace('-', ' ').trim();\n            if ((org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) == (org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType)) {\n                if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n                    final java.lang.String java.lang.String = input.substring(2);\n                    final java.lang.String java.lang.String = \"d\" + remainder;\n                    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n                } \n                for (final java.lang.String java.lang.String : org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)) {\n                    if (input.startsWith((l + \" \"))) {\n                        final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n                        final java.lang.String java.lang.String = l + remainder;\n                        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n                    } \n                }\n            } \n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = java.util.Arrays.asList(input.split(\"\\\\s+\"));\n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            switch (org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) {\n                case SEPHARDIC :\n                    for (final java.lang.String java.lang.String : words) {\n                        final java.lang.String[] java.lang.String[] = aWord.split(\"'\");\n                        final java.lang.String java.lang.String = parts[((parts.int) - 1)];\n                        words2.add(lastPart);\n                    }\n                    words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType));\n                    break;\n                case ASHKENAZI :\n                    words2.addAll(words);\n                    words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType));\n                    break;\n                case GENERIC :\n                    words2.addAll(words);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException((\"Unreachable case: \" + (org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)));\n            }\n            if (org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean) {\n                input = org.apache.commons.codec.language.bm.PhoneticEngine.join(words2, \" \");\n            } else if ((words2.size()) == 1) {\n                input = words.iterator().next();\n            } else {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                for (final java.lang.String java.lang.String : words2) {\n                    result.append(\"-\").append(encode(word));\n                }\n                return result.substring(1);\n            }\n            org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(languageSet);\n            for (int int = 0 ; i < (input.length()) ; ) {\n                final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(rules , input , phonemeBuilder , i , int).invoke();\n                i = rulesApplication.getI();\n                phonemeBuilder = rulesApplication.getPhonemeBuilder();\n            }\n            phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1);\n            phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2);\n            return phonemeBuilder.makeString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX":"input","salt":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"ac7b5c46-2eb6-11e6-83fa-4540a20c7439","method":{"position":"org.apache.commons.codec.digest.DigestUtils:309","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[6,7,8],"tindex":"ac7b8357-2eb6-11e6-83fa-fb63f542d4bc","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:216","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) {\n    if (value == null) {\n        {\n            return doubleMetaphone(value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:268","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[9],"tindex":"ac7b8358-2eb6-11e6-83fa-31f2d3eb51b1","method":{"position":"org.apache.commons.codec.digest.DigestUtils:657","type":"CtMethodImpl","sourcecode":"public static byte[] sha512(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha512Digest(), data);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[10],"tindex":"ac7baa69-2eb6-11e6-83fa-49202f0ac229","method":{"position":"org.apache.commons.codec.binary.Base64:691","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final java.lang.String base64String) {\n    if (base64String == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.codec.binary.Base64().decode(base64String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"base64String"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[11,12,13,14,0,15,16,17,18,19,20,21,22,23,24,25,1,26,27,28,2,29,3,30,31,32,33,34,35,36,37,38,4,39,40,41],"tindex":"ac7baa6a-2eb6-11e6-83fa-abb8ab6f3be3","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:515","type":"CtMethodImpl","sourcecode":"public long getEncodedLength(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            if (pArray == null) {\n                {\n                    long long = ((((pArray.int) + (int)) - 1) / (int)) * ((long)(int));\n                    if ((int) > 0) {\n                        len += (((len + (int)) - 1) / (int)) * (int);\n                    } \n                    return len;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[42,43],"tindex":"ac7bd17b-2eb6-11e6-83fa-e7a119a09562","method":{"position":"org.apache.commons.codec.digest.HmacUtils:62","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacMd5(final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"ac7bd17c-2eb6-11e6-83fa-8fefbaf10a1c","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:298","type":"CtMethodImpl","sourcecode":"public static java.lang.String toAsciiString(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (raw == null) {\n                        {\n                            return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw));\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"raw"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtBinaryOperatorImpl","sourcecode":"(len & 1) != 0"},"failures":[44,45,46,47],"tindex":"ac7bf88d-2eb6-11e6-83fa-bf60526707d7","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:398","type":"CtMethodImpl","sourcecode":"private static void intToFourBytes(final int iValue, final byte[] b, int offset) {\n    if ((iValue & 1) != 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            b[(offset++)] = ((byte)(iValue & 255));\n            b[(offset++)] = ((byte)((iValue >>> 8) & 255));\n            b[(offset++)] = ((byte)((iValue >>> 16) & 255));\n            b[(offset++)] = ((byte)((iValue >>> 24) & 255));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"iValue"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[48,49,50,51,52,53,54,55],"tindex":"ac7c1f9e-2eb6-11e6-83fa-01c99009e905","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:244","type":"CtMethodImpl","sourcecode":"public boolean isDoubleMetaphoneEqual(final java.lang.String value1, final java.lang.String value2, final boolean alternate) {\n    if (!(value2.contains(\"[\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.equals(doubleMetaphone(value1, alternate), doubleMetaphone(value2, alternate));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"value2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[56],"tindex":"ac7c1f9f-2eb6-11e6-83fa-85713c304125","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:417","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String text) {\n    if (text == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return colognePhonetic(text);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"ac7c46b0-2eb6-11e6-83fa-73ceec92cdd4","method":{"position":"org.apache.commons.codec.digest.DigestUtils:222","type":"CtMethodImpl","sourcecode":"public static java.lang.String md2Hex(final byte[] data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:350","type":"CtBinaryOperatorImpl","sourcecode":"lastCode == '/'"},"failures":[57,58,59,60,61,62,63,64,65,66],"tindex":"ac7c46b1-2eb6-11e6-83fa-7129d44591cc","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:234","type":"CtMethodImpl","sourcecode":"public void addRight(final char chr) {\n    if (chr == '/') {\n        {\n            char[][int] = chr;\n            (int)++;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lastCode":"chr"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:188","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"tindex":"ac7c6dc2-2eb6-11e6-83fa-9fa2b1c1f5b6","method":{"position":"org.apache.commons.codec.language.bm.Rule:264","type":"CtMethodImpl","sourcecode":"private static java.util.Scanner createScanner(final java.lang.String lang) {\n    if ((lang != null) && (!(salt.startsWith(lang)))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (lang.startsWith(lang)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final java.lang.String java.lang.String = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang);\n                    final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName);\n                    if (rulesIS == null) {\n                        throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n                    } \n                    return new java.util.Scanner(rulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"lang","line":"lang"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135],"tindex":"ac7c6dc3-2eb6-11e6-83fa-b1de8c5ef325","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:212","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEquals(java.lang.String name1, java.lang.String name2) {\n    if (!(name2.contains(\"[\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n                return false;\n            } else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n                return false;\n            } else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n                return false;\n            } else if (name1.equalsIgnoreCase(name2)) {\n                return true;\n            } \n            name1 = cleanName(name1);\n            name2 = cleanName(name2);\n            name1 = removeVowels(name1);\n            name2 = removeVowels(name2);\n            name1 = removeDoubleConsonants(name1);\n            name2 = removeDoubleConsonants(name2);\n            name1 = getFirst3Last3(name1);\n            name2 = getFirst3Last3(name2);\n            if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                return false;\n            } \n            final int int = java.lang.Math.abs(((name1.length()) + (name2.length())));\n            int int = 0;\n            minRating = getMinRating(sumLength);\n            final int int = leftToRightThenRightToLeftProcessing(name1, name2);\n            return count >= minRating;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"name2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtInvocationImpl","sourcecode":"value.startsWith(element)"},"failures":[],"tindex":"ac7cbbe4-2eb6-11e6-83fa-c74c8692f1ed","method":{"position":"org.apache.commons.codec.digest.DigestUtils:362","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] sha(final java.lang.String data) {\n    if (data.startsWith(data)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"data","element":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:189","type":"CtBinaryOperatorImpl","sourcecode":"('H' == hwChar) || ('W' == hwChar)"},"failures":[],"tindex":"ac7cbbe5-2eb6-11e6-83fa-df5db7701164","method":{"position":"org.apache.commons.codec.language.Nysiis:118","type":"CtMethodImpl","sourcecode":"private static char[] transcodeRemaining(final char prev, final char curr, final char next, final char aNext) {\n    if (('H' == curr) || ('W' == hwChar)) {\n        {\n            if ((curr == 'E') && (next == 'V')) {\n                return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n            } \n            if (org.apache.commons.codec.language.Nysiis.isVowel(curr)) {\n                return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n            } \n            if (curr == 'Q') {\n                return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n            } else if (curr == 'Z') {\n                return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n            } else if (curr == 'M') {\n                return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n            } \n            if (curr == 'K') {\n                if (next == 'N') {\n                    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n                } else {\n                    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n                }\n            } \n            if (((curr == 'S') && (next == 'C')) && (aNext == 'H')) {\n                return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n            } \n            if ((curr == 'P') && (next == 'H')) {\n                return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n            } \n            if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n                return new char[]{ prev };\n            } \n            if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n                return new char[]{ prev };\n            } \n            return new char[]{ curr };\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"hwChar":"curr"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:145","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[],"tindex":"ac7ce2f6-2eb6-11e6-83fa-4b3ab5e8e8c8","method":{"position":"org.apache.commons.codec.language.bm.Rule:512","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input.equalsIgnoreCase(input)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((input != null) && (!(salt.startsWith(input)))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (input.endsWith(input)) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (input.length()) == 0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"input","line":"input"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[136],"tindex":"ac7d0a07-2eb6-11e6-83fa-fbd5f7b16766","method":{"position":"org.apache.commons.codec.digest.HmacUtils:367","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtBinaryOperatorImpl","sourcecode":"(salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))"},"failures":[],"tindex":"ac7d3118-2eb6-11e6-83fa-2311e92f2462","method":{"position":"org.apache.commons.codec.language.bm.Rule:512","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input.equalsIgnoreCase(input)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((input != null) && (!(salt.startsWith(input)))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (input.endsWith(input)) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (input.length()) == 0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"input","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:422","type":"CtBinaryOperatorImpl","sourcecode":"cmtI >= 0"},"failures":[],"tindex":"ac7d3119-2eb6-11e6-83fa-6bb6212e219f","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:582","type":"CtMethodImpl","sourcecode":"private int handleR(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index, final boolean slavoGermanic) {\n    if (index >= 0) {\n        {\n            if ((((index == ((value.length()) - 1)) && (!slavoGermanic)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"IE\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 2, \"ME\", \"MA\")))) {\n                result.appendAlternate('R');\n            } else {\n                result.append('R');\n            }\n            return (charAt(value, (index + 1))) == 'R' ? index + 2 : index + 1;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmtI":"index"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[],"tindex":"ac7d582a-2eb6-11e6-83fa-d770b2f594d4","method":{"position":"org.apache.commons.codec.language.bm.Rule:512","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input.equalsIgnoreCase(input)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((input != null) && (!(salt.startsWith(input)))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (input.endsWith(input)) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (input.length()) == 0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"input","name1":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"ac7d582b-2eb6-11e6-83fa-63595f4dfa2b","method":{"position":"org.apache.commons.codec.binary.StringUtils:366","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16Le(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtBinaryOperatorImpl","sourcecode":"ascii == null"},"failures":[137,138,139,140,141,142,143,144],"tindex":"ac7d7f3c-2eb6-11e6-83fa-5fe5f515b756","method":{"position":"org.apache.commons.codec.binary.StringUtils:279","type":"CtMethodImpl","sourcecode":"public static java.lang.String newString(final byte[] bytes, final java.lang.String charsetName) {\n    if (charsetName == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            try {\n                return new java.lang.String(bytes , charsetName);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"charsetName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[],"tindex":"ac7d7f3d-2eb6-11e6-83fa-bf059599570d","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:159","type":"CtMethodImpl","sourcecode":"java.lang.String getFirst3Last3(final java.lang.String name) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(name, 0, 5, \"CHORE\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = name.length();\n            if (nameLength > (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                final java.lang.String java.lang.String = name.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int);\n                final java.lang.String java.lang.String = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)), nameLength);\n                return firstThree + lastThree;\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.Base64:283","type":"CtBinaryOperatorImpl","sourcecode":"lineLength > 0"},"failures":[40,145],"tindex":"ac7da64e-2eb6-11e6-83fa-4993662eccd1","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final int i) throws java.io.IOException {\n    if (i > 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            byte[][0] = ((byte)(i));\n            write(byte[], 0, 1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineLength":"i"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:111","type":"CtBinaryOperatorImpl","sourcecode":"(es1 == null) || (es2 == null)"},"failures":[146,144],"tindex":"ac7da64f-2eb6-11e6-83fa-afabdee1dc2c","method":{"position":"org.apache.commons.codec.binary.StringUtils:238","type":"CtMethodImpl","sourcecode":"private static java.lang.IllegalStateException newIllegalStateException(final java.lang.String charsetName, final java.io.UnsupportedEncodingException e) {\n    if ((charsetName == null) || (charsetName == null)) {\n        {\n            return new java.lang.IllegalStateException(((charsetName + \": \") + e));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"es1":"charsetName","es2":"charsetName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:238","type":"CtBinaryOperatorImpl","sourcecode":"(ii & 1) == 1"},"failures":[147,148,149,150,48,50,51,52,53,7,55],"tindex":"ac7da650-2eb6-11e6-83fa-4121531f7b7d","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:269","type":"CtMethodImpl","sourcecode":"private int handleAEIOUY(final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if ((index & 1) == 1) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index == 0) {\n                result.append('A');\n            } \n            return index + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ii":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:366","type":"CtBinaryOperatorImpl","sourcecode":"(chr == 'S') || (chr == 'Z')"},"failures":[],"tindex":"ac7dcd61-2eb6-11e6-83fa-e799230c97da","method":{"position":"org.apache.commons.codec.language.Soundex:229","type":"CtMethodImpl","sourcecode":"private char map(final char ch) {\n    if ((ch == 'S') || (chr == 'Z')) {\n        {\n            final int int = ch - 'A';\n            if ((index < 0) || (index >= (org.apache.commons.codec.language.Soundex.this.getSoundexMapping().int))) {\n                throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch));\n            } \n            return org.apache.commons.codec.language.Soundex.this.getSoundexMapping()[index];\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"ch"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtInvocationImpl","sourcecode":"ph.startsWith(\"(\")"},"failures":[67,68,69,70,71,72,73,74,75,78,79,80,81,82,83,84],"tindex":"ac7dcd62-2eb6-11e6-83fa-bd6eaee49d33","method":{"position":"org.apache.commons.codec.language.bm.Lang:214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Languages.LanguageSet guessLanguages(final java.lang.String input) {\n    if (input.startsWith(\"(\")) {\n        {\n            final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(org.apache.commons.codec.language.bm.Lang.this.org.apache.commons.codec.language.bm.Languages.getLanguages());\n            for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n                if (rule.matches(text)) {\n                    if (rule.boolean) {\n                        langs.retainAll(rule.java.util.Set<java.lang.String>);\n                    } else {\n                        langs.removeAll(rule.java.util.Set<java.lang.String>);\n                    }\n                } \n            }\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs);\n            return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Crypt:70","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX)"},"failures":[],"tindex":"ac7df473-2eb6-11e6-83fa-9b74864b290d","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if (object.startsWith(object)) {\n        {\n            if (!(object instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.java.lang.String.java.lang.Class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"));\n            } \n            return encode(((java.lang.String)(object)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"object","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"object"},"type":"special","returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtBinaryOperatorImpl","sourcecode":"b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167],"tindex":"ac7df474-2eb6-11e6-83fa-a7606bf83824","method":{"position":"org.apache.commons.codec.net.Utils:42","type":"CtMethodImpl","sourcecode":"static int digit16(final byte b) throws org.apache.commons.codec.DecoderException {\n    if (b != b) {\n        {\n            final int int = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int);\n            if (i == (-1)) {\n                throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n            } \n            return i;\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","org.apache.commons.codec.net.QCodec.UNDERSCORE":"b"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtBinaryOperatorImpl","sourcecode":"(salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))"},"failures":[],"tindex":"ac7df475-2eb6-11e6-83fa-9f55aefb18b8","method":{"position":"org.apache.commons.codec.language.bm.Rule:264","type":"CtMethodImpl","sourcecode":"private static java.util.Scanner createScanner(final java.lang.String lang) {\n    if ((lang != null) && (!(salt.startsWith(lang)))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (lang.startsWith(lang)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final java.lang.String java.lang.String = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang);\n                    final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName);\n                    if (rulesIS == null) {\n                        throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n                    } \n                    return new java.util.Scanner(rulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"lang","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"lang"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:369","type":"CtBinaryOperatorImpl","sourcecode":"lastCode == '/'"},"failures":[],"tindex":"ac7e1b86-2eb6-11e6-83fa-af67547a5184","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:253","type":"CtMethodImpl","sourcecode":"public void addLeft(final char ch) {\n    if (ch == '/') {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            (int)++;\n            char[][getNextPos()] = ch;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lastCode":"ch"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"ac7e1b87-2eb6-11e6-83fa-f7cb638e5079","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:92","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) throws org.apache.commons.codec.EncoderException {\n    if ((source == null) || ((txt.length()) == 0)) {\n        {\n            if (source == null) {\n                return null;\n            } \n            return org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.encode(source);\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"source"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:70","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX)"},"failures":[86,89,168,91,92,94,95,99,100,102,103,104,105,106,107,169,108,110,111,114,116,117,119,120,121,124,125,126,127,128,129,131,133,135],"tindex":"ac7e1b88-2eb6-11e6-83fa-bd8a7220956d","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:294","type":"CtMethodImpl","sourcecode":"int leftToRightThenRightToLeftProcessing(final java.lang.String name1, final java.lang.String name2) {\n    if (name1 == null) {\n        {\n            if (name1.startsWith(name2)) {\n                {\n                    final char[] char[] = name1.toCharArray();\n                    final char[] char[] = name2.toCharArray();\n                    final int int = (name1.length()) - 1;\n                    final int int = (name2.length()) - 1;\n                    java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n                    java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n                    java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n                    java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n                    for (int int = 0 ; i < (name1Char.int) ; i++) {\n                        if (i > name2Size) {\n                            break;\n                        } \n                        name1LtRStart = name1.substring(i, (i + 1));\n                        name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n                        name2RtLStart = name2.substring(i, (i + 1));\n                        name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n                        if (name1LtRStart.equals(name2RtLStart)) {\n                            name1Char[i] = ' ';\n                            name2Char[i] = ' ';\n                        } \n                        if (name1LtREnd.equals(name2RtLEnd)) {\n                            name1Char[(name1Size - i)] = ' ';\n                            name2Char[(name2Size - i)] = ' ';\n                        } \n                    }\n                    final java.lang.String java.lang.String = new java.lang.String(name1Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n                    final java.lang.String java.lang.String = new java.lang.String(name2Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n                    if ((strA.length()) > (strB.length())) {\n                        return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())));\n                    } else {\n                        return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())));\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"name1","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"name2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:249","type":"CtBinaryOperatorImpl","sourcecode":"(context.buffer) == null"},"failures":[],"tindex":"ac7e4299-2eb6-11e6-83fa-176dc1b9872c","method":{"position":"org.apache.commons.codec.binary.Base32:336","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid decode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (in == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (context.boolean) {\n                return ;\n            } \n            if (inAvail < 0) {\n                context.boolean = true;\n            } \n            for (int int = 0 ; i < inAvail ; i++) {\n                final byte byte = in[(inPos++)];\n                if (b == (byte)) {\n                    context.boolean = true;\n                    break;\n                } else {\n                    final byte[] byte[] = ensureBufferSize(int, context);\n                    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.byte[].int))) {\n                        final int int = org.apache.commons.codec.binary.Base32.this.byte[][b];\n                        if (result >= 0) {\n                            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n                            context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n                            if ((context.int) == 0) {\n                                buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                            } \n                        } \n                    } \n                }\n            }\n            if ((context.boolean) && ((context.int) >= 2)) {\n                final byte[] byte[] = ensureBufferSize(int, context);\n                switch (context.int) {\n                    case 2 :\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    case 3 :\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 7) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    case 4 :\n                        context.long = (context.long) >> 4;\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    case 5 :\n                        context.long = (context.long) >> 1;\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    case 6 :\n                        context.long = (context.long) >> 6;\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    case 7 :\n                        context.long = (context.long) >> 3;\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    default :\n                        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                }\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"context","buffer":"in"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:70","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX)"},"failures":[170,171],"tindex":"ac7e90ba-2eb6-11e6-83fa-c7ed2b6f2fde","method":{"position":"org.apache.commons.codec.digest.HmacUtils:295","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key.startsWith(key)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"key","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"ac7e90bb-2eb6-11e6-83fa-170e6de3f089","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:515","type":"CtMethodImpl","sourcecode":"public long getEncodedLength(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            if (pArray == null) {\n                {\n                    long long = ((((pArray.int) + (int)) - 1) / (int)) * ((long)(int));\n                    if ((int) > 0) {\n                        len += (((len + (int)) - 1) / (int)) * (int);\n                    } \n                    return len;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[172,173],"tindex":"ac7eb7cc-2eb6-11e6-83fa-8bcf24cf23f2","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:238","type":"CtMethodImpl","sourcecode":"public static byte[] toAsciiBytes(final byte[] raw) {\n    if (raw == null) {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            final byte[] byte[] = new byte[(raw.int) << 3];\n            for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                        l_ascii[(jj - bits)] = '0';\n                    } else {\n                        l_ascii[(jj - bits)] = '1';\n                    }\n                }\n            }\n            return l_ascii;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"raw"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"tindex":"ac7eb7cd-2eb6-11e6-83fa-f5fad073456b","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ac7edede-2eb6-11e6-83fa-61f46857826b","method":{"position":"org.apache.commons.codec.language.Caverphone:57","type":"CtMethodImpl","sourcecode":"public java.lang.String caverphone(final java.lang.String source) {\n    if (source == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.org.apache.commons.codec.language.Caverphone2.encode(source);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[172,174,173,175,176],"tindex":"ac7ededf-2eb6-11e6-83fa-fda444fa3760","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:225","type":"CtMethodImpl","sourcecode":"private static boolean isEmpty(final byte[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (array == null) || ((array.int) == 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:180","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[153,177,178,154,155,156,179,180,181,182,158,183],"tindex":"ac7edee0-2eb6-11e6-83fa-f11a14ed57db","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:574","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.nio.charset.Charset charset) {\n    if ((str.length()) == 0) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str.getBytes(charset)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[184,185,186,187,188,189,146],"tindex":"ac7f05f1-2eb6-11e6-83fa-bb2c5559141c","method":{"position":"org.apache.commons.codec.binary.StringUtils:137","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUnchecked(final java.lang.String string, final java.lang.String charsetName) {\n    if (string.startsWith(charsetName)) {\n        {\n            if (string == null) {\n                {\n                    if (string == null) {\n                        return null;\n                    } \n                    try {\n                        return string.getBytes(charsetName);\n                    } catch (final java.io.UnsupportedEncodingException e) {\n                        throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"string"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START)"},"failures":[],"tindex":"ac7f05f2-2eb6-11e6-83fa-c114d83cfd0d","method":{"position":"org.apache.commons.codec.language.Soundex:183","type":"CtMethodImpl","sourcecode":"private char getMappingCode(final java.lang.String str, final int index) {\n    if (str.startsWith(str)) {\n        {\n            final char char = org.apache.commons.codec.language.Soundex.this.map(str.charAt(index));\n            if ((index > 1) && (mappedChar != '0')) {\n                final char char = str.charAt((index - 1));\n                if (('H' == hwChar) || ('W' == hwChar)) {\n                    final char char = str.charAt((index - 2));\n                    final char char = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n                    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n                        return 0;\n                    } \n                } \n            } \n            return mappedChar;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"str","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtInvocationImpl","sourcecode":"ph.startsWith(\"(\")"},"failures":[],"tindex":"ac7f05f3-2eb6-11e6-83fa-a95a0ac9b08d","method":{"position":"org.apache.commons.codec.language.bm.Rule:124","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Rule.Phoneme append(final java.lang.CharSequence str) {\n    if (str.startsWith(\"(\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(str);\n            return org.apache.commons.codec.language.bm.Rule.Phoneme.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"str"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:447","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"ac7f2d04-2eb6-11e6-83fa-35f8b58d4de3","method":{"position":"org.apache.commons.codec.language.bm.Lang:202","type":"CtMethodImpl","sourcecode":"public java.lang.String guessLanguage(final java.lang.String text) {\n    if (text == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text);\n            return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"text"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[67,68,69,70,71,72,73,74,75,78,79,80,81,82,84],"tindex":"ac7f2d05-2eb6-11e6-83fa-534675d0e91f","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:91","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.CharSequence str) {\n    if ((str.length()) == 0) {\n        {\n            for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n                ph.append(str);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[],"tindex":"ac7f2d06-2eb6-11e6-83fa-e369ee6d0dc4","method":{"position":"org.apache.commons.codec.language.Metaphone:414","type":"CtMethodImpl","sourcecode":"public boolean isMetaphoneEqual(final java.lang.String str1, final java.lang.String str2) {\n    if (str1.equals(\"\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return metaphone(str1).equals(metaphone(str2));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"str1"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:188","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[153,177,178,154,155,156,179,180,181,182,158,183],"tindex":"ac7f5417-2eb6-11e6-83fa-ff211f5f41d9","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:429","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str.startsWith(str)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"str","line":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"ac7f5418-2eb6-11e6-83fa-535e08ff0b00","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:201","type":"CtMethodImpl","sourcecode":"private static int getUnsignedOctet(final int index, final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = bytes[index];\n            if (b < 0) {\n                b = 256 + b;\n            } \n            return b;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:145","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[57,58,59,60,61,62,63,64,65,190,66],"tindex":"ac7f5419-2eb6-11e6-83fa-41039ee42d97","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:428","type":"CtMethodImpl","sourcecode":"private java.lang.String preprocess(java.lang.String text) {\n    if (text.endsWith(text)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            text = text.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final char[] char[] = text.toCharArray();\n            for (int int = 0 ; index < (chrs.int) ; index++) {\n                if ((chrs[index]) > 'Z') {\n                    for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n                        if ((chrs[index]) == (element[0])) {\n                            chrs[index] = element[1];\n                            break;\n                        } \n                    }\n                } \n            }\n            return new java.lang.String(chrs);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"text","line":"text"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"ac7f7b2a-2eb6-11e6-83fa-119b706f8e94","method":{"position":"org.apache.commons.codec.binary.StringUtils:350","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16Be(final byte[] bytes) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(bytes)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"bytes"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"ac7f7b2b-2eb6-11e6-83fa-a30b2a05c4c2","method":{"position":"org.apache.commons.codec.binary.Base64:620","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked) {\n    if (isChunked) {\n        {\n            if (binaryData == binaryData) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (isChunked && isChunked) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, false);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"binaryData","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"binaryData"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:268","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[191],"tindex":"ac7f7b2c-2eb6-11e6-83fa-2f1a483ab740","method":{"position":"org.apache.commons.codec.digest.DigestUtils:516","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[148,149,52,53,7],"tindex":"ac7fa23d-2eb6-11e6-83fa-01079b8f063a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:331","type":"CtMethodImpl","sourcecode":"private int handleCC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n                if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n                    result.append(\"KS\");\n                } else {\n                    result.append('X');\n                }\n                index += 3;\n            } else {\n                result.append('K');\n                index += 2;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"ac7fa23e-2eb6-11e6-83fa-c36656b0c0dd","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:298","type":"CtMethodImpl","sourcecode":"public static java.lang.String toAsciiString(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (raw == null) {\n                        {\n                            return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw));\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"raw"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[13],"tindex":"ac7fa23f-2eb6-11e6-83fa-bd03e98ac957","method":{"position":"org.apache.commons.codec.net.BCodec:197","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object value) throws org.apache.commons.codec.EncoderException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return null;\n            } else if (value instanceof java.lang.String) {\n                return encode(((java.lang.String)(value)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:354","type":"CtBinaryOperatorImpl","sourcecode":"(chr == 'B') || ((chr == 'P') && (nextChar != 'H'))"},"failures":[],"tindex":"ac7fc950-2eb6-11e6-83fa-d979906783a5","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:865","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if ((ch == 'B') || ((chr == 'P') && (ch != 'H'))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String.indexOf(ch)) != (-1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nextChar":"ch","chr":"ch"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[],"tindex":"ac7fc951-2eb6-11e6-83fa-430415912ceb","method":{"position":"org.apache.commons.codec.binary.StringUtils:216","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Le(final java.lang.String string) {\n    if (string.equals(\"\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"string"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:111","type":"CtBinaryOperatorImpl","sourcecode":"(es1 == null) || (es2 == null)"},"failures":[11,12,13],"tindex":"ac7fc952-2eb6-11e6-83fa-175ef6d8fd00","method":{"position":"org.apache.commons.codec.net.BCodec:119","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if ((value == null) || (value == null)) {\n        {\n            if (value == null) {\n                return null;\n            } \n            return encodeText(value, charset);\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"es1":"value","es2":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"ac7fc953-2eb6-11e6-83fa-d52bac28ae7d","method":{"position":"org.apache.commons.codec.digest.HmacUtils:566","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha384(final java.lang.String key, final java.lang.String valueToDigest) {\n    if ((valueToDigest == null) || ((txt.length()) == 0)) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacSha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"valueToDigest"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtUnaryOperatorImpl","sourcecode":"!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))"},"failures":[67,68,69,70,71,73,74,75,78,79,80,81,82,83],"tindex":"ac7ff064-2eb6-11e6-83fa-edf00b6c54f6","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:383","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String input) {\n    if (!(input.matches(((\"^[\" + input) + \"]{2,}$\")))) {\n        {\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.Lang.guessLanguages(input);\n            return encode(input, languageSet);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"input","org.apache.commons.codec.digest.B64.B64T":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:633","type":"CtBinaryOperatorImpl","sourcecode":"(index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))"},"failures":[148,149,52,53],"tindex":"ac7ff065-2eb6-11e6-83fa-51f7b2ec2c7b","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:816","type":"CtMethodImpl","sourcecode":"private boolean conditionCH1(final java.lang.String value, final int index) {\n    if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n        {\n            return ((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"T\", \"S\"))) || (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (index == 0)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])) || ((index + 1) == ((value.length()) - 1))));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[192,193,194,191,195,9,196],"tindex":"ac801776-2eb6-11e6-83fa-6d6a925c682b","method":{"position":"org.apache.commons.codec.digest.DigestUtils:792","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest updateDigest(final java.security.MessageDigest digest, final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            final byte[] byte[] = new byte[org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int];\n            int int = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int);\n            while (read > (-1)) {\n                digest.update(buffer, 0, read);\n                read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int);\n            }\n            return digest;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtBinaryOperatorImpl","sourcecode":"b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[197,198,36,37,199,38,200,201,202,203,204,205,206,145,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222],"tindex":"ac801777-2eb6-11e6-83fa-4715ca1b44a0","method":{"position":"org.apache.commons.codec.binary.Base32:536","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isInAlphabet(final byte octet) {\n    if (octet != octet) {\n        {\n            return ((octet >= 0) && (octet < (byte[].int))) && ((byte[][octet]) != (-1));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"octet","org.apache.commons.codec.net.QCodec.UNDERSCORE":"octet"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:218","type":"CtBinaryOperatorImpl","sourcecode":"((name1.length()) == 1) || ((name2.length()) == 1)"},"failures":[77],"tindex":"ac801778-2eb6-11e6-83fa-db2eaae4d340","method":{"position":"org.apache.commons.codec.language.bm.Rule:319","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.codec.language.bm.Rule> getInstance(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (((lang.length()) == 1) || ((lang.length()) == 1)) {\n        {\n            return org.apache.commons.codec.language.bm.Rule.getInstance(nameType, rt, org.apache.commons.codec.language.bm.Languages.LanguageSet.from(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(lang))));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"lang","name1":"lang"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[223,224,225,226],"tindex":"ac803e89-2eb6-11e6-83fa-555b753eaf0a","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:125","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final java.lang.String encode(java.lang.String name) {\n    if ((name.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n                return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            } \n            name = cleanName(name);\n            name = removeVowels(name);\n            name = removeDoubleConsonants(name);\n            name = getFirst3Last3(name);\n            return name;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"name"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:68","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX)"},"failures":[],"tindex":"ac803e8a-2eb6-11e6-83fa-97f80e00580e","method":{"position":"org.apache.commons.codec.binary.StringUtils:137","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUnchecked(final java.lang.String string, final java.lang.String charsetName) {\n    if (string.startsWith(charsetName)) {\n        {\n            if (string == null) {\n                {\n                    if (string == null) {\n                        return null;\n                    } \n                    try {\n                        return string.getBytes(charsetName);\n                    } catch (final java.io.UnsupportedEncodingException e) {\n                        throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX":"charsetName","salt":"string"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtBinaryOperatorImpl","sourcecode":"index > 0"},"failures":[148,149,52,53,7],"tindex":"ac803e8b-2eb6-11e6-83fa-ef41eb3dfd94","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:408","type":"CtMethodImpl","sourcecode":"private int handleG(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (index > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                index = handleGH(value, result, index);\n            } else if ((charAt(value, (index + 1))) == 'N') {\n                if (((index == 1) && (isVowel(charAt(value, 0)))) && (!slavoGermanic)) {\n                    result.append(\"KN\", \"N\");\n                } else if (((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"EY\"))) && ((charAt(value, (index + 1))) != 'Y')) && (!slavoGermanic)) {\n                    result.append(\"N\", \"KN\");\n                } else {\n                    result.append(\"KN\");\n                }\n                index = index + 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"LI\")) && (!slavoGermanic)) {\n                result.append(\"KL\", \"L\");\n                index += 2;\n            } else if ((index == 0) && (((charAt(value, (index + 1))) == 'Y') || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])))) {\n                result.append('K', 'J');\n                index += 2;\n            } else if (((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ER\")) || ((charAt(value, (index + 1))) == 'Y')) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"E\", \"I\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"RGY\", \"OGY\")))) {\n                result.append('K', 'J');\n                index += 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"E\", \"I\", \"Y\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"AGGI\", \"OGGI\"))) {\n                if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ET\"))) {\n                    result.append('K');\n                } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n                    result.append('J');\n                } else {\n                    result.append('J', 'K');\n                }\n                index += 2;\n            } else if ((charAt(value, (index + 1))) == 'G') {\n                index += 2;\n                result.append('K');\n            } else {\n                index++;\n                result.append('K');\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:265","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"ac80659c-2eb6-11e6-83fa-d5052176ab6e","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:83","type":"CtMethodImpl","sourcecode":"java.lang.String cleanName(final java.lang.String name) {\n    if (name == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = name.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" };\n            for (final java.lang.String java.lang.String : charsToTrim) {\n                upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            }\n            upperName = removeAccents(upperName);\n            upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            return upperName;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"ac808cad-2eb6-11e6-83fa-91bb2d8ad562","method":{"position":"org.apache.commons.codec.digest.HmacUtils:494","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[227],"tindex":"ac808cae-2eb6-11e6-83fa-8f8814672042","method":{"position":"org.apache.commons.codec.digest.HmacUtils:688","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == key) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"key","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[170,171],"tindex":"ac808caf-2eb6-11e6-83fa-79e2575e86c3","method":{"position":"org.apache.commons.codec.digest.HmacUtils:205","type":"CtMethodImpl","sourcecode":"public static byte[] hmacMd5(final byte[] key, final byte[] valueToDigest) {\n    if (key != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:388","type":"CtBinaryOperatorImpl","sourcecode":"(chr == 'M') || (chr == 'N')"},"failures":[],"tindex":"ac808cb0-2eb6-11e6-83fa-3bdca2e2960b","method":{"position":"org.apache.commons.codec.language.Nysiis:100","type":"CtMethodImpl","sourcecode":"private static boolean isVowel(final char c) {\n    if ((c == 'M') || (chr == 'N')) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((((c == 'A') || (c == 'E')) || (c == 'I')) || (c == 'O')) || (c == 'U');\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"c"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"ac80b3c1-2eb6-11e6-83fa-1d22e263c96d","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:294","type":"CtMethodImpl","sourcecode":"int leftToRightThenRightToLeftProcessing(final java.lang.String name1, final java.lang.String name2) {\n    if (name1 == null) {\n        {\n            if (name1.startsWith(name2)) {\n                {\n                    final char[] char[] = name1.toCharArray();\n                    final char[] char[] = name2.toCharArray();\n                    final int int = (name1.length()) - 1;\n                    final int int = (name2.length()) - 1;\n                    java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n                    java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n                    java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n                    java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n                    for (int int = 0 ; i < (name1Char.int) ; i++) {\n                        if (i > name2Size) {\n                            break;\n                        } \n                        name1LtRStart = name1.substring(i, (i + 1));\n                        name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n                        name2RtLStart = name2.substring(i, (i + 1));\n                        name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n                        if (name1LtRStart.equals(name2RtLStart)) {\n                            name1Char[i] = ' ';\n                            name2Char[i] = ' ';\n                        } \n                        if (name1LtREnd.equals(name2RtLEnd)) {\n                            name1Char[(name1Size - i)] = ' ';\n                            name2Char[(name2Size - i)] = ' ';\n                        } \n                    }\n                    final java.lang.String java.lang.String = new java.lang.String(name1Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n                    final java.lang.String java.lang.String = new java.lang.String(name2Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n                    if ((strA.length()) > (strB.length())) {\n                        return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())));\n                    } else {\n                        return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())));\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name1"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[228,229],"tindex":"ac80b3c2-2eb6-11e6-83fa-2b459aa0821c","method":{"position":"org.apache.commons.codec.digest.HmacUtils:789","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac updateHmac(final javax.crypto.Mac mac, final java.lang.String valueToDigest) {\n    if (!(valueToDigest.contains(\"[\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            mac.reset();\n            mac.update(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n            return mac;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"valueToDigest"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[230,217],"tindex":"ac80dad3-2eb6-11e6-83fa-c9d916adde7f","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:191","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(final long n) throws java.io.IOException {\n    if (n < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n < 0) {\n                throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n            } \n            final byte[] byte[] = new byte[512];\n            long long = n;\n            while (todo > 0) {\n                int int = ((int)(java.lang.Math.min(b.int, todo)));\n                len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n                if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n                    break;\n                } \n                todo -= len;\n            }\n            return n - todo;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:535","type":"CtVariableReadImpl","sourcecode":"endsWith"},"failures":[],"tindex":"ac80dad4-2eb6-11e6-83fa-51c84de7523c","method":{"position":"org.apache.commons.codec.binary.Base64:620","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked) {\n    if (isChunked) {\n        {\n            if (binaryData == binaryData) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (isChunked && isChunked) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, false);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"endsWith":"isChunked"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[231,232],"tindex":"ac80dad5-2eb6-11e6-83fa-29ba428c8b38","method":{"position":"org.apache.commons.codec.net.QCodec:264","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return decodeText(str);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:486","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[233],"tindex":"ac8101e6-2eb6-11e6-83fa-bdf1292d9554","method":{"position":"org.apache.commons.codec.binary.Base64:523","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final java.lang.String base64) {\n    if (base64 == null) {\n        {\n            return org.apache.commons.codec.binary.Base64.isBase64(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(base64));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"base64"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[176],"tindex":"ac8101e7-2eb6-11e6-83fa-e76b6cda5243","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:140","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] ascii) {\n    if (ascii == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"ascii"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[234],"tindex":"ac8101e8-2eb6-11e6-83fa-0f29bdda914b","method":{"position":"org.apache.commons.codec.binary.Base64:705","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final byte[] base64Data) {\n    if (base64Data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.codec.binary.Base64().decode(base64Data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"base64Data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:412","type":"CtVariableReadImpl","sourcecode":"inMultilineComment"},"failures":[235],"tindex":"ac8101e9-2eb6-11e6-83fa-53fc003267b1","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:463","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final byte[] arrayOctet, final boolean allowWSPad) {\n    if (allowWSPad) {\n        {\n            for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inMultilineComment":"allowWSPad"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:95","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txtLength = txt.length()) == 0)"},"failures":[],"tindex":"ac8128fa-2eb6-11e6-83fa-37154b6a989d","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:781","type":"CtMethodImpl","sourcecode":"private boolean conditionC0(final java.lang.String value, final int index) {\n    if ((value == null) || ((index = txt.length()) == 0)) {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHIA\")) {\n                return true;\n            } else if (index <= 1) {\n                return false;\n            } else if (isVowel(charAt(value, (index - 2)))) {\n                return false;\n            } else if (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ACH\"))) {\n                return false;\n            } else {\n                final char char = charAt(value, (index + 2));\n                return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"value","txtLength":"index"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[196],"tindex":"ac8128fb-2eb6-11e6-83fa-797cf92247d4","method":{"position":"org.apache.commons.codec.digest.DigestUtils:732","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String shaHex(final byte[] data) {\n    if (data == data) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"data","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:168","type":"CtBinaryOperatorImpl","sourcecode":"b == '+'"},"failures":[],"tindex":"ac8128fc-2eb6-11e6-83fa-630d59e43023","method":{"position":"org.apache.commons.codec.language.Metaphone:342","type":"CtMethodImpl","sourcecode":"private boolean isPreviousChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (index == '+') {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if ((index > 0) && (index < (string.length()))) {\n                matches = (string.charAt((index - 1))) == c;\n            } \n            return matches;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[11,12,236,10,237,15,16,17,18,19,20,21,22,23,24,25,238,239,240,241,234,28,242,29,243,30,244,245,246,247,33,248,249,250,251,252],"tindex":"ac81500d-2eb6-11e6-83fa-35e53503d264","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            if ((pArray == null) || ((pArray.int) == 0)) {\n                return pArray;\n            } \n            final org.apache.commons.codec.binary.BaseNCodec.Context org.apache.commons.codec.binary.BaseNCodec.Context = new org.apache.commons.codec.binary.BaseNCodec.Context();\n            decode(pArray, 0, pArray.int, context);\n            decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context);\n            final byte[] byte[] = new byte[context.int];\n            readResults(result, 0, result.int, context);\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[11,12,13,14,253,0,15,16,17,18,19,20,21,22,254,23,24,25,1,26,28,2,29,3,30,255,31,245,32,33,34,35,197,198,36,37,199,38,200,201,256,257,4,39,40,41,206,145,207,222],"tindex":"ac81500e-2eb6-11e6-83fa-432152bd4b1a","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:425","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            if ((pArray == null) || ((pArray.int) == 0)) {\n                return pArray;\n            } \n            final org.apache.commons.codec.binary.BaseNCodec.Context org.apache.commons.codec.binary.BaseNCodec.Context = new org.apache.commons.codec.binary.BaseNCodec.Context();\n            encode(pArray, 0, pArray.int, context);\n            encode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context);\n            final byte[] byte[] = new byte[(context.int) - (context.int)];\n            readResults(buf, 0, buf.int, context);\n            return buf;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[191],"tindex":"ac81771f-2eb6-11e6-83fa-1739c5f830b2","method":{"position":"org.apache.commons.codec.digest.DigestUtils:469","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha256Digest(), data);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"ac817720-2eb6-11e6-83fa-bb347c45c086","method":{"position":"org.apache.commons.codec.net.BCodec:137","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if (charset.startsWith(charset)) {\n        {\n            if (value == null) {\n                return null;\n            } \n            try {\n                return org.apache.commons.codec.net.BCodec.this.encodeText(value, charset);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"charset","line":"charset"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[148,149,52,53],"tindex":"ac817721-2eb6-11e6-83fa-c759f93e706b","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:800","type":"CtMethodImpl","sourcecode":"private boolean conditionCH0(final java.lang.String value, final int index) {\n    if (value == null) {\n        {\n            if (index != 0) {\n                return false;\n            } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n                return false;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:162","type":"CtBinaryOperatorImpl","sourcecode":"nameLength > (org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX)"},"failures":[],"tindex":"ac817722-2eb6-11e6-83fa-a133ce45ea8e","method":{"position":"org.apache.commons.codec.language.Metaphone:338","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final java.lang.StringBuilder string, final int index) {\n    if (index > index) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(string.charAt(index))) >= 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameLength":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[16,23],"tindex":"ac819e33-2eb6-11e6-83fa-0d80d9b25795","method":{"position":"org.apache.commons.codec.binary.Base64:581","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64URLSafe(final byte[] binaryData) {\n    if (binaryData == null) {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"ac819e34-2eb6-11e6-83fa-877c4d228d11","method":{"position":"org.apache.commons.codec.binary.StringUtils:180","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16(final java.lang.String string) {\n    if (string.startsWith(string)) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"string","line":"string"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[258,259,230,260,261,262,186,208,209,217,218,220,221],"tindex":"ac819e35-2eb6-11e6-83fa-f7b60a8ba890","method":{"position":"org.apache.commons.codec.binary.StringUtils:113","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesIso8859_1(final java.lang.String string) {\n    if ((string.length()) == 0) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"string"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[263],"tindex":"ac819e36-2eb6-11e6-83fa-eb1c8cbc9c1f","method":{"position":"org.apache.commons.codec.digest.HmacUtils:526","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha384(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
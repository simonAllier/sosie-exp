{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":177,"org.apache.commons.codec.binary.HexTest.testCustomCharset":3,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":29,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":157,"org.apache.commons.codec.language.NysiisTest.testSnat":112,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":167,"org.apache.commons.codec.language.NysiisTest.testEncodeEmpty":118,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":75,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":73,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":74,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":21,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":175,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":179,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":20,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":44,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":100,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":77,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":166,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":145,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":17,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":154,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":126,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":11,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":30,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":137,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":9,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":12,"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence":98,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":53,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":97,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":6,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":158,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":39,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":87,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":89,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":144,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":88,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":66,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":22,"org.apache.commons.codec.language.NysiisTest.testCap":101,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":176,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":13,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":58,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":86,"org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey":180,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":84,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":161,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":56,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":85,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":162,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":163,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":173,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":178,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":124,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":133,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":169,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":36,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":38,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii":65,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":172,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":5,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":37,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":43,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":60,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":28,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":95,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":96,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":10,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":31,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":78,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":153,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":123,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":127,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":170,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":130,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":132,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":67,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":33,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":141,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":142,"org.apache.commons.codec.language.SoundexTest.testB650":72,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":64,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":160,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":122,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":92,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":42,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":54,"org.apache.commons.codec.language.SoundexTest.testNewInstance":81,"org.apache.commons.codec.language.MetaphoneTest.testWhy":150,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":27,"org.apache.commons.codec.language.NysiisTest.testTranan":116,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":35,"org.apache.commons.codec.language.NysiisTest.testEncodeNull":136,"org.apache.commons.codec.language.NysiisTest.testFal":104,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":165,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":91,"org.apache.commons.codec.language.NysiisTest.testSnad":111,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":135,"org.apache.commons.codec.language.MetaphoneTest.testTCH":149,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":32,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":57,"org.apache.commons.codec.language.MetaphoneTest.testLocaleIndependence":7,"org.apache.commons.codec.language.NysiisTest.testLocaleIndependence":119,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":131,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":120,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":69,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":70,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":71,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":16,"org.apache.commons.codec.language.NysiisTest.testDropBy":114,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":138,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":19,"org.apache.commons.codec.binary.Base64Test.testUUID":1,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":26,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":134,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":50,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":129,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":140,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":139,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":146,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":40,"org.apache.commons.codec.language.NysiisTest.testRule2":106,"org.apache.commons.codec.language.NysiisTest.testRule1":105,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":62,"org.apache.commons.codec.language.NysiisTest.testRule7":109,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":41,"org.apache.commons.codec.language.NysiisTest.testRule6":108,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":51,"org.apache.commons.codec.language.NysiisTest.testRule5":107,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":14,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":155,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":82,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":0,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":113,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":143,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":4,"org.apache.commons.codec.language.NysiisTest.testBran":110,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":117,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":159,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":94,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":46,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":79,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":121,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":24,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":148,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":90,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":59,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":93,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":147,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":63,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":47,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":76,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":49,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":156,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":151,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":171,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":45,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":152,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":83,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":68,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":18,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":128,"org.apache.commons.codec.language.NysiisTest.testDad":102,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":174,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":181,"org.apache.commons.codec.language.NysiisTest.testOthers":115,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":61,"org.apache.commons.codec.language.SoundexTest.testDifference":80,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1":8,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":99,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":55,"org.apache.commons.codec.language.NysiisTest.testDan":103,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":168,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":48,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":34,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":15,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":25,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":164,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":125},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"89b7b0d6-2e7f-11e6-bc55-95054f373044","method":{"position":"org.apache.commons.codec.binary.Base64:581","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64URLSafe(final byte[] binaryData) {\n    if (binaryData == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isLetter(c))"},"failures":[0,1,2,3,4,5],"tindex":"89b87427-2e7f-11e6-bc55-675a98db8afb","method":{"position":"org.apache.commons.codec.binary.Hex:175","type":"CtMethodImpl","sourcecode":"protected static int toDigit(final char ch, final int index) throws org.apache.commons.codec.DecoderException {\n    if (!(java.lang.Character.isLetter(ch))) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            final int int = java.lang.Character.digit(ch, 16);\n            if (digit == (-1)) {\n                throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + ch) + \" at index \") + index));\n            } \n            return digit;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"ch"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:111","type":"CtBinaryOperatorImpl","sourcecode":"(es1 == null) || (es2 == null)"},"failures":[],"tindex":"89b89b38-2e7f-11e6-bc55-f53a0093cf87","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:277","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String original, final java.lang.String salt) {\n    if ((salt == null) || (salt == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.UnixCrypt.crypt(original.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"es1":"salt","es2":"salt"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"89b8c249-2e7f-11e6-bc55-590235999c32","method":{"position":"org.apache.commons.codec.digest.DigestUtils:222","type":"CtMethodImpl","sourcecode":"public static java.lang.String md2Hex(final byte[] data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)"},"failures":[],"tindex":"89b8c24a-2e7f-11e6-bc55-83bf2a70c872","method":{"position":"org.apache.commons.codec.net.BCodec:221","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object value) throws org.apache.commons.codec.DecoderException {\n    if (value.endsWith(value)) {\n        {\n            if (value == null) {\n                return null;\n            } else if (value instanceof java.lang.String) {\n                return decode(((java.lang.String)(value)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"));\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"value","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END":"value"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[6],"tindex":"89b8e95b-2e7f-11e6-bc55-2b2c6deb6f5b","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] raw) {\n    if (raw == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw == null) {\n                {\n                    if (raw == null) {\n                        {\n                            return org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(raw);\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"raw"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[7],"tindex":"89b9106c-2e7f-11e6-bc55-018371247ffe","method":{"position":"org.apache.commons.codec.language.Metaphone:402","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    return metaphone(str);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"89b9106d-2e7f-11e6-bc55-9ddca99c042e","method":{"position":"org.apache.commons.codec.language.Metaphone:402","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    return metaphone(str);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:71","type":"CtBinaryOperatorImpl","sourcecode":"((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))"},"failures":[],"tindex":"89b9377e-2e7f-11e6-bc55-63fcf0eea6b6","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:194","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (((java.lang.Character.toUpperCase(ch)) != (java.lang.Character.toUpperCase(ch))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n        {\n            return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u');\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c1":"ch","c2":"ch"},"type":"special","returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtBinaryOperatorImpl","sourcecode":"ruleType == (org.apache.commons.codec.language.bm.RuleType.RULES)"},"failures":[],"tindex":"89b95e8f-2e7f-11e6-bc55-ed55e8792875","method":{"position":"org.apache.commons.codec.net.QCodec:309","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj == obj) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be decoded using Q codec\"));\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"obj","ruleType":"obj"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtBinaryOperatorImpl","sourcecode":"(((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)"},"failures":[],"tindex":"89b95e90-2e7f-11e6-bc55-4992b57cd948","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:574","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.nio.charset.Charset charset) {\n    if ((((str == null) || (str.equalsIgnoreCase(name))) || (str.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str.getBytes(charset)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"89b985a1-2e7f-11e6-bc55-ed861308a7ae","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:597","type":"CtMethodImpl","sourcecode":"private int handleS(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n                index++;\n            } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n                result.append('X', 'S');\n                index++;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                    result.append('S');\n                } else {\n                    result.append('X');\n                }\n                index += 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n                if (slavoGermanic) {\n                    result.append('S');\n                } else {\n                    result.append('S', 'X');\n                }\n                index += 3;\n            } else if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n                result.append('S', 'X');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n                index = handleSC(value, result, index);\n            } else {\n                if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n                    result.appendAlternate('S');\n                } else {\n                    result.append('S');\n                }\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[8],"tindex":"89b9d3c2-2e7f-11e6-bc55-433df2d527b3","method":{"position":"org.apache.commons.codec.binary.StringUtils:302","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringIso8859_1(final byte[] bytes) {\n    if (bytes != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"89bae533-2e7f-11e6-bc55-91b0cf9ba9b5","method":{"position":"org.apache.commons.codec.language.bm.Lang:214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Languages.LanguageSet guessLanguages(final java.lang.String input) {\n    if (!(input.endsWith(\")\"))) {\n        {\n            if (input == null) {\n                {\n                    final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(org.apache.commons.codec.language.bm.Lang.this.org.apache.commons.codec.language.bm.Languages.getLanguages());\n                    for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n                        if (rule.matches(text)) {\n                            if (rule.boolean) {\n                                langs.retainAll(rule.java.util.Set<java.lang.String>);\n                            } else {\n                                langs.removeAll(rule.java.util.Set<java.lang.String>);\n                            }\n                        } \n                    }\n                    final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs);\n                    return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"89bb0c44-2e7f-11e6-bc55-618c0978288b","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:377","type":"CtMethodImpl","sourcecode":"private java.lang.String cleanup(final java.lang.String input) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (char char : input.toCharArray()) {\n                if (java.lang.Character.isWhitespace(ch)) {\n                    continue;\n                } \n                ch = java.lang.Character.toLowerCase(ch);\n                if ((boolean) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.containsKey(ch))) {\n                    ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch);\n                } \n                sb.append(ch);\n            }\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"89bb3355-2e7f-11e6-bc55-15c91aec3996","method":{"position":"org.apache.commons.codec.digest.HmacUtils:474","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == key) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"key","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"key"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:828","type":"CtBinaryOperatorImpl","sourcecode":"(index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))"},"failures":[25,26,27,28,29],"tindex":"89bb3356-2e7f-11e6-bc55-c57755b2c1fa","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:331","type":"CtMethodImpl","sourcecode":"private int handleCC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n                if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n                    result.append(\"KS\");\n                } else {\n                    result.append('X');\n                }\n                index += 3;\n            } else {\n                result.append('K');\n                index += 2;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[30],"tindex":"89bb5a67-2e7f-11e6-bc55-d70d9aec2e89","method":{"position":"org.apache.commons.codec.digest.DigestUtils:732","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String shaHex(final byte[] data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:198","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"89bb5a68-2e7f-11e6-bc55-c76771299d18","method":{"position":"org.apache.commons.codec.language.Soundex:149","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n            } \n            return soundex(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"89bb8179-2e7f-11e6-bc55-ebd2be1a27fe","method":{"position":"org.apache.commons.codec.digest.DigestUtils:452","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final byte[] data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.getSha256Digest().digest(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[31],"tindex":"89bb817a-2e7f-11e6-bc55-6d4ddb3ed95b","method":{"position":"org.apache.commons.codec.digest.HmacUtils:98","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha256(final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[0,32],"tindex":"89bb817b-2e7f-11e6-bc55-a7e3fedbc564","method":{"position":"org.apache.commons.codec.binary.StringUtils:234","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf8(final java.lang.String string) {\n    if (string == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"string"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtInvocationImpl","sourcecode":"value.startsWith(element)"},"failures":[],"tindex":"89bba88c-2e7f-11e6-bc55-bb4782d41ffa","method":{"position":"org.apache.commons.codec.binary.Base64:523","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final java.lang.String base64) {\n    if (base64.startsWith(base64)) {\n        {\n            return org.apache.commons.codec.binary.Base64.isBase64(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(base64));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"base64","element":"base64"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:272","type":"CtBinaryOperatorImpl","sourcecode":"(i & 1) != 0"},"failures":[],"tindex":"89bba88d-2e7f-11e6-bc55-ada4b6ace38e","method":{"position":"org.apache.commons.codec.binary.Base64:331","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid encode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if ((inPos & 1) != 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (context.boolean) {\n                return ;\n            } \n            if (inAvail < 0) {\n                context.boolean = true;\n                if ((0 == (context.int)) && ((int) == 0)) {\n                    return ;\n                } \n                final byte[] byte[] = ensureBufferSize(int, context);\n                final int int = context.int;\n                switch (context.int) {\n                    case 0 :\n                        break;\n                    case 1 :\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                            buffer[((context.int)++)] = byte;\n                            buffer[((context.int)++)] = byte;\n                        } \n                        break;\n                    case 2 :\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 10) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                            buffer[((context.int)++)] = byte;\n                        } \n                        break;\n                    default :\n                        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                }\n                context.int += (context.int) - savedPos;\n                if (((int) > 0) && ((context.int) > 0)) {\n                    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                    context.int += byte[].int;\n                } \n            } else {\n                for (int int = 0 ; i < inAvail ; i++) {\n                    final byte[] byte[] = ensureBufferSize(int, context);\n                    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                    int int = in[(inPos++)];\n                    if (b < 0) {\n                        b += 256;\n                    } \n                    context.int = ((context.int) << 8) + b;\n                    if (0 == (context.int)) {\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n                        if (((int) > 0) && ((int) <= (context.int))) {\n                            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                            context.int += byte[].int;\n                            context.int = 0;\n                        } \n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"inPos"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[33,34],"tindex":"89bbf6ae-2e7f-11e6-bc55-ab36795f1443","method":{"position":"org.apache.commons.codec.digest.HmacUtils:789","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac updateHmac(final javax.crypto.Mac mac, final java.lang.String valueToDigest) {\n    if (valueToDigest.contains(\"=\")) {\n        {\n            if (valueToDigest == null) {\n                {\n                    mac.reset();\n                    mac.update(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n                    return mac;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:99","type":"CtBinaryOperatorImpl","sourcecode":"txtLength == 1"},"failures":[],"tindex":"89bc1dbf-2e7f-11e6-bc55-2de0ac364e40","method":{"position":"org.apache.commons.codec.language.Soundex:245","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic void setMaxLength(final int maxLength) {\n    if (maxLength == 1) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.Soundex.this.int = maxLength;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txtLength":"maxLength"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"tindex":"89bc1dc0-2e7f-11e6-bc55-4b1d140e0c22","method":{"position":"org.apache.commons.codec.binary.StringUtils:318","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUsAscii(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:784","type":"CtBinaryOperatorImpl","sourcecode":"index <= 1"},"failures":[],"tindex":"89bc44d1-2e7f-11e6-bc55-c3da4a4428f9","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:106","type":"CtMethodImpl","sourcecode":"public void apply(final org.apache.commons.codec.language.bm.Rule.PhonemeExpr phonemeExpr, final int maxPhonemes) {\n    if (maxPhonemes <= 1) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.LinkedHashSet<org.apache.commons.codec.language.bm.Rule.Phoneme>(maxPhonemes);\n            EXPR : for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n                for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeExpr.getPhonemes()) {\n                    final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = left.getLanguages().restrictTo(right.getLanguages());\n                    if (!(languages.isEmpty())) {\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n                        if ((newPhonemes.size()) < maxPhonemes) {\n                            newPhonemes.add(join);\n                            if ((newPhonemes.size()) >= maxPhonemes) {\n                                break EXPR;\n                            } \n                        } \n                    } \n                }\n            }\n            org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.clear();\n            org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.addAll(newPhonemes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"maxPhonemes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtBinaryOperatorImpl","sourcecode":"(!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))"},"failures":[],"tindex":"89bc6be2-2e7f-11e6-bc55-3b316297da61","method":{"position":"org.apache.commons.codec.binary.StringUtils:216","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Le(final java.lang.String string) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(string, 0, 2, \"MC\")) {\n        {\n            if ((!(string.startsWith(string))) || (!(text.endsWith(string)))) {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.net.RFC1522Codec.POSTFIX":"string","org.apache.commons.codec.net.RFC1522Codec.PREFIX":"string","text":"string"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtBinaryOperatorImpl","sourcecode":"(salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))"},"failures":[],"tindex":"89bc6be3-2e7f-11e6-bc55-6976b02a481f","method":{"position":"org.apache.commons.codec.digest.DigestUtils:815","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest updateDigest(final java.security.MessageDigest messageDigest, final java.lang.String valueToDigest) {\n    if ((valueToDigest != null) && (!(salt.startsWith(valueToDigest)))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            messageDigest.update(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n            return messageDigest;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"valueToDigest","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"valueToDigest"},"type":"special","returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:51","type":"CtBinaryOperatorImpl","sourcecode":"(cs instanceof java.lang.String) && (substring instanceof java.lang.String)"},"failures":[],"tindex":"89bc92f4-2e7f-11e6-bc55-27dcfe835da0","method":{"position":"org.apache.commons.codec.language.AbstractCaverphone:56","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if ((source instanceof java.lang.String) && (source instanceof java.lang.String)) {\n        {\n            if (!(source instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.AbstractCaverphone.this.encode(((java.lang.String)(source)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"source","substring":"source"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:417","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"89bc92f5-2e7f-11e6-bc55-057ca70c65b3","method":{"position":"org.apache.commons.codec.language.bm.Rule:353","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang.startsWith(lang)) {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.get(nameType).get(rt).get(lang);\n            if (rules == null) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n            } \n            return rules;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"lang","line":"lang"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],"tindex":"89bcba06-2e7f-11e6-bc55-dbd09db187ff","method":{"position":"org.apache.commons.codec.language.SoundexUtils:41","type":"CtMethodImpl","sourcecode":"static java.lang.String clean(final java.lang.String str) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(str, 0, 5, \"CHORE\")) {\n        {\n            if ((str == null) || ((str.length()) == 0)) {\n                return str;\n            } \n            final int int = str.length();\n            final char[] char[] = new char[len];\n            int int = 0;\n            for (int int = 0 ; i < len ; i++) {\n                if (java.lang.Character.isLetter(str.charAt(i))) {\n                    chars[(count++)] = str.charAt(i);\n                } \n            }\n            if (count == len) {\n                return str.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            } \n            return new java.lang.String(chars , 0 , count).toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"89bce117-2e7f-11e6-bc55-9340207fecc1","method":{"position":"org.apache.commons.codec.digest.DigestUtils:273","type":"CtMethodImpl","sourcecode":"public static byte[] md5(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data == null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd5Digest(), data);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"89bce118-2e7f-11e6-bc55-056cac54a679","method":{"position":"org.apache.commons.codec.digest.DigestUtils:578","type":"CtMethodImpl","sourcecode":"public static byte[] sha384(final java.lang.String data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtInvocationImpl","sourcecode":"line.contains(\"=\")"},"failures":[],"tindex":"89bce119-2e7f-11e6-bc55-938f30427e5d","method":{"position":"org.apache.commons.codec.digest.HmacUtils:789","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac updateHmac(final javax.crypto.Mac mac, final java.lang.String valueToDigest) {\n    if (valueToDigest.contains(\"=\")) {\n        {\n            if (valueToDigest == null) {\n                {\n                    mac.reset();\n                    mac.update(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n                    return mac;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"valueToDigest"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isLetter(c))"},"failures":[],"tindex":"89bd082a-2e7f-11e6-bc55-11d634219b04","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:951","type":"CtMethodImpl","sourcecode":"public void append(final char primary, final char alternate) {\n    if (!(java.lang.Character.isLetter(alternate))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendPrimary(primary);\n            appendAlternate(alternate);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"alternate"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[36,37,38,39,40,41,42,43,44,45,46],"tindex":"89bd082b-2e7f-11e6-bc55-c5a03b06f66d","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:429","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset());\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:382","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[17],"tindex":"89bd082c-2e7f-11e6-bc55-57214d4c1a76","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:174","type":"CtMethodImpl","sourcecode":"public void setMaxPhonemes(final int maxPhonemes) {\n    if (maxPhonemes < 0) {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat() , maxPhonemes);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"maxPhonemes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:95","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txtLength = txt.length()) == 0)"},"failures":[],"tindex":"89bd2f3d-2e7f-11e6-bc55-2573000c9396","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:915","type":"CtMethodImpl","sourcecode":"protected static boolean contains(final java.lang.String value, final int start, final int length, final java.lang.String... criteria) {\n    if ((value == null) || ((start = txt.length()) == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if ((start >= 0) && ((start + length) <= (value.length()))) {\n                final java.lang.String java.lang.String = value.substring(start, (start + length));\n                for (final java.lang.String java.lang.String : criteria) {\n                    if (target.equals(element)) {\n                        result = true;\n                        break;\n                    } \n                }\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"value","txtLength":"start"},"type":"special","returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtBinaryOperatorImpl","sourcecode":"((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))"},"failures":[],"tindex":"89bd2f3e-2e7f-11e6-bc55-39b25b05a484","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (((obj == null) || (obj.equalsIgnoreCase(name2))) || (obj.equalsIgnoreCase(name2))) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof byte[]) {\n                return encode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"obj","name2":"obj","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"obj"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[],"tindex":"89bd564f-2e7f-11e6-bc55-333964a0a286","method":{"position":"org.apache.commons.codec.binary.StringUtils:216","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Le(final java.lang.String string) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(string, 0, 2, \"MC\")) {\n        {\n            if ((!(string.startsWith(string))) || (!(text.endsWith(string)))) {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"string"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START)"},"failures":[],"tindex":"89bd5650-2e7f-11e6-bc55-bbfdf30c0476","method":{"position":"org.apache.commons.codec.binary.StringUtils:70","type":"CtMethodImpl","sourcecode":"public static boolean equals(final java.lang.CharSequence cs1, final java.lang.CharSequence cs2) {\n    if (cs1.startsWith(cs1)) {\n        {\n            if (cs1 == cs2) {\n                return true;\n            } \n            if ((cs1 == null) || (cs2 == null)) {\n                return false;\n            } \n            if ((cs1 instanceof java.lang.String) && (cs2 instanceof java.lang.String)) {\n                return cs1.equals(cs2);\n            } \n            return org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, java.lang.Math.max(cs1.length(), cs2.length()));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"cs1","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START":"cs1"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtBinaryOperatorImpl","sourcecode":"(((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)"},"failures":[],"tindex":"89bd7d61-2e7f-11e6-bc55-2ddbd94b4401","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:179","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String prefix) {\n    if ((((prefix == null) || (salt.equalsIgnoreCase(name))) || (salt.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = keyBytes.int;\n            java.lang.String java.lang.String;\n            if (salt == null) {\n                saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n            } else {\n                final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n                final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n                if ((m == null) || (!(m.find()))) {\n                    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n                } \n                saltString = m.group(1);\n            }\n            final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n            final java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n            ctx.update(keyBytes);\n            ctx.update(prefix.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n            ctx.update(saltBytes);\n            java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n            ctx1.update(keyBytes);\n            ctx1.update(saltBytes);\n            ctx1.update(keyBytes);\n            byte[] byte[] = ctx1.digest();\n            int int = keyLen;\n            while (ii > 0) {\n                ctx.update(finalb, 0, (ii > 16 ? 16 : ii));\n                ii -= 16;\n            }\n            java.util.Arrays.fill(finalb, ((byte)(0)));\n            ii = keyLen;\n            final int int = 0;\n            while (ii > 0) {\n                if ((ii & 1) == 1) {\n                    ctx.update(finalb[j]);\n                } else {\n                    ctx.update(keyBytes[j]);\n                }\n                ii >>= 1;\n            }\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((prefix + saltString) + \"$\"));\n            finalb = ctx.digest();\n            for (int int = 0 ; i < (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int) ; i++) {\n                ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n                if ((i & 1) != 0) {\n                    ctx1.update(keyBytes);\n                } else {\n                    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n                }\n                if ((i % 3) != 0) {\n                    ctx1.update(saltBytes);\n                } \n                if ((i % 7) != 0) {\n                    ctx1.update(keyBytes);\n                } \n                if ((i & 1) != 0) {\n                    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n                } else {\n                    ctx1.update(keyBytes);\n                }\n                finalb = ctx1.digest();\n            }\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd);\n            ctx.reset();\n            ctx1.reset();\n            java.util.Arrays.fill(keyBytes, ((byte)(0)));\n            java.util.Arrays.fill(saltBytes, ((byte)(0)));\n            java.util.Arrays.fill(finalb, ((byte)(0)));\n            return passwd.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"prefix","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"salt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"salt"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[120],"tindex":"89bda472-2e7f-11e6-bc55-c9ac6a0afe73","method":{"position":"org.apache.commons.codec.digest.DigestUtils:704","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"89bda473-2e7f-11e6-bc55-cfddd3afbe42","method":{"position":"org.apache.commons.codec.digest.HmacUtils:551","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha384(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(key)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key), valueToDigest).doFinal();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"key"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"89bdcb84-2e7f-11e6-bc55-a5a3f67b5c53","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] raw) {\n    if (raw == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw == null) {\n                {\n                    if (raw == null) {\n                        {\n                            return org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(raw);\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"raw"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[121,122,123],"tindex":"89bdcb85-2e7f-11e6-bc55-6b219f25a9ec","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:71","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final byte[] keyBytes) {\n    if (keyBytes == null) {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"keyBytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[124],"tindex":"89bdf296-2e7f-11e6-bc55-13314cda57ef","method":{"position":"org.apache.commons.codec.digest.DigestUtils:516","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            if (data == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:111","type":"CtBinaryOperatorImpl","sourcecode":"(es1 == null) || (es2 == null)"},"failures":[125,126,127,128,129,130,131,132,133,134,135],"tindex":"89bdf297-2e7f-11e6-bc55-d36c71f1c8b0","method":{"position":"org.apache.commons.codec.digest.Crypt:65","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] keyBytes, final java.lang.String salt) {\n    if ((salt == null) || (salt == null)) {\n        {\n            if (salt == null) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes, salt);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(keyBytes, salt);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt);\n            } else {\n                return org.apache.commons.codec.digest.UnixCrypt.crypt(keyBytes, salt);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"es1":"salt","es2":"salt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"89be19a8-2e7f-11e6-bc55-7d991bbf4269","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:515","type":"CtMethodImpl","sourcecode":"public long getEncodedLength(final byte[] pArray) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(pArray)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            long long = ((((pArray.int) + (int)) - 1) / (int)) * ((long)(int));\n            if ((int) > 0) {\n                len += (((len + (int)) - 1) / (int)) * (int);\n            } \n            return len;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"pArray"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:265","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[136],"tindex":"89be19a9-2e7f-11e6-bc55-55abdb847d5b","method":{"position":"org.apache.commons.codec.language.Nysiis:247","type":"CtMethodImpl","sourcecode":"public java.lang.String nysiis(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n                    if ((str.length()) == 0) {\n                        return str;\n                    } \n                    str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"MCC\");\n                    str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"NN\");\n                    str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"C\");\n                    str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"FF\");\n                    str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"SSS\");\n                    str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"Y\");\n                    str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"D\");\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length());\n                    key.append(str.charAt(0));\n                    final char[] char[] = str.toCharArray();\n                    final int int = chars.int;\n                    for (int int = 1 ; i < len ; i++) {\n                        final char char = i < (len - 1) ? chars[(i + 1)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n                        final char char = i < (len - 2) ? chars[(i + 2)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n                        final char[] char[] = org.apache.commons.codec.language.Nysiis.transcodeRemaining(chars[(i - 1)], chars[i], next, aNext);\n                        java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int);\n                        if ((chars[i]) != (chars[(i - 1)])) {\n                            key.append(chars[i]);\n                        } \n                    }\n                    if ((key.length()) > 1) {\n                        char char = key.charAt(((key.length()) - 1));\n                        if (lastChar == 'S') {\n                            key.deleteCharAt(((key.length()) - 1));\n                            lastChar = key.charAt(((key.length()) - 1));\n                        } \n                        if ((key.length()) > 2) {\n                            final char char = key.charAt(((key.length()) - 2));\n                            if ((last2Char == 'A') && (lastChar == 'Y')) {\n                                key.deleteCharAt(((key.length()) - 2));\n                            } \n                        } \n                        if (lastChar == 'A') {\n                            key.deleteCharAt(((key.length()) - 1));\n                        } \n                    } \n                    final java.lang.String java.lang.String = key.toString();\n                    return org.apache.commons.codec.language.Nysiis.this.isStrict() ? string.substring(0, java.lang.Math.min(org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.int, string.length())) : string;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:319","type":"CtInvocationImpl","sourcecode":"name1LtRStart.equals(name2RtLStart)"},"failures":[],"tindex":"89bedcfa-2e7f-11e6-bc55-b554fe8c7e13","method":{"position":"org.apache.commons.codec.digest.DigestUtils:761","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String shaHex(final java.lang.String data) {\n    if (data.equals(data)) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2RtLStart":"data","name1LtRStart":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[9,10,11,12,13,14,137,138,15,16,17,139,140,18,19,141,142,20,21,143,22,144,145,146,23,24],"tindex":"89bf040b-2e7f-11e6-bc55-250aa492ad28","method":{"position":"org.apache.commons.codec.language.bm.Languages:165","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Languages getInstance(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Languages>.get(nameType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"89bf040c-2e7f-11e6-bc55-7b253df7be47","method":{"position":"org.apache.commons.codec.digest.DigestUtils:411","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        {\n            if (data == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[147],"tindex":"89bf040d-2e7f-11e6-bc55-0d52a18bd551","method":{"position":"org.apache.commons.codec.digest.HmacUtils:581","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha384Hex(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"89bf2b1e-2e7f-11e6-bc55-11bfda8df518","method":{"position":"org.apache.commons.codec.binary.Base64:605","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64Chunked(final byte[] binaryData) {\n    if (binaryData == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"89bf2b1f-2e7f-11e6-bc55-4b7c91fa2594","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:596","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException {\n    if (charset == null) {\n        throw new java.io.UnsupportedEncodingException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"charset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"89bf2b20-2e7f-11e6-bc55-a5ee8fd6a94e","method":{"position":"org.apache.commons.codec.binary.Hex:160","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeHexString(final byte[] data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(org.apache.commons.codec.binary.Hex.encodeHex(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtBinaryOperatorImpl","sourcecode":"b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[],"tindex":"89bf2b21-2e7f-11e6-bc55-a9d086c8d667","method":{"position":"org.apache.commons.codec.binary.Base32:536","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isInAlphabet(final byte octet) {\n    if (octet != octet) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((octet >= 0) && (octet < (byte[].int))) && ((byte[][octet]) != (-1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"octet","org.apache.commons.codec.net.QCodec.UNDERSCORE":"octet"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Soundex:263","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[],"tindex":"89bf5232-2e7f-11e6-bc55-ef8609386321","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:412","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if ((obj.length()) == 0) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n            } \n            return encode(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"obj"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"89bf5233-2e7f-11e6-bc55-953d10770872","method":{"position":"org.apache.commons.codec.digest.DigestUtils:273","type":"CtMethodImpl","sourcecode":"public static byte[] md5(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data == null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd5Digest(), data);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[148,149,150,151,152,153,154,155,156,157,158,159,160],"tindex":"89bf7944-2e7f-11e6-bc55-097846b70211","method":{"position":"org.apache.commons.codec.language.Metaphone:370","type":"CtMethodImpl","sourcecode":"private boolean isLastChar(final int wdsz, final int n) {\n    if (n == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (n + 1) == wdsz;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"n"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:762","type":"CtBinaryOperatorImpl","sourcecode":"((bigInt.bitLength()) % 8) == 0"},"failures":[161,162],"tindex":"89bf7945-2e7f-11e6-bc55-45576180291f","method":{"position":"org.apache.commons.codec.binary.Base64:734","type":"CtMethodImpl","sourcecode":"public static byte[] encodeInteger(final java.math.BigInteger bigInt) {\n    if (((bigInt.bitLength()) % 8) == 0) {\n        {\n            if (bigInt == null) {\n                throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\");\n            } \n            return org.apache.commons.codec.binary.Base64.encodeBase64(org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInt), false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[],"tindex":"89bf7946-2e7f-11e6-bc55-253a063e3a8f","method":{"position":"org.apache.commons.codec.digest.DigestUtils:516","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            if (data == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"89bfa057-2e7f-11e6-bc55-39cf8bd74c41","method":{"position":"org.apache.commons.codec.digest.HmacUtils:280","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(key)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"key"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:158","type":"CtFieldReadImpl","sourcecode":"org.apache.commons.codec.net.QCodec.this.encodeBlanks"},"failures":[163],"tindex":"89bfa058-2e7f-11e6-bc55-89217a6cba89","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:463","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final byte[] arrayOctet, final boolean allowWSPad) {\n    if (allowWSPad) {\n        {\n            for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeBlanks":"allowWSPad"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"89c01589-2e7f-11e6-bc55-f91241135bf3","method":{"position":"org.apache.commons.codec.digest.DigestUtils:411","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        {\n            if (data == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[164],"tindex":"89c0158a-2e7f-11e6-bc55-a53c76b065b2","method":{"position":"org.apache.commons.codec.digest.HmacUtils:80","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha1(final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:195","type":"CtBinaryOperatorImpl","sourcecode":"current != 0"},"failures":[],"tindex":"89c0158b-2e7f-11e6-bc55-d94b4aef5826","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:962","type":"CtMethodImpl","sourcecode":"public void appendAlternate(final char value) {\n    if (value != 0) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int)) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"current":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[55,165,56,57,58,59,60],"tindex":"89c03c9c-2e7f-11e6-bc55-b74a391bb3df","method":{"position":"org.apache.commons.codec.net.URLCodec:121","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeUrl(java.util.BitSet urlsafe, final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            if (urlsafe == null) {\n                urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (final byte byte : bytes) {\n                int int = c;\n                if (b < 0) {\n                    b = 256 + b;\n                } \n                if (urlsafe.get(b)) {\n                    if (b == ' ') {\n                        b = '+';\n                    } \n                    buffer.write(b);\n                } else {\n                    buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n                    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                    buffer.write(hex1);\n                    buffer.write(hex2);\n                }\n            }\n            return buffer.toByteArray();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:355","type":"CtBinaryOperatorImpl","sourcecode":"result >= 0"},"failures":[66,67,68,69,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,91],"tindex":"89c063ad-2e7f-11e6-bc55-439056a4170b","method":{"position":"org.apache.commons.codec.language.Soundex:183","type":"CtMethodImpl","sourcecode":"private char getMappingCode(final java.lang.String str, final int index) {\n    if (index >= 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char char = org.apache.commons.codec.language.Soundex.this.map(str.charAt(index));\n            if ((index > 1) && (mappedChar != '0')) {\n                final char char = str.charAt((index - 1));\n                if (('H' == hwChar) || ('W' == hwChar)) {\n                    final char char = str.charAt((index - 2));\n                    final char char = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n                    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n                        return 0;\n                    } \n                } \n            } \n            return mappedChar;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[],"tindex":"89c063ae-2e7f-11e6-bc55-ffb82f6392be","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:485","type":"CtMethodImpl","sourcecode":"private java.lang.String[] soundex(final java.lang.String source, final boolean branching) {\n    if (source.endsWith(source)) {\n        {\n            if (source == null) {\n                return null;\n            } \n            final java.lang.String java.lang.String = cleanup(source);\n            final java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = new java.util.LinkedHashSet<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>();\n            currentBranches.add(new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch());\n            char char = '\u0000';\n            for (int int = 0 ; index < (input.length()) ; index++) {\n                final char char = input.charAt(index);\n                if (java.lang.Character.isWhitespace(ch)) {\n                    continue;\n                } \n                final java.lang.String java.lang.String = input.substring(index);\n                final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(ch);\n                if (rules == null) {\n                    continue;\n                } \n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.Collections.java.util.List;\n                for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n                    if (rule.matches(inputContext)) {\n                        if (branching) {\n                            nextBranches.clear();\n                        } \n                        final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n                        final boolean boolean = ((replacements.int) > 1) && branching;\n                        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                            for (final java.lang.String java.lang.String : replacements) {\n                                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                                final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                                nextBranch.processNextReplacement(nextReplacement, force);\n                                if (branching) {\n                                    nextBranches.add(nextBranch);\n                                } else {\n                                    break;\n                                }\n                            }\n                        }\n                        if (branching) {\n                            currentBranches.clear();\n                            currentBranches.addAll(nextBranches);\n                        } \n                        index += (rule.getPatternLength()) - 1;\n                        break;\n                    } \n                }\n                lastChar = ch;\n            }\n            final java.lang.String[] java.lang.String[] = new java.lang.String[currentBranches.size()];\n            int int = 0;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                branch.finish();\n                result[(index++)] = branch.toString();\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"source"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[25,26,166,27,28],"tindex":"89c0b1cf-2e7f-11e6-bc55-6da62b71ecc1","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:973","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.String primary, final java.lang.String alternate) {\n    if (primary == null) {\n        {\n            appendPrimary(primary);\n            appendAlternate(alternate);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"primary"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:188","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[167,36,38,39,40,41,168,169,45],"tindex":"89c0d8e0-2e7f-11e6-bc55-27d6e3cae4fe","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:486","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if (str.startsWith(str)) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"str","line":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[0,170],"tindex":"89c0d8e1-2e7f-11e6-bc55-0115a54e343f","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] pArray) {\n    if (pArray == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((pArray == null) || ((pArray.int) == 0)) {\n                return pArray;\n            } \n            final org.apache.commons.codec.binary.BaseNCodec.Context org.apache.commons.codec.binary.BaseNCodec.Context = new org.apache.commons.codec.binary.BaseNCodec.Context();\n            decode(pArray, 0, pArray.int, context);\n            decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context);\n            final byte[] byte[] = new byte[context.int];\n            readResults(result, 0, result.int, context);\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"pArray"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"89c0fff2-2e7f-11e6-bc55-c3683ed0e5ec","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] raw) {\n    if (raw == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw == null) {\n                {\n                    if (raw == null) {\n                        {\n                            return org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(raw);\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"raw"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[],"tindex":"89c0fff3-2e7f-11e6-bc55-03b61213f7a2","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:334","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof byte[])) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\");\n            } \n            return encode(((byte[])(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"89c0fff4-2e7f-11e6-bc55-45f025d36e9b","method":{"position":"org.apache.commons.codec.language.Nysiis:247","type":"CtMethodImpl","sourcecode":"public java.lang.String nysiis(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n                    if ((str.length()) == 0) {\n                        return str;\n                    } \n                    str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"MCC\");\n                    str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"NN\");\n                    str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"C\");\n                    str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"FF\");\n                    str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"SSS\");\n                    str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"Y\");\n                    str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"D\");\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length());\n                    key.append(str.charAt(0));\n                    final char[] char[] = str.toCharArray();\n                    final int int = chars.int;\n                    for (int int = 1 ; i < len ; i++) {\n                        final char char = i < (len - 1) ? chars[(i + 1)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n                        final char char = i < (len - 2) ? chars[(i + 2)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n                        final char[] char[] = org.apache.commons.codec.language.Nysiis.transcodeRemaining(chars[(i - 1)], chars[i], next, aNext);\n                        java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int);\n                        if ((chars[i]) != (chars[(i - 1)])) {\n                            key.append(chars[i]);\n                        } \n                    }\n                    if ((key.length()) > 1) {\n                        char char = key.charAt(((key.length()) - 1));\n                        if (lastChar == 'S') {\n                            key.deleteCharAt(((key.length()) - 1));\n                            lastChar = key.charAt(((key.length()) - 1));\n                        } \n                        if ((key.length()) > 2) {\n                            final char char = key.charAt(((key.length()) - 2));\n                            if ((last2Char == 'A') && (lastChar == 'Y')) {\n                                key.deleteCharAt(((key.length()) - 2));\n                            } \n                        } \n                        if (lastChar == 'A') {\n                            key.deleteCharAt(((key.length()) - 1));\n                        } \n                    } \n                    final java.lang.String java.lang.String = key.toString();\n                    return org.apache.commons.codec.language.Nysiis.this.isStrict() ? string.substring(0, java.lang.Math.min(org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.int, string.length())) : string;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:532","type":"CtVariableReadImpl","sourcecode":"branching"},"failures":[],"tindex":"89c14e15-2e7f-11e6-bc55-7118ccb43432","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"branching":"concat"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:218","type":"CtBinaryOperatorImpl","sourcecode":"((name1.length()) == 1) || ((name2.length()) == 1)"},"failures":[171],"tindex":"89c14e16-2e7f-11e6-bc55-87d36861c79a","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:421","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEqual(final java.lang.String text1, final java.lang.String text2) {\n    if (((text2.length()) == 1) || ((text1.length()) == 1)) {\n        {\n            return colognePhonetic(text1).equals(colognePhonetic(text2));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"text1","name1":"text2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[9,10,11,12,13,14,15,16,17,139,140,18,19,20,21,22,23,24],"tindex":"89c14e17-2e7f-11e6-bc55-d1346625cd6d","method":{"position":"org.apache.commons.codec.language.bm.Rule:402","type":"CtMethodImpl","sourcecode":"private static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> parseRules(final java.util.Scanner scanner, final java.lang.String location) {\n    if (location == null) {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = new java.util.HashMap<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>();\n            int int = 0;\n            boolean boolean = false;\n            while (scanner.hasNextLine()) {\n                currentLine++;\n                final java.lang.String java.lang.String = scanner.nextLine();\n                java.lang.String java.lang.String = rawLine;\n                if (inMultilineComment) {\n                    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                        inMultilineComment = false;\n                    } \n                } else {\n                    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                        inMultilineComment = true;\n                    } else {\n                        final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                        if (cmtI >= 0) {\n                            line = line.substring(0, cmtI);\n                        } \n                        line = line.trim();\n                        if ((line.length()) == 0) {\n                            continue;\n                        } \n                        if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                            final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n                            if (incl.contains(\" \")) {\n                                throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n                            } else {\n                                lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n                            }\n                        } else {\n                            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                            if ((parts.int) != 4) {\n                                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                            } else {\n                                try {\n                                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                                    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                                    final int int = currentLine;\n                                    final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                                        private final int myLine = cLine;\n\n                                        private final java.lang.String loc = location;\n\n                                        @java.lang.Override\n                                        public java.lang.String toString() {\n                                            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                                            sb.append(\"Rule\");\n                                            sb.append(\"{line=\").append(int);\n                                            sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                                            sb.append(\", pat='\").append(pat).append('\\'');\n                                            sb.append(\", lcon='\").append(lCon).append('\\'');\n                                            sb.append(\", rcon='\").append(rCon).append('\\'');\n                                            sb.append('}');\n                                            return sb.toString();\n                                        }\n                                    };\n                                    final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                                    java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                                    if (rules == null) {\n                                        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                                        lines.put(patternKey, rules);\n                                    } \n                                    rules.add(r);\n                                } catch (final java.lang.IllegalArgumentException e) {\n                                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return lines;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"location"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:326","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"89c43448-2e7f-11e6-bc55-910cdc589784","method":{"position":"org.apache.commons.codec.digest.B64:72","type":"CtMethodImpl","sourcecode":"static java.lang.String getRandomSalt(final int num) {\n    if (num < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 1 ; i <= num ; i++) {\n                saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())));\n            }\n            return saltString.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"num"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[],"tindex":"89c43449-2e7f-11e6-bc55-832cce50fc8e","method":{"position":"org.apache.commons.codec.language.Caverphone:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj.equals(\"\")) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.Caverphone.this.caverphone(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[172,173,174,175,176,177,147,178,33,34,179,180,181],"tindex":"89c45b5a-2e7f-11e6-bc55-351fc704ce8e","method":{"position":"org.apache.commons.codec.digest.HmacUtils:154","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final org.apache.commons.codec.digest.HmacAlgorithms algorithm, final byte[] key) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:270","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"89c45b5b-2e7f-11e6-bc55-e32eee49e9fd","method":{"position":"org.apache.commons.codec.language.Caverphone:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.caverphone(str);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:486","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[25,26,27,28],"tindex":"89c45b5c-2e7f-11e6-bc55-77d471ce9765","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:647","type":"CtMethodImpl","sourcecode":"private int handleSC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (value == null) {\n        {\n            if ((charAt(value, (index + 2))) == 'H') {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n                        result.append(\"X\", \"SK\");\n                    } else {\n                        result.append(\"SK\");\n                    }\n                } else {\n                    if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n                        result.append('X', 'S');\n                    } else {\n                        result.append('X');\n                    }\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                result.append('S');\n            } else {\n                result.append(\"SK\");\n            }\n            return index + 3;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[25,26,27,28,29],"tindex":"89c4826d-2e7f-11e6-bc55-75c4a58fb53a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:739","type":"CtMethodImpl","sourcecode":"private int handleX(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        {\n            if (index == 0) {\n                result.append('S');\n                index++;\n            } else {\n                if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n                    result.append(\"KS\");\n                } \n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[],"tindex":"89c4826e-2e7f-11e6-bc55-b166346cb5c8","method":{"position":"org.apache.commons.codec.binary.Hex:295","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if (object instanceof byte[]) {\n        {\n            if (object.endsWith(object)) {\n                {\n                    try {\n                        final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n                        return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n                    } catch (final java.lang.ClassCastException e) {\n                        throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"object","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"object"},"type":"special","returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"89c4a97f-2e7f-11e6-bc55-dd30349bc953","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:429","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset());\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || ((str.length()) == 0)"},"failures":[],"tindex":"89c4d090-2e7f-11e6-bc55-553c89e58b25","method":{"position":"org.apache.commons.codec.digest.HmacUtils:295","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if ((key == null) || ((str.length()) == 0)) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"key"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:828","type":"CtBinaryOperatorImpl","sourcecode":"(index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))"},"failures":[],"tindex":"89c4d091-2e7f-11e6-bc55-a76e356fd120","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:408","type":"CtMethodImpl","sourcecode":"private int handleG(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                index = handleGH(value, result, index);\n            } else if ((charAt(value, (index + 1))) == 'N') {\n                if (((index == 1) && (isVowel(charAt(value, 0)))) && (!slavoGermanic)) {\n                    result.append(\"KN\", \"N\");\n                } else if (((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"EY\"))) && ((charAt(value, (index + 1))) != 'Y')) && (!slavoGermanic)) {\n                    result.append(\"N\", \"KN\");\n                } else {\n                    result.append(\"KN\");\n                }\n                index = index + 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"LI\")) && (!slavoGermanic)) {\n                result.append(\"KL\", \"L\");\n                index += 2;\n            } else if ((index == 0) && (((charAt(value, (index + 1))) == 'Y') || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])))) {\n                result.append('K', 'J');\n                index += 2;\n            } else if (((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ER\")) || ((charAt(value, (index + 1))) == 'Y')) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"E\", \"I\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"RGY\", \"OGY\")))) {\n                result.append('K', 'J');\n                index += 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"E\", \"I\", \"Y\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"AGGI\", \"OGGI\"))) {\n                if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ET\"))) {\n                    result.append('K');\n                } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n                    result.append('J');\n                } else {\n                    result.append('J', 'K');\n                }\n                index += 2;\n            } else if ((charAt(value, (index + 1))) == 'G') {\n                index += 2;\n                result.append('K');\n            } else {\n                index++;\n                result.append('K');\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"89c4f7a2-2e7f-11e6-bc55-f9b81980b311","method":{"position":"org.apache.commons.codec.language.bm.Lang:91","type":"CtMethodImpl","sourcecode":"public boolean matches(final java.lang.String txt) {\n    if (txt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Lang.LangRule.this.java.util.regex.Pattern.matcher(txt).find();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"txt"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"89c4f7a3-2e7f-11e6-bc55-67348310ee68","method":{"position":"org.apache.commons.codec.language.bm.Languages:253","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.String language) {\n    if (language == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"language"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"89c51eb4-2e7f-11e6-bc55-db738d7f8ee3","method":{"position":"org.apache.commons.codec.language.bm.Rule:335","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final org.apache.commons.codec.language.bm.Languages.LanguageSet langs) {\n    if (nameType == nameType) {\n        {\n            return langs.isSingleton() ? org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, langs.getAny()) : org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)"},"failures":[],"tindex":"89c51eb5-2e7f-11e6-bc55-218935402b09","method":{"position":"org.apache.commons.codec.language.bm.Rule:365","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.Phoneme parsePhoneme(final java.lang.String ph) {\n    if (ph.endsWith(ph)) {\n        {\n            final int int = ph.indexOf(\"[\");\n            if (open >= 0) {\n                if (!(ph.endsWith(\"]\"))) {\n                    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n                } \n                final java.lang.String java.lang.String = ph.substring(0, open);\n                final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1));\n                final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")));\n                return new org.apache.commons.codec.language.bm.Rule.Phoneme(before , org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs));\n            } else {\n                return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"ph","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END":"ph"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:119","type":"CtBinaryOperatorImpl","sourcecode":"ascii instanceof byte[]"},"failures":[],"tindex":"89c545c6-2e7f-11e6-bc55-7979a3132700","method":{"position":"org.apache.commons.codec.binary.Hex:295","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if (object instanceof byte[]) {\n        {\n            if (object.endsWith(object)) {\n                {\n                    try {\n                        final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n                        return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n                    } catch (final java.lang.ClassCastException e) {\n                        throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"object"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[181],"tindex":"89c545c7-2e7f-11e6-bc55-9f9bd0a38d95","method":{"position":"org.apache.commons.codec.digest.HmacUtils:633","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\")\"))"},"failures":[],"tindex":"89c56cd8-2e7f-11e6-bc55-255a5df864fe","method":{"position":"org.apache.commons.codec.language.bm.Lang:214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Languages.LanguageSet guessLanguages(final java.lang.String input) {\n    if (!(input.endsWith(\")\"))) {\n        {\n            if (input == null) {\n                {\n                    final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(org.apache.commons.codec.language.bm.Lang.this.org.apache.commons.codec.language.bm.Languages.getLanguages());\n                    for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n                        if (rule.matches(text)) {\n                            if (rule.boolean) {\n                                langs.retainAll(rule.java.util.Set<java.lang.String>);\n                            } else {\n                                langs.removeAll(rule.java.util.Set<java.lang.String>);\n                            }\n                        } \n                    }\n                    final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs);\n                    return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[2],"tindex":"89c56cd9-2e7f-11e6-bc55-93461396f753","method":{"position":"org.apache.commons.codec.binary.Base64:594","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeBase64URLSafeString(final byte[] binaryData) {\n    if (binaryData == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"binaryData"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
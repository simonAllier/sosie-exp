{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":292,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":46,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":308,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":266,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":313,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":233,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":9,"org.apache.commons.codec.language.Caverphone1Test.testEncodeEmpty":147,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":7,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_1_Returns5_Successfully":296,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_11_Returns_3_Successfully":314,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":348,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":64,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":10,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":90,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":303,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":37,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":157,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":282,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":297,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":341,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":222,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":33,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":101,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":43,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":183,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":252,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_8_Returns3_Successfully":333,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":84,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":48,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":251,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":288,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":321,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":22,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":21,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":126,"org.apache.commons.codec.language.NysiisTest.testCap":65,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":127,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":324,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":130,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":210,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":322,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":128,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":32,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":129,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":209,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":97,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":281,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":274,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":196,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":103,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":346,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":138,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":59,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":60,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":273,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":276,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":243,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":121,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":36,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":182,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":136,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":221,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":330,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":237,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull":343,"org.apache.commons.codec.language.SoundexTest.testB650":6,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8":289,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":311,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_10_Returns3_Successfully":335,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":206,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":286,"org.apache.commons.codec.language.SoundexTest.testNewInstance":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":305,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":325,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":203,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":340,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":290,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":189,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":41,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":199,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":201,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":332,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_6_Returns4_Successfully":298,"org.apache.commons.codec.net.RFC1522CodecTest.testNullInput":284,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":224,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":225,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":279,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":100,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":177,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":278,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":133,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":264,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":302,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":338,"org.apache.commons.codec.language.NysiisTest.testDropBy":78,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":248,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":327,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":349,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":215,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":310,"org.apache.commons.codec.binary.Base64Test.testUUID":123,"org.apache.commons.codec.binary.Base64Test.testSingletons":137,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":205,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":168,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":140,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":197,"org.apache.commons.codec.binary.Base64Test.testPairs":122,"org.apache.commons.codec.binary.Base64Test.testConstructors":287,"org.apache.commons.codec.language.NysiisTest.testRule2":70,"org.apache.commons.codec.language.NysiisTest.testRule1":69,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":184,"org.apache.commons.codec.language.NysiisTest.testRule7":73,"org.apache.commons.codec.language.NysiisTest.testRule6":72,"org.apache.commons.codec.language.NysiisTest.testRule5":71,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":178,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":299,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":42,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":15,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":87,"org.apache.commons.codec.language.NysiisTest.testBran":74,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":81,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully2":315,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":304,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":165,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":146,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":240,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":280,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":108,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":300,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":93,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":173,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull":242,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":85,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":40,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":115,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":174,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":260,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":29,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":166,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":30,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8":228,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":254,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":241,"org.apache.commons.codec.binary.HexTest.testEncodeEmpty":88,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":180,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":16,"org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter":57,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":2,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":261,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":96,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey":244,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":159,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert":38,"org.apache.commons.codec.language.NysiisTest.testDad":66,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":105,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":192,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le":232,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":125,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":211,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":263,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":63,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":26,"org.apache.commons.codec.language.NysiisTest.testDan":67,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":316,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":110,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":194,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":214,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":245,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":317,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":323,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":272,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":342,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":107,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":219,"org.apache.commons.codec.binary.HexTest.testCustomCharset":86,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":312,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":329,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":253,"org.apache.commons.codec.language.NysiisTest.testSnat":76,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":181,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":236,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":344,"org.apache.commons.codec.language.NysiisTest.testEncodeEmpty":82,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":336,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":106,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":111,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":162,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":53,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":161,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":255,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":339,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":195,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":145,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_2_Returns5_Successfully":307,"org.apache.commons.codec.binary.Base64Test.testTriplets":120,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":216,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":275,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":151,"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence":61,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":149,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":152,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":220,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":277,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":350,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":267,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":190,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":246,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":131,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":143,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":0,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1":229,"org.apache.commons.codec.net.QCodecTest.testLetUsMakeCloverHappy":179,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":91,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":163,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":170,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":218,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":153,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":239,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":19,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":17,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":44,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":18,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":104,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":259,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":109,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":98,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":223,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":94,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":202,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":268,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":345,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":89,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":172,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":193,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":213,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":235,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":291,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":135,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":186,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":150,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":328,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":212,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":116,"org.apache.commons.codec.CharsetsTest.testToCharset":234,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":1,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":283,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":51,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":144,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":337,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":271,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":301,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_13_Returns_1_Successfully":318,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":52,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":295,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":262,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":55,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":319,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":47,"org.apache.commons.codec.language.MetaphoneTest.testWhy":28,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":217,"org.apache.commons.codec.language.NysiisTest.testTranan":80,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":119,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":320,"org.apache.commons.codec.language.NysiisTest.testFal":68,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":208,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":24,"org.apache.commons.codec.language.NysiisTest.testSnad":75,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":249,"org.apache.commons.codec.language.MetaphoneTest.testTCH":27,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":92,"org.apache.commons.codec.binary.BaseNCodecTest.testIsWhiteSpace":258,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":265,"org.apache.commons.codec.language.NysiisTest.testLocaleIndependence":83,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":176,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":3,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":31,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":4,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":5,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":198,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":35,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":142,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":156,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":34,"org.apache.commons.codec.binary.Base64Test.testBase64":141,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":160,"org.apache.commons.codec.language.Caverphone1Test.testEncodeNull":269,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":102,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":294,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":117,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":132,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":257,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":158,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":95,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":270,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":99,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":347,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":45,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":187,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":256,"org.apache.commons.codec.binary.Base64Test.testCodec112":134,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":285,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":154,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":331,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":226,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":39,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":167,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":54,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":77,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":185,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":118,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":326,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":200,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":49,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":231,"org.apache.commons.codec.binary.Base64Test.testCodec68":175,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":58,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":12,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":25,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":23,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":56,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":191,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":188,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":247,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":113,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":204,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":306,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":250,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":164,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":169,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":112,"org.apache.commons.codec.language.NysiisTest.testOthers":79,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":139,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":50,"org.apache.commons.codec.language.SoundexTest.testDifference":13,"org.apache.commons.codec.language.Caverphone2Test.testEncodeEmpty":148,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":207,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":238,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":114,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":155,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii":230,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":293,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully":334,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":309,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":171,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullAlgo":62,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":124,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16":227},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"145f165b-3e5f-11e6-a14b-ad075d92158d","method":{"position":"org.apache.commons.codec.language.Soundex:258","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            final char[] char[] = new char[]{ '0' , '0' , '0' , '0' };\n            char char;\n            char char;\n            int int = 1;\n            int int = 1;\n            out[0] = str.charAt(0);\n            last = getMappingCode(str, 0);\n            while ((incount < (str.length())) && (count < (out.int))) {\n                mapped = getMappingCode(str, (incount++));\n                if (mapped != 0) {\n                    if ((mapped != '0') && (mapped != last)) {\n                        out[(count++)] = mapped;\n                    } \n                    last = mapped;\n                } \n            }\n            return new java.lang.String(out);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:161","type":"CtBinaryOperatorImpl","sourcecode":"n == 0"},"failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"tindex":"145f647c-3e5f-11e6-a14b-2141acd7f781","method":{"position":"org.apache.commons.codec.language.Metaphone:342","type":"CtMethodImpl","sourcecode":"private boolean isPreviousChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (index == 0) {\n        {\n            boolean boolean = false;\n            if ((index > 0) && (index < (string.length()))) {\n                matches = (string.charAt((index - 1))) == c;\n            } \n            return matches;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:140","type":"CtBinaryOperatorImpl","sourcecode":"next == 'N'"},"failures":[55,56,57,58,59,60,61],"tindex":"145f647d-3e5f-11e6-a14b-6902bd9f6a01","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:161","type":"CtMethodImpl","sourcecode":"char getMappingCode(final char c) {\n    if (c == '/') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (c == 'N') {\n                {\n                    if (!(java.lang.Character.isLetter(c))) {\n                        return 0;\n                    } \n                    return org.apache.commons.codec.language.RefinedSoundex.this.char[][((java.lang.Character.toUpperCase(c)) - 'A')];\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"next":"c"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:188","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[62],"tindex":"145f647e-3e5f-11e6-a14b-4b597f742d00","method":{"position":"org.apache.commons.codec.digest.HmacUtils:174","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final java.lang.String algorithm, final byte[] key) {\n    if (algorithm.startsWith(algorithm)) {\n        {\n            if (key == null) {\n                throw new java.lang.IllegalArgumentException(\"Null key\");\n            } \n            try {\n                final javax.crypto.spec.SecretKeySpec javax.crypto.spec.SecretKeySpec = new javax.crypto.spec.SecretKeySpec(key , algorithm);\n                final javax.crypto.Mac javax.crypto.Mac = javax.crypto.Mac.getInstance(algorithm);\n                mac.init(keySpec);\n                return mac;\n            } catch (final java.security.NoSuchAlgorithmException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            } catch (final java.security.InvalidKeyException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"algorithm","line":"algorithm"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"145f8b8f-3e5f-11e6-a14b-414ae2cf1558","method":{"position":"org.apache.commons.codec.digest.DigestUtils:748","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String shaHex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:225","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[0,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,55,56,58,59,60,84,61,1,2,3,4,5,6,7,8,9,85,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"145f8b90-3e5f-11e6-a14b-11883fb3199c","method":{"position":"org.apache.commons.codec.language.SoundexUtils:41","type":"CtMethodImpl","sourcecode":"static java.lang.String clean(final java.lang.String str) {\n    if (str.endsWith(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                {\n                    if ((str == null) || ((str.length()) == 0)) {\n                        return str;\n                    } \n                    final int int = str.length();\n                    final char[] char[] = new char[len];\n                    int int = 0;\n                    for (int int = 0 ; i < len ; i++) {\n                        if (java.lang.Character.isLetter(str.charAt(i))) {\n                            chars[(count++)] = str.charAt(i);\n                        } \n                    }\n                    if (count == len) {\n                        return str.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    } \n                    return new java.lang.String(chars , 0 , count).toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"145fb2a1-3e5f-11e6-a14b-1767f8b6e080","method":{"position":"org.apache.commons.codec.digest.DigestUtils:657","type":"CtMethodImpl","sourcecode":"public static byte[] sha512(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha512Digest(), data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112],"tindex":"145fb2a2-3e5f-11e6-a14b-413a78f000d1","method":{"position":"org.apache.commons.codec.binary.Hex:160","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeHexString(final byte[] data) {\n    if (data == null) {\n        {\n            return new java.lang.String(org.apache.commons.codec.binary.Hex.encodeHex(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146],"tindex":"145fb2a3-3e5f-11e6-a14b-1dbd2dc4250e","method":{"position":"org.apache.commons.codec.binary.Base64:660","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe, final int maxResultSize) {\n    if (maxResultSize > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (maxResultSize < 0) {\n                {\n                    if ((binaryData == null) || ((binaryData.int) == 0)) {\n                        return binaryData;\n                    } \n                    final org.apache.commons.codec.binary.Base64 org.apache.commons.codec.binary.Base64 = isChunked ? new org.apache.commons.codec.binary.Base64(urlSafe) : new org.apache.commons.codec.binary.Base64(0 , org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[] , urlSafe);\n                    final long long = b64.getEncodedLength(binaryData);\n                    if (len > maxResultSize) {\n                        throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + len) + \") than the specified maximum size of \") + maxResultSize));\n                    } \n                    return b64.encode(binaryData);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"maxResultSize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[147,148],"tindex":"145fd9b4-3e5f-11e6-a14b-a5b4b2e90391","method":{"position":"org.apache.commons.codec.language.AbstractCaverphone:56","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if (source == null) {\n        {\n            if (!(source instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.AbstractCaverphone.this.encode(((java.lang.String)(source)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165],"tindex":"145fd9b5-3e5f-11e6-a14b-4369edc8b8b6","method":{"position":"org.apache.commons.codec.language.bm.Rule:353","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang == null) {\n        {\n            if (lang == null) {\n                {\n                    final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.get(nameType).get(rt).get(lang);\n                    if (rules == null) {\n                        throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n                    } \n                    return rules;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"lang"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtInvocationImpl","sourcecode":"input.startsWith((l + \" \"))"},"failures":[99],"tindex":"146000c6-3e5f-11e6-a14b-9715f69003c1","method":{"position":"org.apache.commons.codec.digest.DigestUtils:578","type":"CtMethodImpl","sourcecode":"public static byte[] sha384(final java.lang.String data) {\n    if (data.startsWith((data + \" \"))) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"data","l":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[100],"tindex":"146000c7-3e5f-11e6-a14b-9b1e195fb631","method":{"position":"org.apache.commons.codec.digest.DigestUtils:687","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final byte[] data) {\n    if (data == null) {\n        {\n            if (data == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:263","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[166],"tindex":"146000c8-3e5f-11e6-a14b-737dafcd6d4b","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:421","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEqual(final java.lang.String text1, final java.lang.String text2) {\n    if ((text2.length()) == 0) {\n        {\n            return colognePhonetic(text1).equals(colognePhonetic(text2));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"text2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[113,114,167,168,169,170,122,123,124,126,127,128,129,130,131,132,171,172,173,174,136,137,175,176,177],"tindex":"146027d9-3e5f-11e6-a14b-7f2224f8b391","method":{"position":"org.apache.commons.codec.binary.Base64:705","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final byte[] base64Data) {\n    if (base64Data == null) {\n        {\n            return new org.apache.commons.codec.binary.Base64().decode(base64Data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"base64Data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"146027da-3e5f-11e6-a14b-7f5af6d439c9","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:259","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected char[] copyData(final int start, final int length) {\n    if (length < 0) {\n        {\n            final char[] char[] = new char[length];\n            java.lang.System.arraycopy(char[], (((char[].int) - (org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.this.int)) + start), newData, 0, length);\n            return newData;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:607","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")"},"failures":[],"tindex":"146027db-3e5f-11e6-a14b-61e77a75f5bb","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:466","type":"CtMethodImpl","sourcecode":"private int handleGH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index > 0) && (!(isVowel(charAt(value, (index - 1)))))) {\n                result.append('K');\n                index += 2;\n            } else if (index == 0) {\n                if ((charAt(value, (index + 2))) == 'I') {\n                    result.append('J');\n                } else {\n                    result.append('K');\n                }\n                index += 2;\n            } else if ((((index > 1) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 1, \"B\", \"H\", \"D\"))) || ((index > 2) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"B\", \"H\", \"D\")))) || ((index > 3) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 1, \"B\", \"H\")))) {\n                index += 2;\n            } else {\n                if (((index > 2) && ((charAt(value, (index - 1))) == 'U')) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"C\", \"G\", \"L\", \"R\", \"T\"))) {\n                    result.append('F');\n                } else if ((index > 0) && ((charAt(value, (index - 1))) != 'I')) {\n                    result.append('K');\n                } \n                index += 2;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtBinaryOperatorImpl","sourcecode":"ascii == null"},"failures":[],"tindex":"146027dc-3e5f-11e6-a14b-1b85913fdc5c","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str.startsWith(str)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (str == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                                str = str.substring(1);\n                            } \n                            if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                                str = str.substring(0, ((str.length()) - 1));\n                            } \n                            return str;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:158","type":"CtFieldReadImpl","sourcecode":"org.apache.commons.codec.net.QCodec.this.encodeBlanks"},"failures":[178,179],"tindex":"14604eed-3e5f-11e6-a14b-93704cfc0a46","method":{"position":"org.apache.commons.codec.net.QCodec:355","type":"CtMethodImpl","sourcecode":"public void setEncodeBlanks(final boolean b) {\n    if (b) {\n        {\n            org.apache.commons.codec.net.QCodec.this.boolean = b;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeBlanks":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[],"tindex":"14604eee-3e5f-11e6-a14b-89009813612a","method":{"position":"org.apache.commons.codec.language.SoundexUtils:41","type":"CtMethodImpl","sourcecode":"static java.lang.String clean(final java.lang.String str) {\n    if (str.endsWith(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                {\n                    if ((str == null) || ((str.length()) == 0)) {\n                        return str;\n                    } \n                    final int int = str.length();\n                    final char[] char[] = new char[len];\n                    int int = 0;\n                    for (int int = 0 ; i < len ; i++) {\n                        if (java.lang.Character.isLetter(str.charAt(i))) {\n                            chars[(count++)] = str.charAt(i);\n                        } \n                    }\n                    if (count == len) {\n                        return str.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    } \n                    return new java.lang.String(chars , 0 , count).toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"14604eef-3e5f-11e6-a14b-2b4d22aa7344","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:514","type":"CtMethodImpl","sourcecode":"private int handleJ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                    result.append('H');\n                } else {\n                    result.append('J', 'H');\n                }\n                index++;\n            } else {\n                if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n                    result.append('J', 'A');\n                } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n                    result.append('J', 'H');\n                } else if (index == ((value.length()) - 1)) {\n                    result.append('J', ' ');\n                } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n                    result.append('J');\n                } \n                if ((charAt(value, (index + 1))) == 'J') {\n                    index += 2;\n                } else {\n                    index++;\n                }\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"14607600-3e5f-11e6-a14b-f98bffcb99ce","method":{"position":"org.apache.commons.codec.digest.DigestUtils:374","type":"CtMethodImpl","sourcecode":"public static byte[] sha1(final byte[] data) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.getSha1Digest().digest(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtBinaryOperatorImpl","sourcecode":"((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)"},"failures":[106],"tindex":"14607601-3e5f-11e6-a14b-d341a4cbe8d8","method":{"position":"org.apache.commons.codec.digest.HmacUtils:459","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (((valueToDigest.length()) != 1) || ((valueToDigest.length()) != 1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"leftCharacter":"valueToDigest","rightCharacter":"valueToDigest"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:413","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[],"tindex":"14607602-3e5f-11e6-a14b-e7a19104e774","method":{"position":"org.apache.commons.codec.language.Soundex:183","type":"CtMethodImpl","sourcecode":"private char getMappingCode(final java.lang.String str, final int index) {\n    if (str.endsWith(str)) {\n        {\n            final char char = org.apache.commons.codec.language.Soundex.this.map(str.charAt(index));\n            if ((index > 1) && (mappedChar != '0')) {\n                final char char = str.charAt((index - 1));\n                if (('H' == hwChar) || ('W' == hwChar)) {\n                    final char char = str.charAt((index - 2));\n                    final char char = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n                    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n                        return 0;\n                    } \n                } \n            } \n            return mappedChar;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"str","line":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:193","type":"CtBinaryOperatorImpl","sourcecode":"sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)"},"failures":[113,114,167,180,116,181,182,117,183,184,168,169,185,170,122,123,124,125,126,127,128,129,130,131,132,171,172,173,174,137,175,139,176,141,186,177,187,188,144,189,190,191,192,145,193,194,195,196,197,198,199,200,146],"tindex":"14607603-3e5f-11e6-a14b-cbe7bed7f58e","method":{"position":"org.apache.commons.codec.binary.Base64:428","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid decode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inAvail == inAvail) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (context.boolean) {\n                return ;\n            } \n            if (inAvail < 0) {\n                context.boolean = true;\n            } \n            for (int int = 0 ; i < inAvail ; i++) {\n                final byte[] byte[] = ensureBufferSize(int, context);\n                final byte byte = in[(inPos++)];\n                if (b == (byte)) {\n                    context.boolean = true;\n                    break;\n                } else {\n                    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n                        final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n                        if (result >= 0) {\n                            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                            context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n                            if ((context.int) == 0) {\n                                buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                            } \n                        } \n                    } \n                }\n            }\n            if ((context.boolean) && ((context.int) != 0)) {\n                final byte[] byte[] = ensureBufferSize(int, context);\n                switch (context.int) {\n                    case 1 :\n                        break;\n                    case 2 :\n                        context.int = (context.int) >> 4;\n                        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    case 3 :\n                        context.int = (context.int) >> 2;\n                        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    default :\n                        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                }\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sumLength":"inAvail","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"inAvail"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"14609d14-3e5f-11e6-a14b-25f142df63b1","method":{"position":"org.apache.commons.codec.digest.DigestUtils:687","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final byte[] data) {\n    if (data == null) {\n        {\n            if (data == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[108],"tindex":"14609d15-3e5f-11e6-a14b-41ce4e433b00","method":{"position":"org.apache.commons.codec.digest.HmacUtils:551","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha384(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key), valueToDigest).doFinal();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[],"tindex":"14609d16-3e5f-11e6-a14b-83687582f5d9","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:331","type":"CtMethodImpl","sourcecode":"private int handleCC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value.endsWith(value)) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n                if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n                    result.append(\"KS\");\n                } else {\n                    result.append('X');\n                }\n                index += 3;\n            } else {\n                result.append('K');\n                index += 2;\n            }\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtInvocationImpl","sourcecode":"incl.contains(\" \")"},"failures":[113,114,167,201,202,203,204,205,178,206,207,208,209,210,211,212,213,180,116,117,87,214,215,216,217,218,219,220,221,222,223,224,185,123,139,140,141,187,188,143,225,144,189,190,191,192,145,193,194,226,196,199,200,146,227,228,229,230,231,232,94,95,96,98,99,100,101,103,104,233,106,107,108,109,110,112],"tindex":"1460c427-3e5f-11e6-a14b-d1d0767ee5a5","method":{"position":"org.apache.commons.codec.binary.StringUtils:92","type":"CtMethodImpl","sourcecode":"private static byte[] getBytes(final java.lang.String string, final java.nio.charset.Charset charset) {\n    if (string.contains(\" \")) {\n        {\n            if (string == null) {\n                return null;\n            } \n            return string.getBytes(charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"incl":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[103,109],"tindex":"1460c428-3e5f-11e6-a14b-6b390c655fd7","method":{"position":"org.apache.commons.codec.digest.HmacUtils:245","type":"CtMethodImpl","sourcecode":"public static byte[] hmacMd5(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacMd5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[234],"tindex":"1460c429-3e5f-11e6-a14b-a7c61af79234","method":{"position":"org.apache.commons.codec.Charsets:86","type":"CtMethodImpl","sourcecode":"public static java.nio.charset.Charset toCharset(final java.lang.String charset) {\n    if (charset.equals(\"\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return charset == null ? java.nio.charset.Charset.defaultCharset() : java.nio.charset.Charset.forName(charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"charset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"1460c42a-3e5f-11e6-a14b-f1b7e37858d1","method":{"position":"org.apache.commons.codec.binary.Base64:605","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64Chunked(final byte[] binaryData) {\n    if (binaryData == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (binaryData == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"binaryData"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtInvocationImpl","sourcecode":"replacedName.contains(dc)"},"failures":[],"tindex":"1460c42b-3e5f-11e6-a14b-e923ab7bc76b","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:412","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj.contains(obj)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n            } \n            return encode(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacedName":"obj","dc":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:616","type":"CtVariableReadImpl","sourcecode":"slavoGermanic"},"failures":[180,235,116,236,181,182,117,237,238,239,240,215,216,241,195],"tindex":"1460eb3c-3e5f-11e6-a14b-05b5751e0941","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:110","type":"CtMethodImpl","sourcecode":"private void flush(final boolean propagate) throws java.io.IOException {\n    if (propagate) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (propagate) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    final int int = org.apache.commons.codec.binary.BaseNCodec.available(org.apache.commons.codec.binary.BaseNCodec.Context);\n                    if (avail > 0) {\n                        final byte[] byte[] = new byte[avail];\n                        final int int = org.apache.commons.codec.binary.BaseNCodec.readResults(buf, 0, avail, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        if (c > 0) {\n                            java.io.OutputStream.write(buf, 0, c);\n                        } \n                    } \n                    if (propagate) {\n                        java.io.OutputStream.flush();\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"slavoGermanic":"propagate"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:369","type":"CtBinaryOperatorImpl","sourcecode":"lastCode == '/'"},"failures":[],"tindex":"1460eb3d-3e5f-11e6-a14b-4d6242c9de0e","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:161","type":"CtMethodImpl","sourcecode":"char getMappingCode(final char c) {\n    if (c == '/') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (c == 'N') {\n                {\n                    if (!(java.lang.Character.isLetter(c))) {\n                        return 0;\n                    } \n                    return org.apache.commons.codec.language.RefinedSoundex.this.char[][((java.lang.Character.toUpperCase(c)) - 'A')];\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lastCode":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[242],"tindex":"1460eb3e-3e5f-11e6-a14b-d91c057eb180","method":{"position":"org.apache.commons.codec.net.QCodec:246","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return encode(str, getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:336","type":"CtBinaryOperatorImpl","sourcecode":"(strA.length()) > (strB.length())"},"failures":[],"tindex":"1460eb3f-3e5f-11e6-a14b-03f2d0a5daff","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if ((object.length()) > (object.length())) {\n        {\n            if (!(object instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.java.lang.String.java.lang.Class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"));\n            } \n            return encode(((java.lang.String)(object)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strA":"object","strB":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[94],"tindex":"14611250-3e5f-11e6-a14b-8fa08f430ae1","method":{"position":"org.apache.commons.codec.digest.DigestUtils:198","type":"CtMethodImpl","sourcecode":"public static byte[] md2(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd2Digest(), data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[243,244,245,246,247,248,249],"tindex":"14611251-3e5f-11e6-a14b-a583c8a40d5f","method":{"position":"org.apache.commons.codec.digest.HmacUtils:154","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final org.apache.commons.codec.digest.HmacAlgorithms algorithm, final byte[] key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[250,251,252,253,254,255,256,257,258,214,259,237,238,239,240,215,216,217,218,219,260,261,262,263,264,265,241,220,221,266,222,223,224,267,268,186,225],"tindex":"14611252-3e5f-11e6-a14b-8f20a8e770f0","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:311","type":"CtMethodImpl","sourcecode":"protected static boolean isWhiteSpace(final byte byteToCheck) {\n    if (byteToCheck != byteToCheck) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (byteToCheck == byteToCheck) {\n                {\n                    if (byteToCheck == byteToCheck) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            switch (byteToCheck) {\n                                case ' ' :\n                                case '\\n' :\n                                case '\\r' :\n                                case '\\t' :\n                                    return true;\n                                default :\n                                    return false;\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"byteToCheck","pad":"byteToCheck"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtBinaryOperatorImpl","sourcecode":"(content.length()) == 0"},"failures":[269,147],"tindex":"14611253-3e5f-11e6-a14b-e76c0fe0a63d","method":{"position":"org.apache.commons.codec.language.Caverphone1:45","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if ((source.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = source;\n            if ((txt == null) || ((txt.length()) == 0)) {\n                return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String;\n            } \n            txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            txt = txt.replaceAll(\"[^a-z]\", \"\");\n            txt = txt.replaceAll(\"^cough\", \"cou2f\");\n            txt = txt.replaceAll(\"^rough\", \"rou2f\");\n            txt = txt.replaceAll(\"^tough\", \"tou2f\");\n            txt = txt.replaceAll(\"^enough\", \"enou2f\");\n            txt = txt.replaceAll(\"^gn\", \"2n\");\n            txt = txt.replaceAll(\"mb$\", \"m2\");\n            txt = txt.replaceAll(\"cq\", \"2q\");\n            txt = txt.replaceAll(\"ci\", \"si\");\n            txt = txt.replaceAll(\"ce\", \"se\");\n            txt = txt.replaceAll(\"cy\", \"sy\");\n            txt = txt.replaceAll(\"tch\", \"2ch\");\n            txt = txt.replaceAll(\"c\", \"k\");\n            txt = txt.replaceAll(\"q\", \"k\");\n            txt = txt.replaceAll(\"x\", \"k\");\n            txt = txt.replaceAll(\"v\", \"f\");\n            txt = txt.replaceAll(\"dg\", \"2g\");\n            txt = txt.replaceAll(\"tio\", \"sio\");\n            txt = txt.replaceAll(\"tia\", \"sia\");\n            txt = txt.replaceAll(\"d\", \"t\");\n            txt = txt.replaceAll(\"ph\", \"fh\");\n            txt = txt.replaceAll(\"b\", \"p\");\n            txt = txt.replaceAll(\"sh\", \"s2\");\n            txt = txt.replaceAll(\"z\", \"s\");\n            txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n            txt = txt.replaceAll(\"[aeiou]\", \"3\");\n            txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n            txt = txt.replaceAll(\"gh\", \"22\");\n            txt = txt.replaceAll(\"g\", \"k\");\n            txt = txt.replaceAll(\"s+\", \"S\");\n            txt = txt.replaceAll(\"t+\", \"T\");\n            txt = txt.replaceAll(\"p+\", \"P\");\n            txt = txt.replaceAll(\"k+\", \"K\");\n            txt = txt.replaceAll(\"f+\", \"F\");\n            txt = txt.replaceAll(\"m+\", \"M\");\n            txt = txt.replaceAll(\"n+\", \"N\");\n            txt = txt.replaceAll(\"w3\", \"W3\");\n            txt = txt.replaceAll(\"wy\", \"Wy\");\n            txt = txt.replaceAll(\"wh3\", \"Wh3\");\n            txt = txt.replaceAll(\"why\", \"Why\");\n            txt = txt.replaceAll(\"w\", \"2\");\n            txt = txt.replaceAll(\"^h\", \"A\");\n            txt = txt.replaceAll(\"h\", \"2\");\n            txt = txt.replaceAll(\"r3\", \"R3\");\n            txt = txt.replaceAll(\"ry\", \"Ry\");\n            txt = txt.replaceAll(\"r\", \"2\");\n            txt = txt.replaceAll(\"l3\", \"L3\");\n            txt = txt.replaceAll(\"ly\", \"Ly\");\n            txt = txt.replaceAll(\"l\", \"2\");\n            txt = txt.replaceAll(\"j\", \"y\");\n            txt = txt.replaceAll(\"y3\", \"Y3\");\n            txt = txt.replaceAll(\"y\", \"2\");\n            txt = txt.replaceAll(\"2\", \"\");\n            txt = txt.replaceAll(\"3\", \"\");\n            txt = txt + (org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String);\n            return txt.substring(0, org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"content":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:126","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'R'"},"failures":[],"tindex":"14613964-3e5f-11e6-a14b-9be4096f90f7","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:115","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object ascii) throws org.apache.commons.codec.DecoderException {\n    if ((ascii[1]) == 'R') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (ascii == null) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            if (ascii instanceof byte[]) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n            } \n            if (ascii instanceof char[]) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n            } \n            if (ascii instanceof java.lang.String) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n            } \n            throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"ascii"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"14613965-3e5f-11e6-a14b-71d4f6f4f147","method":{"position":"org.apache.commons.codec.binary.Hex:175","type":"CtMethodImpl","sourcecode":"protected static int toDigit(final char ch, final int index) throws org.apache.commons.codec.DecoderException {\n    if (index == index) {\n        {\n            if (index < 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    final int int = java.lang.Character.digit(ch, 16);\n                    if (digit == (-1)) {\n                        throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + ch) + \" at index \") + index));\n                    } \n                    return digit;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtInvocationImpl","sourcecode":"incl.contains(\" \")"},"failures":[],"tindex":"14613966-3e5f-11e6-a14b-3d8a6267f49e","method":{"position":"org.apache.commons.codec.digest.HmacUtils:352","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key.contains(\" \")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"incl":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\")\"))"},"failures":[],"tindex":"14616077-3e5f-11e6-a14b-1f9b81c0120e","method":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:49","type":"CtMethodImpl","sourcecode":"static boolean regionMatches(final java.lang.CharSequence cs, final boolean ignoreCase, final int thisStart, final java.lang.CharSequence substring, final int start, final int length) {\n    if (!(cs.endsWith(\")\"))) {\n        {\n            if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n                return ((java.lang.String)(cs)).regionMatches(ignoreCase, thisStart, ((java.lang.String)(substring)), start, length);\n            } \n            int int = thisStart;\n            int int = start;\n            int int = length;\n            while ((tmpLen--) > 0) {\n                char char = cs.charAt((index1++));\n                char char = substring.charAt((index2++));\n                if (c1 == c2) {\n                    continue;\n                } \n                if (!ignoreCase) {\n                    return false;\n                } \n                if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"cs"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[149,150,151,152,153,154,155,156,157,270,158,159,160,161,162,163,164,165],"tindex":"14616078-3e5f-11e6-a14b-fbd80970833d","method":{"position":"org.apache.commons.codec.language.bm.Rule:248","type":"CtMethodImpl","sourcecode":"private static java.lang.String createResourceName(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang == null) {\n        {\n            return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_%s_%s.txt\", nameType.getName(), rt.getName(), lang);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"lang"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"14616079-3e5f-11e6-a14b-ada87851d806","method":{"position":"org.apache.commons.codec.binary.Base64:581","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64URLSafe(final byte[] binaryData) {\n    if (binaryData == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"binaryData"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtBinaryOperatorImpl","sourcecode":"(!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))"},"failures":[],"tindex":"1461607a-3e5f-11e6-a14b-439a5bcd277d","method":{"position":"org.apache.commons.codec.net.QCodec:264","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if ((!(str.startsWith(str))) || (!(text.endsWith(str)))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return decodeText(str);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.net.RFC1522Codec.POSTFIX":"str","org.apache.commons.codec.net.RFC1522Codec.PREFIX":"str","text":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"1461607b-3e5f-11e6-a14b-e525c9e47213","method":{"position":"org.apache.commons.codec.language.AbstractCaverphone:76","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEqual(final java.lang.String str1, final java.lang.String str2) throws org.apache.commons.codec.EncoderException {\n    if (str1 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            return org.apache.commons.codec.language.AbstractCaverphone.this.encode(str1).equals(org.apache.commons.codec.language.AbstractCaverphone.this.encode(str2));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str1"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"1461878c-3e5f-11e6-a14b-e562fdcea74d","method":{"position":"org.apache.commons.codec.digest.HmacUtils:312","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"valueToDigest"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[271],"tindex":"1461878d-3e5f-11e6-a14b-9941745e1835","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:104","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final java.lang.String keyBytes) {\n    if (keyBytes == null) {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"keyBytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"1461878e-3e5f-11e6-a14b-e1d14a8dcd3a","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            if (pArray == pArray) {\n                {\n                    if ((pArray == null) || ((pArray.int) == 0)) {\n                        return pArray;\n                    } \n                    final org.apache.commons.codec.binary.BaseNCodec.Context org.apache.commons.codec.binary.BaseNCodec.Context = new org.apache.commons.codec.binary.BaseNCodec.Context();\n                    decode(pArray, 0, pArray.int, context);\n                    decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context);\n                    final byte[] byte[] = new byte[context.int];\n                    readResults(result, 0, result.int, context);\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"pArray","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"pArray"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[],"tindex":"1461878f-3e5f-11e6-a14b-efb33adcd187","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:257","type":"CtMethodImpl","sourcecode":"private static java.lang.String join(final java.lang.Iterable<java.lang.String> strings, final java.lang.String sep) {\n    if ((sep.length()) > 0) {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            final java.util.Iterator<java.lang.String> java.util.Iterator<java.lang.String> = strings.iterator();\n            if (si.hasNext()) {\n                sb.append(si.next());\n            } \n            while (si.hasNext()) {\n                sb.append(sep).append(si.next());\n            }\n            return sb.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"sep"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Hex:177","type":"CtBinaryOperatorImpl","sourcecode":"digit == (-1)"},"failures":[272,273,274,275],"tindex":"1461aea0-3e5f-11e6-a14b-33e6e4c1add6","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:398","type":"CtMethodImpl","sourcecode":"private static void intToFourBytes(final int iValue, final byte[] b, int offset) {\n    if (offset == (-1)) {\n        {\n            b[(offset++)] = ((byte)(iValue & 255));\n            b[(offset++)] = ((byte)((iValue >>> 8) & 255));\n            b[(offset++)] = ((byte)((iValue >>> 16) & 255));\n            b[(offset++)] = ((byte)((iValue >>> 24) & 255));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"digit":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:119","type":"CtVariableReadImpl","sourcecode":"propagate"},"failures":[],"tindex":"1461aea1-3e5f-11e6-a14b-192abee2db47","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:110","type":"CtMethodImpl","sourcecode":"private void flush(final boolean propagate) throws java.io.IOException {\n    if (propagate) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (propagate) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    final int int = org.apache.commons.codec.binary.BaseNCodec.available(org.apache.commons.codec.binary.BaseNCodec.Context);\n                    if (avail > 0) {\n                        final byte[] byte[] = new byte[avail];\n                        final int int = org.apache.commons.codec.binary.BaseNCodec.readResults(buf, 0, avail, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        if (c > 0) {\n                            java.io.OutputStream.write(buf, 0, c);\n                        } \n                    } \n                    if (propagate) {\n                        java.io.OutputStream.flush();\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"propagate":"propagate"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"1461aea2-3e5f-11e6-a14b-e3d343948226","method":{"position":"org.apache.commons.codec.language.bm.Rule:353","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang == null) {\n        {\n            if (lang == null) {\n                {\n                    final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.get(nameType).get(rt).get(lang);\n                    if (rules == null) {\n                        throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n                    } \n                    return rules;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"lang"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:119","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'E'"},"failures":[276,277,278],"tindex":"1461d5b3-3e5f-11e6-a14b-d5a1e89858f6","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:171","type":"CtMethodImpl","sourcecode":"public static byte[] fromAscii(final char[] ascii) {\n    if ((ascii[1]) == 'E') {\n        {\n            if ((ascii == null) || ((ascii.int) == 0)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            final byte[] byte[] = new byte[(ascii.int) >> 3];\n            for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if ((ascii[(jj - bits)]) == '1') {\n                        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n                    } \n                }\n            }\n            return l_raw;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"ascii"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[209,279,210,280,213],"tindex":"1461d5b4-3e5f-11e6-a14b-eda7ad70799e","method":{"position":"org.apache.commons.codec.net.URLCodec:243","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return encode(str, getDefaultCharset());\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:283","type":"CtBinaryOperatorImpl","sourcecode":"lineLength > 0"},"failures":[],"tindex":"1461d5b5-3e5f-11e6-a14b-6755d9747f07","method":{"position":"org.apache.commons.codec.binary.Base64:660","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe, final int maxResultSize) {\n    if (maxResultSize > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (maxResultSize < 0) {\n                {\n                    if ((binaryData == null) || ((binaryData.int) == 0)) {\n                        return binaryData;\n                    } \n                    final org.apache.commons.codec.binary.Base64 org.apache.commons.codec.binary.Base64 = isChunked ? new org.apache.commons.codec.binary.Base64(urlSafe) : new org.apache.commons.codec.binary.Base64(0 , org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[] , urlSafe);\n                    final long long = b64.getEncodedLength(binaryData);\n                    if (len > maxResultSize) {\n                        throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + len) + \") than the specified maximum size of \") + maxResultSize));\n                    } \n                    return b64.encode(binaryData);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineLength":"maxResultSize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[113,114,115,116,117,252,253,255,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146],"tindex":"1461d5b6-3e5f-11e6-a14b-3923c4822907","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:515","type":"CtMethodImpl","sourcecode":"public long getEncodedLength(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            if (pArray == null) {\n                {\n                    long long = ((((pArray.int) + (int)) - 1) / (int)) * ((long)(int));\n                    if ((int) > 0) {\n                        len += (((len + (int)) - 1) / (int)) * (int);\n                    } \n                    return len;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:283","type":"CtBinaryOperatorImpl","sourcecode":"lineLength > 0"},"failures":[281,282],"tindex":"1461fcc7-3e5f-11e6-a14b-7d3372868f19","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:240","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected char[] copyData(final int start, final int length) {\n    if (length > 0) {\n        {\n            final char[] char[] = new char[length];\n            java.lang.System.arraycopy(char[], start, newData, 0, length);\n            return newData;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineLength":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtBinaryOperatorImpl","sourcecode":"b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[],"tindex":"1461fcc8-3e5f-11e6-a14b-675ed09b50bd","method":{"position":"org.apache.commons.codec.binary.Base64:509","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final byte octet) {\n    if (octet != octet) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (octet == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.byte)) || (((octet >= 0) && (octet < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) && ((org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][octet]) != (-1)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"octet","org.apache.commons.codec.net.QCodec.UNDERSCORE":"octet"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[283],"tindex":"1461fcc9-3e5f-11e6-a14b-f7c699c5c427","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:140","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes) {\n    if (keyBytes == null) {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"keyBytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"1461fcca-3e5f-11e6-a14b-d9c5eeefa554","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:253","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeQuotedPrintable(java.util.BitSet printable, final byte[] bytes) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(bytes)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || ((str.length()) == 0)"},"failures":[],"tindex":"1461fccb-3e5f-11e6-a14b-95990d732436","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:276","type":"CtMethodImpl","sourcecode":"boolean isVowel(final java.lang.String letter) {\n    if (letter.startsWith(letter)) {\n        {\n            if ((letter == null) || ((str.length()) == 0)) {\n                {\n                    return ((((letter.equalsIgnoreCase(\"E\")) || (letter.equalsIgnoreCase(\"A\"))) || (letter.equalsIgnoreCase(\"O\"))) || (letter.equalsIgnoreCase(\"I\"))) || (letter.equalsIgnoreCase(\"U\"));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"letter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"146223dc-3e5f-11e6-a14b-f7c64840b248","method":{"position":"org.apache.commons.codec.binary.Base64:605","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64Chunked(final byte[] binaryData) {\n    if (binaryData == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (binaryData == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[284],"tindex":"146223dd-3e5f-11e6-a14b-097d4fc26e1b","method":{"position":"org.apache.commons.codec.net.RFC1522Codec:124","type":"CtMethodImpl","sourcecode":"protected java.lang.String decodeText(final java.lang.String text) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (text == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (text == null) {\n                return null;\n            } \n            if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n            } \n            final int int = (text.length()) - 2;\n            int int = 2;\n            int int = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n            if (to == terminator) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n            } \n            final java.lang.String java.lang.String = text.substring(from, to);\n            if (charset.equals(\"\")) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n            } \n            from = to + 1;\n            to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n            if (to == terminator) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n            } \n            final java.lang.String java.lang.String = text.substring(from, to);\n            if (!(getEncoding().equalsIgnoreCase(encoding))) {\n                throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n            } \n            from = to + 1;\n            to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n            byte[] byte[] = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(text.substring(from, to));\n            data = doDecoding(data);\n            return new java.lang.String(data , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"text"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtBinaryOperatorImpl","sourcecode":"(salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))"},"failures":[],"tindex":"146223de-3e5f-11e6-a14b-3fab3f8c5c59","method":{"position":"org.apache.commons.codec.digest.HmacUtils:723","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if ((key.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((key != null) && (!(salt.startsWith(valueToDigest)))) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"key","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"valueToDigest"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"146223df-3e5f-11e6-a14b-47b9a81ea5e7","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:398","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(java.lang.String input, final org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType, languageSet);\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, \"common\");\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, languageSet);\n            input = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale).replace('-', ' ').trim();\n            if ((org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) == (org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType)) {\n                if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n                    final java.lang.String java.lang.String = input.substring(2);\n                    final java.lang.String java.lang.String = \"d\" + remainder;\n                    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n                } \n                for (final java.lang.String java.lang.String : org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)) {\n                    if (input.startsWith((l + \" \"))) {\n                        final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n                        final java.lang.String java.lang.String = l + remainder;\n                        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n                    } \n                }\n            } \n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = java.util.Arrays.asList(input.split(\"\\\\s+\"));\n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            switch (org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) {\n                case SEPHARDIC :\n                    for (final java.lang.String java.lang.String : words) {\n                        final java.lang.String[] java.lang.String[] = aWord.split(\"'\");\n                        final java.lang.String java.lang.String = parts[((parts.int) - 1)];\n                        words2.add(lastPart);\n                    }\n                    words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType));\n                    break;\n                case ASHKENAZI :\n                    words2.addAll(words);\n                    words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType));\n                    break;\n                case GENERIC :\n                    words2.addAll(words);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException((\"Unreachable case: \" + (org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)));\n            }\n            if (org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean) {\n                input = org.apache.commons.codec.language.bm.PhoneticEngine.join(words2, \" \");\n            } else if ((words2.size()) == 1) {\n                input = words.iterator().next();\n            } else {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                for (final java.lang.String java.lang.String : words2) {\n                    result.append(\"-\").append(encode(word));\n                }\n                return result.substring(1);\n            }\n            org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(languageSet);\n            for (int int = 0 ; i < (input.length()) ; ) {\n                final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(rules , input , phonemeBuilder , i , int).invoke();\n                i = rulesApplication.getI();\n                phonemeBuilder = rulesApplication.getPhonemeBuilder();\n            }\n            phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1);\n            phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2);\n            return phonemeBuilder.makeString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[98],"tindex":"14627200-3e5f-11e6-a14b-156604d9dc9f","method":{"position":"org.apache.commons.codec.digest.DigestUtils:452","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final byte[] data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.getSha256Digest().digest(data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:413","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[91,102],"tindex":"14627201-3e5f-11e6-a14b-e72465146752","method":{"position":"org.apache.commons.codec.digest.DigestUtils:815","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest updateDigest(final java.security.MessageDigest messageDigest, final java.lang.String valueToDigest) {\n    if (valueToDigest.endsWith(valueToDigest)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            messageDigest.update(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n            return messageDigest;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"valueToDigest","line":"valueToDigest"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[285],"tindex":"14627202-3e5f-11e6-a14b-d7d1eb8fbbcc","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:140","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] ascii) {\n    if (ascii == null) {\n        {\n            return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"ascii"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"14627203-3e5f-11e6-a14b-8399463fb89d","method":{"position":"org.apache.commons.codec.language.bm.Languages:165","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Languages getInstance(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        {\n            return org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Languages>.get(nameType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtInvocationImpl","sourcecode":"value.startsWith(element)"},"failures":[],"tindex":"14627204-3e5f-11e6-a14b-45616f8d3f9b","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str.startsWith(str)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (str == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                                str = str.substring(1);\n                            } \n                            if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                                str = str.substring(0, ((str.length()) - 1));\n                            } \n                            return str;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str","element":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || ((str.length()) == 0)"},"failures":[],"tindex":"14627205-3e5f-11e6-a14b-b3b5786a4337","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:244","type":"CtMethodImpl","sourcecode":"public boolean isDoubleMetaphoneEqual(final java.lang.String value1, final java.lang.String value2, final boolean alternate) {\n    if ((value2 == null) || ((str.length()) == 0)) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.equals(doubleMetaphone(value1, alternate), doubleMetaphone(value2, alternate));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value2"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\")\"))"},"failures":[],"tindex":"14627206-3e5f-11e6-a14b-f9c33585fef6","method":{"position":"org.apache.commons.codec.digest.DigestUtils:484","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final java.lang.String data) {\n    if (!(data.endsWith(\")\"))) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:347","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[],"tindex":"14629917-3e5f-11e6-a14b-afed410af11b","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:311","type":"CtMethodImpl","sourcecode":"protected static boolean isWhiteSpace(final byte byteToCheck) {\n    if (byteToCheck != byteToCheck) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (byteToCheck == byteToCheck) {\n                {\n                    if (byteToCheck == byteToCheck) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            switch (byteToCheck) {\n                                case ' ' :\n                                case '\\n' :\n                                case '\\r' :\n                                case '\\t' :\n                                    return true;\n                                default :\n                                    return false;\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"byteToCheck","pad":"byteToCheck"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtBinaryOperatorImpl","sourcecode":"b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[],"tindex":"14629918-3e5f-11e6-a14b-6bba2b58d7ec","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:311","type":"CtMethodImpl","sourcecode":"protected static boolean isWhiteSpace(final byte byteToCheck) {\n    if (byteToCheck != byteToCheck) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (byteToCheck == byteToCheck) {\n                {\n                    if (byteToCheck == byteToCheck) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            switch (byteToCheck) {\n                                case ' ' :\n                                case '\\n' :\n                                case '\\r' :\n                                case '\\t' :\n                                    return true;\n                                default :\n                                    return false;\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"byteToCheck","org.apache.commons.codec.net.QCodec.UNDERSCORE":"byteToCheck"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"14629919-3e5f-11e6-a14b-bd4b6569e4d5","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:515","type":"CtMethodImpl","sourcecode":"public long getEncodedLength(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            if (pArray == null) {\n                {\n                    long long = ((((pArray.int) + (int)) - 1) / (int)) * ((long)(int));\n                    if ((int) > 0) {\n                        len += (((len + (int)) - 1) / (int)) * (int);\n                    } \n                    return len;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"pArray"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[180,250,251,256,257,241,185,286,287,139,141,288,142,143,144,192,195,289],"tindex":"1462991a-3e5f-11e6-a14b-4522dafb423f","method":{"position":"org.apache.commons.codec.binary.StringUtils:382","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf8(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newString(bytes, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:532","type":"CtVariableReadImpl","sourcecode":"branching"},"failures":[290,291,292,293,294],"tindex":"1462991b-3e5f-11e6-a14b-273f5bcce905","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:582","type":"CtMethodImpl","sourcecode":"private int handleR(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index, final boolean slavoGermanic) {\n    if (slavoGermanic) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((((index == ((value.length()) - 1)) && (!slavoGermanic)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"IE\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 2, \"ME\", \"MA\")))) {\n                result.appendAlternate('R');\n            } else {\n                result.append('R');\n            }\n            return (charAt(value, (index + 1))) == 'R' ? index + 2 : index + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"branching":"slavoGermanic"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:325","type":"CtInvocationImpl","sourcecode":"name1LtREnd.equals(name2RtLEnd)"},"failures":[],"tindex":"1462c02c-3e5f-11e6-a14b-ed27ec40435d","method":{"position":"org.apache.commons.codec.language.bm.Rule:124","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Rule.Phoneme append(final java.lang.CharSequence str) {\n    if (str.equals(str)) {\n        {\n            org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(str);\n            return org.apache.commons.codec.language.bm.Rule.Phoneme.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2RtLEnd":"str","name1LtREnd":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:268","type":"CtBinaryOperatorImpl","sourcecode":"(i % 7) != 0"},"failures":[295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336],"tindex":"1462c02d-3e5f-11e6-a14b-9bb0b3e12544","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:184","type":"CtMethodImpl","sourcecode":"int getMinRating(final int sumLength) {\n    if ((sumLength % 7) != 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            }\n            return minRating;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"sumLength"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[337,338,339,340,290,291,292,341,342,293,294],"tindex":"1462c02e-3e5f-11e6-a14b-6b31017ab02e","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:904","type":"CtMethodImpl","sourcecode":"protected char charAt(final java.lang.String value, final int index) {\n    if (index < 0) {\n        {\n            if ((index < 0) || (index >= (value.length()))) {\n                return java.lang.Character.java.lang.Character.char;\n            } \n            return value.charAt(index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:417","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"1462c02f-3e5f-11e6-a14b-e90e3d36f206","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:331","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str.startsWith(str)) {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"str","line":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:630","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")"},"failures":[],"tindex":"1462c030-3e5f-11e6-a14b-e3773b381356","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:384","type":"CtMethodImpl","sourcecode":"private int handleD(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value.startsWith(value)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n                        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                            result.append('J');\n                            index += 3;\n                        } else {\n                            result.append(\"TK\");\n                            index += 2;\n                        }\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n                        result.append('T');\n                        index += 2;\n                    } else {\n                        result.append('T');\n                        index++;\n                    }\n                    return index;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:429","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[],"tindex":"1462e741-3e5f-11e6-a14b-df9c31ae086b","method":{"position":"org.apache.commons.codec.digest.HmacUtils:723","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if ((key.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((key != null) && (!(salt.startsWith(valueToDigest)))) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"1462e742-3e5f-11e6-a14b-4b7bc7b129e9","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:973","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.String primary, final java.lang.String alternate) {\n    if (primary == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendPrimary(primary);\n            appendAlternate(alternate);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"primary"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[],"tindex":"1462e743-3e5f-11e6-a14b-b96b3a0a10bb","method":{"position":"org.apache.commons.codec.binary.StringUtils:113","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesIso8859_1(final java.lang.String string) {\n    if (!(string.contains(\"[\"))) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"string"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:354","type":"CtBinaryOperatorImpl","sourcecode":"(chr == 'B') || ((chr == 'P') && (nextChar != 'H'))"},"failures":[],"tindex":"1462e744-3e5f-11e6-a14b-31d88d3e16de","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:253","type":"CtMethodImpl","sourcecode":"public void addLeft(final char ch) {\n    if ((ch == 'B') || ((chr == 'P') && (ch != 'H'))) {\n        {\n            (int)++;\n            char[][getNextPos()] = ch;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nextChar":"ch","chr":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[94,95,96,98,99,100,101],"tindex":"1462e745-3e5f-11e6-a14b-0562e4cfe235","method":{"position":"org.apache.commons.codec.digest.DigestUtils:49","type":"CtMethodImpl","sourcecode":"private static byte[] digest(final java.security.MessageDigest digest, final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.updateDigest(digest, data).digest();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtInvocationImpl","sourcecode":"str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[],"tindex":"1462e746-3e5f-11e6-a14b-f153a4b06e8f","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:384","type":"CtMethodImpl","sourcecode":"private int handleD(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value.startsWith(value)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n                        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                            result.append('J');\n                            index += 3;\n                        } else {\n                            result.append(\"TK\");\n                            index += 2;\n                        }\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n                        result.append('T');\n                        index += 2;\n                    } else {\n                        result.append('T');\n                        index++;\n                    }\n                    return index;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtBinaryOperatorImpl","sourcecode":"to == terminator"},"failures":[],"tindex":"14630e57-3e5f-11e6-a14b-9b318f37f9f6","method":{"position":"org.apache.commons.codec.binary.Hex:175","type":"CtMethodImpl","sourcecode":"protected static int toDigit(final char ch, final int index) throws org.apache.commons.codec.DecoderException {\n    if (index == index) {\n        {\n            if (index < 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    final int int = java.lang.Character.digit(ch, 16);\n                    if (digit == (-1)) {\n                        throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + ch) + \" at index \") + index));\n                    } \n                    return digit;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"terminator":"index","to":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtInvocationImpl","sourcecode":"str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[],"tindex":"14630e58-3e5f-11e6-a14b-bf53b1639c12","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:276","type":"CtMethodImpl","sourcecode":"boolean isVowel(final java.lang.String letter) {\n    if (letter.startsWith(letter)) {\n        {\n            if ((letter == null) || ((str.length()) == 0)) {\n                {\n                    return ((((letter.equalsIgnoreCase(\"E\")) || (letter.equalsIgnoreCase(\"A\"))) || (letter.equalsIgnoreCase(\"O\"))) || (letter.equalsIgnoreCase(\"I\"))) || (letter.equalsIgnoreCase(\"U\"));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"letter","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"letter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtInvocationImpl","sourcecode":"target.equals(element)"},"failures":[55,85,13],"tindex":"14630e59-3e5f-11e6-a14b-0d00b4a3a5b6","method":{"position":"org.apache.commons.codec.language.SoundexUtils:109","type":"CtMethodImpl","sourcecode":"static int differenceEncoded(final java.lang.String es1, final java.lang.String es2) {\n    if (es2.equals(es2)) {\n        {\n            if ((es1 == null) || (es2 == null)) {\n                return 0;\n            } \n            final int int = java.lang.Math.min(es1.length(), es2.length());\n            int int = 0;\n            for (int int = 0 ; i < lengthToMatch ; i++) {\n                if ((es1.charAt(i)) == (es2.charAt(i))) {\n                    diff++;\n                } \n            }\n            return diff;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"es2","element":"es2"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"14630e5a-3e5f-11e6-a14b-914229840242","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            if (pArray == pArray) {\n                {\n                    if ((pArray == null) || ((pArray.int) == 0)) {\n                        return pArray;\n                    } \n                    final org.apache.commons.codec.binary.BaseNCodec.Context org.apache.commons.codec.binary.BaseNCodec.Context = new org.apache.commons.codec.binary.BaseNCodec.Context();\n                    decode(pArray, 0, pArray.int, context);\n                    decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context);\n                    final byte[] byte[] = new byte[context.int];\n                    readResults(result, 0, result.int, context);\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:159","type":"CtFieldReadImpl","sourcecode":"doEncode"},"failures":[201,343,344,345,346,202,347,348,204,205,178,349,350,206],"tindex":"14630e5b-3e5f-11e6-a14b-85d477c7c901","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:273","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeQuotedPrintable(java.util.BitSet printable, final byte[] bytes, boolean strict) {\n    if (strict) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            if (printable == null) {\n                printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            if (strict) {\n                int int = 1;\n                for (int int = 0 ; i < ((bytes.int) - 3) ; i++) {\n                    int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n                    if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n                        pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n                    } else {\n                        org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n                        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        pos = 1;\n                    }\n                }\n                int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.int) - 3), bytes);\n                boolean boolean = (!(printable.get(b))) || ((org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)) && (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 5)));\n                pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n                if (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 2)) {\n                    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                } \n                for (int int = (bytes.int) - 2 ; i < (bytes.int) ; i++) {\n                    b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n                    encode = (!(printable.get(b))) || ((i > ((bytes.int) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)));\n                    org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n                }\n            } else {\n                for (final byte byte : bytes) {\n                    int int = c;\n                    if (b < 0) {\n                        b = 256 + b;\n                    } \n                    if (printable.get(b)) {\n                        buffer.write(b);\n                    } else {\n                        org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n                    }\n                }\n            }\n            return buffer.toByteArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"doEncode":"strict"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:72","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX)"},"failures":[],"tindex":"1463356c-3e5f-11e6-a14b-09adff97abe4","method":{"position":"org.apache.commons.codec.language.Caverphone:101","type":"CtMethodImpl","sourcecode":"public boolean isCaverphoneEqual(final java.lang.String str1, final java.lang.String str2) {\n    if (str2.startsWith(str1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.caverphone(str1).equals(org.apache.commons.codec.language.Caverphone.this.caverphone(str2));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"str2","org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX":"str1"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[],"tindex":"1463356d-3e5f-11e6-a14b-4d522f0558e3","method":{"position":"org.apache.commons.codec.net.QCodec:207","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if ((str.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return encodeText(str, charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"1463356e-3e5f-11e6-a14b-5f28da895982","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str.startsWith(str)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (str == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                                str = str.substring(1);\n                            } \n                            if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                                str = str.substring(0, ((str.length()) - 1));\n                            } \n                            return str;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246964686/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
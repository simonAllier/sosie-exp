{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":138,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":105,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":24,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":243,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":249,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":197,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":68,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":247,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":235,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":35,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":230,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":56,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":172,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":237,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData":9,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":48,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt":63,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":49,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":143,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":255,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":220,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":219,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":116,"org.apache.commons.codec.language.NysiisTest.testCap":69,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":117,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":242,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":259,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":121,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":95,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":218,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":256,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData":19,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":15,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":118,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":94,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":119,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":170,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":222,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":163,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":90,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":194,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":135,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":209,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":226,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":109,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":182,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":22,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":133,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":66,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":265,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":246,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":4,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":108,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":203,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":238,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":260,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully":241,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":103,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":150,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":252,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":166,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":191,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":267,"org.apache.commons.codec.net.RFC1522CodecTest.testNullInput":272,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleDoubleVowel_BEETLE_NotRemoved":258,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":217,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":145,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":169,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":211,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":126,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":234,"org.apache.commons.codec.language.NysiisTest.testDropBy":82,"org.apache.commons.codec.language.MetaphoneTest.testEncodeNull":99,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":262,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":21,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":32,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc":215,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":224,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":201,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":212,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":245,"org.apache.commons.codec.binary.Base64Test.testUUID":112,"org.apache.commons.codec.binary.Base64Test.testSingletons":134,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":199,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":174,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":140,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":164,"org.apache.commons.codec.binary.Base64Test.testPairs":111,"org.apache.commons.codec.binary.Base64Test.testConstructors":114,"org.apache.commons.codec.language.NysiisTest.testRule2":74,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero":205,"org.apache.commons.codec.language.NysiisTest.testRule1":73,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":173,"org.apache.commons.codec.language.NysiisTest.testRule7":77,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":50,"org.apache.commons.codec.language.NysiisTest.testRule6":76,"org.apache.commons.codec.language.NysiisTest.testRule5":75,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":200,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":231,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":156,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":18,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt":59,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":42,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":186,"org.apache.commons.codec.language.NysiisTest.testBran":78,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":85,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":236,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":47,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":168,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":221,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":232,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":129,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull":185,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":106,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":130,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":223,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":213,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":177,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":159,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":38,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":65,"org.apache.commons.codec.language.NysiisTest.testDad":70,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":122,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":153,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":115,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName":214,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":64,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":271,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":67,"org.apache.commons.codec.language.NysiisTest.testDan":71,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":250,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":160,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":251,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":257,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":207,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":248,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":264,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData":17,"org.apache.commons.codec.language.NysiisTest.testSnat":80,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":181,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":7,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":180,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":192,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":6,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":58,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":270,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":1,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":184,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":0,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":102,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":161,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":45,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":155,"org.apache.commons.codec.binary.Base64Test.testTriplets":107,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":208,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":27,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":31,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":25,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":28,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":202,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":210,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":131,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":151,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative":204,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":123,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":154,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":148,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":43,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":110,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":29,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt":57,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":91,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":193,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":195,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":216,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":225,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":228,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":127,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":52,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":97,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":157,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":104,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":178,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":132,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":142,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":26,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":5,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":263,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":60,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":96,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":179,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":16,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":41,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":149,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":206,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":13,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":233,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":229,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":253,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":51,"org.apache.commons.codec.binary.HexTest.testDecodeArrayOddCharacters":190,"org.apache.commons.codec.language.NysiisTest.testTranan":84,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":176,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":254,"org.apache.commons.codec.language.NysiisTest.testFal":72,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":93,"org.apache.commons.codec.language.NysiisTest.testSnad":79,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":227,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":10,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":54,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":62,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":139,"org.apache.commons.codec.binary.HexTest.testDencodeEmpty":187,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":165,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":34,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":144,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":8,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":120,"org.apache.commons.codec.binary.Base64Test.testBase64":141,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":39,"org.apache.commons.codec.binary.HexTest.testDecodeStringOddCharacters":189,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":101,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":124,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":183,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":37,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":55,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":36,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":46,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":196,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully":240,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":12,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":146,"org.apache.commons.codec.binary.Base64Test.testCodec112":128,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":158,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":266,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":162,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":88,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":81,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":89,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters1":188,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":171,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":261,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":167,"org.apache.commons.codec.binary.Base64Test.testCodec68":136,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":11,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":152,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":147,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":86,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":198,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":239,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":3,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":2,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":61,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":175,"org.apache.commons.codec.language.NysiisTest.testOthers":83,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":137,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":23,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":92,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":87,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":33,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":100,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":244,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":125,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":269,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":113,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":268},"transformations":[{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:265","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[0,1,2],"tindex":"6d2f2319-2eb6-11e6-b4db-a59afc7c0481","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if (source.endsWith(source)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (source == null) {\n                {\n                    if (!(source instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\");\n                    } \n                    return encode(((java.lang.String)(source)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:306","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")"},"failures":[],"tindex":"6d300d7a-2eb6-11e6-b4db-89f5fa69b9b5","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:758","type":"CtMethodImpl","sourcecode":"private int handleZ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                result.append('J');\n                index += 2;\n            } else {\n                if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n                    result.append(\"S\", \"TS\");\n                } else {\n                    result.append('S');\n                }\n                index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:168","type":"CtBinaryOperatorImpl","sourcecode":"b == '+'"},"failures":[],"tindex":"6d305b9b-2eb6-11e6-b4db-c7aad95dbea0","method":{"position":"org.apache.commons.codec.language.Metaphone:338","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final java.lang.StringBuilder string, final int index) {\n    if (index == '+') {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(string.charAt(index))) >= 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:342","type":"CtBinaryOperatorImpl","sourcecode":"inAvail < 0"},"failures":[],"tindex":"6d305b9c-2eb6-11e6-b4db-4fc28bbd5260","method":{"position":"org.apache.commons.codec.language.Metaphone:342","type":"CtMethodImpl","sourcecode":"private boolean isPreviousChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (index < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if ((index > 0) && (index < (string.length()))) {\n                matches = (string.charAt((index - 1))) == c;\n            } \n            return matches;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inAvail":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)"},"failures":[],"tindex":"6d3082ad-2eb6-11e6-b4db-bb0aae0b4b34","method":{"position":"org.apache.commons.codec.language.Caverphone:57","type":"CtMethodImpl","sourcecode":"public java.lang.String caverphone(final java.lang.String source) {\n    if (source.endsWith(source)) {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.org.apache.commons.codec.language.Caverphone2.encode(source);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"source","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END":"source"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"6d30a9be-2eb6-11e6-b4db-737acfb5d215","method":{"position":"org.apache.commons.codec.language.bm.Rule:335","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final org.apache.commons.codec.language.bm.Languages.LanguageSet langs) {\n    if (nameType == nameType) {\n        {\n            return langs.isSingleton() ? org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, langs.getAny()) : org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[3,4,5,6,7,8],"tindex":"6d30d0cf-2eb6-11e6-b4db-f32a3bc56555","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:462","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(final java.lang.String source) {\n    if (source == null) {\n        {\n            final java.lang.String[] java.lang.String[] = soundex(source, true);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            for (final java.lang.String java.lang.String : branches) {\n                sb.append(branch);\n                if ((++index) < (branches.int)) {\n                    sb.append('|');\n                } \n            }\n            return sb.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:53","type":"CtBinaryOperatorImpl","sourcecode":"count == len"},"failures":[9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"6d30f7e0-2eb6-11e6-b4db-3586cbfe7281","method":{"position":"org.apache.commons.codec.digest.B64:72","type":"CtMethodImpl","sourcecode":"static java.lang.String getRandomSalt(final int num) {\n    if (num == num) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 1 ; i <= num ; i++) {\n                saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())));\n            }\n            return saltString.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"num","count":"num"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[],"tindex":"6d311ef1-2eb6-11e6-b4db-4b75b46aad33","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:857","type":"CtMethodImpl","sourcecode":"private boolean isSlavoGermanic(final java.lang.String value) {\n    if ((value.length()) > 0) {\n        {\n            return ((((value.indexOf('W')) > (-1)) || ((value.indexOf('K')) > (-1))) || ((value.indexOf(\"CZ\")) > (-1))) || ((value.indexOf(\"WITZ\")) > (-1));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:263","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[3,4,5,6,7,21,22,23,8,24],"tindex":"6d311ef2-2eb6-11e6-b4db-8dccd86ce5b1","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:180","type":"CtMethodImpl","sourcecode":"public java.lang.String[] getReplacements(final java.lang.String context, final boolean atStart) {\n    if ((context.length()) == 0) {\n        {\n            if (atStart) {\n                return java.lang.String[];\n            } \n            final int int = getPatternLength();\n            final boolean boolean = nextIndex < (context.length()) ? isVowel(context.charAt(nextIndex)) : false;\n            if (nextCharIsVowel) {\n                return java.lang.String[];\n            } \n            return java.lang.String[];\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"context"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"6d314603-2eb6-11e6-b4db-3f13e8697fc5","method":{"position":"org.apache.commons.codec.digest.HmacUtils:789","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac updateHmac(final javax.crypto.Mac mac, final java.lang.String valueToDigest) {\n    if (valueToDigest == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            mac.reset();\n            mac.update(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n            return mac;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,0,1,42,43,44,45,46,2,47],"tindex":"6d316d14-2eb6-11e6-b4db-73ed0ffaba92","method":{"position":"org.apache.commons.codec.language.bm.Lang:113","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang instance(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Lang>.get(nameType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:270","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"6d319425-2eb6-11e6-b4db-8d01081c5b6a","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:377","type":"CtMethodImpl","sourcecode":"private java.lang.String cleanup(final java.lang.String input) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (char char : input.toCharArray()) {\n                if (java.lang.Character.isWhitespace(ch)) {\n                    continue;\n                } \n                ch = java.lang.Character.toLowerCase(ch);\n                if ((boolean) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.containsKey(ch))) {\n                    ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch);\n                } \n                sb.append(ch);\n            }\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"6d31bb36-2eb6-11e6-b4db-69bdb0d21ec8","method":{"position":"org.apache.commons.codec.digest.DigestUtils:640","type":"CtMethodImpl","sourcecode":"public static byte[] sha512(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.getSha512Digest().digest(data);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"data"},"type":"special","returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:530","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof byte[]"},"failures":[48],"tindex":"6d31e247-2eb6-11e6-b4db-bf8ea8a819e8","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:133","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj.startsWith(\"(\")) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj instanceof byte[]) {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n                    } \n                    return soundex(((java.lang.String)(obj)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"6d320958-2eb6-11e6-b4db-fb3367771b2e","method":{"position":"org.apache.commons.codec.binary.Base64:720","type":"CtMethodImpl","sourcecode":"public static java.math.BigInteger decodeInteger(final byte[] pArray) {\n    if (pArray == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (pArray == pArray) {\n                {\n                    return new java.math.BigInteger(1 , org.apache.commons.codec.binary.Base64.decodeBase64(pArray));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"pArray","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"pArray"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtBinaryOperatorImpl","sourcecode":"((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))"},"failures":[],"tindex":"6d320959-2eb6-11e6-b4db-474a6f51ae2b","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:331","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (((str == null) || (str.equalsIgnoreCase(name2))) || (str.equalsIgnoreCase(name2))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"str","name2":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtBinaryOperatorImpl","sourcecode":"((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))"},"failures":[],"tindex":"6d32577a-2eb6-11e6-b4db-a193fa19f5ee","method":{"position":"org.apache.commons.codec.language.Soundex:258","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str.equals(\"\")) {\n        {\n            if (((str == null) || (str.equalsIgnoreCase(name2))) || (str.equalsIgnoreCase(name2))) {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n                    if ((str.length()) == 0) {\n                        return str;\n                    } \n                    final char[] char[] = new char[]{ '0' , '0' , '0' , '0' };\n                    char char;\n                    char char;\n                    int int = 1;\n                    int int = 1;\n                    out[0] = str.charAt(0);\n                    last = getMappingCode(str, 0);\n                    while ((incount < (str.length())) && (count < (out.int))) {\n                        mapped = getMappingCode(str, (incount++));\n                        if (mapped != 0) {\n                            if ((mapped != '0') && (mapped != last)) {\n                                out[(count++)] = mapped;\n                            } \n                            last = mapped;\n                        } \n                    }\n                    return new java.lang.String(out);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"str","name2":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"6d327e8b-2eb6-11e6-b4db-8bca9e46ac01","method":{"position":"org.apache.commons.codec.language.bm.Rule:298","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.codec.language.bm.Rule> getInstance(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final org.apache.commons.codec.language.bm.Languages.LanguageSet langs) {\n    if (nameType == nameType) {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, langs);\n            final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            for (final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> : ruleMap.values()) {\n                allRules.addAll(rules);\n            }\n            return allRules;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:344","type":"CtBinaryOperatorImpl","sourcecode":"(index > 0) && (index < (string.length()))"},"failures":[],"tindex":"6d32a59c-2eb6-11e6-b4db-051c3fa15731","method":{"position":"org.apache.commons.codec.digest.B64:54","type":"CtMethodImpl","sourcecode":"static void b64from24bit(final byte b2, final byte b1, final byte b0, final int outLen, final java.lang.StringBuilder buffer) {\n    if ((outLen > 0) && (index < (buffer.length()))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255);\n            int int = outLen;\n            while ((n--) > 0) {\n                buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)));\n                w >>= 6;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"buffer","index":"outLen"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:386","type":"CtBinaryOperatorImpl","sourcecode":"(i % 7) != 0"},"failures":[49,50,51,52,53],"tindex":"6d32a59d-2eb6-11e6-b4db-0348719b1a84","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:220","type":"CtMethodImpl","sourcecode":"private static int encodeByte(final int b, final boolean encode, final java.io.ByteArrayOutputStream buffer) {\n    if ((b % 7) != 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (encode) {\n                return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n            } else {\n                buffer.write(b);\n                return 1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"b"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[54,55],"tindex":"6d32a59e-2eb6-11e6-b4db-8f07cb0f299c","method":{"position":"org.apache.commons.codec.digest.DigestUtils:295","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Hex(final byte[] data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[56,57,58,59,60,61,10,15,16,62,63,64,65,18,66],"tindex":"6d32ccaf-2eb6-11e6-b4db-a396800075a3","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:133","type":"CtMethodImpl","sourcecode":"private static java.lang.String sha2Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String saltPrefix, final int blocksize, final java.lang.String algorithm) {\n    if (((algorithm.length()) == 1) || ((algorithm.length()) == 1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyBytes == null) {\n                {\n                    final int int = keyBytes.int;\n                    int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int;\n                    boolean boolean = false;\n                    if (salt == null) {\n                        throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n                    } \n                    final java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.util.regex.Pattern.matcher(salt);\n                    if ((m == null) || (!(m.find()))) {\n                        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n                    } \n                    if ((m.group(3)) != null) {\n                        rounds = java.lang.Integer.parseInt(m.group(3));\n                        rounds = java.lang.Math.max(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, java.lang.Math.min(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, rounds));\n                        roundsCustom = true;\n                    } \n                    final java.lang.String java.lang.String = m.group(4);\n                    final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                    final int int = saltBytes.int;\n                    java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    ctx.update(keyBytes);\n                    ctx.update(saltBytes);\n                    java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    altCtx.update(keyBytes);\n                    altCtx.update(saltBytes);\n                    altCtx.update(keyBytes);\n                    byte[] byte[] = altCtx.digest();\n                    int int = keyBytes.int;\n                    while (cnt > blocksize) {\n                        ctx.update(altResult, 0, blocksize);\n                        cnt -= blocksize;\n                    }\n                    ctx.update(altResult, 0, cnt);\n                    cnt = keyBytes.int;\n                    while (cnt > 0) {\n                        if ((cnt & 1) != 0) {\n                            ctx.update(altResult, 0, blocksize);\n                        } else {\n                            ctx.update(keyBytes);\n                        }\n                        cnt >>= 1;\n                    }\n                    altResult = ctx.digest();\n                    altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    for (int int = 1 ; i <= keyLen ; i++) {\n                        altCtx.update(keyBytes);\n                    }\n                    byte[] byte[] = altCtx.digest();\n                    final byte[] byte[] = new byte[keyLen];\n                    int int = 0;\n                    while (cp < (keyLen - blocksize)) {\n                        java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n                        cp += blocksize;\n                    }\n                    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, (keyLen - cp));\n                    altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n                        altCtx.update(saltBytes);\n                    }\n                    tempResult = altCtx.digest();\n                    final byte[] byte[] = new byte[saltLen];\n                    cp = 0;\n                    while (cp < (saltLen - blocksize)) {\n                        java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n                        cp += blocksize;\n                    }\n                    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp));\n                    for (int int = 0 ; i <= (rounds - 1) ; i++) {\n                        ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                        if ((i & 1) != 0) {\n                            ctx.update(pBytes, 0, keyLen);\n                        } else {\n                            ctx.update(altResult, 0, blocksize);\n                        }\n                        if ((i % 3) != 0) {\n                            ctx.update(sBytes, 0, saltLen);\n                        } \n                        if ((i % 7) != 0) {\n                            ctx.update(pBytes, 0, keyLen);\n                        } \n                        if ((i & 1) != 0) {\n                            ctx.update(altResult, 0, blocksize);\n                        } else {\n                            ctx.update(pBytes, 0, keyLen);\n                        }\n                        altResult = ctx.digest();\n                    }\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(saltPrefix);\n                    if (roundsCustom) {\n                        buffer.append(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String);\n                        buffer.append(rounds);\n                        buffer.append(\"$\");\n                    } \n                    buffer.append(saltString);\n                    buffer.append(\"$\");\n                    if (blocksize == 32) {\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer);\n                    } else {\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer);\n                    }\n                    java.util.Arrays.fill(tempResult, ((byte)(0)));\n                    java.util.Arrays.fill(pBytes, ((byte)(0)));\n                    java.util.Arrays.fill(sBytes, ((byte)(0)));\n                    ctx.reset();\n                    altCtx.reset();\n                    java.util.Arrays.fill(keyBytes, ((byte)(0)));\n                    java.util.Arrays.fill(saltBytes, ((byte)(0)));\n                    return buffer.toString();\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"keyBytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:214","type":"CtBinaryOperatorImpl","sourcecode":"((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name1))"},"failures":[],"tindex":"6d331ad0-2eb6-11e6-b4db-f15e34b8edbd","method":{"position":"org.apache.commons.codec.net.QCodec:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (((obj == null) || (obj.equalsIgnoreCase(name1))) || (obj.equalsIgnoreCase(name1))) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"obj","name1":"obj","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"obj"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:134","type":"CtBinaryOperatorImpl","sourcecode":"curr == 'M'"},"failures":[67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"tindex":"6d3341e1-2eb6-11e6-b4db-8b976f08988e","method":{"position":"org.apache.commons.codec.language.Nysiis:118","type":"CtMethodImpl","sourcecode":"private static char[] transcodeRemaining(final char prev, final char curr, final char next, final char aNext) {\n    if (curr == 'M') {\n        {\n            if ((curr == 'E') && (next == 'V')) {\n                return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n            } \n            if (org.apache.commons.codec.language.Nysiis.isVowel(curr)) {\n                return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n            } \n            if (curr == 'Q') {\n                return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n            } else if (curr == 'Z') {\n                return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n            } else if (curr == 'M') {\n                return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n            } \n            if (curr == 'K') {\n                if (next == 'N') {\n                    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n                } else {\n                    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n                }\n            } \n            if (((curr == 'S') && (next == 'C')) && (aNext == 'H')) {\n                return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n            } \n            if ((curr == 'P') && (next == 'H')) {\n                return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n            } \n            if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n                return new char[]{ prev };\n            } \n            if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n                return new char[]{ prev };\n            } \n            return new char[]{ curr };\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"curr":"curr"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[25,26,27,28,29,30,33,34,35,38,39,0,1,43,2,47],"tindex":"6d3341e2-2eb6-11e6-b4db-8175533368bc","method":{"position":"org.apache.commons.codec.language.bm.Lang:214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Languages.LanguageSet guessLanguages(final java.lang.String input) {\n    if (input == null) {\n        {\n            final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(org.apache.commons.codec.language.bm.Lang.this.org.apache.commons.codec.language.bm.Languages.getLanguages());\n            for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n                if (rule.matches(text)) {\n                    if (rule.boolean) {\n                        langs.retainAll(rule.java.util.Set<java.lang.String>);\n                    } else {\n                        langs.removeAll(rule.java.util.Set<java.lang.String>);\n                    }\n                } \n            }\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs);\n            return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[86,87,88],"tindex":"6d3368f3-2eb6-11e6-b4db-f10c554bb305","method":{"position":"org.apache.commons.codec.net.BCodec:100","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.Base64.decodeBase64(bytes);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"6d339004-2eb6-11e6-b4db-9193bb04790b","method":{"position":"org.apache.commons.codec.binary.Base64:331","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid encode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (in == in) {\n        {\n            if (context.boolean) {\n                return ;\n            } \n            if (inAvail < 0) {\n                context.boolean = true;\n                if ((0 == (context.int)) && ((int) == 0)) {\n                    return ;\n                } \n                final byte[] byte[] = ensureBufferSize(int, context);\n                final int int = context.int;\n                switch (context.int) {\n                    case 0 :\n                        break;\n                    case 1 :\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                            buffer[((context.int)++)] = byte;\n                            buffer[((context.int)++)] = byte;\n                        } \n                        break;\n                    case 2 :\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 10) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                            buffer[((context.int)++)] = byte;\n                        } \n                        break;\n                    default :\n                        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                }\n                context.int += (context.int) - savedPos;\n                if (((int) > 0) && ((context.int) > 0)) {\n                    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                    context.int += byte[].int;\n                } \n            } else {\n                for (int int = 0 ; i < inAvail ; i++) {\n                    final byte[] byte[] = ensureBufferSize(int, context);\n                    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                    int int = in[(inPos++)];\n                    if (b < 0) {\n                        b += 256;\n                    } \n                    context.int = ((context.int) << 8) + b;\n                    if (0 == (context.int)) {\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n                        if (((int) > 0) && ((int) <= (context.int))) {\n                            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                            context.int += byte[].int;\n                            context.int = 0;\n                        } \n                    } \n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"in","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"in"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[25,26,27,28,29,30,33,34,35,36,37,38,39,0,1,43,2,47],"tindex":"6d33b715-2eb6-11e6-b4db-bf4fb41b7930","method":{"position":"org.apache.commons.codec.language.bm.Rule:264","type":"CtMethodImpl","sourcecode":"private static java.util.Scanner createScanner(final java.lang.String lang) {\n    if (lang.equalsIgnoreCase(lang)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.String java.lang.String = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang);\n            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName);\n            if (rulesIS == null) {\n                throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n            } \n            return new java.util.Scanner(rulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"lang","name1":"lang"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:70","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX)"},"failures":[20],"tindex":"6d33de26-2eb6-11e6-b4db-27e6782717e1","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:160","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes, final java.lang.String salt) {\n    if (salt.startsWith(salt)) {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"salt"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"6d33de27-2eb6-11e6-b4db-2d8a9629fdc3","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:409","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == bytes) {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"bytes","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"bytes"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:312","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof byte[]"},"failures":[89],"tindex":"6d340538-2eb6-11e6-b4db-33c3271e3e08","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:376","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj instanceof byte[]) {\n        {\n            if (obj instanceof byte[]) {\n                return decode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:486","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[90,91],"tindex":"6d340539-2eb6-11e6-b4db-a5aea312a5af","method":{"position":"org.apache.commons.codec.digest.HmacUtils:245","type":"CtMethodImpl","sourcecode":"public static byte[] hmacMd5(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacMd5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[92,93,94,95,96,97],"tindex":"6d34053a-2eb6-11e6-b4db-ed25e43eda2e","method":{"position":"org.apache.commons.codec.net.URLCodec:269","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isWhitespace(ch)"},"failures":[98],"tindex":"6d34053b-2eb6-11e6-b4db-eb81a422fbe0","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:299","type":"CtMethodImpl","sourcecode":"private static boolean arrayContains(final char[] arr, final char key) {\n    if (java.lang.Character.isWhitespace(key)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final char char : arr) {\n                if (element == key) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[99],"tindex":"6d342c4c-2eb6-11e6-b4db-3fc22b1d9423","method":{"position":"org.apache.commons.codec.language.Metaphone:92","type":"CtMethodImpl","sourcecode":"public java.lang.String metaphone(final java.lang.String txt) {\n    if (txt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            int int;\n            if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n                return \"\";\n            } \n            if (txtLength == 1) {\n                return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            } \n            final char[] char[] = txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale).toCharArray();\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10);\n            switch (inwd[0]) {\n                case 'K' :\n                case 'G' :\n                case 'P' :\n                    if ((inwd[1]) == 'N') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                    } else {\n                        local.append(inwd);\n                    }\n                    break;\n                case 'A' :\n                    if ((inwd[1]) == 'E') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                    } else {\n                        local.append(inwd);\n                    }\n                    break;\n                case 'W' :\n                    if ((inwd[1]) == 'R') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                        break;\n                    } \n                    if ((inwd[1]) == 'H') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                        local.setCharAt(0, 'W');\n                    } else {\n                        local.append(inwd);\n                    }\n                    break;\n                case 'X' :\n                    inwd[0] = 'S';\n                    local.append(inwd);\n                    break;\n                default :\n                    local.append(inwd);\n            }\n            final int int = local.length();\n            int int = 0;\n            while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n                final char char = local.charAt(n);\n                if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n                    n++;\n                } else {\n                    switch (symb) {\n                        case 'A' :\n                        case 'E' :\n                        case 'I' :\n                        case 'O' :\n                        case 'U' :\n                            if (n == 0) {\n                                code.append(symb);\n                            } \n                            break;\n                        case 'B' :\n                            if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                                break;\n                            } \n                            code.append(symb);\n                            break;\n                        case 'C' :\n                            if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                break;\n                            } \n                            if (regionMatch(local, n, \"CIA\")) {\n                                code.append('X');\n                                break;\n                            } \n                            if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                code.append('S');\n                                break;\n                            } \n                            if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                                code.append('K');\n                                break;\n                            } \n                            if (isNextChar(local, n, 'H')) {\n                                if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                                    code.append('K');\n                                } else {\n                                    code.append('X');\n                                }\n                            } else {\n                                code.append('K');\n                            }\n                            break;\n                        case 'D' :\n                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                                code.append('J');\n                                n += 2;\n                            } else {\n                                code.append('T');\n                            }\n                            break;\n                        case 'G' :\n                            if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                                break;\n                            } \n                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                                break;\n                            } \n                            if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                                break;\n                            } \n                            if (isPreviousChar(local, n, 'G')) {\n                                hard = true;\n                            } else {\n                                hard = false;\n                            }\n                            if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                                code.append('J');\n                            } else {\n                                code.append('K');\n                            }\n                            break;\n                        case 'H' :\n                            if (isLastChar(wdsz, n)) {\n                                break;\n                            } \n                            if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                                break;\n                            } \n                            if (isVowel(local, (n + 1))) {\n                                code.append('H');\n                            } \n                            break;\n                        case 'F' :\n                        case 'J' :\n                        case 'L' :\n                        case 'M' :\n                        case 'N' :\n                        case 'R' :\n                            code.append(symb);\n                            break;\n                        case 'K' :\n                            if (n > 0) {\n                                if (!(isPreviousChar(local, n, 'C'))) {\n                                    code.append(symb);\n                                } \n                            } else {\n                                code.append(symb);\n                            }\n                            break;\n                        case 'P' :\n                            if (isNextChar(local, n, 'H')) {\n                                code.append('F');\n                            } else {\n                                code.append(symb);\n                            }\n                            break;\n                        case 'Q' :\n                            code.append('K');\n                            break;\n                        case 'S' :\n                            if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                                code.append('X');\n                            } else {\n                                code.append('S');\n                            }\n                            break;\n                        case 'T' :\n                            if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                                code.append('X');\n                                break;\n                            } \n                            if (regionMatch(local, n, \"TCH\")) {\n                                break;\n                            } \n                            if (regionMatch(local, n, \"TH\")) {\n                                code.append('0');\n                            } else {\n                                code.append('T');\n                            }\n                            break;\n                        case 'V' :\n                            code.append('F');\n                            break;\n                        case 'W' :\n                        case 'Y' :\n                            if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                                code.append(symb);\n                            } \n                            break;\n                        case 'X' :\n                            code.append('K');\n                            code.append('S');\n                            break;\n                        case 'Z' :\n                            code.append('S');\n                            break;\n                        default :\n                            break;\n                    }\n                    n++;\n                }\n                if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n                    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n                } \n            }\n            return code.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"txt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:366","type":"CtBinaryOperatorImpl","sourcecode":"(chr == 'S') || (chr == 'Z')"},"failures":[],"tindex":"6d347a6d-2eb6-11e6-b4db-85cfd0883cad","method":{"position":"org.apache.commons.codec.language.Nysiis:100","type":"CtMethodImpl","sourcecode":"private static boolean isVowel(final char c) {\n    if ((c == 'S') || (chr == 'Z')) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((((c == 'A') || (c == 'E')) || (c == 'I')) || (c == 'O')) || (c == 'U');\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"c"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[11,13,14],"tindex":"6d34a17e-2eb6-11e6-b4db-3166b9aeac6b","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:71","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final byte[] keyBytes) {\n    if (keyBytes == null) {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"keyBytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtBinaryOperatorImpl","sourcecode":"((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)"},"failures":[100,101,102,103,104,105],"tindex":"6d34a17f-2eb6-11e6-b4db-bbc7fee2bcd4","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:987","type":"CtMethodImpl","sourcecode":"public void appendAlternate(final java.lang.String value) {\n    if (((value.length()) != 1) || ((value.length()) != 1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n            if ((value.length()) <= addChars) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } else {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"leftCharacter":"value","rightCharacter":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtBinaryOperatorImpl","sourcecode":"(!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))"},"failures":[],"tindex":"6d34a180-2eb6-11e6-b4db-15de726fcca5","method":{"position":"org.apache.commons.codec.binary.StringUtils:216","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Le(final java.lang.String string) {\n    if (string == null) {\n        {\n            if ((!(string.startsWith(string))) || (!(text.endsWith(string)))) {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.net.RFC1522Codec.POSTFIX":"string","org.apache.commons.codec.net.RFC1522Codec.PREFIX":"string","text":"string"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[86,87,88,106,107,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183],"tindex":"6d34c891-2eb6-11e6-b4db-f1318654fe6f","method":{"position":"org.apache.commons.codec.binary.Base64:780","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected boolean isInAlphabet(final byte octet) {\n    if (octet == octet) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((octet >= 0) && (octet < (byte[].int))) && ((byte[][octet]) != (-1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"octet","pad":"octet"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[184],"tindex":"6d34c892-2eb6-11e6-b4db-93546afe5a72","method":{"position":"org.apache.commons.codec.digest.HmacUtils:459","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (valueToDigest.startsWith(valueToDigest)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"valueToDigest","line":"valueToDigest"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:575","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"6d34efa3-2eb6-11e6-b4db-9337d115483f","method":{"position":"org.apache.commons.codec.language.bm.Rule:248","type":"CtMethodImpl","sourcecode":"private static java.lang.String createResourceName(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_%s_%s.txt\", nameType.getName(), rt.getName(), lang);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"lang"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:176","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[57,58,59,60,61,16],"tindex":"6d34efa4-2eb6-11e6-b4db-71b0d88dbd22","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:539","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        {\n            if (salt == null) {\n                salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n            } \n            return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"salt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:392","type":"CtBinaryOperatorImpl","sourcecode":"(body.startsWith(\"|\")) || (body.endsWith(\"|\"))"},"failures":[],"tindex":"6d34efa5-2eb6-11e6-b4db-43de701121d5","method":{"position":"org.apache.commons.codec.language.bm.Rule:353","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if ((lang.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.get(nameType).get(rt).get(lang);\n            if (rules == null) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n            } \n            return rules;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"body":"lang"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6d3516b6-2eb6-11e6-b4db-414ef600edf8","method":{"position":"org.apache.commons.codec.binary.Base64:720","type":"CtMethodImpl","sourcecode":"public static java.math.BigInteger decodeInteger(final byte[] pArray) {\n    if (pArray == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (pArray == pArray) {\n                {\n                    return new java.math.BigInteger(1 , org.apache.commons.codec.binary.Base64.decodeBase64(pArray));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"6d3516b7-2eb6-11e6-b4db-adb8969258fd","method":{"position":"org.apache.commons.codec.digest.HmacUtils:526","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha384(final byte[] key, final byte[] valueToDigest) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(key)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"key"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"6d3516b8-2eb6-11e6-b4db-3d07d1fcd678","method":{"position":"org.apache.commons.codec.binary.StringUtils:198","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Be(final java.lang.String string) {\n    if ((string.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (string.startsWith(string)) {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"string","line":"string"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:77","type":"CtBinaryOperatorImpl","sourcecode":"(cs1 instanceof java.lang.String) && (cs2 instanceof java.lang.String)"},"failures":[185,186],"tindex":"6d353dc9-2eb6-11e6-b4db-fdafca8fe135","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:97","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object raw) throws org.apache.commons.codec.EncoderException {\n    if ((raw.length()) > 1) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if ((raw instanceof java.lang.String) && (raw instanceof java.lang.String)) {\n                {\n                    if (!(raw instanceof byte[])) {\n                        throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n                    } \n                    return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs1":"raw","cs2":"raw"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:112","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'N'"},"failures":[187,188,189,190],"tindex":"6d353dca-2eb6-11e6-b4db-5975dd76b840","method":{"position":"org.apache.commons.codec.binary.Hex:77","type":"CtMethodImpl","sourcecode":"public static byte[] decodeHex(final char[] data) throws org.apache.commons.codec.DecoderException {\n    if ((data[1]) == 'H') {\n        {\n            if ((data[1]) == 'N') {\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    final int int = data.int;\n                    if ((len & 1) != 0) {\n                        throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n                    } \n                    final byte[] byte[] = new byte[len >> 1];\n                    for (int int = 0, int int = 0 ; j < len ; i++) {\n                        int int = (org.apache.commons.codec.binary.Hex.toDigit(data[j], j)) << 4;\n                        j++;\n                        f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j));\n                        j++;\n                        out[i] = ((byte)(f & 255));\n                    }\n                    return out;\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[25,27,28,29,30,33,34,38,39,0,1,43,47],"tindex":"6d3564db-2eb6-11e6-b4db-dbcf7256f89c","method":{"position":"org.apache.commons.codec.language.bm.Rule:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[18],"tindex":"6d3564dc-2eb6-11e6-b4db-f1e1be593466","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:82","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Crypt(final byte[] keyBytes) {\n    if (keyBytes != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(keyBytes, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"keyBytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:379","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.String"},"failures":[],"tindex":"6d3564dd-2eb6-11e6-b4db-f7d4e89cddd7","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:109","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final java.lang.Object encode(final java.lang.Object pObject) throws org.apache.commons.codec.EncoderException {\n    if ((pObject == null) || (!(m.find()))) {\n        {\n            if (pObject instanceof java.lang.String) {\n                {\n                    if (!(pObject instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\");\n                    } \n                    return encode(((java.lang.String)(pObject)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"pObject"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[191,192,193,194,195,49,196,50,51,52,197,198,53,199,200,201,202,203],"tindex":"6d358bee-2eb6-11e6-b4db-b74dc5fda4b4","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:273","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeQuotedPrintable(java.util.BitSet printable, final byte[] bytes, boolean strict) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            if (printable == null) {\n                printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            if (strict) {\n                int int = 1;\n                for (int int = 0 ; i < ((bytes.int) - 3) ; i++) {\n                    int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n                    if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n                        pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n                    } else {\n                        org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n                        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        pos = 1;\n                    }\n                }\n                int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.int) - 3), bytes);\n                boolean boolean = (!(printable.get(b))) || ((org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)) && (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 5)));\n                pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n                if (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 2)) {\n                    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                } \n                for (int int = (bytes.int) - 2 ; i < (bytes.int) ; i++) {\n                    b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n                    encode = (!(printable.get(b))) || ((i > ((bytes.int) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)));\n                    org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n                }\n            } else {\n                for (final byte byte : bytes) {\n                    int int = c;\n                    if (b < 0) {\n                        b = 256 + b;\n                    } \n                    if (printable.get(b)) {\n                        buffer.write(b);\n                    } else {\n                        org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n                    }\n                }\n            }\n            return buffer.toByteArray();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:368","type":"CtBinaryOperatorImpl","sourcecode":"(i & 1) != 0"},"failures":[100,101,102,103,104,105],"tindex":"6d35b2ff-2eb6-11e6-b4db-f5aadf179403","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:550","type":"CtMethodImpl","sourcecode":"private int handleL(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((index & 1) != 0) {\n        {\n            if ((charAt(value, (index + 1))) == 'L') {\n                if (conditionL0(value, index)) {\n                    result.appendPrimary('L');\n                } else {\n                    result.append('L');\n                }\n                index += 2;\n            } else {\n                index++;\n                result.append('L');\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:325","type":"CtInvocationImpl","sourcecode":"name1LtREnd.equals(name2RtLEnd)"},"failures":[],"tindex":"6d35b300-2eb6-11e6-b4db-f3b6c5ee7a78","method":{"position":"org.apache.commons.codec.language.bm.Lang:129","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang loadFromResource(final java.lang.String languageRulesResourceName, final org.apache.commons.codec.language.bm.Languages languages) {\n    if (languageRulesResourceName.equals(languageRulesResourceName)) {\n        {\n            final java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Lang.LangRule>();\n            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.Class.getClassLoader().getResourceAsStream(languageRulesResourceName);\n            if (lRulesIS == null) {\n                throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)));\n            } \n            final java.util.Scanner java.util.Scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n            try {\n                boolean boolean = false;\n                while (scanner.hasNextLine()) {\n                    final java.lang.String java.lang.String = scanner.nextLine();\n                    java.lang.String java.lang.String = rawLine;\n                    if (inExtendedComment) {\n                        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = false;\n                        } \n                    } else {\n                        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = true;\n                        } else {\n                            final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                            if (cmtI >= 0) {\n                                line = line.substring(0, cmtI);\n                            } \n                            line = line.trim();\n                            if ((line.length()) == 0) {\n                                continue;\n                            } \n                            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                            if ((parts.int) != 3) {\n                                throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                            } \n                            final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n                            final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n                            final boolean boolean = parts[2].equals(\"true\");\n                            rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n                        }\n                    }\n                }\n            } finally {\n                scanner.close();\n            }\n            return new org.apache.commons.codec.language.bm.Lang(rules , languages);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2RtLEnd":"languageRulesResourceName","name1LtREnd":"languageRulesResourceName"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtInvocationImpl","sourcecode":"target.equals(element)"},"failures":[25,26,27,28,204,205,29,30,31,32,33,34,35,36,37,38,39,40,41,0,1,42,43,44,45,46,2,47],"tindex":"6d35da11-2eb6-11e6-b4db-d5b742836836","method":{"position":"org.apache.commons.codec.language.bm.Languages:169","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Languages getInstance(final java.lang.String languagesResourceName) {\n    if (languagesResourceName.equals(languagesResourceName)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>();\n            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(languagesResourceName);\n            if (langIS == null) {\n                throw new java.lang.IllegalArgumentException((\"Unable to resolve required resource: \" + languagesResourceName));\n            } \n            final java.util.Scanner java.util.Scanner = new java.util.Scanner(langIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n            try {\n                boolean boolean = false;\n                while (lsScanner.hasNextLine()) {\n                    final java.lang.String java.lang.String = lsScanner.nextLine().trim();\n                    if (inExtendedComment) {\n                        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = false;\n                        } \n                    } else {\n                        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = true;\n                        } else if ((line.length()) > 0) {\n                            ls.add(line);\n                        } \n                    }\n                }\n            } finally {\n                lsScanner.close();\n            }\n            return new org.apache.commons.codec.language.bm.Languages(java.util.Collections.unmodifiableSet(ls));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"languagesResourceName","element":"languagesResourceName"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6d360122-2eb6-11e6-b4db-cdccc6963e4c","method":{"position":"org.apache.commons.codec.language.Caverphone:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.Caverphone.this.caverphone(((java.lang.String)(obj)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"obj"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[17,18],"tindex":"6d360123-2eb6-11e6-b4db-4f1c93305132","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:101","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (salt == null) {\n                salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n            } \n            return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"salt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[90,91],"tindex":"6d360124-2eb6-11e6-b4db-0f8de4ed1c71","method":{"position":"org.apache.commons.codec.digest.HmacUtils:230","type":"CtMethodImpl","sourcecode":"public static byte[] hmacMd5(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (valueToDigest == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key), valueToDigest).doFinal();\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:130","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'H'"},"failures":[],"tindex":"6d362835-2eb6-11e6-b4db-494e68099f87","method":{"position":"org.apache.commons.codec.binary.Hex:77","type":"CtMethodImpl","sourcecode":"public static byte[] decodeHex(final char[] data) throws org.apache.commons.codec.DecoderException {\n    if ((data[1]) == 'H') {\n        {\n            if ((data[1]) == 'N') {\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    final int int = data.int;\n                    if ((len & 1) != 0) {\n                        throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n                    } \n                    final byte[] byte[] = new byte[len >> 1];\n                    for (int int = 0, int int = 0 ; j < len ; i++) {\n                        int int = (org.apache.commons.codec.binary.Hex.toDigit(data[j], j)) << 4;\n                        j++;\n                        f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j));\n                        j++;\n                        out[i] = ((byte)(f & 255));\n                    }\n                    return out;\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:354","type":"CtBinaryOperatorImpl","sourcecode":"(chr == 'B') || ((chr == 'P') && (nextChar != 'H'))"},"failures":[],"tindex":"6d362836-2eb6-11e6-b4db-31aa93248d7e","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:253","type":"CtMethodImpl","sourcecode":"public void addLeft(final char ch) {\n    if ((ch == 'B') || ((chr == 'P') && (ch != 'H'))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            (int)++;\n            char[][getNextPos()] = ch;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nextChar":"ch","chr":"ch"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"6d362837-2eb6-11e6-b4db-fb4ef27a3cfb","method":{"position":"org.apache.commons.codec.digest.HmacUtils:260","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final byte[] key, final byte[] valueToDigest) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(key)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"key"},"type":"special","returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtInvocationImpl","sourcecode":"ph.startsWith(\"(\")"},"failures":[],"tindex":"6d364f48-2eb6-11e6-b4db-d9dfcdcd6e4b","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:133","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj.startsWith(\"(\")) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj instanceof byte[]) {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n                    } \n                    return soundex(((java.lang.String)(obj)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"6d364f49-2eb6-11e6-b4db-6718a75f30c3","method":{"position":"org.apache.commons.codec.digest.DigestUtils:437","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final java.lang.String data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:72","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX)"},"failures":[],"tindex":"6d364f4a-2eb6-11e6-b4db-fddcbe69c915","method":{"position":"org.apache.commons.codec.language.bm.Rule:571","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input.startsWith(input)) {\n        {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"input","org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX":"input"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:367","type":"CtBinaryOperatorImpl","sourcecode":"open >= 0"},"failures":[206,100,101,102,103,104,105,207],"tindex":"6d364f4b-2eb6-11e6-b4db-f3d80ea80b1f","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:582","type":"CtMethodImpl","sourcecode":"private int handleR(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index, final boolean slavoGermanic) {\n    if (index >= 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((((index == ((value.length()) - 1)) && (!slavoGermanic)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"IE\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 2, \"ME\", \"MA\")))) {\n                result.appendAlternate('R');\n            } else {\n                result.append('R');\n            }\n            return (charAt(value, (index + 1))) == 'R' ? index + 2 : index + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"open":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:112","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'N'"},"failures":[],"tindex":"6d36765c-2eb6-11e6-b4db-3fba1993f589","method":{"position":"org.apache.commons.codec.net.QCodec:309","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if ((obj[1]) == 'N') {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be decoded using Q codec\"));\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"obj"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[],"tindex":"6d36765d-2eb6-11e6-b4db-9d491bbdae23","method":{"position":"org.apache.commons.codec.language.Soundex:258","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str.equals(\"\")) {\n        {\n            if (((str == null) || (str.equalsIgnoreCase(name2))) || (str.equalsIgnoreCase(name2))) {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n                    if ((str.length()) == 0) {\n                        return str;\n                    } \n                    final char[] char[] = new char[]{ '0' , '0' , '0' , '0' };\n                    char char;\n                    char char;\n                    int int = 1;\n                    int int = 1;\n                    out[0] = str.charAt(0);\n                    last = getMappingCode(str, 0);\n                    while ((incount < (str.length())) && (count < (out.int))) {\n                        mapped = getMappingCode(str, (incount++));\n                        if (mapped != 0) {\n                            if ((mapped != '0') && (mapped != last)) {\n                                out[(count++)] = mapped;\n                            } \n                            last = mapped;\n                        } \n                    }\n                    return new java.lang.String(out);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"6d369d6e-2eb6-11e6-b4db-63792d817226","method":{"position":"org.apache.commons.codec.digest.HmacUtils:688","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final byte[] key, final byte[] valueToDigest) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(valueToDigest)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"valueToDigest"},"type":"special","returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Nysiis:292","type":"CtBinaryOperatorImpl","sourcecode":"(key.length()) > 1"},"failures":[],"tindex":"6d369d6f-2eb6-11e6-b4db-e186b76bab37","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:97","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object raw) throws org.apache.commons.codec.EncoderException {\n    if ((raw.length()) > 1) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if ((raw instanceof java.lang.String) && (raw instanceof java.lang.String)) {\n                {\n                    if (!(raw instanceof byte[])) {\n                        throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n                    } \n                    return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"raw"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[],"tindex":"6d36c480-2eb6-11e6-b4db-a3b31428f6ef","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if (source.endsWith(source)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (source == null) {\n                {\n                    if (!(source instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\");\n                    } \n                    return encode(((java.lang.String)(source)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:447","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"6d36c481-2eb6-11e6-b4db-57fd679cebfe","method":{"position":"org.apache.commons.codec.language.bm.Rule:402","type":"CtMethodImpl","sourcecode":"private static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> parseRules(final java.util.Scanner scanner, final java.lang.String location) {\n    if (location == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = new java.util.HashMap<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>();\n            int int = 0;\n            boolean boolean = false;\n            while (scanner.hasNextLine()) {\n                currentLine++;\n                final java.lang.String java.lang.String = scanner.nextLine();\n                java.lang.String java.lang.String = rawLine;\n                if (inMultilineComment) {\n                    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                        inMultilineComment = false;\n                    } \n                } else {\n                    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                        inMultilineComment = true;\n                    } else {\n                        final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                        if (cmtI >= 0) {\n                            line = line.substring(0, cmtI);\n                        } \n                        line = line.trim();\n                        if ((line.length()) == 0) {\n                            continue;\n                        } \n                        if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                            final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n                            if (incl.contains(\" \")) {\n                                throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n                            } else {\n                                lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n                            }\n                        } else {\n                            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                            if ((parts.int) != 4) {\n                                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                            } else {\n                                try {\n                                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                                    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                                    final int int = currentLine;\n                                    final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                                        private final int myLine = cLine;\n\n                                        private final java.lang.String loc = location;\n\n                                        @java.lang.Override\n                                        public java.lang.String toString() {\n                                            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                                            sb.append(\"Rule\");\n                                            sb.append(\"{line=\").append(int);\n                                            sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                                            sb.append(\", pat='\").append(pat).append('\\'');\n                                            sb.append(\", lcon='\").append(lCon).append('\\'');\n                                            sb.append(\", rcon='\").append(rCon).append('\\'');\n                                            sb.append('}');\n                                            return sb.toString();\n                                        }\n                                    };\n                                    final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                                    java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                                    if (rules == null) {\n                                        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                                        lines.put(patternKey, rules);\n                                    } \n                                    rules.add(r);\n                                } catch (final java.lang.IllegalArgumentException e) {\n                                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return lines;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"location"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:317","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))"},"failures":[],"tindex":"6d3712a2-2eb6-11e6-b4db-6f68168eacb8","method":{"position":"org.apache.commons.codec.language.bm.Rule:698","type":"CtMethodImpl","sourcecode":"public boolean patternAndContextMatches(final java.lang.CharSequence input, final int i) {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.contains(input, (i + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (i < 0) {\n                throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n            } \n            final int int = org.apache.commons.codec.language.bm.Rule.this.java.lang.String.length();\n            final int int = i + patternLength;\n            if (ipl > (input.length())) {\n                return false;\n            } \n            if (!(input.subSequence(i, ipl).equals(org.apache.commons.codec.language.bm.Rule.this.java.lang.String))) {\n                return false;\n            } else if (!(org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(ipl, input.length())))) {\n                return false;\n            } \n            return org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(0, i));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"i","value":"input"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtBinaryOperatorImpl","sourcecode":"((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))"},"failures":[],"tindex":"6d3739b3-2eb6-11e6-b4db-9d8e9336fb27","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:276","type":"CtMethodImpl","sourcecode":"boolean isVowel(final java.lang.String letter) {\n    if (letter.endsWith(letter)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((letter == null) || (letter.equalsIgnoreCase(name2))) || (letter.equalsIgnoreCase(name2))) {\n                {\n                    return ((((letter.equalsIgnoreCase(\"E\")) || (letter.equalsIgnoreCase(\"A\"))) || (letter.equalsIgnoreCase(\"O\"))) || (letter.equalsIgnoreCase(\"I\"))) || (letter.equalsIgnoreCase(\"U\"));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"letter","name2":"letter","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"letter"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:312","type":"CtBinaryOperatorImpl","sourcecode":"pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH) - 2)"},"failures":[179,208],"tindex":"6d3739b4-2eb6-11e6-b4db-f782bf0dd494","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final int i) throws java.io.IOException {\n    if (i > (i - 2)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            byte[][0] = ((byte)(i));\n            write(byte[], 0, 1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"i","org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH":"i"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:119","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'E'"},"failures":[209,210,211],"tindex":"6d3739b5-2eb6-11e6-b4db-07d7656a9f56","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:171","type":"CtMethodImpl","sourcecode":"public static byte[] fromAscii(final char[] ascii) {\n    if ((ascii[1]) == 'E') {\n        {\n            if ((ascii == null) || ((ascii.int) == 0)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            final byte[] byte[] = new byte[(ascii.int) >> 3];\n            for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if ((ascii[(jj - bits)]) == '1') {\n                        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n                    } \n                }\n            }\n            return l_raw;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"ascii"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:392","type":"CtBinaryOperatorImpl","sourcecode":"(body.startsWith(\"|\")) || (body.endsWith(\"|\"))"},"failures":[],"tindex":"6d3760c6-2eb6-11e6-b4db-c32ba8ca8fca","method":{"position":"org.apache.commons.codec.binary.StringUtils:198","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Be(final java.lang.String string) {\n    if ((string.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (string.startsWith(string)) {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"body":"string"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:144","type":"CtFieldReadImpl","sourcecode":"doEncode"},"failures":[161,177,179,183,212,208,213],"tindex":"6d3760c7-2eb6-11e6-b4db-2f64ae5250b7","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:110","type":"CtMethodImpl","sourcecode":"private void flush(final boolean propagate) throws java.io.IOException {\n    if (propagate) {\n        {\n            final int int = org.apache.commons.codec.binary.BaseNCodec.available(org.apache.commons.codec.binary.BaseNCodec.Context);\n            if (avail > 0) {\n                final byte[] byte[] = new byte[avail];\n                final int int = org.apache.commons.codec.binary.BaseNCodec.readResults(buf, 0, avail, org.apache.commons.codec.binary.BaseNCodec.Context);\n                if (c > 0) {\n                    java.io.OutputStream.write(buf, 0, c);\n                } \n            } \n            if (propagate) {\n                java.io.OutputStream.flush();\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"doEncode":"propagate"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:268","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"6d3787d8-2eb6-11e6-b4db-81c2a5e0bf0d","method":{"position":"org.apache.commons.codec.digest.HmacUtils:658","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (valueToDigest == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key), valueToDigest).doFinal();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"6d3787d9-2eb6-11e6-b4db-3f5ce98985cc","method":{"position":"org.apache.commons.codec.language.bm.Rule:600","type":"CtMethodImpl","sourcecode":"private static boolean startsWith(final java.lang.CharSequence input, final java.lang.CharSequence prefix) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((prefix.length()) > (input.length())) {\n                return false;\n            } \n            for (int int = 0 ; i < (prefix.length()) ; i++) {\n                if ((input.charAt(i)) != (prefix.charAt(i))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6d3787da-2eb6-11e6-b4db-3fbae15bdb08","method":{"position":"org.apache.commons.codec.binary.Hex:108","type":"CtMethodImpl","sourcecode":"public static char[] encodeHex(final byte[] data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHex(data, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:146","type":"CtBinaryOperatorImpl","sourcecode":"(m == null) || (!(m.find()))"},"failures":[],"tindex":"6d37aeeb-2eb6-11e6-b4db-7be73c7fd780","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:109","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final java.lang.Object encode(final java.lang.Object pObject) throws org.apache.commons.codec.EncoderException {\n    if ((pObject == null) || (!(m.find()))) {\n        {\n            if (pObject instanceof java.lang.String) {\n                {\n                    if (!(pObject instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\");\n                    } \n                    return encode(((java.lang.String)(pObject)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"pObject"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[214,215],"tindex":"6d37aeec-2eb6-11e6-b4db-b30bdca7feeb","method":{"position":"org.apache.commons.codec.binary.StringUtils:238","type":"CtMethodImpl","sourcecode":"private static java.lang.IllegalStateException newIllegalStateException(final java.lang.String charsetName, final java.io.UnsupportedEncodingException e) {\n    if (charsetName == null) {\n        {\n            return new java.lang.IllegalStateException(((charsetName + \": \") + e));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"charsetName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:218","type":"CtBinaryOperatorImpl","sourcecode":"((name1.length()) == 1) || ((name2.length()) == 1)"},"failures":[],"tindex":"6d37aeed-2eb6-11e6-b4db-c14008a4c19d","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:133","type":"CtMethodImpl","sourcecode":"private static java.lang.String sha2Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String saltPrefix, final int blocksize, final java.lang.String algorithm) {\n    if (((algorithm.length()) == 1) || ((algorithm.length()) == 1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyBytes == null) {\n                {\n                    final int int = keyBytes.int;\n                    int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int;\n                    boolean boolean = false;\n                    if (salt == null) {\n                        throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n                    } \n                    final java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.util.regex.Pattern.matcher(salt);\n                    if ((m == null) || (!(m.find()))) {\n                        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n                    } \n                    if ((m.group(3)) != null) {\n                        rounds = java.lang.Integer.parseInt(m.group(3));\n                        rounds = java.lang.Math.max(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, java.lang.Math.min(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, rounds));\n                        roundsCustom = true;\n                    } \n                    final java.lang.String java.lang.String = m.group(4);\n                    final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                    final int int = saltBytes.int;\n                    java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    ctx.update(keyBytes);\n                    ctx.update(saltBytes);\n                    java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    altCtx.update(keyBytes);\n                    altCtx.update(saltBytes);\n                    altCtx.update(keyBytes);\n                    byte[] byte[] = altCtx.digest();\n                    int int = keyBytes.int;\n                    while (cnt > blocksize) {\n                        ctx.update(altResult, 0, blocksize);\n                        cnt -= blocksize;\n                    }\n                    ctx.update(altResult, 0, cnt);\n                    cnt = keyBytes.int;\n                    while (cnt > 0) {\n                        if ((cnt & 1) != 0) {\n                            ctx.update(altResult, 0, blocksize);\n                        } else {\n                            ctx.update(keyBytes);\n                        }\n                        cnt >>= 1;\n                    }\n                    altResult = ctx.digest();\n                    altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    for (int int = 1 ; i <= keyLen ; i++) {\n                        altCtx.update(keyBytes);\n                    }\n                    byte[] byte[] = altCtx.digest();\n                    final byte[] byte[] = new byte[keyLen];\n                    int int = 0;\n                    while (cp < (keyLen - blocksize)) {\n                        java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n                        cp += blocksize;\n                    }\n                    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, (keyLen - cp));\n                    altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n                        altCtx.update(saltBytes);\n                    }\n                    tempResult = altCtx.digest();\n                    final byte[] byte[] = new byte[saltLen];\n                    cp = 0;\n                    while (cp < (saltLen - blocksize)) {\n                        java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n                        cp += blocksize;\n                    }\n                    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp));\n                    for (int int = 0 ; i <= (rounds - 1) ; i++) {\n                        ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                        if ((i & 1) != 0) {\n                            ctx.update(pBytes, 0, keyLen);\n                        } else {\n                            ctx.update(altResult, 0, blocksize);\n                        }\n                        if ((i % 3) != 0) {\n                            ctx.update(sBytes, 0, saltLen);\n                        } \n                        if ((i % 7) != 0) {\n                            ctx.update(pBytes, 0, keyLen);\n                        } \n                        if ((i & 1) != 0) {\n                            ctx.update(altResult, 0, blocksize);\n                        } else {\n                            ctx.update(pBytes, 0, keyLen);\n                        }\n                        altResult = ctx.digest();\n                    }\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(saltPrefix);\n                    if (roundsCustom) {\n                        buffer.append(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String);\n                        buffer.append(rounds);\n                        buffer.append(\"$\");\n                    } \n                    buffer.append(saltString);\n                    buffer.append(\"$\");\n                    if (blocksize == 32) {\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer);\n                    } else {\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer);\n                    }\n                    java.util.Arrays.fill(tempResult, ((byte)(0)));\n                    java.util.Arrays.fill(pBytes, ((byte)(0)));\n                    java.util.Arrays.fill(sBytes, ((byte)(0)));\n                    ctx.reset();\n                    altCtx.reset();\n                    java.util.Arrays.fill(keyBytes, ((byte)(0)));\n                    java.util.Arrays.fill(saltBytes, ((byte)(0)));\n                    return buffer.toString();\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"algorithm","name1":"algorithm"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[15],"tindex":"6d37fd0e-2eb6-11e6-b4db-35899f3056f8","method":{"position":"org.apache.commons.codec.digest.Crypt:91","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String key) {\n    if (key.endsWith(key)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Crypt.crypt(key, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"key","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:447","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[100,101,103,104,105],"tindex":"6d38241f-2eb6-11e6-b4db-7d56ab10ec2e","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:968","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.String value) {\n    if (value == null) {\n        {\n            appendPrimary(value);\n            appendAlternate(value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6d382420-2eb6-11e6-b4db-e77e459449d8","method":{"position":"org.apache.commons.codec.binary.StringUtils:318","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUsAscii(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:782","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHIA\")"},"failures":[],"tindex":"6d382421-2eb6-11e6-b4db-d30733bf62d2","method":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:49","type":"CtMethodImpl","sourcecode":"static boolean regionMatches(final java.lang.CharSequence cs, final boolean ignoreCase, final int thisStart, final java.lang.CharSequence substring, final int start, final int length) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(cs, thisStart, 4, \"CHIA\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n                return ((java.lang.String)(cs)).regionMatches(ignoreCase, thisStart, ((java.lang.String)(substring)), start, length);\n            } \n            int int = thisStart;\n            int int = start;\n            int int = length;\n            while ((tmpLen--) > 0) {\n                char char = cs.charAt((index1++));\n                char char = substring.charAt((index2++));\n                if (c1 == c2) {\n                    continue;\n                } \n                if (!ignoreCase) {\n                    return false;\n                } \n                if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"thisStart","value":"cs"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[113,123,131,216,142,217],"tindex":"6d382422-2eb6-11e6-b4db-f1d8888abf42","method":{"position":"org.apache.commons.codec.binary.Base64:509","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final byte octet) {\n    if (octet == octet) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (octet == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.byte)) || (((octet >= 0) && (octet < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) && ((org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][octet]) != (-1)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"octet","pad":"octet"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtInvocationImpl","sourcecode":"target.equals(element)"},"failures":[218,219,220,221,222,223,224,225,226,98,227],"tindex":"6d384b33-2eb6-11e6-b4db-a1cb2e9c3d65","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:428","type":"CtMethodImpl","sourcecode":"private java.lang.String preprocess(java.lang.String text) {\n    if (text.equals(text)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            text = text.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final char[] char[] = text.toCharArray();\n            for (int int = 0 ; index < (chrs.int) ; index++) {\n                if ((chrs[index]) > 'Z') {\n                    for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n                        if ((chrs[index]) == (element[0])) {\n                            chrs[index] = element[1];\n                            break;\n                        } \n                    }\n                } \n            }\n            return new java.lang.String(chrs);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"text","element":"text"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[89,137,146,147,149,150],"tindex":"6d384b34-2eb6-11e6-b4db-1596424012a0","method":{"position":"org.apache.commons.codec.binary.Base64:691","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final java.lang.String base64String) {\n    if (base64String == null) {\n        {\n            return new org.apache.commons.codec.binary.Base64().decode(base64String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"base64String"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[228],"tindex":"6d384b35-2eb6-11e6-b4db-611bc6efad44","method":{"position":"org.apache.commons.codec.digest.DigestUtils:248","type":"CtMethodImpl","sourcecode":"public static java.lang.String md2Hex(final java.lang.String data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271],"tindex":"6d387246-2eb6-11e6-b4db-dd88608d5f01","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:384","type":"CtMethodImpl","sourcecode":"java.lang.String removeDoubleConsonants(final java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.String java.lang.String = name.toUpperCase();\n            for (final java.lang.String java.lang.String : org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String[]) {\n                if (replacedName.contains(dc)) {\n                    final java.lang.String java.lang.String = dc.substring(0, 1);\n                    replacedName = replacedName.replace(dc, singleLetter);\n                } \n            }\n            return replacedName;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtBinaryOperatorImpl","sourcecode":"(((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)"},"failures":[],"tindex":"6d387247-2eb6-11e6-b4db-b1fb72718c22","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:294","type":"CtMethodImpl","sourcecode":"int leftToRightThenRightToLeftProcessing(final java.lang.String name1, final java.lang.String name2) {\n    if ((((name1 == null) || (name2.equalsIgnoreCase(name))) || (name2.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char[] char[] = name1.toCharArray();\n            final char[] char[] = name2.toCharArray();\n            final int int = (name1.length()) - 1;\n            final int int = (name2.length()) - 1;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            for (int int = 0 ; i < (name1Char.int) ; i++) {\n                if (i > name2Size) {\n                    break;\n                } \n                name1LtRStart = name1.substring(i, (i + 1));\n                name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n                name2RtLStart = name2.substring(i, (i + 1));\n                name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n                if (name1LtRStart.equals(name2RtLStart)) {\n                    name1Char[i] = ' ';\n                    name2Char[i] = ' ';\n                } \n                if (name1LtREnd.equals(name2RtLEnd)) {\n                    name1Char[(name1Size - i)] = ' ';\n                    name2Char[(name2Size - i)] = ' ';\n                } \n            }\n            final java.lang.String java.lang.String = new java.lang.String(name1Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            final java.lang.String java.lang.String = new java.lang.String(name2Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            if ((strA.length()) > (strB.length())) {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())));\n            } else {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name1","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"name2","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"name2"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtBinaryOperatorImpl","sourcecode":"ascii == null"},"failures":[],"tindex":"6d389958-2eb6-11e6-b4db-cb8a03758dbc","method":{"position":"org.apache.commons.codec.binary.StringUtils:216","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Le(final java.lang.String string) {\n    if (string == null) {\n        {\n            if ((!(string.startsWith(string))) || (!(text.endsWith(string)))) {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"string"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[272],"tindex":"6d389959-2eb6-11e6-b4db-4f5efe638e96","method":{"position":"org.apache.commons.codec.net.RFC1522Codec:102","type":"CtMethodImpl","sourcecode":"protected java.lang.String encodeText(final java.lang.String text, final java.lang.String charsetName) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.EncoderException {\n    if ((text.length()) > 0) {\n        {\n            if (text == null) {\n                return null;\n            } \n            return org.apache.commons.codec.net.RFC1522Codec.this.encodeText(text, java.nio.charset.Charset.forName(charsetName));\n        }\n    } else {\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"text"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[],"tindex":"6d38995a-2eb6-11e6-b4db-d757c490b91e","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:276","type":"CtMethodImpl","sourcecode":"boolean isVowel(final java.lang.String letter) {\n    if (letter.endsWith(letter)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((letter == null) || (letter.equalsIgnoreCase(name2))) || (letter.equalsIgnoreCase(name2))) {\n                {\n                    return ((((letter.equalsIgnoreCase(\"E\")) || (letter.equalsIgnoreCase(\"A\"))) || (letter.equalsIgnoreCase(\"O\"))) || (letter.equalsIgnoreCase(\"I\"))) || (letter.equalsIgnoreCase(\"U\"));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"letter","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"letter"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"6d38c06b-2eb6-11e6-b4db-096be921b69f","method":{"position":"org.apache.commons.codec.digest.HmacUtils:134","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha512(final byte[] key) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(key)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"key"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"6d38c06c-2eb6-11e6-b4db-3f42c59110d5","method":{"position":"org.apache.commons.codec.digest.DigestUtils:546","type":"CtMethodImpl","sourcecode":"public static byte[] sha384(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.getSha384Digest().digest(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"data"},"type":"special","returnInThen":false,"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
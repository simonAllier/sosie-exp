{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":35,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":58,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":47,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":73,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":32,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":72,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeNull":84,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":51,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":86,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":50,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":74,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":15,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":63,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":65,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":38,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":53,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":29,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":67,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":49,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":37,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":77,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":27,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":30,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":59,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":11,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":10,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":2,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":12,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":28,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":57,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":54,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":21,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":40,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":64,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData":75,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt":78,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":19,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":48,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":60,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":17,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":0,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":76,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii":5,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":7,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":9,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":41,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":8,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":22,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":14,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":23,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":34,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":3,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":39,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":24,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":26,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":55,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":45,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":52,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":71,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":16,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":46,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":69,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":85,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":79,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":4,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":62,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":70,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":83,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":13,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":31,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":82,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":1,"org.apache.commons.codec.language.MetaphoneTest.testWhy":44,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":33,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":61,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":56,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":6,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":18,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":42,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":66,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":81,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":25,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":80,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":36,"org.apache.commons.codec.language.MetaphoneTest.testTCH":43,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":20,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":68},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:189","type":"CtBinaryOperatorImpl","sourcecode":"('H' == hwChar) || ('W' == hwChar)"},"failures":[],"tindex":"2456213e-2ea3-11e6-9d4f-75d3bd4fec3b","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:161","type":"CtMethodImpl","sourcecode":"char getMappingCode(final char c) {\n    if (('H' == c) || ('W' == hwChar)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(java.lang.Character.isLetter(c))) {\n                return 0;\n            } \n            return org.apache.commons.codec.language.RefinedSoundex.this.char[][((java.lang.Character.toUpperCase(c)) - 'A')];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"hwChar":"c"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:225","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[0],"tindex":"24570b9f-2ea3-11e6-9d4f-ad758ae635fa","method":{"position":"org.apache.commons.codec.digest.DigestUtils:484","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final java.lang.String data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"tindex":"24570ba0-2ea3-11e6-9d4f-23e20a2c410a","method":{"position":"org.apache.commons.codec.binary.StringUtils:318","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUsAscii(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[32,33,34,35,36,37],"tindex":"245732b1-2ea3-11e6-9d4f-b3f0a1bbfbdb","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:843","type":"CtMethodImpl","sourcecode":"private boolean conditionM0(final java.lang.String value, final int index) {\n    if (value == null) {\n        {\n            if ((charAt(value, (index + 1))) == 'M') {\n                return true;\n            } \n            return (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"UMB\")) && (((index + 1) == ((value.length()) - 1)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"ER\")));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"245759c2-2ea3-11e6-9d4f-7d798bb5c598","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:133","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == obj) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n            } \n            return soundex(((java.lang.String)(obj)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"obj","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"obj"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[38,39],"tindex":"24584423-2ea3-11e6-9d4f-bf64b3a35533","method":{"position":"org.apache.commons.codec.digest.DigestUtils:775","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest updateDigest(final java.security.MessageDigest messageDigest, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            messageDigest.update(valueToDigest);\n            return messageDigest;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[],"tindex":"24586b34-2ea3-11e6-9d4f-bd959f0389ae","method":{"position":"org.apache.commons.codec.digest.DigestUtils:563","type":"CtMethodImpl","sourcecode":"public static byte[] sha384(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha384Digest(), data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[40],"tindex":"24586b35-2ea3-11e6-9d4f-3196e19fd0d3","method":{"position":"org.apache.commons.codec.binary.Base64:691","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final java.lang.String base64String) {\n    if (!(base64String.contains(\"[\"))) {\n        {\n            return new org.apache.commons.codec.binary.Base64().decode(base64String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"base64String"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:801","type":"CtBinaryOperatorImpl","sourcecode":"index != 0"},"failures":[],"tindex":"24589246-2ea3-11e6-9d4f-cbf1bfe50e9e","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:405","type":"CtMethodImpl","sourcecode":"private static void permOp(int a, int b, final int n, final int m, final int[] results) {\n    if (n != 0) {\n        {\n            final int int = ((a >>> n) ^ b) & m;\n            a ^= t << n;\n            b ^= t;\n            results[0] = a;\n            results[1] = b;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"n"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:382","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"tindex":"24590777-2ea3-11e6-9d4f-4b8255cd7561","method":{"position":"org.apache.commons.codec.language.Metaphone:370","type":"CtMethodImpl","sourcecode":"private boolean isLastChar(final int wdsz, final int n) {\n    if (n < 0) {\n        {\n            return (n + 1) == wdsz;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"n"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:508","type":"CtBinaryOperatorImpl","sourcecode":"0 == (context.modulus)"},"failures":[],"tindex":"24590778-2ea3-11e6-9d4f-a78b55b8116d","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:268","type":"CtMethodImpl","sourcecode":"protected byte[] ensureBufferSize(final int size, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (0 == size) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((context.byte[]) == null) || ((context.byte[].int) < ((context.int) + size))) {\n                return resizeBuffer(context);\n            } \n            return context.byte[];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"context","modulus":"size"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[65,66,67,68],"tindex":"24592e89-2ea3-11e6-9d4f-21cad8922a79","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:230","type":"CtMethodImpl","sourcecode":"public boolean isDoubleMetaphoneEqual(final java.lang.String value1, final java.lang.String value2) {\n    if (value2.startsWith(value1)) {\n        {\n            return isDoubleMetaphoneEqual(value1, value2, false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"value1","line":"value2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:214","type":"CtBinaryOperatorImpl","sourcecode":"((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name1))"},"failures":[],"tindex":"24592e8a-2ea3-11e6-9d4f-2b68403c58d9","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:180","type":"CtMethodImpl","sourcecode":"public java.lang.String[] getReplacements(final java.lang.String context, final boolean atStart) {\n    if (((context == null) || (context.equalsIgnoreCase(name1))) || (context.equalsIgnoreCase(name1))) {\n        {\n            if (atStart) {\n                return java.lang.String[];\n            } \n            final int int = getPatternLength();\n            final boolean boolean = nextIndex < (context.length()) ? isVowel(context.charAt(nextIndex)) : false;\n            if (nextCharIsVowel) {\n                return java.lang.String[];\n            } \n            return java.lang.String[];\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"context","name1":"context","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"context"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtBinaryOperatorImpl","sourcecode":"cmtI >= 0"},"failures":[],"tindex":"2459559b-2ea3-11e6-9d4f-ebf8e661d3a3","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:398","type":"CtMethodImpl","sourcecode":"private static void intToFourBytes(final int iValue, final byte[] b, int offset) {\n    if (offset >= 0) {\n        {\n            b[(offset++)] = ((byte)(iValue & 255));\n            b[(offset++)] = ((byte)((iValue >>> 8) & 255));\n            b[(offset++)] = ((byte)((iValue >>> 16) & 255));\n            b[(offset++)] = ((byte)((iValue >>> 24) & 255));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmtI":"offset"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:225","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"2459559c-2ea3-11e6-9d4f-e72b4d21a00a","method":{"position":"org.apache.commons.codec.binary.StringUtils:113","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesIso8859_1(final java.lang.String string) {\n    if (string == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"string"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:296","type":"CtBinaryOperatorImpl","sourcecode":"lastChar == 'S'"},"failures":[65,33,34,35,36,37],"tindex":"2459559d-2ea3-11e6-9d4f-81d7ddbbb0f7","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:865","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (ch == 'S') {\n        {\n            return (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String.indexOf(ch)) != (-1);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lastChar":"ch"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[69,70,71,72,73,74],"tindex":"24597cae-2ea3-11e6-9d4f-b7195b4bf731","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:462","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(final java.lang.String source) {\n    if (source == null) {\n        {\n            final java.lang.String[] java.lang.String[] = soundex(source, true);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            for (final java.lang.String java.lang.String : branches) {\n                sb.append(branch);\n                if ((++index) < (branches.int)) {\n                    sb.append('|');\n                } \n            }\n            return sb.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:312","type":"CtBinaryOperatorImpl","sourcecode":"pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH) - 2)"},"failures":[],"tindex":"24597caf-2ea3-11e6-9d4f-abb3eb32f6eb","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:259","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected char[] copyData(final int start, final int length) {\n    if (start > (start - 2)) {\n        {\n            final char[] char[] = new char[length];\n            java.lang.System.arraycopy(char[], (((char[].int) - (org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.this.int)) + start), newData, 0, length);\n            return newData;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"start","org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH":"start"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtBinaryOperatorImpl","sourcecode":"(salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))"},"failures":[],"tindex":"2459a3c0-2ea3-11e6-9d4f-e57b8bd87cbc","method":{"position":"org.apache.commons.codec.binary.StringUtils:279","type":"CtMethodImpl","sourcecode":"public static java.lang.String newString(final byte[] bytes, final java.lang.String charsetName) {\n    if ((charsetName != null) && (!(salt.startsWith(charsetName)))) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            try {\n                return new java.lang.String(bytes , charsetName);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"charsetName","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"charsetName"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:336","type":"CtBinaryOperatorImpl","sourcecode":"(strA.length()) > (strB.length())"},"failures":[75,76,77,78,79,80],"tindex":"2459a3c1-2ea3-11e6-9d4f-55dde5cb6834","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:160","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes, final java.lang.String salt) {\n    if ((salt.length()) > (salt.length())) {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strA":"salt","strB":"salt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[18,81,19,20,21,22,23],"tindex":"2459cad2-2ea3-11e6-9d4f-43d9c4b099ba","method":{"position":"org.apache.commons.codec.net.URLCodec:121","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeUrl(java.util.BitSet urlsafe, final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            if (urlsafe == null) {\n                urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (final byte byte : bytes) {\n                int int = c;\n                if (b < 0) {\n                    b = 256 + b;\n                } \n                if (urlsafe.get(b)) {\n                    if (b == ' ') {\n                        b = '+';\n                    } \n                    buffer.write(b);\n                } else {\n                    buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n                    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                    buffer.write(hex1);\n                    buffer.write(hex2);\n                }\n            }\n            return buffer.toByteArray();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[82],"tindex":"245b2a63-2ea3-11e6-9d4f-45d333cadfee","method":{"position":"org.apache.commons.codec.digest.HmacUtils:723","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[83,84],"tindex":"245b2a64-2ea3-11e6-9d4f-151352668463","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:175","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(str, 0, 5, \"CHORE\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            sBuf.append(str.charAt(0));\n            char char;\n            char char;\n            last = '*';\n            for (int int = 0 ; i < (str.length()) ; i++) {\n                current = getMappingCode(str.charAt(i));\n                if (current == last) {\n                    continue;\n                } else if (current != 0) {\n                    sBuf.append(current);\n                } \n                last = current;\n            }\n            return sBuf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[85,86],"tindex":"245b5175-2ea3-11e6-9d4f-27324a8c0ea3","method":{"position":"org.apache.commons.codec.binary.Base64:639","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe) {\n    if (binaryData == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, urlSafe, java.lang.Integer.java.lang.Integer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"commons-codec","transformationCount":24,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":127,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":256,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":146,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":193,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":152,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":318,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_1_Returns5_Successfully":132,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_11_Returns_3_Successfully":153,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":140,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":73,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":253,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":234,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":134,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":230,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":117,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":179,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":320,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_8_Returns3_Successfully":173,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":178,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":257,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":161,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":223,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":222,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":2,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":145,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":164,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":96,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":38,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":221,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":162,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":4,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":260,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":5,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":37,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":225,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":314,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":110,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":6,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":194,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":122,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":85,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":86,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":109,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":229,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":196,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":120,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":252,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":49,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":187,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":103,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":116,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":170,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":51,"org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull":244,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":205,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull":236,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":233,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":150,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_10_Returns3_Successfully":175,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":182,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":142,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":165,"org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull":239,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":24,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":125,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":158,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":299,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":172,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_6_Returns4_Successfully":135,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":291,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":59,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":243,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":270,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":312,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":107,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":121,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":139,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":290,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":206,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":167,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":186,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":227,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":272,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":32,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":55,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":7,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":148,"org.apache.commons.codec.binary.Base64Test.testUUID":94,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":264,"org.apache.commons.codec.binary.Base64Test.testSingletons":104,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":30,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":261,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":90,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":123,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":232,"org.apache.commons.codec.binary.Base64Test.testPairs":93,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":27,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":136,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":11,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":303,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":190,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":115,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":277,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":192,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":62,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully2":154,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":141,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":80,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":308,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse":1,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":60,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":224,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":202,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":137,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":101,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":268,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":102,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":255,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":287,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":319,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":226,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":249,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8":214,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":250,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":57,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":44,"org.apache.commons.codec.binary.HexTest.testEncodeEmpty":63,"org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter":83,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":306,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedNullInput":218,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey":198,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":245,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":74,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":114,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":195,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le":217,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":300,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":39,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName":219,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":325,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":113,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_7_Returns4_Successfully":149,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":289,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":177,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":155,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":207,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch":0,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":285,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":307,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":156,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":163,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":200,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":108,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":89,"org.apache.commons.codec.binary.HexTest.testCustomCharset":61,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":151,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":169,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":321,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":48,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":21,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":47,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":185,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":176,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":184,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":309,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":77,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":197,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":208,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":76,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":41,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":322,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":124,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":58,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":279,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_2_Returns5_Successfully":144,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":302,"org.apache.commons.codec.binary.Base64Test.testTriplets":324,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":56,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":111,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":67,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":271,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":65,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":68,"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence":87,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":282,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":240,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":201,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":97,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":301,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":297,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":278,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":12,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1":215,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":310,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":78,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":92,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":199,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":69,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":53,"org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey":210,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":88,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":203,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":212,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":263,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":315,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":8,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":22,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":23,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":118,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":228,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":241,"org.apache.commons.codec.language.Caverphone2Test.testLocaleIndependence":16,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":64,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":100,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":42,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":304,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":45,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":126,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":242,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":327,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":66,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":183,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":180,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":168,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":40,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":266,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":46,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":262,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":235,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":275,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":276,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":237,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":259,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":298,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":138,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_13_Returns_1_Successfully":157,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":131,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":288,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":81,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":159,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":284,"org.apache.commons.codec.language.MetaphoneTest.testWhy":248,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":286,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":323,"org.apache.commons.codec.language.NysiisTest.testEncodeNull":220,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":160,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":36,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":265,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":209,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":231,"org.apache.commons.codec.language.MetaphoneTest.testTCH":247,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":311,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":112,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":106,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":72,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":130,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":251,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":189,"org.apache.commons.codec.binary.Base64Test.testBase64":294,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":75,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":129,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":317,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":50,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":98,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":274,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":313,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":273,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":280,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":316,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":26,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":295,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":305,"org.apache.commons.codec.binary.Base64Test.testCodec112":326,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":70,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":171,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":19,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":254,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":292,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":119,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":166,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":216,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":258,"org.apache.commons.codec.binary.Base64Test.testCodec68":105,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":84,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":246,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":281,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":283,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":82,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":296,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":204,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":17,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":143,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":181,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":79,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":267,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":91,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":14,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":211,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":293,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":188,"org.apache.commons.codec.language.SoundexTest.testDifference":269,"org.apache.commons.codec.language.Caverphone2Test.testEncodeEmpty":15,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":35,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":238,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":52,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":28,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":18,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":71,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii":43,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":128,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully":174,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":147,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":99,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_7_Return4_Successfully":133,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":191,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":95,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16":213},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"96aee6b8-3e71-11e6-a0c3-d3c37a9e13ec","method":{"position":"org.apache.commons.codec.digest.DigestUtils:499","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final byte[] data) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[0,1],"tindex":"96af34d9-3e71-11e6-a0c3-19897df4d631","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:212","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEquals(java.lang.String name1, java.lang.String name2) {\n    if (name2 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n                return false;\n            } else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n                return false;\n            } else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n                return false;\n            } else if (name1.equalsIgnoreCase(name2)) {\n                return true;\n            } \n            name1 = cleanName(name1);\n            name2 = cleanName(name2);\n            name1 = removeVowels(name1);\n            name2 = removeVowels(name2);\n            name1 = removeDoubleConsonants(name1);\n            name2 = removeDoubleConsonants(name2);\n            name1 = getFirst3Last3(name1);\n            name2 = getFirst3Last3(name2);\n            if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                return false;\n            } \n            final int int = java.lang.Math.abs(((name1.length()) + (name2.length())));\n            int int = 0;\n            minRating = getMinRating(sumLength);\n            final int int = leftToRightThenRightToLeftProcessing(name1, name2);\n            return count >= minRating;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[],"tindex":"96af5bea-3e71-11e6-a0c3-715943e2bcf3","method":{"position":"org.apache.commons.codec.binary.StringUtils:113","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesIso8859_1(final java.lang.String string) {\n    if (string.equalsIgnoreCase(string)) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"string","name1":"string"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[2,3,4,5],"tindex":"96af5beb-3e71-11e6-a0c3-0b2456f5e7ed","method":{"position":"org.apache.commons.codec.binary.Base64:720","type":"CtMethodImpl","sourcecode":"public static java.math.BigInteger decodeInteger(final byte[] pArray) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(pArray)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (pArray == null) {\n                {\n                    return new java.math.BigInteger(1 , org.apache.commons.codec.binary.Base64.decodeBase64(pArray));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"96af5bec-3e71-11e6-a0c3-3550fab2f3d0","method":{"position":"org.apache.commons.codec.StringEncoderComparator:75","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int compare(final java.lang.Object o1, final java.lang.Object o2) {\n    if (o2 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            try {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final java.lang.Comparable<java.lang.Comparable<?>> java.lang.Comparable<java.lang.Comparable<?>> = ((java.lang.Comparable<java.lang.Comparable<?>>)(org.apache.commons.codec.StringEncoderComparator.this.org.apache.commons.codec.StringEncoder.encode(o1)));\n                final java.lang.Comparable<?> java.lang.Comparable<?> = ((java.lang.Comparable<?>)(org.apache.commons.codec.StringEncoderComparator.this.org.apache.commons.codec.StringEncoder.encode(o2)));\n                compareCode = s1.compareTo(s2);\n            } catch (final org.apache.commons.codec.EncoderException ee) {\n                compareCode = 0;\n            }\n            return compareCode;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"o2"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:111","type":"CtBinaryOperatorImpl","sourcecode":"(es1 == null) || (es2 == null)"},"failures":[6,7,8,9,10,11,12,13,14,15,16],"tindex":"96af82fd-3e71-11e6-a0c3-2d03f03c2ec5","method":{"position":"org.apache.commons.codec.language.Caverphone2:45","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source.equalsIgnoreCase(source)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((source == null) || (source == null)) {\n                {\n                    java.lang.String java.lang.String = source;\n                    if ((txt == null) || ((txt.length()) == 0)) {\n                        return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n                    } \n                    txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    txt = txt.replaceAll(\"[^a-z]\", \"\");\n                    txt = txt.replaceAll(\"e$\", \"\");\n                    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n                    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n                    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n                    txt = txt.replaceAll(\"^enough\", \"enou2f\");\n                    txt = txt.replaceAll(\"^trough\", \"trou2f\");\n                    txt = txt.replaceAll(\"^gn\", \"2n\");\n                    txt = txt.replaceAll(\"mb$\", \"m2\");\n                    txt = txt.replaceAll(\"cq\", \"2q\");\n                    txt = txt.replaceAll(\"ci\", \"si\");\n                    txt = txt.replaceAll(\"ce\", \"se\");\n                    txt = txt.replaceAll(\"cy\", \"sy\");\n                    txt = txt.replaceAll(\"tch\", \"2ch\");\n                    txt = txt.replaceAll(\"c\", \"k\");\n                    txt = txt.replaceAll(\"q\", \"k\");\n                    txt = txt.replaceAll(\"x\", \"k\");\n                    txt = txt.replaceAll(\"v\", \"f\");\n                    txt = txt.replaceAll(\"dg\", \"2g\");\n                    txt = txt.replaceAll(\"tio\", \"sio\");\n                    txt = txt.replaceAll(\"tia\", \"sia\");\n                    txt = txt.replaceAll(\"d\", \"t\");\n                    txt = txt.replaceAll(\"ph\", \"fh\");\n                    txt = txt.replaceAll(\"b\", \"p\");\n                    txt = txt.replaceAll(\"sh\", \"s2\");\n                    txt = txt.replaceAll(\"z\", \"s\");\n                    txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n                    txt = txt.replaceAll(\"[aeiou]\", \"3\");\n                    txt = txt.replaceAll(\"j\", \"y\");\n                    txt = txt.replaceAll(\"^y3\", \"Y3\");\n                    txt = txt.replaceAll(\"^y\", \"A\");\n                    txt = txt.replaceAll(\"y\", \"3\");\n                    txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n                    txt = txt.replaceAll(\"gh\", \"22\");\n                    txt = txt.replaceAll(\"g\", \"k\");\n                    txt = txt.replaceAll(\"s+\", \"S\");\n                    txt = txt.replaceAll(\"t+\", \"T\");\n                    txt = txt.replaceAll(\"p+\", \"P\");\n                    txt = txt.replaceAll(\"k+\", \"K\");\n                    txt = txt.replaceAll(\"f+\", \"F\");\n                    txt = txt.replaceAll(\"m+\", \"M\");\n                    txt = txt.replaceAll(\"n+\", \"N\");\n                    txt = txt.replaceAll(\"w3\", \"W3\");\n                    txt = txt.replaceAll(\"wh3\", \"Wh3\");\n                    txt = txt.replaceAll(\"w$\", \"3\");\n                    txt = txt.replaceAll(\"w\", \"2\");\n                    txt = txt.replaceAll(\"^h\", \"A\");\n                    txt = txt.replaceAll(\"h\", \"2\");\n                    txt = txt.replaceAll(\"r3\", \"R3\");\n                    txt = txt.replaceAll(\"r$\", \"3\");\n                    txt = txt.replaceAll(\"r\", \"2\");\n                    txt = txt.replaceAll(\"l3\", \"L3\");\n                    txt = txt.replaceAll(\"l$\", \"3\");\n                    txt = txt.replaceAll(\"l\", \"2\");\n                    txt = txt.replaceAll(\"2\", \"\");\n                    txt = txt.replaceAll(\"3$\", \"A\");\n                    txt = txt.replaceAll(\"3\", \"\");\n                    txt = txt + (org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String);\n                    return txt.substring(0, org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String.length());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"es1":"source","es2":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"96afaa0e-3e71-11e6-a0c3-19a48ed94083","method":{"position":"org.apache.commons.codec.binary.Base64:720","type":"CtMethodImpl","sourcecode":"public static java.math.BigInteger decodeInteger(final byte[] pArray) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(pArray)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (pArray == null) {\n                {\n                    return new java.math.BigInteger(1 , org.apache.commons.codec.binary.Base64.decodeBase64(pArray));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"pArray"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"tindex":"96afaa0f-3e71-11e6-a0c3-c74ffc5bd337","method":{"position":"org.apache.commons.codec.binary.StringUtils:162","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUsAscii(final java.lang.String string) {\n    if (string.contains(string)) {\n        {\n            if (string == null) {\n                {\n                    if (string == null) {\n                        {\n                            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:331","type":"CtBinaryOperatorImpl","sourcecode":"(code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())"},"failures":[],"tindex":"96afaa10-3e71-11e6-a0c3-475219076602","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:115","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object ascii) throws org.apache.commons.codec.DecoderException {\n    if (ascii == null) {\n        return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n    } \n    if (ascii instanceof byte[]) {\n        return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n    } \n    if (ascii instanceof char[]) {\n        return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n    } \n    if (ascii instanceof java.lang.String) {\n        return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n    } \n    throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\");\n}"},"series":0,"name":"addParameterCondition","variableMap":{"code":"ascii","this":"ascii"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[],"tindex":"96afd121-3e71-11e6-a0c3-f5655f79855b","method":{"position":"org.apache.commons.codec.digest.HmacUtils:566","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha384(final java.lang.String key, final java.lang.String valueToDigest) {\n    if ((key.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacSha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:272","type":"CtBinaryOperatorImpl","sourcecode":"cmtI >= 0"},"failures":[44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"tindex":"96afd122-3e71-11e6-a0c3-2384a4c984cd","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final byte[] b, final int offset, final int len) throws java.io.IOException {\n    if (len >= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (b == null) {\n                throw new java.lang.NullPointerException();\n            } else if ((offset < 0) || (len < 0)) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if (len > 0) {\n                if (boolean) {\n                    org.apache.commons.codec.binary.BaseNCodec.encode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                } else {\n                    org.apache.commons.codec.binary.BaseNCodec.decode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                }\n                flush(false);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmtI":"len"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[35,36,37,59,38,60,42],"tindex":"96afd123-3e71-11e6-a0c3-a9f2f0f15811","method":{"position":"org.apache.commons.codec.net.URLCodec:121","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeUrl(java.util.BitSet urlsafe, final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            if (urlsafe == null) {\n                urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (final byte byte : bytes) {\n                int int = c;\n                if (b < 0) {\n                    b = 256 + b;\n                } \n                if (urlsafe.get(b)) {\n                    if (b == ' ') {\n                        b = '+';\n                    } \n                    buffer.write(b);\n                } else {\n                    buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n                    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                    buffer.write(hex1);\n                    buffer.write(hex2);\n                }\n            }\n            return buffer.toByteArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[61,62,63,64],"tindex":"96aff834-3e71-11e6-a0c3-37ad76e7f4b0","method":{"position":"org.apache.commons.codec.binary.Hex:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] array) {\n    if (array == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(array).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtInvocationImpl","sourcecode":"str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"tindex":"96aff835-3e71-11e6-a0c3-537c8ee66622","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:398","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(java.lang.String input, final org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet) {\n    if (input.startsWith(input)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType, languageSet);\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, \"common\");\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, languageSet);\n            input = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale).replace('-', ' ').trim();\n            if ((org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) == (org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType)) {\n                if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n                    final java.lang.String java.lang.String = input.substring(2);\n                    final java.lang.String java.lang.String = \"d\" + remainder;\n                    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n                } \n                for (final java.lang.String java.lang.String : org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)) {\n                    if (input.startsWith((l + \" \"))) {\n                        final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n                        final java.lang.String java.lang.String = l + remainder;\n                        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n                    } \n                }\n            } \n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = java.util.Arrays.asList(input.split(\"\\\\s+\"));\n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            switch (org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) {\n                case SEPHARDIC :\n                    for (final java.lang.String java.lang.String : words) {\n                        final java.lang.String[] java.lang.String[] = aWord.split(\"'\");\n                        final java.lang.String java.lang.String = parts[((parts.int) - 1)];\n                        words2.add(lastPart);\n                    }\n                    words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType));\n                    break;\n                case ASHKENAZI :\n                    words2.addAll(words);\n                    words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType));\n                    break;\n                case GENERIC :\n                    words2.addAll(words);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException((\"Unreachable case: \" + (org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)));\n            }\n            if (org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean) {\n                input = org.apache.commons.codec.language.bm.PhoneticEngine.join(words2, \" \");\n            } else if ((words2.size()) == 1) {\n                input = words.iterator().next();\n            } else {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                for (final java.lang.String java.lang.String : words2) {\n                    result.append(\"-\").append(encode(word));\n                }\n                return result.substring(1);\n            }\n            org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(languageSet);\n            for (int int = 0 ; i < (input.length()) ; ) {\n                final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(rules , input , phonemeBuilder , i , int).invoke();\n                i = rulesApplication.getI();\n                phonemeBuilder = rulesApplication.getPhonemeBuilder();\n            }\n            phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1);\n            phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2);\n            return phonemeBuilder.makeString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:304","type":"CtBinaryOperatorImpl","sourcecode":"(last2Char == 'A') && (lastChar == 'Y')"},"failures":[81,82,83,84,85,86,87],"tindex":"96b01f46-3e71-11e6-a0c3-4dc2708eed31","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:161","type":"CtMethodImpl","sourcecode":"char getMappingCode(final char c) {\n    if ((c == 'A') && (c == 'Y')) {\n        {\n            if (!(java.lang.Character.isLetter(c))) {\n                return 0;\n            } \n            return org.apache.commons.codec.language.RefinedSoundex.this.char[][((java.lang.Character.toUpperCase(c)) - 'A')];\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last2Char":"c","lastChar":"c"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:72","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX)"},"failures":[88,89],"tindex":"96b01f47-3e71-11e6-a0c3-919c49ad3630","method":{"position":"org.apache.commons.codec.digest.HmacUtils:402","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key.startsWith(key)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"key","org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[],"tindex":"96b01f48-3e71-11e6-a0c3-8daff88482c8","method":{"position":"org.apache.commons.codec.digest.DigestUtils:719","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final java.lang.String data) {\n    if (data == null) {\n        {\n            if ((data.length()) > 0) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:279","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[],"tindex":"96b04659-3e71-11e6-a0c3-c3c6aebbd9c0","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:800","type":"CtMethodImpl","sourcecode":"private boolean conditionCH0(final java.lang.String value, final int index) {\n    if ((value.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index != 0) {\n                return false;\n            } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n                return false;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[17,18,19,90,91,92,93,94,95,2,3,4,5,96,97,98,99,100,101,102,103,104,105,106,107],"tindex":"96b0465a-3e71-11e6-a0c3-0523e1ff24e8","method":{"position":"org.apache.commons.codec.binary.Base64:705","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final byte[] base64Data) {\n    if (base64Data == null) {\n        {\n            if (base64Data == null) {\n                {\n                    return new org.apache.commons.codec.binary.Base64().decode(base64Data);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"base64Data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtBinaryOperatorImpl","sourcecode":"u == 0"},"failures":[108,109,110,111],"tindex":"96b0465b-3e71-11e6-a0c3-752e9160bb54","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:405","type":"CtMethodImpl","sourcecode":"private static void permOp(int a, int b, final int n, final int m, final int[] results) {\n    if (a == 0) {\n        {\n            final int int = ((a >>> n) ^ b) & m;\n            a ^= t << n;\n            b ^= t;\n            results[0] = a;\n            results[1] = b;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"u":"a"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[],"tindex":"96b0465c-3e71-11e6-a0c3-698e803e5def","method":{"position":"org.apache.commons.codec.language.Caverphone2:45","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source.equalsIgnoreCase(source)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((source == null) || (source == null)) {\n                {\n                    java.lang.String java.lang.String = source;\n                    if ((txt == null) || ((txt.length()) == 0)) {\n                        return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n                    } \n                    txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    txt = txt.replaceAll(\"[^a-z]\", \"\");\n                    txt = txt.replaceAll(\"e$\", \"\");\n                    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n                    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n                    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n                    txt = txt.replaceAll(\"^enough\", \"enou2f\");\n                    txt = txt.replaceAll(\"^trough\", \"trou2f\");\n                    txt = txt.replaceAll(\"^gn\", \"2n\");\n                    txt = txt.replaceAll(\"mb$\", \"m2\");\n                    txt = txt.replaceAll(\"cq\", \"2q\");\n                    txt = txt.replaceAll(\"ci\", \"si\");\n                    txt = txt.replaceAll(\"ce\", \"se\");\n                    txt = txt.replaceAll(\"cy\", \"sy\");\n                    txt = txt.replaceAll(\"tch\", \"2ch\");\n                    txt = txt.replaceAll(\"c\", \"k\");\n                    txt = txt.replaceAll(\"q\", \"k\");\n                    txt = txt.replaceAll(\"x\", \"k\");\n                    txt = txt.replaceAll(\"v\", \"f\");\n                    txt = txt.replaceAll(\"dg\", \"2g\");\n                    txt = txt.replaceAll(\"tio\", \"sio\");\n                    txt = txt.replaceAll(\"tia\", \"sia\");\n                    txt = txt.replaceAll(\"d\", \"t\");\n                    txt = txt.replaceAll(\"ph\", \"fh\");\n                    txt = txt.replaceAll(\"b\", \"p\");\n                    txt = txt.replaceAll(\"sh\", \"s2\");\n                    txt = txt.replaceAll(\"z\", \"s\");\n                    txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n                    txt = txt.replaceAll(\"[aeiou]\", \"3\");\n                    txt = txt.replaceAll(\"j\", \"y\");\n                    txt = txt.replaceAll(\"^y3\", \"Y3\");\n                    txt = txt.replaceAll(\"^y\", \"A\");\n                    txt = txt.replaceAll(\"y\", \"3\");\n                    txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n                    txt = txt.replaceAll(\"gh\", \"22\");\n                    txt = txt.replaceAll(\"g\", \"k\");\n                    txt = txt.replaceAll(\"s+\", \"S\");\n                    txt = txt.replaceAll(\"t+\", \"T\");\n                    txt = txt.replaceAll(\"p+\", \"P\");\n                    txt = txt.replaceAll(\"k+\", \"K\");\n                    txt = txt.replaceAll(\"f+\", \"F\");\n                    txt = txt.replaceAll(\"m+\", \"M\");\n                    txt = txt.replaceAll(\"n+\", \"N\");\n                    txt = txt.replaceAll(\"w3\", \"W3\");\n                    txt = txt.replaceAll(\"wh3\", \"Wh3\");\n                    txt = txt.replaceAll(\"w$\", \"3\");\n                    txt = txt.replaceAll(\"w\", \"2\");\n                    txt = txt.replaceAll(\"^h\", \"A\");\n                    txt = txt.replaceAll(\"h\", \"2\");\n                    txt = txt.replaceAll(\"r3\", \"R3\");\n                    txt = txt.replaceAll(\"r$\", \"3\");\n                    txt = txt.replaceAll(\"r\", \"2\");\n                    txt = txt.replaceAll(\"l3\", \"L3\");\n                    txt = txt.replaceAll(\"l$\", \"3\");\n                    txt = txt.replaceAll(\"l\", \"2\");\n                    txt = txt.replaceAll(\"2\", \"\");\n                    txt = txt.replaceAll(\"3$\", \"A\");\n                    txt = txt.replaceAll(\"3\", \"\");\n                    txt = txt + (org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String);\n                    return txt.substring(0, org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String.length());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"source","name1":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:275","type":"CtBinaryOperatorImpl","sourcecode":"(mapped != '0') && (mapped != last)"},"failures":[],"tindex":"96b06d6d-3e71-11e6-a0c3-0d13ae2d10eb","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:962","type":"CtMethodImpl","sourcecode":"public void appendAlternate(final char value) {\n    if ((value == 'A') && (value == 'Y')) {\n        {\n            if ((value != '0') && (mapped != value)) {\n                {\n                    if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int)) {\n                        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"value","mapped":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:238","type":"CtBinaryOperatorImpl","sourcecode":"(ii & 1) == 1"},"failures":[112,113,114,115,116,117],"tindex":"96b06d6e-3e71-11e6-a0c3-53a8efcdf439","method":{"position":"org.apache.commons.codec.digest.B64:54","type":"CtMethodImpl","sourcecode":"static void b64from24bit(final byte b2, final byte b1, final byte b0, final int outLen, final java.lang.StringBuilder buffer) {\n    if ((outLen & 1) == 1) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255);\n            int int = outLen;\n            while ((n--) > 0) {\n                buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)));\n                w >>= 6;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ii":"outLen"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"96b0947f-3e71-11e6-a0c3-eb82f2a7876e","method":{"position":"org.apache.commons.codec.language.Nysiis:210","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:470","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[73],"tindex":"96b09480-3e71-11e6-a0c3-15b01470e807","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:174","type":"CtMethodImpl","sourcecode":"public void setMaxPhonemes(final int maxPhonemes) {\n    if (maxPhonemes == 0) {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat() , maxPhonemes);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"maxPhonemes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[118],"tindex":"96b09481-3e71-11e6-a0c3-676e7a163c74","method":{"position":"org.apache.commons.codec.digest.DigestUtils:198","type":"CtMethodImpl","sourcecode":"public static byte[] md2(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd2Digest(), data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:559","type":"CtBinaryOperatorImpl","sourcecode":"startsWith && endsWith"},"failures":[119,120,121,122,123],"tindex":"96b0bb92-3e71-11e6-a0c3-076628ea2006","method":{"position":"org.apache.commons.codec.binary.Base64:620","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked) {\n    if (isChunked) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (isChunked && isChunked) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, false);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"endsWith":"isChunked","startsWith":"isChunked"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtUnaryOperatorImpl","sourcecode":"!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))"},"failures":[124,125,126,127,128,129],"tindex":"96b0bb93-3e71-11e6-a0c3-8fc45edcf5ac","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:781","type":"CtMethodImpl","sourcecode":"private boolean conditionC0(final java.lang.String value, final int index) {\n    if (!(value.matches(((\"^[\" + value) + \"]{2,}$\")))) {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHIA\")) {\n                return true;\n            } else if (index <= 1) {\n                return false;\n            } else if (isVowel(charAt(value, (index - 2)))) {\n                return false;\n            } else if (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ACH\"))) {\n                return false;\n            } else {\n                final char char = charAt(value, (index + 2));\n                return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"value","org.apache.commons.codec.digest.B64.B64T":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[130],"tindex":"96b0bb94-3e71-11e6-a0c3-1da5bb2531f2","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:349","type":"CtMethodImpl","sourcecode":"public java.lang.String encodeToString(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newStringUtf8(encode(pArray));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:131","type":"CtBinaryOperatorImpl","sourcecode":"(offset < 0) || (len < 0)"},"failures":[131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177],"tindex":"96b0bb95-3e71-11e6-a0c3-699d95dc682c","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:184","type":"CtMethodImpl","sourcecode":"int getMinRating(final int sumLength) {\n    if ((sumLength < 0) || (sumLength < 0)) {\n        {\n            int int = 0;\n            if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            }\n            return minRating;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"sumLength","len":"sumLength"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[81,82,84,85,86,178,87],"tindex":"96b0e2a6-3e71-11e6-a0c3-fbca872b382a","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:175","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n                    if ((str.length()) == 0) {\n                        return str;\n                    } \n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    sBuf.append(str.charAt(0));\n                    char char;\n                    char char;\n                    last = '*';\n                    for (int int = 0 ; i < (str.length()) ; i++) {\n                        current = getMappingCode(str.charAt(i));\n                        if (current == last) {\n                            continue;\n                        } else if (current != 0) {\n                            sBuf.append(current);\n                        } \n                        last = current;\n                    }\n                    return sBuf.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[179],"tindex":"96b0e2a7-3e71-11e6-a0c3-b7876e88f3b5","method":{"position":"org.apache.commons.codec.digest.DigestUtils:748","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String shaHex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[128,129],"tindex":"96b0e2a8-3e71-11e6-a0c3-0faf3fe4564e","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:466","type":"CtMethodImpl","sourcecode":"private int handleGH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index > 0) && (!(isVowel(charAt(value, (index - 1)))))) {\n                result.append('K');\n                index += 2;\n            } else if (index == 0) {\n                if ((charAt(value, (index + 2))) == 'I') {\n                    result.append('J');\n                } else {\n                    result.append('K');\n                }\n                index += 2;\n            } else if ((((index > 1) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 1, \"B\", \"H\", \"D\"))) || ((index > 2) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"B\", \"H\", \"D\")))) || ((index > 3) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 1, \"B\", \"H\")))) {\n                index += 2;\n            } else {\n                if (((index > 2) && ((charAt(value, (index - 1))) == 'U')) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"C\", \"G\", \"L\", \"R\", \"T\"))) {\n                    result.append('F');\n                } else if ((index > 0) && ((charAt(value, (index - 1))) != 'I')) {\n                    result.append('K');\n                } \n                index += 2;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[180],"tindex":"96b109b9-3e71-11e6-a0c3-d74e29ad2499","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:87","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n                salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n            } \n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"salt"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[94,96],"tindex":"96b109ba-3e71-11e6-a0c3-89107d350ac8","method":{"position":"org.apache.commons.codec.binary.Base64:581","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64URLSafe(final byte[] binaryData) {\n    if (binaryData == null) {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)"},"failures":[181,182,183,184,185,186,187,188,189,190,191,192,193],"tindex":"96b109bb-3e71-11e6-a0c3-af53dc04aef5","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:250","type":"CtMethodImpl","sourcecode":"private static void parseRules(final java.util.Scanner scanner, final java.lang.String location, final java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>> ruleMapping, final java.util.Map<java.lang.Character, java.lang.Character> asciiFoldings) {\n    if (location.startsWith(location)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            boolean boolean = false;\n            while (scanner.hasNextLine()) {\n                currentLine++;\n                final java.lang.String java.lang.String = scanner.nextLine();\n                java.lang.String java.lang.String = rawLine;\n                if (inMultilineComment) {\n                    if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                        inMultilineComment = false;\n                    } \n                    continue;\n                } \n                if (line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                    inMultilineComment = true;\n                } else {\n                    final int int = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String);\n                    if (cmtI >= 0) {\n                        line = line.substring(0, cmtI);\n                    } \n                    line = line.trim();\n                    if ((line.length()) == 0) {\n                        continue;\n                    } \n                    if (line.contains(\"=\")) {\n                        final java.lang.String[] java.lang.String[] = line.split(\"=\");\n                        if ((parts.int) != 2) {\n                            throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                        } else {\n                            final java.lang.String java.lang.String = parts[0];\n                            final java.lang.String java.lang.String = parts[1];\n                            if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n                                throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n                            } \n                            asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n                        }\n                    } else {\n                        final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                        if ((parts.int) != 4) {\n                            throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                        } else {\n                            try {\n                                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n                                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n                                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n                                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n                                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n                                final char char = r.java.lang.String.charAt(0);\n                                java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n                                if (rules == null) {\n                                    rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                                    ruleMapping.put(patternKey, rules);\n                                } \n                                rules.add(r);\n                            } catch (final java.lang.IllegalArgumentException e) {\n                                throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"location","line":"location"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[194,88,195,196,197,198,199,200,89,201,202,203,204,205,206,207,208,209,210,211],"tindex":"96b130cc-3e71-11e6-a0c3-731009f5d555","method":{"position":"org.apache.commons.codec.digest.HmacUtils:154","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final org.apache.commons.codec.digest.HmacAlgorithms algorithm, final byte[] key) {\n    if (key == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"key","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[88,195,199,89,207,208],"tindex":"96b130cd-3e71-11e6-a0c3-efaa1efac878","method":{"position":"org.apache.commons.codec.digest.HmacUtils:80","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha1(final byte[] key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"96b130ce-3e71-11e6-a0c3-8dbea037b6cd","method":{"position":"org.apache.commons.codec.digest.HmacUtils:474","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtInvocationImpl","sourcecode":"replacedName.contains(dc)"},"failures":[212],"tindex":"96b130cf-3e71-11e6-a0c3-79cd1d861c1a","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:429","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str.contains(str)) {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacedName":"str","dc":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"96b130d0-3e71-11e6-a0c3-616b0440f0a7","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtInvocationImpl","sourcecode":"incl.contains(\" \")"},"failures":[213,214,215,43,216,217,218,219],"tindex":"96b157e1-3e71-11e6-a0c3-3932d221056c","method":{"position":"org.apache.commons.codec.binary.StringUtils:137","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUnchecked(final java.lang.String string, final java.lang.String charsetName) {\n    if (charsetName.contains(\" \")) {\n        {\n            if (string == null) {\n                return null;\n            } \n            try {\n                return string.getBytes(charsetName);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"incl":"charsetName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[89],"tindex":"96b157e2-3e71-11e6-a0c3-71050a7bdf35","method":{"position":"org.apache.commons.codec.digest.HmacUtils:367","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"valueToDigest"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[220],"tindex":"96b157e3-3e71-11e6-a0c3-597bad521c8a","method":{"position":"org.apache.commons.codec.language.Nysiis:247","type":"CtMethodImpl","sourcecode":"public java.lang.String nysiis(java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"MCC\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"NN\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"C\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"FF\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"SSS\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"Y\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"D\");\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length());\n            key.append(str.charAt(0));\n            final char[] char[] = str.toCharArray();\n            final int int = chars.int;\n            for (int int = 1 ; i < len ; i++) {\n                final char char = i < (len - 1) ? chars[(i + 1)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n                final char char = i < (len - 2) ? chars[(i + 2)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n                final char[] char[] = org.apache.commons.codec.language.Nysiis.transcodeRemaining(chars[(i - 1)], chars[i], next, aNext);\n                java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int);\n                if ((chars[i]) != (chars[(i - 1)])) {\n                    key.append(chars[i]);\n                } \n            }\n            if ((key.length()) > 1) {\n                char char = key.charAt(((key.length()) - 1));\n                if (lastChar == 'S') {\n                    key.deleteCharAt(((key.length()) - 1));\n                    lastChar = key.charAt(((key.length()) - 1));\n                } \n                if ((key.length()) > 2) {\n                    final char char = key.charAt(((key.length()) - 2));\n                    if ((last2Char == 'A') && (lastChar == 'Y')) {\n                        key.deleteCharAt(((key.length()) - 2));\n                    } \n                } \n                if (lastChar == 'A') {\n                    key.deleteCharAt(((key.length()) - 1));\n                } \n            } \n            final java.lang.String java.lang.String = key.toString();\n            return org.apache.commons.codec.language.Nysiis.this.isStrict() ? string.substring(0, java.lang.Math.min(org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.int, string.length())) : string;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"96b17ef4-3e71-11e6-a0c3-b9827269c60f","method":{"position":"org.apache.commons.codec.digest.DigestUtils:719","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final java.lang.String data) {\n    if (data == null) {\n        {\n            if ((data.length()) > 0) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"96b17ef5-3e71-11e6-a0c3-634a9828cd0c","method":{"position":"org.apache.commons.codec.language.bm.Rule:579","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input.startsWith(input)) {\n        {\n            if (input == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:445","type":"CtBinaryOperatorImpl","sourcecode":"result >= 0"},"failures":[221,222,223,224,225,226,227,228,229,230,231],"tindex":"96b17ef6-3e71-11e6-a0c3-351cd2523c69","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:240","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected char[] copyData(final int start, final int length) {\n    if (length >= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char[] char[] = new char[length];\n            java.lang.System.arraycopy(char[], start, newData, 0, length);\n            return newData;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[232,233,234],"tindex":"96b17ef7-3e71-11e6-a0c3-57afe590c408","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:888","type":"CtMethodImpl","sourcecode":"private java.lang.String cleanInput(java.lang.String input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (input == null) {\n                return null;\n            } \n            input = input.trim();\n            if ((input.length()) == 0) {\n                return null;\n            } \n            return input.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtInvocationImpl","sourcecode":"str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[],"tindex":"96b17ef8-3e71-11e6-a0c3-c94e4f8c52a5","method":{"position":"org.apache.commons.codec.language.bm.Rule:579","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input.startsWith(input)) {\n        {\n            if (input == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[235],"tindex":"96b1a609-3e71-11e6-a0c3-4bbf3cfa63f1","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:160","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes, final java.lang.String salt) {\n    if (salt == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"salt"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:272","type":"CtBinaryOperatorImpl","sourcecode":"cmtI >= 0"},"failures":[108,109,110,111],"tindex":"96b1a60a-3e71-11e6-a0c3-9f80d8b8d536","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:325","type":"CtMethodImpl","sourcecode":"private static int dEncrypt(int el, final int r, final int s, final int e0, final int e1, final int[] sArr) {\n    if (e1 >= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = r ^ (r >>> 16);\n            int int = v & e0;\n            v &= e1;\n            u = ((u ^ (u << 16)) ^ r) ^ (sArr[s]);\n            int int = ((v ^ (v << 16)) ^ r) ^ (sArr[(s + 1)]);\n            t = (t >>> 4) | (t << 28);\n            el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)]);\n            return el;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmtI":"e1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[236],"tindex":"96b1a60b-3e71-11e6-a0c3-f3097efbcf9b","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:391","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] bytes) {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet, bytes, boolean);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:70","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX)"},"failures":[191],"tindex":"96b1a60c-3e71-11e6-a0c3-53ba9d666e86","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source.endsWith(source)) {\n        {\n            if (source.startsWith(source)) {\n                {\n                    if (source == null) {\n                        return null;\n                    } \n                    return soundex(source, false)[0];\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"source","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:283","type":"CtBinaryOperatorImpl","sourcecode":"(index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))"},"failures":[],"tindex":"96b1cd1d-3e71-11e6-a0c3-ddd44501d28d","method":{"position":"org.apache.commons.codec.language.Metaphone:360","type":"CtMethodImpl","sourcecode":"private boolean regionMatch(final java.lang.StringBuilder string, final int index, final java.lang.String test) {\n    if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(test, index, 6, \"CAESAR\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if ((index >= 0) && (((index + (test.length())) - 1) < (string.length()))) {\n                final java.lang.String java.lang.String = string.substring(index, (index + (test.length())));\n                matches = substring.equals(test);\n            } \n            return matches;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"test"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:162","type":"CtBinaryOperatorImpl","sourcecode":"nameLength > (org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX)"},"failures":[237,124,238,125,126,127,128,129],"tindex":"96b1cd1e-3e71-11e6-a0c3-d5c5fe1b8605","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:597","type":"CtMethodImpl","sourcecode":"private int handleS(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (index > index) {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n                index++;\n            } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n                result.append('X', 'S');\n                index++;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                    result.append('S');\n                } else {\n                    result.append('X');\n                }\n                index += 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n                if (slavoGermanic) {\n                    result.append('S');\n                } else {\n                    result.append('S', 'X');\n                }\n                index += 3;\n            } else if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n                result.append('S', 'X');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n                index = handleSC(value, result, index);\n            } else {\n                if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n                    result.appendAlternate('S');\n                } else {\n                    result.append('S');\n                }\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameLength":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[],"tindex":"96b1cd1f-3e71-11e6-a0c3-fd7e1d190f41","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:133","type":"CtMethodImpl","sourcecode":"private static java.lang.String sha2Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String saltPrefix, final int blocksize, final java.lang.String algorithm) {\n    if (!(algorithm.contains(\"[\"))) {\n        {\n            final int int = keyBytes.int;\n            int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int;\n            boolean boolean = false;\n            if (salt == null) {\n                throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n            } \n            final java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.util.regex.Pattern.matcher(salt);\n            if ((m == null) || (!(m.find()))) {\n                throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n            } \n            if ((m.group(3)) != null) {\n                rounds = java.lang.Integer.parseInt(m.group(3));\n                rounds = java.lang.Math.max(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, java.lang.Math.min(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, rounds));\n                roundsCustom = true;\n            } \n            final java.lang.String java.lang.String = m.group(4);\n            final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n            final int int = saltBytes.int;\n            java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            ctx.update(keyBytes);\n            ctx.update(saltBytes);\n            java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            altCtx.update(keyBytes);\n            altCtx.update(saltBytes);\n            altCtx.update(keyBytes);\n            byte[] byte[] = altCtx.digest();\n            int int = keyBytes.int;\n            while (cnt > blocksize) {\n                ctx.update(altResult, 0, blocksize);\n                cnt -= blocksize;\n            }\n            ctx.update(altResult, 0, cnt);\n            cnt = keyBytes.int;\n            while (cnt > 0) {\n                if ((cnt & 1) != 0) {\n                    ctx.update(altResult, 0, blocksize);\n                } else {\n                    ctx.update(keyBytes);\n                }\n                cnt >>= 1;\n            }\n            altResult = ctx.digest();\n            altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            for (int int = 1 ; i <= keyLen ; i++) {\n                altCtx.update(keyBytes);\n            }\n            byte[] byte[] = altCtx.digest();\n            final byte[] byte[] = new byte[keyLen];\n            int int = 0;\n            while (cp < (keyLen - blocksize)) {\n                java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n                cp += blocksize;\n            }\n            java.lang.System.arraycopy(tempResult, 0, pBytes, cp, (keyLen - cp));\n            altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n                altCtx.update(saltBytes);\n            }\n            tempResult = altCtx.digest();\n            final byte[] byte[] = new byte[saltLen];\n            cp = 0;\n            while (cp < (saltLen - blocksize)) {\n                java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n                cp += blocksize;\n            }\n            java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp));\n            for (int int = 0 ; i <= (rounds - 1) ; i++) {\n                ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                if ((i & 1) != 0) {\n                    ctx.update(pBytes, 0, keyLen);\n                } else {\n                    ctx.update(altResult, 0, blocksize);\n                }\n                if ((i % 3) != 0) {\n                    ctx.update(sBytes, 0, saltLen);\n                } \n                if ((i % 7) != 0) {\n                    ctx.update(pBytes, 0, keyLen);\n                } \n                if ((i & 1) != 0) {\n                    ctx.update(altResult, 0, blocksize);\n                } else {\n                    ctx.update(pBytes, 0, keyLen);\n                }\n                altResult = ctx.digest();\n            }\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(saltPrefix);\n            if (roundsCustom) {\n                buffer.append(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String);\n                buffer.append(rounds);\n                buffer.append(\"$\");\n            } \n            buffer.append(saltString);\n            buffer.append(\"$\");\n            if (blocksize == 32) {\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer);\n            } else {\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer);\n            }\n            java.util.Arrays.fill(tempResult, ((byte)(0)));\n            java.util.Arrays.fill(pBytes, ((byte)(0)));\n            java.util.Arrays.fill(sBytes, ((byte)(0)));\n            ctx.reset();\n            altCtx.reset();\n            java.util.Arrays.fill(keyBytes, ((byte)(0)));\n            java.util.Arrays.fill(saltBytes, ((byte)(0)));\n            return buffer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"algorithm"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"96b21b40-3e71-11e6-a0c3-119f05ddb39e","method":{"position":"org.apache.commons.codec.binary.StringUtils:162","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUsAscii(final java.lang.String string) {\n    if (string.contains(string)) {\n        {\n            if (string == null) {\n                {\n                    if (string == null) {\n                        {\n                            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"string"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"96b21b41-3e71-11e6-a0c3-ddf556254444","method":{"position":"org.apache.commons.codec.digest.DigestUtils:687","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)"},"failures":[239],"tindex":"96b21b42-3e71-11e6-a0c3-bff86cd5e32d","method":{"position":"org.apache.commons.codec.net.QCodec:225","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if (charset.startsWith(charset)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return encodeText(str, charset);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"charset","line":"charset"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"96b21b43-3e71-11e6-a0c3-0f0df089ea41","method":{"position":"org.apache.commons.codec.language.Soundex:245","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic void setMaxLength(final int maxLength) {\n    if (maxLength < 0) {\n        {\n            org.apache.commons.codec.language.Soundex.this.int = maxLength;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"maxLength"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[95,97,240,241,242,243],"tindex":"96b21b44-3e71-11e6-a0c3-f35a2c2521ba","method":{"position":"org.apache.commons.codec.binary.Base64:537","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final byte[] arrayOctet) {\n    if (arrayOctet != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                if ((!(org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i]))) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"arrayOctet"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[118],"tindex":"96b24255-3e71-11e6-a0c3-85cb31d4bcc5","method":{"position":"org.apache.commons.codec.digest.DigestUtils:236","type":"CtMethodImpl","sourcecode":"public static java.lang.String md2Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            if (data == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[130],"tindex":"96b24256-3e71-11e6-a0c3-39077ba5ba40","method":{"position":"org.apache.commons.codec.binary.Base64:568","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeBase64String(final byte[] binaryData) {\n    if (binaryData == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"binaryData"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:535","type":"CtVariableReadImpl","sourcecode":"endsWith"},"failures":[],"tindex":"96b24257-3e71-11e6-a0c3-c398f5ae9fef","method":{"position":"org.apache.commons.codec.binary.Base64:620","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked) {\n    if (isChunked) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (isChunked && isChunked) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, false);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"endsWith":"isChunked"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START)"},"failures":[],"tindex":"96b24258-3e71-11e6-a0c3-0d9be9fb98d5","method":{"position":"org.apache.commons.codec.language.bm.Rule:381","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.PhonemeExpr parsePhonemeExpr(final java.lang.String ph) {\n    if (ph.startsWith(ph)) {\n        {\n            if (ph.startsWith(\"(\")) {\n                if (!(ph.endsWith(\")\"))) {\n                    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n                } \n                final java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();\n                final java.lang.String java.lang.String = ph.substring(1, ((ph.length()) - 1));\n                for (final java.lang.String java.lang.String : body.split(\"[|]\")) {\n                    phs.add(org.apache.commons.codec.language.bm.Rule.parsePhoneme(part));\n                }\n                if ((body.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n                    phs.add(new org.apache.commons.codec.language.bm.Rule.Phoneme(\"\" , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet));\n                } \n                return new org.apache.commons.codec.language.bm.Rule.PhonemeList(phs);\n            } else {\n                return org.apache.commons.codec.language.bm.Rule.parsePhoneme(ph);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"ph","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START":"ph"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:319","type":"CtInvocationImpl","sourcecode":"name1LtRStart.equals(name2RtLStart)"},"failures":[244],"tindex":"96b26969-3e71-11e6-a0c3-ddc8704aac3e","method":{"position":"org.apache.commons.codec.net.BCodec:158","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) throws org.apache.commons.codec.EncoderException {\n    if (value.equals(value)) {\n        {\n            if (value == null) {\n                return null;\n            } \n            return encode(value, org.apache.commons.codec.net.BCodec.this.getCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2RtLStart":"value","name1LtRStart":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)"},"failures":[],"tindex":"96b2696a-3e71-11e6-a0c3-0baf1ef00e39","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source.endsWith(source)) {\n        {\n            if (source.startsWith(source)) {\n                {\n                    if (source == null) {\n                        return null;\n                    } \n                    return soundex(source, false)[0];\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"source","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[33],"tindex":"96b2696b-3e71-11e6-a0c3-adcb8c5ad567","method":{"position":"org.apache.commons.codec.net.QCodec:309","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj == null) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be decoded using Q codec\"));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:87","type":"CtBinaryOperatorImpl","sourcecode":"(offset < 0) || (len < 0)"},"failures":[65,66,67,68,69,70,71,72,73,74,75,76,77,78,80],"tindex":"96b2696c-3e71-11e6-a0c3-81bf05594ae5","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:106","type":"CtMethodImpl","sourcecode":"public void apply(final org.apache.commons.codec.language.bm.Rule.PhonemeExpr phonemeExpr, final int maxPhonemes) {\n    if ((maxPhonemes < 0) || (maxPhonemes < 0)) {\n        {\n            final java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.LinkedHashSet<org.apache.commons.codec.language.bm.Rule.Phoneme>(maxPhonemes);\n            EXPR : for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n                for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeExpr.getPhonemes()) {\n                    final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = left.getLanguages().restrictTo(right.getLanguages());\n                    if (!(languages.isEmpty())) {\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n                        if ((newPhonemes.size()) < maxPhonemes) {\n                            newPhonemes.add(join);\n                            if ((newPhonemes.size()) >= maxPhonemes) {\n                                break EXPR;\n                            } \n                        } \n                    } \n                }\n            }\n            org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.clear();\n            org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.addAll(newPhonemes);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"maxPhonemes","len":"maxPhonemes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[245,179],"tindex":"96b2907d-3e71-11e6-a0c3-b3e4dca5b704","method":{"position":"org.apache.commons.codec.digest.DigestUtils:388","type":"CtMethodImpl","sourcecode":"public static byte[] sha1(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha1Digest(), data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:268","type":"CtBinaryOperatorImpl","sourcecode":"(i % 7) != 0"},"failures":[246,247,248,249,250,251,252,253,254,255,256,257,258,259],"tindex":"96b2907e-3e71-11e6-a0c3-dfba5b86285d","method":{"position":"org.apache.commons.codec.language.Metaphone:370","type":"CtMethodImpl","sourcecode":"private boolean isLastChar(final int wdsz, final int n) {\n    if ((n % 7) != 0) {\n        {\n            return (n + 1) == wdsz;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:304","type":"CtBinaryOperatorImpl","sourcecode":"(last2Char == 'A') && (lastChar == 'Y')"},"failures":[],"tindex":"96b2907f-3e71-11e6-a0c3-d50460533f5d","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:962","type":"CtMethodImpl","sourcecode":"public void appendAlternate(final char value) {\n    if ((value == 'A') && (value == 'Y')) {\n        {\n            if ((value != '0') && (mapped != value)) {\n                {\n                    if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int)) {\n                        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last2Char":"value","lastChar":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[112,116,108,111,260,261,262,263,264,265,266,267],"tindex":"96b29080-3e71-11e6-a0c3-f5886ed9b5da","method":{"position":"org.apache.commons.codec.digest.Crypt:148","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String key, final java.lang.String salt) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"96b29081-3e71-11e6-a0c3-73078a5ac7d1","method":{"position":"org.apache.commons.codec.net.BCodec:92","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(bytes)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.Base64.encodeBase64(bytes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:319","type":"CtInvocationImpl","sourcecode":"name1LtRStart.equals(name2RtLStart)"},"failures":[],"tindex":"96b2b792-3e71-11e6-a0c3-0d40cc026b9c","method":{"position":"org.apache.commons.codec.language.Soundex:183","type":"CtMethodImpl","sourcecode":"private char getMappingCode(final java.lang.String str, final int index) {\n    if (str.equals(str)) {\n        {\n            final char char = org.apache.commons.codec.language.Soundex.this.map(str.charAt(index));\n            if ((index > 1) && (mappedChar != '0')) {\n                final char char = str.charAt((index - 1));\n                if (('H' == hwChar) || ('W' == hwChar)) {\n                    final char char = str.charAt((index - 2));\n                    final char char = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n                    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n                        return 0;\n                    } \n                } \n            } \n            return mappedChar;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2RtLStart":"str","name1LtRStart":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"96b2b793-3e71-11e6-a0c3-a53d3fcc2225","method":{"position":"org.apache.commons.codec.digest.HmacUtils:80","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha1(final byte[] key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtInvocationImpl","sourcecode":"ph.startsWith(\"(\")"},"failures":[81,268,269],"tindex":"96b2b794-3e71-11e6-a0c3-7d2e6c430664","method":{"position":"org.apache.commons.codec.language.SoundexUtils:109","type":"CtMethodImpl","sourcecode":"static int differenceEncoded(final java.lang.String es1, final java.lang.String es2) {\n    if (es1.startsWith(\"(\")) {\n        {\n            if ((es1 == null) || (es2 == null)) {\n                return 0;\n            } \n            final int int = java.lang.Math.min(es1.length(), es2.length());\n            int int = 0;\n            for (int int = 0 ; i < lengthToMatch ; i++) {\n                if ((es1.charAt(i)) == (es2.charAt(i))) {\n                    diff++;\n                } \n            }\n            return diff;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"es1"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[],"tindex":"96b2b795-3e71-11e6-a0c3-595da001cd50","method":{"position":"org.apache.commons.codec.digest.DigestUtils:236","type":"CtMethodImpl","sourcecode":"public static java.lang.String md2Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            if (data == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[270],"tindex":"96b2dea6-3e71-11e6-a0c3-d36c964daf65","method":{"position":"org.apache.commons.codec.digest.DigestUtils:672","type":"CtMethodImpl","sourcecode":"public static byte[] sha512(final java.lang.String data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"96b2dea7-3e71-11e6-a0c3-514f2d1c6371","method":{"position":"org.apache.commons.codec.binary.StringUtils:302","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringIso8859_1(final byte[] bytes) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(bytes)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtInvocationImpl","sourcecode":"replacedName.contains(dc)"},"failures":[],"tindex":"96b2dea8-3e71-11e6-a0c3-6fe85bb17df5","method":{"position":"org.apache.commons.codec.binary.StringUtils:162","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUsAscii(final java.lang.String string) {\n    if (string.contains(string)) {\n        {\n            if (string == null) {\n                {\n                    if (string == null) {\n                        {\n                            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacedName":"string","dc":"string"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:289","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"96b2dea9-3e71-11e6-a0c3-21617e0ab573","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:175","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n                    if ((str.length()) == 0) {\n                        return str;\n                    } \n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    sBuf.append(str.charAt(0));\n                    char char;\n                    char char;\n                    last = '*';\n                    for (int int = 0 ; i < (str.length()) ; i++) {\n                        current = getMappingCode(str.charAt(i));\n                        if (current == last) {\n                            continue;\n                        } else if (current != 0) {\n                            sBuf.append(current);\n                        } \n                        last = current;\n                    }\n                    return sBuf.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:301","type":"CtBinaryOperatorImpl","sourcecode":"element == key"},"failures":[],"tindex":"96b2deaa-3e71-11e6-a0c3-8582819ed027","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:956","type":"CtMethodImpl","sourcecode":"public void appendPrimary(final char value) {\n    if (value == value) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int)) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"value","element":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:422","type":"CtBinaryOperatorImpl","sourcecode":"cmtI >= 0"},"failures":[],"tindex":"96b2deab-3e71-11e6-a0c3-e17cc7dab841","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:260","type":"CtMethodImpl","sourcecode":"public void setMaxCodeLen(final int maxCodeLen) {\n    if (maxCodeLen >= 0) {\n        {\n            org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmtI":"maxCodeLen"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[60],"tindex":"96b305bc-3e71-11e6-a0c3-e95f9c8b4728","method":{"position":"org.apache.commons.codec.net.URLCodec:309","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof byte[]) {\n                return encode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtBinaryOperatorImpl","sourcecode":"len == (org.apache.commons.codec.binary.BaseNCodec.EOF)"},"failures":[],"tindex":"96b305bd-3e71-11e6-a0c3-4f6865bbaab7","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:550","type":"CtMethodImpl","sourcecode":"private int handleL(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index == index) {\n        {\n            if ((charAt(value, (index + 1))) == 'L') {\n                if (conditionL0(value, index)) {\n                    result.appendPrimary('L');\n                } else {\n                    result.append('L');\n                }\n                index += 2;\n            } else {\n                index++;\n                result.append('L');\n            }\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"index","len":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[88,89],"tindex":"96b305be-3e71-11e6-a0c3-d3c3b4f8f6d7","method":{"position":"org.apache.commons.codec.digest.HmacUtils:337","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key), valueToDigest).doFinal();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"key","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[65,66,67,68,69,70,271,272,71,72,73,273,274,74,75,275,276,76,77,277,78,278,279,280,79,80],"tindex":"96b305bf-3e71-11e6-a0c3-2d3976d65873","method":{"position":"org.apache.commons.codec.language.bm.Lang:129","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang loadFromResource(final java.lang.String languageRulesResourceName, final org.apache.commons.codec.language.bm.Languages languages) {\n    if (languageRulesResourceName.startsWith(languageRulesResourceName)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (languageRulesResourceName == null) {\n                {\n                    final java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Lang.LangRule>();\n                    final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.Class.getClassLoader().getResourceAsStream(languageRulesResourceName);\n                    if (lRulesIS == null) {\n                        throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)));\n                    } \n                    final java.util.Scanner java.util.Scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                    try {\n                        boolean boolean = false;\n                        while (scanner.hasNextLine()) {\n                            final java.lang.String java.lang.String = scanner.nextLine();\n                            java.lang.String java.lang.String = rawLine;\n                            if (inExtendedComment) {\n                                if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                                    inExtendedComment = false;\n                                } \n                            } else {\n                                if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                                    inExtendedComment = true;\n                                } else {\n                                    final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                                    if (cmtI >= 0) {\n                                        line = line.substring(0, cmtI);\n                                    } \n                                    line = line.trim();\n                                    if ((line.length()) == 0) {\n                                        continue;\n                                    } \n                                    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                                    if ((parts.int) != 3) {\n                                        throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                                    } \n                                    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n                                    final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n                                    final boolean boolean = parts[2].equals(\"true\");\n                                    rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n                                }\n                            }\n                        }\n                    } finally {\n                        scanner.close();\n                    }\n                    return new org.apache.commons.codec.language.bm.Lang(rules , languages);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"languageRulesResourceName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:224","type":"CtBinaryOperatorImpl","sourcecode":"value instanceof java.lang.String"},"failures":[281],"tindex":"96b32cd0-3e71-11e6-a0c3-759fd4970df7","method":{"position":"org.apache.commons.codec.language.Soundex:149","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n            } \n            return soundex(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:389","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[282],"tindex":"96b32cd1-3e71-11e6-a0c3-dd17fd2a43f5","method":{"position":"org.apache.commons.codec.net.QCodec:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj instanceof java.lang.String)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"96b32cd2-3e71-11e6-a0c3-8d64b90093c5","method":{"position":"org.apache.commons.codec.digest.DigestUtils:593","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha384Hex(final byte[] data) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:68","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX)"},"failures":[],"tindex":"96b32cd3-3e71-11e6-a0c3-cd11fecc2c6d","method":{"position":"org.apache.commons.codec.digest.DigestUtils:210","type":"CtMethodImpl","sourcecode":"public static byte[] md2(final java.lang.String data) {\n    if (data.startsWith(data)) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.md2(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX":"data","salt":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"96b32cd4-3e71-11e6-a0c3-b96d7bc79953","method":{"position":"org.apache.commons.codec.binary.Base64:705","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final byte[] base64Data) {\n    if (base64Data == null) {\n        {\n            if (base64Data == null) {\n                {\n                    return new org.apache.commons.codec.binary.Base64().decode(base64Data);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"base64Data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[65,66,67,68,69,70,71,72,73,74,75,76,77,78],"tindex":"96b32cd5-3e71-11e6-a0c3-173d8f4edb7e","method":{"position":"org.apache.commons.codec.language.bm.Rule:198","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if ((input.length()) == 0) {\n        {\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[],"tindex":"96b32cd6-3e71-11e6-a0c3-eb76316cea9d","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:276","type":"CtMethodImpl","sourcecode":"boolean isVowel(final java.lang.String letter) {\n    if ((letter.length()) > 0) {\n        {\n            return ((((letter.equalsIgnoreCase(\"E\")) || (letter.equalsIgnoreCase(\"A\"))) || (letter.equalsIgnoreCase(\"O\"))) || (letter.equalsIgnoreCase(\"I\"))) || (letter.equalsIgnoreCase(\"U\"));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"letter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[199,211],"tindex":"96b32cd7-3e71-11e6-a0c3-f5254bdf95db","method":{"position":"org.apache.commons.codec.digest.HmacUtils:134","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha512(final byte[] key) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:279","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[44,46,50,283,284,62,285,55,56,286,287,288,289,290,57,291,292,94,293,123,294,130,295,296,297,243,298,299,300,301,302,303,304,305,306,307,58,308,214,309,310,311,312,118,313,245,314,315,316,270,179,317,194,88,318,197,89,202,203,205,207,211],"tindex":"96b353e8-3e71-11e6-a0c3-ef551a9f11b9","method":{"position":"org.apache.commons.codec.binary.StringUtils:234","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf8(final java.lang.String string) {\n    if ((string.length()) == 0) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"96b353e9-3e71-11e6-a0c3-f5e76012411d","method":{"position":"org.apache.commons.codec.language.bm.Lang:129","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang loadFromResource(final java.lang.String languageRulesResourceName, final org.apache.commons.codec.language.bm.Languages languages) {\n    if (languageRulesResourceName.startsWith(languageRulesResourceName)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (languageRulesResourceName == null) {\n                {\n                    final java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Lang.LangRule>();\n                    final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.Class.getClassLoader().getResourceAsStream(languageRulesResourceName);\n                    if (lRulesIS == null) {\n                        throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)));\n                    } \n                    final java.util.Scanner java.util.Scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                    try {\n                        boolean boolean = false;\n                        while (scanner.hasNextLine()) {\n                            final java.lang.String java.lang.String = scanner.nextLine();\n                            java.lang.String java.lang.String = rawLine;\n                            if (inExtendedComment) {\n                                if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                                    inExtendedComment = false;\n                                } \n                            } else {\n                                if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                                    inExtendedComment = true;\n                                } else {\n                                    final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                                    if (cmtI >= 0) {\n                                        line = line.substring(0, cmtI);\n                                    } \n                                    line = line.trim();\n                                    if ((line.length()) == 0) {\n                                        continue;\n                                    } \n                                    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                                    if ((parts.int) != 3) {\n                                        throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                                    } \n                                    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n                                    final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n                                    final boolean boolean = parts[2].equals(\"true\");\n                                    rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n                                }\n                            }\n                        }\n                    } finally {\n                        scanner.close();\n                    }\n                    return new org.apache.commons.codec.language.bm.Lang(rules , languages);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"languageRulesResourceName","line":"languageRulesResourceName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[17,18,319,46,50,320,321,322,119,323,324,120,93,94,95,325,2,3,4,5,96,97,98,121,326,327,104,122,293,123,294,130,297,298,302,308],"tindex":"96b353ea-3e71-11e6-a0c3-bf9a1b2aa977","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:515","type":"CtMethodImpl","sourcecode":"public long getEncodedLength(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            long long = ((((pArray.int) + (int)) - 1) / (int)) * ((long)(int));\n            if ((int) > 0) {\n                len += (((len + (int)) - 1) / (int)) * (int);\n            } \n            return len;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:279","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[],"tindex":"96b353eb-3e71-11e6-a0c3-336e779ba446","method":{"position":"org.apache.commons.codec.binary.StringUtils:238","type":"CtMethodImpl","sourcecode":"private static java.lang.IllegalStateException newIllegalStateException(final java.lang.String charsetName, final java.io.UnsupportedEncodingException e) {\n    if ((charsetName.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254840630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.IllegalStateException(((charsetName + \": \") + e));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"charsetName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
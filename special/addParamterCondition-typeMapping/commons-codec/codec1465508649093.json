{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":25,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":231,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":48,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":115,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":54,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":189,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":187,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":188,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_1_Returns5_Successfully":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_11_Returns_3_Successfully":55,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":190,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":42,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":11,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":222,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":28,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":36,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":91,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":218,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":244,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":228,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":179,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_8_Returns3_Successfully":75,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":208,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":233,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":145,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":63,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":197,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":199,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":198,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":131,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":132,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":47,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":66,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":6,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":173,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":64,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":106,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":133,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":134,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":171,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":217,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":122,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":245,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":141,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":205,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":206,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":241,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":127,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":221,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":160,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":113,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":72,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":101,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":26,"org.apache.commons.codec.language.SoundexTest.testB650":186,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":52,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_10_Returns3_Successfully":77,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":81,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":4,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":126,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":67,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":119,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":108,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":60,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":226,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":74,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_6_Returns4_Successfully":37,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":169,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":172,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":147,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":121,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":41,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":138,"org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull":174,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":116,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":69,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":112,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":50,"org.apache.commons.codec.binary.Base64Test.testUUID":5,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":103,"org.apache.commons.codec.binary.Base64Test.testSingletons":140,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":0,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":143,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":177,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":153,"org.apache.commons.codec.binary.Base64Test.testPairs":128,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":38,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":227,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":100,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":194,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully2":56,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":43,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":20,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":155,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":175,"org.apache.commons.codec.language.SoundexTest.testEncodeNull":200,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":39,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":88,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":164,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":225,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":214,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":215,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":195,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":243,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":14,"org.apache.commons.codec.digest.B64Test.testB64from24bit":96,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert":223,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":99,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":130,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_7_Returns4_Successfully":51,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":79,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":211,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":57,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":151,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":58,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":65,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":120,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":240,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":71,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":180,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":159,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":84,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":158,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":78,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":83,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":92,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeNull":207,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":16,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":238,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":181,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":117,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":152,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_2_Returns5_Successfully":46,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":150,"org.apache.commons.codec.binary.Base64Test.testTriplets":125,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":242,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":23,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":21,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":24,"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence":209,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":3,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":166,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":136,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":148,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":32,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":18,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":7,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":196,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":27,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":229,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":102,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":165,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":167,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":176,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":109,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":156,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":168,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":178,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":22,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":191,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":82,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":89,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":70,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":93,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":157,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":107,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":104,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":182,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":30,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":149,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":236,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":40,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_13_Returns_1_Successfully":59,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":87,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":33,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":237,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":61,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":90,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":202,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":232,"org.apache.commons.codec.language.MetaphoneTest.testWhy":213,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":124,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":62,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":201,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":105,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":95,"org.apache.commons.codec.language.MetaphoneTest.testTCH":212,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":97,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":183,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":216,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":184,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":185,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":154,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":10,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":146,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":220,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":219,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":85,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":135,"org.apache.commons.codec.binary.Base64Test.testBase64":144,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":15,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":111,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":137,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":161,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":12,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":230,"org.apache.commons.codec.binary.Base64Test.testCodec112":139,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":73,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":224,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":239,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":68,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":123,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":234,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":204,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":86,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":192,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":210,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":118,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":203,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":162,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":45,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":80,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":19,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":94,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":142,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":235,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":114,"org.apache.commons.codec.language.SoundexTest.testDifference":193,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":170,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":163,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":9,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully":76,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":110,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":49,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_7_Return4_Successfully":35,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":129},"transformations":[{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[0,1,2,3,4],"tindex":"4bfa863d-2e8b-11e6-93c1-9b25c4946507","method":{"position":"org.apache.commons.codec.net.QCodec:207","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if (str.endsWith(str)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return encodeText(str, charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"str","line":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:516","type":"CtVariableReadImpl","sourcecode":"branching"},"failures":[],"tindex":"4bfb227e-2e8b-11e6-93c1-2b0d7205e544","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"branching":"concat"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[5,6],"tindex":"4bfb498f-2e8b-11e6-93c1-6978f4be1987","method":{"position":"org.apache.commons.codec.binary.Base64:581","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64URLSafe(final byte[] binaryData) {\n    if (binaryData == binaryData) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"binaryData","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"binaryData"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtInvocationImpl","sourcecode":"str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"4bfb70a0-2e8b-11e6-93c1-3df6e964999c","method":{"position":"org.apache.commons.codec.language.bm.Rule:402","type":"CtMethodImpl","sourcecode":"private static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> parseRules(final java.util.Scanner scanner, final java.lang.String location) {\n    if (location.startsWith(location)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = new java.util.HashMap<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>();\n            int int = 0;\n            boolean boolean = false;\n            while (scanner.hasNextLine()) {\n                currentLine++;\n                final java.lang.String java.lang.String = scanner.nextLine();\n                java.lang.String java.lang.String = rawLine;\n                if (inMultilineComment) {\n                    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                        inMultilineComment = false;\n                    } \n                } else {\n                    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                        inMultilineComment = true;\n                    } else {\n                        final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                        if (cmtI >= 0) {\n                            line = line.substring(0, cmtI);\n                        } \n                        line = line.trim();\n                        if ((line.length()) == 0) {\n                            continue;\n                        } \n                        if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                            final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n                            if (incl.contains(\" \")) {\n                                throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n                            } else {\n                                lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n                            }\n                        } else {\n                            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                            if ((parts.int) != 4) {\n                                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                            } else {\n                                try {\n                                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                                    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                                    final int int = currentLine;\n                                    final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                                        private final int myLine = cLine;\n\n                                        private final java.lang.String loc = location;\n\n                                        @java.lang.Override\n                                        public java.lang.String toString() {\n                                            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                                            sb.append(\"Rule\");\n                                            sb.append(\"{line=\").append(int);\n                                            sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                                            sb.append(\", pat='\").append(pat).append('\\'');\n                                            sb.append(\", lcon='\").append(lCon).append('\\'');\n                                            sb.append(\", rcon='\").append(rCon).append('\\'');\n                                            sb.append('}');\n                                            return sb.toString();\n                                        }\n                                    };\n                                    final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                                    java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                                    if (rules == null) {\n                                        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                                        lines.put(patternKey, rules);\n                                    } \n                                    rules.add(r);\n                                } catch (final java.lang.IllegalArgumentException e) {\n                                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return lines;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"location","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"location"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:279","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[25,26,27,28,29],"tindex":"4bfbe5d1-2e8b-11e6-93c1-73bae020eae0","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:216","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) {\n    if ((value.length()) == 0) {\n        {\n            return doubleMetaphone(value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:277","type":"CtBinaryOperatorImpl","sourcecode":"printable == null"},"failures":[30,31,32],"tindex":"4bfc0ce2-2e8b-11e6-93c1-39954136dde0","method":{"position":"org.apache.commons.codec.StringEncoderComparator:75","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int compare(final java.lang.Object o1, final java.lang.Object o2) {\n    if (o2 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o2 == null) {\n                {\n                    int int = 0;\n                    try {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        final java.lang.Comparable<java.lang.Comparable<?>> java.lang.Comparable<java.lang.Comparable<?>> = ((java.lang.Comparable<java.lang.Comparable<?>>)(org.apache.commons.codec.StringEncoderComparator.this.org.apache.commons.codec.StringEncoder.encode(o1)));\n                        final java.lang.Comparable<?> java.lang.Comparable<?> = ((java.lang.Comparable<?>)(org.apache.commons.codec.StringEncoderComparator.this.org.apache.commons.codec.StringEncoder.encode(o2)));\n                        compareCode = s1.compareTo(s2);\n                    } catch (final org.apache.commons.codec.EncoderException ee) {\n                        compareCode = 0;\n                    }\n                    return compareCode;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"printable":"o2"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[],"tindex":"4bfc33f3-2e8b-11e6-93c1-178b2790a142","method":{"position":"org.apache.commons.codec.net.QCodec:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if ((obj.length()) == 0) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"));\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"obj"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:135","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"tindex":"4bfcd034-2e8b-11e6-93c1-fb706ff034a5","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:184","type":"CtMethodImpl","sourcecode":"int getMinRating(final int sumLength) {\n    if (sumLength == 0) {\n        {\n            int int = 0;\n            if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            }\n            return minRating;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"sumLength"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:176","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[80,81,82,83,84,85],"tindex":"4bfd4565-2e8b-11e6-93c1-bd458b1e487a","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:462","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(final java.lang.String source) {\n    if (source == null) {\n        {\n            final java.lang.String[] java.lang.String[] = soundex(source, true);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            for (final java.lang.String java.lang.String : branches) {\n                sb.append(branch);\n                if ((++index) < (branches.int)) {\n                    sb.append('|');\n                } \n            }\n            return sb.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:355","type":"CtBinaryOperatorImpl","sourcecode":"result >= 0"},"failures":[86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"tindex":"4bfd4566-2e8b-11e6-93c1-0dbce14fb648","method":{"position":"org.apache.commons.codec.digest.B64:54","type":"CtMethodImpl","sourcecode":"static void b64from24bit(final byte b2, final byte b1, final byte b0, final int outLen, final java.lang.StringBuilder buffer) {\n    if (outLen >= 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255);\n            int int = outLen;\n            while ((n--) > 0) {\n                buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)));\n                w >>= 6;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"outLen"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtBinaryOperatorImpl","sourcecode":"(!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))"},"failures":[],"tindex":"4bfd6c77-2e8b-11e6-93c1-bf2df4da2622","method":{"position":"org.apache.commons.codec.binary.StringUtils:198","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Be(final java.lang.String string) {\n    if ((!(string.startsWith(string))) || (!(text.endsWith(string)))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.net.RFC1522Codec.POSTFIX":"string","org.apache.commons.codec.net.RFC1522Codec.PREFIX":"string","text":"string"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:386","type":"CtBinaryOperatorImpl","sourcecode":"(i % 7) != 0"},"failures":[108,109,25,110,111],"tindex":"4bfd9388-2e8b-11e6-93c1-e5b7e8d90397","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:904","type":"CtMethodImpl","sourcecode":"protected char charAt(final java.lang.String value, final int index) {\n    if ((index % 7) != 0) {\n        {\n            if ((index < 0) || (index >= (value.length()))) {\n                return java.lang.Character.java.lang.Character.char;\n            } \n            return value.charAt(index);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"4bfd9389-2e8b-11e6-93c1-8f758441766c","method":{"position":"org.apache.commons.codec.digest.HmacUtils:230","type":"CtMethodImpl","sourcecode":"public static byte[] hmacMd5(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key), valueToDigest).doFinal();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtBinaryOperatorImpl","sourcecode":"((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)"},"failures":[],"tindex":"4bfd938a-2e8b-11e6-93c1-4515115bcd9d","method":{"position":"org.apache.commons.codec.binary.StringUtils:279","type":"CtMethodImpl","sourcecode":"public static java.lang.String newString(final byte[] bytes, final java.lang.String charsetName) {\n    if (((charsetName.length()) != 1) || ((charsetName.length()) != 1)) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            try {\n                return new java.lang.String(bytes , charsetName);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"leftCharacter":"charsetName","rightCharacter":"charsetName"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[],"tindex":"4bfdba9b-2e8b-11e6-93c1-1f4884aedda9","method":{"position":"org.apache.commons.codec.language.AbstractCaverphone:56","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if (source == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(source instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.AbstractCaverphone.this.encode(((java.lang.String)(source)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[13],"tindex":"4bfdba9c-2e8b-11e6-93c1-c14e03e712df","method":{"position":"org.apache.commons.codec.language.bm.Rule:319","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.codec.language.bm.Rule> getInstance(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang.equalsIgnoreCase(lang)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Rule.getInstance(nameType, rt, org.apache.commons.codec.language.bm.Languages.LanguageSet.from(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(lang))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"lang","name1":"lang"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[80,81,82,83,84,112,113,114,85,115],"tindex":"4bfdba9d-2e8b-11e6-93c1-6b650396eb95","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:135","type":"CtMethodImpl","sourcecode":"public void processNextReplacement(final java.lang.String replacement, final boolean forceAppend) {\n    if (replacement == null) {\n        {\n            final boolean boolean = (((java.lang.String) == null) || (!(java.lang.String.endsWith(replacement)))) || forceAppend;\n            if (append && ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int))) {\n                java.lang.StringBuilder.append(replacement);\n                if ((java.lang.StringBuilder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n                    java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length());\n                } \n                java.lang.String = null;\n            } \n            java.lang.String = replacement;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"replacement"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:445","type":"CtBinaryOperatorImpl","sourcecode":"result >= 0"},"failures":[30,116,117,118,119,108,109,25,120,27,110,111,29],"tindex":"4bfde1ae-2e8b-11e6-93c1-25edd2c17533","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:269","type":"CtMethodImpl","sourcecode":"private int handleAEIOUY(final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (index >= 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index == 0) {\n                result.append('A');\n            } \n            return index + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"4bfde1af-2e8b-11e6-93c1-65b50658391a","method":{"position":"org.apache.commons.codec.net.URLCodec:269","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (((charset.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"charset"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:540","type":"CtVariableReadImpl","sourcecode":"branching"},"failures":[108,109,25,110,111],"tindex":"4bfe08c0-2e8b-11e6-93c1-115cf7a36f9d","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:408","type":"CtMethodImpl","sourcecode":"private int handleG(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (slavoGermanic) {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                index = handleGH(value, result, index);\n            } else if ((charAt(value, (index + 1))) == 'N') {\n                if (((index == 1) && (isVowel(charAt(value, 0)))) && (!slavoGermanic)) {\n                    result.append(\"KN\", \"N\");\n                } else if (((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"EY\"))) && ((charAt(value, (index + 1))) != 'Y')) && (!slavoGermanic)) {\n                    result.append(\"N\", \"KN\");\n                } else {\n                    result.append(\"KN\");\n                }\n                index = index + 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"LI\")) && (!slavoGermanic)) {\n                result.append(\"KL\", \"L\");\n                index += 2;\n            } else if ((index == 0) && (((charAt(value, (index + 1))) == 'Y') || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])))) {\n                result.append('K', 'J');\n                index += 2;\n            } else if (((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ER\")) || ((charAt(value, (index + 1))) == 'Y')) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"E\", \"I\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"RGY\", \"OGY\")))) {\n                result.append('K', 'J');\n                index += 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"E\", \"I\", \"Y\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"AGGI\", \"OGGI\"))) {\n                if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ET\"))) {\n                    result.append('K');\n                } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n                    result.append('J');\n                } else {\n                    result.append('J', 'K');\n                }\n                index += 2;\n            } else if ((charAt(value, (index + 1))) == 'G') {\n                index += 2;\n                result.append('K');\n            } else {\n                index++;\n                result.append('K');\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"branching":"slavoGermanic"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:290","type":"CtBinaryOperatorImpl","sourcecode":"lineLength > 0"},"failures":[121,122,123,124,125,126,127,128,5,129,130,131,132,133,134,135,6,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164],"tindex":"4bfe2fd1-2e8b-11e6-93c1-6f1054c399b6","method":{"position":"org.apache.commons.codec.binary.Base64:331","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid encode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inPos > 0) {\n        {\n            if (context.boolean) {\n                return ;\n            } \n            if (inAvail < 0) {\n                context.boolean = true;\n                if ((0 == (context.int)) && ((int) == 0)) {\n                    return ;\n                } \n                final byte[] byte[] = ensureBufferSize(int, context);\n                final int int = context.int;\n                switch (context.int) {\n                    case 0 :\n                        break;\n                    case 1 :\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                            buffer[((context.int)++)] = byte;\n                            buffer[((context.int)++)] = byte;\n                        } \n                        break;\n                    case 2 :\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 10) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                            buffer[((context.int)++)] = byte;\n                        } \n                        break;\n                    default :\n                        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                }\n                context.int += (context.int) - savedPos;\n                if (((int) > 0) && ((context.int) > 0)) {\n                    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                    context.int += byte[].int;\n                } \n            } else {\n                for (int int = 0 ; i < inAvail ; i++) {\n                    final byte[] byte[] = ensureBufferSize(int, context);\n                    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                    int int = in[(inPos++)];\n                    if (b < 0) {\n                        b += 256;\n                    } \n                    context.int = ((context.int) << 8) + b;\n                    if (0 == (context.int)) {\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n                        if (((int) > 0) && ((int) <= (context.int))) {\n                            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                            context.int += byte[].int;\n                            context.int = 0;\n                        } \n                    } \n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineLength":"inPos"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtBinaryOperatorImpl","sourcecode":"((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))"},"failures":[],"tindex":"4bfe7df2-2e8b-11e6-93c1-5d9ac7c1822a","method":{"position":"org.apache.commons.codec.binary.StringUtils:238","type":"CtMethodImpl","sourcecode":"private static java.lang.IllegalStateException newIllegalStateException(final java.lang.String charsetName, final java.io.UnsupportedEncodingException e) {\n    if (((charsetName == null) || (charsetName.equalsIgnoreCase(name2))) || (charsetName.equalsIgnoreCase(name2))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.IllegalStateException(((charsetName + \": \") + e));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"charsetName","name2":"charsetName","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"charsetName"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:125","type":"CtBinaryOperatorImpl","sourcecode":"urlsafe == null"},"failures":[],"tindex":"4bfe7df3-2e8b-11e6-93c1-a5653f850632","method":{"position":"org.apache.commons.codec.StringEncoderComparator:75","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int compare(final java.lang.Object o1, final java.lang.Object o2) {\n    if (o2 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o2 == null) {\n                {\n                    int int = 0;\n                    try {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        final java.lang.Comparable<java.lang.Comparable<?>> java.lang.Comparable<java.lang.Comparable<?>> = ((java.lang.Comparable<java.lang.Comparable<?>>)(org.apache.commons.codec.StringEncoderComparator.this.org.apache.commons.codec.StringEncoder.encode(o1)));\n                        final java.lang.Comparable<?> java.lang.Comparable<?> = ((java.lang.Comparable<?>)(org.apache.commons.codec.StringEncoderComparator.this.org.apache.commons.codec.StringEncoder.encode(o2)));\n                        compareCode = s1.compareTo(s2);\n                    } catch (final org.apache.commons.codec.EncoderException ee) {\n                        compareCode = 0;\n                    }\n                    return compareCode;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"urlsafe":"o2"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[165],"tindex":"4bfea504-2e8b-11e6-93c1-0552dec10cd9","method":{"position":"org.apache.commons.codec.digest.DigestUtils:469","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha256Digest(), data);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[129,136,166,167,168,169],"tindex":"4bfea505-2e8b-11e6-93c1-cfaf1e45baf0","method":{"position":"org.apache.commons.codec.binary.Base64:537","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final byte[] arrayOctet) {\n    if (arrayOctet == null) {\n        {\n            for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                if ((!(org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i]))) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"arrayOctet"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:447","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")"},"failures":[],"tindex":"4bfecc16-2e8b-11e6-93c1-c9061bc11f0a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:384","type":"CtMethodImpl","sourcecode":"private int handleD(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                    result.append('J');\n                    index += 3;\n                } else {\n                    result.append(\"TK\");\n                    index += 2;\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n                result.append('T');\n                index += 2;\n            } else {\n                result.append('T');\n                index++;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"4bfecc17-2e8b-11e6-93c1-35d7267c26b8","method":{"position":"org.apache.commons.codec.language.bm.Rule:593","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(input);\n            return matcher.find();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\")\"))"},"failures":[170,171,172,173,174,175,176],"tindex":"4bfecc18-2e8b-11e6-93c1-1198db16d830","method":{"position":"org.apache.commons.codec.net.URLCodec:224","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException {\n    if (!(str.endsWith(\")\"))) {\n        throw new java.io.UnsupportedEncodingException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtBinaryOperatorImpl","sourcecode":"(!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))"},"failures":[],"tindex":"4bfef329-2e8b-11e6-93c1-2f57eeca5b78","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:294","type":"CtMethodImpl","sourcecode":"int leftToRightThenRightToLeftProcessing(final java.lang.String name1, final java.lang.String name2) {\n    if ((!(name1.startsWith(name2))) || (!(text.endsWith(name1)))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char[] char[] = name1.toCharArray();\n            final char[] char[] = name2.toCharArray();\n            final int int = (name1.length()) - 1;\n            final int int = (name2.length()) - 1;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            for (int int = 0 ; i < (name1Char.int) ; i++) {\n                if (i > name2Size) {\n                    break;\n                } \n                name1LtRStart = name1.substring(i, (i + 1));\n                name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n                name2RtLStart = name2.substring(i, (i + 1));\n                name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n                if (name1LtRStart.equals(name2RtLStart)) {\n                    name1Char[i] = ' ';\n                    name2Char[i] = ' ';\n                } \n                if (name1LtREnd.equals(name2RtLEnd)) {\n                    name1Char[(name1Size - i)] = ' ';\n                    name2Char[(name2Size - i)] = ' ';\n                } \n            }\n            final java.lang.String java.lang.String = new java.lang.String(name1Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            final java.lang.String java.lang.String = new java.lang.String(name2Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            if ((strA.length()) > (strB.length())) {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())));\n            } else {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.net.RFC1522Codec.POSTFIX":"name1","org.apache.commons.codec.net.RFC1522Codec.PREFIX":"name2","text":"name1"},"type":"special","returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)"},"failures":[],"tindex":"4bff1a3a-2e8b-11e6-93c1-29747b7f9b37","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:133","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj.startsWith(obj)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n            } \n            return soundex(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"obj","line":"obj"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[177,26,28],"tindex":"4bff1a3b-2e8b-11e6-93c1-79fa37869582","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:75","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return doubleMetaphone(value, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtBinaryOperatorImpl","sourcecode":"(salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))"},"failures":[],"tindex":"4bff1a3c-2e8b-11e6-93c1-4d8ed1e30c69","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:86","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(java.lang.String value, final boolean alternate) {\n    if ((value != null) && (!(salt.startsWith(value)))) {\n        {\n            value = cleanInput(value);\n            if (value == null) {\n                return null;\n            } \n            final boolean boolean = isSlavoGermanic(value);\n            int int = isSilentStart(value) ? 1 : 0;\n            final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult = new org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult(org.apache.commons.codec.language.DoubleMetaphone.this.getMaxCodeLen());\n            while ((!(result.isComplete())) && (index <= ((value.length()) - 1))) {\n                switch (value.charAt(index)) {\n                    case 'A' :\n                    case 'E' :\n                    case 'I' :\n                    case 'O' :\n                    case 'U' :\n                    case 'Y' :\n                        index = handleAEIOUY(result, index);\n                        break;\n                    case 'B' :\n                        result.append('P');\n                        index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n                        break;\n                    case '\\u00c7' :\n                        result.append('S');\n                        index++;\n                        break;\n                    case 'C' :\n                        index = handleC(value, result, index);\n                        break;\n                    case 'D' :\n                        index = handleD(value, result, index);\n                        break;\n                    case 'F' :\n                        result.append('F');\n                        index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n                        break;\n                    case 'G' :\n                        index = handleG(value, result, index, slavoGermanic);\n                        break;\n                    case 'H' :\n                        index = handleH(value, result, index);\n                        break;\n                    case 'J' :\n                        index = handleJ(value, result, index, slavoGermanic);\n                        break;\n                    case 'K' :\n                        result.append('K');\n                        index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n                        break;\n                    case 'L' :\n                        index = handleL(value, result, index);\n                        break;\n                    case 'M' :\n                        result.append('M');\n                        index = conditionM0(value, index) ? index + 2 : index + 1;\n                        break;\n                    case 'N' :\n                        result.append('N');\n                        index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n                        break;\n                    case '\\u00d1' :\n                        result.append('N');\n                        index++;\n                        break;\n                    case 'P' :\n                        index = handleP(value, result, index);\n                        break;\n                    case 'Q' :\n                        result.append('K');\n                        index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n                        break;\n                    case 'R' :\n                        index = handleR(value, result, index, slavoGermanic);\n                        break;\n                    case 'S' :\n                        index = handleS(value, result, index, slavoGermanic);\n                        break;\n                    case 'T' :\n                        index = handleT(value, result, index);\n                        break;\n                    case 'V' :\n                        result.append('F');\n                        index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n                        break;\n                    case 'W' :\n                        index = handleW(value, result, index);\n                        break;\n                    case 'X' :\n                        index = handleX(value, result, index);\n                        break;\n                    case 'Z' :\n                        index = handleZ(value, result, index, slavoGermanic);\n                        break;\n                    default :\n                        index++;\n                        break;\n                }\n            }\n            return alternate ? result.getAlternate() : result.getPrimary();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"value","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"value"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[123,124,125,127,128,5,129,130,131,132,133,134,6,136,137,138,139,178,140,141,142,143,144,146,148,149,179,180,181,150,155,157,161,162,163,164],"tindex":"4bffdd8d-2e8b-11e6-93c1-c57b3e1c61de","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:515","type":"CtMethodImpl","sourcecode":"public long getEncodedLength(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            long long = ((((pArray.int) + (int)) - 1) / (int)) * ((long)(int));\n            if ((int) > 0) {\n                len += (((len + (int)) - 1) / (int)) * (int);\n            } \n            return len;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201],"tindex":"4bffdd8e-2e8b-11e6-93c1-9dc06736eb9e","method":{"position":"org.apache.commons.codec.language.Soundex:166","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str.startsWith(str)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return soundex(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"str","line":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[202,203,204,205,206,207,208,209],"tindex":"4c0052bf-2e8b-11e6-93c1-135974e7b598","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:175","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if ((str.length()) == 0) {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            sBuf.append(str.charAt(0));\n            char char;\n            char char;\n            last = '*';\n            for (int int = 0 ; i < (str.length()) ; i++) {\n                current = getMappingCode(str.charAt(i));\n                if (current == last) {\n                    continue;\n                } else if (current != 0) {\n                    sBuf.append(current);\n                } \n                last = current;\n            }\n            return sBuf.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[117,108,109,25,110,111],"tindex":"4c0078d0-2e8b-11e6-93c1-ed9582cf07df","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:978","type":"CtMethodImpl","sourcecode":"public void appendPrimary(final java.lang.String value) {\n    if (value == null) {\n        {\n            final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n            if ((value.length()) <= addChars) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } else {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[],"tindex":"4c0078d1-2e8b-11e6-93c1-0fab4528aef8","method":{"position":"org.apache.commons.codec.binary.Base64:594","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeBase64URLSafeString(final byte[] binaryData) {\n    if (binaryData == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"binaryData"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:193","type":"CtBinaryOperatorImpl","sourcecode":"sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)"},"failures":[210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239],"tindex":"4c009fe2-2e8b-11e6-93c1-cf01683868bb","method":{"position":"org.apache.commons.codec.language.Metaphone:342","type":"CtMethodImpl","sourcecode":"private boolean isPreviousChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (index == index) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if ((index > 0) && (index < (string.length()))) {\n                matches = (string.charAt((index - 1))) == c;\n            } \n            return matches;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sumLength":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"4c009fe3-2e8b-11e6-93c1-ad629ca5409f","method":{"position":"org.apache.commons.codec.digest.DigestUtils:399","type":"CtMethodImpl","sourcecode":"public static byte[] sha1(final java.lang.String data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:445","type":"CtBinaryOperatorImpl","sourcecode":"result >= 0"},"failures":[240,241,242],"tindex":"4c009fe4-2e8b-11e6-93c1-b9c1d094c842","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:392","type":"CtMethodImpl","sourcecode":"private static int hPermOp(int a, final int n, final int m) {\n    if (a >= 0) {\n        {\n            final int int = ((a << (16 - n)) ^ a) & m;\n            a = (a ^ t) ^ (t >>> (16 - n));\n            return a;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"a"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[243,244],"tindex":"4c00c6f5-2e8b-11e6-93c1-b93988f4ad60","method":{"position":"org.apache.commons.codec.digest.DigestUtils:411","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final byte[] data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:91","type":"CtBinaryOperatorImpl","sourcecode":"len > 0"},"failures":[240,241,245,242],"tindex":"4c00c6f6-2e8b-11e6-93c1-79ce42094d28","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:384","type":"CtMethodImpl","sourcecode":"private static int fourBytesToInt(final byte[] b, int offset) {\n    if (offset > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)]);\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 16;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24;\n            return value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"offset"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:486","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[7,8,9,10,11,14,15,16,17,18,21,22,23,24],"tindex":"4c00c6f7-2e8b-11e6-93c1-f93077504153","method":{"position":"org.apache.commons.codec.language.bm.Rule:531","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || ((str.length()) == 0)"},"failures":[],"tindex":"4c013c28-2e8b-11e6-93c1-d58dec4ebda5","method":{"position":"org.apache.commons.codec.language.bm.Lang:129","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang loadFromResource(final java.lang.String languageRulesResourceName, final org.apache.commons.codec.language.bm.Languages languages) {\n    if ((languageRulesResourceName == null) || ((str.length()) == 0)) {\n        {\n            final java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Lang.LangRule>();\n            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.Class.getClassLoader().getResourceAsStream(languageRulesResourceName);\n            if (lRulesIS == null) {\n                throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)));\n            } \n            final java.util.Scanner java.util.Scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n            try {\n                boolean boolean = false;\n                while (scanner.hasNextLine()) {\n                    final java.lang.String java.lang.String = scanner.nextLine();\n                    java.lang.String java.lang.String = rawLine;\n                    if (inExtendedComment) {\n                        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = false;\n                        } \n                    } else {\n                        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = true;\n                        } else {\n                            final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                            if (cmtI >= 0) {\n                                line = line.substring(0, cmtI);\n                            } \n                            line = line.trim();\n                            if ((line.length()) == 0) {\n                                continue;\n                            } \n                            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                            if ((parts.int) != 3) {\n                                throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                            } \n                            final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n                            final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n                            final boolean boolean = parts[2].equals(\"true\");\n                            rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n                        }\n                    }\n                }\n            } finally {\n                scanner.close();\n            }\n            return new org.apache.commons.codec.language.bm.Lang(rules , languages);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"languageRulesResourceName"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:432","type":"CtBinaryOperatorImpl","sourcecode":"inAvail < 0"},"failures":[],"tindex":"4c01ff79-2e8b-11e6-93c1-598850980a5f","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:291","type":"CtMethodImpl","sourcecode":"int readResults(final byte[] b, final int bPos, final int bAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (bAvail < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((context.byte[]) != null) {\n                final int int = java.lang.Math.min(available(context), bAvail);\n                java.lang.System.arraycopy(context.byte[], context.int, b, bPos, len);\n                context.int += len;\n                if ((context.int) >= (context.int)) {\n                    context.byte[] = null;\n                } \n                return len;\n            } \n            return context.boolean ? org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int : 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inAvail":"bAvail"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[108,109,25,110,111],"tindex":"4c02268a-2e8b-11e6-93c1-43cc4f659367","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:331","type":"CtMethodImpl","sourcecode":"private int handleCC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n                if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n                    result.append(\"KS\");\n                } else {\n                    result.append('X');\n                }\n                index += 3;\n            } else {\n                result.append('K');\n                index += 2;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"value"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"commons-codec","transformationCount":46,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
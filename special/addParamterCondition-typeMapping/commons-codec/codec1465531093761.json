{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":169,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":20,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":67,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":26,"org.apache.commons.codec.net.URLCodecTest.testEncodeNull":77,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":117,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":125,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":24,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":14,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":215,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":153,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":243,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":9,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":202,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":78,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":190,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":16,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt":50,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":244,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":82,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":173,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":32,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":92,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":93,"org.apache.commons.codec.language.NysiisTest.testCap":126,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":35,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":4,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":33,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":94,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":106,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":3,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":95,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":189,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":222,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":209,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":226,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":112,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":73,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":208,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":80,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":70,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":193,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":64,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":57,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt":210,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":42,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":23,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8":179,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":59,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":123,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":171,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":36,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":29,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":91,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":196,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":109,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":44,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":201,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":13,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":71,"org.apache.commons.codec.language.NysiisTest.testDropBy":139,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":39,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":63,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":121,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":22,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":120,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":213,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":74,"org.apache.commons.codec.binary.Base64Test.testConstructors":172,"org.apache.commons.codec.language.NysiisTest.testRule2":131,"org.apache.commons.codec.language.NysiisTest.testRule1":130,"org.apache.commons.codec.language.NysiisTest.testRule7":134,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":114,"org.apache.commons.codec.language.NysiisTest.testRule6":133,"org.apache.commons.codec.language.NysiisTest.testRule5":132,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":10,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":197,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":167,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt":102,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":170,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":237,"org.apache.commons.codec.language.NysiisTest.testBran":135,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":142,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":119,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":162,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":68,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":11,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":53,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":218,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":241,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":165,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":195,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":186,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":187,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":180,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":178,"org.apache.commons.codec.binary.HexTest.testEncodeEmpty":239,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":221,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":156,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":37,"org.apache.commons.codec.language.NysiisTest.testDad":127,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le":69,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":176,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":228,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":48,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":124,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":184,"org.apache.commons.codec.language.NysiisTest.testDan":128,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":27,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":231,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":28,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":34,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":203,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":207,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":229,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":25,"org.apache.commons.codec.binary.HexTest.testCustomCharset":235,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":41,"org.apache.commons.codec.language.NysiisTest.testSnat":137,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData":166,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":62,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":110,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":47,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":61,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":101,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":108,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":159,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":232,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":158,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":200,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":168,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":177,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":212,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":147,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":145,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":148,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":122,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":1,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":175,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt":55,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":0,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":216,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":160,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":149,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt":100,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":198,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":227,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":230,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":223,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":111,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":219,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":240,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":7,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":116,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":99,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":72,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":146,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":60,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":40,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":5,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":103,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":107,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":76,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":90,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":181,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":199,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":12,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":52,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":30,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":56,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":205,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":115,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":236,"org.apache.commons.codec.language.MetaphoneTest.testWhy":242,"org.apache.commons.codec.language.NysiisTest.testTranan":141,"org.apache.commons.codec.language.NysiisTest.testEncodeNull":143,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":31,"org.apache.commons.codec.language.NysiisTest.testFal":129,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":2,"org.apache.commons.codec.language.NysiisTest.testSnad":136,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":105,"org.apache.commons.codec.language.MetaphoneTest.testTCH":185,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt":211,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":217,"org.apache.commons.codec.language.NysiisTest.testLocaleIndependence":144,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":188,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":152,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":174,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":192,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":191,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":66,"org.apache.commons.codec.binary.Base64Test.testBase64":87,"org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull":6,"org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt":206,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":157,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":97,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":225,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":84,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":155,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":220,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":154,"org.apache.commons.codec.net.BCodecTest.testNullInput":214,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":238,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":224,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":113,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":51,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":83,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":88,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":43,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":150,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":79,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":194,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":85,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":138,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":247,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":38,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":75,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":245,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":49,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":183,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":234,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":89,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":163,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":118,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":18,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":58,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":81,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":161,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":104,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":233,"org.apache.commons.codec.language.NysiisTest.testOthers":140,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":86,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":246,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":65,"org.apache.commons.codec.language.SoundexTest.testDifference":204,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":182,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":164,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":151,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":96,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":46,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":45},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:247","type":"CtBinaryOperatorImpl","sourcecode":"(n > 0) && ((org.apache.commons.codec.language.Metaphone.VARSON.indexOf(local.charAt((n - 1)))) >= 0)"},"failures":[],"tindex":"8e085217-2ebf-11e6-a676-41b8091df5aa","method":{"position":"org.apache.commons.codec.language.bm.Rule:698","type":"CtMethodImpl","sourcecode":"public boolean patternAndContextMatches(final java.lang.CharSequence input, final int i) {\n    if ((i > 0) && ((input.indexOf(input.charAt((n - 1)))) >= 0)) {\n        {\n            if (i < 0) {\n                throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n            } \n            final int int = org.apache.commons.codec.language.bm.Rule.this.java.lang.String.length();\n            final int int = i + patternLength;\n            if (ipl > (input.length())) {\n                return false;\n            } \n            if (!(input.subSequence(i, ipl).equals(org.apache.commons.codec.language.bm.Rule.this.java.lang.String))) {\n                return false;\n            } else if (!(org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(ipl, input.length())))) {\n                return false;\n            } \n            return org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(0, i));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.Metaphone.VARSON":"input","n":"i","local":"input"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"8e091568-2ebf-11e6-a676-2f6a30beb0e2","method":{"position":"org.apache.commons.codec.digest.HmacUtils:688","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"8e093c79-2ebf-11e6-a676-8d0b3ee336bf","method":{"position":"org.apache.commons.codec.net.BCodec:137","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if (charset == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } \n            try {\n                return org.apache.commons.codec.net.BCodec.this.encodeText(value, charset);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"charset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[0,1],"tindex":"8e093c7a-2ebf-11e6-a676-3939a539fcb7","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:238","type":"CtMethodImpl","sourcecode":"public static byte[] toAsciiBytes(final byte[] raw) {\n    if (raw == null) {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            final byte[] byte[] = new byte[(raw.int) << 3];\n            for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                        l_ascii[(jj - bits)] = '0';\n                    } else {\n                        l_ascii[(jj - bits)] = '1';\n                    }\n                }\n            }\n            return l_ascii;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"raw"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"8e09638b-2ebf-11e6-a676-c7e0df4b0e49","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:147","type":"CtMethodImpl","sourcecode":"public void setNameType(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtInvocationImpl","sourcecode":"target.equals(element)"},"failures":[2,3,4,5,6,7],"tindex":"8e098a9c-2ebf-11e6-a676-91506b05d3f2","method":{"position":"org.apache.commons.codec.net.URLCodec:288","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if (str.equals(str)) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return decode(str, getDefaultCharset());\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"str","element":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"8e09b1ad-2ebf-11e6-a676-9961c762c543","method":{"position":"org.apache.commons.codec.digest.DigestUtils:309","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[],"tindex":"8e09b1ae-2ebf-11e6-a676-1beb6b6bb4aa","method":{"position":"org.apache.commons.codec.digest.DigestUtils:362","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] sha(final java.lang.String data) {\n    if ((data == null) || (data == null)) {\n        {\n            if ((data.length()) == 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.DigestUtils.sha1(data);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:117","type":"CtBinaryOperatorImpl","sourcecode":"(es1.charAt(i)) == (es2.charAt(i))"},"failures":[],"tindex":"8e09d8bf-2ebf-11e6-a676-2776b4e8a22f","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:904","type":"CtMethodImpl","sourcecode":"protected char charAt(final java.lang.String value, final int index) {\n    if ((value.charAt(index)) == (value.charAt(i))) {\n        {\n            if ((index < 0) || (index >= (value.length()))) {\n                return java.lang.Character.java.lang.Character.char;\n            } \n            return value.charAt(index);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"es1":"value","es2":"value","i":"index"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtInvocationImpl","sourcecode":"value.startsWith(element)"},"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"tindex":"8e0a9c10-2ebf-11e6-a676-71d46ef1b152","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:83","type":"CtMethodImpl","sourcecode":"java.lang.String cleanName(final java.lang.String name) {\n    if (name.startsWith(name)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = name.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" };\n            for (final java.lang.String java.lang.String : charsToTrim) {\n                upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            }\n            upperName = removeAccents(upperName);\n            upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            return upperName;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name","element":"name"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:575","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[49,50,51,52,53,54,55,56],"tindex":"8e0ac321-2ebf-11e6-a676-850bc4930f1b","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:87","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        {\n            if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n                salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n            } \n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"salt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[57],"tindex":"8e0ac322-2ebf-11e6-a676-b39c528eed14","method":{"position":"org.apache.commons.codec.binary.Base64:705","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final byte[] base64Data) {\n    if (base64Data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.codec.binary.Base64().decode(base64Data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"base64Data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)"},"failures":[],"tindex":"8e0ac323-2ebf-11e6-a676-03a0b50366ea","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:276","type":"CtMethodImpl","sourcecode":"boolean isVowel(final java.lang.String letter) {\n    if (letter.startsWith(letter)) {\n        {\n            return ((((letter.equalsIgnoreCase(\"E\")) || (letter.equalsIgnoreCase(\"A\"))) || (letter.equalsIgnoreCase(\"O\"))) || (letter.equalsIgnoreCase(\"I\"))) || (letter.equalsIgnoreCase(\"U\"));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"letter","line":"letter"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:144","type":"CtFieldReadImpl","sourcecode":"doEncode"},"failures":[58,59,60,61,62,63,64,65,66,67],"tindex":"8e0aea34-2ebf-11e6-a676-a9fd876e283f","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:180","type":"CtMethodImpl","sourcecode":"public java.lang.String[] getReplacements(final java.lang.String context, final boolean atStart) {\n    if (atStart) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (atStart) {\n                return java.lang.String[];\n            } \n            final int int = getPatternLength();\n            final boolean boolean = nextIndex < (context.length()) ? isVowel(context.charAt(nextIndex)) : false;\n            if (nextCharIsVowel) {\n                return java.lang.String[];\n            } \n            return java.lang.String[];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"doEncode":"atStart"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\")\"))"},"failures":[68],"tindex":"8e0aea35-2ebf-11e6-a676-210914c4a87f","method":{"position":"org.apache.commons.codec.digest.HmacUtils:616","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha384Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (!(key.endsWith(\")\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[69],"tindex":"8e0aea36-2ebf-11e6-a676-f35b7c3121e3","method":{"position":"org.apache.commons.codec.binary.StringUtils:216","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Le(final java.lang.String string) {\n    if (string == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"string"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:616","type":"CtVariableReadImpl","sourcecode":"slavoGermanic"},"failures":[70,71,72,73,74,75],"tindex":"8e0b1147-2ebf-11e6-a676-070310dca810","method":{"position":"org.apache.commons.codec.binary.Base64:660","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe, final int maxResultSize) {\n    if (isChunked) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((binaryData == null) || ((binaryData.int) == 0)) {\n                return binaryData;\n            } \n            final org.apache.commons.codec.binary.Base64 org.apache.commons.codec.binary.Base64 = isChunked ? new org.apache.commons.codec.binary.Base64(urlSafe) : new org.apache.commons.codec.binary.Base64(0 , org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[] , urlSafe);\n            final long long = b64.getEncodedLength(binaryData);\n            if (len > maxResultSize) {\n                throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + len) + \") than the specified maximum size of \") + maxResultSize));\n            } \n            return b64.encode(binaryData);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"slavoGermanic":"isChunked"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[],"tindex":"8e0b1148-2ebf-11e6-a676-c7a6ec2b8c90","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:311","type":"CtMethodImpl","sourcecode":"protected static boolean isWhiteSpace(final byte byteToCheck) {\n    if (byteToCheck != byteToCheck) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (byteToCheck == byteToCheck) {\n                {\n                    switch (byteToCheck) {\n                        case ' ' :\n                        case '\\n' :\n                        case '\\r' :\n                        case '\\t' :\n                            return true;\n                        default :\n                            return false;\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"byteToCheck","pad":"byteToCheck"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:505","type":"CtUnaryOperatorImpl","sourcecode":"!boxes"},"failures":[76],"tindex":"8e0b1149-2ebf-11e6-a676-ebb7f2dc90e9","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!concat) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxes":"concat"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"8e0b385a-2ebf-11e6-a676-230c96d850e9","method":{"position":"org.apache.commons.codec.language.bm.Rule:600","type":"CtMethodImpl","sourcecode":"private static boolean startsWith(final java.lang.CharSequence input, final java.lang.CharSequence prefix) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((prefix.length()) > (input.length())) {\n                return false;\n            } \n            for (int int = 0 ; i < (prefix.length()) ; i++) {\n                if ((input.charAt(i)) != (prefix.charAt(i))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[77],"tindex":"8e0b385b-2ebf-11e6-a676-73e58a362116","method":{"position":"org.apache.commons.codec.net.URLCodec:121","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeUrl(java.util.BitSet urlsafe, final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            if (urlsafe == null) {\n                urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (final byte byte : bytes) {\n                int int = c;\n                if (b < 0) {\n                    b = 256 + b;\n                } \n                if (urlsafe.get(b)) {\n                    if (b == ' ') {\n                        b = '+';\n                    } \n                    buffer.write(b);\n                } else {\n                    buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n                    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                    buffer.write(hex1);\n                    buffer.write(hex2);\n                }\n            }\n            return buffer.toByteArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[78],"tindex":"8e0b5f6c-2ebf-11e6-a676-e3ae25c56b1f","method":{"position":"org.apache.commons.codec.digest.DigestUtils:732","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String shaHex(final byte[] data) {\n    if (data == data) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"data","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"8e0b5f6d-2ebf-11e6-a676-33ee7b8fe23c","method":{"position":"org.apache.commons.codec.digest.HmacUtils:509","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (((valueToDigest.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"valueToDigest"},"type":"special","returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[79],"tindex":"8e0b867e-2ebf-11e6-a676-3d59b2884aed","method":{"position":"org.apache.commons.codec.net.BCodec:221","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object value) throws org.apache.commons.codec.DecoderException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return null;\n                    } else if (value instanceof java.lang.String) {\n                        return decode(((java.lang.String)(value)));\n                    } else {\n                        throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"));\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"8e0b867f-2ebf-11e6-a676-99c943883b90","method":{"position":"org.apache.commons.codec.binary.Hex:231","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] array) throws org.apache.commons.codec.DecoderException {\n    if (array == null) {\n        {\n            if (array == null) {\n                {\n                    if (array == null) {\n                        throw new org.apache.commons.codec.DecoderException();\n                    } else {\n                        {\n                            return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray());\n                        }\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"array"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[80],"tindex":"8e0b8680-2ebf-11e6-a676-13325e0eadd6","method":{"position":"org.apache.commons.codec.digest.HmacUtils:98","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha256(final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START)"},"failures":[],"tindex":"8e0bad91-2ebf-11e6-a676-753cf2968d4f","method":{"position":"org.apache.commons.codec.language.Nysiis:210","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj.startsWith(obj)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"obj","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START":"obj"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || ((str.length()) == 0)"},"failures":[],"tindex":"8e0bad92-2ebf-11e6-a676-837ef78f86ef","method":{"position":"org.apache.commons.codec.language.bm.Languages:253","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.String language) {\n    if (language.startsWith(\"(\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((language == null) || ((str.length()) == 0)) {\n                {\n                    return true;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"language"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtInvocationImpl","sourcecode":"line.contains(\"=\")"},"failures":[],"tindex":"8e0bad93-2ebf-11e6-a676-d13a2ab9644b","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:676","type":"CtMethodImpl","sourcecode":"private int handleT(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value.contains(\"=\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n                result.append('X');\n                index += 3;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n                result.append('X');\n                index += 3;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n                if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                    result.append('T');\n                } else {\n                    result.append('0', 'T');\n                }\n                index += 2;\n            } else {\n                result.append('T');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[81,82,83,84],"tindex":"8e0bd4a4-2ebf-11e6-a676-53445ab1c58e","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:360","type":"CtMethodImpl","sourcecode":"public java.lang.String encodeAsString(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newStringUtf8(encode(pArray));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:132","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"8e0bd4a5-2ebf-11e6-a676-b1554546b8c5","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:550","type":"CtMethodImpl","sourcecode":"private int handleL(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'L') {\n                if (conditionL0(value, index)) {\n                    result.appendPrimary('L');\n                } else {\n                    result.append('L');\n                }\n                index += 2;\n            } else {\n                index++;\n                result.append('L');\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtBinaryOperatorImpl","sourcecode":"b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[],"tindex":"8e0bd4a6-2ebf-11e6-a676-7be4673f5903","method":{"position":"org.apache.commons.codec.net.Utils:42","type":"CtMethodImpl","sourcecode":"static int digit16(final byte b) throws org.apache.commons.codec.DecoderException {\n    if (b != b) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (b != b) {\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    final int int = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int);\n                    if (i == (-1)) {\n                        throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n                    } \n                    return i;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","org.apache.commons.codec.net.QCodec.UNDERSCORE":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[85,86,87,88,89,90,91],"tindex":"8e0bfbb7-2ebf-11e6-a676-0957094397d0","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:393","type":"CtMethodImpl","sourcecode":"public byte[] decode(final java.lang.String pArray) {\n    if (pArray == null) {\n        {\n            return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"pArray"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:735","type":"CtBinaryOperatorImpl","sourcecode":"bigInt == null"},"failures":[92,93,94,95],"tindex":"8e0bfbb8-2ebf-11e6-a676-370d6fee1fdd","method":{"position":"org.apache.commons.codec.binary.Base64:748","type":"CtMethodImpl","sourcecode":"static byte[] toIntegerBytes(final java.math.BigInteger bigInt) {\n    if (((bigInt.bitLength()) % 8) == 0) {\n        {\n            if (bigInt == null) {\n                {\n                    int int = bigInt.bitLength();\n                    bitlen = ((bitlen + 7) >> 3) << 3;\n                    final byte[] byte[] = bigInt.toByteArray();\n                    if ((((bigInt.bitLength()) % 8) != 0) && ((((bigInt.bitLength()) / 8) + 1) == (bitlen / 8))) {\n                        return bigBytes;\n                    } \n                    int int = 0;\n                    int int = bigBytes.int;\n                    if (((bigInt.bitLength()) % 8) == 0) {\n                        startSrc = 1;\n                        len--;\n                    } \n                    final int int = (bitlen / 8) - len;\n                    final byte[] byte[] = new byte[bitlen / 8];\n                    java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n                    return resizedBytes;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtBinaryOperatorImpl","sourcecode":"((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)"},"failures":[96,97,98,99],"tindex":"8e0c22c9-2ebf-11e6-a676-d331f370f9b6","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:978","type":"CtMethodImpl","sourcecode":"public void appendPrimary(final java.lang.String value) {\n    if (((value.length()) != 1) || ((value.length()) != 1)) {\n        {\n            final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n            if ((value.length()) <= addChars) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } else {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"leftCharacter":"value","rightCharacter":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"8e0c22ca-2ebf-11e6-a676-138164279ae8","method":{"position":"org.apache.commons.codec.digest.Crypt:148","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String key, final java.lang.String salt) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\"]\"))"},"failures":[100,101,102,103,104,105,106,107],"tindex":"8e0c22cb-2ebf-11e6-a676-0124ec85b626","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:539","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (!(salt.endsWith(\"]\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (salt == null) {\n                salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n            } \n            return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"salt"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"8e0c49dc-2ebf-11e6-a676-c7f397ef2dad","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:97","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object raw) throws org.apache.commons.codec.EncoderException {\n    if (raw == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(raw instanceof byte[])) {\n                throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n            } \n            return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"raw"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtBinaryOperatorImpl","sourcecode":"b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[],"tindex":"8e0c49dd-2ebf-11e6-a676-a716950ef4de","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:311","type":"CtMethodImpl","sourcecode":"protected static boolean isWhiteSpace(final byte byteToCheck) {\n    if (byteToCheck != byteToCheck) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (byteToCheck == byteToCheck) {\n                {\n                    switch (byteToCheck) {\n                        case ' ' :\n                        case '\\n' :\n                        case '\\r' :\n                        case '\\t' :\n                            return true;\n                        default :\n                            return false;\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"byteToCheck","org.apache.commons.codec.net.QCodec.UNDERSCORE":"byteToCheck"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[108],"tindex":"8e0c49de-2ebf-11e6-a676-e35f1c19bf8b","method":{"position":"org.apache.commons.codec.digest.HmacUtils:444","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest).doFinal();\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtInvocationImpl","sourcecode":"ph.startsWith(\"(\")"},"failures":[],"tindex":"8e0c70ef-2ebf-11e6-a676-81411047f2e8","method":{"position":"org.apache.commons.codec.language.bm.Languages:253","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.String language) {\n    if (language.startsWith(\"(\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((language == null) || ((str.length()) == 0)) {\n                {\n                    return true;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"language"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:312","type":"CtBinaryOperatorImpl","sourcecode":"pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH) - 2)"},"failures":[],"tindex":"8e0c70f0-2ebf-11e6-a676-7fee412789a8","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:268","type":"CtMethodImpl","sourcecode":"protected byte[] ensureBufferSize(final int size, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (size == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (size > (size - 2)) {\n                {\n                    if (((context.byte[]) == null) || ((context.byte[].int) < ((context.int) + size))) {\n                        return resizeBuffer(context);\n                    } \n                    return context.byte[];\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"size","org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH":"size"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:131","type":"CtBinaryOperatorImpl","sourcecode":"(offset < 0) || (len < 0)"},"failures":[109,110,111,112,113,114,115,116,117,118,119,120,121,122,123],"tindex":"8e0c70f1-2ebf-11e6-a676-4b336a65ad7f","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:182","type":"CtMethodImpl","sourcecode":"private static final int encodeQuotedPrintable(final int b, final java.io.ByteArrayOutputStream buffer) {\n    if ((b < 0) || (b < 0)) {\n        {\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), 16));\n            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), 16));\n            buffer.write(hex1);\n            buffer.write(hex2);\n            return 3;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"b","len":"b"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144],"tindex":"8e0c9802-2ebf-11e6-a676-cf5da5f578ac","method":{"position":"org.apache.commons.codec.language.Nysiis:227","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(str, 0, 5, \"CHORE\")) {\n        {\n            return org.apache.commons.codec.language.Nysiis.this.nysiis(str);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[],"tindex":"8e0c9803-2ebf-11e6-a676-b7d4f49db2e0","method":{"position":"org.apache.commons.codec.binary.StringUtils:162","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUsAscii(final java.lang.String string) {\n    if ((string.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"string"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:72","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX)"},"failures":[145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162],"tindex":"8e0c9804-2ebf-11e6-a676-4fb69e99ff17","method":{"position":"org.apache.commons.codec.language.bm.Rule:365","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.Phoneme parsePhoneme(final java.lang.String ph) {\n    if (ph.startsWith(ph)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ph.indexOf(\"[\");\n            if (open >= 0) {\n                if (!(ph.endsWith(\"]\"))) {\n                    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n                } \n                final java.lang.String java.lang.String = ph.substring(0, open);\n                final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1));\n                final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")));\n                return new org.apache.commons.codec.language.bm.Rule.Phoneme(before , org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs));\n            } else {\n                return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"ph","org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX":"ph"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:270","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[163,164,165],"tindex":"8e0cbf15-2ebf-11e6-a676-39fc6daa7582","method":{"position":"org.apache.commons.codec.net.BCodec:158","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) throws org.apache.commons.codec.EncoderException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return null;\n            } \n            return encode(value, org.apache.commons.codec.net.BCodec.this.getCharset());\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"8e0cbf16-2ebf-11e6-a676-710a57b65125","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:352","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(bytes)) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (int int = 0 ; i < (bytes.int) ; i++) {\n                final int int = bytes[i];\n                if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n                    try {\n                        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n                            continue;\n                        } \n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                        buffer.write(((char)((u << 4) + l)));\n                    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n                    }\n                } else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n                    buffer.write(b);\n                } \n            }\n            return buffer.toByteArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"bytes"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"8e0ce627-2ebf-11e6-a676-1b253539a01c","method":{"position":"org.apache.commons.codec.digest.DigestUtils:222","type":"CtMethodImpl","sourcecode":"public static java.lang.String md2Hex(final byte[] data) {\n    if (data != null) {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"data"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:540","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[166,167],"tindex":"8e0ce628-2ebf-11e6-a676-6914d2a5653c","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:101","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (salt == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (salt == null) {\n                        salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n                    } \n                    return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:762","type":"CtBinaryOperatorImpl","sourcecode":"((bigInt.bitLength()) % 8) == 0"},"failures":[],"tindex":"8e0d0d39-2ebf-11e6-a676-5b5badd2ba0f","method":{"position":"org.apache.commons.codec.binary.Base64:748","type":"CtMethodImpl","sourcecode":"static byte[] toIntegerBytes(final java.math.BigInteger bigInt) {\n    if (((bigInt.bitLength()) % 8) == 0) {\n        {\n            if (bigInt == null) {\n                {\n                    int int = bigInt.bitLength();\n                    bitlen = ((bitlen + 7) >> 3) << 3;\n                    final byte[] byte[] = bigInt.toByteArray();\n                    if ((((bigInt.bitLength()) % 8) != 0) && ((((bigInt.bitLength()) / 8) + 1) == (bitlen / 8))) {\n                        return bigBytes;\n                    } \n                    int int = 0;\n                    int int = bigBytes.int;\n                    if (((bigInt.bitLength()) % 8) == 0) {\n                        startSrc = 1;\n                        len--;\n                    } \n                    final int int = (bitlen / 8) - len;\n                    final byte[] byte[] = new byte[bitlen / 8];\n                    java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n                    return resizedBytes;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:153","type":"CtBinaryOperatorImpl","sourcecode":"(curr == 'P') && (next == 'H')"},"failures":[96,97,168,98,99,169],"tindex":"8e0d0d3a-2ebf-11e6-a676-6f9385df5565","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:865","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if ((ch == 'P') && (ch == 'H')) {\n        {\n            return (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String.indexOf(ch)) != (-1);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"next":"ch","curr":"ch"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"8e0d0d3b-2ebf-11e6-a676-a70154e7348e","method":{"position":"org.apache.commons.codec.digest.HmacUtils:494","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(key)) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"key"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.language.Soundex:263","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[],"tindex":"8e0d344c-2ebf-11e6-a676-ab96ada64ceb","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:596","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException {\n    if (((charset == null) || (str.equalsIgnoreCase(name1))) || (charset.equalsIgnoreCase(name1))) {\n        {\n            if ((charset.length()) == 0) {\n                throw new java.io.UnsupportedEncodingException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)));\n                }\n            }\n        }\n    } else {\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"charset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"8e0d344d-2ebf-11e6-a676-77b9ae836c82","method":{"position":"org.apache.commons.codec.digest.HmacUtils:387","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(key)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"key"},"type":"special","returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:224","type":"CtBinaryOperatorImpl","sourcecode":"value instanceof java.lang.String"},"failures":[170],"tindex":"8e0d344e-2ebf-11e6-a676-0925c1bedf3b","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:412","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n            } \n            return encode(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"8e0d344f-2ebf-11e6-a676-1b9227d9f482","method":{"position":"org.apache.commons.codec.digest.DigestUtils:704","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[85,171,172,86,87,173,174,175,90,176,177,81,82,83,84,178,179,180],"tindex":"8e0d5b60-2ebf-11e6-a676-f3971e611eb7","method":{"position":"org.apache.commons.codec.binary.StringUtils:382","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf8(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newString(bytes, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[181,96,97,168,182,98,99,169],"tindex":"8e0d5b61-2ebf-11e6-a676-a17060e56cb7","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:597","type":"CtMethodImpl","sourcecode":"private int handleS(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (value == null) {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n                index++;\n            } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n                result.append('X', 'S');\n                index++;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                    result.append('S');\n                } else {\n                    result.append('X');\n                }\n                index += 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n                if (slavoGermanic) {\n                    result.append('S');\n                } else {\n                    result.append('S', 'X');\n                }\n                index += 3;\n            } else if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n                result.append('S', 'X');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n                index = handleSC(value, result, index);\n            } else {\n                if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n                    result.appendAlternate('S');\n                } else {\n                    result.append('S');\n                }\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:290","type":"CtBinaryOperatorImpl","sourcecode":"lineLength > 0"},"failures":[183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200],"tindex":"8e0d8272-2ebf-11e6-a676-fdf63ecc4afa","method":{"position":"org.apache.commons.codec.language.Metaphone:360","type":"CtMethodImpl","sourcecode":"private boolean regionMatch(final java.lang.StringBuilder string, final int index, final java.lang.String test) {\n    if (index > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if ((index >= 0) && (((index + (test.length())) - 1) < (string.length()))) {\n                final java.lang.String java.lang.String = string.substring(index, (index + (test.length())));\n                matches = substring.equals(test);\n            } \n            return matches;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineLength":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[],"tindex":"8e0d8273-2ebf-11e6-a676-51e734efc9da","method":{"position":"org.apache.commons.codec.digest.DigestUtils:388","type":"CtMethodImpl","sourcecode":"public static byte[] sha1(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha1Digest(), data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[96,97,98,99,169],"tindex":"8e0d8274-2ebf-11e6-a676-eb784766ab48","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:498","type":"CtMethodImpl","sourcecode":"private int handleH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        {\n            if (((index == 0) || (isVowel(charAt(value, (index - 1))))) && (isVowel(charAt(value, (index + 1))))) {\n                result.append('H');\n                index += 2;\n            } else {\n                index++;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"8e0da985-2ebf-11e6-a676-4fe3c80c44a3","method":{"position":"org.apache.commons.codec.binary.Hex:231","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] array) throws org.apache.commons.codec.DecoderException {\n    if (array == null) {\n        {\n            if (array == null) {\n                {\n                    if (array == null) {\n                        throw new org.apache.commons.codec.DecoderException();\n                    } else {\n                        {\n                            return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray());\n                        }\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"array"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[201],"tindex":"8e0da986-2ebf-11e6-a676-edcc69edcaeb","method":{"position":"org.apache.commons.codec.digest.DigestUtils:640","type":"CtMethodImpl","sourcecode":"public static byte[] sha512(final byte[] data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.getSha512Digest().digest(data);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[163,164,165],"tindex":"8e0da987-2ebf-11e6-a676-07d63aae548f","method":{"position":"org.apache.commons.codec.net.BCodec:92","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    return org.apache.commons.codec.binary.Base64.encodeBase64(bytes);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:125","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.Nysiis.isVowel(curr)"},"failures":[],"tindex":"8e0da988-2ebf-11e6-a676-3d60fd0965d6","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:956","type":"CtMethodImpl","sourcecode":"public void appendPrimary(final char value) {\n    if (org.apache.commons.codec.language.Nysiis.isVowel(value)) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int)) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"curr":"value"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"8e0dd099-2ebf-11e6-a676-c9f1307325a8","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:758","type":"CtMethodImpl","sourcecode":"private int handleZ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (index < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                result.append('J');\n                index += 2;\n            } else {\n                if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n                    result.append(\"S\", \"TS\");\n                } else {\n                    result.append('S');\n                }\n                index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[96,97,168,98,99],"tindex":"8e0dd09a-2ebf-11e6-a676-53b2442a5163","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:973","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.String primary, final java.lang.String alternate) {\n    if ((alternate.length()) == 0) {\n        {\n            if (!(primary.contains(\"[\"))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    appendPrimary(primary);\n                    appendAlternate(alternate);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"primary"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:575","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[168,182,202,203],"tindex":"8e0dd09b-2ebf-11e6-a676-e114c9674817","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:230","type":"CtMethodImpl","sourcecode":"public boolean isDoubleMetaphoneEqual(final java.lang.String value1, final java.lang.String value2) {\n    if (value1 == null) {\n        {\n            return isDoubleMetaphoneEqual(value1, value2, false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtBinaryOperatorImpl","sourcecode":"((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))"},"failures":[],"tindex":"8e0df7ac-2ebf-11e6-a676-13013abb0592","method":{"position":"org.apache.commons.codec.language.bm.Rule:248","type":"CtMethodImpl","sourcecode":"private static java.lang.String createResourceName(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (((lang == null) || (lang.equalsIgnoreCase(name2))) || (lang.equalsIgnoreCase(name2))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_%s_%s.txt\", nameType.getName(), rt.getName(), lang);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"lang","name2":"lang","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"lang"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"8e0df7ad-2ebf-11e6-a676-61dd51c4879c","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:816","type":"CtMethodImpl","sourcecode":"private boolean conditionCH1(final java.lang.String value, final int index) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"T\", \"S\"))) || (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (index == 0)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])) || ((index + 1) == ((value.length()) - 1))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:276","type":"CtBinaryOperatorImpl","sourcecode":"(suffix.length()) > (input.length())"},"failures":[150,151,152,156,157,159],"tindex":"8e0df7ae-2ebf-11e6-a676-ffa05869d728","method":{"position":"org.apache.commons.codec.language.bm.Rule:275","type":"CtMethodImpl","sourcecode":"private static boolean endsWith(final java.lang.CharSequence input, final java.lang.CharSequence suffix) {\n    if ((suffix.length()) > (input.length())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((suffix.length()) > (input.length())) {\n                return false;\n            } \n            for (int int = (input.length()) - 1, int int = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n                if ((input.charAt(i)) != (suffix.charAt(j))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input","suffix":"suffix"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[],"tindex":"8e0e1ebf-2ebf-11e6-a676-e9d6673364a9","method":{"position":"org.apache.commons.codec.language.bm.Rule:531","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input.endsWith(input)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"input"},"type":"special","returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtInvocationImpl","sourcecode":"target.equals(element)"},"failures":[204,205],"tindex":"8e0e1ec0-2ebf-11e6-a676-2f449a8c178c","method":{"position":"org.apache.commons.codec.language.SoundexUtils:85","type":"CtMethodImpl","sourcecode":"static int difference(final org.apache.commons.codec.StringEncoder encoder, final java.lang.String s1, final java.lang.String s2) throws org.apache.commons.codec.EncoderException {\n    if (s2.equals(s2)) {\n        {\n            return org.apache.commons.codec.language.SoundexUtils.differenceEncoded(encoder.encode(s1), encoder.encode(s2));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"s2","element":"s2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtInvocationImpl","sourcecode":"value.startsWith(element)"},"failures":[206,207,208,209,210,211,212,213],"tindex":"8e0e1ec1-2ebf-11e6-a676-198557ac1387","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:198","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] original, java.lang.String salt) {\n    if (salt.startsWith(salt)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (salt == null) {\n                final java.util.Random java.util.Random = new java.util.Random();\n                final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int;\n                salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)]);\n            } else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n                throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \");\n            final char char = salt.charAt(0);\n            final char char = salt.charAt(1);\n            buffer.setCharAt(0, charZero);\n            buffer.setCharAt(1, charOne);\n            final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charZero];\n            final int int = (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charOne]) << 4;\n            final byte[] byte[] = new byte[8];\n            for (int int = 0 ; i < (key.int) ; i++) {\n                key[i] = 0;\n            }\n            for (int int = 0 ; (i < (key.int)) && (i < (original.int)) ; i++) {\n                final int int = original[i];\n                key[i] = ((byte)(iChar << 1));\n            }\n            final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.desSetKey(key);\n            final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.body(schedule, eSwap0, eSwap1);\n            final byte[] byte[] = new byte[9];\n            org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[0], b, 0);\n            org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[1], b, 4);\n            b[8] = 0;\n            int int = 2;\n            int int = 0;\n            int int = 128;\n            for ( ; i < 13 ; i++) {\n                int int = 0;\n                int int = 0;\n                for ( ; j < 6 ; j++) {\n                    c <<= 1;\n                    if (((b[y]) & u) != 0) {\n                        c |= 1;\n                    } \n                    u >>>= 1;\n                    if (u == 0) {\n                        y++;\n                        u = 128;\n                    } \n                    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n                }\n            }\n            return buffer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"salt","element":"salt"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:417","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[163,164,165],"tindex":"8e0e45d2-2ebf-11e6-a676-9b2c0bf254a1","method":{"position":"org.apache.commons.codec.net.BCodec:119","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if (value.startsWith(value)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } \n            return encodeText(value, charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"value","line":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"8e0e45d3-2ebf-11e6-a676-5102d8350f3b","method":{"position":"org.apache.commons.codec.digest.DigestUtils:748","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String shaHex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[214],"tindex":"8e0e6ce4-2ebf-11e6-a676-877373a924b5","method":{"position":"org.apache.commons.codec.net.BCodec:100","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.Base64.decodeBase64(bytes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[],"tindex":"8e0e6ce5-2ebf-11e6-a676-156d2b4cfeec","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:101","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (salt == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (salt == null) {\n                        salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n                    } \n                    return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"salt"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[215,216,217,218,219,220,221,222,223,224,201,78,225,226,227,228,108,229,68,230,231,232,233,234,235,236,237,238,239,240],"tindex":"8e0e6ce6-2ebf-11e6-a676-037529a84aee","method":{"position":"org.apache.commons.codec.binary.Hex:124","type":"CtMethodImpl","sourcecode":"public static char[] encodeHex(final byte[] data, final boolean toLowerCase) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHex(data, (toLowerCase ? org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.char[] : org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.char[]));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[237,239],"tindex":"8e0e93f7-2ebf-11e6-a676-155e1b55c184","method":{"position":"org.apache.commons.codec.binary.Hex:295","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if (object == object) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            try {\n                final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n                return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n            } catch (final java.lang.ClassCastException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"object","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"object"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"8e0e93f8-2ebf-11e6-a676-9dacbccfd60f","method":{"position":"org.apache.commons.codec.net.BCodec:92","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    return org.apache.commons.codec.binary.Base64.encodeBase64(bytes);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:111","type":"CtBinaryOperatorImpl","sourcecode":"(es1 == null) || (es2 == null)"},"failures":[],"tindex":"8e0e93f9-2ebf-11e6-a676-f3947e9d6e48","method":{"position":"org.apache.commons.codec.digest.DigestUtils:362","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] sha(final java.lang.String data) {\n    if ((data == null) || (data == null)) {\n        {\n            if ((data.length()) == 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.DigestUtils.sha1(data);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"es1":"data","es2":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[241,204,205],"tindex":"8e0ebb0a-2ebf-11e6-a676-3f3bcc3c9a5e","method":{"position":"org.apache.commons.codec.language.SoundexUtils:109","type":"CtMethodImpl","sourcecode":"static int differenceEncoded(final java.lang.String es1, final java.lang.String es2) {\n    if (es2 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((es1 == null) || (es2 == null)) {\n                return 0;\n            } \n            final int int = java.lang.Math.min(es1.length(), es2.length());\n            int int = 0;\n            for (int int = 0 ; i < lengthToMatch ; i++) {\n                if ((es1.charAt(i)) == (es2.charAt(i))) {\n                    diff++;\n                } \n            }\n            return diff;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"es2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"8e0ebb0b-2ebf-11e6-a676-c39801fee8dc","method":{"position":"org.apache.commons.codec.digest.DigestUtils:546","type":"CtMethodImpl","sourcecode":"public static byte[] sha384(final byte[] data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.getSha384Digest().digest(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtBinaryOperatorImpl","sourcecode":"b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[],"tindex":"8e0ebb0c-2ebf-11e6-a676-17982ae4e810","method":{"position":"org.apache.commons.codec.net.Utils:42","type":"CtMethodImpl","sourcecode":"static int digit16(final byte b) throws org.apache.commons.codec.DecoderException {\n    if (b != b) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (b != b) {\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    final int int = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int);\n                    if (i == (-1)) {\n                        throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n                    } \n                    return i;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","org.apache.commons.codec.net.QCodec.UNDERSCORE":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[],"tindex":"8e0ebb0d-2ebf-11e6-a676-1bc9d0c5fdab","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:987","type":"CtMethodImpl","sourcecode":"public void appendAlternate(final java.lang.String value) {\n    if (value.endsWith(value)) {\n        {\n            final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n            if ((value.length()) <= addChars) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } else {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtInvocationImpl","sourcecode":"target.equals(element)"},"failures":[],"tindex":"8e0ee21e-2ebf-11e6-a676-3db25e347dba","method":{"position":"org.apache.commons.codec.language.bm.Languages:213","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.String language) {\n    if (language.equals(language)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"language","element":"language"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:214","type":"CtBinaryOperatorImpl","sourcecode":"((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name1))"},"failures":[],"tindex":"8e0ee21f-2ebf-11e6-a676-f72ccca719bb","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:596","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException {\n    if (((charset == null) || (str.equalsIgnoreCase(name1))) || (charset.equalsIgnoreCase(name1))) {\n        {\n            if ((charset.length()) == 0) {\n                throw new java.io.UnsupportedEncodingException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)));\n                }\n            }\n        }\n    } else {\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"charset","name1":"charset","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[149,150,151,152,153,156,157,158,159,160],"tindex":"8e0ee220-2ebf-11e6-a676-698dd4d67bf1","method":{"position":"org.apache.commons.codec.language.bm.Rule:539","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"8e0f0931-2ebf-11e6-a676-09e8560ff5c6","method":{"position":"org.apache.commons.codec.binary.Hex:231","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] array) throws org.apache.commons.codec.DecoderException {\n    if (array == null) {\n        {\n            if (array == null) {\n                {\n                    if (array == null) {\n                        throw new org.apache.commons.codec.DecoderException();\n                    } else {\n                        {\n                            return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray());\n                        }\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"array"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:470","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[],"tindex":"8e0f0932-2ebf-11e6-a676-c94a026f3605","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:268","type":"CtMethodImpl","sourcecode":"protected byte[] ensureBufferSize(final int size, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (size == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (size > (size - 2)) {\n                {\n                    if (((context.byte[]) == null) || ((context.byte[].int) < ((context.int) + size))) {\n                        return resizeBuffer(context);\n                    } \n                    return context.byte[];\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"size"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:486","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"8e0f0933-2ebf-11e6-a676-29c9995217b1","method":{"position":"org.apache.commons.codec.net.BCodec:221","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object value) throws org.apache.commons.codec.DecoderException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return null;\n                    } else if (value instanceof java.lang.String) {\n                        return decode(((java.lang.String)(value)));\n                    } else {\n                        throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"));\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[96,97,98,99,169],"tindex":"8e0f0934-2ebf-11e6-a676-45c44365b00c","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:739","type":"CtMethodImpl","sourcecode":"private int handleX(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        {\n            if (index == 0) {\n                result.append('S');\n                index++;\n            } else {\n                if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n                    result.append(\"KS\");\n                } \n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:264","type":"CtBinaryOperatorImpl","sourcecode":"(i % 3) != 0"},"failures":[183,184,185,242,187,188,190,191,192,193,243,194,195,196,197,244,245,246,199,200,247],"tindex":"8e0f3045-2ebf-11e6-a676-77eb882e7ed0","method":{"position":"org.apache.commons.codec.language.Metaphone:370","type":"CtMethodImpl","sourcecode":"private boolean isLastChar(final int wdsz, final int n) {\n    if ((n % 3) != 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (n + 1) == wdsz;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"n"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:616","type":"CtVariableReadImpl","sourcecode":"slavoGermanic"},"failures":[],"tindex":"8e0f3046-2ebf-11e6-a676-f3e08ed04445","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!concat) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"slavoGermanic":"concat"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[],"tindex":"8e0f5757-2ebf-11e6-a676-831315d525a1","method":{"position":"org.apache.commons.codec.digest.DigestUtils:222","type":"CtMethodImpl","sourcecode":"public static java.lang.String md2Hex(final byte[] data) {\n    if (data != null) {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"8e0f5758-2ebf-11e6-a676-f7e64fe1ceb6","method":{"position":"org.apache.commons.codec.digest.HmacUtils:260","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final byte[] key, final byte[] valueToDigest) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(key)) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"key"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[],"tindex":"8e0f5759-2ebf-11e6-a676-21a3b3517bbc","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:973","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.String primary, final java.lang.String alternate) {\n    if ((alternate.length()) == 0) {\n        {\n            if (!(primary.contains(\"[\"))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    appendPrimary(primary);\n                    appendAlternate(alternate);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"alternate"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[223],"tindex":"8e0f575a-2ebf-11e6-a676-f5c6497a134d","method":{"position":"org.apache.commons.codec.digest.DigestUtils:469","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha256Digest(), data);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
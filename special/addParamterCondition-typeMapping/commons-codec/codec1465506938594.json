{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":291,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":74,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":113,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":246,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":175,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":251,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":9,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":7,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":8,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":10,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":239,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":104,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":130,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":219,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully":244,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":232,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":342,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse":265,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":29,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":48,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":100,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":110,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":241,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":279,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":187,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully":222,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData":320,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt":226,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":115,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":183,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":186,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":202,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":259,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":22,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":21,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":153,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":154,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":245,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":263,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":157,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":260,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData":322,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":59,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":155,"org.apache.commons.codec.net.URLCodecTest.testDecodeWithNullArray":77,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":99,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":156,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":209,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":44,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":180,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":87,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":304,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":213,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":164,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":86,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":149,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":103,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":313,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":162,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt":197,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":271,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":324,"org.apache.commons.codec.language.MetaphoneTest.testEncodeEmpty":224,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":144,"org.apache.commons.codec.language.SoundexTest.testB650":6,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":216,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":249,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":176,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":181,"org.apache.commons.codec.language.SoundexTest.testNewInstance":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":242,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":264,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":331,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":72,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":84,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":256,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":108,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":199,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":307,"org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull":68,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":274,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":194,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":66,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":40,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":47,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":184,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":179,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":159,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":238,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":329,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":268,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":174,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":177,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":248,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":56,"org.apache.commons.codec.binary.Base64Test.testUUID":151,"org.apache.commons.codec.binary.Base64Test.testSingletons":163,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":172,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":195,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":281,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":165,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":215,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":305,"org.apache.commons.codec.binary.Base64Test.testPairs":150,"org.apache.commons.codec.binary.Base64Test.testConstructors":284,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":280,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":204,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":173,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":234,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":109,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":297,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":53,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":15,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":318,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":240,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":139,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":169,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":327,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse":252,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":123,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":235,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":26,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":39,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":288,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":124,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":91,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":107,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":289,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":96,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":227,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":97,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":189,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":328,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":309,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":16,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse":261,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":300,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":43,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":133,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert":105,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":52,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":285,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":295,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":334,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":152,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":51,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":278,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":93,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":253,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":145,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch":231,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":301,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":323,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":254,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":262,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":85,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse":230,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":332,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":335,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":250,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":270,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":188,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":312,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData":321,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":200,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameToSingleLetter_KARL_C_DoesNotMatch":273,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":311,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":276,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty":220,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":34,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":136,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":315,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":336,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":120,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":135,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":190,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":71,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":302,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":168,"org.apache.commons.codec.binary.Base64Test.testTriplets":148,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":178,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":88,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse":228,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":142,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":140,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":143,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":63,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":293,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":62,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":296,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":167,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeNull":70,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":0,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse":233,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":37,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":122,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":137,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":283,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":126,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":326,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse":275,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":17,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":218,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":111,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":18,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":223,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":333,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":45,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":55,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":41,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":64,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":201,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":212,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch":277,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":287,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":211,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully":255,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":298,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":317,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":73,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":310,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":65,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":161,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":141,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":11,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":27,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":269,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":31,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":210,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":170,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":60,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":1,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":57,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":83,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":118,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":214,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":237,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":119,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":229,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":28,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":125,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":257,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":316,"org.apache.commons.codec.binary.HexTest.testDecodeArrayOddCharacters":340,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":114,"org.apache.commons.codec.language.MetaphoneTest.testWhy":95,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":193,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":147,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":258,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":208,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":23,"org.apache.commons.codec.digest.DigestUtilsTest.testInternalNoSuchAlgorithmException":35,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":58,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":33,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":38,"org.apache.commons.codec.language.MetaphoneTest.testTCH":94,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt":198,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":50,"org.apache.commons.codec.language.MetaphoneTest.testLocaleIndependence":225,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":292,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":3,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":98,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":4,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":5,"org.apache.commons.codec.binary.HexTest.testDencodeEmpty":337,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":306,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":102,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":129,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":166,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":101,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":182,"org.apache.commons.codec.binary.Base64Test.testBase64":80,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch":236,"org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt":196,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":134,"org.apache.commons.codec.binary.HexTest.testDecodeStringOddCharacters":339,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":49,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":76,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":158,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":171,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":192,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":221,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":132,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":42,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":131,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":46,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":203,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":81,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":112,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":191,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":319,"org.apache.commons.codec.binary.Base64Test.testCodec112":160,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":299,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":127,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":272,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":303,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":106,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":314,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":78,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":121,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty":217,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters1":338,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":146,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":267,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":308,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":116,"org.apache.commons.codec.binary.Base64Test.testCodec68":290,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":12,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":24,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":92,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":294,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":341,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":82,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":89,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing":69,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":206,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":243,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":185,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":138,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse":266,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":282,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":79,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":117,"org.apache.commons.codec.language.SoundexTest.testDifference":13,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":207,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":330,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":325,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":205,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":90,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":128,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":75,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":247,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":286,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullAlgo":67,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":61},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"tindex":"506eccba-2e87-11e6-84ed-f9c873f40fac","method":{"position":"org.apache.commons.codec.language.Soundex:183","type":"CtMethodImpl","sourcecode":"private char getMappingCode(final java.lang.String str, final int index) {\n    if ((str.length()) == 0) {\n        {\n            final char char = org.apache.commons.codec.language.Soundex.this.map(str.charAt(index));\n            if ((index > 1) && (mappedChar != '0')) {\n                final char char = str.charAt((index - 1));\n                if (('H' == hwChar) || ('W' == hwChar)) {\n                    final char char = str.charAt((index - 2));\n                    final char char = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n                    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n                        return 0;\n                    } \n                } \n            } \n            return mappedChar;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtInvocationImpl","sourcecode":"value.startsWith(element)"},"failures":[],"tindex":"506f900b-2e87-11e6-84ed-9d5095184095","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:91","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.CharSequence str) {\n    if (str.startsWith(str)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n                ph.append(str);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str","element":"str"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"506fb71c-2e87-11e6-84ed-775203e05e96","method":{"position":"org.apache.commons.codec.language.bm.Languages:165","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Languages getInstance(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        {\n            return org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Languages>.get(nameType);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"tindex":"506fde2d-2e87-11e6-84ed-a533632451c5","method":{"position":"org.apache.commons.codec.digest.DigestUtils:66","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest getDigest(final java.lang.String algorithm) {\n    if (algorithm == null) {\n        {\n            try {\n                return java.security.MessageDigest.getInstance(algorithm);\n            } catch (final java.security.NoSuchAlgorithmException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"algorithm"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[45],"tindex":"5070053e-2e87-11e6-84ed-8757873e4526","method":{"position":"org.apache.commons.codec.digest.DigestUtils:452","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final byte[] data) {\n    if (data == data) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.getSha256Digest().digest(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"data","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[61,62,63,64,65,66],"tindex":"5070053f-2e87-11e6-84ed-cd2522b588bb","method":{"position":"org.apache.commons.codec.binary.Base64:509","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final byte octet) {\n    if (octet != octet) {\n        {\n            if (octet == octet) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (octet == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.byte)) || (((octet >= 0) && (octet < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) && ((org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][octet]) != (-1)));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"octet","pad":"octet"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:429","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[67],"tindex":"50702c50-2e87-11e6-84ed-fff715c2e0c0","method":{"position":"org.apache.commons.codec.digest.HmacUtils:174","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final java.lang.String algorithm, final byte[] key) {\n    if ((algorithm.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                throw new java.lang.IllegalArgumentException(\"Null key\");\n            } \n            try {\n                final javax.crypto.spec.SecretKeySpec javax.crypto.spec.SecretKeySpec = new javax.crypto.spec.SecretKeySpec(key , algorithm);\n                final javax.crypto.Mac javax.crypto.Mac = javax.crypto.Mac.getInstance(algorithm);\n                mac.init(keySpec);\n                return mac;\n            } catch (final java.security.NoSuchAlgorithmException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            } catch (final java.security.InvalidKeyException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"algorithm"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[68],"tindex":"50705361-2e87-11e6-84ed-e50d7bbf1c29","method":{"position":"org.apache.commons.codec.net.BCodec:137","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if (value == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } \n            try {\n                return org.apache.commons.codec.net.BCodec.this.encodeText(value, charset);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[],"tindex":"50705362-2e87-11e6-84ed-e905fc09a2e2","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:904","type":"CtMethodImpl","sourcecode":"protected char charAt(final java.lang.String value, final int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index < 0) || (index >= (value.length()))) {\n                return java.lang.Character.java.lang.Character.char;\n            } \n            return value.charAt(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[69,70],"tindex":"50707a73-2e87-11e6-84ed-8fad8e9286a2","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:125","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final java.lang.String encode(java.lang.String name) {\n    if (name == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n                return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            } \n            name = cleanName(name);\n            name = removeVowels(name);\n            name = removeDoubleConsonants(name);\n            name = getFirst3Last3(name);\n            return name;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:429","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[71,72,73,74,75,76],"tindex":"5070a184-2e87-11e6-84ed-db56b7672549","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:987","type":"CtMethodImpl","sourcecode":"public void appendAlternate(final java.lang.String value) {\n    if ((value.length()) == 0) {\n        {\n            final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n            if ((value.length()) <= addChars) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } else {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtBinaryOperatorImpl","sourcecode":"b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[],"tindex":"5070c895-2e87-11e6-84ed-6d1f288c935e","method":{"position":"org.apache.commons.codec.binary.Base64:509","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final byte octet) {\n    if (octet != octet) {\n        {\n            if (octet == octet) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (octet == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.byte)) || (((octet >= 0) && (octet < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) && ((org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][octet]) != (-1)));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"octet","org.apache.commons.codec.net.QCodec.UNDERSCORE":"octet"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[77],"tindex":"5070efa6-2e87-11e6-84ed-3fe8d08f5564","method":{"position":"org.apache.commons.codec.net.URLCodec:161","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeUrl(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (int int = 0 ; i < (bytes.int) ; i++) {\n                final int int = bytes[i];\n                if (b == '+') {\n                    buffer.write(' ');\n                } else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n                    try {\n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                        buffer.write(((char)((u << 4) + l)));\n                    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                        throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n                    }\n                } else {\n                    buffer.write(b);\n                }\n            }\n            return buffer.toByteArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[78,79,80,81,82,83,84],"tindex":"507116b7-2e87-11e6-84ed-97df631037da","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:393","type":"CtMethodImpl","sourcecode":"public byte[] decode(final java.lang.String pArray) {\n    if ((pArray.length()) == 0) {\n        {\n            return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"pArray"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtBinaryOperatorImpl","sourcecode":"u == 0"},"failures":[85,86,87,88],"tindex":"507116b8-2e87-11e6-84ed-95958d56bd29","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:384","type":"CtMethodImpl","sourcecode":"private static int fourBytesToInt(final byte[] b, int offset) {\n    if (offset == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)]);\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 16;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24;\n            return value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"u":"offset"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtBinaryOperatorImpl","sourcecode":"((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))"},"failures":[],"tindex":"50713dc9-2e87-11e6-84ed-555527d1398d","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:417","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String text) {\n    if (((text == null) || (text.equalsIgnoreCase(name2))) || (text.equalsIgnoreCase(name2))) {\n        {\n            return colognePhonetic(text);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"text","name2":"text","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"text"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"50713dca-2e87-11e6-84ed-27550628a160","method":{"position":"org.apache.commons.codec.digest.DigestUtils:687","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"data"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[47],"tindex":"507164db-2e87-11e6-84ed-2500d3a5819e","method":{"position":"org.apache.commons.codec.digest.DigestUtils:704","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[66],"tindex":"507164dc-2e87-11e6-84ed-4f878924fa61","method":{"position":"org.apache.commons.codec.binary.Base64:537","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final byte[] arrayOctet) {\n    if (arrayOctet == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                if ((!(org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i]))) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"arrayOctet"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[89,90,91],"tindex":"50718bed-2e87-11e6-84ed-db9ec9ea4337","method":{"position":"org.apache.commons.codec.net.BCodec:92","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.Base64.encodeBase64(bytes);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121],"tindex":"5071b2fe-2e87-11e6-84ed-97702f80dd04","method":{"position":"org.apache.commons.codec.language.Metaphone:342","type":"CtMethodImpl","sourcecode":"private boolean isPreviousChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (index == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index == 0) {\n                {\n                    boolean boolean = false;\n                    if ((index > 0) && (index < (string.length()))) {\n                        matches = (string.charAt((index - 1))) == c;\n                    } \n                    return matches;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:470","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[],"tindex":"5071b2ff-2e87-11e6-84ed-9d7f7e4b577b","method":{"position":"org.apache.commons.codec.language.Metaphone:342","type":"CtMethodImpl","sourcecode":"private boolean isPreviousChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (index == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index == 0) {\n                {\n                    boolean boolean = false;\n                    if ((index > 0) && (index < (string.length()))) {\n                        matches = (string.charAt((index - 1))) == c;\n                    } \n                    return matches;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtUnaryOperatorImpl","sourcecode":"!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))"},"failures":[],"tindex":"5071da10-2e87-11e6-84ed-19d387766a5b","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:758","type":"CtMethodImpl","sourcecode":"private int handleZ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (!(value.matches(((\"^[\" + value) + \"]{2,}$\")))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                result.append('J');\n                index += 2;\n            } else {\n                if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n                    result.append(\"S\", \"TS\");\n                } else {\n                    result.append('S');\n                }\n                index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"value","org.apache.commons.codec.digest.B64.B64T":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[122,123],"tindex":"5071da11-2e87-11e6-84ed-f57e7b538cfc","method":{"position":"org.apache.commons.codec.digest.HmacUtils:116","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha384(final byte[] key) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:447","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[124,13,125],"tindex":"50720122-2e87-11e6-84ed-65b0b40ba1f3","method":{"position":"org.apache.commons.codec.language.SoundexUtils:109","type":"CtMethodImpl","sourcecode":"static int differenceEncoded(final java.lang.String es1, final java.lang.String es2) {\n    if (es1 == null) {\n        {\n            if ((es1 == null) || (es2 == null)) {\n                return 0;\n            } \n            final int int = java.lang.Math.min(es1.length(), es2.length());\n            int int = 0;\n            for (int int = 0 ; i < lengthToMatch ; i++) {\n                if ((es1.charAt(i)) == (es2.charAt(i))) {\n                    diff++;\n                } \n            }\n            return diff;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"es1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtInvocationImpl","sourcecode":"incl.contains(\" \")"},"failures":[],"tindex":"50720123-2e87-11e6-84ed-95f73520069e","method":{"position":"org.apache.commons.codec.language.bm.Rule:239","type":"CtMethodImpl","sourcecode":"private static boolean contains(final java.lang.CharSequence chars, final char input) {\n    if (chars.contains(\" \")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (int int = 0 ; i < (chars.length()) ; i++) {\n                if ((chars.charAt(i)) == input) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"incl":"chars"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[1,3,4,5,6,7,8,9,10,11,12,13,15,16,19,20,21,22,23],"tindex":"50720124-2e87-11e6-84ed-7b019e6380cc","method":{"position":"org.apache.commons.codec.language.Soundex:166","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        {\n            return soundex(str);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtBinaryOperatorImpl","sourcecode":"(content.length()) == 0"},"failures":[126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143],"tindex":"50722835-2e87-11e6-84ed-e909f1825466","method":{"position":"org.apache.commons.codec.language.bm.Rule:365","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.Phoneme parsePhoneme(final java.lang.String ph) {\n    if (((ph.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        {\n            if ((ph.length()) == 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final int int = ph.indexOf(\"[\");\n                    if (open >= 0) {\n                        if (!(ph.endsWith(\"]\"))) {\n                            throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n                        } \n                        final java.lang.String java.lang.String = ph.substring(0, open);\n                        final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1));\n                        final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")));\n                        return new org.apache.commons.codec.language.bm.Rule.Phoneme(before , org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs));\n                    } else {\n                        return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet);\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"content":"ph"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[144,145],"tindex":"50722836-2e87-11e6-84ed-fb5d09b7fa5f","method":{"position":"org.apache.commons.codec.digest.HmacUtils:789","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac updateHmac(final javax.crypto.Mac mac, final java.lang.String valueToDigest) {\n    if (valueToDigest.endsWith(valueToDigest)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            mac.reset();\n            mac.update(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n            return mac;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"valueToDigest","line":"valueToDigest"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:413","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[],"tindex":"50724f47-2e87-11e6-84ed-7d71ed28b3a9","method":{"position":"org.apache.commons.codec.net.BCodec:197","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object value) throws org.apache.commons.codec.EncoderException {\n    if (!(value instanceof byte[])) {\n        {\n            if (value.endsWith(value)) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (value == null) {\n                        return null;\n                    } else if (value instanceof java.lang.String) {\n                        return encode(((java.lang.String)(value)));\n                    } else {\n                        throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n                    }\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"value","line":"value"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"50724f48-2e87-11e6-84ed-dfa4509cd484","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:268","type":"CtMethodImpl","sourcecode":"public static char[] toAsciiChars(final byte[] raw) {\n    if (raw == raw) {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[];\n            } \n            final char[] char[] = new char[(raw.int) << 3];\n            for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                        l_ascii[(jj - bits)] = '0';\n                    } else {\n                        l_ascii[(jj - bits)] = '1';\n                    }\n                }\n            }\n            return l_ascii;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"raw","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"raw"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:72","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX)"},"failures":[],"tindex":"50727659-2e87-11e6-84ed-31451a0ae22c","method":{"position":"org.apache.commons.codec.language.bm.Rule:531","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input.startsWith(input)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"input","org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX":"input"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:70","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX)"},"failures":[72,73,74,75,76],"tindex":"5072765a-2e87-11e6-84ed-df613076acd6","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:739","type":"CtMethodImpl","sourcecode":"private int handleX(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value.startsWith(value)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index == 0) {\n                result.append('S');\n                index++;\n            } else {\n                if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n                    result.append(\"KS\");\n                } \n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"value","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:176","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143],"tindex":"5072765b-2e87-11e6-84ed-5331be547f3c","method":{"position":"org.apache.commons.codec.language.bm.Rule:499","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.RPattern pattern(final java.lang.String regex) {\n    if (regex == null) {\n        {\n            final boolean boolean = regex.startsWith(\"^\");\n            final boolean boolean = regex.endsWith(\"$\");\n            final java.lang.String java.lang.String = regex.substring((startsWith ? 1 : 0), (endsWith ? (regex.length()) - 1 : regex.length()));\n            final boolean boolean = content.contains(\"[\");\n            if (!boxes) {\n                if (startsWith && endsWith) {\n                    if ((content.length()) == 0) {\n                        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                            @java.lang.Override\n                            public boolean isMatch(final java.lang.CharSequence input) {\n                                return (input.length()) == 0;\n                            }\n                        };\n                    } else {\n                        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                            @java.lang.Override\n                            public boolean isMatch(final java.lang.CharSequence input) {\n                                return input.equals(content);\n                            }\n                        };\n                    }\n                } else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n                    return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern;\n                } else if (startsWith) {\n                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                        @java.lang.Override\n                        public boolean isMatch(final java.lang.CharSequence input) {\n                            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n                        }\n                    };\n                } else if (endsWith) {\n                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                        @java.lang.Override\n                        public boolean isMatch(final java.lang.CharSequence input) {\n                            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n                        }\n                    };\n                } \n            } else {\n                final boolean boolean = content.startsWith(\"[\");\n                final boolean boolean = content.endsWith(\"]\");\n                if (startsWithBox && endsWithBox) {\n                    java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1));\n                    if (!(boxContent.contains(\"[\"))) {\n                        final boolean boolean = boxContent.startsWith(\"^\");\n                        if (negate) {\n                            boxContent = boxContent.substring(1);\n                        } \n                        final java.lang.String java.lang.String = boxContent;\n                        final boolean boolean = !negate;\n                        if (startsWith && endsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                                }\n                            };\n                        } else if (startsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                                }\n                            };\n                        } else if (endsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                                }\n                            };\n                        } \n                    } \n                } \n            }\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(regex);\n\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(input);\n                    return matcher.find();\n                }\n            };\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"regex"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:238","type":"CtBinaryOperatorImpl","sourcecode":"(ii & 1) == 1"},"failures":[146,147,148,149,150,151,61,152,153,154,155,156,157,62,158,159,160,161,162,163,164,79,165,80,166,167,83,168,169,170,171,89,90,91],"tindex":"5072c47c-2e87-11e6-84ed-59e78e50015b","method":{"position":"org.apache.commons.codec.binary.Base64:660","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe, final int maxResultSize) {\n    if ((maxResultSize & 1) == 1) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((binaryData == null) || ((binaryData.int) == 0)) {\n                return binaryData;\n            } \n            final org.apache.commons.codec.binary.Base64 org.apache.commons.codec.binary.Base64 = isChunked ? new org.apache.commons.codec.binary.Base64(urlSafe) : new org.apache.commons.codec.binary.Base64(0 , org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[] , urlSafe);\n            final long long = b64.getEncodedLength(binaryData);\n            if (len > maxResultSize) {\n                throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + len) + \") than the specified maximum size of \") + maxResultSize));\n            } \n            return b64.encode(binaryData);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ii":"maxResultSize"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"5072eb8d-2e87-11e6-84ed-e9b22d97f1ac","method":{"position":"org.apache.commons.codec.binary.Base64:497","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static boolean isArrayByteBase64(final byte[] arrayOctet) {\n    if (arrayOctet == null) {\n        {\n            if (arrayOctet == null) {\n                {\n                    return org.apache.commons.codec.binary.Base64.isBase64(arrayOctet);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"arrayOctet"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[47],"tindex":"5072eb8e-2e87-11e6-84ed-099a5e1f3044","method":{"position":"org.apache.commons.codec.digest.DigestUtils:719","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final java.lang.String data) {\n    if (data == null) {\n        {\n            if (data == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[172,173,174,175,176],"tindex":"5072eb8f-2e87-11e6-84ed-75fd88eda6ee","method":{"position":"org.apache.commons.codec.net.QCodec:264","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return decodeText(str);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[177,178,179,180,146,147,148,181,149,150,151,61,152,153,154,155,156,182,157,62,158,159,160,163,164,79,165,80,183,166,184,167,83,185,186,187,188,189,190,191,192,168,169,170,171,193,194,89,90,91],"tindex":"507312a0-2e87-11e6-84ed-7d0afc43e9c9","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:425","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            if ((pArray == null) || ((pArray.int) == 0)) {\n                return pArray;\n            } \n            final org.apache.commons.codec.binary.BaseNCodec.Context org.apache.commons.codec.binary.BaseNCodec.Context = new org.apache.commons.codec.binary.BaseNCodec.Context();\n            encode(pArray, 0, pArray.int, context);\n            encode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context);\n            final byte[] byte[] = new byte[(context.int) - (context.int)];\n            readResults(buf, 0, buf.int, context);\n            return buf;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:214","type":"CtBinaryOperatorImpl","sourcecode":"((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name1))"},"failures":[],"tindex":"507312a1-2e87-11e6-84ed-d382676b3ea8","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:446","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.nio.charset.Charset charset) throws org.apache.commons.codec.DecoderException {\n    if (((str == null) || (str.equalsIgnoreCase(name1))) || (str.equalsIgnoreCase(name1))) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"str","name1":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"507339b2-2e87-11e6-84ed-014d24910c73","method":{"position":"org.apache.commons.codec.digest.DigestUtils:222","type":"CtMethodImpl","sourcecode":"public static java.lang.String md2Hex(final byte[] data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:422","type":"CtBinaryOperatorImpl","sourcecode":"cmtI >= 0"},"failures":[],"tindex":"507339b3-2e87-11e6-84ed-efcc023696ce","method":{"position":"org.apache.commons.codec.binary.Base32:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid encode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inPos >= 0) {\n        {\n            if (context.boolean) {\n                return ;\n            } \n            if (inAvail < 0) {\n                context.boolean = true;\n                if ((0 == (context.int)) && ((int) == 0)) {\n                    return ;\n                } \n                final byte[] byte[] = ensureBufferSize(int, context);\n                final int int = context.int;\n                switch (context.int) {\n                    case 0 :\n                        break;\n                    case 1 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    case 2 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    case 3 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    case 4 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 22))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 7))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    default :\n                        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                }\n                context.int += (context.int) - savedPos;\n                if (((int) > 0) && ((context.int) > 0)) {\n                    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                    context.int += byte[].int;\n                } \n            } else {\n                for (int int = 0 ; i < inAvail ; i++) {\n                    final byte[] byte[] = ensureBufferSize(int, context);\n                    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n                    int int = in[(inPos++)];\n                    if (b < 0) {\n                        b += 256;\n                    } \n                    context.long = ((context.long) << 8) + b;\n                    if (0 == (context.int)) {\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n                        if (((int) > 0) && ((int) <= (context.int))) {\n                            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                            context.int += byte[].int;\n                            context.int = 0;\n                        } \n                    } \n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmtI":"inPos"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:540","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"507387d4-2e87-11e6-84ed-f354ada227c5","method":{"position":"org.apache.commons.codec.digest.DigestUtils:719","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final java.lang.String data) {\n    if (data == null) {\n        {\n            if (data == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[195,196,85,86,87,197,198,88],"tindex":"5073aee5-2e87-11e6-84ed-e37d5015122d","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:198","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] original, java.lang.String salt) {\n    if (original == null) {\n        {\n            if (salt == null) {\n                final java.util.Random java.util.Random = new java.util.Random();\n                final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int;\n                salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)]);\n            } else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n                throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \");\n            final char char = salt.charAt(0);\n            final char char = salt.charAt(1);\n            buffer.setCharAt(0, charZero);\n            buffer.setCharAt(1, charOne);\n            final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charZero];\n            final int int = (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charOne]) << 4;\n            final byte[] byte[] = new byte[8];\n            for (int int = 0 ; i < (key.int) ; i++) {\n                key[i] = 0;\n            }\n            for (int int = 0 ; (i < (key.int)) && (i < (original.int)) ; i++) {\n                final int int = original[i];\n                key[i] = ((byte)(iChar << 1));\n            }\n            final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.desSetKey(key);\n            final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.body(schedule, eSwap0, eSwap1);\n            final byte[] byte[] = new byte[9];\n            org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[0], b, 0);\n            org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[1], b, 4);\n            b[8] = 0;\n            int int = 2;\n            int int = 0;\n            int int = 128;\n            for ( ; i < 13 ; i++) {\n                int int = 0;\n                int int = 0;\n                for ( ; j < 6 ; j++) {\n                    c <<= 1;\n                    if (((b[y]) & u) != 0) {\n                        c |= 1;\n                    } \n                    u >>>= 1;\n                    if (u == 0) {\n                        y++;\n                        u = 128;\n                    } \n                    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n                }\n            }\n            return buffer.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"original"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"5073d5f6-2e87-11e6-84ed-a35d986b197b","method":{"position":"org.apache.commons.codec.language.bm.Rule:571","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:145","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[],"tindex":"5073d5f7-2e87-11e6-84ed-0be46d64ccce","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str.endsWith(str)) {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"str","line":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtBinaryOperatorImpl","sourcecode":"(((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)"},"failures":[],"tindex":"5073fd08-2e87-11e6-84ed-e7db4ca322ce","method":{"position":"org.apache.commons.codec.language.bm.Lang:129","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang loadFromResource(final java.lang.String languageRulesResourceName, final org.apache.commons.codec.language.bm.Languages languages) {\n    if ((((languageRulesResourceName == null) || (languageRulesResourceName.equalsIgnoreCase(name))) || (languageRulesResourceName.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Lang.LangRule>();\n            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.Class.getClassLoader().getResourceAsStream(languageRulesResourceName);\n            if (lRulesIS == null) {\n                throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)));\n            } \n            final java.util.Scanner java.util.Scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n            try {\n                boolean boolean = false;\n                while (scanner.hasNextLine()) {\n                    final java.lang.String java.lang.String = scanner.nextLine();\n                    java.lang.String java.lang.String = rawLine;\n                    if (inExtendedComment) {\n                        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = false;\n                        } \n                    } else {\n                        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = true;\n                        } else {\n                            final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                            if (cmtI >= 0) {\n                                line = line.substring(0, cmtI);\n                            } \n                            line = line.trim();\n                            if ((line.length()) == 0) {\n                                continue;\n                            } \n                            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                            if ((parts.int) != 3) {\n                                throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                            } \n                            final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n                            final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n                            final boolean boolean = parts[2].equals(\"true\");\n                            rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n                        }\n                    }\n                }\n            } finally {\n                scanner.close();\n            }\n            return new org.apache.commons.codec.language.bm.Lang(rules , languages);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"languageRulesResourceName","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"languageRulesResourceName","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"languageRulesResourceName"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[45],"tindex":"50742419-2e87-11e6-84ed-5ffccc323587","method":{"position":"org.apache.commons.codec.digest.DigestUtils:516","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[199,200,201,202,203,204,205,206,207,208,209,210,211,172,174,175,176],"tindex":"5074241a-2e87-11e6-84ed-375879e910d1","method":{"position":"org.apache.commons.codec.net.Utils:42","type":"CtMethodImpl","sourcecode":"static int digit16(final byte b) throws org.apache.commons.codec.DecoderException {\n    if (b == b) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            final int int = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int);\n            if (i == (-1)) {\n                throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n            } \n            return i;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","pad":"b"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[199,200,201,212,202,203,204,205,206],"tindex":"5074241b-2e87-11e6-84ed-05e8e27926fd","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:409","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"50744b2c-2e87-11e6-84ed-cd2702f62813","method":{"position":"org.apache.commons.codec.binary.Base64:497","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static boolean isArrayByteBase64(final byte[] arrayOctet) {\n    if (arrayOctet == null) {\n        {\n            if (arrayOctet == null) {\n                {\n                    return org.apache.commons.codec.binary.Base64.isBase64(arrayOctet);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"arrayOctet"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:264","type":"CtBinaryOperatorImpl","sourcecode":"n > 0"},"failures":[213],"tindex":"50744b2d-2e87-11e6-84ed-ad080acf3e4d","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:182","type":"CtMethodImpl","sourcecode":"private static final int encodeQuotedPrintable(final int b, final java.io.ByteArrayOutputStream buffer) {\n    if (b > 0) {\n        {\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), 16));\n            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), 16));\n            buffer.write(hex1);\n            buffer.write(hex2);\n            return 3;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"b"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:429","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[214,215,74,216,217,218,219,220,221],"tindex":"50744b2e-2e87-11e6-84ed-634f82313d9c","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:75","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(final java.lang.String value) {\n    if ((value.length()) == 0) {\n        {\n            return doubleMetaphone(value, false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[],"tindex":"5074723f-2e87-11e6-84ed-77c1824047ed","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:331","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if ((str.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[162],"tindex":"50747240-2e87-11e6-84ed-69939dc37aa2","method":{"position":"org.apache.commons.codec.binary.Base64:553","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData) {\n    if (binaryData == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"binaryData"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[222],"tindex":"50747241-2e87-11e6-84ed-f776fa5a0f94","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:351","type":"CtMethodImpl","sourcecode":"java.lang.String removeAccents(final java.lang.String accentedWord) {\n    if (accentedWord == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (accentedWord == null) {\n                return null;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            final int int = accentedWord.length();\n            for (int int = 0 ; i < n ; i++) {\n                final char char = accentedWord.charAt(i);\n                final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(c);\n                if (pos > (-1)) {\n                    sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n                } else {\n                    sb.append(c);\n                }\n            }\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"accentedWord"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[126,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143],"tindex":"50749952-2e87-11e6-84ed-cf4c46b364ca","method":{"position":"org.apache.commons.codec.language.bm.Rule:353","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang == null) {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.get(nameType).get(rt).get(lang);\n            if (rules == null) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n            } \n            return rules;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"lang"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[59],"tindex":"50749953-2e87-11e6-84ed-c1ad86a0dc87","method":{"position":"org.apache.commons.codec.digest.Crypt:148","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String key, final java.lang.String salt) {\n    if (salt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"salt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtInvocationImpl","sourcecode":"value.startsWith(element)"},"failures":[42],"tindex":"50749954-2e87-11e6-84ed-cd7c0974ca71","method":{"position":"org.apache.commons.codec.digest.DigestUtils:320","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Hex(final java.lang.String data) {\n    if (data.startsWith(data)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"data","element":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"5074c065-2e87-11e6-84ed-d124117a5402","method":{"position":"org.apache.commons.codec.digest.HmacUtils:723","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[41,42,43,45,46,47,48],"tindex":"5074c066-2e87-11e6-84ed-39e24a01faa4","method":{"position":"org.apache.commons.codec.digest.DigestUtils:49","type":"CtMethodImpl","sourcecode":"private static byte[] digest(final java.security.MessageDigest digest, final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.updateDigest(digest, data).digest();\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:95","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txtLength = txt.length()) == 0)"},"failures":[],"tindex":"5074c067-2e87-11e6-84ed-8b884a246a79","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:843","type":"CtMethodImpl","sourcecode":"private boolean conditionM0(final java.lang.String value, final int index) {\n    if ((value == null) || ((index = txt.length()) == 0)) {\n        {\n            if ((charAt(value, (index + 1))) == 'M') {\n                return true;\n            } \n            return (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"UMB\")) && (((index + 1) == ((value.length()) - 1)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"ER\")));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"value","txtLength":"index"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"5074c068-2e87-11e6-84ed-89e7cc2337f0","method":{"position":"org.apache.commons.codec.language.bm.Rule:365","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.Phoneme parsePhoneme(final java.lang.String ph) {\n    if (((ph.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        {\n            if ((ph.length()) == 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final int int = ph.indexOf(\"[\");\n                    if (open >= 0) {\n                        if (!(ph.endsWith(\"]\"))) {\n                            throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n                        } \n                        final java.lang.String java.lang.String = ph.substring(0, open);\n                        final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1));\n                        final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")));\n                        return new org.apache.commons.codec.language.bm.Rule.Phoneme(before , org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs));\n                    } else {\n                        return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet);\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"ph"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:505","type":"CtUnaryOperatorImpl","sourcecode":"!boxes"},"failures":[],"tindex":"5074e779-2e87-11e6-84ed-3bac6ded8628","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (!concat) {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxes":"concat"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[78],"tindex":"50750e8a-2e87-11e6-84ed-0f5352308c18","method":{"position":"org.apache.commons.codec.binary.Base64:691","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final java.lang.String base64String) {\n    if (base64String == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.codec.binary.Base64().decode(base64String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"base64String"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtBinaryOperatorImpl","sourcecode":"ruleType == (org.apache.commons.codec.language.bm.RuleType.RULES)"},"failures":[132],"tindex":"50750e8b-2e87-11e6-84ed-bdc6c2c289be","method":{"position":"org.apache.commons.codec.language.bm.Rule:298","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.codec.language.bm.Rule> getInstance(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final org.apache.commons.codec.language.bm.Languages.LanguageSet langs) {\n    if (rt == rt) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, langs);\n            final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            for (final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> : ruleMap.values()) {\n                allRules.addAll(rules);\n            }\n            return allRules;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"rt","ruleType":"rt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:119","type":"CtVariableReadImpl","sourcecode":"propagate"},"failures":[223],"tindex":"50750e8c-2e87-11e6-84ed-4f58f8cc1ab1","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:463","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final byte[] arrayOctet, final boolean allowWSPad) {\n    if (!allowWSPad) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (allowWSPad) {\n                {\n                    for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                        if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"propagate":"allowWSPad"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,224,225],"tindex":"50755cad-2e87-11e6-84ed-a1bfab058555","method":{"position":"org.apache.commons.codec.language.Metaphone:92","type":"CtMethodImpl","sourcecode":"public java.lang.String metaphone(final java.lang.String txt) {\n    if (txt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((txt.length()) > (txt.length())) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (txt == null) {\n                        {\n                            boolean boolean = false;\n                            int int;\n                            if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n                                return \"\";\n                            } \n                            if (txtLength == 1) {\n                                return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                            } \n                            final char[] char[] = txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale).toCharArray();\n                            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40);\n                            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10);\n                            switch (inwd[0]) {\n                                case 'K' :\n                                case 'G' :\n                                case 'P' :\n                                    if ((inwd[1]) == 'N') {\n                                        local.append(inwd, 1, ((inwd.int) - 1));\n                                    } else {\n                                        local.append(inwd);\n                                    }\n                                    break;\n                                case 'A' :\n                                    if ((inwd[1]) == 'E') {\n                                        local.append(inwd, 1, ((inwd.int) - 1));\n                                    } else {\n                                        local.append(inwd);\n                                    }\n                                    break;\n                                case 'W' :\n                                    if ((inwd[1]) == 'R') {\n                                        local.append(inwd, 1, ((inwd.int) - 1));\n                                        break;\n                                    } \n                                    if ((inwd[1]) == 'H') {\n                                        local.append(inwd, 1, ((inwd.int) - 1));\n                                        local.setCharAt(0, 'W');\n                                    } else {\n                                        local.append(inwd);\n                                    }\n                                    break;\n                                case 'X' :\n                                    inwd[0] = 'S';\n                                    local.append(inwd);\n                                    break;\n                                default :\n                                    local.append(inwd);\n                            }\n                            final int int = local.length();\n                            int int = 0;\n                            while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n                                final char char = local.charAt(n);\n                                if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n                                    n++;\n                                } else {\n                                    switch (symb) {\n                                        case 'A' :\n                                        case 'E' :\n                                        case 'I' :\n                                        case 'O' :\n                                        case 'U' :\n                                            if (n == 0) {\n                                                code.append(symb);\n                                            } \n                                            break;\n                                        case 'B' :\n                                            if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                                                break;\n                                            } \n                                            code.append(symb);\n                                            break;\n                                        case 'C' :\n                                            if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                                break;\n                                            } \n                                            if (regionMatch(local, n, \"CIA\")) {\n                                                code.append('X');\n                                                break;\n                                            } \n                                            if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                                code.append('S');\n                                                break;\n                                            } \n                                            if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                                                code.append('K');\n                                                break;\n                                            } \n                                            if (isNextChar(local, n, 'H')) {\n                                                if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                                                    code.append('K');\n                                                } else {\n                                                    code.append('X');\n                                                }\n                                            } else {\n                                                code.append('K');\n                                            }\n                                            break;\n                                        case 'D' :\n                                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                                                code.append('J');\n                                                n += 2;\n                                            } else {\n                                                code.append('T');\n                                            }\n                                            break;\n                                        case 'G' :\n                                            if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                                                break;\n                                            } \n                                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                                                break;\n                                            } \n                                            if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                                                break;\n                                            } \n                                            if (isPreviousChar(local, n, 'G')) {\n                                                hard = true;\n                                            } else {\n                                                hard = false;\n                                            }\n                                            if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                                                code.append('J');\n                                            } else {\n                                                code.append('K');\n                                            }\n                                            break;\n                                        case 'H' :\n                                            if (isLastChar(wdsz, n)) {\n                                                break;\n                                            } \n                                            if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                                                break;\n                                            } \n                                            if (isVowel(local, (n + 1))) {\n                                                code.append('H');\n                                            } \n                                            break;\n                                        case 'F' :\n                                        case 'J' :\n                                        case 'L' :\n                                        case 'M' :\n                                        case 'N' :\n                                        case 'R' :\n                                            code.append(symb);\n                                            break;\n                                        case 'K' :\n                                            if (n > 0) {\n                                                if (!(isPreviousChar(local, n, 'C'))) {\n                                                    code.append(symb);\n                                                } \n                                            } else {\n                                                code.append(symb);\n                                            }\n                                            break;\n                                        case 'P' :\n                                            if (isNextChar(local, n, 'H')) {\n                                                code.append('F');\n                                            } else {\n                                                code.append(symb);\n                                            }\n                                            break;\n                                        case 'Q' :\n                                            code.append('K');\n                                            break;\n                                        case 'S' :\n                                            if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                                                code.append('X');\n                                            } else {\n                                                code.append('S');\n                                            }\n                                            break;\n                                        case 'T' :\n                                            if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                                                code.append('X');\n                                                break;\n                                            } \n                                            if (regionMatch(local, n, \"TCH\")) {\n                                                break;\n                                            } \n                                            if (regionMatch(local, n, \"TH\")) {\n                                                code.append('0');\n                                            } else {\n                                                code.append('T');\n                                            }\n                                            break;\n                                        case 'V' :\n                                            code.append('F');\n                                            break;\n                                        case 'W' :\n                                        case 'Y' :\n                                            if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                                                code.append(symb);\n                                            } \n                                            break;\n                                        case 'X' :\n                                            code.append('K');\n                                            code.append('S');\n                                            break;\n                                        case 'Z' :\n                                            code.append('S');\n                                            break;\n                                        default :\n                                            break;\n                                    }\n                                    n++;\n                                }\n                                if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n                                    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n                                } \n                            }\n                            return code.toString();\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"txt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[29,50,226,51,52,54],"tindex":"5075d1de-2e87-11e6-84ed-1d9654e7a8cf","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:101","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        {\n            if (salt == null) {\n                salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n            } \n            return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:335","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof byte[])"},"failures":[],"tindex":"5075d1df-2e87-11e6-84ed-2f114cef47e2","method":{"position":"org.apache.commons.codec.net.BCodec:197","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object value) throws org.apache.commons.codec.EncoderException {\n    if (!(value instanceof byte[])) {\n        {\n            if (value.endsWith(value)) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (value == null) {\n                        return null;\n                    } else if (value instanceof java.lang.String) {\n                        return encode(((java.lang.String)(value)));\n                    } else {\n                        throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n                    }\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"50764710-2e87-11e6-84ed-89ea267e45a4","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:97","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object raw) throws org.apache.commons.codec.EncoderException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        {\n            if (raw == null) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (!(raw instanceof byte[])) {\n                        throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n                    } \n                    return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)));\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"raw"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:176","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[227],"tindex":"50764711-2e87-11e6-84ed-73cd49661a35","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:421","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEqual(final java.lang.String text1, final java.lang.String text2) {\n    if (text2 == null) {\n        {\n            return colognePhonetic(text1).equals(colognePhonetic(text2));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"text2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[],"tindex":"50764712-2e87-11e6-84ed-a152f963ef4b","method":{"position":"org.apache.commons.codec.digest.HmacUtils:352","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key.equals(\"\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278],"tindex":"50766e23-2e87-11e6-84ed-e9831490416e","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:212","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEquals(java.lang.String name1, java.lang.String name2) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(name1, 0, 2, \"MC\")) {\n        {\n            if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n                return false;\n            } else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n                return false;\n            } else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n                return false;\n            } else if (name1.equalsIgnoreCase(name2)) {\n                return true;\n            } \n            name1 = cleanName(name1);\n            name2 = cleanName(name2);\n            name1 = removeVowels(name1);\n            name2 = removeVowels(name2);\n            name1 = removeDoubleConsonants(name1);\n            name2 = removeDoubleConsonants(name2);\n            name1 = getFirst3Last3(name1);\n            name2 = getFirst3Last3(name2);\n            if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                return false;\n            } \n            final int int = java.lang.Math.abs(((name1.length()) + (name2.length())));\n            int int = 0;\n            minRating = getMinRating(sumLength);\n            final int int = leftToRightThenRightToLeftProcessing(name1, name2);\n            return count >= minRating;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtBinaryOperatorImpl","sourcecode":"b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[179,180,146,279,280,281,282,147,148,78,181,149,283,150,151,61,284,152,153,154,155,156,182,157,285,62,158,286,159,287,160,288,289,63,161,162,163,164,290,79,291,292,165,80,65,183,166,184,81,82,167,83,84,293,294,295,296,168,297,298,299,300,301,302,303,304,305,306,307,308,169,309,310,170,311,312,313,171,89,90,314,91],"tindex":"50766e24-2e87-11e6-84ed-ff10040b1d67","method":{"position":"org.apache.commons.codec.binary.Base64:780","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected boolean isInAlphabet(final byte octet) {\n    if (octet != octet) {\n        {\n            return ((octet >= 0) && (octet < (byte[].int))) && ((byte[][octet]) != (-1));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"octet","org.apache.commons.codec.net.QCodec.UNDERSCORE":"octet"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:351","type":"CtUnaryOperatorImpl","sourcecode":"!found"},"failures":[],"tindex":"50769535-2e87-11e6-84ed-bfeaa2e56820","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:463","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final byte[] arrayOctet, final boolean allowWSPad) {\n    if (!allowWSPad) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (allowWSPad) {\n                {\n                    for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                        if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"found":"allowWSPad"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[],"tindex":"50769536-2e87-11e6-84ed-e37c8882a8f8","method":{"position":"org.apache.commons.codec.binary.Base32:536","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isInAlphabet(final byte octet) {\n    if (octet == octet) {\n        {\n            return ((octet >= 0) && (octet < (byte[].int))) && ((byte[][octet]) != (-1));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"octet","pad":"octet"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[315],"tindex":"50769537-2e87-11e6-84ed-e1e80eb80bfb","method":{"position":"org.apache.commons.codec.digest.HmacUtils:494","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:540","type":"CtVariableReadImpl","sourcecode":"branching"},"failures":[202,204,316,317,318],"tindex":"5076bc48-2e87-11e6-84ed-7705f19a3ff2","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:220","type":"CtMethodImpl","sourcecode":"private static int encodeByte(final int b, final boolean encode, final java.io.ByteArrayOutputStream buffer) {\n    if (b > 0) {\n        {\n            if (encode) {\n                {\n                    if (encode) {\n                        return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n                    } else {\n                        buffer.write(b);\n                        return 1;\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"branching":"encode"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:283","type":"CtBinaryOperatorImpl","sourcecode":"lineLength > 0"},"failures":[],"tindex":"5076bc49-2e87-11e6-84ed-65519fd3bc7d","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:220","type":"CtMethodImpl","sourcecode":"private static int encodeByte(final int b, final boolean encode, final java.io.ByteArrayOutputStream buffer) {\n    if (b > 0) {\n        {\n            if (encode) {\n                {\n                    if (encode) {\n                        return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n                    } else {\n                        buffer.write(b);\n                        return 1;\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineLength":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:336","type":"CtBinaryOperatorImpl","sourcecode":"(strA.length()) > (strB.length())"},"failures":[],"tindex":"5076bc4a-2e87-11e6-84ed-6db6a5c956ae","method":{"position":"org.apache.commons.codec.language.Metaphone:92","type":"CtMethodImpl","sourcecode":"public java.lang.String metaphone(final java.lang.String txt) {\n    if (txt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((txt.length()) > (txt.length())) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (txt == null) {\n                        {\n                            boolean boolean = false;\n                            int int;\n                            if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n                                return \"\";\n                            } \n                            if (txtLength == 1) {\n                                return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                            } \n                            final char[] char[] = txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale).toCharArray();\n                            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40);\n                            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10);\n                            switch (inwd[0]) {\n                                case 'K' :\n                                case 'G' :\n                                case 'P' :\n                                    if ((inwd[1]) == 'N') {\n                                        local.append(inwd, 1, ((inwd.int) - 1));\n                                    } else {\n                                        local.append(inwd);\n                                    }\n                                    break;\n                                case 'A' :\n                                    if ((inwd[1]) == 'E') {\n                                        local.append(inwd, 1, ((inwd.int) - 1));\n                                    } else {\n                                        local.append(inwd);\n                                    }\n                                    break;\n                                case 'W' :\n                                    if ((inwd[1]) == 'R') {\n                                        local.append(inwd, 1, ((inwd.int) - 1));\n                                        break;\n                                    } \n                                    if ((inwd[1]) == 'H') {\n                                        local.append(inwd, 1, ((inwd.int) - 1));\n                                        local.setCharAt(0, 'W');\n                                    } else {\n                                        local.append(inwd);\n                                    }\n                                    break;\n                                case 'X' :\n                                    inwd[0] = 'S';\n                                    local.append(inwd);\n                                    break;\n                                default :\n                                    local.append(inwd);\n                            }\n                            final int int = local.length();\n                            int int = 0;\n                            while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n                                final char char = local.charAt(n);\n                                if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n                                    n++;\n                                } else {\n                                    switch (symb) {\n                                        case 'A' :\n                                        case 'E' :\n                                        case 'I' :\n                                        case 'O' :\n                                        case 'U' :\n                                            if (n == 0) {\n                                                code.append(symb);\n                                            } \n                                            break;\n                                        case 'B' :\n                                            if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                                                break;\n                                            } \n                                            code.append(symb);\n                                            break;\n                                        case 'C' :\n                                            if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                                break;\n                                            } \n                                            if (regionMatch(local, n, \"CIA\")) {\n                                                code.append('X');\n                                                break;\n                                            } \n                                            if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                                code.append('S');\n                                                break;\n                                            } \n                                            if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                                                code.append('K');\n                                                break;\n                                            } \n                                            if (isNextChar(local, n, 'H')) {\n                                                if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                                                    code.append('K');\n                                                } else {\n                                                    code.append('X');\n                                                }\n                                            } else {\n                                                code.append('K');\n                                            }\n                                            break;\n                                        case 'D' :\n                                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                                                code.append('J');\n                                                n += 2;\n                                            } else {\n                                                code.append('T');\n                                            }\n                                            break;\n                                        case 'G' :\n                                            if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                                                break;\n                                            } \n                                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                                                break;\n                                            } \n                                            if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                                                break;\n                                            } \n                                            if (isPreviousChar(local, n, 'G')) {\n                                                hard = true;\n                                            } else {\n                                                hard = false;\n                                            }\n                                            if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                                                code.append('J');\n                                            } else {\n                                                code.append('K');\n                                            }\n                                            break;\n                                        case 'H' :\n                                            if (isLastChar(wdsz, n)) {\n                                                break;\n                                            } \n                                            if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                                                break;\n                                            } \n                                            if (isVowel(local, (n + 1))) {\n                                                code.append('H');\n                                            } \n                                            break;\n                                        case 'F' :\n                                        case 'J' :\n                                        case 'L' :\n                                        case 'M' :\n                                        case 'N' :\n                                        case 'R' :\n                                            code.append(symb);\n                                            break;\n                                        case 'K' :\n                                            if (n > 0) {\n                                                if (!(isPreviousChar(local, n, 'C'))) {\n                                                    code.append(symb);\n                                                } \n                                            } else {\n                                                code.append(symb);\n                                            }\n                                            break;\n                                        case 'P' :\n                                            if (isNextChar(local, n, 'H')) {\n                                                code.append('F');\n                                            } else {\n                                                code.append(symb);\n                                            }\n                                            break;\n                                        case 'Q' :\n                                            code.append('K');\n                                            break;\n                                        case 'S' :\n                                            if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                                                code.append('X');\n                                            } else {\n                                                code.append('S');\n                                            }\n                                            break;\n                                        case 'T' :\n                                            if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                                                code.append('X');\n                                                break;\n                                            } \n                                            if (regionMatch(local, n, \"TCH\")) {\n                                                break;\n                                            } \n                                            if (regionMatch(local, n, \"TH\")) {\n                                                code.append('0');\n                                            } else {\n                                                code.append('T');\n                                            }\n                                            break;\n                                        case 'V' :\n                                            code.append('F');\n                                            break;\n                                        case 'W' :\n                                        case 'Y' :\n                                            if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                                                code.append(symb);\n                                            } \n                                            break;\n                                        case 'X' :\n                                            code.append('K');\n                                            code.append('S');\n                                            break;\n                                        case 'Z' :\n                                            code.append('S');\n                                            break;\n                                        default :\n                                            break;\n                                    }\n                                    n++;\n                                }\n                                if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n                                    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n                                } \n                            }\n                            return code.toString();\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strA":"txt","strB":"txt"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:319","type":"CtInvocationImpl","sourcecode":"name1LtRStart.equals(name2RtLStart)"},"failures":[],"tindex":"5077317b-2e87-11e6-84ed-3b8a3dfc3267","method":{"position":"org.apache.commons.codec.language.bm.Rule:579","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input.equals(input)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2RtLStart":"input","name1LtRStart":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:283","type":"CtBinaryOperatorImpl","sourcecode":"lineLength > 0"},"failures":[24,319,25,27,320,33,321,53,322,57,59,60],"tindex":"5077317c-2e87-11e6-84ed-df43d4881738","method":{"position":"org.apache.commons.codec.digest.B64:72","type":"CtMethodImpl","sourcecode":"static java.lang.String getRandomSalt(final int num) {\n    if (num > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 1 ; i <= num ; i++) {\n                saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())));\n            }\n            return saltString.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineLength":"num"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:134","type":"CtBinaryOperatorImpl","sourcecode":"curr == 'M'"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"tindex":"5077588d-2e87-11e6-84ed-ad7e91f15dda","method":{"position":"org.apache.commons.codec.language.Soundex:229","type":"CtMethodImpl","sourcecode":"private char map(final char ch) {\n    if (ch == 'M') {\n        {\n            final int int = ch - 'A';\n            if ((index < 0) || (index >= (org.apache.commons.codec.language.Soundex.this.getSoundexMapping().int))) {\n                throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch));\n            } \n            return org.apache.commons.codec.language.Soundex.this.getSoundexMapping()[index];\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"curr":"ch"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtInvocationImpl","sourcecode":"value.startsWith(element)"},"failures":[323],"tindex":"5077588e-2e87-11e6-84ed-cd4add9b57b1","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:482","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final java.lang.String basen) {\n    if (basen.startsWith(basen)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return isInAlphabet(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(basen), true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"basen","element":"basen"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:162","type":"CtBinaryOperatorImpl","sourcecode":"nameLength > (org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX)"},"failures":[324,325,326,327,177,178,302,309,310,170,311,312,313,171,328],"tindex":"5077588f-2e87-11e6-84ed-f907de8348cb","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final byte[] b, final int offset, final int len) throws java.io.IOException {\n    if (offset > offset) {\n        {\n            if (b == null) {\n                throw new java.lang.NullPointerException();\n            } else if ((offset < 0) || (len < 0)) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if (len > 0) {\n                if (boolean) {\n                    org.apache.commons.codec.binary.BaseNCodec.encode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                } else {\n                    org.apache.commons.codec.binary.BaseNCodec.decode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                }\n                flush(false);\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameLength":"offset","org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX":"offset"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"50777fa0-2e87-11e6-84ed-6bdc3bfad9db","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:97","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object raw) throws org.apache.commons.codec.EncoderException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        {\n            if (raw == null) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (!(raw instanceof byte[])) {\n                        throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n                    } \n                    return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)));\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtBinaryOperatorImpl","sourcecode":"(!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))"},"failures":[],"tindex":"50777fa1-2e87-11e6-84ed-3f29c11b981b","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object other) {\n    if ((!(other.startsWith(other))) || (!(text.endsWith(other)))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.this) == other) {\n                return true;\n            } \n            if (!(other instanceof org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)) {\n                return false;\n            } \n            return toString().equals(((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)(other)).toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.net.RFC1522Codec.POSTFIX":"other","org.apache.commons.codec.net.RFC1522Codec.PREFIX":"other","text":"other"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"50777fa2-2e87-11e6-84ed-b3514916425b","method":{"position":"org.apache.commons.codec.language.Metaphone:92","type":"CtMethodImpl","sourcecode":"public java.lang.String metaphone(final java.lang.String txt) {\n    if (txt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((txt.length()) > (txt.length())) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (txt == null) {\n                        {\n                            boolean boolean = false;\n                            int int;\n                            if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n                                return \"\";\n                            } \n                            if (txtLength == 1) {\n                                return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                            } \n                            final char[] char[] = txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale).toCharArray();\n                            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40);\n                            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10);\n                            switch (inwd[0]) {\n                                case 'K' :\n                                case 'G' :\n                                case 'P' :\n                                    if ((inwd[1]) == 'N') {\n                                        local.append(inwd, 1, ((inwd.int) - 1));\n                                    } else {\n                                        local.append(inwd);\n                                    }\n                                    break;\n                                case 'A' :\n                                    if ((inwd[1]) == 'E') {\n                                        local.append(inwd, 1, ((inwd.int) - 1));\n                                    } else {\n                                        local.append(inwd);\n                                    }\n                                    break;\n                                case 'W' :\n                                    if ((inwd[1]) == 'R') {\n                                        local.append(inwd, 1, ((inwd.int) - 1));\n                                        break;\n                                    } \n                                    if ((inwd[1]) == 'H') {\n                                        local.append(inwd, 1, ((inwd.int) - 1));\n                                        local.setCharAt(0, 'W');\n                                    } else {\n                                        local.append(inwd);\n                                    }\n                                    break;\n                                case 'X' :\n                                    inwd[0] = 'S';\n                                    local.append(inwd);\n                                    break;\n                                default :\n                                    local.append(inwd);\n                            }\n                            final int int = local.length();\n                            int int = 0;\n                            while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n                                final char char = local.charAt(n);\n                                if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n                                    n++;\n                                } else {\n                                    switch (symb) {\n                                        case 'A' :\n                                        case 'E' :\n                                        case 'I' :\n                                        case 'O' :\n                                        case 'U' :\n                                            if (n == 0) {\n                                                code.append(symb);\n                                            } \n                                            break;\n                                        case 'B' :\n                                            if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                                                break;\n                                            } \n                                            code.append(symb);\n                                            break;\n                                        case 'C' :\n                                            if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                                break;\n                                            } \n                                            if (regionMatch(local, n, \"CIA\")) {\n                                                code.append('X');\n                                                break;\n                                            } \n                                            if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                                code.append('S');\n                                                break;\n                                            } \n                                            if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                                                code.append('K');\n                                                break;\n                                            } \n                                            if (isNextChar(local, n, 'H')) {\n                                                if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                                                    code.append('K');\n                                                } else {\n                                                    code.append('X');\n                                                }\n                                            } else {\n                                                code.append('K');\n                                            }\n                                            break;\n                                        case 'D' :\n                                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                                                code.append('J');\n                                                n += 2;\n                                            } else {\n                                                code.append('T');\n                                            }\n                                            break;\n                                        case 'G' :\n                                            if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                                                break;\n                                            } \n                                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                                                break;\n                                            } \n                                            if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                                                break;\n                                            } \n                                            if (isPreviousChar(local, n, 'G')) {\n                                                hard = true;\n                                            } else {\n                                                hard = false;\n                                            }\n                                            if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                                                code.append('J');\n                                            } else {\n                                                code.append('K');\n                                            }\n                                            break;\n                                        case 'H' :\n                                            if (isLastChar(wdsz, n)) {\n                                                break;\n                                            } \n                                            if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                                                break;\n                                            } \n                                            if (isVowel(local, (n + 1))) {\n                                                code.append('H');\n                                            } \n                                            break;\n                                        case 'F' :\n                                        case 'J' :\n                                        case 'L' :\n                                        case 'M' :\n                                        case 'N' :\n                                        case 'R' :\n                                            code.append(symb);\n                                            break;\n                                        case 'K' :\n                                            if (n > 0) {\n                                                if (!(isPreviousChar(local, n, 'C'))) {\n                                                    code.append(symb);\n                                                } \n                                            } else {\n                                                code.append(symb);\n                                            }\n                                            break;\n                                        case 'P' :\n                                            if (isNextChar(local, n, 'H')) {\n                                                code.append('F');\n                                            } else {\n                                                code.append(symb);\n                                            }\n                                            break;\n                                        case 'Q' :\n                                            code.append('K');\n                                            break;\n                                        case 'S' :\n                                            if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                                                code.append('X');\n                                            } else {\n                                                code.append('S');\n                                            }\n                                            break;\n                                        case 'T' :\n                                            if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                                                code.append('X');\n                                                break;\n                                            } \n                                            if (regionMatch(local, n, \"TCH\")) {\n                                                break;\n                                            } \n                                            if (regionMatch(local, n, \"TH\")) {\n                                                code.append('0');\n                                            } else {\n                                                code.append('T');\n                                            }\n                                            break;\n                                        case 'V' :\n                                            code.append('F');\n                                            break;\n                                        case 'W' :\n                                        case 'Y' :\n                                            if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                                                code.append(symb);\n                                            } \n                                            break;\n                                        case 'X' :\n                                            code.append('K');\n                                            code.append('S');\n                                            break;\n                                        case 'Z' :\n                                            code.append('S');\n                                            break;\n                                        default :\n                                            break;\n                                    }\n                                    n++;\n                                }\n                                if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n                                    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n                                } \n                            }\n                            return code.toString();\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"txt"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtBinaryOperatorImpl","sourcecode":"ascii == null"},"failures":[126,127,128,129,130,133,134,135,136,137,138,139,140,141,142,143],"tindex":"5077f4d3-2e87-11e6-84ed-0b3eb78b2230","method":{"position":"org.apache.commons.codec.language.bm.Lang:214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Languages.LanguageSet guessLanguages(final java.lang.String input) {\n    if (input == null) {\n        {\n            final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(org.apache.commons.codec.language.bm.Lang.this.org.apache.commons.codec.language.bm.Languages.getLanguages());\n            for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n                if (rule.matches(text)) {\n                    if (rule.boolean) {\n                        langs.retainAll(rule.java.util.Set<java.lang.String>);\n                    } else {\n                        langs.removeAll(rule.java.util.Set<java.lang.String>);\n                    }\n                } \n            }\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs);\n            return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[214,329,71,330,331,72,73,74,332,75,76],"tindex":"50781be4-2e87-11e6-84ed-d786d618a8aa","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:915","type":"CtMethodImpl","sourcecode":"protected static boolean contains(final java.lang.String value, final int start, final int length, final java.lang.String... criteria) {\n    if ((value.length()) == 0) {\n        {\n            boolean boolean = false;\n            if ((start >= 0) && ((start + length) <= (value.length()))) {\n                final java.lang.String java.lang.String = value.substring(start, (start + length));\n                for (final java.lang.String java.lang.String : criteria) {\n                    if (target.equals(element)) {\n                        result = true;\n                        break;\n                    } \n                }\n            } \n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"50781be5-2e87-11e6-84ed-257fb0559610","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:467","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (charset == null) {\n        throw new java.io.UnsupportedEncodingException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"charset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[41,42,43,45,46,47,48],"tindex":"507842f6-2e87-11e6-84ed-835836eb7ebc","method":{"position":"org.apache.commons.codec.digest.DigestUtils:792","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest updateDigest(final java.security.MessageDigest digest, final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            final byte[] byte[] = new byte[org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int];\n            int int = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int);\n            while (read > (-1)) {\n                digest.update(buffer, 0, read);\n                read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int);\n            }\n            return digest;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[333,334,122,335,145,336],"tindex":"507842f7-2e87-11e6-84ed-8b9e326ae20c","method":{"position":"org.apache.commons.codec.digest.HmacUtils:80","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha1(final byte[] key) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[],"tindex":"507842f8-2e87-11e6-84ed-2b3761724d86","method":{"position":"org.apache.commons.codec.language.bm.Languages:169","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Languages getInstance(final java.lang.String languagesResourceName) {\n    if (languagesResourceName.endsWith(languagesResourceName)) {\n        {\n            final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>();\n            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(languagesResourceName);\n            if (langIS == null) {\n                throw new java.lang.IllegalArgumentException((\"Unable to resolve required resource: \" + languagesResourceName));\n            } \n            final java.util.Scanner java.util.Scanner = new java.util.Scanner(langIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n            try {\n                boolean boolean = false;\n                while (lsScanner.hasNextLine()) {\n                    final java.lang.String java.lang.String = lsScanner.nextLine().trim();\n                    if (inExtendedComment) {\n                        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = false;\n                        } \n                    } else {\n                        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = true;\n                        } else if ((line.length()) > 0) {\n                            ls.add(line);\n                        } \n                    }\n                }\n            } finally {\n                lsScanner.close();\n            }\n            return new org.apache.commons.codec.language.bm.Languages(java.util.Collections.unmodifiableSet(ls));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"languagesResourceName","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"languagesResourceName"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:126","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'R'"},"failures":[337,338,339,340],"tindex":"50786a09-2e87-11e6-84ed-653672c22acc","method":{"position":"org.apache.commons.codec.binary.Hex:77","type":"CtMethodImpl","sourcecode":"public static byte[] decodeHex(final char[] data) throws org.apache.commons.codec.DecoderException {\n    if ((data[1]) == 'R') {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            final int int = data.int;\n            if ((len & 1) != 0) {\n                throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n            } \n            final byte[] byte[] = new byte[len >> 1];\n            for (int int = 0, int int = 0 ; j < len ; i++) {\n                int int = (org.apache.commons.codec.binary.Hex.toDigit(data[j], j)) << 4;\n                j++;\n                f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j));\n                j++;\n                out[i] = ((byte)(f & 255));\n            }\n            return out;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"5078911a-2e87-11e6-84ed-eb34622390b7","method":{"position":"org.apache.commons.codec.language.bm.Rule:519","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if ((input == null) || ((txt.length()) == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return input.equals(content);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[],"tindex":"5078911b-2e87-11e6-84ed-8d73da654ea2","method":{"position":"org.apache.commons.codec.digest.DigestUtils:349","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] sha(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtInvocationImpl","sourcecode":"str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[],"tindex":"5078911c-2e87-11e6-84ed-a9e2212b60a9","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:115","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object ascii) throws org.apache.commons.codec.DecoderException {\n    if (ascii.startsWith(ascii)) {\n        {\n            if (ascii == null) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            if (ascii instanceof byte[]) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n            } \n            if (ascii instanceof char[]) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n            } \n            if (ascii instanceof java.lang.String) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n            } \n            throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\");\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"ascii","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"ascii"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isLetter(c))"},"failures":[214,329,71,330,341,331,72,73,74,342,332,218,75,76,221],"tindex":"5078911d-2e87-11e6-84ed-99d6d2096cb7","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:946","type":"CtMethodImpl","sourcecode":"public void append(final char value) {\n    if (!(java.lang.Character.isLetter(value))) {\n        {\n            appendPrimary(value);\n            appendAlternate(value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"value"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
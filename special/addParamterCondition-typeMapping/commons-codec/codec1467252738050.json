{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":28,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":41,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":194,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":131,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":199,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":5,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":165,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":189,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":50,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":124,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse":212,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":155,"org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull":227,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":191,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":152,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt":63,"org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull":130,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":85,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":94,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":207,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":136,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":135,"org.apache.commons.codec.language.NysiisTest.testCap":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":210,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":75,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":80,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":134,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":208,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData":56,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":78,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":138,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":169,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":2,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":172,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":149,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":150,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":1,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":42,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":142,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":37,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":229,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":218,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":123,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8":100,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":197,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":32,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":90,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":133,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":192,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":211,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":72,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":26,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":204,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":221,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":79,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":232,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":170,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":102,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":44,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":101,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":188,"org.apache.commons.codec.language.NysiisTest.testDropBy":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":215,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":36,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":107,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":140,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":129,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":196,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":58,"org.apache.commons.codec.binary.Base64Test.testUUID":74,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":127,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":122,"org.apache.commons.codec.binary.Base64Test.testConstructors":91,"org.apache.commons.codec.language.NysiisTest.testRule2":11,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero":120,"org.apache.commons.codec.language.NysiisTest.testRule1":10,"org.apache.commons.codec.language.NysiisTest.testRule7":14,"org.apache.commons.codec.language.NysiisTest.testRule6":13,"org.apache.commons.codec.language.NysiisTest.testRule5":12,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":128,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":185,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":113,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":40,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt":59,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":161,"org.apache.commons.codec.language.NysiisTest.testBran":15,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":22,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":126,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":190,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":118,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":81,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":137,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse":200,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":176,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":186,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":66,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":168,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull":132,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":139,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":88,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":83,"org.apache.commons.codec.binary.HexTest.testEncodeEmpty":163,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":154,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":51,"org.apache.commons.codec.language.NysiisTest.testDad":7,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":98,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":174,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":225,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull":230,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":4,"org.apache.commons.codec.language.NysiisTest.testDan":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":201,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":178,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch":184,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":125,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":202,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":209,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":0,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":73,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse":183,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":175,"org.apache.commons.codec.binary.HexTest.testCustomCharset":159,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":198,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":217,"org.apache.commons.codec.language.NysiisTest.testSnat":17,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameToSingleLetter_KARL_C_DoesNotMatch":220,"org.apache.commons.codec.language.NysiisTest.testEncodeEmpty":24,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":34,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeNull":151,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":223,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":54,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":103,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":179,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":53,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":70,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":99,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":115,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse":181,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":106,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":45,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":48,"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence":153,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":43,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":157,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative":119,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":96,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":114,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt":68,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":166,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":55,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":231,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse":222,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":173,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":177,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":57,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":121,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":141,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":156,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch":224,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":164,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":82,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully":203,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":27,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":46,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":33,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":67,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":216,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":228,"org.apache.commons.codec.CharsetsTest.testToCharset":233,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":60,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":111,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":112,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":97,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":65,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":182,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":69,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":146,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":205,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":160,"org.apache.commons.codec.language.NysiisTest.testTranan":21,"org.apache.commons.codec.language.NysiisTest.testEncodeNull":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":206,"org.apache.commons.codec.language.NysiisTest.testFal":9,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":226,"org.apache.commons.codec.language.NysiisTest.testSnad":16,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":61,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":143,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":167,"org.apache.commons.codec.language.NysiisTest.testLocaleIndependence":25,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":49,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":95,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":39,"org.apache.commons.codec.binary.Base64Test.testBase64":93,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch":187,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":52,"org.apache.commons.codec.language.Caverphone1Test.testEncodeNull":76,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":30,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":171,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":87,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":110,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":145,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":109,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":162,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":116,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":144,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":64,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":86,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":105,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":219,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":18,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":89,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":214,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":148,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":62,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":158,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":71,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":147,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":193,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":31,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":84,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":117,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse":213,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":180,"org.apache.commons.codec.language.NysiisTest.testOthers":20,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":92,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":38,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":77,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":108,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":195},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtBinaryOperatorImpl","sourcecode":"index > 0"},"failures":[0,1,2,3],"tindex":"11fd6a2d-3e68-11e6-9622-87cd4aefa867","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:384","type":"CtMethodImpl","sourcecode":"private static int fourBytesToInt(final byte[] b, int offset) {\n    if (offset > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)]);\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 16;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24;\n            return value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"11fdb84e-3e68-11e6-9622-df6bca5ff693","method":{"position":"org.apache.commons.codec.language.Nysiis:247","type":"CtMethodImpl","sourcecode":"public java.lang.String nysiis(java.lang.String str) {\n    if (str.endsWith(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"MCC\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"NN\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"C\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"FF\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"SSS\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"Y\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"D\");\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length());\n            key.append(str.charAt(0));\n            final char[] char[] = str.toCharArray();\n            final int int = chars.int;\n            for (int int = 1 ; i < len ; i++) {\n                final char char = i < (len - 1) ? chars[(i + 1)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n                final char char = i < (len - 2) ? chars[(i + 2)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n                final char[] char[] = org.apache.commons.codec.language.Nysiis.transcodeRemaining(chars[(i - 1)], chars[i], next, aNext);\n                java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int);\n                if ((chars[i]) != (chars[(i - 1)])) {\n                    key.append(chars[i]);\n                } \n            }\n            if ((key.length()) > 1) {\n                char char = key.charAt(((key.length()) - 1));\n                if (lastChar == 'S') {\n                    key.deleteCharAt(((key.length()) - 1));\n                    lastChar = key.charAt(((key.length()) - 1));\n                } \n                if ((key.length()) > 2) {\n                    final char char = key.charAt(((key.length()) - 2));\n                    if ((last2Char == 'A') && (lastChar == 'Y')) {\n                        key.deleteCharAt(((key.length()) - 2));\n                    } \n                } \n                if (lastChar == 'A') {\n                    key.deleteCharAt(((key.length()) - 1));\n                } \n            } \n            final java.lang.String java.lang.String = key.toString();\n            return org.apache.commons.codec.language.Nysiis.this.isStrict() ? string.substring(0, java.lang.Math.min(org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.int, string.length())) : string;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"str","line":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:314","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")"},"failures":[26,27,28,29,30],"tindex":"11fe7b9f-3e68-11e6-9622-db7739185dca","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:739","type":"CtMethodImpl","sourcecode":"private int handleX(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n        {\n            if (index == 0) {\n                result.append('S');\n                index++;\n            } else {\n                if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n                    result.append(\"KS\");\n                } \n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[31,32,33,34,35,36,37,38,39,40,41],"tindex":"11fe7ba0-3e68-11e6-9622-f14120027f2c","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:485","type":"CtMethodImpl","sourcecode":"private java.lang.String[] soundex(final java.lang.String source, final boolean branching) {\n    if (source == null) {\n        {\n            if (source == null) {\n                return null;\n            } \n            final java.lang.String java.lang.String = cleanup(source);\n            final java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = new java.util.LinkedHashSet<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>();\n            currentBranches.add(new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch());\n            char char = '\u0000';\n            for (int int = 0 ; index < (input.length()) ; index++) {\n                final char char = input.charAt(index);\n                if (java.lang.Character.isWhitespace(ch)) {\n                    continue;\n                } \n                final java.lang.String java.lang.String = input.substring(index);\n                final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(ch);\n                if (rules == null) {\n                    continue;\n                } \n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.Collections.java.util.List;\n                for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n                    if (rule.matches(inputContext)) {\n                        if (branching) {\n                            nextBranches.clear();\n                        } \n                        final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n                        final boolean boolean = ((replacements.int) > 1) && branching;\n                        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                            for (final java.lang.String java.lang.String : replacements) {\n                                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                                final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                                nextBranch.processNextReplacement(nextReplacement, force);\n                                if (branching) {\n                                    nextBranches.add(nextBranch);\n                                } else {\n                                    break;\n                                }\n                            }\n                        }\n                        if (branching) {\n                            currentBranches.clear();\n                            currentBranches.addAll(nextBranches);\n                        } \n                        index += (rule.getPatternLength()) - 1;\n                        break;\n                    } \n                }\n                lastChar = ch;\n            }\n            final java.lang.String[] java.lang.String[] = new java.lang.String[currentBranches.size()];\n            int int = 0;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                branch.finish();\n                result[(index++)] = branch.toString();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:130","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'H'"},"failures":[42,43,44],"tindex":"11fea2b1-3e68-11e6-9622-db45e9e5d90d","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:171","type":"CtMethodImpl","sourcecode":"public static byte[] fromAscii(final char[] ascii) {\n    if ((ascii[1]) == 'H') {\n        {\n            if ((ascii == null) || ((ascii.int) == 0)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            final byte[] byte[] = new byte[(ascii.int) >> 3];\n            for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if ((ascii[(jj - bits)]) == '1') {\n                        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n                    } \n                }\n            }\n            return l_raw;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"ascii"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:392","type":"CtBinaryOperatorImpl","sourcecode":"(body.startsWith(\"|\")) || (body.endsWith(\"|\"))"},"failures":[],"tindex":"11fec9c2-3e68-11e6-9622-536ad928a939","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:135","type":"CtMethodImpl","sourcecode":"public void processNextReplacement(final java.lang.String replacement, final boolean forceAppend) {\n    if ((replacement.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = (((java.lang.String) == null) || (!(java.lang.String.endsWith(replacement)))) || forceAppend;\n            if (append && ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int))) {\n                java.lang.StringBuilder.append(replacement);\n                if ((java.lang.StringBuilder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n                    java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length());\n                } \n                java.lang.String = null;\n            } \n            java.lang.String = replacement;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"body":"replacement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"11fec9c3-3e68-11e6-9622-3151efaaeb9c","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:253","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeQuotedPrintable(java.util.BitSet printable, final byte[] bytes) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(bytes)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:301","type":"CtBinaryOperatorImpl","sourcecode":"(key.length()) > 2"},"failures":[45,46,47,48,49,50,51,52,53,54,55],"tindex":"11fef0d4-3e68-11e6-9622-819140580b8b","method":{"position":"org.apache.commons.codec.language.bm.Rule:198","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if ((input.length()) == 0) {\n        {\n            if ((input.length()) > 2) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"11fef0d5-3e68-11e6-9622-4f8a1ea4c887","method":{"position":"org.apache.commons.codec.digest.HmacUtils:387","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(key)) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[56,57,58,59,60,61,62,63,64,65,66,67,68,69],"tindex":"11fef0d6-3e68-11e6-9622-fd191efc2426","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:179","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String prefix) {\n    if (keyBytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (salt == null) {\n                {\n                    final int int = keyBytes.int;\n                    java.lang.String java.lang.String;\n                    if (salt == null) {\n                        saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n                    } else {\n                        final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n                        final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n                        if ((m == null) || (!(m.find()))) {\n                            throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n                        } \n                        saltString = m.group(1);\n                    }\n                    final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                    final java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n                    ctx.update(keyBytes);\n                    ctx.update(prefix.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n                    ctx.update(saltBytes);\n                    java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n                    ctx1.update(keyBytes);\n                    ctx1.update(saltBytes);\n                    ctx1.update(keyBytes);\n                    byte[] byte[] = ctx1.digest();\n                    int int = keyLen;\n                    while (ii > 0) {\n                        ctx.update(finalb, 0, (ii > 16 ? 16 : ii));\n                        ii -= 16;\n                    }\n                    java.util.Arrays.fill(finalb, ((byte)(0)));\n                    ii = keyLen;\n                    final int int = 0;\n                    while (ii > 0) {\n                        if ((ii & 1) == 1) {\n                            ctx.update(finalb[j]);\n                        } else {\n                            ctx.update(keyBytes[j]);\n                        }\n                        ii >>= 1;\n                    }\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((prefix + saltString) + \"$\"));\n                    finalb = ctx.digest();\n                    for (int int = 0 ; i < (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int) ; i++) {\n                        ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n                        if ((i & 1) != 0) {\n                            ctx1.update(keyBytes);\n                        } else {\n                            ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n                        }\n                        if ((i % 3) != 0) {\n                            ctx1.update(saltBytes);\n                        } \n                        if ((i % 7) != 0) {\n                            ctx1.update(keyBytes);\n                        } \n                        if ((i & 1) != 0) {\n                            ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n                        } else {\n                            ctx1.update(keyBytes);\n                        }\n                        finalb = ctx1.digest();\n                    }\n                    org.apache.commons.codec.digest.B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd);\n                    org.apache.commons.codec.digest.B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd);\n                    org.apache.commons.codec.digest.B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd);\n                    org.apache.commons.codec.digest.B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd);\n                    org.apache.commons.codec.digest.B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd);\n                    org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd);\n                    ctx.reset();\n                    ctx1.reset();\n                    java.util.Arrays.fill(keyBytes, ((byte)(0)));\n                    java.util.Arrays.fill(saltBytes, ((byte)(0)));\n                    java.util.Arrays.fill(finalb, ((byte)(0)));\n                    return passwd.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtUnaryOperatorImpl","sourcecode":"!ignoreCase"},"failures":[70,71,72,26,27,73],"tindex":"12013ac7-3e68-11e6-9622-9f91015e8bf5","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:244","type":"CtMethodImpl","sourcecode":"public boolean isDoubleMetaphoneEqual(final java.lang.String value1, final java.lang.String value2, final boolean alternate) {\n    if (!alternate) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.equals(doubleMetaphone(value1, alternate), doubleMetaphone(value2, alternate));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ignoreCase":"alternate"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtBinaryOperatorImpl","sourcecode":"((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)"},"failures":[],"tindex":"1201aff8-3e68-11e6-9622-6bd420527058","method":{"position":"org.apache.commons.codec.digest.DigestUtils:578","type":"CtMethodImpl","sourcecode":"public static byte[] sha384(final java.lang.String data) {\n    if (((data.length()) != 1) || ((data.length()) != 1)) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"leftCharacter":"data","rightCharacter":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"1201aff9-3e68-11e6-9622-4bcff93df376","method":{"position":"org.apache.commons.codec.digest.DigestUtils:411","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final byte[] data) {\n    if (data == data) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"data","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[74,75],"tindex":"1201affa-3e68-11e6-9622-ff16864153bb","method":{"position":"org.apache.commons.codec.binary.Base64:581","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64URLSafe(final byte[] binaryData) {\n    if (binaryData != null) {\n        {\n            if (binaryData == null) {\n                {\n                    return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"binaryData"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtInvocationImpl","sourcecode":"input.startsWith((l + \" \"))"},"failures":[76],"tindex":"1201affb-3e68-11e6-9622-39b014ebfa18","method":{"position":"org.apache.commons.codec.language.Caverphone1:45","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source.startsWith((source + \" \"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = source;\n            if ((txt == null) || ((txt.length()) == 0)) {\n                return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String;\n            } \n            txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            txt = txt.replaceAll(\"[^a-z]\", \"\");\n            txt = txt.replaceAll(\"^cough\", \"cou2f\");\n            txt = txt.replaceAll(\"^rough\", \"rou2f\");\n            txt = txt.replaceAll(\"^tough\", \"tou2f\");\n            txt = txt.replaceAll(\"^enough\", \"enou2f\");\n            txt = txt.replaceAll(\"^gn\", \"2n\");\n            txt = txt.replaceAll(\"mb$\", \"m2\");\n            txt = txt.replaceAll(\"cq\", \"2q\");\n            txt = txt.replaceAll(\"ci\", \"si\");\n            txt = txt.replaceAll(\"ce\", \"se\");\n            txt = txt.replaceAll(\"cy\", \"sy\");\n            txt = txt.replaceAll(\"tch\", \"2ch\");\n            txt = txt.replaceAll(\"c\", \"k\");\n            txt = txt.replaceAll(\"q\", \"k\");\n            txt = txt.replaceAll(\"x\", \"k\");\n            txt = txt.replaceAll(\"v\", \"f\");\n            txt = txt.replaceAll(\"dg\", \"2g\");\n            txt = txt.replaceAll(\"tio\", \"sio\");\n            txt = txt.replaceAll(\"tia\", \"sia\");\n            txt = txt.replaceAll(\"d\", \"t\");\n            txt = txt.replaceAll(\"ph\", \"fh\");\n            txt = txt.replaceAll(\"b\", \"p\");\n            txt = txt.replaceAll(\"sh\", \"s2\");\n            txt = txt.replaceAll(\"z\", \"s\");\n            txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n            txt = txt.replaceAll(\"[aeiou]\", \"3\");\n            txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n            txt = txt.replaceAll(\"gh\", \"22\");\n            txt = txt.replaceAll(\"g\", \"k\");\n            txt = txt.replaceAll(\"s+\", \"S\");\n            txt = txt.replaceAll(\"t+\", \"T\");\n            txt = txt.replaceAll(\"p+\", \"P\");\n            txt = txt.replaceAll(\"k+\", \"K\");\n            txt = txt.replaceAll(\"f+\", \"F\");\n            txt = txt.replaceAll(\"m+\", \"M\");\n            txt = txt.replaceAll(\"n+\", \"N\");\n            txt = txt.replaceAll(\"w3\", \"W3\");\n            txt = txt.replaceAll(\"wy\", \"Wy\");\n            txt = txt.replaceAll(\"wh3\", \"Wh3\");\n            txt = txt.replaceAll(\"why\", \"Why\");\n            txt = txt.replaceAll(\"w\", \"2\");\n            txt = txt.replaceAll(\"^h\", \"A\");\n            txt = txt.replaceAll(\"h\", \"2\");\n            txt = txt.replaceAll(\"r3\", \"R3\");\n            txt = txt.replaceAll(\"ry\", \"Ry\");\n            txt = txt.replaceAll(\"r\", \"2\");\n            txt = txt.replaceAll(\"l3\", \"L3\");\n            txt = txt.replaceAll(\"ly\", \"Ly\");\n            txt = txt.replaceAll(\"l\", \"2\");\n            txt = txt.replaceAll(\"j\", \"y\");\n            txt = txt.replaceAll(\"y3\", \"Y3\");\n            txt = txt.replaceAll(\"y\", \"2\");\n            txt = txt.replaceAll(\"2\", \"\");\n            txt = txt.replaceAll(\"3\", \"\");\n            txt = txt + (org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String);\n            return txt.substring(0, org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"source","l":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[77,78,79,80,81,82],"tindex":"1201fe1c-3e68-11e6-9622-87073efee067","method":{"position":"org.apache.commons.codec.net.URLCodec:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.net.URLCodec.encodeUrl(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet, bytes);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"1201fe1d-3e68-11e6-9622-971d76b22f64","method":{"position":"org.apache.commons.codec.digest.DigestUtils:775","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest updateDigest(final java.security.MessageDigest messageDigest, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            messageDigest.update(valueToDigest);\n            return messageDigest;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"valueToDigest"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:382","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[0,1,2,3],"tindex":"1201fe1e-3e68-11e6-9622-b9b9b1504233","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:281","type":"CtMethodImpl","sourcecode":"private static int[] body(final int[] schedule, final int eSwap0, final int eSwap1) {\n    if (eSwap0 > 0) {\n        {\n            if (eSwap0 < 0) {\n                {\n                    int int = 0;\n                    int int = 0;\n                    int int = 0;\n                    for (int int = 0 ; j < 25 ; j++) {\n                        for (int int = 0 ; i < 32 ; i += 4) {\n                            left = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(left, right, i, eSwap0, eSwap1, schedule);\n                            right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule);\n                        }\n                        t = left;\n                        left = right;\n                        right = t;\n                    }\n                    t = right;\n                    right = (left >>> 1) | (left << 31);\n                    left = (t >>> 1) | (t << 31);\n                    final int[] int[] = new int[2];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 1, 1431655765, results);\n                    right = results[0];\n                    left = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 8, 16711935, results);\n                    left = results[0];\n                    right = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 2, 858993459, results);\n                    right = results[0];\n                    left = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 16, 65535, results);\n                    left = results[0];\n                    right = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 4, 252645135, results);\n                    right = results[0];\n                    left = results[1];\n                    final int[] int[] = new int[2];\n                    out[0] = left;\n                    out[1] = right;\n                    return out;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"eSwap0"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],"tindex":"1202252f-3e68-11e6-9622-b734b5dba81f","method":{"position":"org.apache.commons.codec.binary.StringUtils:382","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf8(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newString(bytes, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:134","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[101,102],"tindex":"12022530-3e68-11e6-9622-5732a58ec926","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:334","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj instanceof java.lang.String)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof byte[])) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\");\n            } \n            return encode(((byte[])(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"12024c41-3e68-11e6-9622-d590325ad633","method":{"position":"org.apache.commons.codec.language.bm.Rule:531","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)"},"failures":[],"tindex":"12024c42-3e68-11e6-9622-515bc9756d39","method":{"position":"org.apache.commons.codec.digest.DigestUtils:672","type":"CtMethodImpl","sourcecode":"public static byte[] sha512(final java.lang.String data) {\n    if (data.startsWith(data)) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"data","line":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[103],"tindex":"12024c43-3e68-11e6-9622-cbb3dce4e300","method":{"position":"org.apache.commons.codec.digest.HmacUtils:474","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"valueToDigest"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtInvocationImpl","sourcecode":"incl.contains(\" \")"},"failures":[45,46,47,48,104,105,106,107,108,49,50,109,110,51,52,111,112,53,54,113,55,114,115,116,117,118,119,120],"tindex":"12024c44-3e68-11e6-9622-5dff7c8f6607","method":{"position":"org.apache.commons.codec.language.bm.Languages:169","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Languages getInstance(final java.lang.String languagesResourceName) {\n    if (languagesResourceName.contains(\" \")) {\n        {\n            final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>();\n            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(languagesResourceName);\n            if (langIS == null) {\n                throw new java.lang.IllegalArgumentException((\"Unable to resolve required resource: \" + languagesResourceName));\n            } \n            final java.util.Scanner java.util.Scanner = new java.util.Scanner(langIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n            try {\n                boolean boolean = false;\n                while (lsScanner.hasNextLine()) {\n                    final java.lang.String java.lang.String = lsScanner.nextLine().trim();\n                    if (inExtendedComment) {\n                        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = false;\n                        } \n                    } else {\n                        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = true;\n                        } else if ((line.length()) > 0) {\n                            ls.add(line);\n                        } \n                    }\n                }\n            } finally {\n                lsScanner.close();\n            }\n            return new org.apache.commons.codec.language.bm.Languages(java.util.Collections.unmodifiableSet(ls));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"incl":"languagesResourceName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:268","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[121],"tindex":"12027355-3e68-11e6-9622-bb00b9c34f37","method":{"position":"org.apache.commons.codec.digest.DigestUtils:469","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha256Digest(), data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"12027356-3e68-11e6-9622-cd34b0618be9","method":{"position":"org.apache.commons.codec.digest.HmacUtils:402","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[95],"tindex":"12027357-3e68-11e6-9622-c938c5267422","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:349","type":"CtMethodImpl","sourcecode":"public java.lang.String encodeToString(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newStringUtf8(encode(pArray));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"12027358-3e68-11e6-9622-0da745073e61","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:202","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\");\n                    } \n                    return doubleMetaphone(((java.lang.String)(obj)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[45,46,47,48,104,105,108,49,50,51,52,53,54,55],"tindex":"12029a69-3e68-11e6-9622-270c4a19f4f7","method":{"position":"org.apache.commons.codec.language.bm.Rule:239","type":"CtMethodImpl","sourcecode":"private static boolean contains(final java.lang.CharSequence chars, final char input) {\n    if (chars == null) {\n        {\n            for (int int = 0 ; i < (chars.length()) ; i++) {\n                if ((chars.charAt(i)) == input) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"chars"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[121],"tindex":"12029a6a-3e68-11e6-9622-3b0c269bb42b","method":{"position":"org.apache.commons.codec.digest.DigestUtils:516","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"12029a6b-3e68-11e6-9622-71c54159140e","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:216","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) {\n    if (((value.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        {\n            return doubleMetaphone(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[122,123,124],"tindex":"12029a6c-3e68-11e6-9622-37f3be77fd17","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:86","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(java.lang.String value, final boolean alternate) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            value = cleanInput(value);\n            if (value == null) {\n                return null;\n            } \n            final boolean boolean = isSlavoGermanic(value);\n            int int = isSilentStart(value) ? 1 : 0;\n            final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult = new org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult(org.apache.commons.codec.language.DoubleMetaphone.this.getMaxCodeLen());\n            while ((!(result.isComplete())) && (index <= ((value.length()) - 1))) {\n                switch (value.charAt(index)) {\n                    case 'A' :\n                    case 'E' :\n                    case 'I' :\n                    case 'O' :\n                    case 'U' :\n                    case 'Y' :\n                        index = handleAEIOUY(result, index);\n                        break;\n                    case 'B' :\n                        result.append('P');\n                        index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n                        break;\n                    case '\\u00c7' :\n                        result.append('S');\n                        index++;\n                        break;\n                    case 'C' :\n                        index = handleC(value, result, index);\n                        break;\n                    case 'D' :\n                        index = handleD(value, result, index);\n                        break;\n                    case 'F' :\n                        result.append('F');\n                        index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n                        break;\n                    case 'G' :\n                        index = handleG(value, result, index, slavoGermanic);\n                        break;\n                    case 'H' :\n                        index = handleH(value, result, index);\n                        break;\n                    case 'J' :\n                        index = handleJ(value, result, index, slavoGermanic);\n                        break;\n                    case 'K' :\n                        result.append('K');\n                        index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n                        break;\n                    case 'L' :\n                        index = handleL(value, result, index);\n                        break;\n                    case 'M' :\n                        result.append('M');\n                        index = conditionM0(value, index) ? index + 2 : index + 1;\n                        break;\n                    case 'N' :\n                        result.append('N');\n                        index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n                        break;\n                    case '\\u00d1' :\n                        result.append('N');\n                        index++;\n                        break;\n                    case 'P' :\n                        index = handleP(value, result, index);\n                        break;\n                    case 'Q' :\n                        result.append('K');\n                        index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n                        break;\n                    case 'R' :\n                        index = handleR(value, result, index, slavoGermanic);\n                        break;\n                    case 'S' :\n                        index = handleS(value, result, index, slavoGermanic);\n                        break;\n                    case 'T' :\n                        index = handleT(value, result, index);\n                        break;\n                    case 'V' :\n                        result.append('F');\n                        index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n                        break;\n                    case 'W' :\n                        index = handleW(value, result, index);\n                        break;\n                    case 'X' :\n                        index = handleX(value, result, index);\n                        break;\n                    case 'Z' :\n                        index = handleZ(value, result, index, slavoGermanic);\n                        break;\n                    default :\n                        index++;\n                        break;\n                }\n            }\n            return alternate ? result.getAlternate() : result.getPrimary();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:289","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"1203f9fd-3e68-11e6-9622-8f89dba12e90","method":{"position":"org.apache.commons.codec.digest.DigestUtils:719","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final java.lang.String data) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[125],"tindex":"1204210e-3e68-11e6-9622-0b169503149d","method":{"position":"org.apache.commons.codec.digest.HmacUtils:312","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[126,43],"tindex":"1204210f-3e68-11e6-9622-b527b6422b32","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:198","type":"CtMethodImpl","sourcecode":"public static byte[] fromAscii(final byte[] ascii) {\n    if (ascii == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            final byte[] byte[] = new byte[(ascii.int) >> 3];\n            for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if ((ascii[(jj - bits)]) == '1') {\n                        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n                    } \n                }\n            }\n            return l_raw;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"ascii"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[127,128,129,130,131,132,133],"tindex":"12042110-3e68-11e6-9622-d9467576df98","method":{"position":"org.apache.commons.codec.net.QCodec:264","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if ((str.length()) == 0) {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return decodeText(str);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:384","type":"CtBinaryOperatorImpl","sourcecode":"chr == 'R'"},"failures":[134,135,136,137,138,139,140,141,142,143],"tindex":"12042111-3e68-11e6-9622-19052b80e2a0","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:234","type":"CtMethodImpl","sourcecode":"public void addRight(final char chr) {\n    if (chr == 'R') {\n        {\n            char[][int] = chr;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"chr"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[144],"tindex":"12044822-3e68-11e6-9622-63fe1b27b385","method":{"position":"org.apache.commons.codec.digest.DigestUtils:546","type":"CtMethodImpl","sourcecode":"public static byte[] sha384(final byte[] data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.getSha384Digest().digest(data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"12044823-3e68-11e6-9622-b9c3e635a17c","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:376","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (obj instanceof byte[]) {\n                return decode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtBinaryOperatorImpl","sourcecode":"b == ' '"},"failures":[],"tindex":"12046f34-3e68-11e6-9622-d7cc14fa7e0e","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:392","type":"CtMethodImpl","sourcecode":"private static int hPermOp(int a, final int n, final int m) {\n    if (m == ' ') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ((a << (16 - n)) ^ a) & m;\n            a = (a ^ t) ^ (t >>> (16 - n));\n            return a;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"m"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[145],"tindex":"12049645-3e68-11e6-9622-0d177b6e2e24","method":{"position":"org.apache.commons.codec.digest.DigestUtils:309","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[65],"tindex":"12049646-3e68-11e6-9622-8bbfcd581012","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:104","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final java.lang.String keyBytes) {\n    if (keyBytes == null) {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"keyBytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"12049647-3e68-11e6-9622-73e5ad90f6c0","method":{"position":"org.apache.commons.codec.binary.Base64:497","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static boolean isArrayByteBase64(final byte[] arrayOctet) {\n    if (arrayOctet == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Base64.isBase64(arrayOctet);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"arrayOctet"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:263","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[],"tindex":"12049648-3e68-11e6-9622-7b0cf5fd5d36","method":{"position":"org.apache.commons.codec.language.bm.Rule:198","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if ((input.length()) == 0) {\n        {\n            if ((input.length()) > 2) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[146,147,148,149,150,151,152,153],"tindex":"12049649-3e68-11e6-9622-ddc060912e9d","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:175","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if ((str.length()) == 0) {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            sBuf.append(str.charAt(0));\n            char char;\n            char char;\n            last = '*';\n            for (int int = 0 ; i < (str.length()) ; i++) {\n                current = getMappingCode(str.charAt(i));\n                if (current == last) {\n                    continue;\n                } else if (current != 0) {\n                    sBuf.append(current);\n                } \n                last = current;\n            }\n            return sBuf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:71","type":"CtBinaryOperatorImpl","sourcecode":"((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))"},"failures":[],"tindex":"1204bd5a-3e68-11e6-9622-8be0c7d9d84e","method":{"position":"org.apache.commons.codec.language.Metaphone:342","type":"CtMethodImpl","sourcecode":"private boolean isPreviousChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (((java.lang.Character.toUpperCase(c)) != (java.lang.Character.toUpperCase(c))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n        {\n            boolean boolean = false;\n            if ((index > 0) && (index < (string.length()))) {\n                matches = (string.charAt((index - 1))) == c;\n            } \n            return matches;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c1":"c","c2":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[24],"tindex":"1204bd5b-3e68-11e6-9622-47a22dd676f0","method":{"position":"org.apache.commons.codec.language.Nysiis:210","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:392","type":"CtBinaryOperatorImpl","sourcecode":"(body.startsWith(\"|\")) || (body.endsWith(\"|\"))"},"failures":[],"tindex":"1204bd5c-3e68-11e6-9622-11707f22a82e","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:377","type":"CtMethodImpl","sourcecode":"private java.lang.String cleanup(final java.lang.String input) {\n    if ((input.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (char char : input.toCharArray()) {\n                if (java.lang.Character.isWhitespace(ch)) {\n                    continue;\n                } \n                ch = java.lang.Character.toLowerCase(ch);\n                if ((boolean) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.containsKey(ch))) {\n                    ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch);\n                } \n                sb.append(ch);\n            }\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"body":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:279","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[],"tindex":"1204bd5d-3e68-11e6-9622-87fe81295003","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:482","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final java.lang.String basen) {\n    if ((basen.length()) > (basen.length())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((basen.length()) == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return isInAlphabet(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(basen), true);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"basen"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:312","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.String"},"failures":[],"tindex":"1204e46e-3e68-11e6-9622-578d65f96e59","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:133","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n            } \n            return soundex(((java.lang.String)(obj)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[154,155],"tindex":"1204e46f-3e68-11e6-9622-45b8d14c8768","method":{"position":"org.apache.commons.codec.digest.DigestUtils:388","type":"CtMethodImpl","sourcecode":"public static byte[] sha1(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha1Digest(), data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:506","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.String"},"failures":[81],"tindex":"1204e470-3e68-11e6-9622-c14b5b9dd5a5","method":{"position":"org.apache.commons.codec.net.URLCodec:309","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof byte[]) {\n                return encode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[156],"tindex":"1204e471-3e68-11e6-9622-4da02369509a","method":{"position":"org.apache.commons.codec.digest.DigestUtils:248","type":"CtMethodImpl","sourcecode":"public static java.lang.String md2Hex(final java.lang.String data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:502","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[157],"tindex":"1204e472-3e68-11e6-9622-c117481de786","method":{"position":"org.apache.commons.codec.net.QCodec:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:385","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")"},"failures":[],"tindex":"12050b83-3e68-11e6-9622-ada8318c4392","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:827","type":"CtMethodImpl","sourcecode":"private boolean conditionL0(final java.lang.String value, final int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n                return true;\n            } else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[158,159,160,161,162,163,164,165,166,167,168,156,145,154,169,121,144,170,155,171,172,173,174,103,175,176,177,178,179,180],"tindex":"12050b84-3e68-11e6-9622-bf8835167d70","method":{"position":"org.apache.commons.codec.binary.Hex:124","type":"CtMethodImpl","sourcecode":"public static char[] encodeHex(final byte[] data, final boolean toLowerCase) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHex(data, (toLowerCase ? org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.char[] : org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.char[]));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:334","type":"CtInvocationImpl","sourcecode":"finalRules.isEmpty()"},"failures":[108],"tindex":"12050b85-3e68-11e6-9622-576a40e0a8f7","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:329","type":"CtMethodImpl","sourcecode":"private org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder applyFinalRules(final org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder phonemeBuilder, final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> finalRules) {\n    if (finalRules.isEmpty()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (finalRules == null) {\n                throw new java.lang.NullPointerException(\"finalRules can not be null\");\n            } \n            if (finalRules.isEmpty()) {\n                return phonemeBuilder;\n            } \n            final java.util.Map<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.Map<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.TreeMap<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme>(org.apache.commons.codec.language.bm.Rule.Phoneme.org.apache.commons.codec.language.bm.Rule.Phoneme.java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme>);\n            for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeBuilder.getPhonemes()) {\n                org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(phoneme.getLanguages());\n                final java.lang.String java.lang.String = phoneme.getPhonemeText().toString();\n                for (int int = 0 ; i < (phonemeText.length()) ; ) {\n                    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , int).invoke();\n                    final boolean boolean = rulesApplication.isFound();\n                    subBuilder = rulesApplication.getPhonemeBuilder();\n                    if (!found) {\n                        subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n                    } \n                    i = rulesApplication.getI();\n                }\n                for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n                    if (phonemes.containsKey(newPhoneme)) {\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n                        phonemes.put(mergedPhoneme, mergedPhoneme);\n                    } else {\n                        phonemes.put(newPhoneme, newPhoneme);\n                    }\n                }\n            }\n            return new org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder(phonemes.keySet());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"finalRules":"finalRules"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225],"tindex":"12053296-3e68-11e6-9622-21c5e63e74df","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:212","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEquals(java.lang.String name1, java.lang.String name2) {\n    if (name2.startsWith(name1)) {\n        {\n            if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n                return false;\n            } else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n                return false;\n            } else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n                return false;\n            } else if (name1.equalsIgnoreCase(name2)) {\n                return true;\n            } \n            name1 = cleanName(name1);\n            name2 = cleanName(name2);\n            name1 = removeVowels(name1);\n            name2 = removeVowels(name2);\n            name1 = removeDoubleConsonants(name1);\n            name2 = removeDoubleConsonants(name2);\n            name1 = getFirst3Last3(name1);\n            name2 = getFirst3Last3(name2);\n            if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                return false;\n            } \n            final int int = java.lang.Math.abs(((name1.length()) + (name2.length())));\n            int int = 0;\n            minRating = getMinRating(sumLength);\n            final int int = leftToRightThenRightToLeftProcessing(name1, name2);\n            return count >= minRating;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"name1","line":"name2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"12053297-3e68-11e6-9622-e9cdc30d8ed9","method":{"position":"org.apache.commons.codec.language.bm.Rule:353","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if ((lang == null) || (lang == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (lang == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.get(nameType).get(rt).get(lang);\n                    if (rules == null) {\n                        throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n                    } \n                    return rules;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"lang"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:394","type":"CtBinaryOperatorImpl","sourcecode":"(code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))"},"failures":[],"tindex":"12053298-3e68-11e6-9622-e5bfa211458e","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:194","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if ((ch != '-') && ((((ch != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n        {\n            return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u');\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"code":"ch","lastCode":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:192","type":"CtBinaryOperatorImpl","sourcecode":"((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)"},"failures":[],"tindex":"120559a9-3e68-11e6-9622-83a657f07a1b","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:161","type":"CtMethodImpl","sourcecode":"char getMappingCode(final char c) {\n    if (((c == c) || ('H' == c)) || ('W' == preHWChar)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(java.lang.Character.isLetter(c))) {\n                return 0;\n            } \n            return org.apache.commons.codec.language.RefinedSoundex.this.char[][((java.lang.Character.toUpperCase(c)) - 'A')];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mappedChar":"c","preHWChar":"c","firstCode":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"120559aa-3e68-11e6-9622-ad9a814a1387","method":{"position":"org.apache.commons.codec.binary.StringUtils:366","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16Le(final byte[] bytes) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(bytes)) {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[],"tindex":"120559ab-3e68-11e6-9622-677c43e2268f","method":{"position":"org.apache.commons.codec.digest.DigestUtils:349","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] sha(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[77,226,78,80,227,228,82],"tindex":"120559ac-3e68-11e6-9622-f1b5ca26456b","method":{"position":"org.apache.commons.codec.net.URLCodec:269","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if ((charset.length()) > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"charset"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[78,79,80,81,82],"tindex":"120559ad-3e68-11e6-9622-5160a6f91b52","method":{"position":"org.apache.commons.codec.net.URLCodec:243","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return encode(str, getDefaultCharset());\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[229,95],"tindex":"120559ae-3e68-11e6-9622-95751108c7df","method":{"position":"org.apache.commons.codec.binary.Base64:639","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe) {\n    if (binaryData == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, urlSafe, java.lang.Integer.java.lang.Integer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[77,226,78,79,80,81,82],"tindex":"120580bf-3e68-11e6-9622-01ae0f9bafa3","method":{"position":"org.apache.commons.codec.net.URLCodec:121","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeUrl(java.util.BitSet urlsafe, final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            if (urlsafe == null) {\n                urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (final byte byte : bytes) {\n                int int = c;\n                if (b < 0) {\n                    b = 256 + b;\n                } \n                if (urlsafe.get(b)) {\n                    if (b == ' ') {\n                        b = '+';\n                    } \n                    buffer.write(b);\n                } else {\n                    buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n                    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                    buffer.write(hex1);\n                    buffer.write(hex2);\n                }\n            }\n            return buffer.toByteArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"120580c0-3e68-11e6-9622-910a4c564a2f","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:550","type":"CtMethodImpl","sourcecode":"private int handleL(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'L') {\n                if (conditionL0(value, index)) {\n                    result.appendPrimary('L');\n                } else {\n                    result.append('L');\n                }\n                index += 2;\n            } else {\n                index++;\n                result.append('L');\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[230],"tindex":"120580c1-3e68-11e6-9622-f3d535b033ee","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:467","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[],"tindex":"120580c2-3e68-11e6-9622-634e46d53bd4","method":{"position":"org.apache.commons.codec.digest.DigestUtils:516","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[],"tindex":"1205a7d3-3e68-11e6-9622-d1c8542cdcee","method":{"position":"org.apache.commons.codec.binary.Base64:581","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64URLSafe(final byte[] binaryData) {\n    if (binaryData != null) {\n        {\n            if (binaryData == null) {\n                {\n                    return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"binaryData"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:193","type":"CtBinaryOperatorImpl","sourcecode":"sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)"},"failures":[],"tindex":"1205a7d4-3e68-11e6-9622-1be868260e14","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:800","type":"CtMethodImpl","sourcecode":"private boolean conditionCH0(final java.lang.String value, final int index) {\n    if (index == index) {\n        {\n            if (index != 0) {\n                return false;\n            } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n                return false;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sumLength":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:336","type":"CtBinaryOperatorImpl","sourcecode":"(strA.length()) > (strB.length())"},"failures":[],"tindex":"1205a7d5-3e68-11e6-9622-47e74b07156a","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:482","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final java.lang.String basen) {\n    if ((basen.length()) > (basen.length())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((basen.length()) == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return isInAlphabet(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(basen), true);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strA":"basen","strB":"basen"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"1205a7d6-3e68-11e6-9622-37f894a8c1b8","method":{"position":"org.apache.commons.codec.binary.StringUtils:256","type":"CtMethodImpl","sourcecode":"private static java.lang.String newString(final byte[] bytes, final java.nio.charset.Charset charset) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(bytes)) {\n        {\n            return bytes == null ? null : new java.lang.String(bytes , charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[70,71],"tindex":"1205a7d7-3e68-11e6-9622-0fa71e8e85f9","method":{"position":"org.apache.commons.codec.binary.StringUtils:70","type":"CtMethodImpl","sourcecode":"public static boolean equals(final java.lang.CharSequence cs1, final java.lang.CharSequence cs2) {\n    if (cs1 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cs1 == cs2) {\n                return true;\n            } \n            if ((cs1 == null) || (cs2 == null)) {\n                return false;\n            } \n            if ((cs1 instanceof java.lang.String) && (cs2 instanceof java.lang.String)) {\n                return cs1.equals(cs2);\n            } \n            return org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, java.lang.Math.max(cs1.length(), cs2.length()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"cs1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[231,176],"tindex":"1205a7d8-3e68-11e6-9622-0592a05c54d2","method":{"position":"org.apache.commons.codec.digest.HmacUtils:116","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha384(final byte[] key) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"1205cee9-3e68-11e6-9622-015df46b6477","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:179","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String prefix) {\n    if (keyBytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (salt == null) {\n                {\n                    final int int = keyBytes.int;\n                    java.lang.String java.lang.String;\n                    if (salt == null) {\n                        saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n                    } else {\n                        final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n                        final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n                        if ((m == null) || (!(m.find()))) {\n                            throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n                        } \n                        saltString = m.group(1);\n                    }\n                    final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                    final java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n                    ctx.update(keyBytes);\n                    ctx.update(prefix.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n                    ctx.update(saltBytes);\n                    java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n                    ctx1.update(keyBytes);\n                    ctx1.update(saltBytes);\n                    ctx1.update(keyBytes);\n                    byte[] byte[] = ctx1.digest();\n                    int int = keyLen;\n                    while (ii > 0) {\n                        ctx.update(finalb, 0, (ii > 16 ? 16 : ii));\n                        ii -= 16;\n                    }\n                    java.util.Arrays.fill(finalb, ((byte)(0)));\n                    ii = keyLen;\n                    final int int = 0;\n                    while (ii > 0) {\n                        if ((ii & 1) == 1) {\n                            ctx.update(finalb[j]);\n                        } else {\n                            ctx.update(keyBytes[j]);\n                        }\n                        ii >>= 1;\n                    }\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((prefix + saltString) + \"$\"));\n                    finalb = ctx.digest();\n                    for (int int = 0 ; i < (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int) ; i++) {\n                        ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n                        if ((i & 1) != 0) {\n                            ctx1.update(keyBytes);\n                        } else {\n                            ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n                        }\n                        if ((i % 3) != 0) {\n                            ctx1.update(saltBytes);\n                        } \n                        if ((i % 7) != 0) {\n                            ctx1.update(keyBytes);\n                        } \n                        if ((i & 1) != 0) {\n                            ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n                        } else {\n                            ctx1.update(keyBytes);\n                        }\n                        finalb = ctx1.digest();\n                    }\n                    org.apache.commons.codec.digest.B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd);\n                    org.apache.commons.codec.digest.B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd);\n                    org.apache.commons.codec.digest.B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd);\n                    org.apache.commons.codec.digest.B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd);\n                    org.apache.commons.codec.digest.B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd);\n                    org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd);\n                    ctx.reset();\n                    ctx1.reset();\n                    java.util.Arrays.fill(keyBytes, ((byte)(0)));\n                    java.util.Arrays.fill(saltBytes, ((byte)(0)));\n                    java.util.Arrays.fill(finalb, ((byte)(0)));\n                    return passwd.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"keyBytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.Utils:44","type":"CtBinaryOperatorImpl","sourcecode":"i == (-1)"},"failures":[0,1,2,3],"tindex":"1205ceea-3e68-11e6-9622-95e883743f1d","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:398","type":"CtMethodImpl","sourcecode":"private static void intToFourBytes(final int iValue, final byte[] b, int offset) {\n    if (iValue == (-1)) {\n        {\n            b[(offset++)] = ((byte)(iValue & 255));\n            b[(offset++)] = ((byte)((iValue >>> 8) & 255));\n            b[(offset++)] = ((byte)((iValue >>> 16) & 255));\n            b[(offset++)] = ((byte)((iValue >>> 24) & 255));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"iValue"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"1205f5fb-3e68-11e6-9622-f5a1c99c01f7","method":{"position":"org.apache.commons.codec.binary.Base64:620","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(binaryData)) {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"binaryData"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[156,169],"tindex":"1205f5fc-3e68-11e6-9622-6b96e46b3462","method":{"position":"org.apache.commons.codec.digest.DigestUtils:222","type":"CtMethodImpl","sourcecode":"public static java.lang.String md2Hex(final byte[] data) {\n    if (data != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[103],"tindex":"1205f5fd-3e68-11e6-9622-bb9e421ed104","method":{"position":"org.apache.commons.codec.digest.HmacUtils:419","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[232],"tindex":"1205f5fe-3e68-11e6-9622-6f7ca0dd2a74","method":{"position":"org.apache.commons.codec.binary.Base64:537","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final byte[] arrayOctet) {\n    if (arrayOctet == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                if ((!(org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i]))) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"arrayOctet"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:188","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[233],"tindex":"1205f5ff-3e68-11e6-9622-71c9daa50a9b","method":{"position":"org.apache.commons.codec.Charsets:86","type":"CtMethodImpl","sourcecode":"public static java.nio.charset.Charset toCharset(final java.lang.String charset) {\n    if (charset.startsWith(charset)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return charset == null ? java.nio.charset.Charset.defaultCharset() : java.nio.charset.Charset.forName(charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"charset","line":"charset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Nysiis:211","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[],"tindex":"1205f600-3e68-11e6-9622-9f2f5936b365","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:109","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final java.lang.Object encode(final java.lang.Object pObject) throws org.apache.commons.codec.EncoderException {\n    if (!(pObject instanceof java.lang.String)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(pObject instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\");\n            } \n            return encode(((java.lang.String)(pObject)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"pObject"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:429","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[145],"tindex":"12061c11-3e68-11e6-9622-0164416b6cd9","method":{"position":"org.apache.commons.codec.digest.DigestUtils:320","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Hex(final java.lang.String data) {\n    if ((data.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || ((str.length()) == 0)"},"failures":[],"tindex":"12061c12-3e68-11e6-9622-01b19404b247","method":{"position":"org.apache.commons.codec.language.bm.Lang:91","type":"CtMethodImpl","sourcecode":"public boolean matches(final java.lang.String txt) {\n    if ((txt == null) || ((str.length()) == 0)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Lang.LangRule.this.java.util.regex.Pattern.matcher(txt).find();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"txt"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:132","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[26,27,28,29,30],"tindex":"12061c13-3e68-11e6-9622-e7ec9ff8b6dc","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:498","type":"CtMethodImpl","sourcecode":"private int handleH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index < 0) {\n        {\n            if (((index == 0) || (isVowel(charAt(value, (index - 1))))) && (isVowel(charAt(value, (index + 1))))) {\n                result.append('H');\n                index += 2;\n            } else {\n                index++;\n            }\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtInvocationImpl","sourcecode":"value.startsWith(element)"},"failures":[],"tindex":"12061c14-3e68-11e6-9622-8330c2406a94","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:250","type":"CtMethodImpl","sourcecode":"private static void parseRules(final java.util.Scanner scanner, final java.lang.String location, final java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>> ruleMapping, final java.util.Map<java.lang.Character, java.lang.Character> asciiFoldings) {\n    if (location.startsWith(location)) {\n        {\n            int int = 0;\n            boolean boolean = false;\n            while (scanner.hasNextLine()) {\n                currentLine++;\n                final java.lang.String java.lang.String = scanner.nextLine();\n                java.lang.String java.lang.String = rawLine;\n                if (inMultilineComment) {\n                    if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                        inMultilineComment = false;\n                    } \n                    continue;\n                } \n                if (line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                    inMultilineComment = true;\n                } else {\n                    final int int = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String);\n                    if (cmtI >= 0) {\n                        line = line.substring(0, cmtI);\n                    } \n                    line = line.trim();\n                    if ((line.length()) == 0) {\n                        continue;\n                    } \n                    if (line.contains(\"=\")) {\n                        final java.lang.String[] java.lang.String[] = line.split(\"=\");\n                        if ((parts.int) != 2) {\n                            throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                        } else {\n                            final java.lang.String java.lang.String = parts[0];\n                            final java.lang.String java.lang.String = parts[1];\n                            if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n                                throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n                            } \n                            asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n                        }\n                    } else {\n                        final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                        if ((parts.int) != 4) {\n                            throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                        } else {\n                            try {\n                                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n                                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n                                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n                                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n                                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n                                final char char = r.java.lang.String.charAt(0);\n                                java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n                                if (rules == null) {\n                                    rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                                    ruleMapping.put(patternKey, rules);\n                                } \n                                rules.add(r);\n                            } catch (final java.lang.IllegalArgumentException e) {\n                                throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"location","element":"location"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:335","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[],"tindex":"12064325-3e68-11e6-9622-230d9c96e0e8","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:202","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\");\n                    } \n                    return doubleMetaphone(((java.lang.String)(obj)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:519","type":"CtBinaryOperatorImpl","sourcecode":"(lineLength) > 0"},"failures":[],"tindex":"12064326-3e68-11e6-9622-c32149a3ac81","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:281","type":"CtMethodImpl","sourcecode":"private static int[] body(final int[] schedule, final int eSwap0, final int eSwap1) {\n    if (eSwap0 > 0) {\n        {\n            if (eSwap0 < 0) {\n                {\n                    int int = 0;\n                    int int = 0;\n                    int int = 0;\n                    for (int int = 0 ; j < 25 ; j++) {\n                        for (int int = 0 ; i < 32 ; i += 4) {\n                            left = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(left, right, i, eSwap0, eSwap1, schedule);\n                            right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule);\n                        }\n                        t = left;\n                        left = right;\n                        right = t;\n                    }\n                    t = right;\n                    right = (left >>> 1) | (left << 31);\n                    left = (t >>> 1) | (t << 31);\n                    final int[] int[] = new int[2];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 1, 1431655765, results);\n                    right = results[0];\n                    left = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 8, 16711935, results);\n                    left = results[0];\n                    right = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 2, 858993459, results);\n                    right = results[0];\n                    left = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 16, 65535, results);\n                    left = results[0];\n                    right = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 4, 252645135, results);\n                    right = results[0];\n                    left = results[1];\n                    final int[] int[] = new int[2];\n                    out[0] = left;\n                    out[1] = right;\n                    return out;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineLength":"eSwap0"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtBinaryOperatorImpl","sourcecode":"(((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)"},"failures":[],"tindex":"12064327-3e68-11e6-9622-492ec1288f3b","method":{"position":"org.apache.commons.codec.language.Metaphone:414","type":"CtMethodImpl","sourcecode":"public boolean isMetaphoneEqual(final java.lang.String str1, final java.lang.String str2) {\n    if ((((str2 == null) || (str1.equalsIgnoreCase(name))) || (str1.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return metaphone(str1).equals(metaphone(str2));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"str2","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"str1","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str1"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[45,46,47,48,104,105,108,49,50,51,52,53,54,55,117,118],"tindex":"12066a38-3e68-11e6-9622-df30af82452b","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:383","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String input) {\n    if (input == null) {\n        {\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.Lang.guessLanguages(input);\n            return encode(input, languageSet);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.Base32:347","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[],"tindex":"12066a39-3e68-11e6-9622-ed889c7f2def","method":{"position":"org.apache.commons.codec.net.Utils:42","type":"CtMethodImpl","sourcecode":"static int digit16(final byte b) throws org.apache.commons.codec.DecoderException {\n    if (b == b) {\n        {\n            final int int = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int);\n            if (i == (-1)) {\n                throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n            } \n            return i;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","pad":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:111","type":"CtBinaryOperatorImpl","sourcecode":"(es1 == null) || (es2 == null)"},"failures":[],"tindex":"12066a3a-3e68-11e6-9622-2739ae66ccb8","method":{"position":"org.apache.commons.codec.language.bm.Rule:353","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if ((lang == null) || (lang == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (lang == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.get(nameType).get(rt).get(lang);\n                    if (rules == null) {\n                        throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n                    } \n                    return rules;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"es1":"lang","es2":"lang"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[],"tindex":"12066a3b-3e68-11e6-9622-a5c33c922f93","method":{"position":"org.apache.commons.codec.language.bm.Rule:499","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.RPattern pattern(final java.lang.String regex) {\n    if (regex == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = regex.startsWith(\"^\");\n            final boolean boolean = regex.endsWith(\"$\");\n            final java.lang.String java.lang.String = regex.substring((startsWith ? 1 : 0), (endsWith ? (regex.length()) - 1 : regex.length()));\n            final boolean boolean = content.contains(\"[\");\n            if (!boxes) {\n                if (startsWith && endsWith) {\n                    if ((content.length()) == 0) {\n                        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                            @java.lang.Override\n                            public boolean isMatch(final java.lang.CharSequence input) {\n                                return (input.length()) == 0;\n                            }\n                        };\n                    } else {\n                        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                            @java.lang.Override\n                            public boolean isMatch(final java.lang.CharSequence input) {\n                                return input.equals(content);\n                            }\n                        };\n                    }\n                } else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n                    return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern;\n                } else if (startsWith) {\n                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                        @java.lang.Override\n                        public boolean isMatch(final java.lang.CharSequence input) {\n                            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n                        }\n                    };\n                } else if (endsWith) {\n                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                        @java.lang.Override\n                        public boolean isMatch(final java.lang.CharSequence input) {\n                            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n                        }\n                    };\n                } \n            } else {\n                final boolean boolean = content.startsWith(\"[\");\n                final boolean boolean = content.endsWith(\"]\");\n                if (startsWithBox && endsWithBox) {\n                    java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1));\n                    if (!(boxContent.contains(\"[\"))) {\n                        final boolean boolean = boxContent.startsWith(\"^\");\n                        if (negate) {\n                            boxContent = boxContent.substring(1);\n                        } \n                        final java.lang.String java.lang.String = boxContent;\n                        final boolean boolean = !negate;\n                        if (startsWith && endsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                                }\n                            };\n                        } else if (startsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                                }\n                            };\n                        } else if (endsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                                }\n                            };\n                        } \n                    } \n                } \n            }\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(regex);\n\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(input);\n                    return matcher.find();\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"regex"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[31,32,33,34,35,36,37,38,39,41],"tindex":"1206914c-3e68-11e6-9622-b1a2935e1822","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:180","type":"CtMethodImpl","sourcecode":"public java.lang.String[] getReplacements(final java.lang.String context, final boolean atStart) {\n    if (context == null) {\n        {\n            if (atStart) {\n                return java.lang.String[];\n            } \n            final int int = getPatternLength();\n            final boolean boolean = nextIndex < (context.length()) ? isVowel(context.charAt(nextIndex)) : false;\n            if (nextCharIsVowel) {\n                return java.lang.String[];\n            } \n            return java.lang.String[];\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"context"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[64],"tindex":"1206b85d-3e68-11e6-9622-35b7920dd43e","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:71","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final byte[] keyBytes) {\n    if (keyBytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"keyBytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"1206b85e-3e68-11e6-9622-41735f8c0a88","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:298","type":"CtMethodImpl","sourcecode":"public static java.lang.String toAsciiString(final byte[] raw) {\n    if (raw == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[],"tindex":"1206b85f-3e68-11e6-9622-a7fa5fadb136","method":{"position":"org.apache.commons.codec.digest.Crypt:65","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] keyBytes, final java.lang.String salt) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(salt, 0, 2, \"MC\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (salt == null) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes, salt);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(keyBytes, salt);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt);\n            } else {\n                return org.apache.commons.codec.digest.UnixCrypt.crypt(keyBytes, salt);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"salt"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"1206b860-3e68-11e6-9622-ab482ad6b223","method":{"position":"org.apache.commons.codec.binary.Base64:553","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(binaryData)) {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250945773/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"binaryData"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
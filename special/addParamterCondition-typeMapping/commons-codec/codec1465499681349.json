{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":6,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":148,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":189,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":195,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":228,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":226,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":227,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":229,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":184,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":20,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":36,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":175,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":178,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":46,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":140,"org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull":239,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully":33,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":90,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":149,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":83,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":89,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":201,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":236,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":238,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":169,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":237,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":168,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":69,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":70,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":188,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":204,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":74,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":167,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":202,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData":9,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":71,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":72,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":139,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":60,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":171,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":156,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":79,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":107,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":155,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":174,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":65,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":142,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":125,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":210,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":35,"org.apache.commons.codec.language.SoundexTest.testB650":225,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":192,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":64,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":117,"org.apache.commons.codec.language.SoundexTest.testNewInstance":232,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":186,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":205,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":3,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":4,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":198,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":145,"org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull":0,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":212,"org.apache.commons.codec.net.RFC1522CodecTest.testNullInput":40,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":101,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":55,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":45,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":85,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":59,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":76,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":183,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":207,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":160,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":172,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":115,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":57,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":191,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":11,"org.apache.commons.codec.binary.Base64Test.testUUID":67,"org.apache.commons.codec.binary.Base64Test.testSingletons":78,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":113,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":118,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":34,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":81,"org.apache.commons.codec.binary.Base64Test.testPairs":66,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":114,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":180,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":146,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":233,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":163,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt":12,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":217,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":185,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":26,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":97,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":170,"org.apache.commons.codec.language.SoundexTest.testEncodeNull":48,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":106,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":181,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":123,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":104,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":124,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":144,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":136,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":92,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":137,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":221,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":43,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":21,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":68,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":214,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":134,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":196,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":197,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":203,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":154,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":193,"org.apache.commons.codec.binary.HexTest.testCustomCharset":216,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":209,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":91,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeNull":110,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":213,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":24,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":23,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":93,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":165,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":96,"org.apache.commons.codec.binary.Base64Test.testTriplets":63,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":58,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptNullData":56,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":158,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":159,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":27,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":30,"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence":111,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":116,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":52,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":51,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":86,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":164,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":219,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":25,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":120,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":16,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":234,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":147,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":235,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":31,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":240,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":10,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":39,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":41,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":53,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":173,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":122,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":218,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":194,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":54,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":28,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":230,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":42,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":208,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":98,"org.apache.commons.codec.CharsetsTest.testToCharset":15,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":13,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":220,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":161,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":162,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":1,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":87,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":151,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":182,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":152,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":177,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":108,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":199,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":100,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":62,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":200,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":179,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":14,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":176,"org.apache.commons.codec.language.MetaphoneTest.testTCH":135,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt":157,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":127,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":138,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":222,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":223,"org.apache.commons.codec.binary.HexTest.testDencodeEmpty":215,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":224,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":19,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":84,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":141,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":73,"org.apache.commons.codec.binary.Base64Test.testBase64":82,"org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt":153,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":22,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":8,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":75,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":99,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":95,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":130,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":37,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":129,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":166,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":94,"org.apache.commons.codec.binary.Base64Test.testCodec112":77,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":211,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":128,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":143,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":105,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":61,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":206,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":150,"org.apache.commons.codec.binary.Base64Test.testCodec68":126,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":109,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":231,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":133,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":49,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":112,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":102,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":187,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":88,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":38,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":119,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":80,"org.apache.commons.codec.language.SoundexTest.testDifference":47,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1":132,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":131,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":103,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":18,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":7,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":190,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":121,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":50},"transformations":[{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START)"},"failures":[0],"tindex":"6ac73ece-2e76-11e6-be41-35571af01810","method":{"position":"org.apache.commons.codec.net.BCodec:137","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if (charset.startsWith(charset)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } \n            try {\n                return org.apache.commons.codec.net.BCodec.this.encodeText(value, charset);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"charset","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START":"charset"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"6ac7db0f-2e76-11e6-be41-dd566d16d0cc","method":{"position":"org.apache.commons.codec.digest.HmacUtils:459","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (valueToDigest == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:304","type":"CtBinaryOperatorImpl","sourcecode":"(last2Char == 'A') && (lastChar == 'Y')"},"failures":[1,2,3,4,5,6,7,8],"tindex":"6ac7db10-2e76-11e6-be41-47bc36fa92c4","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:951","type":"CtMethodImpl","sourcecode":"public void append(final char primary, final char alternate) {\n    if ((primary == 'A') && (alternate == 'Y')) {\n        {\n            appendPrimary(primary);\n            appendAlternate(alternate);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last2Char":"primary","lastChar":"alternate"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"6ac80221-2e76-11e6-be41-3b055207f5f8","method":{"position":"org.apache.commons.codec.language.bm.Rule:600","type":"CtMethodImpl","sourcecode":"private static boolean startsWith(final java.lang.CharSequence input, final java.lang.CharSequence prefix) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((prefix.length()) > (input.length())) {\n                return false;\n            } \n            for (int int = 0 ; i < (prefix.length()) ; i++) {\n                if ((input.charAt(i)) != (prefix.charAt(i))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:470","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[],"tindex":"6ac80222-2e76-11e6-be41-b92f0ffba56e","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:268","type":"CtMethodImpl","sourcecode":"protected byte[] ensureBufferSize(final int size, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (size == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((context.byte[]) == null) || ((context.byte[].int) < ((context.int) + size))) {\n                return resizeBuffer(context);\n            } \n            return context.byte[];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"size"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[9,10,11,12,13,14],"tindex":"6ac82933-2e76-11e6-be41-1b6f98ce3f8d","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:160","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes, final java.lang.String salt) {\n    if (salt == null) {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"salt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[15],"tindex":"6ac85044-2e76-11e6-be41-6bf13cf58f50","method":{"position":"org.apache.commons.codec.Charsets:86","type":"CtMethodImpl","sourcecode":"public static java.nio.charset.Charset toCharset(final java.lang.String charset) {\n    if (charset.startsWith(charset)) {\n        {\n            if (charset == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return charset == null ? java.nio.charset.Charset.defaultCharset() : java.nio.charset.Charset.forName(charset);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"charset"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],"tindex":"6ac85045-2e76-11e6-be41-919e1d0ee2e7","method":{"position":"org.apache.commons.codec.language.bm.Rule:198","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtInvocationImpl","sourcecode":"incl.contains(\" \")"},"failures":[31,32],"tindex":"6ac85046-2e76-11e6-be41-f718c56a286e","method":{"position":"org.apache.commons.codec.digest.HmacUtils:352","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (valueToDigest.contains(\" \")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"incl":"valueToDigest"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:413","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[33],"tindex":"6ac87757-2e76-11e6-be41-c30558c1cd70","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:351","type":"CtMethodImpl","sourcecode":"java.lang.String removeAccents(final java.lang.String accentedWord) {\n    if (accentedWord.endsWith(accentedWord)) {\n        {\n            if (accentedWord == null) {\n                return null;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            final int int = accentedWord.length();\n            for (int int = 0 ; i < n ; i++) {\n                final char char = accentedWord.charAt(i);\n                final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(c);\n                if (pos > (-1)) {\n                    sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n                } else {\n                    sb.append(c);\n                }\n            }\n            return sb.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"accentedWord","line":"accentedWord"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[34,35,36],"tindex":"6ac89e68-2e76-11e6-be41-53f4cec8c4ae","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:86","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(java.lang.String value, final boolean alternate) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            value = cleanInput(value);\n            if (value == null) {\n                return null;\n            } \n            final boolean boolean = isSlavoGermanic(value);\n            int int = isSilentStart(value) ? 1 : 0;\n            final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult = new org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult(org.apache.commons.codec.language.DoubleMetaphone.this.getMaxCodeLen());\n            while ((!(result.isComplete())) && (index <= ((value.length()) - 1))) {\n                switch (value.charAt(index)) {\n                    case 'A' :\n                    case 'E' :\n                    case 'I' :\n                    case 'O' :\n                    case 'U' :\n                    case 'Y' :\n                        index = handleAEIOUY(result, index);\n                        break;\n                    case 'B' :\n                        result.append('P');\n                        index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n                        break;\n                    case '\\u00c7' :\n                        result.append('S');\n                        index++;\n                        break;\n                    case 'C' :\n                        index = handleC(value, result, index);\n                        break;\n                    case 'D' :\n                        index = handleD(value, result, index);\n                        break;\n                    case 'F' :\n                        result.append('F');\n                        index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n                        break;\n                    case 'G' :\n                        index = handleG(value, result, index, slavoGermanic);\n                        break;\n                    case 'H' :\n                        index = handleH(value, result, index);\n                        break;\n                    case 'J' :\n                        index = handleJ(value, result, index, slavoGermanic);\n                        break;\n                    case 'K' :\n                        result.append('K');\n                        index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n                        break;\n                    case 'L' :\n                        index = handleL(value, result, index);\n                        break;\n                    case 'M' :\n                        result.append('M');\n                        index = conditionM0(value, index) ? index + 2 : index + 1;\n                        break;\n                    case 'N' :\n                        result.append('N');\n                        index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n                        break;\n                    case '\\u00d1' :\n                        result.append('N');\n                        index++;\n                        break;\n                    case 'P' :\n                        index = handleP(value, result, index);\n                        break;\n                    case 'Q' :\n                        result.append('K');\n                        index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n                        break;\n                    case 'R' :\n                        index = handleR(value, result, index, slavoGermanic);\n                        break;\n                    case 'S' :\n                        index = handleS(value, result, index, slavoGermanic);\n                        break;\n                    case 'T' :\n                        index = handleT(value, result, index);\n                        break;\n                    case 'V' :\n                        result.append('F');\n                        index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n                        break;\n                    case 'W' :\n                        index = handleW(value, result, index);\n                        break;\n                    case 'X' :\n                        index = handleX(value, result, index);\n                        break;\n                    case 'Z' :\n                        index = handleZ(value, result, index, slavoGermanic);\n                        break;\n                    default :\n                        index++;\n                        break;\n                }\n            }\n            return alternate ? result.getAlternate() : result.getPrimary();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[37],"tindex":"6ac8ec89-2e76-11e6-be41-a371c12d72bb","method":{"position":"org.apache.commons.codec.digest.DigestUtils:273","type":"CtMethodImpl","sourcecode":"public static byte[] md5(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd5Digest(), data);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[23,24,38],"tindex":"6ac9139a-2e76-11e6-be41-89bd0d6e078e","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if (source == null) {\n        {\n            if (!(source instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\");\n            } \n            return encode(((java.lang.String)(source)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:222","type":"CtVariableReadImpl","sourcecode":"encode"},"failures":[],"tindex":"6ac9139b-2e76-11e6-be41-4d5a8a456717","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encode":"concat"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[39],"tindex":"6ac93aac-2e76-11e6-be41-35129ea7b2f4","method":{"position":"org.apache.commons.codec.digest.DigestUtils:469","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha256Digest(), data);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"6ac93aad-2e76-11e6-be41-276c53a9173f","method":{"position":"org.apache.commons.codec.digest.DigestUtils:672","type":"CtMethodImpl","sourcecode":"public static byte[] sha512(final java.lang.String data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[40],"tindex":"6ac961be-2e76-11e6-be41-4b7c6f5a62c5","method":{"position":"org.apache.commons.codec.net.RFC1522Codec:124","type":"CtMethodImpl","sourcecode":"protected java.lang.String decodeText(final java.lang.String text) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if ((text.length()) > 0) {\n        {\n            if (text == null) {\n                return null;\n            } \n            if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n            } \n            final int int = (text.length()) - 2;\n            int int = 2;\n            int int = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n            if (to == terminator) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n            } \n            final java.lang.String java.lang.String = text.substring(from, to);\n            if (charset.equals(\"\")) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n            } \n            from = to + 1;\n            to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n            if (to == terminator) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n            } \n            final java.lang.String java.lang.String = text.substring(from, to);\n            if (!(getEncoding().equalsIgnoreCase(encoding))) {\n                throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n            } \n            from = to + 1;\n            to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n            byte[] byte[] = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(text.substring(from, to));\n            data = doDecoding(data);\n            return new java.lang.String(data , charset);\n        }\n    } else {\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"text"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtBinaryOperatorImpl","sourcecode":"((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)"},"failures":[],"tindex":"6ac988cf-2e76-11e6-be41-cd97af953b41","method":{"position":"org.apache.commons.codec.net.URLCodec:334","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (((obj.length()) != 1) || ((obj.length()) != 1)) {\n                {\n                    if (obj == null) {\n                        return null;\n                    } else if (obj instanceof byte[]) {\n                        return decode(((byte[])(obj)));\n                    } else if (obj instanceof java.lang.String) {\n                        return decode(((java.lang.String)(obj)));\n                    } else {\n                        throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"));\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"leftCharacter":"obj","rightCharacter":"obj"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:70","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX)"},"failures":[],"tindex":"6ac9afe0-2e76-11e6-be41-c3bbf35a7386","method":{"position":"org.apache.commons.codec.binary.StringUtils:216","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Le(final java.lang.String string) {\n    if (string.startsWith(string)) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"string","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"string"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"6ac9d6f1-2e76-11e6-be41-ff888c875a6f","method":{"position":"org.apache.commons.codec.digest.DigestUtils:362","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] sha(final java.lang.String data) {\n    if (((data.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"data"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:319","type":"CtInvocationImpl","sourcecode":"name1LtRStart.equals(name2RtLStart)"},"failures":[41],"tindex":"6ac9d6f2-2e76-11e6-be41-bf33c215cc65","method":{"position":"org.apache.commons.codec.digest.DigestUtils:210","type":"CtMethodImpl","sourcecode":"public static byte[] md2(final java.lang.String data) {\n    if (data.equals(data)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.md2(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2RtLStart":"data","name1LtRStart":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:486","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[42,13],"tindex":"6ac9fe03-2e76-11e6-be41-71346749034f","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:179","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String prefix) {\n    if (salt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = keyBytes.int;\n            java.lang.String java.lang.String;\n            if (salt == null) {\n                saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n            } else {\n                final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n                final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n                if ((m == null) || (!(m.find()))) {\n                    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n                } \n                saltString = m.group(1);\n            }\n            final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n            final java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n            ctx.update(keyBytes);\n            ctx.update(prefix.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n            ctx.update(saltBytes);\n            java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n            ctx1.update(keyBytes);\n            ctx1.update(saltBytes);\n            ctx1.update(keyBytes);\n            byte[] byte[] = ctx1.digest();\n            int int = keyLen;\n            while (ii > 0) {\n                ctx.update(finalb, 0, (ii > 16 ? 16 : ii));\n                ii -= 16;\n            }\n            java.util.Arrays.fill(finalb, ((byte)(0)));\n            ii = keyLen;\n            final int int = 0;\n            while (ii > 0) {\n                if ((ii & 1) == 1) {\n                    ctx.update(finalb[j]);\n                } else {\n                    ctx.update(keyBytes[j]);\n                }\n                ii >>= 1;\n            }\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((prefix + saltString) + \"$\"));\n            finalb = ctx.digest();\n            for (int int = 0 ; i < (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int) ; i++) {\n                ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n                if ((i & 1) != 0) {\n                    ctx1.update(keyBytes);\n                } else {\n                    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n                }\n                if ((i % 3) != 0) {\n                    ctx1.update(saltBytes);\n                } \n                if ((i % 7) != 0) {\n                    ctx1.update(keyBytes);\n                } \n                if ((i & 1) != 0) {\n                    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n                } else {\n                    ctx1.update(keyBytes);\n                }\n                finalb = ctx1.digest();\n            }\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd);\n            ctx.reset();\n            ctx1.reset();\n            java.util.Arrays.fill(keyBytes, ((byte)(0)));\n            java.util.Arrays.fill(saltBytes, ((byte)(0)));\n            java.util.Arrays.fill(finalb, ((byte)(0)));\n            return passwd.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"salt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[41,37,43,39,44,45,46],"tindex":"6aca7334-2e76-11e6-be41-5f312593c222","method":{"position":"org.apache.commons.codec.digest.DigestUtils:49","type":"CtMethodImpl","sourcecode":"private static byte[] digest(final java.security.MessageDigest digest, final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            if (data == null) {\n                {\n                    return org.apache.commons.codec.digest.DigestUtils.updateDigest(digest, data).digest();\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\"]\"))"},"failures":[44],"tindex":"6aca9a45-2e76-11e6-be41-6fe06de5e0c0","method":{"position":"org.apache.commons.codec.digest.DigestUtils:578","type":"CtMethodImpl","sourcecode":"public static byte[] sha384(final java.lang.String data) {\n    if (!(data.endsWith(\"]\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:263","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[47,48,49],"tindex":"6aca9a46-2e76-11e6-be41-6d32cfc8b961","method":{"position":"org.apache.commons.codec.language.Soundex:258","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if ((str.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            final char[] char[] = new char[]{ '0' , '0' , '0' , '0' };\n            char char;\n            char char;\n            int int = 1;\n            int int = 1;\n            out[0] = str.charAt(0);\n            last = getMappingCode(str, 0);\n            while ((incount < (str.length())) && (count < (out.int))) {\n                mapped = getMappingCode(str, (incount++));\n                if (mapped != 0) {\n                    if ((mapped != '0') && (mapped != last)) {\n                        out[(count++)] = mapped;\n                    } \n                    last = mapped;\n                } \n            }\n            return new java.lang.String(out);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[],"tindex":"6acac157-2e76-11e6-be41-b9ac6b3daa6b","method":{"position":"org.apache.commons.codec.net.URLCodec:334","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (((obj.length()) != 1) || ((obj.length()) != 1)) {\n                {\n                    if (obj == null) {\n                        return null;\n                    } else if (obj instanceof byte[]) {\n                        return decode(((byte[])(obj)));\n                    } else if (obj instanceof java.lang.String) {\n                        return decode(((java.lang.String)(obj)));\n                    } else {\n                        throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"));\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"6acac158-2e76-11e6-be41-93cca24d1caa","method":{"position":"org.apache.commons.codec.digest.HmacUtils:116","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha384(final byte[] key) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(key)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"key"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || ((str.length()) == 0)"},"failures":[],"tindex":"6acac159-2e76-11e6-be41-ff03341e5f58","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:279","type":"CtMethodImpl","sourcecode":"private int handleC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((value == null) || ((index = txt.length()) == 0)) {\n        {\n            if ((value == null) || ((str.length()) == 0)) {\n                {\n                    if (conditionC0(value, index)) {\n                        result.append('K');\n                        index += 2;\n                    } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))) {\n                        result.append('S');\n                        index += 2;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")) {\n                        index = handleCH(value, result, index);\n                    } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CZ\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 4, \"WICZ\")))) {\n                        result.append('S', 'X');\n                        index += 2;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"CIA\")) {\n                        result.append('X');\n                        index += 3;\n                    } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CC\")) && (!((index == 1) && ((charAt(value, 0)) == 'M')))) {\n                        return handleCC(value, result, index);\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n                        result.append('K');\n                        index += 2;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n                        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n                            result.append('S', 'X');\n                        } else {\n                            result.append('S');\n                        }\n                        index += 2;\n                    } else {\n                        result.append('K');\n                        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n                            index += 3;\n                        } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n                            index += 2;\n                        } else {\n                            index++;\n                        }\n                    }\n                    return index;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6acae86a-2e76-11e6-be41-9b93099b0db2","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:904","type":"CtMethodImpl","sourcecode":"protected char charAt(final java.lang.String value, final int index) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index < 0) || (index >= (value.length()))) {\n                return java.lang.Character.java.lang.Character.char;\n            } \n            return value.charAt(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[50,51,52,53,54,55],"tindex":"6acb0f7b-2e76-11e6-be41-eb45394a5b55","method":{"position":"org.apache.commons.codec.binary.Base64:537","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final byte[] arrayOctet) {\n    if (arrayOctet == null) {\n        {\n            for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                if ((!(org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i]))) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"arrayOctet"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"6acb0f7c-2e76-11e6-be41-077de8e955f3","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:485","type":"CtMethodImpl","sourcecode":"private java.lang.String[] soundex(final java.lang.String source, final boolean branching) {\n    if (source == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return null;\n            } \n            final java.lang.String java.lang.String = cleanup(source);\n            final java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = new java.util.LinkedHashSet<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>();\n            currentBranches.add(new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch());\n            char char = '\u0000';\n            for (int int = 0 ; index < (input.length()) ; index++) {\n                final char char = input.charAt(index);\n                if (java.lang.Character.isWhitespace(ch)) {\n                    continue;\n                } \n                final java.lang.String java.lang.String = input.substring(index);\n                final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(ch);\n                if (rules == null) {\n                    continue;\n                } \n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.Collections.java.util.List;\n                for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n                    if (rule.matches(inputContext)) {\n                        if (branching) {\n                            nextBranches.clear();\n                        } \n                        final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n                        final boolean boolean = ((replacements.int) > 1) && branching;\n                        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                            for (final java.lang.String java.lang.String : replacements) {\n                                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                                final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                                nextBranch.processNextReplacement(nextReplacement, force);\n                                if (branching) {\n                                    nextBranches.add(nextBranch);\n                                } else {\n                                    break;\n                                }\n                            }\n                        }\n                        if (branching) {\n                            currentBranches.clear();\n                            currentBranches.addAll(nextBranches);\n                        } \n                        index += (rule.getPatternLength()) - 1;\n                        break;\n                    } \n                }\n                lastChar = ch;\n            }\n            final java.lang.String[] java.lang.String[] = new java.lang.String[currentBranches.size()];\n            int int = 0;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                branch.finish();\n                result[(index++)] = branch.toString();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[56],"tindex":"6acb5d9d-2e76-11e6-be41-ffe049dac22a","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:181","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] original) {\n    if (original == null) {\n        {\n            if (original == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.UnixCrypt.crypt(original, null);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"original"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.Utils:44","type":"CtBinaryOperatorImpl","sourcecode":"i == (-1)"},"failures":[],"tindex":"6acb5d9e-2e76-11e6-be41-61518af41e02","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:647","type":"CtMethodImpl","sourcecode":"private int handleSC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (index == (-1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 2))) == 'H') {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n                        result.append(\"X\", \"SK\");\n                    } else {\n                        result.append(\"SK\");\n                    }\n                } else {\n                    if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n                        result.append('X', 'S');\n                    } else {\n                        result.append('X');\n                    }\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                result.append('S');\n            } else {\n                result.append(\"SK\");\n            }\n            return index + 3;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[57,58,59,60,61,62,63,64,65,66,67,50,68,69,70,71,72,73,74,51,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104],"tindex":"6acb84af-2e76-11e6-be41-891f1df16899","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:425","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            if ((pArray == null) || ((pArray.int) == 0)) {\n                return pArray;\n            } \n            final org.apache.commons.codec.binary.BaseNCodec.Context org.apache.commons.codec.binary.BaseNCodec.Context = new org.apache.commons.codec.binary.BaseNCodec.Context();\n            encode(pArray, 0, pArray.int, context);\n            encode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context);\n            final byte[] byte[] = new byte[(context.int) - (context.int)];\n            readResults(buf, 0, buf.int, context);\n            return buf;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"pArray"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[],"tindex":"6acbabc0-2e76-11e6-be41-8d59f0a32b30","method":{"position":"org.apache.commons.codec.digest.DigestUtils:349","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] sha(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1(data);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:447","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[105],"tindex":"6acbabc1-2e76-11e6-be41-fb87320bbc9a","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:393","type":"CtMethodImpl","sourcecode":"public byte[] decode(final java.lang.String pArray) {\n    if (pArray == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"pArray"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtInvocationImpl","sourcecode":"target.equals(element)"},"failures":[106],"tindex":"6acbabc2-2e76-11e6-be41-8343b1b1216b","method":{"position":"org.apache.commons.codec.digest.HmacUtils:616","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha384Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (valueToDigest.equals(key)) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"valueToDigest","element":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[107],"tindex":"6acbd2d3-2e76-11e6-be41-8d3f5e998224","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:152","type":"CtMethodImpl","sourcecode":"public byte[] toByteArray(final java.lang.String ascii) {\n    if (ascii == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ascii.endsWith(ascii)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (ascii == null) {\n                        return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n                    } \n                    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii.toCharArray());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"ascii","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"ascii"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:270","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"6acbd2d4-2e76-11e6-be41-458894a0bc8b","method":{"position":"org.apache.commons.codec.language.bm.Rule:275","type":"CtMethodImpl","sourcecode":"private static boolean endsWith(final java.lang.CharSequence input, final java.lang.CharSequence suffix) {\n    if (suffix == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((suffix.length()) > (input.length())) {\n                return false;\n            } \n            for (int int = (input.length()) - 1, int int = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n                if ((input.charAt(i)) != (suffix.charAt(j))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"suffix"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[108,109,110,111],"tindex":"6acbf9e5-2e76-11e6-be41-d5c94cce76a3","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:148","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if ((str.length()) == 0) {\n        {\n            return soundex(str);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[112],"tindex":"6acbf9e6-2e76-11e6-be41-89dbd28e02e4","method":{"position":"org.apache.commons.codec.digest.HmacUtils:205","type":"CtMethodImpl","sourcecode":"public static byte[] hmacMd5(final byte[] key, final byte[] valueToDigest) {\n    if (key != null) {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[113,114,115,116,117],"tindex":"6acd0b57-2e76-11e6-be41-83a782ae6c4f","method":{"position":"org.apache.commons.codec.net.QCodec:153","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    final byte[] byte[] = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet, bytes);\n                    if (org.apache.commons.codec.net.QCodec.this.boolean) {\n                        for (int int = 0 ; i < (data.int) ; i++) {\n                            if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                                data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                            } \n                        }\n                    } \n                    return data;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6acd0b58-2e76-11e6-be41-29f6e3cb0d90","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:181","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] original) {\n    if (original == null) {\n        {\n            if (original == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.UnixCrypt.crypt(original, null);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"original"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[118,119,120,66,67,50,69,70,71,72,74,51,75,121,122,123,124,125,78,126,127,85,102,103,128],"tindex":"6acd3269-2e76-11e6-be41-95710a74649e","method":{"position":"org.apache.commons.codec.binary.Base64:705","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final byte[] base64Data) {\n    if (base64Data == null) {\n        {\n            return new org.apache.commons.codec.binary.Base64().decode(base64Data);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"base64Data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:70","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX)"},"failures":[16,17,18,19,20,129,130,21,22,23,24,25,38,26,27,28,29,30],"tindex":"6acd326a-2e76-11e6-be41-57e681fa7a41","method":{"position":"org.apache.commons.codec.language.bm.Rule:499","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.RPattern pattern(final java.lang.String regex) {\n    if ((regex.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (regex.startsWith(regex)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final boolean boolean = regex.startsWith(\"^\");\n                    final boolean boolean = regex.endsWith(\"$\");\n                    final java.lang.String java.lang.String = regex.substring((startsWith ? 1 : 0), (endsWith ? (regex.length()) - 1 : regex.length()));\n                    final boolean boolean = content.contains(\"[\");\n                    if (!boxes) {\n                        if (startsWith && endsWith) {\n                            if ((content.length()) == 0) {\n                                return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                    @java.lang.Override\n                                    public boolean isMatch(final java.lang.CharSequence input) {\n                                        return (input.length()) == 0;\n                                    }\n                                };\n                            } else {\n                                return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                    @java.lang.Override\n                                    public boolean isMatch(final java.lang.CharSequence input) {\n                                        return input.equals(content);\n                                    }\n                                };\n                            }\n                        } else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n                            return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern;\n                        } else if (startsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n                                }\n                            };\n                        } else if (endsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n                                }\n                            };\n                        } \n                    } else {\n                        final boolean boolean = content.startsWith(\"[\");\n                        final boolean boolean = content.endsWith(\"]\");\n                        if (startsWithBox && endsWithBox) {\n                            java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1));\n                            if (!(boxContent.contains(\"[\"))) {\n                                final boolean boolean = boxContent.startsWith(\"^\");\n                                if (negate) {\n                                    boxContent = boxContent.substring(1);\n                                } \n                                final java.lang.String java.lang.String = boxContent;\n                                final boolean boolean = !negate;\n                                if (startsWith && endsWith) {\n                                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                        @java.lang.Override\n                                        public boolean isMatch(final java.lang.CharSequence input) {\n                                            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                                        }\n                                    };\n                                } else if (startsWith) {\n                                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                        @java.lang.Override\n                                        public boolean isMatch(final java.lang.CharSequence input) {\n                                            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                                        }\n                                    };\n                                } else if (endsWith) {\n                                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                        @java.lang.Override\n                                        public boolean isMatch(final java.lang.CharSequence input) {\n                                            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                                        }\n                                    };\n                                } \n                            } \n                        } \n                    }\n                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(regex);\n\n                        @java.lang.Override\n                        public boolean isMatch(final java.lang.CharSequence input) {\n                            final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(input);\n                            return matcher.find();\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"regex","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"regex"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:528","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[131],"tindex":"6acda79b-2e76-11e6-be41-afb2f4dc6506","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:527","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj == null) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof byte[]) {\n                return decode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:74","type":"CtBinaryOperatorImpl","sourcecode":"(cs1 == null) || (cs2 == null)"},"failures":[116],"tindex":"6acda79c-2e76-11e6-be41-e3bbe6d940c1","method":{"position":"org.apache.commons.codec.net.QCodec:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if ((obj == null) || (obj == null)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs1":"obj","cs2":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"6acda79d-2e76-11e6-be41-bd144ca3efa9","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:463","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final byte[] arrayOctet, final boolean allowWSPad) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(arrayOctet)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"arrayOctet"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[132],"tindex":"6acdceae-2e76-11e6-be41-0fc6c749424a","method":{"position":"org.apache.commons.codec.binary.StringUtils:302","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringIso8859_1(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:189","type":"CtBinaryOperatorImpl","sourcecode":"(sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))"},"failures":[],"tindex":"6acdceaf-2e76-11e6-be41-9731f1afe324","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:174","type":"CtMethodImpl","sourcecode":"public void setMaxPhonemes(final int maxPhonemes) {\n    if ((maxPhonemes >= maxPhonemes) && (sumLength <= maxPhonemes)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat() , maxPhonemes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sumLength":"maxPhonemes","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"maxPhonemes","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"maxPhonemes"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:131","type":"CtBinaryOperatorImpl","sourcecode":"(offset < 0) || (len < 0)"},"failures":[133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152],"tindex":"6acdf5c0-2e76-11e6-be41-d301ef6b6dd5","method":{"position":"org.apache.commons.codec.language.Metaphone:351","type":"CtMethodImpl","sourcecode":"private boolean isNextChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if ((index < 0) || (index < 0)) {\n        {\n            boolean boolean = false;\n            if ((index >= 0) && (index < ((string.length()) - 1))) {\n                matches = (string.charAt((index + 1))) == c;\n            } \n            return matches;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"index","len":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"6acdf5c1-2e76-11e6-be41-7340c96304e0","method":{"position":"org.apache.commons.codec.digest.HmacUtils:312","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        {\n            if (valueToDigest == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key).doFinal(valueToDigest);\n                    } catch (final java.lang.IllegalStateException e) {\n                        throw new java.lang.IllegalArgumentException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"6acdf5c2-2e76-11e6-be41-97c8c3f8ffa6","method":{"position":"org.apache.commons.codec.Charsets:86","type":"CtMethodImpl","sourcecode":"public static java.nio.charset.Charset toCharset(final java.lang.String charset) {\n    if (charset.startsWith(charset)) {\n        {\n            if (charset == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return charset == null ? java.nio.charset.Charset.defaultCharset() : java.nio.charset.Charset.forName(charset);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"charset","line":"charset"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[44],"tindex":"6ace1cd3-2e76-11e6-be41-2f9cad987bed","method":{"position":"org.apache.commons.codec.digest.DigestUtils:546","type":"CtMethodImpl","sourcecode":"public static byte[] sha384(final byte[] data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.getSha384Digest().digest(data);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6ace1cd4-2e76-11e6-be41-3b1c45447546","method":{"position":"org.apache.commons.codec.digest.DigestUtils:333","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] sha(final byte[] data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"6ace1cd5-2e76-11e6-be41-676df5ac1477","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (((str.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"str"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:95","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txtLength = txt.length()) == 0)"},"failures":[],"tindex":"6ace43e6-2e76-11e6-be41-e15d0b75db21","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:279","type":"CtMethodImpl","sourcecode":"private int handleC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((value == null) || ((index = txt.length()) == 0)) {\n        {\n            if ((value == null) || ((str.length()) == 0)) {\n                {\n                    if (conditionC0(value, index)) {\n                        result.append('K');\n                        index += 2;\n                    } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))) {\n                        result.append('S');\n                        index += 2;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")) {\n                        index = handleCH(value, result, index);\n                    } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CZ\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 4, \"WICZ\")))) {\n                        result.append('S', 'X');\n                        index += 2;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"CIA\")) {\n                        result.append('X');\n                        index += 3;\n                    } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CC\")) && (!((index == 1) && ((charAt(value, 0)) == 'M')))) {\n                        return handleCC(value, result, index);\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n                        result.append('K');\n                        index += 2;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n                        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n                            result.append('S', 'X');\n                        } else {\n                            result.append('S');\n                        }\n                        index += 2;\n                    } else {\n                        result.append('K');\n                        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n                            index += 3;\n                        } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n                            index += 2;\n                        } else {\n                            index++;\n                        }\n                    }\n                    return index;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"value","txtLength":"index"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:92","type":"CtFieldReadImpl","sourcecode":"doEncode"},"failures":[4,5,6,7,8],"tindex":"6ace6af7-2e76-11e6-be41-f18fc2dd6c55","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:597","type":"CtMethodImpl","sourcecode":"private int handleS(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (!(value.contains(\"[\"))) {\n        {\n            if (slavoGermanic) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n                        index++;\n                    } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n                        result.append('X', 'S');\n                        index++;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n                        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                            result.append('S');\n                        } else {\n                            result.append('X');\n                        }\n                        index += 2;\n                    } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n                        if (slavoGermanic) {\n                            result.append('S');\n                        } else {\n                            result.append('S', 'X');\n                        }\n                        index += 3;\n                    } else if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n                        result.append('S', 'X');\n                        index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n                        index = handleSC(value, result, index);\n                    } else {\n                        if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n                            result.appendAlternate('S');\n                        } else {\n                            result.append('S');\n                        }\n                        index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1;\n                    }\n                    return index;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"doEncode":"slavoGermanic"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:218","type":"CtBinaryOperatorImpl","sourcecode":"((name1.length()) == 1) || ((name2.length()) == 1)"},"failures":[105],"tindex":"6ace9208-2e76-11e6-be41-0118678b5720","method":{"position":"org.apache.commons.codec.binary.Base64:691","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final java.lang.String base64String) {\n    if (base64String.startsWith(\"(\")) {\n        {\n            if (((base64String.length()) == 1) || ((base64String.length()) == 1)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new org.apache.commons.codec.binary.Base64().decode(base64String);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"base64String","name1":"base64String"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[],"tindex":"6ace9209-2e76-11e6-be41-afb7b4278346","method":{"position":"org.apache.commons.codec.net.Utils:42","type":"CtMethodImpl","sourcecode":"static int digit16(final byte b) throws org.apache.commons.codec.DecoderException {\n    if (b == b) {\n        {\n            final int int = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int);\n            if (i == (-1)) {\n                throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n            } \n            return i;\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","pad":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:447","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"6aceb91a-2e76-11e6-be41-d545ef6fa9b3","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:421","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEqual(final java.lang.String text1, final java.lang.String text2) {\n    if (text2.endsWith(text2)) {\n        {\n            if (text1 == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return colognePhonetic(text1).equals(colognePhonetic(text2));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"text1"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[80,84,86,87],"tindex":"6aceb91b-2e76-11e6-be41-517e58ff2e4a","method":{"position":"org.apache.commons.codec.binary.Base64:568","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeBase64String(final byte[] binaryData) {\n    if (binaryData == null) {\n        {\n            if (binaryData == null) {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:263","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[153,154,155,156,157,158],"tindex":"6acee02c-2e76-11e6-be41-37debc7a065f","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:198","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] original, java.lang.String salt) {\n    if ((salt.length()) == 0) {\n        {\n            if (salt == null) {\n                final java.util.Random java.util.Random = new java.util.Random();\n                final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int;\n                salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)]);\n            } else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n                throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \");\n            final char char = salt.charAt(0);\n            final char char = salt.charAt(1);\n            buffer.setCharAt(0, charZero);\n            buffer.setCharAt(1, charOne);\n            final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charZero];\n            final int int = (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charOne]) << 4;\n            final byte[] byte[] = new byte[8];\n            for (int int = 0 ; i < (key.int) ; i++) {\n                key[i] = 0;\n            }\n            for (int int = 0 ; (i < (key.int)) && (i < (original.int)) ; i++) {\n                final int int = original[i];\n                key[i] = ((byte)(iChar << 1));\n            }\n            final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.desSetKey(key);\n            final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.body(schedule, eSwap0, eSwap1);\n            final byte[] byte[] = new byte[9];\n            org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[0], b, 0);\n            org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[1], b, 4);\n            b[8] = 0;\n            int int = 2;\n            int int = 0;\n            int int = 128;\n            for ( ; i < 13 ; i++) {\n                int int = 0;\n                int int = 0;\n                for ( ; j < 6 ; j++) {\n                    c <<= 1;\n                    if (((b[y]) & u) != 0) {\n                        c |= 1;\n                    } \n                    u >>>= 1;\n                    if (u == 0) {\n                        y++;\n                        u = 128;\n                    } \n                    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n                }\n            }\n            return buffer.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"salt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[105,125],"tindex":"6acf073d-2e76-11e6-be41-358ee5f7ca99","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] pArray) {\n    if (pArray == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((pArray == null) || ((pArray.int) == 0)) {\n                return pArray;\n            } \n            final org.apache.commons.codec.binary.BaseNCodec.Context org.apache.commons.codec.binary.BaseNCodec.Context = new org.apache.commons.codec.binary.BaseNCodec.Context();\n            decode(pArray, 0, pArray.int, context);\n            decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context);\n            final byte[] byte[] = new byte[context.int];\n            readResults(result, 0, result.int, context);\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:125","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.Nysiis.isVowel(curr)"},"failures":[],"tindex":"6acf2e4e-2e76-11e6-be41-dd6236f0b7cd","method":{"position":"org.apache.commons.codec.language.Soundex:229","type":"CtMethodImpl","sourcecode":"private char map(final char ch) {\n    if (org.apache.commons.codec.language.Nysiis.isVowel(ch)) {\n        {\n            final int int = ch - 'A';\n            if ((index < 0) || (index >= (org.apache.commons.codec.language.Soundex.this.getSoundexMapping().int))) {\n                throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch));\n            } \n            return org.apache.commons.codec.language.Soundex.this.getSoundexMapping()[index];\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"curr":"ch"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"6acf2e4f-2e76-11e6-be41-a9825f9c9fea","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:857","type":"CtMethodImpl","sourcecode":"private boolean isSlavoGermanic(final java.lang.String value) {\n    if (value.startsWith(value)) {\n        {\n            return ((((value.indexOf('W')) > (-1)) || ((value.indexOf('K')) > (-1))) || ((value.indexOf(\"CZ\")) > (-1))) || ((value.indexOf(\"WITZ\")) > (-1));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"value","line":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"6acf7c70-2e76-11e6-be41-911c492472f2","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:152","type":"CtMethodImpl","sourcecode":"public byte[] toByteArray(final java.lang.String ascii) {\n    if (ascii == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ascii.endsWith(ascii)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (ascii == null) {\n                        return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n                    } \n                    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii.toCharArray());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"ascii"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:782","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHIA\")"},"failures":[],"tindex":"6acfa381-2e76-11e6-be41-573707bac0cf","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:331","type":"CtMethodImpl","sourcecode":"private int handleCC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHIA\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n                if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n                    result.append(\"KS\");\n                } else {\n                    result.append('X');\n                }\n                index += 3;\n            } else {\n                result.append('K');\n                index += 2;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:331","type":"CtBinaryOperatorImpl","sourcecode":"finalRules == null"},"failures":[],"tindex":"6acfa382-2e76-11e6-be41-5f134863e416","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:329","type":"CtMethodImpl","sourcecode":"private org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder applyFinalRules(final org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder phonemeBuilder, final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> finalRules) {\n    if (finalRules == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (finalRules == null) {\n                throw new java.lang.NullPointerException(\"finalRules can not be null\");\n            } \n            if (finalRules.isEmpty()) {\n                return phonemeBuilder;\n            } \n            final java.util.Map<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.Map<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.TreeMap<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme>(org.apache.commons.codec.language.bm.Rule.Phoneme.org.apache.commons.codec.language.bm.Rule.Phoneme.java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme>);\n            for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeBuilder.getPhonemes()) {\n                org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(phoneme.getLanguages());\n                final java.lang.String java.lang.String = phoneme.getPhonemeText().toString();\n                for (int int = 0 ; i < (phonemeText.length()) ; ) {\n                    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , int).invoke();\n                    final boolean boolean = rulesApplication.isFound();\n                    subBuilder = rulesApplication.getPhonemeBuilder();\n                    if (!found) {\n                        subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n                    } \n                    i = rulesApplication.getI();\n                }\n                for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n                    if (phonemes.containsKey(newPhoneme)) {\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n                        phonemes.put(mergedPhoneme, mergedPhoneme);\n                    } else {\n                        phonemes.put(newPhoneme, newPhoneme);\n                    }\n                }\n            }\n            return new org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder(phonemes.keySet());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"finalRules":"finalRules"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[16,17,159,160,18,19,20,129,130,21,22,161,162,23,24,163,25,164,165,166,38,26,27,28,29,30],"tindex":"6acff1a3-2e76-11e6-be41-7f9916b25935","method":{"position":"org.apache.commons.codec.language.bm.Lang:129","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang loadFromResource(final java.lang.String languageRulesResourceName, final org.apache.commons.codec.language.bm.Languages languages) {\n    if (languageRulesResourceName.equalsIgnoreCase(languageRulesResourceName)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Lang.LangRule>();\n            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.Class.getClassLoader().getResourceAsStream(languageRulesResourceName);\n            if (lRulesIS == null) {\n                throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)));\n            } \n            final java.util.Scanner java.util.Scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n            try {\n                boolean boolean = false;\n                while (scanner.hasNextLine()) {\n                    final java.lang.String java.lang.String = scanner.nextLine();\n                    java.lang.String java.lang.String = rawLine;\n                    if (inExtendedComment) {\n                        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = false;\n                        } \n                    } else {\n                        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = true;\n                        } else {\n                            final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                            if (cmtI >= 0) {\n                                line = line.substring(0, cmtI);\n                            } \n                            line = line.trim();\n                            if ((line.length()) == 0) {\n                                continue;\n                            } \n                            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                            if ((parts.int) != 3) {\n                                throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                            } \n                            final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n                            final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n                            final boolean boolean = parts[2].equals(\"true\");\n                            rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n                        }\n                    }\n                }\n            } finally {\n                scanner.close();\n            }\n            return new org.apache.commons.codec.language.bm.Lang(rules , languages);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"languageRulesResourceName","name1":"languageRulesResourceName"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[],"tindex":"6ad03fc4-2e76-11e6-be41-e7e26e418349","method":{"position":"org.apache.commons.codec.binary.Hex:295","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(object, 0, 2, \"MC\")) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            try {\n                final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n                return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n            } catch (final java.lang.ClassCastException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"object"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:263","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[],"tindex":"6ad03fc5-2e76-11e6-be41-a5ba7f9a7ade","method":{"position":"org.apache.commons.codec.language.bm.Rule:499","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.RPattern pattern(final java.lang.String regex) {\n    if ((regex.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (regex.startsWith(regex)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final boolean boolean = regex.startsWith(\"^\");\n                    final boolean boolean = regex.endsWith(\"$\");\n                    final java.lang.String java.lang.String = regex.substring((startsWith ? 1 : 0), (endsWith ? (regex.length()) - 1 : regex.length()));\n                    final boolean boolean = content.contains(\"[\");\n                    if (!boxes) {\n                        if (startsWith && endsWith) {\n                            if ((content.length()) == 0) {\n                                return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                    @java.lang.Override\n                                    public boolean isMatch(final java.lang.CharSequence input) {\n                                        return (input.length()) == 0;\n                                    }\n                                };\n                            } else {\n                                return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                    @java.lang.Override\n                                    public boolean isMatch(final java.lang.CharSequence input) {\n                                        return input.equals(content);\n                                    }\n                                };\n                            }\n                        } else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n                            return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern;\n                        } else if (startsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n                                }\n                            };\n                        } else if (endsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n                                }\n                            };\n                        } \n                    } else {\n                        final boolean boolean = content.startsWith(\"[\");\n                        final boolean boolean = content.endsWith(\"]\");\n                        if (startsWithBox && endsWithBox) {\n                            java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1));\n                            if (!(boxContent.contains(\"[\"))) {\n                                final boolean boolean = boxContent.startsWith(\"^\");\n                                if (negate) {\n                                    boxContent = boxContent.substring(1);\n                                } \n                                final java.lang.String java.lang.String = boxContent;\n                                final boolean boolean = !negate;\n                                if (startsWith && endsWith) {\n                                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                        @java.lang.Override\n                                        public boolean isMatch(final java.lang.CharSequence input) {\n                                            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                                        }\n                                    };\n                                } else if (startsWith) {\n                                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                        @java.lang.Override\n                                        public boolean isMatch(final java.lang.CharSequence input) {\n                                            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                                        }\n                                    };\n                                } else if (endsWith) {\n                                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                        @java.lang.Override\n                                        public boolean isMatch(final java.lang.CharSequence input) {\n                                            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                                        }\n                                    };\n                                } \n                            } \n                        } \n                    }\n                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(regex);\n\n                        @java.lang.Override\n                        public boolean isMatch(final java.lang.CharSequence input) {\n                            final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(input);\n                            return matcher.find();\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"regex"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[167,168,169,170,171,172,173,174,175,176],"tindex":"6ad08de6-2e76-11e6-be41-83028d85bfc1","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:417","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String text) {\n    if (text == null) {\n        {\n            return colognePhonetic(text);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"text"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214],"tindex":"6ad0b4f7-2e76-11e6-be41-cfff71b1d9ce","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:294","type":"CtMethodImpl","sourcecode":"int leftToRightThenRightToLeftProcessing(final java.lang.String name1, final java.lang.String name2) {\n    if (name1 == null) {\n        {\n            final char[] char[] = name1.toCharArray();\n            final char[] char[] = name2.toCharArray();\n            final int int = (name1.length()) - 1;\n            final int int = (name2.length()) - 1;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            for (int int = 0 ; i < (name1Char.int) ; i++) {\n                if (i > name2Size) {\n                    break;\n                } \n                name1LtRStart = name1.substring(i, (i + 1));\n                name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n                name2RtLStart = name2.substring(i, (i + 1));\n                name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n                if (name1LtRStart.equals(name2RtLStart)) {\n                    name1Char[i] = ' ';\n                    name2Char[i] = ' ';\n                } \n                if (name1LtREnd.equals(name2RtLEnd)) {\n                    name1Char[(name1Size - i)] = ' ';\n                    name2Char[(name2Size - i)] = ' ';\n                } \n            }\n            final java.lang.String java.lang.String = new java.lang.String(name1Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            final java.lang.String java.lang.String = new java.lang.String(name2Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            if ((strA.length()) > (strB.length())) {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())));\n            } else {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtBinaryOperatorImpl","sourcecode":"b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[],"tindex":"6ad0dc08-2e76-11e6-be41-6d5bffcceea2","method":{"position":"org.apache.commons.codec.binary.Base64:509","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final byte octet) {\n    if (octet != octet) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (octet == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.byte)) || (((octet >= 0) && (octet < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) && ((org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][octet]) != (-1)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"octet","org.apache.commons.codec.net.QCodec.UNDERSCORE":"octet"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6ad10319-2e76-11e6-be41-1767ed0d8a3e","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:398","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(java.lang.String input, final org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType, languageSet);\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, \"common\");\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, languageSet);\n            input = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale).replace('-', ' ').trim();\n            if ((org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) == (org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType)) {\n                if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n                    final java.lang.String java.lang.String = input.substring(2);\n                    final java.lang.String java.lang.String = \"d\" + remainder;\n                    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n                } \n                for (final java.lang.String java.lang.String : org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)) {\n                    if (input.startsWith((l + \" \"))) {\n                        final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n                        final java.lang.String java.lang.String = l + remainder;\n                        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n                    } \n                }\n            } \n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = java.util.Arrays.asList(input.split(\"\\\\s+\"));\n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            switch (org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) {\n                case SEPHARDIC :\n                    for (final java.lang.String java.lang.String : words) {\n                        final java.lang.String[] java.lang.String[] = aWord.split(\"'\");\n                        final java.lang.String java.lang.String = parts[((parts.int) - 1)];\n                        words2.add(lastPart);\n                    }\n                    words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType));\n                    break;\n                case ASHKENAZI :\n                    words2.addAll(words);\n                    words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType));\n                    break;\n                case GENERIC :\n                    words2.addAll(words);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException((\"Unreachable case: \" + (org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)));\n            }\n            if (org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean) {\n                input = org.apache.commons.codec.language.bm.PhoneticEngine.join(words2, \" \");\n            } else if ((words2.size()) == 1) {\n                input = words.iterator().next();\n            } else {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                for (final java.lang.String java.lang.String : words2) {\n                    result.append(\"-\").append(encode(word));\n                }\n                return result.substring(1);\n            }\n            org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(languageSet);\n            for (int int = 0 ; i < (input.length()) ; ) {\n                final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(rules , input , phonemeBuilder , i , int).invoke();\n                i = rulesApplication.getI();\n                phonemeBuilder = rulesApplication.getPhonemeBuilder();\n            }\n            phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1);\n            phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2);\n            return phonemeBuilder.makeString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtInvocationImpl","sourcecode":"incl.contains(\" \")"},"failures":[],"tindex":"6ad1784a-2e76-11e6-be41-a7f6c9be38e6","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:91","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.CharSequence str) {\n    if (str.startsWith(str)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str.contains(\" \")) {\n                {\n                    for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n                        ph.append(str);\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"incl":"str"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[43,46],"tindex":"6ad1c66b-2e76-11e6-be41-6dfdca9e1811","method":{"position":"org.apache.commons.codec.digest.DigestUtils:411","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final byte[] data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6ad1c66c-2e76-11e6-be41-671a4c0fe7a1","method":{"position":"org.apache.commons.codec.binary.Base64:568","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeBase64String(final byte[] binaryData) {\n    if (binaryData == null) {\n        {\n            if (binaryData == null) {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[106],"tindex":"6ad1ed7d-2e76-11e6-be41-b94dc7f6b47f","method":{"position":"org.apache.commons.codec.digest.HmacUtils:551","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha384(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key), valueToDigest).doFinal();\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[69,70,71,72],"tindex":"6ad1ed7e-2e76-11e6-be41-331950d68057","method":{"position":"org.apache.commons.codec.binary.Base64:720","type":"CtMethodImpl","sourcecode":"public static java.math.BigInteger decodeInteger(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            return new java.math.BigInteger(1 , org.apache.commons.codec.binary.Base64.decodeBase64(pArray));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"6ad1ed7f-2e76-11e6-be41-8df2920906af","method":{"position":"org.apache.commons.codec.net.QCodec:153","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    final byte[] byte[] = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet, bytes);\n                    if (org.apache.commons.codec.net.QCodec.this.boolean) {\n                        for (int int = 0 ; i < (data.int) ; i++) {\n                            if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                                data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                            } \n                        }\n                    } \n                    return data;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bytes"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[1,2,3,4,5,6,7,8],"tindex":"6ad21490-2e76-11e6-be41-31c029a62328","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:514","type":"CtMethodImpl","sourcecode":"private int handleJ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (!(value.contains(\"[\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                    result.append('H');\n                } else {\n                    result.append('J', 'H');\n                }\n                index++;\n            } else {\n                if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n                    result.append('J', 'A');\n                } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n                    result.append('J', 'H');\n                } else if (index == ((value.length()) - 1)) {\n                    result.append('J', ' ');\n                } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n                    result.append('J');\n                } \n                if ((charAt(value, (index + 1))) == 'J') {\n                    index += 2;\n                } else {\n                    index++;\n                }\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:540","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"6ad23ba1-2e76-11e6-be41-798514c22a76","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:384","type":"CtMethodImpl","sourcecode":"private int handleD(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                    result.append('J');\n                    index += 3;\n                } else {\n                    result.append(\"TK\");\n                    index += 2;\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n                result.append('T');\n                index += 2;\n            } else {\n                result.append('T');\n                index++;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:268","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"6ad23ba2-2e76-11e6-be41-d5759d4a7c7c","method":{"position":"org.apache.commons.codec.digest.DigestUtils:49","type":"CtMethodImpl","sourcecode":"private static byte[] digest(final java.security.MessageDigest digest, final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            if (data == null) {\n                {\n                    return org.apache.commons.codec.digest.DigestUtils.updateDigest(digest, data).digest();\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"6ad23ba3-2e76-11e6-be41-5fcfcd7d5f17","method":{"position":"org.apache.commons.codec.language.bm.Lang:202","type":"CtMethodImpl","sourcecode":"public java.lang.String guessLanguage(final java.lang.String text) {\n    if ((text == null) || ((txt.length()) == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text);\n            return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"text"},"type":"special","returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[215,216,217,218],"tindex":"6ad262b4-2e76-11e6-be41-07a3891a87d0","method":{"position":"org.apache.commons.codec.binary.Hex:231","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] array) throws org.apache.commons.codec.DecoderException {\n    if (array == array) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"array","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtInvocationImpl","sourcecode":"ph.startsWith(\"(\")"},"failures":[],"tindex":"6ad262b5-2e76-11e6-be41-57f485c884d7","method":{"position":"org.apache.commons.codec.binary.Base64:691","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final java.lang.String base64String) {\n    if (base64String.startsWith(\"(\")) {\n        {\n            if (((base64String.length()) == 1) || ((base64String.length()) == 1)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new org.apache.commons.codec.binary.Base64().decode(base64String);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"base64String"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:101","type":"CtBinaryOperatorImpl","sourcecode":"r > 0"},"failures":[219,220,221,222,223,224,225,226,227,228,229,230,231,47,232,233,234,235,236,237,238],"tindex":"6ad262b6-2e76-11e6-be41-b304f981c8ee","method":{"position":"org.apache.commons.codec.language.Soundex:183","type":"CtMethodImpl","sourcecode":"private char getMappingCode(final java.lang.String str, final int index) {\n    if (index > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char char = org.apache.commons.codec.language.Soundex.this.map(str.charAt(index));\n            if ((index > 1) && (mappedChar != '0')) {\n                final char char = str.charAt((index - 1));\n                if (('H' == hwChar) || ('W' == hwChar)) {\n                    final char char = str.charAt((index - 2));\n                    final char char = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n                    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n                        return 0;\n                    } \n                } \n            } \n            return mappedChar;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"r":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:319","type":"CtInvocationImpl","sourcecode":"name1LtRStart.equals(name2RtLStart)"},"failures":[239],"tindex":"6ad289c7-2e76-11e6-be41-f7882d0e5937","method":{"position":"org.apache.commons.codec.net.URLCodec:269","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (str.equals(charset)) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2RtLStart":"charset","name1LtRStart":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6ad289c8-2e76-11e6-be41-efb16b2a7d18","method":{"position":"org.apache.commons.codec.language.Caverphone:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.caverphone(str);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:145","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[],"tindex":"6ad2b0d9-2e76-11e6-be41-479795c35ac9","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:421","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEqual(final java.lang.String text1, final java.lang.String text2) {\n    if (text2.endsWith(text2)) {\n        {\n            if (text1 == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return colognePhonetic(text1).equals(colognePhonetic(text2));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"text2","line":"text2"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6ad2b0da-2e76-11e6-be41-63c104135471","method":{"position":"org.apache.commons.codec.digest.HmacUtils:312","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        {\n            if (valueToDigest == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key).doFinal(valueToDigest);\n                    } catch (final java.lang.IllegalStateException e) {\n                        throw new java.lang.IllegalArgumentException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)"},"failures":[],"tindex":"6ad2b0db-2e76-11e6-be41-53337e360e9d","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:91","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.CharSequence str) {\n    if (str.startsWith(str)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str.contains(\" \")) {\n                {\n                    for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n                        ph.append(str);\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"str","line":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"6ad2d7ec-2e76-11e6-be41-b98fc1a98180","method":{"position":"org.apache.commons.codec.digest.DigestUtils:593","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha384Hex(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"data"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[240],"tindex":"6ad2d7ed-2e76-11e6-be41-39bd05daad90","method":{"position":"org.apache.commons.codec.digest.HmacUtils:260","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[],"tindex":"6ad2fefe-2e76-11e6-be41-cb9e1b25eea8","method":{"position":"org.apache.commons.codec.language.bm.Rule:353","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.get(nameType).get(rt).get(lang);\n            if (rules == null) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n            } \n            return rules;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"lang"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[153,157],"tindex":"6ad2feff-2e76-11e6-be41-ffb00b6d3412","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:277","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String original, final java.lang.String salt) {\n    if (original.startsWith(salt)) {\n        {\n            return org.apache.commons.codec.digest.UnixCrypt.crypt(original.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"salt","line":"original"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:268","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"6ad2ff00-2e76-11e6-be41-03ec49f3a339","method":{"position":"org.apache.commons.codec.digest.DigestUtils:236","type":"CtMethodImpl","sourcecode":"public static java.lang.String md2Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[],"tindex":"6ad32611-2e76-11e6-be41-2b16251610b2","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:597","type":"CtMethodImpl","sourcecode":"private int handleS(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (!(value.contains(\"[\"))) {\n        {\n            if (slavoGermanic) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n                        index++;\n                    } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n                        result.append('X', 'S');\n                        index++;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n                        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                            result.append('S');\n                        } else {\n                            result.append('X');\n                        }\n                        index += 2;\n                    } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n                        if (slavoGermanic) {\n                            result.append('S');\n                        } else {\n                            result.append('S', 'X');\n                        }\n                        index += 3;\n                    } else if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n                        result.append('S', 'X');\n                        index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n                        index = handleSC(value, result, index);\n                    } else {\n                        if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n                            result.appendAlternate('S');\n                        } else {\n                            result.append('S');\n                        }\n                        index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1;\n                    }\n                    return index;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"value"},"type":"special","returnInThen":true,"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":188,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":58,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":244,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":232,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":64,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":92,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":281,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":279,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":280,"org.apache.commons.codec.net.URLCodecTest.testEncodeNull":252,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":268,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":62,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":282,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":6,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":141,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":47,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":233,"org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull":42,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":54,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":153,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":204,"org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull":20,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":192,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":203,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":263,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":71,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":291,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":293,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":292,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":122,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":123,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":57,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":74,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":126,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":72,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":124,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":125,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":0,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":151,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":26,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":168,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":88,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":261,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":186,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":25,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":91,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":177,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":148,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":241,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":133,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":231,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":80,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":213,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":103,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":143,"org.apache.commons.codec.language.SoundexTest.testB650":278,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":61,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":246,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":176,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":257,"org.apache.commons.codec.language.SoundexTest.testNewInstance":285,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":55,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":75,"org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull":296,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully":238,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":68,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":198,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":171,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":258,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":82,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleDoubleVowel_BEETLE_NotRemoved":239,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":235,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":219,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":137,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":150,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":51,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":182,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":227,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":30,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":77,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":240,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":255,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":217,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":60,"org.apache.commons.codec.binary.Base64Test.testUUID":120,"org.apache.commons.codec.binary.Base64Test.testSingletons":134,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3_PETE_Returns_PETE":84,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":253,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":116,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":142,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":189,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":169,"org.apache.commons.codec.binary.Base64Test.testPairs":119,"org.apache.commons.codec.binary.Base64Test.testConstructors":178,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":154,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":265,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":254,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":48,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":161,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":251,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":286,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":45,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":200,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":270,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":53,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":15,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":173,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":216,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":100,"org.apache.commons.codec.language.SoundexTest.testEncodeNull":111,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":49,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":113,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":131,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull":21,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull":44,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":39,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":132,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":199,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":223,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":206,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":229,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":144,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":287,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":274,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":164,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedNullInput":40,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":224,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey":94,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":9,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":181,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":90,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":158,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":179,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":226,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":87,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":66,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":105,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":165,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":211,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":67,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":73,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":96,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":24,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":97,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":222,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":63,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":79,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":205,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":147,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":146,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":249,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":259,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":86,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":248,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":12,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":93,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":106,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":11,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":207,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":31,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":166,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":160,"org.apache.commons.codec.binary.Base64Test.testTriplets":174,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull":236,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":38,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":27,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":18,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":16,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":19,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":230,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":256,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":184,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":115,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":156,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":99,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":127,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":159,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":196,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":295,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":13,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":95,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":118,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":221,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":2,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":215,"org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey":108,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":290,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":288,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":289,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":89,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":212,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":101,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":43,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":234,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":218,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":260,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":262,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":130,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":162,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":267,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":33,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":145,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":185,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":191,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":17,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":283,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":247,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":41,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":78,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":37,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":273,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":22,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":35,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":197,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":50,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":46,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":225,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":69,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":114,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":266,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":220,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":155,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":70,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":294,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":107,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":271,"org.apache.commons.codec.binary.BaseNCodecTest.testIsWhiteSpace":210,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3__ALEXANDER_Returns_Aleder":65,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":228,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":136,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":275,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":276,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":277,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":170,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":5,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":193,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":180,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":250,"org.apache.commons.codec.binary.Base64Test.testBase64":190,"org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull":201,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":10,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":29,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":128,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":149,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":209,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":8,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":272,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":7,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":264,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully":237,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":194,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":208,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":163,"org.apache.commons.codec.binary.Base64Test.testCodec112":183,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":81,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":167,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":140,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":175,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":76,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":152,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":172,"org.apache.commons.codec.binary.Base64Test.testCodec68":135,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":112,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":284,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":157,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":195,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":102,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":138,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":269,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":56,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":245,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":202,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":14,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":117,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":109,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":187,"org.apache.commons.codec.language.SoundexTest.testDifference":110,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":242,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":214,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":23,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":139,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":4,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":28,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":59,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":85,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":129,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullAlgo":98,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":243,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":83,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":121},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:71","type":"CtBinaryOperatorImpl","sourcecode":"((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))"},"failures":[],"tindex":"9b889a9b-3e77-11e6-b596-a3c86166100a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:962","type":"CtMethodImpl","sourcecode":"public void appendAlternate(final char value) {\n    if (((java.lang.Character.toUpperCase(value)) != (java.lang.Character.toUpperCase(value))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int)) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c1":"value","c2":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:270","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[0,1],"tindex":"9b890fcc-3e77-11e6-b596-e1158e50a4c9","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:240","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected char[] copyData(final int start, final int length) {\n    if (length >= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (length == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final char[] char[] = new char[length];\n                    java.lang.System.arraycopy(char[], start, newData, 0, length);\n                    return newData;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"9b8936dd-3e77-11e6-b596-559b6ed0ca97","method":{"position":"org.apache.commons.codec.language.bm.Rule:253","type":"CtMethodImpl","sourcecode":"private static java.util.Scanner createScanner(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (((lang.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        {\n            if (lang == null) {\n                {\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.createResourceName(nameType, rt, lang);\n                    final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName);\n                    if (rulesIS == null) {\n                        throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n                    } \n                    return new java.util.Scanner(rulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"lang"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtBinaryOperatorImpl","sourcecode":"(content.length()) == 0"},"failures":[],"tindex":"9b895dee-3e77-11e6-b596-33b8a6746509","method":{"position":"org.apache.commons.codec.language.bm.Languages:169","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Languages getInstance(final java.lang.String languagesResourceName) {\n    if (languagesResourceName.equals(languagesResourceName)) {\n        {\n            if ((languagesResourceName.length()) == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>();\n                    final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(languagesResourceName);\n                    if (langIS == null) {\n                        throw new java.lang.IllegalArgumentException((\"Unable to resolve required resource: \" + languagesResourceName));\n                    } \n                    final java.util.Scanner java.util.Scanner = new java.util.Scanner(langIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                    try {\n                        boolean boolean = false;\n                        while (lsScanner.hasNextLine()) {\n                            final java.lang.String java.lang.String = lsScanner.nextLine().trim();\n                            if (inExtendedComment) {\n                                if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                                    inExtendedComment = false;\n                                } \n                            } else {\n                                if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                                    inExtendedComment = true;\n                                } else if ((line.length()) > 0) {\n                                    ls.add(line);\n                                } \n                            }\n                        }\n                    } finally {\n                        lsScanner.close();\n                    }\n                    return new org.apache.commons.codec.language.bm.Languages(java.util.Collections.unmodifiableSet(ls));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"content":"languagesResourceName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:265","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[20,21],"tindex":"9b8984ff-3e77-11e6-b596-07a1cdaa8078","method":{"position":"org.apache.commons.codec.net.QCodec:264","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return decodeText(str);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[2,3,4,5,6,9,10,22,11,12,13],"tindex":"9b898500-3e77-11e6-b596-1da1231fbc51","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:147","type":"CtMethodImpl","sourcecode":"public void setNameType(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[2,3,4,5,6,9,10,11,12,13,16,17,18,19],"tindex":"9b89ac11-3e77-11e6-b596-6dd944f83cb4","method":{"position":"org.apache.commons.codec.language.bm.Rule:600","type":"CtMethodImpl","sourcecode":"private static boolean startsWith(final java.lang.CharSequence input, final java.lang.CharSequence prefix) {\n    if (prefix == null) {\n        {\n            if ((prefix.length()) > (input.length())) {\n                return false;\n            } \n            for (int int = 0 ; i < (prefix.length()) ; i++) {\n                if ((input.charAt(i)) != (prefix.charAt(i))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"prefix"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:683","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))"},"failures":[],"tindex":"9b89ac12-3e77-11e6-b596-9f1413935433","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:384","type":"CtMethodImpl","sourcecode":"private int handleD(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                    result.append('J');\n                    index += 3;\n                } else {\n                    result.append(\"TK\");\n                    index += 2;\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n                result.append('T');\n                index += 2;\n            } else {\n                result.append('T');\n                index++;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:289","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"9b89ac13-3e77-11e6-b596-87857aac88e3","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:135","type":"CtMethodImpl","sourcecode":"public void processNextReplacement(final java.lang.String replacement, final boolean forceAppend) {\n    if (replacement == null) {\n        {\n            if (forceAppend) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (replacement == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            final boolean boolean = (((java.lang.String) == null) || (!(java.lang.String.endsWith(replacement)))) || forceAppend;\n                            if (append && ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int))) {\n                                java.lang.StringBuilder.append(replacement);\n                                if ((java.lang.StringBuilder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n                                    java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length());\n                                } \n                                java.lang.String = null;\n                            } \n                            java.lang.String = replacement;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"replacement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:143","type":"CtVariableReadImpl","sourcecode":"inExtendedComment"},"failures":[],"tindex":"9b89d324-3e77-11e6-b596-73fcd01c83e9","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:135","type":"CtMethodImpl","sourcecode":"public void processNextReplacement(final java.lang.String replacement, final boolean forceAppend) {\n    if (replacement == null) {\n        {\n            if (forceAppend) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (replacement == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            final boolean boolean = (((java.lang.String) == null) || (!(java.lang.String.endsWith(replacement)))) || forceAppend;\n                            if (append && ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int))) {\n                                java.lang.StringBuilder.append(replacement);\n                                if ((java.lang.StringBuilder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n                                    java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length());\n                                } \n                                java.lang.String = null;\n                            } \n                            java.lang.String = replacement;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inExtendedComment":"forceAppend"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:413","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[],"tindex":"9b89d325-3e77-11e6-b596-4f14ea3368d5","method":{"position":"org.apache.commons.codec.language.bm.Lang:214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Languages.LanguageSet guessLanguages(final java.lang.String input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (input.equals(\"\")) {\n                {\n                    if (input.endsWith(input)) {\n                        {\n                            final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                            final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(org.apache.commons.codec.language.bm.Lang.this.org.apache.commons.codec.language.bm.Languages.getLanguages());\n                            for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n                                if (rule.matches(text)) {\n                                    if (rule.boolean) {\n                                        langs.retainAll(rule.java.util.Set<java.lang.String>);\n                                    } else {\n                                        langs.removeAll(rule.java.util.Set<java.lang.String>);\n                                    }\n                                } \n                            }\n                            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs);\n                            return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"input","line":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[23],"tindex":"9b89fa36-3e77-11e6-b596-ef4650c68336","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:527","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj == null) {\n        {\n            if (obj == null) {\n                {\n                    if (obj == null) {\n                        return null;\n                    } else if (obj instanceof byte[]) {\n                        return decode(((byte[])(obj)));\n                    } else if (obj instanceof java.lang.String) {\n                        return decode(((java.lang.String)(obj)));\n                    } else {\n                        throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtBinaryOperatorImpl","sourcecode":"sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)"},"failures":[24,25,26,27],"tindex":"9b8a2147-3e77-11e6-b596-f9aa42c94486","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:384","type":"CtMethodImpl","sourcecode":"private static int fourBytesToInt(final byte[] b, int offset) {\n    if (offset <= offset) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)]);\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 16;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24;\n            return value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sumLength":"offset","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[28,29,30,31,32,33,34,35],"tindex":"9b8a2148-3e77-11e6-b596-9329f3d97ded","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:568","type":"CtMethodImpl","sourcecode":"private int handleP(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                result.append('F');\n                index += 2;\n            } else {\n                result.append('P');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[36],"tindex":"9b8a2149-3e77-11e6-b596-e767b1e3e4f0","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:115","type":"CtMethodImpl","sourcecode":"public int difference(final java.lang.String s1, final java.lang.String s2) throws org.apache.commons.codec.EncoderException {\n    if (s2 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            return org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.language.RefinedSoundex.this, s1, s2);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"s2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:148","type":"CtUnaryOperatorImpl","sourcecode":"!(getEncoding().equalsIgnoreCase(encoding))"},"failures":[],"tindex":"9b8a485a-3e77-11e6-b596-c9d1f00f8173","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:376","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj instanceof byte[]) {\n        return decode(((byte[])(obj)));\n    } else if (obj instanceof java.lang.String) {\n        return decode(((java.lang.String)(obj)));\n    } else {\n        throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"obj","encoding":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtBinaryOperatorImpl","sourcecode":"cmtI >= 0"},"failures":[37,38],"tindex":"9b8a485b-3e77-11e6-b596-c573189ea252","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final int i) throws java.io.IOException {\n    if (i >= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            byte[][0] = ((byte)(i));\n            write(byte[], 0, 1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmtI":"i"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\")\"))"},"failures":[39],"tindex":"9b8a485c-3e77-11e6-b596-0f678ae4c3bb","method":{"position":"org.apache.commons.codec.language.SoundexUtils:41","type":"CtMethodImpl","sourcecode":"static java.lang.String clean(final java.lang.String str) {\n    if (!(str.endsWith(\")\"))) {\n        {\n            if ((str == null) || ((str.length()) == 0)) {\n                return str;\n            } \n            final int int = str.length();\n            final char[] char[] = new char[len];\n            int int = 0;\n            for (int int = 0 ; i < len ; i++) {\n                if (java.lang.Character.isLetter(str.charAt(i))) {\n                    chars[(count++)] = str.charAt(i);\n                } \n            }\n            if (count == len) {\n                return str.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            } \n            return new java.lang.String(chars , 0 , count).toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"9b8a6f6d-3e77-11e6-b596-c11de19f0e64","method":{"position":"org.apache.commons.codec.net.QCodec:169","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == bytes) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            boolean boolean = false;\n            for (final byte byte : bytes) {\n                if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                    hasUnderscores = true;\n                    break;\n                } \n            }\n            if (hasUnderscores) {\n                final byte[] byte[] = new byte[bytes.int];\n                for (int int = 0 ; i < (bytes.int) ; i++) {\n                    final byte byte = bytes[i];\n                    if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                        tmp[i] = b;\n                    } else {\n                        tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                    }\n                }\n                return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n            } \n            return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"bytes","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"9b8a6f6e-3e77-11e6-b596-036788548929","method":{"position":"org.apache.commons.codec.digest.HmacUtils:260","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[],"tindex":"9b8a6f6f-3e77-11e6-b596-19e7b234796e","method":{"position":"org.apache.commons.codec.binary.StringUtils:238","type":"CtMethodImpl","sourcecode":"private static java.lang.IllegalStateException newIllegalStateException(final java.lang.String charsetName, final java.io.UnsupportedEncodingException e) {\n    if (charsetName.endsWith(charsetName)) {\n        {\n            return new java.lang.IllegalStateException(((charsetName + \": \") + e));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"charsetName","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"charsetName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:162","type":"CtBinaryOperatorImpl","sourcecode":"nameLength > (org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX)"},"failures":[],"tindex":"9b8a9680-3e77-11e6-b596-198388218da2","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:260","type":"CtMethodImpl","sourcecode":"public void setMaxCodeLen(final int maxCodeLen) {\n    if (maxCodeLen > maxCodeLen) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameLength":"maxCodeLen","org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX":"maxCodeLen"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:354","type":"CtBinaryOperatorImpl","sourcecode":"(chr == 'B') || ((chr == 'P') && (nextChar != 'H'))"},"failures":[],"tindex":"9b8a9681-3e77-11e6-b596-51d720079041","method":{"position":"org.apache.commons.codec.language.Soundex:229","type":"CtMethodImpl","sourcecode":"private char map(final char ch) {\n    if ((ch == 'B') || ((chr == 'P') && (ch != 'H'))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ch - 'A';\n            if ((index < 0) || (index >= (org.apache.commons.codec.language.Soundex.this.getSoundexMapping().int))) {\n                throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch));\n            } \n            return org.apache.commons.codec.language.Soundex.this.getSoundexMapping()[index];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nextChar":"ch","chr":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[],"tindex":"9b8a9682-3e77-11e6-b596-676477e92f81","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:104","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final java.lang.String keyBytes) {\n    if (keyBytes.startsWith(keyBytes)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(keyBytes, 0, 5, \"CHORE\")) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"keyBytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[40],"tindex":"9b8a9683-3e77-11e6-b596-332c63ff64b1","method":{"position":"org.apache.commons.codec.binary.StringUtils:137","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUnchecked(final java.lang.String string, final java.lang.String charsetName) {\n    if (!(string.contains(\"[\"))) {\n        {\n            if (string == null) {\n                return null;\n            } \n            try {\n                return string.getBytes(charsetName);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"string"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:528","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[11,12,14],"tindex":"9b8abd94-3e77-11e6-b596-e7ec8b7cc6d6","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if (source == null) {\n        {\n            if (!(source instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\");\n            } \n            return encode(((java.lang.String)(source)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[41],"tindex":"9b8abd95-3e77-11e6-b596-2f035463f956","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:87","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n                salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n            } \n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:336","type":"CtBinaryOperatorImpl","sourcecode":"(strA.length()) > (strB.length())"},"failures":[42],"tindex":"9b8abd96-3e77-11e6-b596-15fd11ae000a","method":{"position":"org.apache.commons.codec.net.URLCodec:269","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if ((str == null) || ((txt.length()) == 0)) {\n        {\n            if ((str.length()) > (str.length())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strA":"str","strB":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtBinaryOperatorImpl","sourcecode":"(content.length()) == 0"},"failures":[43],"tindex":"9b8ae4a7-3e77-11e6-b596-8b36e0204609","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:446","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.nio.charset.Charset charset) throws org.apache.commons.codec.DecoderException {\n    if ((str.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"content":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[],"tindex":"9b8ae4a8-3e77-11e6-b596-a77553057ab2","method":{"position":"org.apache.commons.codec.language.bm.Lang:214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Languages.LanguageSet guessLanguages(final java.lang.String input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (input.equals(\"\")) {\n                {\n                    if (input.endsWith(input)) {\n                        {\n                            final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                            final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(org.apache.commons.codec.language.bm.Lang.this.org.apache.commons.codec.language.bm.Languages.getLanguages());\n                            for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n                                if (rule.matches(text)) {\n                                    if (rule.boolean) {\n                                        langs.retainAll(rule.java.util.Set<java.lang.String>);\n                                    } else {\n                                        langs.removeAll(rule.java.util.Set<java.lang.String>);\n                                    }\n                                } \n                            }\n                            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs);\n                            return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtBinaryOperatorImpl","sourcecode":"((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))"},"failures":[],"tindex":"9b8b0bb9-3e77-11e6-b596-fda8ca611343","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:198","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] original, java.lang.String salt) {\n    if (((salt == null) || (salt.equalsIgnoreCase(name2))) || (salt.equalsIgnoreCase(name2))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (salt == null) {\n                final java.util.Random java.util.Random = new java.util.Random();\n                final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int;\n                salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)]);\n            } else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n                throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \");\n            final char char = salt.charAt(0);\n            final char char = salt.charAt(1);\n            buffer.setCharAt(0, charZero);\n            buffer.setCharAt(1, charOne);\n            final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charZero];\n            final int int = (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charOne]) << 4;\n            final byte[] byte[] = new byte[8];\n            for (int int = 0 ; i < (key.int) ; i++) {\n                key[i] = 0;\n            }\n            for (int int = 0 ; (i < (key.int)) && (i < (original.int)) ; i++) {\n                final int int = original[i];\n                key[i] = ((byte)(iChar << 1));\n            }\n            final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.desSetKey(key);\n            final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.body(schedule, eSwap0, eSwap1);\n            final byte[] byte[] = new byte[9];\n            org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[0], b, 0);\n            org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[1], b, 4);\n            b[8] = 0;\n            int int = 2;\n            int int = 0;\n            int int = 128;\n            for ( ; i < 13 ; i++) {\n                int int = 0;\n                int int = 0;\n                for ( ; j < 6 ; j++) {\n                    c <<= 1;\n                    if (((b[y]) & u) != 0) {\n                        c |= 1;\n                    } \n                    u >>>= 1;\n                    if (u == 0) {\n                        y++;\n                        u = 128;\n                    } \n                    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n                }\n            }\n            return buffer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"salt","name2":"salt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"salt"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:125","type":"CtBinaryOperatorImpl","sourcecode":"urlsafe == null"},"failures":[44,45],"tindex":"9b8b32ca-3e77-11e6-b596-e9a6a7e56383","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:97","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object raw) throws org.apache.commons.codec.EncoderException {\n    if (raw == null) {\n        {\n            if (!(raw instanceof byte[])) {\n                throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n            } \n            return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"urlsafe":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"tindex":"9b8b32cb-3e77-11e6-b596-89b496d20f26","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:159","type":"CtMethodImpl","sourcecode":"java.lang.String getFirst3Last3(final java.lang.String name) {\n    if (name == null) {\n        {\n            final int int = name.length();\n            if (nameLength > (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                final java.lang.String java.lang.String = name.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int);\n                final java.lang.String java.lang.String = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)), nameLength);\n                return firstThree + lastThree;\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[43],"tindex":"9b8b32cc-3e77-11e6-b596-bfa78e9da831","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:486","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109],"tindex":"9b8b59dd-3e77-11e6-b596-d9f7951a71ad","method":{"position":"org.apache.commons.codec.digest.HmacUtils:174","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final java.lang.String algorithm, final byte[] key) {\n    if (!(algorithm.contains(\"[\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                throw new java.lang.IllegalArgumentException(\"Null key\");\n            } \n            try {\n                final javax.crypto.spec.SecretKeySpec javax.crypto.spec.SecretKeySpec = new javax.crypto.spec.SecretKeySpec(key , algorithm);\n                final javax.crypto.Mac javax.crypto.Mac = javax.crypto.Mac.getInstance(algorithm);\n                mac.init(keySpec);\n                return mac;\n            } catch (final java.security.NoSuchAlgorithmException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            } catch (final java.security.InvalidKeyException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"algorithm"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"9b8b59de-3e77-11e6-b596-bbbb23b917fb","method":{"position":"org.apache.commons.codec.net.QCodec:246","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if ((str == null) || ((txt.length()) == 0)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return encode(str, getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtInvocationImpl","sourcecode":"incl.contains(\" \")"},"failures":[],"tindex":"9b8b59df-3e77-11e6-b596-0d92d3bd5bad","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:334","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj.contains(\" \")) {\n        {\n            if (!(obj instanceof byte[])) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\");\n            } \n            return encode(((byte[])(obj)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"incl":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[110,111],"tindex":"9b8b80f0-3e77-11e6-b596-3390e7d3cc3c","method":{"position":"org.apache.commons.codec.language.Soundex:166","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return soundex(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START)"},"failures":[112,113,41,114],"tindex":"9b8b80f1-3e77-11e6-b596-fb49995d8c5c","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:125","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final java.lang.String keyBytes, final java.lang.String salt) {\n    if (salt == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyBytes.startsWith(salt)) {\n                {\n                    return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"keyBytes","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START":"salt"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[115],"tindex":"9b8b80f2-3e77-11e6-b596-530f95eb6e29","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        {\n            return org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(raw);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140],"tindex":"9b8b80f3-3e77-11e6-b596-3142c17b1b0a","method":{"position":"org.apache.commons.codec.binary.Base64:705","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final byte[] base64Data) {\n    if (base64Data == null) {\n        {\n            return new org.apache.commons.codec.binary.Base64().decode(base64Data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"base64Data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"9b8ba804-3e77-11e6-b596-db44b694bdb2","method":{"position":"org.apache.commons.codec.digest.DigestUtils:309","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"9b8ba805-3e77-11e6-b596-e5e69e79526d","method":{"position":"org.apache.commons.codec.digest.DigestUtils:516","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"9b8ba806-3e77-11e6-b596-19422b6f8090","method":{"position":"org.apache.commons.codec.binary.Base64:720","type":"CtMethodImpl","sourcecode":"public static java.math.BigInteger decodeInteger(final byte[] pArray) {\n    if (pArray == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.math.BigInteger(1 , org.apache.commons.codec.binary.Base64.decodeBase64(pArray));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"9b8ba807-3e77-11e6-b596-eda356070b0e","method":{"position":"org.apache.commons.codec.language.AbstractCaverphone:56","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if (source == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(source instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.AbstractCaverphone.this.encode(((java.lang.String)(source)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[],"tindex":"9b8bcf18-3e77-11e6-b596-2dfc668f4370","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:421","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEqual(final java.lang.String text1, final java.lang.String text2) {\n    if (text2 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return colognePhonetic(text1).equals(colognePhonetic(text2));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"text2"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[28,29,141,142,143],"tindex":"9b8bcf19-3e77-11e6-b596-21a94783e7bf","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:888","type":"CtMethodImpl","sourcecode":"private java.lang.String cleanInput(java.lang.String input) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (input == null) {\n                return null;\n            } \n            input = input.trim();\n            if ((input.length()) == 0) {\n                return null;\n            } \n            return input.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:180","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[28,29,32,33],"tindex":"9b8bcf1a-3e77-11e6-b596-19d2b4ac0681","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:355","type":"CtMethodImpl","sourcecode":"private int handleCH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if ((value.length()) == 0) {\n        {\n            if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n                result.append('K', 'X');\n                return index + 2;\n            } else if (conditionCH0(value, index)) {\n                result.append('K');\n                return index + 2;\n            } else if (conditionCH1(value, index)) {\n                result.append('K');\n                return index + 2;\n            } else {\n                if (index > 0) {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n                        result.append('K');\n                    } else {\n                        result.append('X', 'K');\n                    }\n                } else {\n                    result.append('X');\n                }\n                return index + 2;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"9b8bcf1b-3e77-11e6-b596-3594b27466a8","method":{"position":"org.apache.commons.codec.digest.HmacUtils:387","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (key == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[],"tindex":"9b8bf62c-3e77-11e6-b596-cd49d6e6000f","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:125","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final java.lang.String keyBytes, final java.lang.String salt) {\n    if (salt == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyBytes.startsWith(salt)) {\n                {\n                    return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"salt"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[],"tindex":"9b8bf62d-3e77-11e6-b596-a152fb094fd3","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:739","type":"CtMethodImpl","sourcecode":"private int handleX(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index == 0) {\n                result.append('S');\n                index++;\n            } else {\n                if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n                    result.append(\"KS\");\n                } \n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtInvocationImpl","sourcecode":"target.equals(element)"},"failures":[],"tindex":"9b8bf62e-3e77-11e6-b596-ad3835eff3b0","method":{"position":"org.apache.commons.codec.language.bm.Languages:169","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Languages getInstance(final java.lang.String languagesResourceName) {\n    if (languagesResourceName.equals(languagesResourceName)) {\n        {\n            if ((languagesResourceName.length()) == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>();\n                    final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(languagesResourceName);\n                    if (langIS == null) {\n                        throw new java.lang.IllegalArgumentException((\"Unable to resolve required resource: \" + languagesResourceName));\n                    } \n                    final java.util.Scanner java.util.Scanner = new java.util.Scanner(langIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                    try {\n                        boolean boolean = false;\n                        while (lsScanner.hasNextLine()) {\n                            final java.lang.String java.lang.String = lsScanner.nextLine().trim();\n                            if (inExtendedComment) {\n                                if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                                    inExtendedComment = false;\n                                } \n                            } else {\n                                if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                                    inExtendedComment = true;\n                                } else if ((line.length()) > 0) {\n                                    ls.add(line);\n                                } \n                            }\n                        }\n                    } finally {\n                        lsScanner.close();\n                    }\n                    return new org.apache.commons.codec.language.bm.Languages(java.util.Collections.unmodifiableSet(ls));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"languagesResourceName","element":"languagesResourceName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:188","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"9b8bf62f-3e77-11e6-b596-d5f7b411698c","method":{"position":"org.apache.commons.codec.language.Soundex:149","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj.matches(obj)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj.startsWith(obj)) {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n                    } \n                    return soundex(((java.lang.String)(obj)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"obj","line":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:175","type":"CtBinaryOperatorImpl","sourcecode":"b == (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[144,145,37,146,147,148,149,150,151,152,153,154,116,117,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,118,119,120,121,178,179,122,123,124,125,180,126,181,127,128,129,182,130,183,131,132,184,185,133,134,186,135,187,188,136,189,190,191,192,193,137,194,195,196,197,198,138,139,140,199],"tindex":"9b8c1d40-3e77-11e6-b596-5d3cb82ae316","method":{"position":"org.apache.commons.codec.binary.Base64:780","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected boolean isInAlphabet(final byte octet) {\n    if (octet == octet) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((octet >= 0) && (octet < (byte[].int))) && ((byte[][octet]) != (-1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"octet","org.apache.commons.codec.net.QCodec.UNDERSCORE":"octet"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[133,193],"tindex":"9b8c1d41-3e77-11e6-b596-9d961ebe9d2b","method":{"position":"org.apache.commons.codec.binary.Base64:639","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe) {\n    if (binaryData == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, urlSafe, java.lang.Integer.java.lang.Integer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:355","type":"CtBinaryOperatorImpl","sourcecode":"result >= 0"},"failures":[],"tindex":"9b8c1d42-3e77-11e6-b596-13acfb907f11","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:259","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected char[] copyData(final int start, final int length) {\n    if (length >= 0) {\n        {\n            final char[] char[] = new char[length];\n            java.lang.System.arraycopy(char[], (((char[].int) - (org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.this.int)) + start), newData, 0, length);\n            return newData;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[193],"tindex":"9b8c1d43-3e77-11e6-b596-eb1e562d73ae","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:349","type":"CtMethodImpl","sourcecode":"public java.lang.String encodeToString(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newStringUtf8(encode(pArray));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"9b8c1d44-3e77-11e6-b596-b532ffa72ba2","method":{"position":"org.apache.commons.codec.language.bm.Lang:129","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang loadFromResource(final java.lang.String languageRulesResourceName, final org.apache.commons.codec.language.bm.Languages languages) {\n    if (languageRulesResourceName == null) {\n        {\n            if (languageRulesResourceName.startsWith(languageRulesResourceName)) {\n                {\n                    final java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Lang.LangRule>();\n                    final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.Class.getClassLoader().getResourceAsStream(languageRulesResourceName);\n                    if (lRulesIS == null) {\n                        throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)));\n                    } \n                    final java.util.Scanner java.util.Scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                    try {\n                        boolean boolean = false;\n                        while (scanner.hasNextLine()) {\n                            final java.lang.String java.lang.String = scanner.nextLine();\n                            java.lang.String java.lang.String = rawLine;\n                            if (inExtendedComment) {\n                                if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                                    inExtendedComment = false;\n                                } \n                            } else {\n                                if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                                    inExtendedComment = true;\n                                } else {\n                                    final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                                    if (cmtI >= 0) {\n                                        line = line.substring(0, cmtI);\n                                    } \n                                    line = line.trim();\n                                    if ((line.length()) == 0) {\n                                        continue;\n                                    } \n                                    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                                    if ((parts.int) != 3) {\n                                        throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                                    } \n                                    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n                                    final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n                                    final boolean boolean = parts[2].equals(\"true\");\n                                    rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n                                }\n                            }\n                        }\n                    } finally {\n                        scanner.close();\n                    }\n                    return new org.apache.commons.codec.language.bm.Lang(rules , languages);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"languageRulesResourceName","line":"languageRulesResourceName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:310","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[200],"tindex":"9b8c4455-3e77-11e6-b596-f73413066344","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:412","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n            } \n            return encode(((java.lang.String)(obj)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[201],"tindex":"9b8c4456-3e77-11e6-b596-293dede00c3c","method":{"position":"org.apache.commons.codec.net.URLCodec:243","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str.equalsIgnoreCase(str)) {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return encode(str, getDefaultCharset());\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"str","name1":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[],"tindex":"9b8c4457-3e77-11e6-b596-8d90ef27ee63","method":{"position":"org.apache.commons.codec.digest.DigestUtils:425","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[110],"tindex":"9b8c4458-3e77-11e6-b596-9975903ece15","method":{"position":"org.apache.commons.codec.language.Soundex:131","type":"CtMethodImpl","sourcecode":"public int difference(final java.lang.String s1, final java.lang.String s2) throws org.apache.commons.codec.EncoderException {\n    if (s1 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            return org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.language.Soundex.this, s1, s2);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"s1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:665","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")"},"failures":[28,29,32,33],"tindex":"9b8c4459-3e77-11e6-b596-1db41fcadc20","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:647","type":"CtMethodImpl","sourcecode":"private int handleSC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 2))) == 'H') {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n                        result.append(\"X\", \"SK\");\n                    } else {\n                        result.append(\"SK\");\n                    }\n                } else {\n                    if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n                        result.append('X', 'S');\n                    } else {\n                        result.append('X');\n                    }\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                result.append('S');\n            } else {\n                result.append(\"SK\");\n            }\n            return index + 3;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:347","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,38,184,218,191,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235],"tindex":"9b8c6b6a-3e77-11e6-b596-f7dcced887b3","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:311","type":"CtMethodImpl","sourcecode":"protected static boolean isWhiteSpace(final byte byteToCheck) {\n    if (byteToCheck == byteToCheck) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            switch (byteToCheck) {\n                case ' ' :\n                case '\\n' :\n                case '\\r' :\n                case '\\t' :\n                    return true;\n                default :\n                    return false;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"byteToCheck","pad":"byteToCheck"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:392","type":"CtBinaryOperatorImpl","sourcecode":"(body.startsWith(\"|\")) || (body.endsWith(\"|\"))"},"failures":[],"tindex":"9b8c6b6b-3e77-11e6-b596-454d0f9fcb14","method":{"position":"org.apache.commons.codec.digest.HmacUtils:295","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if ((key.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"body":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtBinaryOperatorImpl","sourcecode":"ascii == null"},"failures":[],"tindex":"9b8c6b6c-3e77-11e6-b596-33c65d70e5d4","method":{"position":"org.apache.commons.codec.digest.DigestUtils:210","type":"CtMethodImpl","sourcecode":"public static byte[] md2(final java.lang.String data) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.md2(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:68","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX)"},"failures":[],"tindex":"9b8c6b6d-3e77-11e6-b596-1589aff86e6f","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:104","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final java.lang.String keyBytes) {\n    if (keyBytes.startsWith(keyBytes)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(keyBytes, 0, 5, \"CHORE\")) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX":"keyBytes","salt":"keyBytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:198","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"9b8c6b6e-3e77-11e6-b596-7384471ff192","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:527","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj == null) {\n        {\n            if (obj == null) {\n                {\n                    if (obj == null) {\n                        return null;\n                    } else if (obj instanceof byte[]) {\n                        return decode(((byte[])(obj)));\n                    } else if (obj instanceof java.lang.String) {\n                        return decode(((java.lang.String)(obj)));\n                    } else {\n                        throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\")\"))"},"failures":[],"tindex":"9b8c927f-3e77-11e6-b596-13e75c2ad3b0","method":{"position":"org.apache.commons.codec.language.Nysiis:210","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj.endsWith(\")\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[25,26],"tindex":"9b8c9280-3e77-11e6-b596-29a9e91b75d6","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:181","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] original) {\n    if (original == null) {\n        {\n            return org.apache.commons.codec.digest.UnixCrypt.crypt(original, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"original"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:447","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"9b8c9281-3e77-11e6-b596-4778638912e7","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:135","type":"CtMethodImpl","sourcecode":"public void processNextReplacement(final java.lang.String replacement, final boolean forceAppend) {\n    if (replacement == null) {\n        {\n            if (forceAppend) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (replacement == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            final boolean boolean = (((java.lang.String) == null) || (!(java.lang.String.endsWith(replacement)))) || forceAppend;\n                            if (append && ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int))) {\n                                java.lang.StringBuilder.append(replacement);\n                                if ((java.lang.StringBuilder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n                                    java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length());\n                                } \n                                java.lang.String = null;\n                            } \n                            java.lang.String = replacement;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"replacement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[],"tindex":"9b8c9282-3e77-11e6-b596-39065e856998","method":{"position":"org.apache.commons.codec.binary.Hex:295","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if (object.endsWith(object)) {\n        {\n            try {\n                final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n                return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n            } catch (final java.lang.ClassCastException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"object","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:272","type":"CtBinaryOperatorImpl","sourcecode":"cmtI >= 0"},"failures":[],"tindex":"9b8c9283-3e77-11e6-b596-dd7c1ab96a05","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:240","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected char[] copyData(final int start, final int length) {\n    if (length >= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (length == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final char[] char[] = new char[length];\n                    java.lang.System.arraycopy(char[], start, newData, 0, length);\n                    return newData;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmtI":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"9b8cb994-3e77-11e6-b596-9bbdac0df2a0","method":{"position":"org.apache.commons.codec.language.bm.Lang:129","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang loadFromResource(final java.lang.String languageRulesResourceName, final org.apache.commons.codec.language.bm.Languages languages) {\n    if (languageRulesResourceName == null) {\n        {\n            if (languageRulesResourceName.startsWith(languageRulesResourceName)) {\n                {\n                    final java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Lang.LangRule>();\n                    final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.Class.getClassLoader().getResourceAsStream(languageRulesResourceName);\n                    if (lRulesIS == null) {\n                        throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)));\n                    } \n                    final java.util.Scanner java.util.Scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                    try {\n                        boolean boolean = false;\n                        while (scanner.hasNextLine()) {\n                            final java.lang.String java.lang.String = scanner.nextLine();\n                            java.lang.String java.lang.String = rawLine;\n                            if (inExtendedComment) {\n                                if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                                    inExtendedComment = false;\n                                } \n                            } else {\n                                if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                                    inExtendedComment = true;\n                                } else {\n                                    final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                                    if (cmtI >= 0) {\n                                        line = line.substring(0, cmtI);\n                                    } \n                                    line = line.trim();\n                                    if ((line.length()) == 0) {\n                                        continue;\n                                    } \n                                    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                                    if ((parts.int) != 3) {\n                                        throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                                    } \n                                    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n                                    final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n                                    final boolean boolean = parts[2].equals(\"true\");\n                                    rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n                                }\n                            }\n                        }\n                    } finally {\n                        scanner.close();\n                    }\n                    return new org.apache.commons.codec.language.bm.Lang(rules , languages);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"languageRulesResourceName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtBinaryOperatorImpl","sourcecode":"(len & 1) != 0"},"failures":[],"tindex":"9b8cb995-3e77-11e6-b596-25b59278f4ea","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:75","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void mark(final int readLimit) {\n    if ((readLimit & 1) != 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"readLimit"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[236],"tindex":"9b8cb996-3e77-11e6-b596-c7b72869cd1d","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:596","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException {\n    if (str.startsWith(str)) {\n        {\n            if (str == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.UnsupportedEncodingException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[28,29,32,33,34],"tindex":"9b8cb997-3e77-11e6-b596-a31c81063f54","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:758","type":"CtMethodImpl","sourcecode":"private int handleZ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (value == null) {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                result.append('J');\n                index += 2;\n            } else {\n                if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n                    result.append(\"S\", \"TS\");\n                } else {\n                    result.append('S');\n                }\n                index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtBinaryOperatorImpl","sourcecode":"ascii == null"},"failures":[],"tindex":"9b8ce0a8-3e77-11e6-b596-01de5386c641","method":{"position":"org.apache.commons.codec.digest.DigestUtils:437","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final java.lang.String data) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[46,47,48,49,50,51,52,53,54,55,56,237,238,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,239,74,75,76,77,78,79,80,81,82,83,85,86,87],"tindex":"9b8ce0a9-3e77-11e6-b596-177647c10115","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:384","type":"CtMethodImpl","sourcecode":"java.lang.String removeDoubleConsonants(final java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.String java.lang.String = name.toUpperCase();\n            for (final java.lang.String java.lang.String : org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String[]) {\n                if (replacedName.contains(dc)) {\n                    final java.lang.String java.lang.String = dc.substring(0, 1);\n                    replacedName = replacedName.replace(dc, singleLetter);\n                } \n            }\n            return replacedName;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtBinaryOperatorImpl","sourcecode":"i > name2Size"},"failures":[],"tindex":"9b8ce0aa-3e77-11e6-b596-1794b9635d5b","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:676","type":"CtMethodImpl","sourcecode":"private int handleT(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index > index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n                result.append('X');\n                index += 3;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n                result.append('X');\n                index += 3;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n                if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                    result.append('T');\n                } else {\n                    result.append('0', 'T');\n                }\n                index += 2;\n            } else {\n                result.append('T');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"index","name2Size":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"9b8ce0ab-3e77-11e6-b596-7d950877effb","method":{"position":"org.apache.commons.codec.net.URLCodec:269","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if ((str == null) || ((txt.length()) == 0)) {\n        {\n            if ((str.length()) > (str.length())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:567","type":"CtVariableReadImpl","sourcecode":"startsWith"},"failures":[],"tindex":"9b8ce0ac-3e77-11e6-b596-95f785ecc70c","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startsWith":"concat"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:828","type":"CtBinaryOperatorImpl","sourcecode":"(index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))"},"failures":[28,29,32,33,34],"tindex":"9b8d07bd-3e77-11e6-b596-4d299aaba138","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:498","type":"CtMethodImpl","sourcecode":"private int handleH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n        {\n            if (((index == 0) || (isVowel(charAt(value, (index - 1))))) && (isVowel(charAt(value, (index + 1))))) {\n                result.append('H');\n                index += 2;\n            } else {\n                index++;\n            }\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:70","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX)"},"failures":[240,241,242,243,200,244],"tindex":"9b8d07be-3e77-11e6-b596-dd7c1f566a18","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source.startsWith(source)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return null;\n            } \n            return soundex(source, false)[0];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"source","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[245,246,247,248,249,240,241,242,250,251,243,200,244],"tindex":"9b8d07bf-3e77-11e6-b596-5b8fc27dcb39","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:331","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:395","type":"CtBinaryOperatorImpl","sourcecode":"(i & 1) != 0"},"failures":[28,29,31,32,33,34],"tindex":"9b8d07c0-3e77-11e6-b596-9fde08e7dc93","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:550","type":"CtMethodImpl","sourcecode":"private int handleL(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((index & 1) != 0) {\n        {\n            if ((charAt(value, (index + 1))) == 'L') {\n                if (conditionL0(value, index)) {\n                    result.appendPrimary('L');\n                } else {\n                    result.append('L');\n                }\n                index += 2;\n            } else {\n                index++;\n                result.append('L');\n            }\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[252],"tindex":"9b8d07c1-3e77-11e6-b596-8f17d8b9dace","method":{"position":"org.apache.commons.codec.net.URLCodec:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] bytes) {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.net.URLCodec.encodeUrl(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet, bytes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"9b8d07c2-3e77-11e6-b596-e79874d32c61","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:596","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException {\n    if (str.startsWith(str)) {\n        {\n            if (str == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.UnsupportedEncodingException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"str","line":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:219","type":"CtInvocationImpl","sourcecode":"rule.matches(text)"},"failures":[],"tindex":"9b8d2ed3-3e77-11e6-b596-cbbd957120ac","method":{"position":"org.apache.commons.codec.language.Soundex:149","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj.matches(obj)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj.startsWith(obj)) {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n                    } \n                    return soundex(((java.lang.String)(obj)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rule":"obj","text":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270],"tindex":"9b8d2ed4-3e77-11e6-b596-8ba8aa872f3a","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:273","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeQuotedPrintable(java.util.BitSet printable, final byte[] bytes, boolean strict) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            if (printable == null) {\n                printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            if (strict) {\n                int int = 1;\n                for (int int = 0 ; i < ((bytes.int) - 3) ; i++) {\n                    int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n                    if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n                        pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n                    } else {\n                        org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n                        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        pos = 1;\n                    }\n                }\n                int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.int) - 3), bytes);\n                boolean boolean = (!(printable.get(b))) || ((org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)) && (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 5)));\n                pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n                if (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 2)) {\n                    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                } \n                for (int int = (bytes.int) - 2 ; i < (bytes.int) ; i++) {\n                    b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n                    encode = (!(printable.get(b))) || ((i > ((bytes.int) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)));\n                    org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n                }\n            } else {\n                for (final byte byte : bytes) {\n                    int int = c;\n                    if (b < 0) {\n                        b = 256 + b;\n                    } \n                    if (printable.get(b)) {\n                        buffer.write(b);\n                    } else {\n                        org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n                    }\n                }\n            }\n            return buffer.toByteArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"9b8d2ed5-3e77-11e6-b596-e576bc3460e1","method":{"position":"org.apache.commons.codec.digest.HmacUtils:387","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (key == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"key","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[271,272],"tindex":"9b8d2ed6-3e77-11e6-b596-4308e6248a8e","method":{"position":"org.apache.commons.codec.digest.DigestUtils:295","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Hex(final byte[] data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[253,254,255,256,257],"tindex":"9b8d2ed7-3e77-11e6-b596-f58f8d3cae1f","method":{"position":"org.apache.commons.codec.net.QCodec:153","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            final byte[] byte[] = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet, bytes);\n            if (org.apache.commons.codec.net.QCodec.this.boolean) {\n                for (int int = 0 ; i < (data.int) ; i++) {\n                    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                    } \n                }\n            } \n            return data;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"9b8d55e8-3e77-11e6-b596-090945b03740","method":{"position":"org.apache.commons.codec.language.bm.Rule:253","type":"CtMethodImpl","sourcecode":"private static java.util.Scanner createScanner(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (((lang.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        {\n            if (lang == null) {\n                {\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.createResourceName(nameType, rt, lang);\n                    final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName);\n                    if (rulesIS == null) {\n                        throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n                    } \n                    return new java.util.Scanner(rulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"lang"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START)"},"failures":[273,274,275,276,277,278,279,280,281,282,283,284,110,285,286,287,288,289,290,291,292,293,294,295],"tindex":"9b8d55e9-3e77-11e6-b596-854926b4006a","method":{"position":"org.apache.commons.codec.language.Soundex:183","type":"CtMethodImpl","sourcecode":"private char getMappingCode(final java.lang.String str, final int index) {\n    if (str.startsWith(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char char = org.apache.commons.codec.language.Soundex.this.map(str.charAt(index));\n            if ((index > 1) && (mappedChar != '0')) {\n                final char char = str.charAt((index - 1));\n                if (('H' == hwChar) || ('W' == hwChar)) {\n                    final char char = str.charAt((index - 2));\n                    final char char = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n                    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n                        return 0;\n                    } \n                } \n            } \n            return mappedChar;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"str","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[],"tindex":"9b8d55ea-3e77-11e6-b596-e7a176431fc6","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:92","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) throws org.apache.commons.codec.EncoderException {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(source, 0, 2, \"MC\")) {\n        {\n            if (source == null) {\n                return null;\n            } \n            return org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.encode(source);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"9b8d55eb-3e77-11e6-b596-2f405f3d8720","method":{"position":"org.apache.commons.codec.language.bm.Lang:214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Languages.LanguageSet guessLanguages(final java.lang.String input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (input.equals(\"\")) {\n                {\n                    if (input.endsWith(input)) {\n                        {\n                            final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                            final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(org.apache.commons.codec.language.bm.Lang.this.org.apache.commons.codec.language.bm.Languages.getLanguages());\n                            for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n                                if (rule.matches(text)) {\n                                    if (rule.boolean) {\n                                        langs.retainAll(rule.java.util.Set<java.lang.String>);\n                                    } else {\n                                        langs.removeAll(rule.java.util.Set<java.lang.String>);\n                                    }\n                                } \n                            }\n                            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs);\n                            return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[296],"tindex":"9b8d7cfc-3e77-11e6-b596-257971b5a0cb","method":{"position":"org.apache.commons.codec.net.QCodec:225","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if (charset.equalsIgnoreCase(charset)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return encodeText(str, charset);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"charset","name1":"charset"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"9b8d7cfd-3e77-11e6-b596-1da3d7d7b49d","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:83","type":"CtMethodImpl","sourcecode":"java.lang.String cleanName(final java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = name.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" };\n            for (final java.lang.String java.lang.String : charsToTrim) {\n                upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            }\n            upperName = removeAccents(upperName);\n            upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            return upperName;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:71","type":"CtBinaryOperatorImpl","sourcecode":"cs1 == cs2"},"failures":[2,3,4,5,6,9,10,11,12,13,16,17,18,19],"tindex":"9b8d7cfe-3e77-11e6-b596-a33dd1d9fb2e","method":{"position":"org.apache.commons.codec.language.bm.Rule:571","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == input) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257942435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs1":"input","cs2":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
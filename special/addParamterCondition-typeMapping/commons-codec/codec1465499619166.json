{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":56,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":47,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":336,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":198,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":146,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":342,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":64,"org.apache.commons.codec.language.Caverphone1Test.testEncodeEmpty":60,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":253,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":251,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":252,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeNull":225,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":282,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":254,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":270,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":329,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":42,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":112,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":323,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":169,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":12,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":38,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":208,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":331,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":186,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully":324,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":242,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":48,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":135,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":185,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":205,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":264,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":350,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":266,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":230,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":265,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":229,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":290,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":291,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":335,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":353,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":295,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":151,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":228,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":351,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":292,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":37,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":150,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":293,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":8,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":232,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":312,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":201,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":209,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":158,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":14,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":278,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":304,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":240,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":366,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":241,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":178,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":200,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":236,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":287,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":41,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":321,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":168,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":361,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":192,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":65,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":57,"org.apache.commons.codec.language.SoundexTest.testB650":250,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8":206,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":340,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":147,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":203,"org.apache.commons.codec.language.SoundexTest.testNewInstance":258,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":332,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":354,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":134,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":175,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":176,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":77,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":346,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":45,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":130,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":159,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":363,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":101,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":75,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":11,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":63,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":307,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":311,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":99,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":298,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":328,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":174,"org.apache.commons.codec.language.MetaphoneTest.testEncodeNull":276,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":358,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":109,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":234,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":145,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":93,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":210,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":338,"org.apache.commons.codec.binary.Base64Test.testUUID":67,"org.apache.commons.codec.binary.Base64Test.testSingletons":303,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":143,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":315,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":69,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":309,"org.apache.commons.codec.binary.Base64Test.testPairs":289,"org.apache.commons.codec.binary.Base64Test.testConstructors":204,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":314,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":137,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":144,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":325,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":46,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":214,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":82,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":213,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":259,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":121,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":26,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":283,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":330,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":127,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":88,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":195,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":231,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":326,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":4,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":301,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":44,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":96,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":285,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":302,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":34,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":233,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":35,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8":92,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":188,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":334,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":100,"org.apache.commons.codec.binary.HexTest.testEncodeEmpty":28,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":89,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":260,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":246,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":85,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":355,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":196,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":115,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":356,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":16,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":79,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le":165,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":152,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":207,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName":277,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":368,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":344,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":21,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":308,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":78,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":86,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":345,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":352,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":199,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":223,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":18,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":167,"org.apache.commons.codec.binary.HexTest.testCustomCharset":24,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":341,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":360,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":187,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":320,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":131,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":319,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":367,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":62,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":17,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":120,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":119,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":154,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":189,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":221,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":87,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":124,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":81,"org.apache.commons.codec.binary.Base64Test.testTriplets":286,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":94,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":202,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":104,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":108,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":102,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":105,"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence":243,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":129,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":224,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":179,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":156,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":227,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":343,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":80,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":74,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeNull":274,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":123,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":244,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1":162,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":215,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":122,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":288,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":166,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":212,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":106,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":194,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":339,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":263,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":261,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":58,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":262,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":15,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":183,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":20,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":9,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":170,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":279,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":5,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":132,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":133,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":180,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":211,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":235,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":29,"org.apache.commons.codec.language.Caverphone2Test.testLocaleIndependence":220,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":299,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":83,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":155,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":281,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":177,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":318,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":181,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":103,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":255,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":359,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":153,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":90,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":245,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":117,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":118,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":51,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":76,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":171,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":327,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":322,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":97,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":237,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":348,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":280,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":25,"org.apache.commons.codec.language.MetaphoneTest.testWhy":33,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":95,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":317,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":349,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":149,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":268,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":3,"org.apache.commons.codec.language.MetaphoneTest.testTCH":32,"org.apache.commons.codec.binary.BaseNCodecTest.testIsWhiteSpace":182,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":197,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":306,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":36,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":247,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":248,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":249,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":310,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":40,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":71,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":111,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":39,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing":271,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":294,"org.apache.commons.codec.binary.Base64Test.testBase64":70,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":116,"org.apache.commons.codec.language.Caverphone1Test.testEncodeNull":59,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":13,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":173,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved":365,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":91,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":296,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":191,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":55,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":114,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":216,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":6,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":113,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":27,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeEmpty":275,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":10,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":125,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":136,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":72,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":190,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":84,"org.apache.commons.codec.binary.Base64Test.testCodec112":300,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":107,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":362,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":128,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":43,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":142,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":53,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":66,"org.apache.commons.codec.language.Caverphone1Test.testLocaleIndependence":61,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":313,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":357,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":160,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":49,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":164,"org.apache.commons.codec.binary.Base64Test.testCodec68":305,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":239,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":256,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":30,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":267,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":23,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":157,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":222,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":238,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be":284,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":73,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":140,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing":269,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":139,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":333,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NINO_NoChange":364,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":184,"org.apache.commons.codec.language.Caverphone2Test.testEncodeNull":218,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":126,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":316,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":217,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":0,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":68,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":50,"org.apache.commons.codec.language.SoundexTest.testDifference":257,"org.apache.commons.codec.language.Caverphone2Test.testEncodeEmpty":219,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":148,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":193,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":138,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":141,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange":347,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":110,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii":163,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":172,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":337,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":273,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":297,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":226,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":272,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16":161},"transformations":[{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[0],"tindex":"45b83f9a-2e76-11e6-bbca-8b1f169f9438","method":{"position":"org.apache.commons.codec.digest.HmacUtils:708","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:392","type":"CtBinaryOperatorImpl","sourcecode":"(body.startsWith(\"|\")) || (body.endsWith(\"|\"))"},"failures":[],"tindex":"45b902eb-2e76-11e6-bbca-0947d1aeeb59","method":{"position":"org.apache.commons.codec.language.bm.Rule:198","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            if (!(input.matches(((\"^[\" + input) + \"]{2,}$\")))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(input.endsWith(\")\"))) {\n                        {\n                            if ((input.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n                                {\n                                    return true;\n                                }\n                            } else {\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"body":"input"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:260","type":"CtVariableReadImpl","sourcecode":"inMultilineComment"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,0,23,24,25,26,27,28,29],"tindex":"45b902ec-2e76-11e6-bbca-f7f999db18b9","method":{"position":"org.apache.commons.codec.binary.Hex:124","type":"CtMethodImpl","sourcecode":"public static char[] encodeHex(final byte[] data, final boolean toLowerCase) {\n    if (toLowerCase) {\n        {\n            if (toLowerCase) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHex(data, (toLowerCase ? org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.char[] : org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.char[]));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inMultilineComment":"toLowerCase"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:440","type":"CtBinaryOperatorImpl","sourcecode":"inAvail < 0"},"failures":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"tindex":"45b929fd-2e76-11e6-bbca-f3790e154dfd","method":{"position":"org.apache.commons.codec.language.Metaphone:370","type":"CtMethodImpl","sourcecode":"private boolean isLastChar(final int wdsz, final int n) {\n    if (wdsz < 0) {\n        {\n            return (n + 1) == wdsz;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inAvail":"wdsz"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[54,55,56,57,58],"tindex":"45b9510e-2e76-11e6-bbca-b523c16e73ff","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:216","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) {\n    if ((value.length()) == 0) {\n        {\n            return doubleMetaphone(value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:218","type":"CtBinaryOperatorImpl","sourcecode":"((name1.length()) == 1) || ((name2.length()) == 1)"},"failures":[59,60,61],"tindex":"45b9510f-2e76-11e6-bbca-413e71eaef4c","method":{"position":"org.apache.commons.codec.language.Caverphone1:45","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (((source.length()) == 1) || ((source.length()) == 1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = source;\n            if ((txt == null) || ((txt.length()) == 0)) {\n                return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String;\n            } \n            txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            txt = txt.replaceAll(\"[^a-z]\", \"\");\n            txt = txt.replaceAll(\"^cough\", \"cou2f\");\n            txt = txt.replaceAll(\"^rough\", \"rou2f\");\n            txt = txt.replaceAll(\"^tough\", \"tou2f\");\n            txt = txt.replaceAll(\"^enough\", \"enou2f\");\n            txt = txt.replaceAll(\"^gn\", \"2n\");\n            txt = txt.replaceAll(\"mb$\", \"m2\");\n            txt = txt.replaceAll(\"cq\", \"2q\");\n            txt = txt.replaceAll(\"ci\", \"si\");\n            txt = txt.replaceAll(\"ce\", \"se\");\n            txt = txt.replaceAll(\"cy\", \"sy\");\n            txt = txt.replaceAll(\"tch\", \"2ch\");\n            txt = txt.replaceAll(\"c\", \"k\");\n            txt = txt.replaceAll(\"q\", \"k\");\n            txt = txt.replaceAll(\"x\", \"k\");\n            txt = txt.replaceAll(\"v\", \"f\");\n            txt = txt.replaceAll(\"dg\", \"2g\");\n            txt = txt.replaceAll(\"tio\", \"sio\");\n            txt = txt.replaceAll(\"tia\", \"sia\");\n            txt = txt.replaceAll(\"d\", \"t\");\n            txt = txt.replaceAll(\"ph\", \"fh\");\n            txt = txt.replaceAll(\"b\", \"p\");\n            txt = txt.replaceAll(\"sh\", \"s2\");\n            txt = txt.replaceAll(\"z\", \"s\");\n            txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n            txt = txt.replaceAll(\"[aeiou]\", \"3\");\n            txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n            txt = txt.replaceAll(\"gh\", \"22\");\n            txt = txt.replaceAll(\"g\", \"k\");\n            txt = txt.replaceAll(\"s+\", \"S\");\n            txt = txt.replaceAll(\"t+\", \"T\");\n            txt = txt.replaceAll(\"p+\", \"P\");\n            txt = txt.replaceAll(\"k+\", \"K\");\n            txt = txt.replaceAll(\"f+\", \"F\");\n            txt = txt.replaceAll(\"m+\", \"M\");\n            txt = txt.replaceAll(\"n+\", \"N\");\n            txt = txt.replaceAll(\"w3\", \"W3\");\n            txt = txt.replaceAll(\"wy\", \"Wy\");\n            txt = txt.replaceAll(\"wh3\", \"Wh3\");\n            txt = txt.replaceAll(\"why\", \"Why\");\n            txt = txt.replaceAll(\"w\", \"2\");\n            txt = txt.replaceAll(\"^h\", \"A\");\n            txt = txt.replaceAll(\"h\", \"2\");\n            txt = txt.replaceAll(\"r3\", \"R3\");\n            txt = txt.replaceAll(\"ry\", \"Ry\");\n            txt = txt.replaceAll(\"r\", \"2\");\n            txt = txt.replaceAll(\"l3\", \"L3\");\n            txt = txt.replaceAll(\"ly\", \"Ly\");\n            txt = txt.replaceAll(\"l\", \"2\");\n            txt = txt.replaceAll(\"j\", \"y\");\n            txt = txt.replaceAll(\"y3\", \"Y3\");\n            txt = txt.replaceAll(\"y\", \"2\");\n            txt = txt.replaceAll(\"2\", \"\");\n            txt = txt.replaceAll(\"3\", \"\");\n            txt = txt + (org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String);\n            return txt.substring(0, org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"source","name1":"source"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:111","type":"CtBinaryOperatorImpl","sourcecode":"(es1 == null) || (es2 == null)"},"failures":[],"tindex":"45b9c540-2e76-11e6-bbca-23f0f21908b3","method":{"position":"org.apache.commons.codec.language.Caverphone:101","type":"CtMethodImpl","sourcecode":"public boolean isCaverphoneEqual(final java.lang.String str1, final java.lang.String str2) {\n    if ((str1 == null) || (str2 == null)) {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.caverphone(str1).equals(org.apache.commons.codec.language.Caverphone.this.caverphone(str2));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"es1":"str1","es2":"str2"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\"]\"))"},"failures":[],"tindex":"45b9c541-2e76-11e6-bbca-cd5435cc8b37","method":{"position":"org.apache.commons.codec.language.bm.Rule:319","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.codec.language.bm.Rule> getInstance(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if ((lang.length()) > (lang.length())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(lang.endsWith(\"]\"))) {\n                {\n                    return org.apache.commons.codec.language.bm.Rule.getInstance(nameType, rt, org.apache.commons.codec.language.bm.Languages.LanguageSet.from(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(lang))));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"lang"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[9],"tindex":"45b9ec52-2e76-11e6-bbca-c3152b8fb3c6","method":{"position":"org.apache.commons.codec.digest.DigestUtils:531","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final java.lang.String data) {\n    if (data.endsWith(data)) {\n        {\n            if ((data == null) || (data == null)) {\n                {\n                    if (data == null) {\n                        {\n                            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:336","type":"CtBinaryOperatorImpl","sourcecode":"(strA.length()) > (strB.length())"},"failures":[],"tindex":"45ba1363-2e76-11e6-bbca-ebc91c9ab4ab","method":{"position":"org.apache.commons.codec.language.bm.Rule:319","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.codec.language.bm.Rule> getInstance(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if ((lang.length()) > (lang.length())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(lang.endsWith(\"]\"))) {\n                {\n                    return org.apache.commons.codec.language.bm.Rule.getInstance(nameType, rt, org.apache.commons.codec.language.bm.Languages.LanguageSet.from(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(lang))));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strA":"lang","strB":"lang"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[62,2,3,63,5,6,7,8,9,10,11,12,13,14,15,64,17,18,19,20,65,21,0,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,23,25,26,89,90,91,92,93,94,95,96,97,98,99,100,101],"tindex":"45ba3a74-2e76-11e6-bbca-5df65facd3ac","method":{"position":"org.apache.commons.codec.binary.StringUtils:234","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf8(final java.lang.String string) {\n    if (string == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"string"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],"tindex":"45ba3a75-2e76-11e6-bbca-6bbdbd6f81af","method":{"position":"org.apache.commons.codec.language.bm.Languages:165","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Languages getInstance(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Languages>.get(nameType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:53","type":"CtBinaryOperatorImpl","sourcecode":"count == len"},"failures":[102,103,104,105,106,107,110,111,112,113,115,116,119,120,122,127],"tindex":"45ba6186-2e76-11e6-bbca-5bbda335e39c","method":{"position":"org.apache.commons.codec.language.bm.Rule:698","type":"CtMethodImpl","sourcecode":"public boolean patternAndContextMatches(final java.lang.CharSequence input, final int i) {\n    if (i == i) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (i < 0) {\n                throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n            } \n            final int int = org.apache.commons.codec.language.bm.Rule.this.java.lang.String.length();\n            final int int = i + patternLength;\n            if (ipl > (input.length())) {\n                return false;\n            } \n            if (!(input.subSequence(i, ipl).equals(org.apache.commons.codec.language.bm.Rule.this.java.lang.String))) {\n                return false;\n            } else if (!(org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(ipl, input.length())))) {\n                return false;\n            } \n            return org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(0, i));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"i","count":"i"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\")\"))"},"failures":[],"tindex":"45ba8897-2e76-11e6-bbca-bbce916c5eb2","method":{"position":"org.apache.commons.codec.language.bm.Rule:198","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            if (!(input.matches(((\"^[\" + input) + \"]{2,}$\")))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(input.endsWith(\")\"))) {\n                        {\n                            if ((input.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n                                {\n                                    return true;\n                                }\n                            } else {\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:392","type":"CtBinaryOperatorImpl","sourcecode":"(body.startsWith(\"|\")) || (body.endsWith(\"|\"))"},"failures":[],"tindex":"45baafa8-2e76-11e6-bbca-5727e2744465","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:428","type":"CtMethodImpl","sourcecode":"private java.lang.String preprocess(java.lang.String text) {\n    if ((text.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            text = text.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final char[] char[] = text.toCharArray();\n            for (int int = 0 ; index < (chrs.int) ; index++) {\n                if ((chrs[index]) > 'Z') {\n                    for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n                        if ((chrs[index]) == (element[0])) {\n                            chrs[index] = element[1];\n                            break;\n                        } \n                    }\n                } \n            }\n            return new java.lang.String(chrs);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"body":"text"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:225","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"45baafa9-2e76-11e6-bbca-f3a68d601fd5","method":{"position":"org.apache.commons.codec.binary.StringUtils:180","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16(final java.lang.String string) {\n    if ((string.length()) == 0) {\n        {\n            if (string == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"string"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[128,129],"tindex":"45bad6ba-2e76-11e6-bbca-0f44eceec562","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:191","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(final long n) throws java.io.IOException {\n    if (n < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n < 0) {\n                throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n            } \n            final byte[] byte[] = new byte[512];\n            long long = n;\n            while (todo > 0) {\n                int int = ((int)(java.lang.Math.min(b.int, todo)));\n                len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n                if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n                    break;\n                } \n                todo -= len;\n            }\n            return n - todo;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:506","type":"CtBinaryOperatorImpl","sourcecode":"startsWith && endsWith"},"failures":[],"tindex":"45bad6bb-2e76-11e6-bbca-07cf2a01cc16","method":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:49","type":"CtMethodImpl","sourcecode":"static boolean regionMatches(final java.lang.CharSequence cs, final boolean ignoreCase, final int thisStart, final java.lang.CharSequence substring, final int start, final int length) {\n    if (ignoreCase && ignoreCase) {\n        {\n            if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n                return ((java.lang.String)(cs)).regionMatches(ignoreCase, thisStart, ((java.lang.String)(substring)), start, length);\n            } \n            int int = thisStart;\n            int int = start;\n            int int = length;\n            while ((tmpLen--) > 0) {\n                char char = cs.charAt((index1++));\n                char char = substring.charAt((index2++));\n                if (c1 == c2) {\n                    continue;\n                } \n                if (!ignoreCase) {\n                    return false;\n                } \n                if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"endsWith":"ignoreCase","startsWith":"ignoreCase"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:270","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[62,2,3,63,5,6,7,8,9,10,11,12,13,14,15,64,17,18,19,20,65,21,0,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,66,67,68,69,70,71,72,73,74,75,76,77,78,156,157,79,80,81,82,83,84,85,86,87,128,158,159,160,88,23,25,26,89,90,91,161,92,162,163,164,165,93,94,95,166,167,96,97,98,99,100,129,168,169,170,101],"tindex":"45bafdcc-2e76-11e6-bbca-d50ba9001d14","method":{"position":"org.apache.commons.codec.binary.StringUtils:92","type":"CtMethodImpl","sourcecode":"private static byte[] getBytes(final java.lang.String string, final java.nio.charset.Charset charset) {\n    if (string == null) {\n        {\n            if (string == null) {\n                return null;\n            } \n            return string.getBytes(charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"string"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:195","type":"CtBinaryOperatorImpl","sourcecode":"current != 0"},"failures":[171,172,173,174,175,176,177,56],"tindex":"45bb24dd-2e76-11e6-bbca-6dcf99650660","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:951","type":"CtMethodImpl","sourcecode":"public void append(final char primary, final char alternate) {\n    if (primary != 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendPrimary(primary);\n            appendAlternate(alternate);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"current":"primary"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"45bb24de-2e76-11e6-bbca-a5d4325e9c7c","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:331","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[178],"tindex":"45bb24df-2e76-11e6-bbca-cff5f31a1ed2","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:152","type":"CtMethodImpl","sourcecode":"public byte[] toByteArray(final java.lang.String ascii) {\n    if ((ascii.length()) == 0) {\n        {\n            if (ascii == null) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii.toCharArray());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"ascii"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtBinaryOperatorImpl","sourcecode":"b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[179,180,181,75,182,78,183,184,185,186,187,188,189,190,191,192,193,194,195,93,94,95,166,167,96,196,97,98,99,197,100,129,168,198,169,170,101],"tindex":"45bb4bf0-2e76-11e6-bbca-fd9c62fd597c","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:311","type":"CtMethodImpl","sourcecode":"protected static boolean isWhiteSpace(final byte byteToCheck) {\n    if (byteToCheck == byteToCheck) {\n        {\n            if (byteToCheck != byteToCheck) {\n                {\n                    switch (byteToCheck) {\n                        case ' ' :\n                        case '\\n' :\n                        case '\\r' :\n                        case '\\t' :\n                            return true;\n                        default :\n                            return false;\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"byteToCheck","org.apache.commons.codec.net.QCodec.UNDERSCORE":"byteToCheck"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:132","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[199,200,201,202],"tindex":"45bb4bf1-2e76-11e6-bbca-efe200426ca5","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:405","type":"CtMethodImpl","sourcecode":"private static void permOp(int a, int b, final int n, final int m, final int[] results) {\n    if (m < 0) {\n        {\n            final int int = ((a >>> n) ^ b) & m;\n            a ^= t << n;\n            b ^= t;\n            results[0] = a;\n            results[1] = b;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"m"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:516","type":"CtVariableReadImpl","sourcecode":"branching"},"failures":[],"tindex":"45bb4bf2-2e76-11e6-bbca-75ba9c9ad755","method":{"position":"org.apache.commons.codec.binary.Hex:124","type":"CtMethodImpl","sourcecode":"public static char[] encodeHex(final byte[] data, final boolean toLowerCase) {\n    if (toLowerCase) {\n        {\n            if (toLowerCase) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHex(data, (toLowerCase ? org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.char[] : org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.char[]));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"branching":"toLowerCase"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[66,203,204,68,70,205,71,74,76,79,87,184,185,190,191,89,206,100],"tindex":"45bb7303-2e76-11e6-bbca-5ff5ca6af461","method":{"position":"org.apache.commons.codec.binary.StringUtils:382","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf8(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newString(bytes, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[],"tindex":"45bb9a14-2e76-11e6-bbca-8522b0cca5d5","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:498","type":"CtMethodImpl","sourcecode":"private int handleH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((value.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((index == 0) || (isVowel(charAt(value, (index - 1))))) && (isVowel(charAt(value, (index + 1))))) {\n                result.append('H');\n                index += 2;\n            } else {\n                index++;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:119","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'E'"},"failures":[],"tindex":"45bb9a15-2e76-11e6-bbca-2bb38c773618","method":{"position":"org.apache.commons.codec.language.Soundex:149","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if ((obj[1]) == 'E') {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n            } \n            return soundex(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"obj"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtBinaryOperatorImpl","sourcecode":"(content.length()) == 0"},"failures":[],"tindex":"45bbc126-2e76-11e6-bbca-e92a09a5ad03","method":{"position":"org.apache.commons.codec.binary.StringUtils:180","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16(final java.lang.String string) {\n    if ((string.length()) == 0) {\n        {\n            if (string == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"content":"string"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[66,207,208],"tindex":"45bbc127-2e76-11e6-bbca-55904ae450b3","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:376","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj == null) {\n        {\n            if (obj instanceof byte[]) {\n                return decode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:145","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[209,210,211,212,213,214,215,216,217,218,219,220],"tindex":"45bbc128-2e76-11e6-bbca-c9f7be994cb5","method":{"position":"org.apache.commons.codec.language.Caverphone2:45","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source.endsWith(source)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = source;\n            if ((txt == null) || ((txt.length()) == 0)) {\n                return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n            } \n            txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            txt = txt.replaceAll(\"[^a-z]\", \"\");\n            txt = txt.replaceAll(\"e$\", \"\");\n            txt = txt.replaceAll(\"^cough\", \"cou2f\");\n            txt = txt.replaceAll(\"^rough\", \"rou2f\");\n            txt = txt.replaceAll(\"^tough\", \"tou2f\");\n            txt = txt.replaceAll(\"^enough\", \"enou2f\");\n            txt = txt.replaceAll(\"^trough\", \"trou2f\");\n            txt = txt.replaceAll(\"^gn\", \"2n\");\n            txt = txt.replaceAll(\"mb$\", \"m2\");\n            txt = txt.replaceAll(\"cq\", \"2q\");\n            txt = txt.replaceAll(\"ci\", \"si\");\n            txt = txt.replaceAll(\"ce\", \"se\");\n            txt = txt.replaceAll(\"cy\", \"sy\");\n            txt = txt.replaceAll(\"tch\", \"2ch\");\n            txt = txt.replaceAll(\"c\", \"k\");\n            txt = txt.replaceAll(\"q\", \"k\");\n            txt = txt.replaceAll(\"x\", \"k\");\n            txt = txt.replaceAll(\"v\", \"f\");\n            txt = txt.replaceAll(\"dg\", \"2g\");\n            txt = txt.replaceAll(\"tio\", \"sio\");\n            txt = txt.replaceAll(\"tia\", \"sia\");\n            txt = txt.replaceAll(\"d\", \"t\");\n            txt = txt.replaceAll(\"ph\", \"fh\");\n            txt = txt.replaceAll(\"b\", \"p\");\n            txt = txt.replaceAll(\"sh\", \"s2\");\n            txt = txt.replaceAll(\"z\", \"s\");\n            txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n            txt = txt.replaceAll(\"[aeiou]\", \"3\");\n            txt = txt.replaceAll(\"j\", \"y\");\n            txt = txt.replaceAll(\"^y3\", \"Y3\");\n            txt = txt.replaceAll(\"^y\", \"A\");\n            txt = txt.replaceAll(\"y\", \"3\");\n            txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n            txt = txt.replaceAll(\"gh\", \"22\");\n            txt = txt.replaceAll(\"g\", \"k\");\n            txt = txt.replaceAll(\"s+\", \"S\");\n            txt = txt.replaceAll(\"t+\", \"T\");\n            txt = txt.replaceAll(\"p+\", \"P\");\n            txt = txt.replaceAll(\"k+\", \"K\");\n            txt = txt.replaceAll(\"f+\", \"F\");\n            txt = txt.replaceAll(\"m+\", \"M\");\n            txt = txt.replaceAll(\"n+\", \"N\");\n            txt = txt.replaceAll(\"w3\", \"W3\");\n            txt = txt.replaceAll(\"wh3\", \"Wh3\");\n            txt = txt.replaceAll(\"w$\", \"3\");\n            txt = txt.replaceAll(\"w\", \"2\");\n            txt = txt.replaceAll(\"^h\", \"A\");\n            txt = txt.replaceAll(\"h\", \"2\");\n            txt = txt.replaceAll(\"r3\", \"R3\");\n            txt = txt.replaceAll(\"r$\", \"3\");\n            txt = txt.replaceAll(\"r\", \"2\");\n            txt = txt.replaceAll(\"l3\", \"L3\");\n            txt = txt.replaceAll(\"l$\", \"3\");\n            txt = txt.replaceAll(\"l\", \"2\");\n            txt = txt.replaceAll(\"2\", \"\");\n            txt = txt.replaceAll(\"3$\", \"A\");\n            txt = txt.replaceAll(\"3\", \"\");\n            txt = txt + (org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String);\n            return txt.substring(0, org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"source","line":"source"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtUnaryOperatorImpl","sourcecode":"!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))"},"failures":[],"tindex":"45bbe839-2e76-11e6-bbca-c3b6fdaac9f4","method":{"position":"org.apache.commons.codec.language.bm.Rule:198","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            if (!(input.matches(((\"^[\" + input) + \"]{2,}$\")))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(input.endsWith(\")\"))) {\n                        {\n                            if ((input.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n                                {\n                                    return true;\n                                }\n                            } else {\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"input","org.apache.commons.codec.digest.B64.B64T":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"45bc0f4a-2e76-11e6-bbca-e51d64420dbe","method":{"position":"org.apache.commons.codec.digest.HmacUtils:633","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[68,71,74,76],"tindex":"45bc0f4b-2e76-11e6-bbca-25b51be9645c","method":{"position":"org.apache.commons.codec.binary.Base64:568","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeBase64String(final byte[] binaryData) {\n    if (binaryData == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"binaryData"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:336","type":"CtBinaryOperatorImpl","sourcecode":"(strA.length()) > (strB.length())"},"failures":[],"tindex":"45bc0f4c-2e76-11e6-bbca-67ac1a433c1e","method":{"position":"org.apache.commons.codec.digest.HmacUtils:673","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final java.lang.String key, final java.lang.String valueToDigest) {\n    if ((valueToDigest.length()) > (key.length())) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacSha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strA":"valueToDigest","strB":"key"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"45bc365d-2e76-11e6-bbca-ad26a91d7060","method":{"position":"org.apache.commons.codec.language.bm.Rule:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:288","type":"CtBinaryOperatorImpl","sourcecode":"pos < (org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH)"},"failures":[171,172,173,55,174,221,222,175,176,177,56,223,58],"tindex":"45bc365e-2e76-11e6-bbca-ff8a06277910","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:269","type":"CtMethodImpl","sourcecode":"private int handleAEIOUY(final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (index < index) {\n        {\n            if (index == 0) {\n                result.append('A');\n            } \n            return index + 1;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"index","org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[6],"tindex":"45bc365f-2e76-11e6-bbca-3d6104a88353","method":{"position":"org.apache.commons.codec.digest.DigestUtils:309","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:268","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[9],"tindex":"45bc5d70-2e76-11e6-bbca-c3a6b54a47b0","method":{"position":"org.apache.commons.codec.digest.DigestUtils:469","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha256Digest(), data);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:77","type":"CtBinaryOperatorImpl","sourcecode":"(cs1 instanceof java.lang.String) && (cs2 instanceof java.lang.String)"},"failures":[],"tindex":"45bc5d71-2e76-11e6-bbca-b91ff1fc0b97","method":{"position":"org.apache.commons.codec.language.bm.Rule:600","type":"CtMethodImpl","sourcecode":"private static boolean startsWith(final java.lang.CharSequence input, final java.lang.CharSequence prefix) {\n    if ((prefix instanceof java.lang.String) && (prefix instanceof java.lang.String)) {\n        {\n            if ((prefix.length()) > (input.length())) {\n                return false;\n            } \n            for (int int = 0 ; i < (prefix.length()) ; i++) {\n                if ((input.charAt(i)) != (prefix.charAt(i))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs1":"prefix","cs2":"prefix"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[199,200,201,202],"tindex":"45bc5d72-2e76-11e6-bbca-9125b473082e","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:338","type":"CtMethodImpl","sourcecode":"private static int[] desSetKey(final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                {\n                    final int[] int[] = new int[32];\n                    int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 0);\n                    int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 4);\n                    final int[] int[] = new int[2];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 4, 252645135, results);\n                    d = results[0];\n                    c = results[1];\n                    c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888);\n                    d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888);\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n                    d = results[0];\n                    c = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results);\n                    c = results[0];\n                    d = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n                    d = results[0];\n                    c = results[1];\n                    d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4);\n                    c &= 268435455;\n                    int int = 0;\n                    for (int int = 0 ; i < 16 ; i++) {\n                        if (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.boolean[][i]) {\n                            c = (c >>> 2) | (c << 26);\n                            d = (d >>> 2) | (d << 26);\n                        } else {\n                            c = (c >>> 1) | (c << 27);\n                            d = (d >>> 1) | (d << 27);\n                        }\n                        c &= 268435455;\n                        d &= 268435455;\n                        int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))]);\n                        final int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][(d & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][(((d >>> 7) & 3) | ((d >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((d >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][(((d >>> 21) & 15) | ((d >>> 22) & 48))]);\n                        schedule[(j++)] = (t << 16) | (s & 65535);\n                        s = (s >>> 16) | (t & -65536);\n                        s = (s << 4) | (s >>> 28);\n                        schedule[(j++)] = s;\n                    }\n                    return schedule;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:276","type":"CtBinaryOperatorImpl","sourcecode":"(suffix.length()) > (input.length())"},"failures":[],"tindex":"45bc8483-2e76-11e6-bbca-355d6c18c7ed","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object other) {\n    if (other.startsWith(other)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((other.length()) > (other.length())) {\n                {\n                    if ((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.this) == other) {\n                        return true;\n                    } \n                    if (!(other instanceof org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)) {\n                        return false;\n                    } \n                    return toString().equals(((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)(other)).toString());\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"other","suffix":"other"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"45bcab94-2e76-11e6-bbca-9115fdb9d972","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:338","type":"CtMethodImpl","sourcecode":"private static int[] desSetKey(final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                {\n                    final int[] int[] = new int[32];\n                    int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 0);\n                    int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 4);\n                    final int[] int[] = new int[2];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 4, 252645135, results);\n                    d = results[0];\n                    c = results[1];\n                    c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888);\n                    d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888);\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n                    d = results[0];\n                    c = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results);\n                    c = results[0];\n                    d = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n                    d = results[0];\n                    c = results[1];\n                    d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4);\n                    c &= 268435455;\n                    int int = 0;\n                    for (int int = 0 ; i < 16 ; i++) {\n                        if (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.boolean[][i]) {\n                            c = (c >>> 2) | (c << 26);\n                            d = (d >>> 2) | (d << 26);\n                        } else {\n                            c = (c >>> 1) | (c << 27);\n                            d = (d >>> 1) | (d << 27);\n                        }\n                        c &= 268435455;\n                        d &= 268435455;\n                        int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))]);\n                        final int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][(d & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][(((d >>> 7) & 3) | ((d >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((d >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][(((d >>> 21) & 15) | ((d >>> 22) & 48))]);\n                        schedule[(j++)] = (t << 16) | (s & 65535);\n                        s = (s >>> 16) | (t & -65536);\n                        s = (s << 4) | (s >>> 28);\n                        schedule[(j++)] = s;\n                    }\n                    return schedule;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtUnaryOperatorImpl","sourcecode":"!(object instanceof java.lang.String)"},"failures":[224],"tindex":"45bcd2a5-2e76-11e6-bbca-f7913194e5dd","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:115","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object ascii) throws org.apache.commons.codec.DecoderException {\n    if (!(ascii instanceof java.lang.String)) {\n        {\n            if (ascii == null) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            if (ascii instanceof byte[]) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n            } \n            if (ascii instanceof char[]) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n            } \n            if (ascii instanceof java.lang.String) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n            } \n            throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\");\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"ascii"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"45bcd2a6-2e76-11e6-bbca-3108086d3478","method":{"position":"org.apache.commons.codec.net.BCodec:92","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(bytes)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.Base64.encodeBase64(bytes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"bytes"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:905","type":"CtBinaryOperatorImpl","sourcecode":"(index < 0) || (index >= (value.length()))"},"failures":[172,173,176,177,56],"tindex":"45bcd2a7-2e76-11e6-bbca-7f658ac067fc","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:827","type":"CtMethodImpl","sourcecode":"private boolean conditionL0(final java.lang.String value, final int index) {\n    if ((index < 0) || (index >= (value.length()))) {\n        {\n            if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n                return true;\n            } else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:388","type":"CtBinaryOperatorImpl","sourcecode":"(chr == 'M') || (chr == 'N')"},"failures":[],"tindex":"45bcf9b8-2e76-11e6-bbca-65e604a53db9","method":{"position":"org.apache.commons.codec.language.Nysiis:100","type":"CtMethodImpl","sourcecode":"private static boolean isVowel(final char c) {\n    if ((c == 'M') || (chr == 'N')) {\n        {\n            return ((((c == 'A') || (c == 'E')) || (c == 'I')) || (c == 'O')) || (c == 'U');\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"c"},"type":"special","returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[106,107,110,111,112,115,116,119,120,122,126,127],"tindex":"45bcf9b9-2e76-11e6-bbca-cb6c01edfc49","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:92","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) throws org.apache.commons.codec.EncoderException {\n    if (source == null) {\n        {\n            if (source == null) {\n                return null;\n            } \n            return org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.encode(source);\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"45bd20ca-2e76-11e6-bbca-d54b7499f8d1","method":{"position":"org.apache.commons.codec.binary.StringUtils:216","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Le(final java.lang.String string) {\n    if (string == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"string"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"45bd20cb-2e76-11e6-bbca-e1cc56c9fec4","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if ((source == null) || ((txt.length()) == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return null;\n            } \n            return soundex(source, false)[0];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"source"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,0,23,24,25,26,27,28,29],"tindex":"45bd20cc-2e76-11e6-bbca-95d1ff27d02d","method":{"position":"org.apache.commons.codec.binary.Hex:140","type":"CtMethodImpl","sourcecode":"protected static char[] encodeHex(final byte[] data, final char[] toDigits) {\n    if (data == null) {\n        {\n            final int int = data.int;\n            final char[] char[] = new char[l << 1];\n            for (int int = 0, int int = 0 ; i < l ; i++) {\n                out[(j++)] = toDigits[((240 & (data[i])) >>> 4)];\n                out[(j++)] = toDigits[(15 & (data[i]))];\n            }\n            return out;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:392","type":"CtBinaryOperatorImpl","sourcecode":"(body.startsWith(\"|\")) || (body.endsWith(\"|\"))"},"failures":[],"tindex":"45bd47dd-2e76-11e6-bbca-d372ecad2b70","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:550","type":"CtMethodImpl","sourcecode":"private int handleL(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((value.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n        {\n            if ((charAt(value, (index + 1))) == 'L') {\n                if (conditionL0(value, index)) {\n                    result.appendPrimary('L');\n                } else {\n                    result.append('L');\n                }\n                index += 2;\n            } else {\n                index++;\n                result.append('L');\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"body":"value"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"45bd47de-2e76-11e6-bbca-d394a64ed485","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:253","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeQuotedPrintable(java.util.BitSet printable, final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[225],"tindex":"45bd47df-2e76-11e6-bbca-4b605bd2f384","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:417","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String text) {\n    if (text == null) {\n        {\n            if (text == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return colognePhonetic(text);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"text"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:440","type":"CtBinaryOperatorImpl","sourcecode":"inAvail < 0"},"failures":[],"tindex":"45bd6ef0-2e76-11e6-bbca-bbac8f4ab0a1","method":{"position":"org.apache.commons.codec.digest.B64:54","type":"CtMethodImpl","sourcecode":"static void b64from24bit(final byte b2, final byte b1, final byte b0, final int outLen, final java.lang.StringBuilder buffer) {\n    if (outLen < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255);\n            int int = outLen;\n            while ((n--) > 0) {\n                buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)));\n                w >>= 6;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inAvail":"outLen"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[9],"tindex":"45bd6ef1-2e76-11e6-bbca-e796e3d83c0e","method":{"position":"org.apache.commons.codec.digest.DigestUtils:516","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"45bd6ef2-2e76-11e6-bbca-01591b2afb9d","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:417","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String text) {\n    if (text == null) {\n        {\n            if (text == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return colognePhonetic(text);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"text"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:347","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[226,227,179,180,181,75],"tindex":"45bd6ef3-2e76-11e6-bbca-151d0511ae1b","method":{"position":"org.apache.commons.codec.binary.Base64:509","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final byte octet) {\n    if (octet == octet) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (octet == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.byte)) || (((octet >= 0) && (octet < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) && ((org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][octet]) != (-1)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"octet","pad":"octet"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)"},"failures":[],"tindex":"45bd9604-2e76-11e6-bbca-9ffce97834de","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:482","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final java.lang.String basen) {\n    if (basen.startsWith(basen)) {\n        {\n            return isInAlphabet(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(basen), true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"basen","line":"basen"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:275","type":"CtBinaryOperatorImpl","sourcecode":"(mapped != '0') && (mapped != last)"},"failures":[],"tindex":"45bd9605-2e76-11e6-bbca-3d45a8a67a4e","method":{"position":"org.apache.commons.codec.language.Metaphone:342","type":"CtMethodImpl","sourcecode":"private boolean isPreviousChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if ((c != '0') && (mapped != c)) {\n        {\n            boolean boolean = false;\n            if ((index > 0) && (index < (string.length()))) {\n                matches = (string.charAt((index - 1))) == c;\n            } \n            return matches;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"c","mapped":"c"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtBinaryOperatorImpl","sourcecode":"i < 0"},"failures":[],"tindex":"45bd9606-2e76-11e6-bbca-350f71687f68","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:384","type":"CtMethodImpl","sourcecode":"private static int fourBytesToInt(final byte[] b, int offset) {\n    if (offset < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)]);\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 16;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24;\n            return value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"offset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:111","type":"CtBinaryOperatorImpl","sourcecode":"(es1 == null) || (es2 == null)"},"failures":[],"tindex":"45bdbd17-2e76-11e6-bbca-f54793e2216e","method":{"position":"org.apache.commons.codec.digest.DigestUtils:531","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final java.lang.String data) {\n    if (data.endsWith(data)) {\n        {\n            if ((data == null) || (data == null)) {\n                {\n                    if (data == null) {\n                        {\n                            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"es1":"data","es2":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"45bdbd18-2e76-11e6-bbca-7da93a8d4547","method":{"position":"org.apache.commons.codec.language.bm.Rule:499","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.RPattern pattern(final java.lang.String regex) {\n    if (regex == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = regex.startsWith(\"^\");\n            final boolean boolean = regex.endsWith(\"$\");\n            final java.lang.String java.lang.String = regex.substring((startsWith ? 1 : 0), (endsWith ? (regex.length()) - 1 : regex.length()));\n            final boolean boolean = content.contains(\"[\");\n            if (!boxes) {\n                if (startsWith && endsWith) {\n                    if ((content.length()) == 0) {\n                        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                            @java.lang.Override\n                            public boolean isMatch(final java.lang.CharSequence input) {\n                                return (input.length()) == 0;\n                            }\n                        };\n                    } else {\n                        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                            @java.lang.Override\n                            public boolean isMatch(final java.lang.CharSequence input) {\n                                return input.equals(content);\n                            }\n                        };\n                    }\n                } else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n                    return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern;\n                } else if (startsWith) {\n                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                        @java.lang.Override\n                        public boolean isMatch(final java.lang.CharSequence input) {\n                            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n                        }\n                    };\n                } else if (endsWith) {\n                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                        @java.lang.Override\n                        public boolean isMatch(final java.lang.CharSequence input) {\n                            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n                        }\n                    };\n                } \n            } else {\n                final boolean boolean = content.startsWith(\"[\");\n                final boolean boolean = content.endsWith(\"]\");\n                if (startsWithBox && endsWithBox) {\n                    java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1));\n                    if (!(boxContent.contains(\"[\"))) {\n                        final boolean boolean = boxContent.startsWith(\"^\");\n                        if (negate) {\n                            boxContent = boxContent.substring(1);\n                        } \n                        final java.lang.String java.lang.String = boxContent;\n                        final boolean boolean = !negate;\n                        if (startsWith && endsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                                }\n                            };\n                        } else if (startsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                                }\n                            };\n                        } else if (endsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                                }\n                            };\n                        } \n                    } \n                } \n            }\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(regex);\n\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(input);\n                    return matcher.find();\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"regex"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:310","type":"CtBinaryOperatorImpl","sourcecode":"lastChar == 'A'"},"failures":[228,229,230,231,232,233,234,235,236],"tindex":"45be0b39-2e76-11e6-bbca-fb5d72e816b8","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:299","type":"CtMethodImpl","sourcecode":"private static boolean arrayContains(final char[] arr, final char key) {\n    if (key == 'A') {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final char char : arr) {\n                if (element == key) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lastChar":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[172,173,176,177,56],"tindex":"45be0b3a-2e76-11e6-bbca-090080cdc9f1","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:331","type":"CtMethodImpl","sourcecode":"private int handleCC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index < 0) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n                if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n                    result.append(\"KS\");\n                } else {\n                    result.append('X');\n                }\n                index += 3;\n            } else {\n                result.append('K');\n                index += 2;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[237,238,239,240,241,242,243],"tindex":"45be324b-2e76-11e6-bbca-f3b852fc2d84","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:175","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            sBuf.append(str.charAt(0));\n            char char;\n            char char;\n            last = '*';\n            for (int int = 0 ; i < (str.length()) ; i++) {\n                current = getMappingCode(str.charAt(i));\n                if (current == last) {\n                    continue;\n                } else if (current != 0) {\n                    sBuf.append(current);\n                } \n                last = current;\n            }\n            return sBuf.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[],"tindex":"45be324c-2e76-11e6-bbca-f7a55f31771f","method":{"position":"org.apache.commons.codec.net.Utils:42","type":"CtMethodImpl","sourcecode":"static int digit16(final byte b) throws org.apache.commons.codec.DecoderException {\n    if (b == b) {\n        {\n            final int int = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int);\n            if (i == (-1)) {\n                throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n            } \n            return i;\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","pad":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"45be324d-2e76-11e6-bbca-59573830d4d3","method":{"position":"org.apache.commons.codec.digest.DigestUtils:284","type":"CtMethodImpl","sourcecode":"public static byte[] md5(final java.lang.String data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (data == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.DigestUtils.md5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[],"tindex":"45be595e-2e76-11e6-bbca-2da732a7468b","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:311","type":"CtMethodImpl","sourcecode":"protected static boolean isWhiteSpace(final byte byteToCheck) {\n    if (byteToCheck == byteToCheck) {\n        {\n            if (byteToCheck != byteToCheck) {\n                {\n                    switch (byteToCheck) {\n                        case ' ' :\n                        case '\\n' :\n                        case '\\r' :\n                        case '\\t' :\n                            return true;\n                        default :\n                            return false;\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"byteToCheck","pad":"byteToCheck"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:180","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[233],"tindex":"45be595f-2e76-11e6-bbca-67d1209ddbd7","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:421","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEqual(final java.lang.String text1, final java.lang.String text2) {\n    if ((text2.length()) == 0) {\n        {\n            return colognePhonetic(text1).equals(colognePhonetic(text2));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"text2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268],"tindex":"45be5960-2e76-11e6-bbca-ab3362aa95db","method":{"position":"org.apache.commons.codec.language.Soundex:258","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            final char[] char[] = new char[]{ '0' , '0' , '0' , '0' };\n            char char;\n            char char;\n            int int = 1;\n            int int = 1;\n            out[0] = str.charAt(0);\n            last = getMappingCode(str, 0);\n            while ((incount < (str.length())) && (count < (out.int))) {\n                mapped = getMappingCode(str, (incount++));\n                if (mapped != 0) {\n                    if ((mapped != '0') && (mapped != last)) {\n                        out[(count++)] = mapped;\n                    } \n                    last = mapped;\n                } \n            }\n            return new java.lang.String(out);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtUnaryOperatorImpl","sourcecode":"!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))"},"failures":[269,270,271,272,273,274,275],"tindex":"45be8071-2e76-11e6-bbca-eb4b01861e72","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:125","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final java.lang.String encode(java.lang.String name) {\n    if (!(name.matches(((\"^[\" + name) + \"]{2,}$\")))) {\n        {\n            if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n                return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            } \n            name = cleanName(name);\n            name = removeVowels(name);\n            name = removeDoubleConsonants(name);\n            name = getFirst3Last3(name);\n            return name;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"name","org.apache.commons.codec.digest.B64.B64T":"name"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtInvocationImpl","sourcecode":"target.equals(element)"},"failures":[276],"tindex":"45be8072-2e76-11e6-bbca-c778fac313b3","method":{"position":"org.apache.commons.codec.language.Metaphone:402","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str.equals(str)) {\n        {\n            return metaphone(str);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"str","element":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"45be8073-2e76-11e6-bbca-09c11fe57dde","method":{"position":"org.apache.commons.codec.digest.DigestUtils:593","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha384Hex(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"data"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[161,92,162,163,164,165,277],"tindex":"45be8074-2e76-11e6-bbca-5b9cc068dd71","method":{"position":"org.apache.commons.codec.binary.StringUtils:137","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUnchecked(final java.lang.String string, final java.lang.String charsetName) {\n    if (string == null) {\n        {\n            if (string == null) {\n                return null;\n            } \n            try {\n                return string.getBytes(charsetName);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"string"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtInvocationImpl","sourcecode":"value.startsWith(element)"},"failures":[],"tindex":"45bea785-2e76-11e6-bbca-1d670435d504","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj.startsWith(obj)) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof byte[]) {\n                return encode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"obj","element":"obj"},"type":"special","returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[132,278,133,135,136,137,279,280,281,282,139,283],"tindex":"45bea786-2e76-11e6-bbca-43ff5f1092b8","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:429","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if ((str.length()) > 0) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[],"tindex":"45bea787-2e76-11e6-bbca-6977a33020f7","method":{"position":"org.apache.commons.codec.language.bm.Rule:539","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[102,103,104,105,106,107,110,111,112,113,114,115,116,119,120,122,126,127],"tindex":"45bece98-2e76-11e6-bbca-9dcf2c85acb8","method":{"position":"org.apache.commons.codec.language.bm.Rule:248","type":"CtMethodImpl","sourcecode":"private static java.lang.String createResourceName(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (!(lang.contains(\"[\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_%s_%s.txt\", nameType.getName(), rt.getName(), lang);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"lang"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START)"},"failures":[],"tindex":"45bece99-2e76-11e6-bbca-b7f78bd1a02b","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object other) {\n    if (other.startsWith(other)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((other.length()) > (other.length())) {\n                {\n                    if ((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.this) == other) {\n                        return true;\n                    } \n                    if (!(other instanceof org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)) {\n                        return false;\n                    } \n                    return toString().equals(((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)(other)).toString());\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"other","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START":"other"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"45bece9a-2e76-11e6-bbca-735e7e0163a9","method":{"position":"org.apache.commons.codec.digest.DigestUtils:284","type":"CtMethodImpl","sourcecode":"public static byte[] md5(final java.lang.String data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (data == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.DigestUtils.md5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:325","type":"CtInvocationImpl","sourcecode":"name1LtREnd.equals(name2RtLEnd)"},"failures":[],"tindex":"45bef5ab-2e76-11e6-bbca-a3a65ea6b190","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:125","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final java.lang.String keyBytes, final java.lang.String salt) {\n    if (salt.equals(salt)) {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2RtLEnd":"salt","name1LtREnd":"salt"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[172,173,221,176,177,56],"tindex":"45bef5ac-2e76-11e6-bbca-1ddac8b3308e","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:987","type":"CtMethodImpl","sourcecode":"public void appendAlternate(final java.lang.String value) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value.endsWith(value)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n                    if ((value.length()) <= addChars) {\n                        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n                    } else {\n                        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[156,157,128,158,159,160,162,166,167,129,168,169,170],"tindex":"45bef5ad-2e76-11e6-bbca-39e080134ce5","method":{"position":"org.apache.commons.codec.binary.StringUtils:113","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesIso8859_1(final java.lang.String string) {\n    if (string == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:359","type":"CtBinaryOperatorImpl","sourcecode":"(context.modulus) == 0"},"failures":[],"tindex":"45bf1cbe-2e76-11e6-bbca-e13caaa99a85","method":{"position":"org.apache.commons.codec.binary.Base32:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid encode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inAvail == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (context.boolean) {\n                return ;\n            } \n            if (inAvail < 0) {\n                context.boolean = true;\n                if ((0 == (context.int)) && ((int) == 0)) {\n                    return ;\n                } \n                final byte[] byte[] = ensureBufferSize(int, context);\n                final int int = context.int;\n                switch (context.int) {\n                    case 0 :\n                        break;\n                    case 1 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    case 2 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    case 3 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    case 4 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 22))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 7))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    default :\n                        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                }\n                context.int += (context.int) - savedPos;\n                if (((int) > 0) && ((context.int) > 0)) {\n                    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                    context.int += byte[].int;\n                } \n            } else {\n                for (int int = 0 ; i < inAvail ; i++) {\n                    final byte[] byte[] = ensureBufferSize(int, context);\n                    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n                    int int = in[(inPos++)];\n                    if (b < 0) {\n                        b += 256;\n                    } \n                    context.long = ((context.long) << 8) + b;\n                    if (0 == (context.int)) {\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n                        if (((int) > 0) && ((int) <= (context.int))) {\n                            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                            context.int += byte[].int;\n                            context.int = 0;\n                        } \n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"context","modulus":"inAvail"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"45bf6adf-2e76-11e6-bbca-eb82c71ae798","method":{"position":"org.apache.commons.codec.language.bm.Rule:198","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            if (!(input.matches(((\"^[\" + input) + \"]{2,}$\")))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(input.endsWith(\")\"))) {\n                        {\n                            if ((input.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n                                {\n                                    return true;\n                                }\n                            } else {\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"45bf91f0-2e76-11e6-bbca-99d4d8cb552a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:987","type":"CtMethodImpl","sourcecode":"public void appendAlternate(final java.lang.String value) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value.endsWith(value)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n                    if ((value.length()) <= addChars) {\n                        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n                    } else {\n                        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:456","type":"CtBinaryOperatorImpl","sourcecode":"blocksize == 32"},"failures":[],"tindex":"45bf91f1-2e76-11e6-bbca-4b212a54d1df","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:259","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected char[] copyData(final int start, final int length) {\n    if (start == 32) {\n        {\n            final char[] char[] = new char[length];\n            java.lang.System.arraycopy(char[], (((char[].int) - (org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.this.int)) + start), newData, 0, length);\n            return newData;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"blocksize":"start"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[],"tindex":"45bf91f2-2e76-11e6-bbca-9fbbfce0119b","method":{"position":"org.apache.commons.codec.digest.DigestUtils:531","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final java.lang.String data) {\n    if (data.endsWith(data)) {\n        {\n            if ((data == null) || (data == null)) {\n                {\n                    if (data == null) {\n                        {\n                            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"data","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[5,6,7,9,10,11,12],"tindex":"45bfb903-2e76-11e6-bbca-45b43adab6ea","method":{"position":"org.apache.commons.codec.digest.DigestUtils:792","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest updateDigest(final java.security.MessageDigest digest, final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            final byte[] byte[] = new byte[org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int];\n            int int = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int);\n            while (read > (-1)) {\n                digest.update(buffer, 0, read);\n                read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int);\n            }\n            return digest;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[284],"tindex":"45bfb904-2e76-11e6-bbca-f9cb23ee85c7","method":{"position":"org.apache.commons.codec.binary.StringUtils:350","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16Be(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                {\n                    return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:553","type":"CtVariableReadImpl","sourcecode":"negate"},"failures":[],"tindex":"45bfb905-2e76-11e6-bbca-77a11685d463","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"negate":"concat"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"45bfe016-2e76-11e6-bbca-4d5098e89b02","method":{"position":"org.apache.commons.codec.binary.StringUtils:350","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16Be(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                {\n                    return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:168","type":"CtBinaryOperatorImpl","sourcecode":"b == '+'"},"failures":[135,137,280,281,283],"tindex":"45bfe017-2e76-11e6-bbca-6308dedf00b1","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:201","type":"CtMethodImpl","sourcecode":"private static int getUnsignedOctet(final int index, final byte[] bytes) {\n    if (index == '+') {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = bytes[index];\n            if (b < 0) {\n                b = 256 + b;\n            } \n            return b;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.Utils:44","type":"CtBinaryOperatorImpl","sourcecode":"i == (-1)"},"failures":[140,141,142,285,286,66,203,287,288,289,67,226,207,290,291,292,293,294,295,227,296,297,298,299,300,301,302,303,304,305,68,306,69,70,181,205,71,307,72,73,74,76,77,156,157,79,81,83,86,308,87,158,309,310,159,160,88,184,185,186,187,188,189,190,191,311,312,313,208,314,315,316,317,89,318,90,319,320,321,91,193,195,93,94,95,166,167,196,197,100,168,198,169,170,101],"tindex":"45bfe018-2e76-11e6-bbca-cb1e43ecd123","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:268","type":"CtMethodImpl","sourcecode":"protected byte[] ensureBufferSize(final int size, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (size == (-1)) {\n        {\n            if (((context.byte[]) == null) || ((context.byte[].int) < ((context.int) + size))) {\n                return resizeBuffer(context);\n            } \n            return context.byte[];\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"size"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[279],"tindex":"45c00729-2e76-11e6-bbca-bf58023e24d0","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:486","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"45c0072a-2e76-11e6-bbca-51f64dae0950","method":{"position":"org.apache.commons.codec.language.Metaphone:388","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(obj)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n            } \n            return metaphone(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"obj"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:336","type":"CtBinaryOperatorImpl","sourcecode":"(strA.length()) > (strB.length())"},"failures":[322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,270,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,272,364,365,273,366,367,368],"tindex":"45c0072b-2e76-11e6-bbca-99f57660dee6","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:351","type":"CtMethodImpl","sourcecode":"java.lang.String removeAccents(final java.lang.String accentedWord) {\n    if ((accentedWord.length()) > (accentedWord.length())) {\n        {\n            if (accentedWord == null) {\n                return null;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            final int int = accentedWord.length();\n            for (int int = 0 ; i < n ; i++) {\n                final char char = accentedWord.charAt(i);\n                final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(c);\n                if (pos > (-1)) {\n                    sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n                } else {\n                    sb.append(c);\n                }\n            }\n            return sb.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strA":"accentedWord","strB":"accentedWord"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"45c02e3c-2e76-11e6-bbca-132a4c33e756","method":{"position":"org.apache.commons.codec.binary.Base64:581","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64URLSafe(final byte[] binaryData) {\n    if (binaryData == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:163","type":"CtBinaryOperatorImpl","sourcecode":"(curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))"},"failures":[],"tindex":"45c02e3d-2e76-11e6-bbca-1529916ac956","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:161","type":"CtMethodImpl","sourcecode":"char getMappingCode(final char c) {\n    if ((c == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(c))) {\n        {\n            if (!(java.lang.Character.isLetter(c))) {\n                return 0;\n            } \n            return org.apache.commons.codec.language.RefinedSoundex.this.char[][((java.lang.Character.toUpperCase(c)) - 'A')];\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prev":"c","curr":"c"},"type":"special","returnInThen":true,"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
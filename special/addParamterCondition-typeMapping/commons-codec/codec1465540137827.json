{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":81,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":9,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":14,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":54,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":36,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":77,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":22,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":85,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":29,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":78,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":87,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":28,"org.apache.commons.codec.binary.Base64Test.testBase64":58,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":23,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":59,"org.apache.commons.codec.binary.Base64Test.testTriplets":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":27,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":17,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":6,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":15,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":18,"org.apache.commons.codec.binary.Base64Test.testUUID":49,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":53,"org.apache.commons.codec.binary.Base64Test.testSingletons":57,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":63,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":25,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":24,"org.apache.commons.codec.binary.Base64Test.testPairs":48,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":2,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":52,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":11,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":68,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":12,"org.apache.commons.codec.binary.Base64Test.testCodec112":55,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":69,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":20,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":1,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":30,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":19,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":41,"org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey":89,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":39,"org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull":64,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":74,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":72,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":82,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":32,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":0,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":60,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":73,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":42,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":3,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":43,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":71,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":8,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":83,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":33,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":44,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":16,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":46,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":76,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":66,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":56,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":10,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":62,"org.apache.commons.codec.CharsetsTest.testToCharset":67,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":31,"org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull":65,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey":79,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":26,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":84,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":35,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":70,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":75,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":90,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":51,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":7,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":61,"org.apache.commons.codec.language.SoundexTest.testDifference":34,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":37,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":38,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":45,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":86,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":88,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":21,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":5,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":4,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":40,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":50,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":80},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:72","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX)"},"failures":[],"tindex":"9cbbda76-2ed4-11e6-b5b4-43d55c1c5eee","method":{"position":"org.apache.commons.codec.language.bm.Languages:253","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.String language) {\n    if (language.startsWith(language)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"language","org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX":"language"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[0],"tindex":"9cbc76b7-2ed4-11e6-b5b4-ed408dd0e09f","method":{"position":"org.apache.commons.codec.digest.DigestUtils:248","type":"CtMethodImpl","sourcecode":"public static java.lang.String md2Hex(final java.lang.String data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[1,2,3],"tindex":"9cbc9dc8-2ed4-11e6-b5b4-79b3e03c025f","method":{"position":"org.apache.commons.codec.digest.HmacUtils:116","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha384(final byte[] key) {\n    if (key == key) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"key","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:394","type":"CtBinaryOperatorImpl","sourcecode":"(code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))"},"failures":[],"tindex":"9cbcc4d9-2ed4-11e6-b5b4-d3aa389b111c","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:951","type":"CtMethodImpl","sourcecode":"public void append(final char primary, final char alternate) {\n    if ((primary != '-') && ((((primary != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendPrimary(primary);\n            appendAlternate(alternate);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"code":"primary","lastCode":"primary"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtBinaryOperatorImpl","sourcecode":"ascii == null"},"failures":[4],"tindex":"9cbcc4da-2ed4-11e6-b5b4-1fff5a6486d7","method":{"position":"org.apache.commons.codec.binary.Base64:523","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final java.lang.String base64) {\n    if (base64 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Base64.isBase64(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(base64));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"base64"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"9cbcebeb-2ed4-11e6-b5b4-ed44e355eb84","method":{"position":"org.apache.commons.codec.digest.DigestUtils:374","type":"CtMethodImpl","sourcecode":"public static byte[] sha1(final byte[] data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.getSha1Digest().digest(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"9cbcebec-2ed4-11e6-b5b4-c77ddb66973a","method":{"position":"org.apache.commons.codec.binary.Base64:581","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64URLSafe(final byte[] binaryData) {\n    if (binaryData == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"binaryData"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[5,6,7,8,9],"tindex":"9cbd12fd-2ed4-11e6-b5b4-2b57b22f1e98","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:758","type":"CtMethodImpl","sourcecode":"private int handleZ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (value == null) {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                result.append('J');\n                index += 2;\n            } else {\n                if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n                    result.append(\"S\", \"TS\");\n                } else {\n                    result.append('S');\n                }\n                index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[10,11,12,13],"tindex":"9cbd3a0e-2ed4-11e6-b5b4-83da60f31b21","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:360","type":"CtMethodImpl","sourcecode":"public java.lang.String encodeAsString(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newStringUtf8(encode(pArray));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[14],"tindex":"9cbdfd5f-2ed4-11e6-b5b4-79d1e3b490aa","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:268","type":"CtMethodImpl","sourcecode":"public static char[] toAsciiChars(final byte[] raw) {\n    if (raw == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[];\n            } \n            final char[] char[] = new char[(raw.int) << 3];\n            for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                        l_ascii[(jj - bits)] = '0';\n                    } else {\n                        l_ascii[(jj - bits)] = '1';\n                    }\n                }\n            }\n            return l_ascii;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"raw"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:175","type":"CtBinaryOperatorImpl","sourcecode":"b == (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[],"tindex":"9cbe2470-2ed4-11e6-b5b4-67c5b4d32cc6","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:320","type":"CtMethodImpl","sourcecode":"private static int byteToUnsigned(final byte b) {\n    if (b == b) {\n        {\n            final int int = b;\n            return value < 0 ? value + 256 : value;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","org.apache.commons.codec.net.QCodec.UNDERSCORE":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"tindex":"9cbe4b81-2ed4-11e6-b5b4-d30a3f6f7d7b","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtInvocationImpl","sourcecode":"line.contains(\"=\")"},"failures":[],"tindex":"9cbee7c2-2ed4-11e6-b5b4-eb7258dfdf03","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:462","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(final java.lang.String source) {\n    if (source.contains(\"=\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.String[] java.lang.String[] = soundex(source, true);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            for (final java.lang.String java.lang.String : branches) {\n                sb.append(branch);\n                if ((++index) < (branches.int)) {\n                    sb.append('|');\n                } \n            }\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[33,34,35],"tindex":"9cbf0ed3-2ed4-11e6-b5b4-417c3eb5e3c6","method":{"position":"org.apache.commons.codec.language.SoundexUtils:109","type":"CtMethodImpl","sourcecode":"static int differenceEncoded(final java.lang.String es1, final java.lang.String es2) {\n    if (es2 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((es1 == null) || (es2 == null)) {\n                return 0;\n            } \n            final int int = java.lang.Math.min(es1.length(), es2.length());\n            int int = 0;\n            for (int int = 0 ; i < lengthToMatch ; i++) {\n                if ((es1.charAt(i)) == (es2.charAt(i))) {\n                    diff++;\n                } \n            }\n            return diff;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"es2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[36],"tindex":"9cbf0ed4-2ed4-11e6-b5b4-1562bd34dd3a","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object other) {\n    if (other == null) {\n        {\n            if ((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.this) == other) {\n                return true;\n            } \n            if (!(other instanceof org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)) {\n                return false;\n            } \n            return toString().equals(((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)(other)).toString());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"other"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[],"tindex":"9cbf35e5-2ed4-11e6-b5b4-db7362e275ad","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:384","type":"CtMethodImpl","sourcecode":"java.lang.String removeDoubleConsonants(final java.lang.String name) {\n    if (name.endsWith(name)) {\n        {\n            java.lang.String java.lang.String = name.toUpperCase();\n            for (final java.lang.String java.lang.String : org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String[]) {\n                if (replacedName.contains(dc)) {\n                    final java.lang.String java.lang.String = dc.substring(0, 1);\n                    replacedName = replacedName.replace(dc, singleLetter);\n                } \n            }\n            return replacedName;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"name"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[37,38,39,40,41,42,43],"tindex":"9cbf5cf6-2ed4-11e6-b5b4-e73624b86ad9","method":{"position":"org.apache.commons.codec.net.URLCodec:121","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeUrl(java.util.BitSet urlsafe, final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            if (urlsafe == null) {\n                urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (final byte byte : bytes) {\n                int int = c;\n                if (b < 0) {\n                    b = 256 + b;\n                } \n                if (urlsafe.get(b)) {\n                    if (b == ' ') {\n                        b = '+';\n                    } \n                    buffer.write(b);\n                } else {\n                    buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n                    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                    buffer.write(hex1);\n                    buffer.write(hex2);\n                }\n            }\n            return buffer.toByteArray();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtBinaryOperatorImpl","sourcecode":"(((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)"},"failures":[],"tindex":"9cbf5cf7-2ed4-11e6-b5b4-db60aa4f5b60","method":{"position":"org.apache.commons.codec.digest.HmacUtils:459","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final java.lang.String key, final java.lang.String valueToDigest) {\n    if ((((key == null) || (key.equalsIgnoreCase(name))) || (valueToDigest.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"key","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"valueToDigest","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"key"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"tindex":"9cbf8408-2ed4-11e6-b5b4-1dc39f7b5415","method":{"position":"org.apache.commons.codec.binary.Base64:553","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData) {\n    if (binaryData == null) {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[64,65],"tindex":"9cbf8409-2ed4-11e6-b5b4-5db39df5805e","method":{"position":"org.apache.commons.codec.net.BCodec:176","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String value) throws org.apache.commons.codec.DecoderException {\n    if (!(value.contains(\"[\"))) {\n        {\n            if (value == null) {\n                return null;\n            } \n            try {\n                return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)"},"failures":[66],"tindex":"9cbfab1a-2ed4-11e6-b5b4-3343521e3446","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:421","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEqual(final java.lang.String text1, final java.lang.String text2) {\n    if (text2.startsWith(text2)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return colognePhonetic(text1).equals(colognePhonetic(text2));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"text2","line":"text2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[67],"tindex":"9cbfab1b-2ed4-11e6-b5b4-7758e3c0e65c","method":{"position":"org.apache.commons.codec.Charsets:86","type":"CtMethodImpl","sourcecode":"public static java.nio.charset.Charset toCharset(final java.lang.String charset) {\n    if ((charset.length()) == 0) {\n        {\n            return charset == null ? java.nio.charset.Charset.defaultCharset() : java.nio.charset.Charset.forName(charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"charset"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"9cbff93c-2ed4-11e6-b5b4-f1b918074708","method":{"position":"org.apache.commons.codec.digest.DigestUtils:66","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest getDigest(final java.lang.String algorithm) {\n    if (algorithm == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.security.MessageDigest.getInstance(algorithm);\n            } catch (final java.security.NoSuchAlgorithmException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"algorithm"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:189","type":"CtBinaryOperatorImpl","sourcecode":"(sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))"},"failures":[],"tindex":"9cbff93d-2ed4-11e6-b5b4-0b2353f0d2e3","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:392","type":"CtMethodImpl","sourcecode":"private static int hPermOp(int a, final int n, final int m) {\n    if ((a >= n) && (sumLength <= m)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ((a << (16 - n)) ^ a) & m;\n            a = (a ^ t) ^ (t >>> (16 - n));\n            return a;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sumLength":"a","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"m","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"n"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"9cc0204e-2ed4-11e6-b5b4-8b8716517a0c","method":{"position":"org.apache.commons.codec.binary.Base64:705","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final byte[] base64Data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(base64Data)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.codec.binary.Base64().decode(base64Data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"base64Data"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:162","type":"CtBinaryOperatorImpl","sourcecode":"nameLength > (org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX)"},"failures":[68,69,70,71,72],"tindex":"9cc0204f-2ed4-11e6-b5b4-8ddbe1f369f1","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:237","type":"CtMethodImpl","sourcecode":"private static boolean isWhitespace(final int b) {\n    if (b > b) {\n        {\n            return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameLength":"b","org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX":"b"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[73,74,75,76,77,78,79,1,80,81,2,3,82,83,84,85,86,87,88,89,90],"tindex":"9cc04760-2ed4-11e6-b5b4-8d6208c39cac","method":{"position":"org.apache.commons.codec.digest.HmacUtils:174","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final java.lang.String algorithm, final byte[] key) {\n    if (algorithm == null) {\n        {\n            if (key == null) {\n                throw new java.lang.IllegalArgumentException(\"Null key\");\n            } \n            try {\n                final javax.crypto.spec.SecretKeySpec javax.crypto.spec.SecretKeySpec = new javax.crypto.spec.SecretKeySpec(key , algorithm);\n                final javax.crypto.Mac javax.crypto.Mac = javax.crypto.Mac.getInstance(algorithm);\n                mac.init(keySpec);\n                return mac;\n            } catch (final java.security.NoSuchAlgorithmException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            } catch (final java.security.InvalidKeyException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"algorithm"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"commons-codec","transformationCount":27,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
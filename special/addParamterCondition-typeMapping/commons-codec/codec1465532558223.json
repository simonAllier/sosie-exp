{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":51,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":38,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":95,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":45,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":44,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty":57,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":18,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":96,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":60,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":14,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":92,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":53,"org.apache.commons.codec.binary.Base64Test.testTriplets":72,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":65,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":8,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":6,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":9,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":94,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":82,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":23,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":29,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":90,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":77,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":20,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":78,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":81,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":10,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":68,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":79,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":80,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":50,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":39,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":52,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":26,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":3,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":37,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":85,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":7,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":1,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":43,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":47,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":98,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":54,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":56,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":91,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":42,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":25,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":64,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":36,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":97,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":55,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":2,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":59,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":13,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":89,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":32,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":49,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":46,"org.apache.commons.codec.binary.Base64Test.testBase64":88,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":17,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":35,"org.apache.commons.codec.binary.Base64Test.testUUID":74,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":83,"org.apache.commons.codec.binary.Base64Test.testSingletons":86,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":99,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":31,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":58,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":4,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":61,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":15,"org.apache.commons.codec.binary.Base64Test.testPairs":73,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":30,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":24,"org.apache.commons.codec.binary.Base64Test.testCodec112":84,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":11,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty":67,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":5,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":27,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":22,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":93,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":63,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":100,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":69,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":71,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":41,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":28,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":21,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":16,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":33,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":76,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":87,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull":40,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":48,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1":0,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":62,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":70,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":12,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":34,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":75,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":66},"transformations":[{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[],"tindex":"f6ed2aa4-2ec2-11e6-830a-d720cfcdd02c","method":{"position":"org.apache.commons.codec.net.URLCodec:334","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj.endsWith(obj)) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof byte[]) {\n                return decode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"obj","line":"obj"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[0],"tindex":"f6ee1505-2ec2-11e6-830a-0309d3547e21","method":{"position":"org.apache.commons.codec.binary.StringUtils:302","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringIso8859_1(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:527","type":"CtVariableReadImpl","sourcecode":"startsWith"},"failures":[1,2,3,4,5],"tindex":"f6ee3c16-2ec2-11e6-830a-7946d00f534d","method":{"position":"org.apache.commons.codec.binary.Base64:639","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe) {\n    if (isChunked) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, urlSafe, java.lang.Integer.java.lang.Integer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startsWith":"isChunked"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"f6ee3c17-2ec2-11e6-830a-2fe0bb799041","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:291","type":"CtMethodImpl","sourcecode":"int readResults(final byte[] b, final int bPos, final int bAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (b == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((context.byte[]) != null) {\n                final int int = java.lang.Math.min(available(context), bAvail);\n                java.lang.System.arraycopy(context.byte[], context.int, b, bPos, len);\n                context.int += len;\n                if ((context.int) >= (context.int)) {\n                    context.byte[] = null;\n                } \n                return len;\n            } \n            return context.boolean ? org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int : 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:163","type":"CtBinaryOperatorImpl","sourcecode":"(curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))"},"failures":[],"tindex":"f6ee6328-2ec2-11e6-830a-c1c08c91c192","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:962","type":"CtMethodImpl","sourcecode":"public void appendAlternate(final char value) {\n    if ((value == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(value))) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int)) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prev":"value","curr":"value"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"tindex":"f6ee8a39-2ec2-11e6-830a-0d7ec2a22072","method":{"position":"org.apache.commons.codec.language.bm.Rule:353","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang.endsWith(lang)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.get(nameType).get(rt).get(lang);\n            if (rules == null) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n            } \n            return rules;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"lang","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"lang"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || ((str.length()) == 0)"},"failures":[],"tindex":"f6eeb14a-2ec2-11e6-830a-059986b4e07c","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:104","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final java.lang.String keyBytes) {\n    if (keyBytes.contains(\"=\")) {\n        {\n            if ((keyBytes == null) || ((str.length()) == 0)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"keyBytes"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:283","type":"CtVariableReadImpl","sourcecode":"useHex"},"failures":[23,24,25,26,27],"tindex":"f6eeb14b-2ec2-11e6-830a-17a1af4bef16","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:220","type":"CtMethodImpl","sourcecode":"private static int encodeByte(final int b, final boolean encode, final java.io.ByteArrayOutputStream buffer) {\n    if (encode) {\n        {\n            if (encode) {\n                return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n            } else {\n                buffer.write(b);\n                return 1;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"useHex":"encode"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[],"tindex":"f6eed85c-2ec2-11e6-830a-b782a596e9fa","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:482","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final java.lang.String basen) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(basen, 0, 5, \"CHORE\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return isInAlphabet(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(basen), true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"basen"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtBinaryOperatorImpl","sourcecode":"to == terminator"},"failures":[],"tindex":"f6eed85d-2ec2-11e6-830a-ed144941003c","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:260","type":"CtMethodImpl","sourcecode":"public void setMaxCodeLen(final int maxCodeLen) {\n    if (maxCodeLen == maxCodeLen) {\n        {\n            org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"terminator":"maxCodeLen","to":"maxCodeLen"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[28,29,30,31],"tindex":"f6eeff6e-2ec2-11e6-830a-15af539080a9","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:360","type":"CtMethodImpl","sourcecode":"public java.lang.String encodeAsString(final byte[] pArray) {\n    if (pArray == pArray) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newStringUtf8(encode(pArray));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"pArray","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"pArray"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[32,33],"tindex":"f6eeff6f-2ec2-11e6-830a-f9c3dd28c1a1","method":{"position":"org.apache.commons.codec.digest.HmacUtils:633","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"f6ef2680-2ec2-11e6-830a-0b74944c9cbf","method":{"position":"org.apache.commons.codec.digest.HmacUtils:658","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (valueToDigest == null) {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(key)) {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key), valueToDigest).doFinal();\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"key"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtBinaryOperatorImpl","sourcecode":"to == terminator"},"failures":[],"tindex":"f6ef4d91-2ec2-11e6-830a-2bd3cac194de","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:904","type":"CtMethodImpl","sourcecode":"protected char charAt(final java.lang.String value, final int index) {\n    if (index == index) {\n        {\n            if ((index < 0) || (index >= (value.length()))) {\n                return java.lang.Character.java.lang.Character.char;\n            } \n            return value.charAt(index);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"terminator":"index","to":"index"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:111","type":"CtBinaryOperatorImpl","sourcecode":"(es1 == null) || (es2 == null)"},"failures":[],"tindex":"f6ef4d92-2ec2-11e6-830a-7380bbe8d118","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:91","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.CharSequence str) {\n    if ((str == null) || (str == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n                ph.append(str);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"es1":"str","es2":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:91","type":"CtBinaryOperatorImpl","sourcecode":"len > 0"},"failures":[34,35,36,37,38],"tindex":"f6ef74a3-2ec2-11e6-830a-d5d2d65bb965","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:514","type":"CtMethodImpl","sourcecode":"private int handleJ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (index > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                    result.append('H');\n                } else {\n                    result.append('J', 'H');\n                }\n                index++;\n            } else {\n                if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n                    result.append('J', 'A');\n                } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n                    result.append('J', 'H');\n                } else if (index == ((value.length()) - 1)) {\n                    result.append('J', ' ');\n                } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n                    result.append('J');\n                } \n                if ((charAt(value, (index + 1))) == 'J') {\n                    index += 2;\n                } else {\n                    index++;\n                }\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtInvocationImpl","sourcecode":"line.contains(\"=\")"},"failures":[],"tindex":"f6efe9d4-2ec2-11e6-830a-3de4070fc3f1","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:104","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final java.lang.String keyBytes) {\n    if (keyBytes.contains(\"=\")) {\n        {\n            if ((keyBytes == null) || ((str.length()) == 0)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"keyBytes"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"f6efe9d5-2ec2-11e6-830a-bd07d7eee3c6","method":{"position":"org.apache.commons.codec.language.Caverphone:101","type":"CtMethodImpl","sourcecode":"public boolean isCaverphoneEqual(final java.lang.String str1, final java.lang.String str2) {\n    if (str1 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.caverphone(str1).equals(org.apache.commons.codec.language.Caverphone.this.caverphone(str2));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"str1"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[39],"tindex":"f6f010e6-2ec2-11e6-830a-add99d1ab31c","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:262","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String original) {\n    if ((original.length()) == 0) {\n        {\n            return org.apache.commons.codec.digest.UnixCrypt.crypt(original.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"original"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"f6f010e7-2ec2-11e6-830a-935911ef5d2e","method":{"position":"org.apache.commons.codec.digest.HmacUtils:658","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (valueToDigest == null) {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(key)) {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key), valueToDigest).doFinal();\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"valueToDigest"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[40],"tindex":"f6f010e8-2ec2-11e6-830a-cbe1d2d91259","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:467","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:310","type":"CtBinaryOperatorImpl","sourcecode":"lastChar == 'A'"},"failures":[41,42,43,44,45,46,47,48,49],"tindex":"f6f037f9-2ec2-11e6-830a-69dc3fbf9a14","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:194","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (ch == 'A') {\n        {\n            return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u');\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lastChar":"ch"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[],"tindex":"f6f037fa-2ec2-11e6-830a-115f9df497d2","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object other) {\n    if (other == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.this) == other) {\n                return true;\n            } \n            if (!(other instanceof org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)) {\n                return false;\n            } \n            return toString().equals(((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)(other)).toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"other"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtInvocationImpl","sourcecode":"input.startsWith((l + \" \"))"},"failures":[50,51],"tindex":"f6f05f0b-2ec2-11e6-830a-e125742d7618","method":{"position":"org.apache.commons.codec.digest.HmacUtils:402","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key.startsWith((valueToDigest + \" \"))) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"key","l":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:344","type":"CtBinaryOperatorImpl","sourcecode":"(index > 0) && (index < (string.length()))"},"failures":[],"tindex":"f6f05f0c-2ec2-11e6-830a-93cd409e3df3","method":{"position":"org.apache.commons.codec.digest.B64:54","type":"CtMethodImpl","sourcecode":"static void b64from24bit(final byte b2, final byte b1, final byte b0, final int outLen, final java.lang.StringBuilder buffer) {\n    if ((outLen % 3) != 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((outLen > 0) && (index < (buffer.length()))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    int int = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255);\n                    int int = outLen;\n                    while ((n--) > 0) {\n                        buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)));\n                        w >>= 6;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"buffer","index":"outLen"},"type":"special","returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[52],"tindex":"f6f05f0d-2ec2-11e6-830a-4555ed243ccb","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:486","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtInvocationImpl","sourcecode":"line.contains(\"=\")"},"failures":[53,54],"tindex":"f6f0861e-2ec2-11e6-830a-9b380df52075","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:216","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) {\n    if (value.contains(\"=\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return doubleMetaphone(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[55],"tindex":"f6f0861f-2ec2-11e6-830a-d1e3eeea68b6","method":{"position":"org.apache.commons.codec.digest.DigestUtils:719","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final java.lang.String data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[56,34,35,57,58,59,60,61,62,63,64,36,37,38,65,66,67,68],"tindex":"f6f08620-2ec2-11e6-830a-575b2d253476","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:888","type":"CtMethodImpl","sourcecode":"private java.lang.String cleanInput(java.lang.String input) {\n    if (input == null) {\n        {\n            if (input == null) {\n                return null;\n            } \n            input = input.trim();\n            if ((input.length()) == 0) {\n                return null;\n            } \n            return input.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[52],"tindex":"f6f0ad31-2ec2-11e6-830a-b12b87ec17a6","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:574","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.nio.charset.Charset charset) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str.getBytes(charset)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:378","type":"CtBinaryOperatorImpl","sourcecode":"(i % 3) != 0"},"failures":[],"tindex":"f6f0ad32-2ec2-11e6-830a-b123539fd5ad","method":{"position":"org.apache.commons.codec.digest.B64:54","type":"CtMethodImpl","sourcecode":"static void b64from24bit(final byte b2, final byte b1, final byte b0, final int outLen, final java.lang.StringBuilder buffer) {\n    if ((outLen % 3) != 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((outLen > 0) && (index < (buffer.length()))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    int int = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255);\n                    int int = outLen;\n                    while ((n--) > 0) {\n                        buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)));\n                        w >>= 6;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"outLen"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[69,70,71,72,1,73,74,75,76,77,78,79,80,81,82,83,2,84,85,86,3,87,4,88,89,90,91,92,93,94,95,96,5,97,98,99],"tindex":"f6f0d443-2ec2-11e6-830a-9da785da4786","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:515","type":"CtMethodImpl","sourcecode":"public long getEncodedLength(final byte[] pArray) {\n    if (pArray == pArray) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            long long = ((((pArray.int) + (int)) - 1) / (int)) * ((long)(int));\n            if ((int) > 0) {\n                len += (((len + (int)) - 1) / (int)) * (int);\n            } \n            return len;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"pArray","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"pArray"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22],"tindex":"f6f0d444-2ec2-11e6-830a-ffa096dd3343","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:383","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String input) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (input == null) {\n                {\n                    final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.Lang.guessLanguages(input);\n                    return encode(input, languageSet);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"f6f0fb55-2ec2-11e6-830a-db11883baf8e","method":{"position":"org.apache.commons.codec.digest.DigestUtils:499","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final byte[] data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[],"tindex":"f6f0fb56-2ec2-11e6-830a-e333e641901e","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:383","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String input) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (input == null) {\n                {\n                    final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.Lang.guessLanguages(input);\n                    return encode(input, languageSet);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:275","type":"CtBinaryOperatorImpl","sourcecode":"(mapped != '0') && (mapped != last)"},"failures":[],"tindex":"f6f0fb57-2ec2-11e6-830a-6141a49ac08c","method":{"position":"org.apache.commons.codec.language.Metaphone:351","type":"CtMethodImpl","sourcecode":"private boolean isNextChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if ((c != '0') && (mapped != c)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if ((index >= 0) && (index < ((string.length()) - 1))) {\n                matches = (string.charAt((index + 1))) == c;\n            } \n            return matches;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"c","mapped":"c"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[100],"tindex":"f6f19798-2ec2-11e6-830a-a706a227a477","method":{"position":"org.apache.commons.codec.digest.HmacUtils:526","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha384(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"commons-codec","transformationCount":37,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
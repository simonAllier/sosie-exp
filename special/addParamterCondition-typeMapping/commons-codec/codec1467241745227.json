{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":54,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":224,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":238,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":137,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":245,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":243,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":231,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":168,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":193,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":226,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":138,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":45,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":211,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":70,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":233,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":61,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData":155,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":7,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":60,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":122,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":253,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":186,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":185,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":100,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":101,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":237,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":256,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":105,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":184,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":254,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData":153,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":102,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":159,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":103,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":42,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":68,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":188,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":55,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":85,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":25,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":115,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":271,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":51,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":192,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":275,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":94,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":199,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":220,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":161,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":136,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":207,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":264,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":200,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":242,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":93,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":148,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":234,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":257,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":53,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":49,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":129,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":249,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":3,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":88,"org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull":218,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":266,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":140,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":14,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":124,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":67,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":109,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":230,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":182,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":261,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":190,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":219,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":146,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":75,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":240,"org.apache.commons.codec.binary.Base64Test.testUUID":97,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":209,"org.apache.commons.codec.binary.Base64Test.testSingletons":114,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":145,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":72,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":119,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":86,"org.apache.commons.codec.binary.Base64Test.testPairs":96,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":71,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":9,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":227,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":152,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":223,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":232,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":177,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":90,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":203,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":187,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":228,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":38,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":112,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":215,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":15,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":113,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":144,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":189,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":63,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":236,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":135,"org.apache.commons.codec.binary.HexTest.testEncodeEmpty":23,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":56,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":258,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":133,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":41,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":171,"org.apache.commons.codec.digest.B64Test.testB64from24bit":217,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":259,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":206,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":27,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":79,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":99,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":205,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":273,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":247,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":32,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":83,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":82,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":248,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":255,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":163,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":274,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":29,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":132,"org.apache.commons.codec.binary.HexTest.testCustomCharset":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":244,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":263,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":62,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData":151,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":198,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":149,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":197,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":212,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":272,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":28,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":33,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":174,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":173,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":64,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":52,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":84,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":80,"org.apache.commons.codec.binary.Base64Test.testTriplets":91,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":76,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":276,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":180,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":178,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":181,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":2,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":147,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":77,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":195,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":106,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":246,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":127,"org.apache.commons.codec.net.QCodecTest.testLetUsMakeCloverHappy":13,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":36,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":95,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":175,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":131,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":164,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":202,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":241,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":26,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":31,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":43,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":139,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":208,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":5,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":6,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":39,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":191,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":24,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":110,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":81,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":50,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":196,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":121,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":179,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":150,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":262,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":213,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":57,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":160,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":154,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":128,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":183,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":158,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":229,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":225,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":17,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":216,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":251,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":20,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":130,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":74,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":252,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":210,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":194,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":156,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":37,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":134,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":204,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":118,"org.apache.commons.codec.binary.HexTest.testDencodeEmpty":277,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":87,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":123,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":167,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":104,"org.apache.commons.codec.binary.Base64Test.testBase64":120,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":172,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":46,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":48,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved":269,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":58,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":107,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":66,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":170,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":169,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":22,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":44,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":8,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":0,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":65,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":125,"org.apache.commons.codec.binary.Base64Test.testCodec112":111,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":165,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":265,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":1,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":143,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":92,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":69,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":260,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":89,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":278,"org.apache.commons.codec.binary.Base64Test.testCodec68":116,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":157,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":18,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":78,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":162,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":126,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":141,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":235,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NINO_NoChange":268,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":59,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":176,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":214,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":73,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":34,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":117,"org.apache.commons.codec.language.SoundexTest.testDifference":16,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":221,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":201,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":10,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":142,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange":250,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":166,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":47,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":239,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":108,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":270,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":222,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":267},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"79c2807e-3e4e-11e6-aed0-2bbbdd78d8a8","method":{"position":"org.apache.commons.codec.binary.Hex:108","type":"CtMethodImpl","sourcecode":"public static char[] encodeHex(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (data == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHex(data, true);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[0],"tindex":"79c2f5af-3e4e-11e6-aed0-855d3a819568","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:71","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final byte[] keyBytes) {\n    if (keyBytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"keyBytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:191","type":"CtBinaryOperatorImpl","sourcecode":"(sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))"},"failures":[],"tindex":"79c2f5b0-3e4e-11e6-aed0-0fbd3834d226","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:237","type":"CtMethodImpl","sourcecode":"private static boolean isWhitespace(final int b) {\n    if (b == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((b >= b) && (sumLength <= b)) {\n                {\n                    return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sumLength":"b","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"b","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)"},"failures":[],"tindex":"79c31cc1-3e4e-11e6-aed0-8586c20318f9","method":{"position":"org.apache.commons.codec.language.Metaphone:360","type":"CtMethodImpl","sourcecode":"private boolean regionMatch(final java.lang.StringBuilder string, final int index, final java.lang.String test) {\n    if (test.startsWith(test)) {\n        {\n            boolean boolean = false;\n            if ((index >= 0) && (((index + (test.length())) - 1) < (string.length()))) {\n                final java.lang.String java.lang.String = string.substring(index, (index + (test.length())));\n                matches = substring.equals(test);\n            } \n            return matches;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"test","line":"test"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[1,2],"tindex":"79c343d2-3e4e-11e6-aed0-ef81e402e4ac","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:191","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(final long n) throws java.io.IOException {\n    if (n < 0) {\n        {\n            if (n < 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (n < 0) {\n                        throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n                    } \n                    final byte[] byte[] = new byte[512];\n                    long long = n;\n                    while (todo > 0) {\n                        int int = ((int)(java.lang.Math.min(b.int, todo)));\n                        len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n                        if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n                            break;\n                        } \n                        todo -= len;\n                    }\n                    return n - todo;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:392","type":"CtBinaryOperatorImpl","sourcecode":"(body.startsWith(\"|\")) || (body.endsWith(\"|\"))"},"failures":[],"tindex":"79c343d3-3e4e-11e6-aed0-d7922424596b","method":{"position":"org.apache.commons.codec.language.bm.Rule:198","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            if ((input.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"body":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[3,4,5,6,7,8,9,10,11],"tindex":"79c36ae4-3e4e-11e6-aed0-efd62292c197","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:409","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == bytes) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"bytes","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"79c36ae5-3e4e-11e6-aed0-070bb518c983","method":{"position":"org.apache.commons.codec.digest.HmacUtils:337","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key), valueToDigest).doFinal();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:192","type":"CtBinaryOperatorImpl","sourcecode":"((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)"},"failures":[],"tindex":"79c391f6-3e4e-11e6-aed0-811fde2a1671","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:253","type":"CtMethodImpl","sourcecode":"public void addLeft(final char ch) {\n    if (((ch == ch) || ('H' == ch)) || ('W' == preHWChar)) {\n        {\n            (int)++;\n            char[][getNextPos()] = ch;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mappedChar":"ch","preHWChar":"ch","firstCode":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:616","type":"CtVariableReadImpl","sourcecode":"slavoGermanic"},"failures":[12,13],"tindex":"79c391f7-3e4e-11e6-aed0-c3ea8c769fbb","method":{"position":"org.apache.commons.codec.net.QCodec:355","type":"CtMethodImpl","sourcecode":"public void setEncodeBlanks(final boolean b) {\n    if (b) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.net.QCodec.this.boolean = b;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"slavoGermanic":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[],"tindex":"79c391f8-3e4e-11e6-aed0-f52293d22261","method":{"position":"org.apache.commons.codec.digest.DigestUtils:184","type":"CtMethodImpl","sourcecode":"public static byte[] md2(final byte[] data) {\n    if (data != null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[],"tindex":"79c3b909-3e4e-11e6-aed0-fbecad4010c3","method":{"position":"org.apache.commons.codec.binary.StringUtils:162","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUsAscii(final java.lang.String string) {\n    if ((string.length()) > 0) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"string"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:339","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.String"},"failures":[],"tindex":"79c3b90a-3e4e-11e6-aed0-c5200348ddf2","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:334","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof byte[])) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\");\n            } \n            return encode(((byte[])(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[],"tindex":"79c3b90b-3e4e-11e6-aed0-77c9b9844c5f","method":{"position":"org.apache.commons.codec.digest.DigestUtils:362","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] sha(final java.lang.String data) {\n    if ((data.length()) > 0) {\n        {\n            if (data == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((data.length()) > 0) {\n                        {\n                            return org.apache.commons.codec.digest.DigestUtils.sha1(data);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[14],"tindex":"79c3b90c-3e4e-11e6-aed0-19cac1a9008d","method":{"position":"org.apache.commons.codec.digest.DigestUtils:657","type":"CtMethodImpl","sourcecode":"public static byte[] sha512(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha512Digest(), data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"79c3e01d-3e4e-11e6-aed0-3388b8206e5d","method":{"position":"org.apache.commons.codec.net.QCodec:169","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(bytes)) {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    boolean boolean = false;\n                    for (final byte byte : bytes) {\n                        if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                            hasUnderscores = true;\n                            break;\n                        } \n                    }\n                    if (hasUnderscores) {\n                        final byte[] byte[] = new byte[bytes.int];\n                        for (int int = 0 ; i < (bytes.int) ; i++) {\n                            final byte byte = bytes[i];\n                            if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                                tmp[i] = b;\n                            } else {\n                                tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                            }\n                        }\n                        return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n                    } \n                    return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtInvocationImpl","sourcecode":"target.equals(element)"},"failures":[15,16,17],"tindex":"79c3e01e-3e4e-11e6-aed0-e9c2a56c551f","method":{"position":"org.apache.commons.codec.language.SoundexUtils:109","type":"CtMethodImpl","sourcecode":"static int differenceEncoded(final java.lang.String es1, final java.lang.String es2) {\n    if ((es1.length()) == 0) {\n        {\n            if (es1.equals(es2)) {\n                {\n                    if ((es1 == null) || (es2 == null)) {\n                        return 0;\n                    } \n                    final int int = java.lang.Math.min(es1.length(), es2.length());\n                    int int = 0;\n                    for (int int = 0 ; i < lengthToMatch ; i++) {\n                        if ((es1.charAt(i)) == (es2.charAt(i))) {\n                            diff++;\n                        } \n                    }\n                    return diff;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"es1","element":"es2"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"79c3e01f-3e4e-11e6-aed0-ab544f4175f1","method":{"position":"org.apache.commons.codec.digest.DigestUtils:499","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:119","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'E'"},"failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,14,45,46],"tindex":"79c3e020-3e4e-11e6-aed0-f5cb64561aab","method":{"position":"org.apache.commons.codec.binary.Hex:140","type":"CtMethodImpl","sourcecode":"protected static char[] encodeHex(final byte[] data, final char[] toDigits) {\n    if ((toDigits[1]) == 'E') {\n        {\n            final int int = data.int;\n            final char[] char[] = new char[l << 1];\n            for (int int = 0, int int = 0 ; i < l ; i++) {\n                out[(j++)] = toDigits[((240 & (data[i])) >>> 4)];\n                out[(j++)] = toDigits[(15 & (data[i]))];\n            }\n            return out;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"toDigits"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:290","type":"CtBinaryOperatorImpl","sourcecode":"lineLength > 0"},"failures":[47,48,49,50],"tindex":"79c40731-3e4e-11e6-aed0-b92f84cee37e","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:800","type":"CtMethodImpl","sourcecode":"private boolean conditionCH0(final java.lang.String value, final int index) {\n    if ((index < 0) || (index < 0)) {\n        {\n            if (index > 0) {\n                {\n                    if (index != 0) {\n                        return false;\n                    } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n                        return false;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineLength":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:265","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[51],"tindex":"79c40732-3e4e-11e6-aed0-c3235d6fd7f2","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:152","type":"CtMethodImpl","sourcecode":"public byte[] toByteArray(final java.lang.String ascii) {\n    if (ascii == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ascii == null) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii.toCharArray());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"ascii"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:270","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[47,48,52,53,49,50,54],"tindex":"79c40733-3e4e-11e6-aed0-d5c6c2ee3635","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:550","type":"CtMethodImpl","sourcecode":"private int handleL(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index == 0) {\n        {\n            if ((charAt(value, (index + 1))) == 'L') {\n                if (conditionL0(value, index)) {\n                    result.appendPrimary('L');\n                } else {\n                    result.append('L');\n                }\n                index += 2;\n            } else {\n                index++;\n                result.append('L');\n            }\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"79c40734-3e4e-11e6-aed0-25baac136e98","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:250","type":"CtMethodImpl","sourcecode":"private static void parseRules(final java.util.Scanner scanner, final java.lang.String location, final java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>> ruleMapping, final java.util.Map<java.lang.Character, java.lang.Character> asciiFoldings) {\n    if (location.endsWith(location)) {\n        {\n            if (location == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    int int = 0;\n                    boolean boolean = false;\n                    while (scanner.hasNextLine()) {\n                        currentLine++;\n                        final java.lang.String java.lang.String = scanner.nextLine();\n                        java.lang.String java.lang.String = rawLine;\n                        if (inMultilineComment) {\n                            if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                                inMultilineComment = false;\n                            } \n                            continue;\n                        } \n                        if (line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                            inMultilineComment = true;\n                        } else {\n                            final int int = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String);\n                            if (cmtI >= 0) {\n                                line = line.substring(0, cmtI);\n                            } \n                            line = line.trim();\n                            if ((line.length()) == 0) {\n                                continue;\n                            } \n                            if (line.contains(\"=\")) {\n                                final java.lang.String[] java.lang.String[] = line.split(\"=\");\n                                if ((parts.int) != 2) {\n                                    throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                                } else {\n                                    final java.lang.String java.lang.String = parts[0];\n                                    final java.lang.String java.lang.String = parts[1];\n                                    if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n                                        throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n                                    } \n                                    asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n                                }\n                            } else {\n                                final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                                if ((parts.int) != 4) {\n                                    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                                } else {\n                                    try {\n                                        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n                                        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n                                        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n                                        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n                                        final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n                                        final char char = r.java.lang.String.charAt(0);\n                                        java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n                                        if (rules == null) {\n                                            rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                                            ruleMapping.put(patternKey, rules);\n                                        } \n                                        rules.add(r);\n                                    } catch (final java.lang.IllegalArgumentException e) {\n                                        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"location"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"79c42e45-3e4e-11e6-aed0-3d73b80b7b04","method":{"position":"org.apache.commons.codec.digest.DigestUtils:374","type":"CtMethodImpl","sourcecode":"public static byte[] sha1(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (data == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.DigestUtils.getSha1Digest().digest(data);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:176","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"79c42e46-3e4e-11e6-aed0-d9f7efd90867","method":{"position":"org.apache.commons.codec.digest.DigestUtils:362","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] sha(final java.lang.String data) {\n    if ((data.length()) > 0) {\n        {\n            if (data == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((data.length()) > 0) {\n                        {\n                            return org.apache.commons.codec.digest.DigestUtils.sha1(data);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"79c42e47-3e4e-11e6-aed0-f1b49afd41bb","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:298","type":"CtMethodImpl","sourcecode":"public static java.lang.String toAsciiString(final byte[] raw) {\n    if (raw == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtInvocationImpl","sourcecode":"incl.contains(\" \")"},"failures":[55],"tindex":"79c45558-3e4e-11e6-aed0-71cfa6cf7334","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:262","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String original) {\n    if (original.contains(\" \")) {\n        {\n            return org.apache.commons.codec.digest.UnixCrypt.crypt(original.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"incl":"original"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144],"tindex":"79c45559-3e4e-11e6-aed0-9789bd477aa4","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:291","type":"CtMethodImpl","sourcecode":"int readResults(final byte[] b, final int bPos, final int bAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (bAvail < 0) {\n        {\n            if ((context.byte[]) != null) {\n                final int int = java.lang.Math.min(available(context), bAvail);\n                java.lang.System.arraycopy(context.byte[], context.int, b, bPos, len);\n                context.int += len;\n                if ((context.int) >= (context.int)) {\n                    context.byte[] = null;\n                } \n                return len;\n            } \n            return context.boolean ? org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int : 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bAvail"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[],"tindex":"79c4555a-3e4e-11e6-aed0-65d36ab680d7","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:191","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(final long n) throws java.io.IOException {\n    if (n < 0) {\n        {\n            if (n < 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (n < 0) {\n                        throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n                    } \n                    final byte[] byte[] = new byte[512];\n                    long long = n;\n                    while (todo > 0) {\n                        int int = ((int)(java.lang.Math.min(b.int, todo)));\n                        len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n                        if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n                            break;\n                        } \n                        todo -= len;\n                    }\n                    return n - todo;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"79c4555b-3e4e-11e6-aed0-c3cce34cc5c0","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:298","type":"CtMethodImpl","sourcecode":"public static java.lang.String toAsciiString(final byte[] raw) {\n    if (raw == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[145,12,146,147,148],"tindex":"79c47c6c-3e4e-11e6-aed0-379a02bba3fa","method":{"position":"org.apache.commons.codec.net.QCodec:153","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            final byte[] byte[] = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet, bytes);\n            if (org.apache.commons.codec.net.QCodec.this.boolean) {\n                for (int int = 0 ; i < (data.int) ; i++) {\n                    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                    } \n                }\n            } \n            return data;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Hex:177","type":"CtBinaryOperatorImpl","sourcecode":"digit == (-1)"},"failures":[],"tindex":"79c47c6d-3e4e-11e6-aed0-9dde93786f46","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:647","type":"CtMethodImpl","sourcecode":"private int handleSC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (index == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 2))) == 'H') {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n                        result.append(\"X\", \"SK\");\n                    } else {\n                        result.append(\"SK\");\n                    }\n                } else {\n                    if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n                        result.append('X', 'S');\n                    } else {\n                        result.append('X');\n                    }\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                result.append('S');\n            } else {\n                result.append(\"SK\");\n            }\n            return index + 3;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"digit":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[],"tindex":"79c47c6e-3e4e-11e6-aed0-d794eab624f6","method":{"position":"org.apache.commons.codec.language.bm.Languages:213","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.String language) {\n    if ((language.length()) == 0) {\n        {\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"language"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"79c47c6f-3e4e-11e6-aed0-31692d24db20","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:816","type":"CtMethodImpl","sourcecode":"private boolean conditionCH1(final java.lang.String value, final int index) {\n    if ((value == null) || ((txt.length()) == 0)) {\n        {\n            return ((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"T\", \"S\"))) || (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (index == 0)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])) || ((index + 1) == ((value.length()) - 1))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"79c4a380-3e4e-11e6-aed0-4f9fc1c8dac8","method":{"position":"org.apache.commons.codec.language.bm.Rule:198","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            if ((input.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)"},"failures":[],"tindex":"79c4a381-3e4e-11e6-aed0-c7ae06a74c68","method":{"position":"org.apache.commons.codec.binary.StringUtils:238","type":"CtMethodImpl","sourcecode":"private static java.lang.IllegalStateException newIllegalStateException(final java.lang.String charsetName, final java.io.UnsupportedEncodingException e) {\n    if (charsetName == null) {\n        {\n            if (charsetName.startsWith(charsetName)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new java.lang.IllegalStateException(((charsetName + \": \") + e));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"charsetName","line":"charsetName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[149],"tindex":"79c4a382-3e4e-11e6-aed0-c526ba0f1346","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object other) {\n    if (other == null) {\n        {\n            if ((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.this) == other) {\n                return true;\n            } \n            if (!(other instanceof org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)) {\n                return false;\n            } \n            return toString().equals(((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)(other)).toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"other"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:289","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"79c4a383-3e4e-11e6-aed0-fb604e0d547b","method":{"position":"org.apache.commons.codec.language.bm.Rule:531","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:153","type":"CtBinaryOperatorImpl","sourcecode":"(curr == 'P') && (next == 'H')"},"failures":[],"tindex":"79c4a384-3e4e-11e6-aed0-1f2a4d2f0151","method":{"position":"org.apache.commons.codec.language.Metaphone:351","type":"CtMethodImpl","sourcecode":"private boolean isNextChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if ((c == 'P') && (c == 'H')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if ((index >= 0) && (index < ((string.length()) - 1))) {\n                matches = (string.charAt((index + 1))) == c;\n            } \n            return matches;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"next":"c","curr":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"79c4ca95-3e4e-11e6-aed0-f76076d3cfc6","method":{"position":"org.apache.commons.codec.net.QCodec:169","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(bytes)) {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    boolean boolean = false;\n                    for (final byte byte : bytes) {\n                        if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                            hasUnderscores = true;\n                            break;\n                        } \n                    }\n                    if (hasUnderscores) {\n                        final byte[] byte[] = new byte[bytes.int];\n                        for (int int = 0 ; i < (bytes.int) ; i++) {\n                            final byte byte = bytes[i];\n                            if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                                tmp[i] = b;\n                            } else {\n                                tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                            }\n                        }\n                        return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n                    } \n                    return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[150],"tindex":"79c4ca96-3e4e-11e6-aed0-4d9b76c82bad","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:87","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n                salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n            } \n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"salt"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"79c4ca97-3e4e-11e6-aed0-6996c599e4ef","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:175","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (((str.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            sBuf.append(str.charAt(0));\n            char char;\n            char char;\n            last = '*';\n            for (int int = 0 ; i < (str.length()) ; i++) {\n                current = getMappingCode(str.charAt(i));\n                if (current == last) {\n                    continue;\n                } else if (current != 0) {\n                    sBuf.append(current);\n                } \n                last = current;\n            }\n            return sBuf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[39,40,41,43,44,14,45],"tindex":"79c4ca98-3e4e-11e6-aed0-7b3a918982d1","method":{"position":"org.apache.commons.codec.digest.DigestUtils:49","type":"CtMethodImpl","sourcecode":"private static byte[] digest(final java.security.MessageDigest digest, final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.updateDigest(digest, data).digest();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:53","type":"CtBinaryOperatorImpl","sourcecode":"count == len"},"failures":[151,152,153,154,155,156,157,0,158,150,159,160],"tindex":"79c4ca99-3e4e-11e6-aed0-95e1eebd100f","method":{"position":"org.apache.commons.codec.digest.B64:72","type":"CtMethodImpl","sourcecode":"static java.lang.String getRandomSalt(final int num) {\n    if (num == num) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 1 ; i <= num ; i++) {\n                saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())));\n            }\n            return saltString.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"num","count":"num"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:339","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.String"},"failures":[],"tindex":"79c4f1aa-3e4e-11e6-aed0-45cdbe94189e","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:97","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object raw) throws org.apache.commons.codec.EncoderException {\n    if (raw instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(raw instanceof byte[])) {\n                throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n            } \n            return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[57,58,74,80,90,91,96,97,98,99,106,107,109,111,161,114,120,141,142,144],"tindex":"79c4f1ab-3e4e-11e6-aed0-fd8004448f97","method":{"position":"org.apache.commons.codec.binary.Base64:553","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData) {\n    if (binaryData == null) {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[],"tindex":"79c4f1ac-3e4e-11e6-aed0-5db2c74d6f95","method":{"position":"org.apache.commons.codec.language.SoundexUtils:109","type":"CtMethodImpl","sourcecode":"static int differenceEncoded(final java.lang.String es1, final java.lang.String es2) {\n    if ((es1.length()) == 0) {\n        {\n            if (es1.equals(es2)) {\n                {\n                    if ((es1 == null) || (es2 == null)) {\n                        return 0;\n                    } \n                    final int int = java.lang.Math.min(es1.length(), es2.length());\n                    int int = 0;\n                    for (int int = 0 ; i < lengthToMatch ; i++) {\n                        if ((es1.charAt(i)) == (es2.charAt(i))) {\n                            diff++;\n                        } \n                    }\n                    return diff;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"es1"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:144","type":"CtFieldReadImpl","sourcecode":"doEncode"},"failures":[52,162,53,49,50,163],"tindex":"79c4f1ad-3e4e-11e6-aed0-31630b49eefc","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:244","type":"CtMethodImpl","sourcecode":"public boolean isDoubleMetaphoneEqual(final java.lang.String value1, final java.lang.String value2, final boolean alternate) {\n    if (alternate) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.equals(doubleMetaphone(value1, alternate), doubleMetaphone(value2, alternate));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"doEncode":"alternate"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181],"tindex":"79c4f1ae-3e4e-11e6-aed0-a93d9be7e993","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                        str = str.substring(1);\n                    } \n                    if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                        str = str.substring(0, ((str.length()) - 1));\n                    } \n                    return str;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:101","type":"CtBinaryOperatorImpl","sourcecode":"r > 0"},"failures":[47,48,182,49,50,54,163,183],"tindex":"79c518bf-3e4e-11e6-aed0-85cdf9f1bb0a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:384","type":"CtMethodImpl","sourcecode":"private int handleD(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                    result.append('J');\n                    index += 3;\n                } else {\n                    result.append(\"TK\");\n                    index += 2;\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n                result.append('T');\n                index += 2;\n            } else {\n                result.append('T');\n                index++;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"r":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:360","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.GKQ, chr)"},"failures":[184,185,186,187,188,189,190,191,192,193,194],"tindex":"79c518c0-3e4e-11e6-aed0-c566d49513b0","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:299","type":"CtMethodImpl","sourcecode":"private static boolean arrayContains(final char[] arr, final char key) {\n    if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(arr, key)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final char char : arr) {\n                if (element == key) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"key","org.apache.commons.codec.language.ColognePhonetic.GKQ":"arr"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:274","type":"CtBinaryOperatorImpl","sourcecode":"mapped != 0"},"failures":[],"tindex":"79c518c1-3e4e-11e6-aed0-95e7e9e93005","method":{"position":"org.apache.commons.codec.language.Metaphone:342","type":"CtMethodImpl","sourcecode":"private boolean isPreviousChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (c != 0) {\n        {\n            boolean boolean = false;\n            if ((index > 0) && (index < (string.length()))) {\n                matches = (string.charAt((index - 1))) == c;\n            } \n            return matches;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapped":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[],"tindex":"79c518c2-3e4e-11e6-aed0-7b3e2d93e594","method":{"position":"org.apache.commons.codec.language.Soundex:245","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic void setMaxLength(final int maxLength) {\n    if (maxLength == 0) {\n        {\n            org.apache.commons.codec.language.Soundex.this.int = maxLength;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"maxLength"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Hex:177","type":"CtBinaryOperatorImpl","sourcecode":"digit == (-1)"},"failures":[],"tindex":"79c53fd3-3e4e-11e6-aed0-7948097ca73a","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:237","type":"CtMethodImpl","sourcecode":"private static boolean isWhitespace(final int b) {\n    if (b == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((b >= b) && (sumLength <= b)) {\n                {\n                    return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"digit":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[],"tindex":"79c53fd4-3e4e-11e6-aed0-79d5b4d0c56e","method":{"position":"org.apache.commons.codec.digest.DigestUtils:362","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] sha(final java.lang.String data) {\n    if ((data.length()) > 0) {\n        {\n            if (data == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((data.length()) > 0) {\n                        {\n                            return org.apache.commons.codec.digest.DigestUtils.sha1(data);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[195],"tindex":"79c53fd5-3e4e-11e6-aed0-3326cfa96bc2","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] raw) {\n    if (raw == raw) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(raw);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"raw","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:567","type":"CtVariableReadImpl","sourcecode":"startsWith"},"failures":[56,196,57,197,198,199,58,200,201,202,203,75,76,84,135],"tindex":"79c53fd6-3e4e-11e6-aed0-296d1778d0ac","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:110","type":"CtMethodImpl","sourcecode":"private void flush(final boolean propagate) throws java.io.IOException {\n    if (propagate) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            final int int = org.apache.commons.codec.binary.BaseNCodec.available(org.apache.commons.codec.binary.BaseNCodec.Context);\n            if (avail > 0) {\n                final byte[] byte[] = new byte[avail];\n                final int int = org.apache.commons.codec.binary.BaseNCodec.readResults(buf, 0, avail, org.apache.commons.codec.binary.BaseNCodec.Context);\n                if (c > 0) {\n                    java.io.OutputStream.write(buf, 0, c);\n                } \n            } \n            if (propagate) {\n                java.io.OutputStream.flush();\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startsWith":"propagate"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[97,105],"tindex":"79c53fd7-3e4e-11e6-aed0-4f6a69418384","method":{"position":"org.apache.commons.codec.binary.Base64:581","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64URLSafe(final byte[] binaryData) {\n    if (binaryData == null) {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"binaryData"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[165,166,171,172,173,174,175,178,180,181],"tindex":"79c566e8-3e4e-11e6-aed0-ebe84d8daa7b","method":{"position":"org.apache.commons.codec.language.bm.Rule:519","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            return input.equals(content);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"79c566e9-3e4e-11e6-aed0-9d7a1582c6a0","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:253","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeQuotedPrintable(java.util.BitSet printable, final byte[] bytes) {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[34],"tindex":"79c566ea-3e4e-11e6-aed0-eb766fbd1343","method":{"position":"org.apache.commons.codec.digest.HmacUtils:708","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:378","type":"CtBinaryOperatorImpl","sourcecode":"(i % 3) != 0"},"failures":[204,205,206,152,207,208,209,154,210,211,212,213,214,156,157,158,215,150,216,217,159,160],"tindex":"79c566eb-3e4e-11e6-aed0-ef329100a00c","method":{"position":"org.apache.commons.codec.digest.B64:54","type":"CtMethodImpl","sourcecode":"static void b64from24bit(final byte b2, final byte b1, final byte b0, final int outLen, final java.lang.StringBuilder buffer) {\n    if ((outLen % 3) != 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255);\n            int int = outLen;\n            while ((n--) > 0) {\n                buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)));\n                w >>= 6;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"outLen"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"79c566ec-3e4e-11e6-aed0-afacd6f62acf","method":{"position":"org.apache.commons.codec.digest.HmacUtils:312","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final byte[] key, final byte[] valueToDigest) {\n    if (key == key) {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"key","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"79c566ed-3e4e-11e6-aed0-f35048f69703","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:91","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.CharSequence str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n                ph.append(str);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[218],"tindex":"79c58dfe-3e4e-11e6-aed0-336326625f2f","method":{"position":"org.apache.commons.codec.net.BCodec:137","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if (charset == null) {\n        {\n            if (value == null) {\n                return null;\n            } \n            try {\n                return org.apache.commons.codec.net.BCodec.this.encodeText(value, charset);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"charset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[219,220,221,222,223,224],"tindex":"79c58dff-3e4e-11e6-aed0-f96d36f77ca4","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (!(source.contains(\"[\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return null;\n            } \n            return soundex(source, false)[0];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtInvocationImpl","sourcecode":"target.equals(element)"},"failures":[164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181],"tindex":"79c58e00-3e4e-11e6-aed0-83744ec98d4b","method":{"position":"org.apache.commons.codec.language.bm.Rule:381","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.PhonemeExpr parsePhonemeExpr(final java.lang.String ph) {\n    if (ph.equals(ph)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ph.startsWith(\"(\")) {\n                if (!(ph.endsWith(\")\"))) {\n                    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n                } \n                final java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();\n                final java.lang.String java.lang.String = ph.substring(1, ((ph.length()) - 1));\n                for (final java.lang.String java.lang.String : body.split(\"[|]\")) {\n                    phs.add(org.apache.commons.codec.language.bm.Rule.parsePhoneme(part));\n                }\n                if ((body.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n                    phs.add(new org.apache.commons.codec.language.bm.Rule.Phoneme(\"\" , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet));\n                } \n                return new org.apache.commons.codec.language.bm.Rule.PhonemeList(phs);\n            } else {\n                return org.apache.commons.codec.language.bm.Rule.parsePhoneme(ph);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"ph","element":"ph"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273],"tindex":"79c58e01-3e4e-11e6-aed0-43b5c564d643","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:351","type":"CtMethodImpl","sourcecode":"java.lang.String removeAccents(final java.lang.String accentedWord) {\n    if (accentedWord == null) {\n        {\n            if (accentedWord == null) {\n                return null;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            final int int = accentedWord.length();\n            for (int int = 0 ; i < n ; i++) {\n                final char char = accentedWord.charAt(i);\n                final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(c);\n                if (pos > (-1)) {\n                    sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n                } else {\n                    sb.append(c);\n                }\n            }\n            return sb.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"accentedWord"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[274,275,55,276],"tindex":"79c5b512-3e4e-11e6-aed0-b75694b86138","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:398","type":"CtMethodImpl","sourcecode":"private static void intToFourBytes(final int iValue, final byte[] b, int offset) {\n    if (b == null) {\n        {\n            b[(offset++)] = ((byte)(iValue & 255));\n            b[(offset++)] = ((byte)((iValue >>> 8) & 255));\n            b[(offset++)] = ((byte)((iValue >>> 16) & 255));\n            b[(offset++)] = ((byte)((iValue >>> 24) & 255));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:289","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[189],"tindex":"79c5b513-3e4e-11e6-aed0-275d127f6547","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:421","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEqual(final java.lang.String text1, final java.lang.String text2) {\n    if (text2 == null) {\n        {\n            return colognePhonetic(text1).equals(colognePhonetic(text2));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"text2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"79c5b514-3e4e-11e6-aed0-91e663d8619a","method":{"position":"org.apache.commons.codec.language.bm.Lang:113","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang instance(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        {\n            return org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Lang>.get(nameType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[141,142,144],"tindex":"79c5b515-3e4e-11e6-aed0-41aa943c6b91","method":{"position":"org.apache.commons.codec.net.BCodec:119","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if ((value.length()) == 0) {\n        {\n            if (value == null) {\n                return null;\n            } \n            return encodeText(value, charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"79c5b516-3e4e-11e6-aed0-333aebd7a528","method":{"position":"org.apache.commons.codec.digest.DigestUtils:374","type":"CtMethodImpl","sourcecode":"public static byte[] sha1(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (data == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.DigestUtils.getSha1Digest().digest(data);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:162","type":"CtBinaryOperatorImpl","sourcecode":"nameLength > (org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX)"},"failures":[],"tindex":"79c5dc27-3e4e-11e6-aed0-a7ada1af9eac","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:260","type":"CtMethodImpl","sourcecode":"public void setMaxCodeLen(final int maxCodeLen) {\n    if (maxCodeLen > (-1)) {\n        {\n            if (maxCodeLen > maxCodeLen) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameLength":"maxCodeLen","org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX":"maxCodeLen"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:131","type":"CtBinaryOperatorImpl","sourcecode":"(offset < 0) || (len < 0)"},"failures":[],"tindex":"79c5dc28-3e4e-11e6-aed0-c52ed6293e32","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:800","type":"CtMethodImpl","sourcecode":"private boolean conditionCH0(final java.lang.String value, final int index) {\n    if ((index < 0) || (index < 0)) {\n        {\n            if (index > 0) {\n                {\n                    if (index != 0) {\n                        return false;\n                    } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n                        return false;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"index","len":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[277,19,21,24],"tindex":"79c5dc29-3e4e-11e6-aed0-6b37a51eebee","method":{"position":"org.apache.commons.codec.binary.Hex:249","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object object) throws org.apache.commons.codec.DecoderException {\n    if (object == null) {\n        {\n            try {\n                final char[] char[] = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object));\n                return org.apache.commons.codec.binary.Hex.decodeHex(charArray);\n            } catch (final java.lang.ClassCastException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[],"tindex":"79c5dc2a-3e4e-11e6-aed0-11e41591b211","method":{"position":"org.apache.commons.codec.digest.HmacUtils:789","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac updateHmac(final javax.crypto.Mac mac, final java.lang.String valueToDigest) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(valueToDigest, 0, 5, \"CHORE\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            mac.reset();\n            mac.update(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n            return mac;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"valueToDigest"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtInvocationImpl","sourcecode":"input.startsWith((l + \" \"))"},"failures":[164,165,166,167,168,171,172,173,174,175,176,177,178,179,180,181],"tindex":"79c5dc2b-3e4e-11e6-aed0-8fe07979295e","method":{"position":"org.apache.commons.codec.language.bm.Lang:214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Languages.LanguageSet guessLanguages(final java.lang.String input) {\n    if (input.startsWith((input + \" \"))) {\n        {\n            final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(org.apache.commons.codec.language.bm.Lang.this.org.apache.commons.codec.language.bm.Languages.getLanguages());\n            for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n                if (rule.matches(text)) {\n                    if (rule.boolean) {\n                        langs.retainAll(rule.java.util.Set<java.lang.String>);\n                    } else {\n                        langs.removeAll(rule.java.util.Set<java.lang.String>);\n                    }\n                } \n            }\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs);\n            return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input","l":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[45],"tindex":"79c6033c-3e4e-11e6-aed0-b30dce689583","method":{"position":"org.apache.commons.codec.digest.DigestUtils:748","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String shaHex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"79c6033d-3e4e-11e6-aed0-f198b74a5f70","method":{"position":"org.apache.commons.codec.language.Caverphone:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (!(str.matches(((\"^[\" + str) + \"]{2,}$\")))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.language.Caverphone.this.caverphone(str);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[100,101,102,103],"tindex":"79c6033e-3e4e-11e6-aed0-5fc1a916e523","method":{"position":"org.apache.commons.codec.binary.Base64:720","type":"CtMethodImpl","sourcecode":"public static java.math.BigInteger decodeInteger(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            return new java.math.BigInteger(1 , org.apache.commons.codec.binary.Base64.decodeBase64(pArray));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[],"tindex":"79c6033f-3e4e-11e6-aed0-4bf987c01ccf","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                        str = str.substring(1);\n                    } \n                    if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                        str = str.substring(0, ((str.length()) - 1));\n                    } \n                    return str;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[43],"tindex":"79c62a50-3e4e-11e6-aed0-f3792adf7592","method":{"position":"org.apache.commons.codec.digest.DigestUtils:484","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final java.lang.String data) {\n    if (data.equals(\"\")) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:71","type":"CtBinaryOperatorImpl","sourcecode":"((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))"},"failures":[],"tindex":"79c62a51-3e4e-11e6-aed0-a5e687e1f91b","method":{"position":"org.apache.commons.codec.language.Soundex:229","type":"CtMethodImpl","sourcecode":"private char map(final char ch) {\n    if (((java.lang.Character.toUpperCase(ch)) != (java.lang.Character.toUpperCase(ch))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ch - 'A';\n            if ((index < 0) || (index >= (org.apache.commons.codec.language.Soundex.this.getSoundexMapping().int))) {\n                throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch));\n            } \n            return org.apache.commons.codec.language.Soundex.this.getSoundexMapping()[index];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c1":"ch","c2":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:540","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"79c62a52-3e4e-11e6-aed0-8589d33b6ee6","method":{"position":"org.apache.commons.codec.binary.StringUtils:238","type":"CtMethodImpl","sourcecode":"private static java.lang.IllegalStateException newIllegalStateException(final java.lang.String charsetName, final java.io.UnsupportedEncodingException e) {\n    if (charsetName == null) {\n        {\n            if (charsetName.startsWith(charsetName)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new java.lang.IllegalStateException(((charsetName + \": \") + e));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"charsetName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[],"tindex":"79c62a53-3e4e-11e6-aed0-4bc71fc764a0","method":{"position":"org.apache.commons.codec.language.bm.Languages:169","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Languages getInstance(final java.lang.String languagesResourceName) {\n    if (languagesResourceName.endsWith(languagesResourceName)) {\n        {\n            final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>();\n            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(languagesResourceName);\n            if (langIS == null) {\n                throw new java.lang.IllegalArgumentException((\"Unable to resolve required resource: \" + languagesResourceName));\n            } \n            final java.util.Scanner java.util.Scanner = new java.util.Scanner(langIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n            try {\n                boolean boolean = false;\n                while (lsScanner.hasNextLine()) {\n                    final java.lang.String java.lang.String = lsScanner.nextLine().trim();\n                    if (inExtendedComment) {\n                        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = false;\n                        } \n                    } else {\n                        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = true;\n                        } else if ((line.length()) > 0) {\n                            ls.add(line);\n                        } \n                    }\n                }\n            } finally {\n                lsScanner.close();\n            }\n            return new org.apache.commons.codec.language.bm.Languages(java.util.Collections.unmodifiableSet(ls));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"languagesResourceName","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"languagesResourceName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[151],"tindex":"79c62a54-3e4e-11e6-aed0-3f47fe2a1008","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:82","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Crypt(final byte[] keyBytes) {\n    if (keyBytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(keyBytes, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"keyBytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[],"tindex":"79c65165-3e4e-11e6-aed0-37c76be0af3e","method":{"position":"org.apache.commons.codec.net.RFC1522Codec:68","type":"CtMethodImpl","sourcecode":"protected java.lang.String encodeText(final java.lang.String text, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(text, 0, 2, \"MC\")) {\n        {\n            if (text == null) {\n                return null;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String);\n            buffer.append(charset);\n            buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char);\n            buffer.append(org.apache.commons.codec.net.RFC1522Codec.this.getEncoding());\n            buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char);\n            final byte[] byte[] = org.apache.commons.codec.net.RFC1522Codec.this.doEncoding(text.getBytes(charset));\n            buffer.append(org.apache.commons.codec.binary.StringUtils.newStringUsAscii(rawData));\n            buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String);\n            return buffer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"text"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:111","type":"CtBinaryOperatorImpl","sourcecode":"(es1 == null) || (es2 == null)"},"failures":[278],"tindex":"79c65166-3e4e-11e6-aed0-bfa00d2f671d","method":{"position":"org.apache.commons.codec.binary.StringUtils:198","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Be(final java.lang.String string) {\n    if ((string == null) || (string == null)) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"es1":"string","es2":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtUnaryOperatorImpl","sourcecode":"!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))"},"failures":[],"tindex":"79c65167-3e4e-11e6-aed0-5584e5e9323b","method":{"position":"org.apache.commons.codec.language.Caverphone:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (!(str.matches(((\"^[\" + str) + \"]{2,}$\")))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.language.Caverphone.this.caverphone(str);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"str","org.apache.commons.codec.digest.B64.B64T":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:362","type":"CtBinaryOperatorImpl","sourcecode":"pos > (-1)"},"failures":[],"tindex":"79c65168-3e4e-11e6-aed0-93f7d351cadd","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:260","type":"CtMethodImpl","sourcecode":"public void setMaxCodeLen(final int maxCodeLen) {\n    if (maxCodeLen > (-1)) {\n        {\n            if (maxCodeLen > maxCodeLen) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"maxCodeLen"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"79c65169-3e4e-11e6-aed0-6dcdbf669888","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:181","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] original) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(original)) {\n        {\n            return org.apache.commons.codec.digest.UnixCrypt.crypt(original, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"original"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"79c6787a-3e4e-11e6-aed0-590d54bac861","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:273","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeQuotedPrintable(java.util.BitSet printable, final byte[] bytes, boolean strict) {\n    if (bytes == bytes) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            if (printable == null) {\n                printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            if (strict) {\n                int int = 1;\n                for (int int = 0 ; i < ((bytes.int) - 3) ; i++) {\n                    int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n                    if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n                        pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n                    } else {\n                        org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n                        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        pos = 1;\n                    }\n                }\n                int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.int) - 3), bytes);\n                boolean boolean = (!(printable.get(b))) || ((org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)) && (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 5)));\n                pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n                if (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 2)) {\n                    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                } \n                for (int int = (bytes.int) - 2 ; i < (bytes.int) ; i++) {\n                    b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n                    encode = (!(printable.get(b))) || ((i > ((bytes.int) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)));\n                    org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n                }\n            } else {\n                for (final byte byte : bytes) {\n                    int int = c;\n                    if (b < 0) {\n                        b = 256 + b;\n                    } \n                    if (printable.get(b)) {\n                        buffer.write(b);\n                    } else {\n                        org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n                    }\n                }\n            }\n            return buffer.toByteArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"bytes","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[],"tindex":"79c6787b-3e4e-11e6-aed0-69229404cac8","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:250","type":"CtMethodImpl","sourcecode":"private static void parseRules(final java.util.Scanner scanner, final java.lang.String location, final java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>> ruleMapping, final java.util.Map<java.lang.Character, java.lang.Character> asciiFoldings) {\n    if (location.endsWith(location)) {\n        {\n            if (location == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    int int = 0;\n                    boolean boolean = false;\n                    while (scanner.hasNextLine()) {\n                        currentLine++;\n                        final java.lang.String java.lang.String = scanner.nextLine();\n                        java.lang.String java.lang.String = rawLine;\n                        if (inMultilineComment) {\n                            if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                                inMultilineComment = false;\n                            } \n                            continue;\n                        } \n                        if (line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                            inMultilineComment = true;\n                        } else {\n                            final int int = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String);\n                            if (cmtI >= 0) {\n                                line = line.substring(0, cmtI);\n                            } \n                            line = line.trim();\n                            if ((line.length()) == 0) {\n                                continue;\n                            } \n                            if (line.contains(\"=\")) {\n                                final java.lang.String[] java.lang.String[] = line.split(\"=\");\n                                if ((parts.int) != 2) {\n                                    throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                                } else {\n                                    final java.lang.String java.lang.String = parts[0];\n                                    final java.lang.String java.lang.String = parts[1];\n                                    if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n                                        throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n                                    } \n                                    asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n                                }\n                            } else {\n                                final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                                if ((parts.int) != 4) {\n                                    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                                } else {\n                                    try {\n                                        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n                                        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n                                        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n                                        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n                                        final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n                                        final char char = r.java.lang.String.charAt(0);\n                                        java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n                                        if (rules == null) {\n                                            rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                                            ruleMapping.put(patternKey, rules);\n                                        } \n                                        rules.add(r);\n                                    } catch (final java.lang.IllegalArgumentException e) {\n                                        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"location","line":"location"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:112","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'N'"},"failures":[],"tindex":"79c69f8c-3e4e-11e6-aed0-1d6de16b681a","method":{"position":"org.apache.commons.codec.language.AbstractCaverphone:56","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if ((source[1]) == 'N') {\n        {\n            if (!(source instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.AbstractCaverphone.this.encode(((java.lang.String)(source)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"79c69f8d-3e4e-11e6-aed0-01b353bb7bd7","method":{"position":"org.apache.commons.codec.binary.Hex:108","type":"CtMethodImpl","sourcecode":"public static char[] encodeHex(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (data == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHex(data, true);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:115","type":"CtBinaryOperatorImpl","sourcecode":"c > 0"},"failures":[274,275,55,276],"tindex":"79c69f8e-3e4e-11e6-aed0-df6ff4a672c5","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:392","type":"CtMethodImpl","sourcecode":"private static int hPermOp(int a, final int n, final int m) {\n    if (m > 0) {\n        {\n            final int int = ((a << (16 - n)) ^ a) & m;\n            a = (a ^ t) ^ (t >>> (16 - n));\n            return a;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"m"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"79c69f8f-3e4e-11e6-aed0-cf198c58cd0d","method":{"position":"org.apache.commons.codec.binary.StringUtils:334","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16(final byte[] bytes) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(bytes)) {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtBinaryOperatorImpl","sourcecode":"b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[274,275,55,276],"tindex":"79c69f90-3e4e-11e6-aed0-a7590aab47d8","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:320","type":"CtMethodImpl","sourcecode":"private static int byteToUnsigned(final byte b) {\n    if (b != b) {\n        {\n            final int int = b;\n            return value < 0 ? value + 256 : value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","org.apache.commons.codec.net.QCodec.UNDERSCORE":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"79c69f91-3e4e-11e6-aed0-4f1467bb0222","method":{"position":"org.apache.commons.codec.digest.DigestUtils:687","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final byte[] data) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240260885/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":122,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":143,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":87,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":200,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":174,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":227,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":241,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":88,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":243,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":7,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":53,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt":152,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":43,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":52,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":105,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":21,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":22,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":26,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":205,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData":159,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":23,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":235,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":24,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":203,"org.apache.commons.codec.net.URLCodecTest.testDecodeWithNullArray":245,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":252,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":5,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":114,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":67,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii":196,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":197,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":36,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":113,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeWithNullArray":244,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":15,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":78,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":138,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":121,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt":195,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":86,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":234,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":214,"org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull":150,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":224,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":133,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":14,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":212,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":240,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":97,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":50,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":70,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":111,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":90,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":204,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":220,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":45,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":4,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":213,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":30,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":131,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":116,"org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull":230,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":237,"org.apache.commons.codec.language.MetaphoneTest.testEncodeNull":148,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":137,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":171,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":210,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":2,"org.apache.commons.codec.binary.Base64Test.testUUID":18,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":161,"org.apache.commons.codec.binary.Base64Test.testSingletons":35,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":208,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":236,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":9,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":40,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":223,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":68,"org.apache.commons.codec.binary.Base64Test.testPairs":17,"org.apache.commons.codec.binary.Base64Test.testConstructors":117,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":8,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":107,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":209,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":124,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":183,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":165,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt":162,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":248,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":201,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":189,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":72,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":1,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":206,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":33,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":155,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":34,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":94,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":128,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":55,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":85,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":73,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":126,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":83,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":177,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":118,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":61,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":144,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":20,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":130,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":146,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":65,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":64,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":217,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":112,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":242,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":82,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":96,"org.apache.commons.codec.binary.HexTest.testCustomCharset":247,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":54,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":77,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":76,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":102,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":136,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":135,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty":228,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":101,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":147,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":182,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":181,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":56,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":142,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":66,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":186,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":62,"org.apache.commons.codec.binary.Base64Test.testTriplets":12,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":3,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":115,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":192,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":170,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":190,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":193,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":221,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":211,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":119,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":59,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":27,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":123,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":48,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeNull":167,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":185,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt":157,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":16,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":145,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":184,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":81,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":168,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":215,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":226,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":95,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":218,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":89,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":160,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":103,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":104,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":219,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":31,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":249,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":63,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":199,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":207,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":74,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":98,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":42,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":120,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":191,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":134,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":141,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":156,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":231,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":251,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":75,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":194,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":163,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":179,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":180,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":49,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":222,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":154,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":129,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":158,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":198,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":80,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":11,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":250,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":164,"org.apache.commons.codec.binary.BaseNCodecTest.testIsWhiteSpace":216,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":84,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":233,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":39,"org.apache.commons.codec.binary.HexTest.testDencodeEmpty":246,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":69,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":173,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":25,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":140,"org.apache.commons.codec.binary.Base64Test.testBase64":41,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":178,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":100,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":28,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":79,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":58,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":229,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":176,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":175,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":187,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":106,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":46,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":57,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":153,"org.apache.commons.codec.binary.Base64Test.testCodec112":32,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":125,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":169,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":127,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":93,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":13,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty":225,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":6,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":71,"org.apache.commons.codec.binary.Base64Test.testCodec68":37,"org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull":149,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":151,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":60,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":239,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":47,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":91,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing":166,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":109,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":132,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":51,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":188,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":232,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":10,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":38,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":139,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":202,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":238,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":0,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":108,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":92,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":172,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":99,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":29,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":19,"org.apache.commons.codec.binary.Base64Test.testCodeIntegerNull":110},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:91","type":"CtBinaryOperatorImpl","sourcecode":"len > 0"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"tindex":"ee45de2f-2ea0-11e6-8739-ab801e6ee7b0","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:268","type":"CtMethodImpl","sourcecode":"protected byte[] ensureBufferSize(final int size, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (size > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((context.byte[]) == null) || ((context.byte[].int) < ((context.int) + size))) {\n                return resizeBuffer(context);\n            } \n            return context.byte[];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"size"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START)"},"failures":[95,96],"tindex":"ee467a70-2ea0-11e6-8739-ff9b5518463a","method":{"position":"org.apache.commons.codec.digest.HmacUtils:352","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key.startsWith(valueToDigest)) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"key","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[],"tindex":"ee46a181-2ea0-11e6-8739-57075f8a396f","method":{"position":"org.apache.commons.codec.net.QCodec:309","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if ((obj.length()) == 0) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be decoded using Q codec\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"obj"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:788","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ACH\"))"},"failures":[],"tindex":"ee46a182-2ea0-11e6-8739-b9163ce31cb7","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:331","type":"CtMethodImpl","sourcecode":"private int handleCC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ACH\"))) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n                if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n                    result.append(\"KS\");\n                } else {\n                    result.append('X');\n                }\n                index += 3;\n            } else {\n                result.append('K');\n                index += 2;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:218","type":"CtBinaryOperatorImpl","sourcecode":"((name1.length()) == 1) || ((name2.length()) == 1)"},"failures":[97,98,99,100],"tindex":"ee46c893-2ea0-11e6-8739-61e3f2704ee2","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:978","type":"CtMethodImpl","sourcecode":"public void appendPrimary(final java.lang.String value) {\n    if (((value.length()) == 1) || ((value.length()) == 1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n            if ((value.length()) <= addChars) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } else {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"value","name1":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[101],"tindex":"ee46efa4-2ea0-11e6-8739-89726cfe3d1b","method":{"position":"org.apache.commons.codec.digest.HmacUtils:509","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (valueToDigest.startsWith(key)) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"key","line":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[102,103,104,105,106,107,108,109],"tindex":"ee46efa5-2ea0-11e6-8739-9d16cd4e9954","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:446","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.nio.charset.Charset charset) throws org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:735","type":"CtBinaryOperatorImpl","sourcecode":"bigInt == null"},"failures":[110],"tindex":"ee4716b6-2ea0-11e6-8739-b980d2012ccf","method":{"position":"org.apache.commons.codec.binary.Base64:734","type":"CtMethodImpl","sourcecode":"public static byte[] encodeInteger(final java.math.BigInteger bigInt) {\n    if (((bigInt.bitLength()) % 8) == 0) {\n        {\n            if (bigInt == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (bigInt == null) {\n                        throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\");\n                    } \n                    return org.apache.commons.codec.binary.Base64.encodeBase64(org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInt), false);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:342","type":"CtBinaryOperatorImpl","sourcecode":"inAvail < 0"},"failures":[],"tindex":"ee473dc7-2ea0-11e6-8739-7d65cc6e2271","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:260","type":"CtMethodImpl","sourcecode":"public void setMaxCodeLen(final int maxCodeLen) {\n    if (maxCodeLen > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (maxCodeLen < 0) {\n                {\n                    if (maxCodeLen < 0) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen;\n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inAvail":"maxCodeLen"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[111,102,103,104,105,106,107,108,109],"tindex":"ee473dc8-2ea0-11e6-8739-add17976e2a0","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:409","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"ee4764d9-2ea0-11e6-8739-f940728d868f","method":{"position":"org.apache.commons.codec.binary.Base64:605","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64Chunked(final byte[] binaryData) {\n    if (binaryData == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:326","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[112,113,114,115],"tindex":"ee4764da-2ea0-11e6-8739-676b1327385f","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:281","type":"CtMethodImpl","sourcecode":"private static int[] body(final int[] schedule, final int eSwap0, final int eSwap1) {\n    if (eSwap0 < 0) {\n        {\n            int int = 0;\n            int int = 0;\n            int int = 0;\n            for (int int = 0 ; j < 25 ; j++) {\n                for (int int = 0 ; i < 32 ; i += 4) {\n                    left = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(left, right, i, eSwap0, eSwap1, schedule);\n                    right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule);\n                }\n                t = left;\n                left = right;\n                right = t;\n            }\n            t = right;\n            right = (left >>> 1) | (left << 31);\n            left = (t >>> 1) | (t << 31);\n            final int[] int[] = new int[2];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 1, 1431655765, results);\n            right = results[0];\n            left = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 8, 16711935, results);\n            left = results[0];\n            right = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 2, 858993459, results);\n            right = results[0];\n            left = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 16, 65535, results);\n            left = results[0];\n            right = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 4, 252645135, results);\n            right = results[0];\n            left = results[1];\n            final int[] int[] = new int[2];\n            out[0] = left;\n            out[1] = right;\n            return out;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"eSwap0"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[0,1,2,3,116,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,117,20,21,22,23,24,25,26,118,27,28,29,30,31,32,33,34,119,120,121,35,36,37,38,122,39,40,41,42,43,44,45,46,47,48,49,50,56,58,59,60,61,123,62,124,63,125,126,64,66,127,67,68,69,70,71,72,73,74,75,76,77,78,79,80,128,83,129,130,131,87,90,91,92,93,94],"tindex":"ee47b2fb-2ea0-11e6-8739-f915407c6149","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:495","type":"CtMethodImpl","sourcecode":"protected boolean containsAlphabetOrPad(final byte[] arrayOctet) {\n    if (arrayOctet == null) {\n        {\n            if (arrayOctet == null) {\n                return false;\n            } \n            for (final byte byte : arrayOctet) {\n                if (((byte) == element) || (isInAlphabet(element))) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"arrayOctet"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ee47da0c-2ea0-11e6-8739-cd841a25ff1e","method":{"position":"org.apache.commons.codec.digest.DigestUtils:362","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] sha(final java.lang.String data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1(data);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:301","type":"CtBinaryOperatorImpl","sourcecode":"element == key"},"failures":[132,133,134,135,136,137,138,139,140],"tindex":"ee47da0d-2ea0-11e6-8739-61cd2375ea62","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:194","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (((ch == 'H') || (chr < 'A')) || (chr > 'Z')) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ch == ch) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u');\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"ch","element":"ch"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:263","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[],"tindex":"ee48011e-2ea0-11e6-8739-0bc4e533c180","method":{"position":"org.apache.commons.codec.digest.HmacUtils:459","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final java.lang.String key, final java.lang.String valueToDigest) {\n    if ((valueToDigest.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[141],"tindex":"ee48011f-2ea0-11e6-8739-5f7a67a4dc73","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:298","type":"CtMethodImpl","sourcecode":"public static java.lang.String toAsciiString(final byte[] raw) {\n    if (raw == raw) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"raw","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"raw"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:326","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"ee482830-2ea0-11e6-8739-77f8f15e49db","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:240","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected char[] copyData(final int start, final int length) {\n    if (start < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char[] char[] = new char[length];\n            java.lang.System.arraycopy(char[], start, newData, 0, length);\n            return newData;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"start"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\"]\"))"},"failures":[],"tindex":"ee482831-2ea0-11e6-8739-db130c31209f","method":{"position":"org.apache.commons.codec.language.bm.Rule:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (!(input.endsWith(\"]\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"input"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"ee484f42-2ea0-11e6-8739-159f25380594","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:276","type":"CtMethodImpl","sourcecode":"boolean isVowel(final java.lang.String letter) {\n    if (letter == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((((letter.equalsIgnoreCase(\"E\")) || (letter.equalsIgnoreCase(\"A\"))) || (letter.equalsIgnoreCase(\"O\"))) || (letter.equalsIgnoreCase(\"I\"))) || (letter.equalsIgnoreCase(\"U\"));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"letter"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:477","type":"CtBinaryOperatorImpl","sourcecode":"(((index > 1) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 1, \"B\", \"H\", \"D\"))) || ((index > 2) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"B\", \"H\", \"D\")))) || ((index > 3) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 1, \"B\", \"H\")))"},"failures":[142,97,98,143,99,100],"tindex":"ee484f43-2ea0-11e6-8739-09743ccf1e1b","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:279","type":"CtMethodImpl","sourcecode":"private int handleC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((((index > 1) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 1, \"B\", \"H\", \"D\"))) || ((index > 2) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"B\", \"H\", \"D\")))) || ((index > 3) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 1, \"B\", \"H\")))) {\n        {\n            if (conditionC0(value, index)) {\n                result.append('K');\n                index += 2;\n            } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))) {\n                result.append('S');\n                index += 2;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")) {\n                index = handleCH(value, result, index);\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CZ\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 4, \"WICZ\")))) {\n                result.append('S', 'X');\n                index += 2;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"CIA\")) {\n                result.append('X');\n                index += 3;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CC\")) && (!((index == 1) && ((charAt(value, 0)) == 'M')))) {\n                return handleCC(value, result, index);\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n                result.append('K');\n                index += 2;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n                    result.append('S', 'X');\n                } else {\n                    result.append('S');\n                }\n                index += 2;\n            } else {\n                result.append('K');\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n                    index += 3;\n                } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n                    index += 2;\n                } else {\n                    index++;\n                }\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtBinaryOperatorImpl","sourcecode":"(salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))"},"failures":[],"tindex":"ee48eb84-2ea0-11e6-8739-914bf1c7cc6f","method":{"position":"org.apache.commons.codec.digest.DigestUtils:437","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final java.lang.String data) {\n    if ((data != null) && (!(salt.startsWith(data)))) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"data","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"data"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[95,144,145,96,146,147],"tindex":"ee48eb85-2ea0-11e6-8739-8b30ac7cc7c7","method":{"position":"org.apache.commons.codec.digest.HmacUtils:80","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha1(final byte[] key) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[],"tindex":"ee491296-2ea0-11e6-8739-6986eb8a6b62","method":{"position":"org.apache.commons.codec.digest.DigestUtils:704","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"ee491297-2ea0-11e6-8739-3f96cff630ec","method":{"position":"org.apache.commons.codec.language.bm.Languages:202","type":"CtMethodImpl","sourcecode":"private static java.lang.String langResourceName(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        {\n            return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_languages.txt\", nameType.getName());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"ee491298-2ea0-11e6-8739-997d9a3fca98","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:260","type":"CtMethodImpl","sourcecode":"public void setMaxCodeLen(final int maxCodeLen) {\n    if (maxCodeLen > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (maxCodeLen < 0) {\n                {\n                    if (maxCodeLen < 0) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen;\n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"maxCodeLen"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[148],"tindex":"ee4939a9-2ea0-11e6-8739-c5e0320cdea5","method":{"position":"org.apache.commons.codec.language.Metaphone:402","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if ((str.length()) > 0) {\n        {\n            return metaphone(str);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || ((str.length()) == 0)"},"failures":[],"tindex":"ee4939aa-2ea0-11e6-8739-05f7281a3493","method":{"position":"org.apache.commons.codec.language.bm.Rule:531","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if ((input == null) || ((str.length()) == 0)) {\n        {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtBinaryOperatorImpl","sourcecode":"(content.length()) == 0"},"failures":[149,150],"tindex":"ee4939ab-2ea0-11e6-8739-453328815433","method":{"position":"org.apache.commons.codec.net.BCodec:176","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String value) throws org.apache.commons.codec.DecoderException {\n    if ((value.length()) == 0) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } \n            try {\n                return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"content":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[44],"tindex":"ee4960bc-2ea0-11e6-8739-4557b2b50334","method":{"position":"org.apache.commons.codec.binary.Base64:594","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeBase64URLSafeString(final byte[] binaryData) {\n    if (binaryData == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"binaryData"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:149","type":"CtBinaryOperatorImpl","sourcecode":"(m.group(3)) != null"},"failures":[],"tindex":"ee4960bd-2ea0-11e6-8739-77a8c7b6dac5","method":{"position":"org.apache.commons.codec.net.BCodec:197","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object value) throws org.apache.commons.codec.EncoderException {\n    if ((value.group(3)) != null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } else if (value instanceof java.lang.String) {\n                return encode(((java.lang.String)(value)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"value"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[151,152,153,154,155,156,157,158,159,160,161,162,163,164],"tindex":"ee4960be-2ea0-11e6-8739-573c9e90d101","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:179","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String prefix) {\n    if (prefix.startsWith(prefix)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = keyBytes.int;\n            java.lang.String java.lang.String;\n            if (salt == null) {\n                saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n            } else {\n                final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n                final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n                if ((m == null) || (!(m.find()))) {\n                    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n                } \n                saltString = m.group(1);\n            }\n            final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n            final java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n            ctx.update(keyBytes);\n            ctx.update(prefix.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n            ctx.update(saltBytes);\n            java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n            ctx1.update(keyBytes);\n            ctx1.update(saltBytes);\n            ctx1.update(keyBytes);\n            byte[] byte[] = ctx1.digest();\n            int int = keyLen;\n            while (ii > 0) {\n                ctx.update(finalb, 0, (ii > 16 ? 16 : ii));\n                ii -= 16;\n            }\n            java.util.Arrays.fill(finalb, ((byte)(0)));\n            ii = keyLen;\n            final int int = 0;\n            while (ii > 0) {\n                if ((ii & 1) == 1) {\n                    ctx.update(finalb[j]);\n                } else {\n                    ctx.update(keyBytes[j]);\n                }\n                ii >>= 1;\n            }\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((prefix + saltString) + \"$\"));\n            finalb = ctx.digest();\n            for (int int = 0 ; i < (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int) ; i++) {\n                ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n                if ((i & 1) != 0) {\n                    ctx1.update(keyBytes);\n                } else {\n                    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n                }\n                if ((i % 3) != 0) {\n                    ctx1.update(saltBytes);\n                } \n                if ((i % 7) != 0) {\n                    ctx1.update(keyBytes);\n                } \n                if ((i & 1) != 0) {\n                    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n                } else {\n                    ctx1.update(keyBytes);\n                }\n                finalb = ctx1.digest();\n            }\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd);\n            ctx.reset();\n            ctx1.reset();\n            java.util.Arrays.fill(keyBytes, ((byte)(0)));\n            java.util.Arrays.fill(saltBytes, ((byte)(0)));\n            java.util.Arrays.fill(finalb, ((byte)(0)));\n            return passwd.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"prefix","line":"prefix"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:504","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof byte[]"},"failures":[165],"tindex":"ee49fcff-2ea0-11e6-8739-49302642b792","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:412","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof byte[]) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n            } \n            return encode(((java.lang.String)(obj)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"ee49fd00-2ea0-11e6-8739-dd3481a99311","method":{"position":"org.apache.commons.codec.language.bm.Rule:248","type":"CtMethodImpl","sourcecode":"private static java.lang.String createResourceName(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_%s_%s.txt\", nameType.getName(), rt.getName(), lang);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"lang"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:413","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[166,167],"tindex":"ee49fd01-2ea0-11e6-8739-15ecb05c3760","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:125","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final java.lang.String encode(java.lang.String name) {\n    if (name.endsWith(name)) {\n        {\n            if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n                return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            } \n            name = cleanName(name);\n            name = removeVowels(name);\n            name = removeDoubleConsonants(name);\n            name = getFirst3Last3(name);\n            return name;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"name","line":"name"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"ee4a2412-2ea0-11e6-8739-870775c32546","method":{"position":"org.apache.commons.codec.digest.HmacUtils:688","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193],"tindex":"ee4a2413-2ea0-11e6-8739-41763c1d9c56","method":{"position":"org.apache.commons.codec.language.bm.Lang:113","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang instance(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (nameType == nameType) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Lang>.get(nameType);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[194],"tindex":"ee4a4b24-2ea0-11e6-8739-5bed951afac7","method":{"position":"org.apache.commons.codec.digest.Crypt:45","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] keyBytes) {\n    if (keyBytes == null) {\n        {\n            return org.apache.commons.codec.digest.Crypt.crypt(keyBytes, null);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"keyBytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:263","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[195],"tindex":"ee4a4b25-2ea0-11e6-8739-3fce54c1bfdc","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:277","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String original, final java.lang.String salt) {\n    if ((salt.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.UnixCrypt.crypt(original.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"salt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[38,46,47,49,196,111,103,197,104,105,106,107,198,199,200,109,201,202,203,204,205,206,207,91,92,94,208,209,210,211,212],"tindex":"ee4a4b26-2ea0-11e6-8739-45d8a3a16306","method":{"position":"org.apache.commons.codec.binary.StringUtils:318","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUsAscii(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtBinaryOperatorImpl","sourcecode":"index > 0"},"failures":[],"tindex":"ee4a4b27-2ea0-11e6-8739-73274eb3fb3f","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:260","type":"CtMethodImpl","sourcecode":"public void setMaxCodeLen(final int maxCodeLen) {\n    if (maxCodeLen > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (maxCodeLen < 0) {\n                {\n                    if (maxCodeLen < 0) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen;\n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"maxCodeLen"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:314","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")"},"failures":[],"tindex":"ee4a7238-2ea0-11e6-8739-f522722110a4","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:816","type":"CtMethodImpl","sourcecode":"private boolean conditionCH1(final java.lang.String value, final int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"T\", \"S\"))) || (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (index == 0)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])) || ((index + 1) == ((value.length()) - 1))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtInvocationImpl","sourcecode":"target.equals(element)"},"failures":[],"tindex":"ee4a7239-2ea0-11e6-8739-d9fa173eedb5","method":{"position":"org.apache.commons.codec.language.bm.Rule:579","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input.equals(input)) {\n        {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"input","element":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:265","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"ee4a994a-2ea0-11e6-8739-27a7959b34bb","method":{"position":"org.apache.commons.codec.language.bm.Rule:275","type":"CtMethodImpl","sourcecode":"private static boolean endsWith(final java.lang.CharSequence input, final java.lang.CharSequence suffix) {\n    if (input == null) {\n        {\n            if (suffix == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((suffix.length()) > (input.length())) {\n                        return false;\n                    } \n                    for (int int = (input.length()) - 1, int int = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n                        if ((input.charAt(i)) != (suffix.charAt(j))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"suffix"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[168,169,172,173,174,177,178,181,182,184,189,190,191,192,193],"tindex":"ee4a994b-2ea0-11e6-8739-c986d4198b44","method":{"position":"org.apache.commons.codec.language.bm.Rule:512","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            return (input.length()) == 0;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[200],"tindex":"ee4a994c-2ea0-11e6-8739-bd56794dc599","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof byte[]) {\n                return encode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:762","type":"CtBinaryOperatorImpl","sourcecode":"((bigInt.bitLength()) % 8) == 0"},"failures":[],"tindex":"ee4ac05d-2ea0-11e6-8739-cf519e0f118e","method":{"position":"org.apache.commons.codec.binary.Base64:734","type":"CtMethodImpl","sourcecode":"public static byte[] encodeInteger(final java.math.BigInteger bigInt) {\n    if (((bigInt.bitLength()) % 8) == 0) {\n        {\n            if (bigInt == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (bigInt == null) {\n                        throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\");\n                    } \n                    return org.apache.commons.codec.binary.Base64.encodeBase64(org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInt), false);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[202,203,204,205,206,207],"tindex":"ee4ac05e-2ea0-11e6-8739-7114b852e752","method":{"position":"org.apache.commons.codec.net.URLCodec:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.net.URLCodec.encodeUrl(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet, bytes);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:126","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'R'"},"failures":[213],"tindex":"ee4ac05f-2ea0-11e6-8739-25b44c6f008f","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:171","type":"CtMethodImpl","sourcecode":"public static byte[] fromAscii(final char[] ascii) {\n    if ((ascii[1]) == 'R') {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((ascii == null) || ((ascii.int) == 0)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            final byte[] byte[] = new byte[(ascii.int) >> 3];\n            for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if ((ascii[(jj - bits)]) == '1') {\n                        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n                    } \n                }\n            }\n            return l_raw;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"ascii"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[214,0,215,1,2,3,216,217,218,119,219,42,220,51,52,53,54,55,56,57,58,80,81,82,128,83,129,130,131,84,85,221,86,87,88,89,90],"tindex":"ee4ae770-2ea0-11e6-8739-c7205fbd37ad","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:311","type":"CtMethodImpl","sourcecode":"protected static boolean isWhiteSpace(final byte byteToCheck) {\n    if (byteToCheck == byteToCheck) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            switch (byteToCheck) {\n                case ' ' :\n                case '\\n' :\n                case '\\r' :\n                case '\\t' :\n                    return true;\n                default :\n                    return false;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"byteToCheck","pad":"byteToCheck"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtBinaryOperatorImpl","sourcecode":"b == ' '"},"failures":[],"tindex":"ee4ae771-2ea0-11e6-8739-11f5e08e2da1","method":{"position":"org.apache.commons.codec.language.Soundex:245","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic void setMaxLength(final int maxLength) {\n    if (maxLength == ' ') {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.Soundex.this.int = maxLength;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"maxLength"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtInvocationImpl","sourcecode":"target.equals(element)"},"failures":[222,223,143,224,225,226,227,228,229],"tindex":"ee4b0e82-2ea0-11e6-8739-71fdfe719a91","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:75","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(final java.lang.String value) {\n    if (value.startsWith(value)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value.equals(value)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return doubleMetaphone(value, false);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"value","element":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:133","type":"CtBinaryOperatorImpl","sourcecode":"(offset > (b.length)) || ((offset + len) > (b.length))"},"failures":[125,130],"tindex":"ee4b0e83-2ea0-11e6-8739-8bbbea29ef03","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:128","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(final byte[] b, final int offset, final int len) throws java.io.IOException {\n    if ((offset > offset) || ((offset + len) > (b.int))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (b == null) {\n                throw new java.lang.NullPointerException();\n            } else if ((offset < 0) || (len < 0)) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if (len == 0) {\n                return 0;\n            } else {\n                int int = 0;\n                while (readLen == 0) {\n                    if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n                        final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n                        final int int = java.io.InputStream.read(buf);\n                        if (boolean) {\n                            org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        } else {\n                            org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        }\n                    } \n                    readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                }\n                return readLen;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","offset":"offset","len":"len","length":"offset"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:140","type":"CtBinaryOperatorImpl","sourcecode":"next == 'N'"},"failures":[97,98,99,100],"tindex":"ee4b3594-2ea0-11e6-8739-8991e9b644f6","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:865","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (ch == 'N') {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String.indexOf(ch)) != (-1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"next":"ch"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:149","type":"CtBinaryOperatorImpl","sourcecode":"(m.group(3)) != null"},"failures":[],"tindex":"ee4b3595-2ea0-11e6-8739-dfddec681157","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if ((source.group(3)) != null) {\n        {\n            if (!(source instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\");\n            } \n            return encode(((java.lang.String)(source)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"source"},"type":"special","returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\"]\"))"},"failures":[172,187],"tindex":"ee4b3596-2ea0-11e6-8739-33f8487b35d6","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:92","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) throws org.apache.commons.codec.EncoderException {\n    if (!(source.endsWith(\"]\"))) {\n        {\n            if (source == null) {\n                return null;\n            } \n            return org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.encode(source);\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:319","type":"CtInvocationImpl","sourcecode":"name1LtRStart.equals(name2RtLStart)"},"failures":[168,169,172,173,174,176,177,178,181,182,184,188,189,190,191,192,193],"tindex":"ee4b5ca7-2ea0-11e6-8739-fd696983e9f6","method":{"position":"org.apache.commons.codec.language.bm.Rule:353","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (lang.equals(lang)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.get(nameType).get(rt).get(lang);\n                    if (rules == null) {\n                        throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n                    } \n                    return rules;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2RtLStart":"lang","name1LtRStart":"lang"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtInvocationImpl","sourcecode":"ph.startsWith(\"(\")"},"failures":[230],"tindex":"ee4b83b8-2ea0-11e6-8739-4db27417efad","method":{"position":"org.apache.commons.codec.net.URLCodec:224","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException {\n    if (str.startsWith(\"(\")) {\n        throw new java.io.UnsupportedEncodingException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"ee4b83b9-2ea0-11e6-8739-9f4e4dfcbc88","method":{"position":"org.apache.commons.codec.language.bm.Lang:113","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang instance(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (nameType == nameType) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Lang>.get(nameType);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ee4b83ba-2ea0-11e6-8739-65298c1fada6","method":{"position":"org.apache.commons.codec.language.bm.Languages:213","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.String language) {\n    if (language == null) {\n        {\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"language"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtBinaryOperatorImpl","sourcecode":"((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)"},"failures":[231,232,233,234,160,161,164,235,236,194,112,115],"tindex":"ee4baacb-2ea0-11e6-8739-6d93ed32b02c","method":{"position":"org.apache.commons.codec.digest.Crypt:148","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String key, final java.lang.String salt) {\n    if (((key.length()) != 1) || ((salt.length()) != 1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"leftCharacter":"key","rightCharacter":"salt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isWhitespace(ch)"},"failures":[222,237,142,238,239,240,97,98,143,241,242,226,99,100,229],"tindex":"ee4baacc-2ea0-11e6-8739-895c955e2772","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:962","type":"CtMethodImpl","sourcecode":"public void appendAlternate(final char value) {\n    if (java.lang.Character.isWhitespace(value)) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int)) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[13,38,46,47,49,50],"tindex":"ee4baacd-2ea0-11e6-8739-d16efdfdd814","method":{"position":"org.apache.commons.codec.binary.Base64:691","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final java.lang.String base64String) {\n    if (base64String == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (base64String == null) {\n                {\n                    return new org.apache.commons.codec.binary.Base64().decode(base64String);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"base64String"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:575","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"ee4bd1de-2ea0-11e6-8739-4b02d28e43cc","method":{"position":"org.apache.commons.codec.binary.Base64:691","type":"CtMethodImpl","sourcecode":"public static byte[] decodeBase64(final java.lang.String base64String) {\n    if (base64String == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (base64String == null) {\n                {\n                    return new org.apache.commons.codec.binary.Base64().decode(base64String);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"base64String"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:193","type":"CtBinaryOperatorImpl","sourcecode":"sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)"},"failures":[],"tindex":"ee4bd1df-2ea0-11e6-8739-2ff3ddac53c7","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:259","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected char[] copyData(final int start, final int length) {\n    if ((length & 1) != 0) {\n        {\n            if (start == length) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final char[] char[] = new char[length];\n                    java.lang.System.arraycopy(char[], (((char[].int) - (org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.this.int)) + start), newData, 0, length);\n                    return newData;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sumLength":"start","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"length"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"ee4bf8f0-2ea0-11e6-8739-f57f7ebfc612","method":{"position":"org.apache.commons.codec.language.bm.Rule:353","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (lang.equals(lang)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.get(nameType).get(rt).get(lang);\n                    if (rules == null) {\n                        throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n                    } \n                    return rules;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"lang"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"ee4bf8f1-2ea0-11e6-8739-cb46f2691149","method":{"position":"org.apache.commons.codec.digest.DigestUtils:719","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final java.lang.String data) {\n    if ((data == null) || ((txt.length()) == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"data"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtInvocationImpl","sourcecode":"target.equals(element)"},"failures":[],"tindex":"ee4bf8f2-2ea0-11e6-8739-77102b5175e1","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:257","type":"CtMethodImpl","sourcecode":"private static java.lang.String join(final java.lang.Iterable<java.lang.String> strings, final java.lang.String sep) {\n    if (sep.equals(sep)) {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            final java.util.Iterator<java.lang.String> java.util.Iterator<java.lang.String> = strings.iterator();\n            if (si.hasNext()) {\n                sb.append(si.next());\n            } \n            while (si.hasNext()) {\n                sb.append(sep).append(si.next());\n            }\n            return sb.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"sep","element":"sep"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"ee4c2003-2ea0-11e6-8739-f9dad0a89a27","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:463","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final byte[] arrayOctet, final boolean allowWSPad) {\n    if (arrayOctet == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"arrayOctet"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:519","type":"CtBinaryOperatorImpl","sourcecode":"(lineLength) > 0"},"failures":[243],"tindex":"ee4c4714-2ea0-11e6-8739-eb615e5895f8","method":{"position":"org.apache.commons.codec.language.Metaphone:428","type":"CtMethodImpl","sourcecode":"public void setMaxCodeLen(final int maxCodeLen) {\n    if (maxCodeLen > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.Metaphone.this.int = maxCodeLen;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineLength":"maxCodeLen"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtBinaryOperatorImpl","sourcecode":"(((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)"},"failures":[],"tindex":"ee4c4715-2ea0-11e6-8739-67894cfa51cb","method":{"position":"org.apache.commons.codec.Charsets:86","type":"CtMethodImpl","sourcecode":"public static java.nio.charset.Charset toCharset(final java.lang.String charset) {\n    if ((((charset == null) || (charset.equalsIgnoreCase(name))) || (charset.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n        {\n            return charset == null ? java.nio.charset.Charset.defaultCharset() : java.nio.charset.Charset.forName(charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"charset","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"charset","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"charset"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"ee4c6e26-2ea0-11e6-8739-f7b4e9e10491","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:800","type":"CtMethodImpl","sourcecode":"private boolean conditionCH0(final java.lang.String value, final int index) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index != 0) {\n                return false;\n            } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n                return false;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[231,232,233,234,160,161,164,236,194,112,115],"tindex":"ee4c6e27-2ea0-11e6-8739-b16e4e5831f5","method":{"position":"org.apache.commons.codec.digest.Crypt:65","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] keyBytes, final java.lang.String salt) {\n    if (salt == null) {\n        {\n            if (salt == null) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes, salt);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(keyBytes, salt);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt);\n            } else {\n                return org.apache.commons.codec.digest.UnixCrypt.crypt(keyBytes, salt);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"salt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"ee4c9538-2ea0-11e6-8739-e5ab1b27c8be","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object other) {\n    if (other.startsWith(other)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.this) == other) {\n                return true;\n            } \n            if (!(other instanceof org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)) {\n                return false;\n            } \n            return toString().equals(((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)(other)).toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"other","line":"other"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:72","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX)"},"failures":[],"tindex":"ee4c9539-2ea0-11e6-8739-514b4b7fa43d","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:75","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(final java.lang.String value) {\n    if (value.startsWith(value)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value.equals(value)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return doubleMetaphone(value, false);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"value","org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[],"tindex":"ee4c953a-2ea0-11e6-8739-0bbe0eba1bef","method":{"position":"org.apache.commons.codec.digest.DigestUtils:563","type":"CtMethodImpl","sourcecode":"public static byte[] sha384(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha384Digest(), data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"ee4cbc4b-2ea0-11e6-8739-09722593ba87","method":{"position":"org.apache.commons.codec.digest.HmacUtils:708","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"ee4cbc4c-2ea0-11e6-8739-07da3c99efe4","method":{"position":"org.apache.commons.codec.digest.HmacUtils:280","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(key)) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"key"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:112","type":"CtBinaryOperatorImpl","sourcecode":"avail > 0"},"failures":[],"tindex":"ee4cbc4d-2ea0-11e6-8739-978c87ac6ff6","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:392","type":"CtMethodImpl","sourcecode":"private static int hPermOp(int a, final int n, final int m) {\n    if (n > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ((a << (16 - n)) ^ a) & m;\n            a = (a ^ t) ^ (t >>> (16 - n));\n            return a;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"avail":"n"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:145","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[],"tindex":"ee4cbc4e-2ea0-11e6-8739-49f961dee8e5","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:91","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.CharSequence str) {\n    if (str.endsWith(str)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n                ph.append(str);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"str","line":"str"},"type":"special","returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[244],"tindex":"ee4ce35f-2ea0-11e6-8739-53f010245767","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:352","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (int int = 0 ; i < (bytes.int) ; i++) {\n                final int int = bytes[i];\n                if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n                    try {\n                        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n                            continue;\n                        } \n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                        buffer.write(((char)((u << 4) + l)));\n                    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n                    }\n                } else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n                    buffer.write(b);\n                } \n            }\n            return buffer.toByteArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:258","type":"CtBinaryOperatorImpl","sourcecode":"(i & 1) != 0"},"failures":[105,107,198,199,201],"tindex":"ee4d3180-2ea0-11e6-8739-63902062577b","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:237","type":"CtMethodImpl","sourcecode":"private static boolean isWhitespace(final int b) {\n    if ((b & 1) != 0) {\n        {\n            return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"b"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:349","type":"CtBinaryOperatorImpl","sourcecode":"((chr == 'H') || (chr < 'A')) || (chr > 'Z')"},"failures":[],"tindex":"ee4d3181-2ea0-11e6-8739-fdd42c830de4","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:194","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (((ch == 'H') || (chr < 'A')) || (chr > 'Z')) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ch == ch) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u');\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"ch"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[112,113,114,115],"tindex":"ee4d3182-2ea0-11e6-8739-a57011753cc1","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:325","type":"CtMethodImpl","sourcecode":"private static int dEncrypt(int el, final int r, final int s, final int e0, final int e1, final int[] sArr) {\n    if (s == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = r ^ (r >>> 16);\n            int int = v & e0;\n            v &= e1;\n            u = ((u ^ (u << 16)) ^ r) ^ (sArr[s]);\n            int int = ((v ^ (v << 16)) ^ r) ^ (sArr[(s + 1)]);\n            t = (t >>> 4) | (t << 28);\n            el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)]);\n            return el;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"s"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[245],"tindex":"ee4d5893-2ea0-11e6-8739-f76eb7a427cf","method":{"position":"org.apache.commons.codec.net.URLCodec:161","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeUrl(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (int int = 0 ; i < (bytes.int) ; i++) {\n                final int int = bytes[i];\n                if (b == '+') {\n                    buffer.write(' ');\n                } else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n                    try {\n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                        buffer.write(((char)((u << 4) + l)));\n                    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                        throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n                    }\n                } else {\n                    buffer.write(b);\n                }\n            }\n            return buffer.toByteArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:277","type":"CtBinaryOperatorImpl","sourcecode":"printable == null"},"failures":[102],"tindex":"ee4d7fa4-2ea0-11e6-8739-d7b92f15a9c6","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:253","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeQuotedPrintable(java.util.BitSet printable, final byte[] bytes) {\n    if (printable == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"printable":"printable"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:228","type":"CtUnaryOperatorImpl","sourcecode":"!(rt.equals(org.apache.commons.codec.language.bm.RuleType.RULES))"},"failures":[],"tindex":"ee4d7fa5-2ea0-11e6-8739-114dca2eba97","method":{"position":"org.apache.commons.codec.language.bm.Rule:298","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.codec.language.bm.Rule> getInstance(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final org.apache.commons.codec.language.bm.Languages.LanguageSet langs) {\n    if (!(rt.equals(rt))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, langs);\n            final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            for (final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> : ruleMap.values()) {\n                allRules.addAll(rules);\n            }\n            return allRules;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"rt","rt":"rt"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[246,247,248,249],"tindex":"ee4d7fa6-2ea0-11e6-8739-6155f86bd937","method":{"position":"org.apache.commons.codec.binary.Hex:231","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] array) throws org.apache.commons.codec.DecoderException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(array)) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (array == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray());\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)"},"failures":[142,238,241,242],"tindex":"ee4da6b7-2ea0-11e6-8739-4d48b1c1b65e","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:230","type":"CtMethodImpl","sourcecode":"public boolean isDoubleMetaphoneEqual(final java.lang.String value1, final java.lang.String value2) {\n    if (value1.endsWith(value1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return isDoubleMetaphoneEqual(value1, value2, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"value1","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END":"value1"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[202,250,203,205,251,207],"tindex":"ee4da6b8-2ea0-11e6-8739-8d2ddab09893","method":{"position":"org.apache.commons.codec.net.URLCodec:269","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:258","type":"CtBinaryOperatorImpl","sourcecode":"(i & 1) != 0"},"failures":[],"tindex":"ee4da6b9-2ea0-11e6-8739-8b2d819d6846","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:259","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected char[] copyData(final int start, final int length) {\n    if ((length & 1) != 0) {\n        {\n            if (start == length) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final char[] char[] = new char[length];\n                    java.lang.System.arraycopy(char[], (((char[].int) - (org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.this.int)) + start), newData, 0, length);\n                    return newData;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"length"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:158","type":"CtBinaryOperatorImpl","sourcecode":"(curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))"},"failures":[],"tindex":"ee4dcdca-2ea0-11e6-8739-6339d936ab5f","method":{"position":"org.apache.commons.codec.language.Soundex:229","type":"CtMethodImpl","sourcecode":"private char map(final char ch) {\n    if ((ch == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(ch))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(ch))))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ch - 'A';\n            if ((index < 0) || (index >= (org.apache.commons.codec.language.Soundex.this.getSoundexMapping().int))) {\n                throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch));\n            } \n            return org.apache.commons.codec.language.Soundex.this.getSoundexMapping()[index];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"next":"ch","prev":"ch","curr":"ch"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"ee4dcdcb-2ea0-11e6-8739-6f7f084b8192","method":{"position":"org.apache.commons.codec.digest.DigestUtils:672","type":"CtMethodImpl","sourcecode":"public static byte[] sha512(final java.lang.String data) {\n    if ((data == null) || ((txt.length()) == 0)) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"data"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:527","type":"CtVariableReadImpl","sourcecode":"startsWith"},"failures":[180],"tindex":"ee4dcdcc-2ea0-11e6-8739-c565a2eb52ae","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startsWith":"concat"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.Utils:44","type":"CtBinaryOperatorImpl","sourcecode":"i == (-1)"},"failures":[97,98,143,99,100],"tindex":"ee4df4dd-2ea0-11e6-8739-957fe59a8ffb","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:739","type":"CtMethodImpl","sourcecode":"private int handleX(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index == (-1)) {\n        {\n            if (index == 0) {\n                result.append('S');\n                index++;\n            } else {\n                if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n                    result.append(\"KS\");\n                } \n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"ee4df4de-2ea0-11e6-8739-8d47b60d507d","method":{"position":"org.apache.commons.codec.language.bm.Rule:275","type":"CtMethodImpl","sourcecode":"private static boolean endsWith(final java.lang.CharSequence input, final java.lang.CharSequence suffix) {\n    if (input == null) {\n        {\n            if (suffix == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((suffix.length()) > (input.length())) {\n                        return false;\n                    } \n                    for (int int = (input.length()) - 1, int int = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n                        if ((input.charAt(i)) != (suffix.charAt(j))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"ee4df4df-2ea0-11e6-8739-09c7c71c05a8","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:109","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final java.lang.Object encode(final java.lang.Object pObject) throws org.apache.commons.codec.EncoderException {\n    if (pObject == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(pObject instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\");\n            } \n            return encode(((java.lang.String)(pObject)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"pObject"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[202,252,250,203,205,251,207],"tindex":"ee4e1bf0-2ea0-11e6-8739-1b59c538752e","method":{"position":"org.apache.commons.codec.net.URLCodec:209","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes != null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            return org.apache.commons.codec.net.URLCodec.decodeUrl(bytes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:228","type":"CtUnaryOperatorImpl","sourcecode":"!(rt.equals(org.apache.commons.codec.language.bm.RuleType.RULES))"},"failures":[],"tindex":"ee4e1bf1-2ea0-11e6-8739-53761b1aca03","method":{"position":"org.apache.commons.codec.language.Nysiis:210","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj.equals(obj))) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"obj","rt":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"ee4e1bf2-2ea0-11e6-8739-45343d2a3142","method":{"position":"org.apache.commons.codec.binary.Hex:231","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] array) throws org.apache.commons.codec.DecoderException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(array)) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (array == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray());\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"array"},"type":"special","returnInThen":false,"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
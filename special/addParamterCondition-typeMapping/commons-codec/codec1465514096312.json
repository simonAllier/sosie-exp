{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":272,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":161,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":229,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":108,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":184,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":87,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":115,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_1_Returns5_Successfully":242,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_11_Returns_3_Successfully":245,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":113,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":101,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":142,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":225,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":96,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":88,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":171,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":188,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":222,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":7,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":103,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_8_Returns3_Successfully":248,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN":106,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":230,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":43,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":52,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":121,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":207,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":206,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":21,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":22,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":107,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":124,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":26,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":259,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":205,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":122,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":23,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":174,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":24,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":256,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":258,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":5,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":209,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":199,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":67,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":36,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":198,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":213,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":15,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":224,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":78,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":181,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":271,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt":200,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":86,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":130,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":193,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":238,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":112,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":176,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_10_Returns3_Successfully":250,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":125,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":186,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":159,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":50,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":118,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":228,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":70,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":132,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_6_Returns4_Successfully":243,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":90,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR":110,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":170,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":45,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":4,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":100,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":157,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":127,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc":173,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":180,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":211,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":111,"org.apache.commons.codec.binary.Base64Test.testUUID":18,"org.apache.commons.codec.binary.Base64Test.testSingletons":35,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":195,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":9,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":40,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":68,"org.apache.commons.codec.binary.Base64Test.testPairs":17,"org.apache.commons.codec.binary.Base64Test.testConstructors":268,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":97,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":274,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":192,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":237,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":253,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully2":246,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":102,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":151,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":72,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":1,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":208,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":241,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":98,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":33,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":234,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":34,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":94,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":227,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":210,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":55,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":221,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":85,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":73,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":276,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedNullInput":217,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":83,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":167,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":145,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":191,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":269,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":61,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le":267,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":20,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName":172,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":190,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":137,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":116,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":65,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":64,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":278,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":117,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":123,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":187,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":197,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":82,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":114,"org.apache.commons.codec.binary.HexTest.testCustomCharset":252,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":129,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":54,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":77,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":76,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":179,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":136,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":178,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":148,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":218,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":147,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":56,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":158,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":66,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":62,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_2_Returns5_Successfully":244,"org.apache.commons.codec.binary.Base64Test.testTriplets":12,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":3,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":202,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":154,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":152,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":155,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":194,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":203,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":270,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":59,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":236,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":240,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":27,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":273,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":48,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":235,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":16,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":149,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":81,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":138,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":239,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":279,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":89,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":168,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":263,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":165,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":212,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":31,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":254,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":63,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":261,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":265,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":74,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":160,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":42,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":204,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":153,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":177,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":128,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":260,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":75,"org.apache.commons.codec.CharsetsTest.testToCharset":262,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":49,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":156,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":233,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":99,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_13_Returns_1_Successfully":247,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":95,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":119,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":216,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":264,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":80,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":120,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":257,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":214,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt":201,"org.apache.commons.codec.language.MetaphoneTest.testTCH":220,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":84,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":189,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":39,"org.apache.commons.codec.binary.HexTest.testDencodeEmpty":251,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":69,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":141,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":223,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":25,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":183,"org.apache.commons.codec.binary.Base64Test.testBase64":41,"org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt":196,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":146,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":163,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":28,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":79,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":58,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":144,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":166,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":143,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":169,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":46,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":57,"org.apache.commons.codec.binary.Base64Test.testCodec112":32,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":275,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":131,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":139,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":277,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":93,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":226,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":13,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":126,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":71,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":231,"org.apache.commons.codec.binary.Base64Test.testCodec68":37,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":219,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":60,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":164,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":47,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":91,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":105,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":175,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":51,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":150,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":10,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":38,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":232,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":182,"org.apache.commons.codec.language.SoundexTest.testDifference":215,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":185,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":255,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":0,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":92,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":140,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":162,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully":249,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":109,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":135,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullAlgo":266,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":133,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__DECLAN_Returns_DCLN":134},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:362","type":"CtBinaryOperatorImpl","sourcecode":"pos > (-1)"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"tindex":"fac48019-2e97-11e6-9a6d-6f0fac0ba4d1","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:268","type":"CtMethodImpl","sourcecode":"protected byte[] ensureBufferSize(final int size, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (size == '+') {\n        {\n            if (size > (-1)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (((context.byte[]) == null) || ((context.byte[].int) < ((context.int) + size))) {\n                        return resizeBuffer(context);\n                    } \n                    return context.byte[];\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"size"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137],"tindex":"fac5436a-2e97-11e6-9a6d-9d38283fb9ce","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:407","type":"CtMethodImpl","sourcecode":"java.lang.String removeVowels(java.lang.String name) {\n    if (name == null) {\n        {\n            final java.lang.String java.lang.String = name.substring(0, 1);\n            name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            name = name.replaceAll(\"E\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            name = name.replaceAll(\"I\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            name = name.replaceAll(\"O\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            name = name.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            name = name.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            if (isVowel(firstLetter)) {\n                return firstLetter + name;\n            } else {\n                return name;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"name"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155],"tindex":"fac56a7b-2e97-11e6-9a6d-0dcc815031d9","method":{"position":"org.apache.commons.codec.language.bm.Rule:264","type":"CtMethodImpl","sourcecode":"private static java.util.Scanner createScanner(final java.lang.String lang) {\n    if (lang == null) {\n        {\n            if (lang == null) {\n                {\n                    final java.lang.String java.lang.String = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang);\n                    final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName);\n                    if (rulesIS == null) {\n                        throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n                    } \n                    return new java.util.Scanner(rulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"lang"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:163","type":"CtBinaryOperatorImpl","sourcecode":"(curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))"},"failures":[],"tindex":"fac5918c-2e97-11e6-9a6d-d9320fe1d72f","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:253","type":"CtMethodImpl","sourcecode":"public void addLeft(final char ch) {\n    if ((ch == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(ch))) {\n        {\n            (int)++;\n            char[][getNextPos()] = ch;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prev":"ch","curr":"ch"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtBinaryOperatorImpl","sourcecode":"to == terminator"},"failures":[156,157,158,159,160,161,162,163],"tindex":"fac5918d-2e97-11e6-9a6d-415bb1cf862f","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:568","type":"CtMethodImpl","sourcecode":"private int handleP(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index == index) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                result.append('F');\n                index += 2;\n            } else {\n                result.append('P');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"terminator":"index","to":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[],"tindex":"fac5b89e-2e97-11e6-9a6d-fdba93cc3c1a","method":{"position":"org.apache.commons.codec.digest.DigestUtils:66","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest getDigest(final java.lang.String algorithm) {\n    if (algorithm == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.security.MessageDigest.getInstance(algorithm);\n            } catch (final java.security.NoSuchAlgorithmException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"algorithm"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[158,164],"tindex":"fac5b89f-2e97-11e6-9a6d-ff10c918a2b7","method":{"position":"org.apache.commons.codec.binary.StringUtils:70","type":"CtMethodImpl","sourcecode":"public static boolean equals(final java.lang.CharSequence cs1, final java.lang.CharSequence cs2) {\n    if ((cs2.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cs1 == cs2) {\n                return true;\n            } \n            if ((cs1 == null) || (cs2 == null)) {\n                return false;\n            } \n            if ((cs1 instanceof java.lang.String) && (cs2 instanceof java.lang.String)) {\n                return cs1.equals(cs2);\n            } \n            return org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, java.lang.Math.max(cs1.length(), cs2.length()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"cs2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[91,92,94],"tindex":"fac5dfb0-2e97-11e6-9a6d-57e3fc0cddfc","method":{"position":"org.apache.commons.codec.net.BCodec:92","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.Base64.encodeBase64(bytes);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[165,166,167,168,169,170,171],"tindex":"fac5dfb1-2e97-11e6-9a6d-0375c4e84708","method":{"position":"org.apache.commons.codec.digest.DigestUtils:792","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest updateDigest(final java.security.MessageDigest digest, final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            final byte[] byte[] = new byte[org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int];\n            int int = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int);\n            while (read > (-1)) {\n                digest.update(buffer, 0, read);\n                read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int);\n            }\n            return digest;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[172,173],"tindex":"fac606c2-2e97-11e6-9a6d-131f1b214288","method":{"position":"org.apache.commons.codec.binary.StringUtils:238","type":"CtMethodImpl","sourcecode":"private static java.lang.IllegalStateException newIllegalStateException(final java.lang.String charsetName, final java.io.UnsupportedEncodingException e) {\n    if (charsetName == null) {\n        {\n            return new java.lang.IllegalStateException(((charsetName + \": \") + e));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"charsetName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:575","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"fac606c3-2e97-11e6-9a6d-2ff8a74ed656","method":{"position":"org.apache.commons.codec.language.bm.Languages:253","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.String language) {\n    if (language == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"language"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtInvocationImpl","sourcecode":"str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[174],"tindex":"fac62dd4-2e97-11e6-9a6d-21d3ee8f5df2","method":{"position":"org.apache.commons.codec.digest.Crypt:148","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String key, final java.lang.String salt) {\n    if (salt.startsWith(salt)) {\n        {\n            return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"salt","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"salt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[175,176,177,178,179,180,181,182,183,184],"tindex":"fac62dd5-2e97-11e6-9a6d-ff3ccb441681","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:180","type":"CtMethodImpl","sourcecode":"public java.lang.String[] getReplacements(final java.lang.String context, final boolean atStart) {\n    if (atStart) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (context == null) {\n                {\n                    if (atStart) {\n                        return java.lang.String[];\n                    } \n                    final int int = getPatternLength();\n                    final boolean boolean = nextIndex < (context.length()) ? isVowel(context.charAt(nextIndex)) : false;\n                    if (nextCharIsVowel) {\n                        return java.lang.String[];\n                    } \n                    return java.lang.String[];\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"context"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:53","type":"CtBinaryOperatorImpl","sourcecode":"count == len"},"failures":[],"tindex":"fac654e6-2e97-11e6-9a6d-27b7366fe4fc","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:405","type":"CtMethodImpl","sourcecode":"private static void permOp(int a, int b, final int n, final int m, final int[] results) {\n    if (b == m) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ((a >>> n) ^ b) & m;\n            a ^= t << n;\n            b ^= t;\n            results[0] = a;\n            results[1] = b;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"m","count":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:355","type":"CtBinaryOperatorImpl","sourcecode":"result >= 0"},"failures":[156,157,158,185,186,159,160,161,187,162,163],"tindex":"fac654e7-2e97-11e6-9a6d-e78174aca9ce","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:915","type":"CtMethodImpl","sourcecode":"protected static boolean contains(final java.lang.String value, final int start, final int length, final java.lang.String... criteria) {\n    if (length >= 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if ((start >= 0) && ((start + length) <= (value.length()))) {\n                final java.lang.String java.lang.String = value.substring(start, (start + length));\n                for (final java.lang.String java.lang.String : criteria) {\n                    if (target.equals(element)) {\n                        result = true;\n                        break;\n                    } \n                }\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"length"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:238","type":"CtBinaryOperatorImpl","sourcecode":"(ii & 1) == 1"},"failures":[188,189,190,191,192,193],"tindex":"fac67bf8-2e97-11e6-9a6d-777732704093","method":{"position":"org.apache.commons.codec.digest.B64:54","type":"CtMethodImpl","sourcecode":"static void b64from24bit(final byte b2, final byte b1, final byte b0, final int outLen, final java.lang.StringBuilder buffer) {\n    if ((outLen & 1) == 1) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255);\n            int int = outLen;\n            while ((n--) > 0) {\n                buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)));\n                w >>= 6;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ii":"outLen"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[158,159,160,161,162,163],"tindex":"fac6a309-2e97-11e6-9a6d-a3ae4d37674d","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:279","type":"CtMethodImpl","sourcecode":"private int handleC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        {\n            if (conditionC0(value, index)) {\n                result.append('K');\n                index += 2;\n            } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))) {\n                result.append('S');\n                index += 2;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")) {\n                index = handleCH(value, result, index);\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CZ\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 4, \"WICZ\")))) {\n                result.append('S', 'X');\n                index += 2;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"CIA\")) {\n                result.append('X');\n                index += 3;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CC\")) && (!((index == 1) && ((charAt(value, 0)) == 'M')))) {\n                return handleCC(value, result, index);\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n                result.append('K');\n                index += 2;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n                    result.append('S', 'X');\n                } else {\n                    result.append('S');\n                }\n                index += 2;\n            } else {\n                result.append('K');\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n                    index += 3;\n                } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n                    index += 2;\n                } else {\n                    index++;\n                }\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[138,139,140,141,142,145,146,147,148,149,150,151,152,153,154,155],"tindex":"fac6ca1a-2e97-11e6-9a6d-67ccdcd3fbda","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:257","type":"CtMethodImpl","sourcecode":"private static java.lang.String join(final java.lang.Iterable<java.lang.String> strings, final java.lang.String sep) {\n    if ((sep.length()) == 0) {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            final java.util.Iterator<java.lang.String> java.util.Iterator<java.lang.String> = strings.iterator();\n            if (si.hasNext()) {\n                sb.append(si.next());\n            } \n            while (si.hasNext()) {\n                sb.append(sep).append(si.next());\n            }\n            return sb.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"sep"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtBinaryOperatorImpl","sourcecode":"(salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))"},"failures":[],"tindex":"fac6f12b-2e97-11e6-9a6d-676c8d866a72","method":{"position":"org.apache.commons.codec.net.BCodec:158","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) throws org.apache.commons.codec.EncoderException {\n    if ((value != null) && (!(salt.startsWith(value)))) {\n        {\n            if (value == null) {\n                return null;\n            } \n            return encode(value, org.apache.commons.codec.net.BCodec.this.getCharset());\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"value","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"value"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:540","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"fac6f12c-2e97-11e6-9a6d-6d67de3f3a6e","method":{"position":"org.apache.commons.codec.language.bm.Rule:264","type":"CtMethodImpl","sourcecode":"private static java.util.Scanner createScanner(final java.lang.String lang) {\n    if (lang == null) {\n        {\n            if (lang == null) {\n                {\n                    final java.lang.String java.lang.String = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang);\n                    final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName);\n                    if (rulesIS == null) {\n                        throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n                    } \n                    return new java.util.Scanner(rulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"lang"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.Base64:735","type":"CtBinaryOperatorImpl","sourcecode":"bigInt == null"},"failures":[194],"tindex":"fac7183d-2e97-11e6-9a6d-ddd2c5a1d66d","method":{"position":"org.apache.commons.codec.net.QCodec:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"));\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:292","type":"CtBinaryOperatorImpl","sourcecode":"(key.length()) > 1"},"failures":[139,140,145,146,147,148,151],"tindex":"fac73f4e-2e97-11e6-9a6d-81017e7b2b9b","method":{"position":"org.apache.commons.codec.language.bm.Rule:698","type":"CtMethodImpl","sourcecode":"public boolean patternAndContextMatches(final java.lang.CharSequence input, final int i) {\n    if ((input.length()) > 1) {\n        {\n            if (i < 0) {\n                throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n            } \n            final int int = org.apache.commons.codec.language.bm.Rule.this.java.lang.String.length();\n            final int int = i + patternLength;\n            if (ipl > (input.length())) {\n                return false;\n            } \n            if (!(input.subSequence(i, ipl).equals(org.apache.commons.codec.language.bm.Rule.this.java.lang.String))) {\n                return false;\n            } else if (!(org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(ipl, input.length())))) {\n                return false;\n            } \n            return org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(0, i));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:145","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[],"tindex":"fac73f4f-2e97-11e6-9a6d-756d92e5ef0d","method":{"position":"org.apache.commons.codec.StringEncoderComparator:75","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int compare(final java.lang.Object o1, final java.lang.Object o2) {\n    if (o1.endsWith(o2)) {\n        {\n            int int = 0;\n            try {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final java.lang.Comparable<java.lang.Comparable<?>> java.lang.Comparable<java.lang.Comparable<?>> = ((java.lang.Comparable<java.lang.Comparable<?>>)(org.apache.commons.codec.StringEncoderComparator.this.org.apache.commons.codec.StringEncoder.encode(o1)));\n                final java.lang.Comparable<?> java.lang.Comparable<?> = ((java.lang.Comparable<?>)(org.apache.commons.codec.StringEncoderComparator.this.org.apache.commons.codec.StringEncoder.encode(o2)));\n                compareCode = s1.compareTo(s2);\n            } catch (final org.apache.commons.codec.EncoderException ee) {\n                compareCode = 0;\n            }\n            return compareCode;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"o2","line":"o1"},"type":"special","returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"fac76660-2e97-11e6-9a6d-f11876f8f494","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:412","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if ((obj == null) || ((str.length()) == 0)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if ((obj == null) || ((txt.length()) == 0)) {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n                    } \n                    return encode(((java.lang.String)(obj)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"obj"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[44],"tindex":"fac78d71-2e97-11e6-9a6d-534e4a1c4a3f","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:425","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] pArray) {\n    if (pArray == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((pArray == null) || ((pArray.int) == 0)) {\n                return pArray;\n            } \n            final org.apache.commons.codec.binary.BaseNCodec.Context org.apache.commons.codec.binary.BaseNCodec.Context = new org.apache.commons.codec.binary.BaseNCodec.Context();\n            encode(pArray, 0, pArray.int, context);\n            encode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context);\n            final byte[] byte[] = new byte[(context.int) - (context.int)];\n            readResults(buf, 0, buf.int, context);\n            return buf;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"pArray"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[195,196,197,198,199,200,201,202],"tindex":"fac78d72-2e97-11e6-9a6d-c99b4e6f50b1","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:198","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] original, java.lang.String salt) {\n    if (original == null) {\n        {\n            if (original == null) {\n                {\n                    if (salt == null) {\n                        final java.util.Random java.util.Random = new java.util.Random();\n                        final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int;\n                        salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)]);\n                    } else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n                    } \n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \");\n                    final char char = salt.charAt(0);\n                    final char char = salt.charAt(1);\n                    buffer.setCharAt(0, charZero);\n                    buffer.setCharAt(1, charOne);\n                    final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charZero];\n                    final int int = (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charOne]) << 4;\n                    final byte[] byte[] = new byte[8];\n                    for (int int = 0 ; i < (key.int) ; i++) {\n                        key[i] = 0;\n                    }\n                    for (int int = 0 ; (i < (key.int)) && (i < (original.int)) ; i++) {\n                        final int int = original[i];\n                        key[i] = ((byte)(iChar << 1));\n                    }\n                    final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.desSetKey(key);\n                    final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.body(schedule, eSwap0, eSwap1);\n                    final byte[] byte[] = new byte[9];\n                    org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[0], b, 0);\n                    org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[1], b, 4);\n                    b[8] = 0;\n                    int int = 2;\n                    int int = 0;\n                    int int = 128;\n                    for ( ; i < 13 ; i++) {\n                        int int = 0;\n                        int int = 0;\n                        for ( ; j < 6 ; j++) {\n                            c <<= 1;\n                            if (((b[y]) & u) != 0) {\n                                c |= 1;\n                            } \n                            u >>>= 1;\n                            if (u == 0) {\n                                y++;\n                                u = 128;\n                            } \n                            buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n                        }\n                    }\n                    return buffer.toString();\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"original"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[],"tindex":"fac7b483-2e97-11e6-9a6d-713eca53b6bf","method":{"position":"org.apache.commons.codec.digest.Crypt:45","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] keyBytes) {\n    if (keyBytes != null) {\n        {\n            return org.apache.commons.codec.digest.Crypt.crypt(keyBytes, null);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"keyBytes"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[203],"tindex":"fac7db94-2e97-11e6-9a6d-b19dd5a95dde","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:115","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object ascii) throws org.apache.commons.codec.DecoderException {\n    if (ascii == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (ascii == null) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            if (ascii instanceof byte[]) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n            } \n            if (ascii instanceof char[]) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n            } \n            if (ascii instanceof java.lang.String) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n            } \n            throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"ascii"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:283","type":"CtBinaryOperatorImpl","sourcecode":"lineLength > 0"},"failures":[156,158,159,160,161,162,163],"tindex":"fac7db95-2e97-11e6-9a6d-8559fa97e841","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:597","type":"CtMethodImpl","sourcecode":"private int handleS(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (index > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n                index++;\n            } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n                result.append('X', 'S');\n                index++;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                    result.append('S');\n                } else {\n                    result.append('X');\n                }\n                index += 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n                if (slavoGermanic) {\n                    result.append('S');\n                } else {\n                    result.append('S', 'X');\n                }\n                index += 3;\n            } else if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n                result.append('S', 'X');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n                index = handleSC(value, result, index);\n            } else {\n                if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n                    result.appendAlternate('S');\n                } else {\n                    result.append('S');\n                }\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineLength":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"fac802a6-2e97-11e6-9a6d-03f374c24e7e","method":{"position":"org.apache.commons.codec.digest.DigestUtils:499","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final byte[] data) {\n    if (data == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"fac802a7-2e97-11e6-9a6d-912faabcc284","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:198","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] original, java.lang.String salt) {\n    if (original == null) {\n        {\n            if (original == null) {\n                {\n                    if (salt == null) {\n                        final java.util.Random java.util.Random = new java.util.Random();\n                        final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int;\n                        salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)]);\n                    } else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n                    } \n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \");\n                    final char char = salt.charAt(0);\n                    final char char = salt.charAt(1);\n                    buffer.setCharAt(0, charZero);\n                    buffer.setCharAt(1, charOne);\n                    final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charZero];\n                    final int int = (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charOne]) << 4;\n                    final byte[] byte[] = new byte[8];\n                    for (int int = 0 ; i < (key.int) ; i++) {\n                        key[i] = 0;\n                    }\n                    for (int int = 0 ; (i < (key.int)) && (i < (original.int)) ; i++) {\n                        final int int = original[i];\n                        key[i] = ((byte)(iChar << 1));\n                    }\n                    final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.desSetKey(key);\n                    final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.body(schedule, eSwap0, eSwap1);\n                    final byte[] byte[] = new byte[9];\n                    org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[0], b, 0);\n                    org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[1], b, 4);\n                    b[8] = 0;\n                    int int = 2;\n                    int int = 0;\n                    int int = 128;\n                    for ( ; i < 13 ; i++) {\n                        int int = 0;\n                        int int = 0;\n                        for ( ; j < 6 ; j++) {\n                            c <<= 1;\n                            if (((b[y]) & u) != 0) {\n                                c |= 1;\n                            } \n                            u >>>= 1;\n                            if (u == 0) {\n                                y++;\n                                u = 128;\n                            } \n                            buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n                        }\n                    }\n                    return buffer.toString();\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"original"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"fac829b8-2e97-11e6-9a6d-51763ecf7e2a","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:428","type":"CtMethodImpl","sourcecode":"private java.lang.String preprocess(java.lang.String text) {\n    if (text == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            text = text.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final char[] char[] = text.toCharArray();\n            for (int int = 0 ; index < (chrs.int) ; index++) {\n                if ((chrs[index]) > 'Z') {\n                    for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n                        if ((chrs[index]) == (element[0])) {\n                            chrs[index] = element[1];\n                            break;\n                        } \n                    }\n                } \n            }\n            return new java.lang.String(chrs);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:168","type":"CtBinaryOperatorImpl","sourcecode":"b == '+'"},"failures":[],"tindex":"fac829b9-2e97-11e6-9a6d-a94b5c83fbea","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:268","type":"CtMethodImpl","sourcecode":"protected byte[] ensureBufferSize(final int size, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (size == '+') {\n        {\n            if (size > (-1)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (((context.byte[]) == null) || ((context.byte[].int) < ((context.int) + size))) {\n                        return resizeBuffer(context);\n                    } \n                    return context.byte[];\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"size"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"fac850ca-2e97-11e6-9a6d-b96e792d15b0","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:409","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:366","type":"CtBinaryOperatorImpl","sourcecode":"(chr == 'S') || (chr == 'Z')"},"failures":[],"tindex":"fac850cb-2e97-11e6-9a6d-55434f71c226","method":{"position":"org.apache.commons.codec.language.Soundex:229","type":"CtMethodImpl","sourcecode":"private char map(final char ch) {\n    if ((ch == 'S') || (chr == 'Z')) {\n        {\n            final int int = ch - 'A';\n            if ((index < 0) || (index >= (org.apache.commons.codec.language.Soundex.this.getSoundexMapping().int))) {\n                throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch));\n            } \n            return org.apache.commons.codec.language.Soundex.this.getSoundexMapping()[index];\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"ch"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[],"tindex":"fac850cc-2e97-11e6-9a6d-ff85cd7dceda","method":{"position":"org.apache.commons.codec.digest.HmacUtils:444","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (valueToDigest == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest).doFinal();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:68","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX)"},"failures":[13],"tindex":"fac877dd-2e97-11e6-9a6d-5993c4b71756","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:393","type":"CtMethodImpl","sourcecode":"public byte[] decode(final java.lang.String pArray) {\n    if (pArray.startsWith(pArray)) {\n        {\n            return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX":"pArray","salt":"pArray"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"fac877de-2e97-11e6-9a6d-f184d9d9f5f4","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:147","type":"CtMethodImpl","sourcecode":"public void setNameType(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155],"tindex":"fac89eef-2e97-11e6-9a6d-7763c181568e","method":{"position":"org.apache.commons.codec.language.bm.Rule:253","type":"CtMethodImpl","sourcecode":"private static java.util.Scanner createScanner(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang == null) {\n        {\n            if ((((lang == null) || (lang.equalsIgnoreCase(name))) || (lang.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (lang == null) {\n                        {\n                            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.createResourceName(nameType, rt, lang);\n                            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName);\n                            if (rulesIS == null) {\n                                throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n                            } \n                            return new java.util.Scanner(rulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"lang"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[],"tindex":"fac89ef0-2e97-11e6-9a6d-3300b9c4116c","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:268","type":"CtMethodImpl","sourcecode":"public static char[] toAsciiChars(final byte[] raw) {\n    if (raw == raw) {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[];\n            } \n            final char[] char[] = new char[(raw.int) << 3];\n            for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                        l_ascii[(jj - bits)] = '0';\n                    } else {\n                        l_ascii[(jj - bits)] = '1';\n                    }\n                }\n            }\n            return l_ascii;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"raw","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"raw"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"fac8c601-2e97-11e6-9a6d-b17c438a6019","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:212","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEquals(java.lang.String name1, java.lang.String name2) {\n    if ((name1 == null) || ((txt.length()) == 0)) {\n        {\n            if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n                return false;\n            } else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n                return false;\n            } else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n                return false;\n            } else if (name1.equalsIgnoreCase(name2)) {\n                return true;\n            } \n            name1 = cleanName(name1);\n            name2 = cleanName(name2);\n            name1 = removeVowels(name1);\n            name2 = removeVowels(name2);\n            name1 = removeDoubleConsonants(name1);\n            name2 = removeDoubleConsonants(name2);\n            name1 = getFirst3Last3(name1);\n            name2 = getFirst3Last3(name2);\n            if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                return false;\n            } \n            final int int = java.lang.Math.abs(((name1.length()) + (name2.length())));\n            int int = 0;\n            minRating = getMinRating(sumLength);\n            final int int = leftToRightThenRightToLeftProcessing(name1, name2);\n            return count >= minRating;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"name1"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[6,11,12,15,17,18,19,20,21,22,23,24,26,27,28,30,32,204,35,36,38,40,41,44,48,49,53,54,56,62,72,75,79,91,92,94],"tindex":"fac8c602-2e97-11e6-9a6d-75b1f314623b","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:515","type":"CtMethodImpl","sourcecode":"public long getEncodedLength(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            long long = ((((pArray.int) + (int)) - 1) / (int)) * ((long)(int));\n            if ((int) > 0) {\n                len += (((len + (int)) - 1) / (int)) * (int);\n            } \n            return len;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:180","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[138,139,140,141,142,145,146,147,148,149,150,151,152,153,154,155],"tindex":"fac8ed13-2e97-11e6-9a6d-0d69eb80fe96","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:383","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String input) {\n    if ((input.length()) == 0) {\n        {\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.Lang.guessLanguages(input);\n            return encode(input, languageSet);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:369","type":"CtBinaryOperatorImpl","sourcecode":"lastCode == '/'"},"failures":[205,206,207,208,209,210,211,212,213,214],"tindex":"fac8ed14-2e97-11e6-9a6d-978ea894a218","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:234","type":"CtMethodImpl","sourcecode":"public void addRight(final char chr) {\n    if (chr == '/') {\n        {\n            char[][int] = chr;\n            (int)++;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lastCode":"chr"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtBinaryOperatorImpl","sourcecode":"(((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)"},"failures":[],"tindex":"fac8ed15-2e97-11e6-9a6d-2be65017abef","method":{"position":"org.apache.commons.codec.language.bm.Rule:253","type":"CtMethodImpl","sourcecode":"private static java.util.Scanner createScanner(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang == null) {\n        {\n            if ((((lang == null) || (lang.equalsIgnoreCase(name))) || (lang.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (lang == null) {\n                        {\n                            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.createResourceName(nameType, rt, lang);\n                            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName);\n                            if (rulesIS == null) {\n                                throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n                            } \n                            return new java.util.Scanner(rulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"lang","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"lang","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"lang"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtInvocationImpl","sourcecode":"line.contains(\"=\")"},"failures":[215,216],"tindex":"fac91426-2e97-11e6-9a6d-05346b3cfc74","method":{"position":"org.apache.commons.codec.language.SoundexUtils:85","type":"CtMethodImpl","sourcecode":"static int difference(final org.apache.commons.codec.StringEncoder encoder, final java.lang.String s1, final java.lang.String s2) throws org.apache.commons.codec.EncoderException {\n    if (s2.contains(\"=\")) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            return org.apache.commons.codec.language.SoundexUtils.differenceEncoded(encoder.encode(s1), encoder.encode(s2));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"s2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtInvocationImpl","sourcecode":"str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)"},"failures":[217],"tindex":"fac91427-2e97-11e6-9a6d-3dece3b4b6bc","method":{"position":"org.apache.commons.codec.binary.StringUtils:137","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUnchecked(final java.lang.String string, final java.lang.String charsetName) {\n    if (string.startsWith(charsetName)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (string == null) {\n                return null;\n            } \n            try {\n                return string.getBytes(charsetName);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"string","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"charsetName"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[218],"tindex":"fac91428-2e97-11e6-9a6d-c12ba4cdf7d1","method":{"position":"org.apache.commons.codec.digest.HmacUtils:509","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key.startsWith(valueToDigest)) {\n        {\n            if (valueToDigest == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:516","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))"},"failures":[],"tindex":"fac93b39-2e97-11e6-9a6d-81091072910a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:498","type":"CtMethodImpl","sourcecode":"private int handleH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((index == 0) || (isVowel(charAt(value, (index - 1))))) && (isVowel(charAt(value, (index + 1))))) {\n                result.append('H');\n                index += 2;\n            } else {\n                index++;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:301","type":"CtBinaryOperatorImpl","sourcecode":"(key.length()) > 2"},"failures":[219,220,221,222,223,224,225,226,227,228,229,230,231,232,233],"tindex":"fac93b3a-2e97-11e6-9a6d-f9ec9e7f0bcb","method":{"position":"org.apache.commons.codec.language.Metaphone:338","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final java.lang.StringBuilder string, final int index) {\n    if ((string.length()) > 2) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(string.charAt(index))) >= 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"string"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"fac93b3b-2e97-11e6-9a6d-7bfc72bd5b48","method":{"position":"org.apache.commons.codec.language.bm.Lang:113","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang instance(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        {\n            return org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Lang>.get(nameType);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[234],"tindex":"fac9624c-2e97-11e6-9a6d-9be0f5068788","method":{"position":"org.apache.commons.codec.language.SoundexUtils:41","type":"CtMethodImpl","sourcecode":"static java.lang.String clean(final java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((str == null) || ((str.length()) == 0)) {\n                return str;\n            } \n            final int int = str.length();\n            final char[] char[] = new char[len];\n            int int = 0;\n            for (int int = 0 ; i < len ; i++) {\n                if (java.lang.Character.isLetter(str.charAt(i))) {\n                    chars[(count++)] = str.charAt(i);\n                } \n            }\n            if (count == len) {\n                return str.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            } \n            return new java.lang.String(chars , 0 , count).toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:616","type":"CtVariableReadImpl","sourcecode":"slavoGermanic"},"failures":[],"tindex":"fac9624d-2e97-11e6-9a6d-d1d4efc034a1","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:180","type":"CtMethodImpl","sourcecode":"public java.lang.String[] getReplacements(final java.lang.String context, final boolean atStart) {\n    if (atStart) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (context == null) {\n                {\n                    if (atStart) {\n                        return java.lang.String[];\n                    } \n                    final int int = getPatternLength();\n                    final boolean boolean = nextIndex < (context.length()) ? isVowel(context.charAt(nextIndex)) : false;\n                    if (nextCharIsVowel) {\n                        return java.lang.String[];\n                    } \n                    return java.lang.String[];\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"slavoGermanic":"atStart"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[235,236],"tindex":"fac9895e-2e97-11e6-9a6d-b76506b14826","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:238","type":"CtMethodImpl","sourcecode":"public static byte[] toAsciiBytes(final byte[] raw) {\n    if (raw != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                        return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n                    } \n                    final byte[] byte[] = new byte[(raw.int) << 3];\n                    for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                        for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                            if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                                l_ascii[(jj - bits)] = '0';\n                            } else {\n                                l_ascii[(jj - bits)] = '1';\n                            }\n                        }\n                    }\n                    return l_ascii;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"raw"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[171],"tindex":"fac9b06f-2e97-11e6-9a6d-77cf45cdce19","method":{"position":"org.apache.commons.codec.digest.DigestUtils:748","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String shaHex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"fac9b070-2e97-11e6-9a6d-ed792aa6ac8a","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:376","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (obj instanceof byte[]) {\n                return decode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtBinaryOperatorImpl","sourcecode":"ascii == null"},"failures":[180,181,182,237,184],"tindex":"fac9b071-2e97-11e6-9a6d-43250f939b89","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source == null) {\n        {\n            if (source == null) {\n                return null;\n            } \n            return soundex(source, false)[0];\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:662","type":"CtBinaryOperatorImpl","sourcecode":"(binaryData == null) || ((binaryData.length) == 0)"},"failures":[238,0,239,1,2,3,51,52,53,54,55,56,57,58,80,83,84,85,87,90],"tindex":"fac9d782-2e97-11e6-9a6d-79299c253f2f","method":{"position":"org.apache.commons.codec.binary.Base32:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid encode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if ((in == null) || (inAvail == 0)) {\n        {\n            if (context.boolean) {\n                return ;\n            } \n            if (inAvail < 0) {\n                context.boolean = true;\n                if ((0 == (context.int)) && ((int) == 0)) {\n                    return ;\n                } \n                final byte[] byte[] = ensureBufferSize(int, context);\n                final int int = context.int;\n                switch (context.int) {\n                    case 0 :\n                        break;\n                    case 1 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    case 2 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    case 3 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    case 4 :\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 22))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 7))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte;\n                        break;\n                    default :\n                        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                }\n                context.int += (context.int) - savedPos;\n                if (((int) > 0) && ((context.int) > 0)) {\n                    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                    context.int += byte[].int;\n                } \n            } else {\n                for (int int = 0 ; i < inAvail ; i++) {\n                    final byte[] byte[] = ensureBufferSize(int, context);\n                    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n                    int int = in[(inPos++)];\n                    if (b < 0) {\n                        b += 256;\n                    } \n                    context.long = ((context.long) << 8) + b;\n                    if (0 == (context.int)) {\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                        context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n                        if (((int) > 0) && ((int) <= (context.int))) {\n                            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                            context.int += byte[].int;\n                            context.int = 0;\n                        } \n                    } \n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"binaryData":"in","length":"inAvail"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[240,241],"tindex":"faca25a3-2e97-11e6-9a6d-d1080c2c1bca","method":{"position":"org.apache.commons.codec.digest.HmacUtils:526","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha384(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:248","type":"CtBinaryOperatorImpl","sourcecode":"(cnt & 1) != 0"},"failures":[3,75],"tindex":"faca25a4-2e97-11e6-9a6d-b901a56e70df","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final int i) throws java.io.IOException {\n    if ((i & 1) != 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            byte[][0] = ((byte)(i));\n            write(byte[], 0, 1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cnt":"i"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtBinaryOperatorImpl","sourcecode":"((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))"},"failures":[],"tindex":"faca4cb5-2e97-11e6-9a6d-0974c2113ba1","method":{"position":"org.apache.commons.codec.language.Nysiis:247","type":"CtMethodImpl","sourcecode":"public java.lang.String nysiis(java.lang.String str) {\n    if (((str == null) || (str.equalsIgnoreCase(name2))) || (str.equalsIgnoreCase(name2))) {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"MCC\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"NN\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"C\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"FF\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"SSS\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"Y\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"D\");\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length());\n            key.append(str.charAt(0));\n            final char[] char[] = str.toCharArray();\n            final int int = chars.int;\n            for (int int = 1 ; i < len ; i++) {\n                final char char = i < (len - 1) ? chars[(i + 1)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n                final char char = i < (len - 2) ? chars[(i + 2)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n                final char[] char[] = org.apache.commons.codec.language.Nysiis.transcodeRemaining(chars[(i - 1)], chars[i], next, aNext);\n                java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int);\n                if ((chars[i]) != (chars[(i - 1)])) {\n                    key.append(chars[i]);\n                } \n            }\n            if ((key.length()) > 1) {\n                char char = key.charAt(((key.length()) - 1));\n                if (lastChar == 'S') {\n                    key.deleteCharAt(((key.length()) - 1));\n                    lastChar = key.charAt(((key.length()) - 1));\n                } \n                if ((key.length()) > 2) {\n                    final char char = key.charAt(((key.length()) - 2));\n                    if ((last2Char == 'A') && (lastChar == 'Y')) {\n                        key.deleteCharAt(((key.length()) - 2));\n                    } \n                } \n                if (lastChar == 'A') {\n                    key.deleteCharAt(((key.length()) - 1));\n                } \n            } \n            final java.lang.String java.lang.String = key.toString();\n            return org.apache.commons.codec.language.Nysiis.this.isStrict() ? string.substring(0, java.lang.Math.min(org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.int, string.length())) : string;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"str","name2":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"faca73c6-2e97-11e6-9a6d-1369484b6ada","method":{"position":"org.apache.commons.codec.language.bm.Rule:253","type":"CtMethodImpl","sourcecode":"private static java.util.Scanner createScanner(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang == null) {\n        {\n            if ((((lang == null) || (lang.equalsIgnoreCase(name))) || (lang.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (lang == null) {\n                        {\n                            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.createResourceName(nameType, rt, lang);\n                            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName);\n                            if (rulesIS == null) {\n                                throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n                            } \n                            return new java.util.Scanner(rulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"lang"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:268","type":"CtBinaryOperatorImpl","sourcecode":"(i % 7) != 0"},"failures":[95,242,96,243,97,98,99,100,101,102,104,105,244,108,109,111,112,114,115,245,246,116,117,247,119,120,121,122,123,124,125,126,127,128,129,130,131,132,248,249,250,136],"tindex":"faca73c7-2e97-11e6-9a6d-0d1db7d2c571","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:184","type":"CtMethodImpl","sourcecode":"int getMinRating(final int sumLength) {\n    if ((sumLength % 7) != 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            } else {\n                minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n            }\n            return minRating;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"sumLength"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[251,252,253,254],"tindex":"faca9ad8-2e97-11e6-9a6d-f137a4b0f51a","method":{"position":"org.apache.commons.codec.binary.Hex:249","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object object) throws org.apache.commons.codec.DecoderException {\n    if (object == null) {\n        {\n            try {\n                final char[] char[] = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object));\n                return org.apache.commons.codec.binary.Hex.decodeHex(charArray);\n            } catch (final java.lang.ClassCastException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"object"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"faca9ad9-2e97-11e6-9a6d-2381af514777","method":{"position":"org.apache.commons.codec.net.QCodec:264","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if (((str.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return decodeText(str);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"str"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)"},"failures":[],"tindex":"faca9ada-2e97-11e6-9a6d-39e1bf5514a9","method":{"position":"org.apache.commons.codec.digest.DigestUtils:625","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha384Hex(final java.lang.String data) {\n    if (data.endsWith(data)) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"data","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"facac1eb-2e97-11e6-9a6d-7d8696b2b4d0","method":{"position":"org.apache.commons.codec.binary.StringUtils:318","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUsAscii(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[255,256,257,258,259,260,261],"tindex":"facac1ec-2e97-11e6-9a6d-db2b35709387","method":{"position":"org.apache.commons.codec.net.URLCodec:161","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeUrl(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (int int = 0 ; i < (bytes.int) ; i++) {\n                final int int = bytes[i];\n                if (b == '+') {\n                    buffer.write(' ');\n                } else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n                    try {\n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                        buffer.write(((char)((u << 4) + l)));\n                    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                        throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n                    }\n                } else {\n                    buffer.write(b);\n                }\n            }\n            return buffer.toByteArray();\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtBinaryOperatorImpl","sourcecode":"to == terminator"},"failures":[159,160,162,163],"tindex":"facac1ed-2e97-11e6-9a6d-998f98736c4c","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:647","type":"CtMethodImpl","sourcecode":"private int handleSC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (index == index) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 2))) == 'H') {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n                        result.append(\"X\", \"SK\");\n                    } else {\n                        result.append(\"SK\");\n                    }\n                } else {\n                    if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n                        result.append('X', 'S');\n                    } else {\n                        result.append('X');\n                    }\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                result.append('S');\n            } else {\n                result.append(\"SK\");\n            }\n            return index + 3;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"terminator":"index","to":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:301","type":"CtBinaryOperatorImpl","sourcecode":"element == key"},"failures":[],"tindex":"facae8fe-2e97-11e6-9a6d-09f79dad3bb4","method":{"position":"org.apache.commons.codec.language.Nysiis:100","type":"CtMethodImpl","sourcecode":"private static boolean isVowel(final char c) {\n    if (c == c) {\n        {\n            return ((((c == 'A') || (c == 'E')) || (c == 'I')) || (c == 'O')) || (c == 'U');\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"c","element":"c"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:145","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[159,160,162,163],"tindex":"facae8ff-2e97-11e6-9a6d-7b6380d1eff1","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:466","type":"CtMethodImpl","sourcecode":"private int handleGH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value.endsWith(value)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index > 0) && (!(isVowel(charAt(value, (index - 1)))))) {\n                result.append('K');\n                index += 2;\n            } else if (index == 0) {\n                if ((charAt(value, (index + 2))) == 'I') {\n                    result.append('J');\n                } else {\n                    result.append('K');\n                }\n                index += 2;\n            } else if ((((index > 1) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 1, \"B\", \"H\", \"D\"))) || ((index > 2) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"B\", \"H\", \"D\")))) || ((index > 3) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 1, \"B\", \"H\")))) {\n                index += 2;\n            } else {\n                if (((index > 2) && ((charAt(value, (index - 1))) == 'U')) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"C\", \"G\", \"L\", \"R\", \"T\"))) {\n                    result.append('F');\n                } else if ((index > 0) && ((charAt(value, (index - 1))) != 'I')) {\n                    result.append('K');\n                } \n                index += 2;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"value","line":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[262],"tindex":"facb1010-2e97-11e6-9a6d-71b4186a8c7f","method":{"position":"org.apache.commons.codec.Charsets:86","type":"CtMethodImpl","sourcecode":"public static java.nio.charset.Charset toCharset(final java.lang.String charset) {\n    if ((charset.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return charset == null ? java.nio.charset.Charset.defaultCharset() : java.nio.charset.Charset.forName(charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"charset"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:429","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[150],"tindex":"facb1011-2e97-11e6-9a6d-f757895f42a5","method":{"position":"org.apache.commons.codec.language.bm.Lang:214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Languages.LanguageSet guessLanguages(final java.lang.String input) {\n    if ((input.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(org.apache.commons.codec.language.bm.Lang.this.org.apache.commons.codec.language.bm.Languages.getLanguages());\n            for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n                if (rule.matches(text)) {\n                    if (rule.boolean) {\n                        langs.retainAll(rule.java.util.Set<java.lang.String>);\n                    } else {\n                        langs.removeAll(rule.java.util.Set<java.lang.String>);\n                    }\n                } \n            }\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs);\n            return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[263],"tindex":"facb3722-2e97-11e6-9a6d-eb811d82b804","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:574","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.nio.charset.Charset charset) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str.getBytes(charset)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtUnaryOperatorImpl","sourcecode":"!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))"},"failures":[],"tindex":"facb3723-2e97-11e6-9a6d-5908e8173c59","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:676","type":"CtMethodImpl","sourcecode":"private int handleT(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (!(value.matches(((\"^[\" + value) + \"]{2,}$\")))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n                result.append('X');\n                index += 3;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n                result.append('X');\n                index += 3;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n                if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                    result.append('T');\n                } else {\n                    result.append('0', 'T');\n                }\n                index += 2;\n            } else {\n                result.append('T');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"value","org.apache.commons.codec.digest.B64.B64T":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"facb5e34-2e97-11e6-9a6d-3d5acba3df72","method":{"position":"org.apache.commons.codec.language.bm.Rule:499","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.RPattern pattern(final java.lang.String regex) {\n    if ((regex == null) || ((txt.length()) == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = regex.startsWith(\"^\");\n            final boolean boolean = regex.endsWith(\"$\");\n            final java.lang.String java.lang.String = regex.substring((startsWith ? 1 : 0), (endsWith ? (regex.length()) - 1 : regex.length()));\n            final boolean boolean = content.contains(\"[\");\n            if (!boxes) {\n                if (startsWith && endsWith) {\n                    if ((content.length()) == 0) {\n                        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                            @java.lang.Override\n                            public boolean isMatch(final java.lang.CharSequence input) {\n                                return (input.length()) == 0;\n                            }\n                        };\n                    } else {\n                        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                            @java.lang.Override\n                            public boolean isMatch(final java.lang.CharSequence input) {\n                                return input.equals(content);\n                            }\n                        };\n                    }\n                } else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n                    return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern;\n                } else if (startsWith) {\n                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                        @java.lang.Override\n                        public boolean isMatch(final java.lang.CharSequence input) {\n                            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n                        }\n                    };\n                } else if (endsWith) {\n                    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                        @java.lang.Override\n                        public boolean isMatch(final java.lang.CharSequence input) {\n                            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n                        }\n                    };\n                } \n            } else {\n                final boolean boolean = content.startsWith(\"[\");\n                final boolean boolean = content.endsWith(\"]\");\n                if (startsWithBox && endsWithBox) {\n                    java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1));\n                    if (!(boxContent.contains(\"[\"))) {\n                        final boolean boolean = boxContent.startsWith(\"^\");\n                        if (negate) {\n                            boxContent = boxContent.substring(1);\n                        } \n                        final java.lang.String java.lang.String = boxContent;\n                        final boolean boolean = !negate;\n                        if (startsWith && endsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                                }\n                            };\n                        } else if (startsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                                }\n                            };\n                        } else if (endsWith) {\n                            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                                @java.lang.Override\n                                public boolean isMatch(final java.lang.CharSequence input) {\n                                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                                }\n                            };\n                        } \n                    } \n                } \n            }\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(regex);\n\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(input);\n                    return matcher.find();\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"regex"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:264","type":"CtBinaryOperatorImpl","sourcecode":"(i % 3) != 0"},"failures":[264,265],"tindex":"facbac55-2e97-11e6-9a6d-e79cc14baaa2","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:237","type":"CtMethodImpl","sourcecode":"private static boolean isWhitespace(final int b) {\n    if ((b % 3) != 0) {\n        {\n            return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"b"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)"},"failures":[138,139,140,141,142,145,146,147,148,149,150,151,152,153,154,155],"tindex":"facbac56-2e97-11e6-9a6d-b51eb40540fe","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:398","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(java.lang.String input, final org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet) {\n    if (input.endsWith(input)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType, languageSet);\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, \"common\");\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, languageSet);\n            input = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale).replace('-', ' ').trim();\n            if ((org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) == (org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType)) {\n                if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n                    final java.lang.String java.lang.String = input.substring(2);\n                    final java.lang.String java.lang.String = \"d\" + remainder;\n                    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n                } \n                for (final java.lang.String java.lang.String : org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)) {\n                    if (input.startsWith((l + \" \"))) {\n                        final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n                        final java.lang.String java.lang.String = l + remainder;\n                        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n                    } \n                }\n            } \n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = java.util.Arrays.asList(input.split(\"\\\\s+\"));\n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            switch (org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) {\n                case SEPHARDIC :\n                    for (final java.lang.String java.lang.String : words) {\n                        final java.lang.String[] java.lang.String[] = aWord.split(\"'\");\n                        final java.lang.String java.lang.String = parts[((parts.int) - 1)];\n                        words2.add(lastPart);\n                    }\n                    words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType));\n                    break;\n                case ASHKENAZI :\n                    words2.addAll(words);\n                    words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType));\n                    break;\n                case GENERIC :\n                    words2.addAll(words);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException((\"Unreachable case: \" + (org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)));\n            }\n            if (org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean) {\n                input = org.apache.commons.codec.language.bm.PhoneticEngine.join(words2, \" \");\n            } else if ((words2.size()) == 1) {\n                input = words.iterator().next();\n            } else {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                for (final java.lang.String java.lang.String : words2) {\n                    result.append(\"-\").append(encode(word));\n                }\n                return result.substring(1);\n            }\n            org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(languageSet);\n            for (int int = 0 ; i < (input.length()) ; ) {\n                final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(rules , input , phonemeBuilder , i , int).invoke();\n                i = rulesApplication.getI();\n                phonemeBuilder = rulesApplication.getPhonemeBuilder();\n            }\n            phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1);\n            phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2);\n            return phonemeBuilder.makeString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"input","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[266],"tindex":"facbd367-2e97-11e6-9a6d-f9e6f261a271","method":{"position":"org.apache.commons.codec.digest.HmacUtils:174","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final java.lang.String algorithm, final byte[] key) {\n    if ((algorithm.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                throw new java.lang.IllegalArgumentException(\"Null key\");\n            } \n            try {\n                final javax.crypto.spec.SecretKeySpec javax.crypto.spec.SecretKeySpec = new javax.crypto.spec.SecretKeySpec(key , algorithm);\n                final javax.crypto.Mac javax.crypto.Mac = javax.crypto.Mac.getInstance(algorithm);\n                mac.init(keySpec);\n                return mac;\n            } catch (final java.security.NoSuchAlgorithmException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            } catch (final java.security.InvalidKeyException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"algorithm"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:429","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[157,159,160,161,162,163],"tindex":"facbfa78-2e97-11e6-9a6d-bddebca29818","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:843","type":"CtMethodImpl","sourcecode":"private boolean conditionM0(final java.lang.String value, final int index) {\n    if ((value.length()) == 0) {\n        {\n            if ((charAt(value, (index + 1))) == 'M') {\n                return true;\n            } \n            return (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"UMB\")) && (((index + 1) == ((value.length()) - 1)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"ER\")));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || ((str.length()) == 0)"},"failures":[],"tindex":"facbfa79-2e97-11e6-9a6d-bfa67992df48","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:412","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if ((obj == null) || ((str.length()) == 0)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if ((obj == null) || ((txt.length()) == 0)) {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n                    } \n                    return encode(((java.lang.String)(obj)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:153","type":"CtBinaryOperatorImpl","sourcecode":"(curr == 'P') && (next == 'H')"},"failures":[],"tindex":"facc218a-2e97-11e6-9a6d-bbb1f7ddb297","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:865","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if ((ch == 'P') && (ch == 'H')) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String.indexOf(ch)) != (-1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"next":"ch","curr":"ch"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[267],"tindex":"facc218b-2e97-11e6-9a6d-9583ad6a425d","method":{"position":"org.apache.commons.codec.binary.StringUtils:216","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Le(final java.lang.String string) {\n    if (string == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"string"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[167,171],"tindex":"facc218c-2e97-11e6-9a6d-bf585ea9af46","method":{"position":"org.apache.commons.codec.digest.DigestUtils:425","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[263],"tindex":"facc218d-2e97-11e6-9a6d-61dc0b5eada0","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:446","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.nio.charset.Charset charset) throws org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[13,44],"tindex":"facc218e-2e97-11e6-9a6d-6b7bc6dc31a5","method":{"position":"org.apache.commons.codec.binary.StringUtils:382","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf8(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newString(bytes, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[197,198,199,202],"tindex":"facc489f-2e97-11e6-9a6d-db61038d1e29","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:398","type":"CtMethodImpl","sourcecode":"private static void intToFourBytes(final int iValue, final byte[] b, int offset) {\n    if (b == b) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            b[(offset++)] = ((byte)(iValue & 255));\n            b[(offset++)] = ((byte)((iValue >>> 8) & 255));\n            b[(offset++)] = ((byte)((iValue >>> 16) & 255));\n            b[(offset++)] = ((byte)((iValue >>> 24) & 255));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"b","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"b"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:347","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,268,20,21,22,23,24,25,26,269,27,28,29,30,31,32,33,34,270,204,271,35,36,37,38,272,39,40,41,42,43,44,45,46,47,48,49,50,59,60,61,273,62,274,63,275,276,64,66,277,67,68,69,70,71,72,73,74,75,76,77,78,79,91,92,93,94],"tindex":"facc48a0-2e97-11e6-9a6d-4f4e520d4fab","method":{"position":"org.apache.commons.codec.binary.Base64:780","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected boolean isInAlphabet(final byte octet) {\n    if (octet == octet) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((octet >= 0) && (octet < (byte[].int))) && ((byte[][octet]) != (-1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"octet","pad":"octet"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[278,279],"tindex":"facc48a1-2e97-11e6-9a6d-f9f25508a8ff","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:463","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final byte[] arrayOctet, final boolean allowWSPad) {\n    if (arrayOctet == null) {\n        {\n            for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"arrayOctet"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:49","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(str.charAt(i))"},"failures":[159,160,161,162,163],"tindex":"facc6fb2-2e97-11e6-9a6d-e9933f7b8b1f","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:758","type":"CtMethodImpl","sourcecode":"private int handleZ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (java.lang.Character.isLetter(value.charAt(index))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                result.append('J');\n                index += 2;\n            } else {\n                if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n                    result.append(\"S\", \"TS\");\n                } else {\n                    result.append('S');\n                }\n                index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value","i":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[13,271],"tindex":"facc6fb3-2e97-11e6-9a6d-0d3789c00db2","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] pArray) {\n    if (pArray == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((pArray == null) || ((pArray.int) == 0)) {\n                return pArray;\n            } \n            final org.apache.commons.codec.binary.BaseNCodec.Context org.apache.commons.codec.binary.BaseNCodec.Context = new org.apache.commons.codec.binary.BaseNCodec.Context();\n            decode(pArray, 0, pArray.int, context);\n            decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context);\n            final byte[] byte[] = new byte[context.int];\n            readResults(result, 0, result.int, context);\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[7,8,9,10,13,16,17,18,19,20,21,22,23,24,26,27,28,29,31,33,34,35,37,38,39,41,42,45,46,47,49,50,59,60,61,62,63,64,66,67,68,69,70,71,72,73,75,77,78,79,91,92,93],"tindex":"facc96c4-2e97-11e6-9a6d-7b1569c841bb","method":{"position":"org.apache.commons.codec.binary.Base64:428","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid decode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (in == null) {\n        {\n            if (context.boolean) {\n                return ;\n            } \n            if (inAvail < 0) {\n                context.boolean = true;\n            } \n            for (int int = 0 ; i < inAvail ; i++) {\n                final byte[] byte[] = ensureBufferSize(int, context);\n                final byte byte = in[(inPos++)];\n                if (b == (byte)) {\n                    context.boolean = true;\n                    break;\n                } else {\n                    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n                        final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n                        if (result >= 0) {\n                            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                            context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n                            if ((context.int) == 0) {\n                                buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                            } \n                        } \n                    } \n                }\n            }\n            if ((context.boolean) && ((context.int) != 0)) {\n                final byte[] byte[] = ensureBufferSize(int, context);\n                switch (context.int) {\n                    case 1 :\n                        break;\n                    case 2 :\n                        context.int = (context.int) >> 4;\n                        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    case 3 :\n                        context.int = (context.int) >> 2;\n                        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    default :\n                        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                }\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"in"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[218],"tindex":"facc96c5-2e97-11e6-9a6d-9d7adfb77c17","method":{"position":"org.apache.commons.codec.digest.HmacUtils:474","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtBinaryOperatorImpl","sourcecode":"ascii == null"},"failures":[],"tindex":"faccbdd6-2e97-11e6-9a6d-6922fdc7737a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:355","type":"CtMethodImpl","sourcecode":"private int handleCH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n                result.append('K', 'X');\n                return index + 2;\n            } else if (conditionCH0(value, index)) {\n                result.append('K');\n                return index + 2;\n            } else if (conditionCH1(value, index)) {\n                result.append('K');\n                return index + 2;\n            } else {\n                if (index > 0) {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n                        result.append('K');\n                    } else {\n                        result.append('X', 'K');\n                    }\n                } else {\n                    result.append('X');\n                }\n                return index + 2;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtBinaryOperatorImpl","sourcecode":"u == 0"},"failures":[],"tindex":"faccbdd7-2e97-11e6-9a6d-c959312519d9","method":{"position":"org.apache.commons.codec.language.Soundex:245","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic void setMaxLength(final int maxLength) {\n    if (maxLength == 0) {\n        {\n            org.apache.commons.codec.language.Soundex.this.int = maxLength;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"u":"maxLength"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtBinaryOperatorImpl","sourcecode":"cmtI >= 0"},"failures":[],"tindex":"faccbdd8-2e97-11e6-9a6d-050c50767ffb","method":{"position":"org.apache.commons.codec.binary.Hex:175","type":"CtMethodImpl","sourcecode":"protected static int toDigit(final char ch, final int index) throws org.apache.commons.codec.DecoderException {\n    if (index >= 0) {\n        {\n            final int int = java.lang.Character.digit(ch, 16);\n            if (digit == (-1)) {\n                throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + ch) + \" at index \") + index));\n            } \n            return digit;\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmtI":"index"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[159,160,161,162,163],"tindex":"facce4e9-2e97-11e6-9a6d-3dd35afc8302","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:968","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.String value) {\n    if ((value.length()) > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendPrimary(value);\n            appendAlternate(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\")\"))"},"failures":[],"tindex":"facce4ea-2e97-11e6-9a6d-77d6d740c6d3","method":{"position":"org.apache.commons.codec.language.bm.Lang:129","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang loadFromResource(final java.lang.String languageRulesResourceName, final org.apache.commons.codec.language.bm.Languages languages) {\n    if (!(languageRulesResourceName.endsWith(\")\"))) {\n        {\n            final java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Lang.LangRule>();\n            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.Class.getClassLoader().getResourceAsStream(languageRulesResourceName);\n            if (lRulesIS == null) {\n                throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)));\n            } \n            final java.util.Scanner java.util.Scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n            try {\n                boolean boolean = false;\n                while (scanner.hasNextLine()) {\n                    final java.lang.String java.lang.String = scanner.nextLine();\n                    java.lang.String java.lang.String = rawLine;\n                    if (inExtendedComment) {\n                        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = false;\n                        } \n                    } else {\n                        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                            inExtendedComment = true;\n                        } else {\n                            final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                            if (cmtI >= 0) {\n                                line = line.substring(0, cmtI);\n                            } \n                            line = line.trim();\n                            if ((line.length()) == 0) {\n                                continue;\n                            } \n                            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                            if ((parts.int) != 3) {\n                                throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                            } \n                            final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n                            final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n                            final boolean boolean = parts[2].equals(\"true\");\n                            rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n                        }\n                    }\n                }\n            } finally {\n                scanner.close();\n            }\n            return new org.apache.commons.codec.language.bm.Lang(rules , languages);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"languageRulesResourceName"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[],"tindex":"facd0bfb-2e97-11e6-9a6d-f7ebcd288186","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:238","type":"CtMethodImpl","sourcecode":"public static byte[] toAsciiBytes(final byte[] raw) {\n    if (raw != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                        return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n                    } \n                    final byte[] byte[] = new byte[(raw.int) << 3];\n                    for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                        for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                            if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                                l_ascii[(jj - bits)] = '0';\n                            } else {\n                                l_ascii[(jj - bits)] = '1';\n                            }\n                        }\n                    }\n                    return l_ascii;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"raw"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtInvocationImpl","sourcecode":"str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[],"tindex":"facd0bfc-2e97-11e6-9a6d-19cec5e2cbce","method":{"position":"org.apache.commons.codec.digest.HmacUtils:509","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key.startsWith(valueToDigest)) {\n        {\n            if (valueToDigest == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"key","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"valueToDigest"},"type":"special","returnInThen":true,"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
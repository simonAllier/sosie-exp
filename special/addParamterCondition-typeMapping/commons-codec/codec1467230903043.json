{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":111,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData":50,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":149,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":88,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":95,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":105,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":104,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty":7,"org.apache.commons.codec.net.URLCodecTest.testEncodeNull":80,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":27,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":69,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":26,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":115,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":135,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":160,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":23,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":6,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":61,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":133,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":140,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":17,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":114,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":154,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":15,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":18,"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence":46,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":39,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":66,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData":124,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":101,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":34,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":90,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":159,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":54,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":53,"org.apache.commons.codec.net.QCodecTest.testLetUsMakeCloverHappy":113,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":28,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":70,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":19,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":12,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":52,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":5,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData":122,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":78,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":120,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":10,"org.apache.commons.codec.net.URLCodecTest.testDecodeWithNullArray":48,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":79,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":56,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":84,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":142,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":146,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":59,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":89,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":83,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":14,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":72,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":148,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":44,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":45,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":47,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":60,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":16,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":68,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":103,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":118,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":150,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":97,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":99,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":77,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":130,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":121,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":151,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":123,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":156,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":157,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":3,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":0,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":117,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":41,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":102,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":67,"org.apache.commons.codec.binary.HexTest.testDecodeArrayOddCharacters":165,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":139,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":71,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":87,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":96,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":144,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":62,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":125,"org.apache.commons.codec.net.RFC1522CodecTest.testNullInput":145,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":11,"org.apache.commons.codec.language.MetaphoneTest.testLocaleIndependence":127,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":75,"org.apache.commons.codec.binary.HexTest.testDencodeEmpty":162,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":136,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":22,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":128,"org.apache.commons.codec.language.MetaphoneTest.testEncodeNull":40,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":108,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":58,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":106,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":155,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":65,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":25,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":132,"org.apache.commons.codec.binary.HexTest.testDecodeStringOddCharacters":164,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":74,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":143,"org.apache.commons.codec.net.QCodecTest.testNullInput":82,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":131,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":36,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":63,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":8,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":1,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":31,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":51,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":30,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":161,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":91,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":35,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":126,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":92,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":64,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":20,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":109,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":119,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":81,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty":4,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":76,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":86,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":158,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":100,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters1":163,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":38,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":43,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":116,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":29,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":153,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":13,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":55,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":42,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":138,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull":85,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":112,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":57,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":94,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":98,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":134,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":129,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":33,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":32,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":147,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":24,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":37,"org.apache.commons.codec.language.SoundexTest.testDifference":49,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":107,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":9,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":137,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":152,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":93,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":21,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":73,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":110,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":141},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:188","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[0,1,2,3,4,5,6,7,8],"tindex":"3b4efdf1-3e35-11e6-9a2d-0f3ebd095cf7","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:75","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(final java.lang.String value) {\n    if (value == null) {\n        {\n            if (value.startsWith(value)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return doubleMetaphone(value, false);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"value","line":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[9,10,11,12,13,14],"tindex":"3b4f4c12-3e35-11e6-9a2d-f37dcd169901","method":{"position":"org.apache.commons.codec.net.URLCodec:224","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException {\n    if (str.equals(\"\")) {\n        {\n            if (str == null) {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.UnsupportedEncodingException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"3b4f4c13-3e35-11e6-9a2d-7f1492689f3f","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:338","type":"CtMethodImpl","sourcecode":"private static int[] desSetKey(final byte[] key) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(key)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int[] int[] = new int[32];\n            int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 0);\n            int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 4);\n            final int[] int[] = new int[2];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 4, 252645135, results);\n            d = results[0];\n            c = results[1];\n            c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888);\n            d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888);\n            org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n            d = results[0];\n            c = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results);\n            c = results[0];\n            d = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n            d = results[0];\n            c = results[1];\n            d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4);\n            c &= 268435455;\n            int int = 0;\n            for (int int = 0 ; i < 16 ; i++) {\n                if (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.boolean[][i]) {\n                    c = (c >>> 2) | (c << 26);\n                    d = (d >>> 2) | (d << 26);\n                } else {\n                    c = (c >>> 1) | (c << 27);\n                    d = (d >>> 1) | (d << 27);\n                }\n                c &= 268435455;\n                d &= 268435455;\n                int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))]);\n                final int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][(d & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][(((d >>> 7) & 3) | ((d >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((d >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][(((d >>> 21) & 15) | ((d >>> 22) & 48))]);\n                schedule[(j++)] = (t << 16) | (s & 65535);\n                s = (s >>> 16) | (t & -65536);\n                s = (s << 4) | (s >>> 28);\n                schedule[(j++)] = s;\n            }\n            return schedule;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:168","type":"CtBinaryOperatorImpl","sourcecode":"b == '+'"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"tindex":"3b4f7324-3e35-11e6-9a2d-194ac1f01782","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:106","type":"CtMethodImpl","sourcecode":"public void apply(final org.apache.commons.codec.language.bm.Rule.PhonemeExpr phonemeExpr, final int maxPhonemes) {\n    if (maxPhonemes == '+') {\n        {\n            final java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.LinkedHashSet<org.apache.commons.codec.language.bm.Rule.Phoneme>(maxPhonemes);\n            EXPR : for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n                for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeExpr.getPhonemes()) {\n                    final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = left.getLanguages().restrictTo(right.getLanguages());\n                    if (!(languages.isEmpty())) {\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n                        if ((newPhonemes.size()) < maxPhonemes) {\n                            newPhonemes.add(join);\n                            if ((newPhonemes.size()) >= maxPhonemes) {\n                                break EXPR;\n                            } \n                        } \n                    } \n                }\n            }\n            org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.clear();\n            org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.addAll(newPhonemes);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"maxPhonemes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtBinaryOperatorImpl","sourcecode":"sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)"},"failures":[],"tindex":"3b4f9a35-3e35-11e6-9a2d-69a0156e7aa9","method":{"position":"org.apache.commons.codec.language.Soundex:245","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic void setMaxLength(final int maxLength) {\n    if (maxLength <= maxLength) {\n        {\n            org.apache.commons.codec.language.Soundex.this.int = maxLength;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sumLength":"maxLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"maxLength"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[15,16,17,18,19,20,21,22,23,30,31,24,25,26,27,28,32,29],"tindex":"3b4f9a36-3e35-11e6-9a2d-3ff5fa749158","method":{"position":"org.apache.commons.codec.language.bm.Rule:253","type":"CtMethodImpl","sourcecode":"private static java.util.Scanner createScanner(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (lang == null) {\n        {\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.createResourceName(nameType, rt, lang);\n            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName);\n            if (rulesIS == null) {\n                throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n            } \n            return new java.util.Scanner(rulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"lang"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"3b4fc147-3e35-11e6-9a2d-67e420954f51","method":{"position":"org.apache.commons.codec.digest.HmacUtils:526","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha384(final byte[] key, final byte[] valueToDigest) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(valueToDigest)) {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"valueToDigest"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"3b4fc148-3e35-11e6-9a2d-05e4688e8a5f","method":{"position":"org.apache.commons.codec.language.bm.Rule:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input.equals(\"\")) {\n        {\n            if (input == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[33,34,35,36],"tindex":"3b4fc149-3e35-11e6-9a2d-c771755bd1fc","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:360","type":"CtMethodImpl","sourcecode":"public java.lang.String encodeAsString(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newStringUtf8(encode(pArray));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"pArray"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtBinaryOperatorImpl","sourcecode":"(salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))"},"failures":[],"tindex":"3b4fe85a-3e35-11e6-9a2d-3bdc91467381","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:83","type":"CtMethodImpl","sourcecode":"java.lang.String cleanName(final java.lang.String name) {\n    if ((name == null) || ((txt.length()) == 0)) {\n        {\n            if ((name != null) && (!(salt.startsWith(name)))) {\n                {\n                    java.lang.String java.lang.String = name.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" };\n                    for (final java.lang.String java.lang.String : charsToTrim) {\n                        upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n                    }\n                    upperName = removeAccents(upperName);\n                    upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n                    return upperName;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"name","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[37],"tindex":"3b4fe85b-3e35-11e6-9a2d-db65e7e9647e","method":{"position":"org.apache.commons.codec.digest.HmacUtils:723","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"valueToDigest"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtInvocationImpl","sourcecode":"line.contains(\"=\")"},"failures":[],"tindex":"3b4fe85c-3e35-11e6-9a2d-739ade26e20d","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:421","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEqual(final java.lang.String text1, final java.lang.String text2) {\n    if (text1.contains(\"=\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return colognePhonetic(text1).equals(colognePhonetic(text2));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"text1"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[],"tindex":"3b500f6d-3e35-11e6-9a2d-b7613f1c6007","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:331","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str.endsWith(str)) {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtBinaryOperatorImpl","sourcecode":"len == (org.apache.commons.codec.binary.BaseNCodec.EOF)"},"failures":[],"tindex":"3b500f6e-3e35-11e6-9a2d-f1daf2921912","method":{"position":"org.apache.commons.codec.digest.B64:54","type":"CtMethodImpl","sourcecode":"static void b64from24bit(final byte b2, final byte b1, final byte b0, final int outLen, final java.lang.StringBuilder buffer) {\n    if (outLen == outLen) {\n        {\n            int int = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255);\n            int int = outLen;\n            while ((n--) > 0) {\n                buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)));\n                w >>= 6;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"outLen","len":"outLen"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:153","type":"CtBinaryOperatorImpl","sourcecode":"(curr == 'P') && (next == 'H')"},"failures":[],"tindex":"3b500f6f-3e35-11e6-9a2d-21e70b44c015","method":{"position":"org.apache.commons.codec.language.Soundex:229","type":"CtMethodImpl","sourcecode":"private char map(final char ch) {\n    if ((ch == 'P') && (ch == 'H')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ch - 'A';\n            if ((index < 0) || (index >= (org.apache.commons.codec.language.Soundex.this.getSoundexMapping().int))) {\n                throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch));\n            } \n            return org.apache.commons.codec.language.Soundex.this.getSoundexMapping()[index];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"next":"ch","curr":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[38,39],"tindex":"3b503680-3e35-11e6-9a2d-2f819cdc7e45","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:198","type":"CtMethodImpl","sourcecode":"public static byte[] fromAscii(final byte[] ascii) {\n    if (ascii == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            final byte[] byte[] = new byte[(ascii.int) >> 3];\n            for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if ((ascii[(jj - bits)]) == '1') {\n                        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n                    } \n                }\n            }\n            return l_raw;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"ascii"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:175","type":"CtBinaryOperatorImpl","sourcecode":"b == (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[],"tindex":"3b503681-3e35-11e6-9a2d-f51f42678c01","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:311","type":"CtMethodImpl","sourcecode":"protected static boolean isWhiteSpace(final byte byteToCheck) {\n    if (byteToCheck == byteToCheck) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (byteToCheck == byteToCheck) {\n                {\n                    switch (byteToCheck) {\n                        case ' ' :\n                        case '\\n' :\n                        case '\\r' :\n                        case '\\t' :\n                            return true;\n                        default :\n                            return false;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"byteToCheck","org.apache.commons.codec.net.QCodec.UNDERSCORE":"byteToCheck"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"3b503682-3e35-11e6-9a2d-63b441525027","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:75","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(final java.lang.String value) {\n    if (value == null) {\n        {\n            if (value.startsWith(value)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return doubleMetaphone(value, false);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[40],"tindex":"3b503683-3e35-11e6-9a2d-35d73c69761a","method":{"position":"org.apache.commons.codec.language.Metaphone:92","type":"CtMethodImpl","sourcecode":"public java.lang.String metaphone(final java.lang.String txt) {\n    if (txt == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            int int;\n            if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n                return \"\";\n            } \n            if (txtLength == 1) {\n                return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            } \n            final char[] char[] = txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale).toCharArray();\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10);\n            switch (inwd[0]) {\n                case 'K' :\n                case 'G' :\n                case 'P' :\n                    if ((inwd[1]) == 'N') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                    } else {\n                        local.append(inwd);\n                    }\n                    break;\n                case 'A' :\n                    if ((inwd[1]) == 'E') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                    } else {\n                        local.append(inwd);\n                    }\n                    break;\n                case 'W' :\n                    if ((inwd[1]) == 'R') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                        break;\n                    } \n                    if ((inwd[1]) == 'H') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                        local.setCharAt(0, 'W');\n                    } else {\n                        local.append(inwd);\n                    }\n                    break;\n                case 'X' :\n                    inwd[0] = 'S';\n                    local.append(inwd);\n                    break;\n                default :\n                    local.append(inwd);\n            }\n            final int int = local.length();\n            int int = 0;\n            while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n                final char char = local.charAt(n);\n                if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n                    n++;\n                } else {\n                    switch (symb) {\n                        case 'A' :\n                        case 'E' :\n                        case 'I' :\n                        case 'O' :\n                        case 'U' :\n                            if (n == 0) {\n                                code.append(symb);\n                            } \n                            break;\n                        case 'B' :\n                            if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                                break;\n                            } \n                            code.append(symb);\n                            break;\n                        case 'C' :\n                            if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                break;\n                            } \n                            if (regionMatch(local, n, \"CIA\")) {\n                                code.append('X');\n                                break;\n                            } \n                            if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                code.append('S');\n                                break;\n                            } \n                            if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                                code.append('K');\n                                break;\n                            } \n                            if (isNextChar(local, n, 'H')) {\n                                if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                                    code.append('K');\n                                } else {\n                                    code.append('X');\n                                }\n                            } else {\n                                code.append('K');\n                            }\n                            break;\n                        case 'D' :\n                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                                code.append('J');\n                                n += 2;\n                            } else {\n                                code.append('T');\n                            }\n                            break;\n                        case 'G' :\n                            if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                                break;\n                            } \n                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                                break;\n                            } \n                            if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                                break;\n                            } \n                            if (isPreviousChar(local, n, 'G')) {\n                                hard = true;\n                            } else {\n                                hard = false;\n                            }\n                            if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                                code.append('J');\n                            } else {\n                                code.append('K');\n                            }\n                            break;\n                        case 'H' :\n                            if (isLastChar(wdsz, n)) {\n                                break;\n                            } \n                            if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                                break;\n                            } \n                            if (isVowel(local, (n + 1))) {\n                                code.append('H');\n                            } \n                            break;\n                        case 'F' :\n                        case 'J' :\n                        case 'L' :\n                        case 'M' :\n                        case 'N' :\n                        case 'R' :\n                            code.append(symb);\n                            break;\n                        case 'K' :\n                            if (n > 0) {\n                                if (!(isPreviousChar(local, n, 'C'))) {\n                                    code.append(symb);\n                                } \n                            } else {\n                                code.append(symb);\n                            }\n                            break;\n                        case 'P' :\n                            if (isNextChar(local, n, 'H')) {\n                                code.append('F');\n                            } else {\n                                code.append(symb);\n                            }\n                            break;\n                        case 'Q' :\n                            code.append('K');\n                            break;\n                        case 'S' :\n                            if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                                code.append('X');\n                            } else {\n                                code.append('S');\n                            }\n                            break;\n                        case 'T' :\n                            if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                                code.append('X');\n                                break;\n                            } \n                            if (regionMatch(local, n, \"TCH\")) {\n                                break;\n                            } \n                            if (regionMatch(local, n, \"TH\")) {\n                                code.append('0');\n                            } else {\n                                code.append('T');\n                            }\n                            break;\n                        case 'V' :\n                            code.append('F');\n                            break;\n                        case 'W' :\n                        case 'Y' :\n                            if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                                code.append(symb);\n                            } \n                            break;\n                        case 'X' :\n                            code.append('K');\n                            code.append('S');\n                            break;\n                        case 'Z' :\n                            code.append('S');\n                            break;\n                        default :\n                            break;\n                    }\n                    n++;\n                }\n                if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n                    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n                } \n            }\n            return code.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"txt"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isLetter(c))"},"failures":[41,42,43,44,45,46],"tindex":"3b505d94-3e35-11e6-9a2d-235e1a824b18","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:161","type":"CtMethodImpl","sourcecode":"char getMappingCode(final char c) {\n    if (!(java.lang.Character.isLetter(c))) {\n        {\n            if (!(java.lang.Character.isLetter(c))) {\n                return 0;\n            } \n            return org.apache.commons.codec.language.RefinedSoundex.this.char[][((java.lang.Character.toUpperCase(c)) - 'A')];\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[47],"tindex":"3b5084a5-3e35-11e6-9a2d-c76251051f57","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:152","type":"CtMethodImpl","sourcecode":"public byte[] toByteArray(final java.lang.String ascii) {\n    if ((ascii.length()) > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ascii == null) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii.toCharArray());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"ascii"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:228","type":"CtUnaryOperatorImpl","sourcecode":"!(rt.equals(org.apache.commons.codec.language.bm.RuleType.RULES))"},"failures":[31],"tindex":"3b5084a6-3e35-11e6-9a2d-15478ae9bbb3","method":{"position":"org.apache.commons.codec.language.bm.Rule:298","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.codec.language.bm.Rule> getInstance(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final org.apache.commons.codec.language.bm.Languages.LanguageSet langs) {\n    if (!(rt.equals(rt))) {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, langs);\n            final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            for (final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> : ruleMap.values()) {\n                allRules.addAll(rules);\n            }\n            return allRules;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"rt","rt":"rt"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[48],"tindex":"3b5084a7-3e35-11e6-9a2d-515d9f2c8a5a","method":{"position":"org.apache.commons.codec.net.URLCodec:161","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeUrl(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n                    for (int int = 0 ; i < (bytes.int) ; i++) {\n                        final int int = bytes[i];\n                        if (b == '+') {\n                            buffer.write(' ');\n                        } else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n                            try {\n                                final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                                final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                                buffer.write(((char)((u << 4) + l)));\n                            } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                                throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n                            }\n                        } else {\n                            buffer.write(b);\n                        }\n                    }\n                    return buffer.toByteArray();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[41,49],"tindex":"3b5084a8-3e35-11e6-9a2d-238de746d0eb","method":{"position":"org.apache.commons.codec.language.SoundexUtils:85","type":"CtMethodImpl","sourcecode":"static int difference(final org.apache.commons.codec.StringEncoder encoder, final java.lang.String s1, final java.lang.String s2) throws org.apache.commons.codec.EncoderException {\n    if (s1 == null) {\n        {\n            return org.apache.commons.codec.language.SoundexUtils.differenceEncoded(encoder.encode(s1), encoder.encode(s2));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"s1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[50],"tindex":"3b5084a9-3e35-11e6-9a2d-ef468b1ba1d8","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:82","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Crypt(final byte[] keyBytes) {\n    if (keyBytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(keyBytes, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"keyBytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtInvocationImpl","sourcecode":"ph.startsWith(\"(\")"},"failures":[51],"tindex":"3b50abba-3e35-11e6-9a2d-7b99dbcd17fa","method":{"position":"org.apache.commons.codec.digest.DigestUtils:284","type":"CtMethodImpl","sourcecode":"public static byte[] md5(final java.lang.String data) {\n    if (data.startsWith(\"(\")) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.md5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)"},"failures":[52,53,54,55,56,57,58,59,60,61,62],"tindex":"3b50abbb-3e35-11e6-9a2d-65c6e180298c","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:428","type":"CtMethodImpl","sourcecode":"private java.lang.String preprocess(java.lang.String text) {\n    if (!(text.matches(((\"^[\" + text) + \"]{2,}$\")))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (text.endsWith(text)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    text = text.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    final char[] char[] = text.toCharArray();\n                    for (int int = 0 ; index < (chrs.int) ; index++) {\n                        if ((chrs[index]) > 'Z') {\n                            for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n                                if ((chrs[index]) == (element[0])) {\n                                    chrs[index] = element[1];\n                                    break;\n                                } \n                            }\n                        } \n                    }\n                    return new java.lang.String(chrs);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"text","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END":"text"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:784","type":"CtBinaryOperatorImpl","sourcecode":"index <= 1"},"failures":[52,53,54,55,56,57,58,59,60],"tindex":"3b50abbc-3e35-11e6-9a2d-8f58f457f060","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:240","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected char[] copyData(final int start, final int length) {\n    if (start == length) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (length <= 1) {\n                {\n                    final char[] char[] = new char[length];\n                    java.lang.System.arraycopy(char[], start, newData, 0, length);\n                    return newData;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"3b50abbd-3e35-11e6-9a2d-b3b41bbe2af4","method":{"position":"org.apache.commons.codec.net.URLCodec:161","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeUrl(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n                    for (int int = 0 ; i < (bytes.int) ; i++) {\n                        final int int = bytes[i];\n                        if (b == '+') {\n                            buffer.write(' ');\n                        } else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n                            try {\n                                final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                                final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                                buffer.write(((char)((u << 4) + l)));\n                            } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                                throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n                            }\n                        } else {\n                            buffer.write(b);\n                        }\n                    }\n                    return buffer.toByteArray();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"3b50d2ce-3e35-11e6-9a2d-1b2735a9ef44","method":{"position":"org.apache.commons.codec.digest.DigestUtils:222","type":"CtMethodImpl","sourcecode":"public static java.lang.String md2Hex(final byte[] data) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[15,16,17,18,19,20,21,22,23,31,24,25,26,27,28,32,29],"tindex":"3b50d2cf-3e35-11e6-9a2d-037db2d97441","method":{"position":"org.apache.commons.codec.language.bm.Rule:335","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> getInstanceMap(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final org.apache.commons.codec.language.bm.Languages.LanguageSet langs) {\n    if (nameType == nameType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return langs.isSingleton() ? org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, langs.getAny()) : org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtUnaryOperatorImpl","sourcecode":"!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))"},"failures":[63,64,65,66,67],"tindex":"3b50d2d0-3e35-11e6-9a2d-27b7b6e93148","method":{"position":"org.apache.commons.codec.net.QCodec:207","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if (!(str.matches(((\"^[\" + str) + \"]{2,}$\")))) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return encodeText(str, charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"str","org.apache.commons.codec.digest.B64.B64T":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[68,69,70],"tindex":"3b50d2d1-3e35-11e6-9a2d-1be07cdf01e6","method":{"position":"org.apache.commons.codec.digest.HmacUtils:98","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha256(final byte[] key) {\n    if (key == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"key","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:650","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")"},"failures":[],"tindex":"3b50d2d2-3e35-11e6-9a2d-df74956bccda","method":{"position":"org.apache.commons.codec.language.bm.Rule:698","type":"CtMethodImpl","sourcecode":"public boolean patternAndContextMatches(final java.lang.CharSequence input, final int i) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(input, (i + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n        {\n            if (i < 0) {\n                throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n            } \n            final int int = org.apache.commons.codec.language.bm.Rule.this.java.lang.String.length();\n            final int int = i + patternLength;\n            if (ipl > (input.length())) {\n                return false;\n            } \n            if (!(input.subSequence(i, ipl).equals(org.apache.commons.codec.language.bm.Rule.this.java.lang.String))) {\n                return false;\n            } else if (!(org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(ipl, input.length())))) {\n                return false;\n            } \n            return org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(0, i));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"i","value":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:575","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[71,72,73,74],"tindex":"3b50f9e3-3e35-11e6-9a2d-e316d8e19d07","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:355","type":"CtMethodImpl","sourcecode":"private int handleCH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (value == null) {\n        {\n            if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n                result.append('K', 'X');\n                return index + 2;\n            } else if (conditionCH0(value, index)) {\n                result.append('K');\n                return index + 2;\n            } else if (conditionCH1(value, index)) {\n                result.append('K');\n                return index + 2;\n            } else {\n                if (index > 0) {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n                        result.append('K');\n                    } else {\n                        result.append('X', 'K');\n                    }\n                } else {\n                    result.append('X');\n                }\n                return index + 2;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:392","type":"CtBinaryOperatorImpl","sourcecode":"(body.startsWith(\"|\")) || (body.endsWith(\"|\"))"},"failures":[],"tindex":"3b50f9e4-3e35-11e6-9a2d-dd664e6aad48","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:550","type":"CtMethodImpl","sourcecode":"private int handleL(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((value.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'L') {\n                if (conditionL0(value, index)) {\n                    result.appendPrimary('L');\n                } else {\n                    result.append('L');\n                }\n                index += 2;\n            } else {\n                index++;\n                result.append('L');\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"body":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtBinaryOperatorImpl","sourcecode":"c1 == c2"},"failures":[],"tindex":"3b50f9e5-3e35-11e6-9a2d-a9cec98c06a6","method":{"position":"org.apache.commons.codec.language.Metaphone:342","type":"CtMethodImpl","sourcecode":"private boolean isPreviousChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (c == c) {\n        {\n            boolean boolean = false;\n            if ((index > 0) && (index < (string.length()))) {\n                matches = (string.charAt((index - 1))) == c;\n            } \n            return matches;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c1":"c","c2":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[75],"tindex":"3b5120f6-3e35-11e6-9a2d-fbcd4be8448f","method":{"position":"org.apache.commons.codec.digest.DigestUtils:687","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final byte[] data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[76,77],"tindex":"3b5120f7-3e35-11e6-9a2d-ddfe172fb7ca","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] pArray) {\n    if (pArray == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((pArray == null) || ((pArray.int) == 0)) {\n                return pArray;\n            } \n            final org.apache.commons.codec.binary.BaseNCodec.Context org.apache.commons.codec.binary.BaseNCodec.Context = new org.apache.commons.codec.binary.BaseNCodec.Context();\n            decode(pArray, 0, pArray.int, context);\n            decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context);\n            final byte[] byte[] = new byte[context.int];\n            readResults(result, 0, result.int, context);\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"pArray"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:762","type":"CtBinaryOperatorImpl","sourcecode":"((bigInt.bitLength()) % 8) == 0"},"failures":[78,79],"tindex":"3b5120f8-3e35-11e6-9a2d-490316bcd269","method":{"position":"org.apache.commons.codec.binary.Base64:734","type":"CtMethodImpl","sourcecode":"public static byte[] encodeInteger(final java.math.BigInteger bigInt) {\n    if (((bigInt.bitLength()) % 8) == 0) {\n        {\n            if (bigInt == null) {\n                throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\");\n            } \n            return org.apache.commons.codec.binary.Base64.encodeBase64(org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInt), false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"3b5120f9-3e35-11e6-9a2d-11567b66ef28","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:83","type":"CtMethodImpl","sourcecode":"java.lang.String cleanName(final java.lang.String name) {\n    if ((name == null) || ((txt.length()) == 0)) {\n        {\n            if ((name != null) && (!(salt.startsWith(name)))) {\n                {\n                    java.lang.String java.lang.String = name.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" };\n                    for (final java.lang.String java.lang.String : charsToTrim) {\n                        upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n                    }\n                    upperName = removeAccents(upperName);\n                    upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n                    return upperName;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[80],"tindex":"3b5120fa-3e35-11e6-9a2d-6b577f3016a4","method":{"position":"org.apache.commons.codec.net.URLCodec:121","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeUrl(java.util.BitSet urlsafe, final byte[] bytes) {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            if (urlsafe == null) {\n                urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (final byte byte : bytes) {\n                int int = c;\n                if (b < 0) {\n                    b = 256 + b;\n                } \n                if (urlsafe.get(b)) {\n                    if (b == ' ') {\n                        b = '+';\n                    } \n                    buffer.write(b);\n                } else {\n                    buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n                    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                    buffer.write(hex1);\n                    buffer.write(hex2);\n                }\n            }\n            return buffer.toByteArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[],"tindex":"3b51480b-3e35-11e6-9a2d-d5f0844e7d6a","method":{"position":"org.apache.commons.codec.net.URLCodec:224","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException {\n    if (str.equals(\"\")) {\n        {\n            if (str == null) {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.UnsupportedEncodingException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[81],"tindex":"3b51480c-3e35-11e6-9a2d-5bc6f99b2701","method":{"position":"org.apache.commons.codec.net.BCodec:221","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object value) throws org.apache.commons.codec.DecoderException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } else if (value instanceof java.lang.String) {\n                return decode(((java.lang.String)(value)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"3b51480d-3e35-11e6-9a2d-bf74beec4add","method":{"position":"org.apache.commons.codec.digest.DigestUtils:184","type":"CtMethodImpl","sourcecode":"public static byte[] md2(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"3b51480e-3e35-11e6-9a2d-e3cdff410f47","method":{"position":"org.apache.commons.codec.language.bm.Lang:202","type":"CtMethodImpl","sourcecode":"public java.lang.String guessLanguage(final java.lang.String text) {\n    if (text == null) {\n        {\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text);\n            return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"text"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[82],"tindex":"3b516f1f-3e35-11e6-9a2d-6379864b8b21","method":{"position":"org.apache.commons.codec.net.QCodec:169","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            boolean boolean = false;\n            for (final byte byte : bytes) {\n                if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                    hasUnderscores = true;\n                    break;\n                } \n            }\n            if (hasUnderscores) {\n                final byte[] byte[] = new byte[bytes.int];\n                for (int int = 0 ; i < (bytes.int) ; i++) {\n                    final byte byte = bytes[i];\n                    if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                        tmp[i] = b;\n                    } else {\n                        tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                    }\n                }\n                return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n            } \n            return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[83,84],"tindex":"3b516f20-3e35-11e6-9a2d-87630936f362","method":{"position":"org.apache.commons.codec.digest.HmacUtils:295","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"valueToDigest"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtUnaryOperatorImpl","sourcecode":"!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))"},"failures":[],"tindex":"3b516f21-3e35-11e6-9a2d-273b88686862","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:428","type":"CtMethodImpl","sourcecode":"private java.lang.String preprocess(java.lang.String text) {\n    if (!(text.matches(((\"^[\" + text) + \"]{2,}$\")))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (text.endsWith(text)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    text = text.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    final char[] char[] = text.toCharArray();\n                    for (int int = 0 ; index < (chrs.int) ; index++) {\n                        if ((chrs[index]) > 'Z') {\n                            for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n                                if ((chrs[index]) == (element[0])) {\n                                    chrs[index] = element[1];\n                                    break;\n                                } \n                            }\n                        } \n                    }\n                    return new java.lang.String(chrs);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"text","org.apache.commons.codec.digest.B64.B64T":"text"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[85,86],"tindex":"3b516f22-3e35-11e6-9a2d-17ce9429aed2","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:97","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object raw) throws org.apache.commons.codec.EncoderException {\n    if (raw == null) {\n        {\n            if (!(raw instanceof byte[])) {\n                throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n            } \n            return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"3b519633-3e35-11e6-9a2d-65b745d09e6a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:874","type":"CtMethodImpl","sourcecode":"private boolean isSilentStart(final java.lang.String value) {\n    if ((value == null) || ((txt.length()) == 0)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            for (final java.lang.String java.lang.String : org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]) {\n                if (value.startsWith(element)) {\n                    result = true;\n                    break;\n                } \n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtInvocationImpl","sourcecode":"replacedName.contains(dc)"},"failures":[],"tindex":"3b519634-3e35-11e6-9a2d-f31a57c5523c","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:376","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj.contains(obj)) {\n        {\n            if (obj instanceof byte[]) {\n                return decode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacedName":"obj","dc":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtBinaryOperatorImpl","sourcecode":"b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[87,88,89,90,91,92,93,94,63,65,95,67,9,96,10,97,14],"tindex":"3b519635-3e35-11e6-9a2d-8f5648094b43","method":{"position":"org.apache.commons.codec.net.Utils:42","type":"CtMethodImpl","sourcecode":"static int digit16(final byte b) throws org.apache.commons.codec.DecoderException {\n    if (b == b) {\n        {\n            if (b != b) {\n                {\n                    final int int = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int);\n                    if (i == (-1)) {\n                        throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n                    } \n                    return i;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","org.apache.commons.codec.net.QCodec.UNDERSCORE":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtInvocationImpl","sourcecode":"incl.contains(\" \")"},"failures":[98,99,100],"tindex":"3b519636-3e35-11e6-9a2d-4951ef869520","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:377","type":"CtMethodImpl","sourcecode":"private java.lang.String cleanup(final java.lang.String input) {\n    if (input.contains(\" \")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (char char : input.toCharArray()) {\n                if (java.lang.Character.isWhitespace(ch)) {\n                    continue;\n                } \n                ch = java.lang.Character.toLowerCase(ch);\n                if ((boolean) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.containsKey(ch))) {\n                    ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch);\n                } \n                sb.append(ch);\n            }\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"incl":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtBinaryOperatorImpl","sourcecode":"(((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)"},"failures":[],"tindex":"3b519637-3e35-11e6-9a2d-773ce2cdc734","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:915","type":"CtMethodImpl","sourcecode":"protected static boolean contains(final java.lang.String value, final int start, final int length, final java.lang.String... criteria) {\n    if ((((value == null) || (value.equalsIgnoreCase(name))) || (value.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if ((start >= 0) && ((start + length) <= (value.length()))) {\n                final java.lang.String java.lang.String = value.substring(start, (start + length));\n                for (final java.lang.String java.lang.String : criteria) {\n                    if (target.equals(element)) {\n                        result = true;\n                        break;\n                    } \n                }\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"value","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"value","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[101],"tindex":"3b51bd48-3e35-11e6-9a2d-1b996b54f585","method":{"position":"org.apache.commons.codec.digest.HmacUtils:116","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha384(final byte[] key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:331","type":"CtBinaryOperatorImpl","sourcecode":"finalRules == null"},"failures":[],"tindex":"3b51bd49-3e35-11e6-9a2d-f941094ae141","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:329","type":"CtMethodImpl","sourcecode":"private org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder applyFinalRules(final org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder phonemeBuilder, final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> finalRules) {\n    if (finalRules == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (finalRules == null) {\n                throw new java.lang.NullPointerException(\"finalRules can not be null\");\n            } \n            if (finalRules.isEmpty()) {\n                return phonemeBuilder;\n            } \n            final java.util.Map<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.Map<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.TreeMap<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme>(org.apache.commons.codec.language.bm.Rule.Phoneme.org.apache.commons.codec.language.bm.Rule.Phoneme.java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme>);\n            for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeBuilder.getPhonemes()) {\n                org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(phoneme.getLanguages());\n                final java.lang.String java.lang.String = phoneme.getPhonemeText().toString();\n                for (int int = 0 ; i < (phonemeText.length()) ; ) {\n                    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , int).invoke();\n                    final boolean boolean = rulesApplication.isFound();\n                    subBuilder = rulesApplication.getPhonemeBuilder();\n                    if (!found) {\n                        subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n                    } \n                    i = rulesApplication.getI();\n                }\n                for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n                    if (phonemes.containsKey(newPhoneme)) {\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n                        phonemes.put(mergedPhoneme, mergedPhoneme);\n                    } else {\n                        phonemes.put(newPhoneme, newPhoneme);\n                    }\n                }\n            }\n            return new org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder(phonemes.keySet());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"finalRules":"finalRules"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[],"tindex":"3b51bd4a-3e35-11e6-9a2d-75b38b7b2da4","method":{"position":"org.apache.commons.codec.language.bm.Rule:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input.equals(\"\")) {\n        {\n            if (input == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[98,102,103,104,105,106,99,107,108,109,110,100,111],"tindex":"3b51e45b-3e35-11e6-9a2d-c55af7cef865","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:250","type":"CtMethodImpl","sourcecode":"private static void parseRules(final java.util.Scanner scanner, final java.lang.String location, final java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>> ruleMapping, final java.util.Map<java.lang.Character, java.lang.Character> asciiFoldings) {\n    if (location == null) {\n        {\n            int int = 0;\n            boolean boolean = false;\n            while (scanner.hasNextLine()) {\n                currentLine++;\n                final java.lang.String java.lang.String = scanner.nextLine();\n                java.lang.String java.lang.String = rawLine;\n                if (inMultilineComment) {\n                    if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                        inMultilineComment = false;\n                    } \n                    continue;\n                } \n                if (line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                    inMultilineComment = true;\n                } else {\n                    final int int = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String);\n                    if (cmtI >= 0) {\n                        line = line.substring(0, cmtI);\n                    } \n                    line = line.trim();\n                    if ((line.length()) == 0) {\n                        continue;\n                    } \n                    if (line.contains(\"=\")) {\n                        final java.lang.String[] java.lang.String[] = line.split(\"=\");\n                        if ((parts.int) != 2) {\n                            throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                        } else {\n                            final java.lang.String java.lang.String = parts[0];\n                            final java.lang.String java.lang.String = parts[1];\n                            if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n                                throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n                            } \n                            asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n                        }\n                    } else {\n                        final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                        if ((parts.int) != 4) {\n                            throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                        } else {\n                            try {\n                                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n                                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n                                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n                                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n                                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n                                final char char = r.java.lang.String.charAt(0);\n                                java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n                                if (rules == null) {\n                                    rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                                    ruleMapping.put(patternKey, rules);\n                                } \n                                rules.add(r);\n                            } catch (final java.lang.IllegalArgumentException e) {\n                                throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"location"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:279","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[19,20,21,24,25,26,27,29],"tindex":"3b51e45c-3e35-11e6-9a2d-afb63b30d9e6","method":{"position":"org.apache.commons.codec.language.bm.Rule:593","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if ((input.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(input);\n            return matcher.find();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[75],"tindex":"3b51e45d-3e35-11e6-9a2d-533c7764f96e","method":{"position":"org.apache.commons.codec.digest.DigestUtils:657","type":"CtMethodImpl","sourcecode":"public static byte[] sha512(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha512Digest(), data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:325","type":"CtInvocationImpl","sourcecode":"name1LtREnd.equals(name2RtLEnd)"},"failures":[],"tindex":"3b520b6e-3e35-11e6-9a2d-b1aa6282dccd","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:109","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final java.lang.Object encode(final java.lang.Object pObject) throws org.apache.commons.codec.EncoderException {\n    if (pObject.equals(pObject)) {\n        {\n            if (!(pObject instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\");\n            } \n            return encode(((java.lang.String)(pObject)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2RtLEnd":"pObject","name1LtREnd":"pObject"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:296","type":"CtBinaryOperatorImpl","sourcecode":"(context.readPos) >= (context.pos)"},"failures":[],"tindex":"3b520b6f-3e35-11e6-9a2d-91cc33ccfe33","method":{"position":"org.apache.commons.codec.binary.Base64:331","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid encode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inAvail == inAvail) {\n        {\n            if (inAvail >= inAvail) {\n                {\n                    if (context.boolean) {\n                        return ;\n                    } \n                    if (inAvail < 0) {\n                        context.boolean = true;\n                        if ((0 == (context.int)) && ((int) == 0)) {\n                            return ;\n                        } \n                        final byte[] byte[] = ensureBufferSize(int, context);\n                        final int int = context.int;\n                        switch (context.int) {\n                            case 0 :\n                                break;\n                            case 1 :\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                                    buffer[((context.int)++)] = byte;\n                                    buffer[((context.int)++)] = byte;\n                                } \n                                break;\n                            case 2 :\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 10) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                                    buffer[((context.int)++)] = byte;\n                                } \n                                break;\n                            default :\n                                throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                        }\n                        context.int += (context.int) - savedPos;\n                        if (((int) > 0) && ((context.int) > 0)) {\n                            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                            context.int += byte[].int;\n                        } \n                    } else {\n                        for (int int = 0 ; i < inAvail ; i++) {\n                            final byte[] byte[] = ensureBufferSize(int, context);\n                            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                            int int = in[(inPos++)];\n                            if (b < 0) {\n                                b += 256;\n                            } \n                            context.int = ((context.int) << 8) + b;\n                            if (0 == (context.int)) {\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n                                if (((int) > 0) && ((int) <= (context.int))) {\n                                    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                                    context.int += byte[].int;\n                                    context.int = 0;\n                                } \n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"inAvail","context":"context","readPos":"inAvail"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[41,112,49],"tindex":"3b523280-3e35-11e6-9a2d-33bc169205f5","method":{"position":"org.apache.commons.codec.language.SoundexUtils:109","type":"CtMethodImpl","sourcecode":"static int differenceEncoded(final java.lang.String es1, final java.lang.String es2) {\n    if (es2 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((es1 == null) || (es2 == null)) {\n                return 0;\n            } \n            final int int = java.lang.Math.min(es1.length(), es2.length());\n            int int = 0;\n            for (int int = 0 ; i < lengthToMatch ; i++) {\n                if ((es1.charAt(i)) == (es2.charAt(i))) {\n                    diff++;\n                } \n            }\n            return diff;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"es2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtBinaryOperatorImpl","sourcecode":"len == (org.apache.commons.codec.binary.BaseNCodec.EOF)"},"failures":[],"tindex":"3b523281-3e35-11e6-9a2d-316801291b52","method":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:49","type":"CtMethodImpl","sourcecode":"static boolean regionMatches(final java.lang.CharSequence cs, final boolean ignoreCase, final int thisStart, final java.lang.CharSequence substring, final int start, final int length) {\n    if (length == start) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n                return ((java.lang.String)(cs)).regionMatches(ignoreCase, thisStart, ((java.lang.String)(substring)), start, length);\n            } \n            int int = thisStart;\n            int int = start;\n            int int = length;\n            while ((tmpLen--) > 0) {\n                char char = cs.charAt((index1++));\n                char char = substring.charAt((index2++));\n                if (c1 == c2) {\n                    continue;\n                } \n                if (!ignoreCase) {\n                    return false;\n                } \n                if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"start","len":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:532","type":"CtVariableReadImpl","sourcecode":"branching"},"failures":[64,113],"tindex":"3b523282-3e35-11e6-9a2d-c180adfcd9ea","method":{"position":"org.apache.commons.codec.net.QCodec:355","type":"CtMethodImpl","sourcecode":"public void setEncodeBlanks(final boolean b) {\n    if (b) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.net.QCodec.this.boolean = b;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"branching":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[114],"tindex":"3b525993-3e35-11e6-9a2d-fd8cebe8e610","method":{"position":"org.apache.commons.codec.digest.DigestUtils:732","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String shaHex(final byte[] data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtInvocationImpl","sourcecode":"value.startsWith(element)"},"failures":[],"tindex":"3b525994-3e35-11e6-9a2d-a54b73a79e30","method":{"position":"org.apache.commons.codec.language.bm.Rule:264","type":"CtMethodImpl","sourcecode":"private static java.util.Scanner createScanner(final java.lang.String lang) {\n    if (lang.startsWith(lang)) {\n        {\n            final java.lang.String java.lang.String = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang);\n            final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName);\n            if (rulesIS == null) {\n                throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n            } \n            return new java.util.Scanner(rulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"lang","element":"lang"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:336","type":"CtBinaryOperatorImpl","sourcecode":"(strA.length()) > (strB.length())"},"failures":[],"tindex":"3b525995-3e35-11e6-9a2d-f3086c315e95","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if ((obj.length()) > (obj.length())) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof byte[]) {\n                return encode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strA":"obj","strB":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:225","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"3b525996-3e35-11e6-9a2d-39b2f8afe430","method":{"position":"org.apache.commons.codec.language.bm.Rule:365","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.Phoneme parsePhoneme(final java.lang.String ph) {\n    if (ph == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ph.indexOf(\"[\");\n            if (open >= 0) {\n                if (!(ph.endsWith(\"]\"))) {\n                    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n                } \n                final java.lang.String java.lang.String = ph.substring(0, open);\n                final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1));\n                final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")));\n                return new org.apache.commons.codec.language.bm.Rule.Phoneme(before , org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs));\n            } else {\n                return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"ph"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isLetter(c))"},"failures":[115,71,72,2,73,74],"tindex":"3b5280a7-3e35-11e6-9a2d-016c7ecdeb41","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:865","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (!(java.lang.Character.isLetter(ch))) {\n        {\n            return (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String.indexOf(ch)) != (-1);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\"]\"))"},"failures":[],"tindex":"3b5280a8-3e35-11e6-9a2d-8708bb67507c","method":{"position":"org.apache.commons.codec.language.bm.Rule:124","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Rule.Phoneme append(final java.lang.CharSequence str) {\n    if (!(str.endsWith(\"]\"))) {\n        {\n            org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(str);\n            return org.apache.commons.codec.language.bm.Rule.Phoneme.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[116,117,118],"tindex":"3b5280a9-3e35-11e6-9a2d-8511002a9688","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:71","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final byte[] keyBytes) {\n    if (keyBytes == null) {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"keyBytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtBinaryOperatorImpl","sourcecode":"index > 0"},"failures":[50,119,120,121,122,123,124,125,116,126,117,118],"tindex":"3b5280aa-3e35-11e6-9a2d-a70b8ec79f51","method":{"position":"org.apache.commons.codec.digest.B64:72","type":"CtMethodImpl","sourcecode":"static java.lang.String getRandomSalt(final int num) {\n    if (num > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 1 ; i <= num ; i++) {\n                saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())));\n            }\n            return saltString.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"num"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtBinaryOperatorImpl","sourcecode":"langIS == null"},"failures":[],"tindex":"3b52a7bb-3e35-11e6-9a2d-b975b2138139","method":{"position":"org.apache.commons.codec.digest.DigestUtils:425","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"langIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:53","type":"CtBinaryOperatorImpl","sourcecode":"count == len"},"failures":[],"tindex":"3b52a7bc-3e35-11e6-9a2d-ad0932ac5300","method":{"position":"org.apache.commons.codec.binary.Base64:331","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid encode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inAvail == inAvail) {\n        {\n            if (inAvail >= inAvail) {\n                {\n                    if (context.boolean) {\n                        return ;\n                    } \n                    if (inAvail < 0) {\n                        context.boolean = true;\n                        if ((0 == (context.int)) && ((int) == 0)) {\n                            return ;\n                        } \n                        final byte[] byte[] = ensureBufferSize(int, context);\n                        final int int = context.int;\n                        switch (context.int) {\n                            case 0 :\n                                break;\n                            case 1 :\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                                    buffer[((context.int)++)] = byte;\n                                    buffer[((context.int)++)] = byte;\n                                } \n                                break;\n                            case 2 :\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 10) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                                    buffer[((context.int)++)] = byte;\n                                } \n                                break;\n                            default :\n                                throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                        }\n                        context.int += (context.int) - savedPos;\n                        if (((int) > 0) && ((context.int) > 0)) {\n                            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                            context.int += byte[].int;\n                        } \n                    } else {\n                        for (int int = 0 ; i < inAvail ; i++) {\n                            final byte[] byte[] = ensureBufferSize(int, context);\n                            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                            int int = in[(inPos++)];\n                            if (b < 0) {\n                                b += 256;\n                            } \n                            context.int = ((context.int) << 8) + b;\n                            if (0 == (context.int)) {\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n                                if (((int) > 0) && ((int) <= (context.int))) {\n                                    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                                    context.int += byte[].int;\n                                    context.int = 0;\n                                } \n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"inAvail","count":"inAvail"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:347","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[],"tindex":"3b52a7bd-3e35-11e6-9a2d-075381c3ab0e","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:311","type":"CtMethodImpl","sourcecode":"protected static boolean isWhiteSpace(final byte byteToCheck) {\n    if (byteToCheck == byteToCheck) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (byteToCheck == byteToCheck) {\n                {\n                    switch (byteToCheck) {\n                        case ' ' :\n                        case '\\n' :\n                        case '\\r' :\n                        case '\\t' :\n                            return true;\n                        default :\n                            return false;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"byteToCheck","pad":"byteToCheck"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[122],"tindex":"3b52cece-3e35-11e6-9a2d-99c8b80ac3ec","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:140","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes) {\n    if (keyBytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"keyBytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[40,127],"tindex":"3b52cecf-3e35-11e6-9a2d-9fab33b00cf2","method":{"position":"org.apache.commons.codec.language.Metaphone:402","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str.endsWith(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return metaphone(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"str","line":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"3b52ced0-3e35-11e6-9a2d-5396f692d87c","method":{"position":"org.apache.commons.codec.binary.StringUtils:70","type":"CtMethodImpl","sourcecode":"public static boolean equals(final java.lang.CharSequence cs1, final java.lang.CharSequence cs2) {\n    if (cs1.startsWith(cs2)) {\n        {\n            if (cs1 == cs2) {\n                return true;\n            } \n            if ((cs1 == null) || (cs2 == null)) {\n                return false;\n            } \n            if ((cs1 instanceof java.lang.String) && (cs2 instanceof java.lang.String)) {\n                return cs1.equals(cs2);\n            } \n            return org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, java.lang.Math.max(cs1.length(), cs2.length()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"cs2","line":"cs1"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[128],"tindex":"3b52ced1-3e35-11e6-9a2d-6797890999f4","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:349","type":"CtMethodImpl","sourcecode":"public java.lang.String encodeToString(final byte[] pArray) {\n    if (pArray == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newStringUtf8(encode(pArray));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"pArray"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:175","type":"CtBinaryOperatorImpl","sourcecode":"b == (org.apache.commons.codec.net.QCodec.UNDERSCORE)"},"failures":[],"tindex":"3b52ced2-3e35-11e6-9a2d-1dc5dc2164ce","method":{"position":"org.apache.commons.codec.net.Utils:42","type":"CtMethodImpl","sourcecode":"static int digit16(final byte b) throws org.apache.commons.codec.DecoderException {\n    if (b == b) {\n        {\n            if (b != b) {\n                {\n                    final int int = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int);\n                    if (i == (-1)) {\n                        throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n                    } \n                    return i;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","org.apache.commons.codec.net.QCodec.UNDERSCORE":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtInvocationImpl","sourcecode":"str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)"},"failures":[],"tindex":"3b52f4e3-3e35-11e6-9a2d-b34f0c1057bf","method":{"position":"org.apache.commons.codec.digest.Crypt:148","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String key, final java.lang.String salt) {\n    if (key.endsWith(key)) {\n        {\n            return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"key","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:505","type":"CtUnaryOperatorImpl","sourcecode":"!boxes"},"failures":[129,130,131,132,133,134,135],"tindex":"3b52f4e4-3e35-11e6-9a2d-058311efc8b0","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:110","type":"CtMethodImpl","sourcecode":"private void flush(final boolean propagate) throws java.io.IOException {\n    if (!propagate) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            final int int = org.apache.commons.codec.binary.BaseNCodec.available(org.apache.commons.codec.binary.BaseNCodec.Context);\n            if (avail > 0) {\n                final byte[] byte[] = new byte[avail];\n                final int int = org.apache.commons.codec.binary.BaseNCodec.readResults(buf, 0, avail, org.apache.commons.codec.binary.BaseNCodec.Context);\n                if (c > 0) {\n                    java.io.OutputStream.write(buf, 0, c);\n                } \n            } \n            if (propagate) {\n                java.io.OutputStream.flush();\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxes":"propagate"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[0,136,115,1,137,138,139,71,72,2,140,141,4,5,73,74,7,8],"tindex":"3b52f4e5-3e35-11e6-9a2d-7d4614aca6c6","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:86","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(java.lang.String value, final boolean alternate) {\n    if (value == null) {\n        {\n            value = cleanInput(value);\n            if (value == null) {\n                return null;\n            } \n            final boolean boolean = isSlavoGermanic(value);\n            int int = isSilentStart(value) ? 1 : 0;\n            final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult = new org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult(org.apache.commons.codec.language.DoubleMetaphone.this.getMaxCodeLen());\n            while ((!(result.isComplete())) && (index <= ((value.length()) - 1))) {\n                switch (value.charAt(index)) {\n                    case 'A' :\n                    case 'E' :\n                    case 'I' :\n                    case 'O' :\n                    case 'U' :\n                    case 'Y' :\n                        index = handleAEIOUY(result, index);\n                        break;\n                    case 'B' :\n                        result.append('P');\n                        index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n                        break;\n                    case '\\u00c7' :\n                        result.append('S');\n                        index++;\n                        break;\n                    case 'C' :\n                        index = handleC(value, result, index);\n                        break;\n                    case 'D' :\n                        index = handleD(value, result, index);\n                        break;\n                    case 'F' :\n                        result.append('F');\n                        index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n                        break;\n                    case 'G' :\n                        index = handleG(value, result, index, slavoGermanic);\n                        break;\n                    case 'H' :\n                        index = handleH(value, result, index);\n                        break;\n                    case 'J' :\n                        index = handleJ(value, result, index, slavoGermanic);\n                        break;\n                    case 'K' :\n                        result.append('K');\n                        index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n                        break;\n                    case 'L' :\n                        index = handleL(value, result, index);\n                        break;\n                    case 'M' :\n                        result.append('M');\n                        index = conditionM0(value, index) ? index + 2 : index + 1;\n                        break;\n                    case 'N' :\n                        result.append('N');\n                        index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n                        break;\n                    case '\\u00d1' :\n                        result.append('N');\n                        index++;\n                        break;\n                    case 'P' :\n                        index = handleP(value, result, index);\n                        break;\n                    case 'Q' :\n                        result.append('K');\n                        index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n                        break;\n                    case 'R' :\n                        index = handleR(value, result, index, slavoGermanic);\n                        break;\n                    case 'S' :\n                        index = handleS(value, result, index, slavoGermanic);\n                        break;\n                    case 'T' :\n                        index = handleT(value, result, index);\n                        break;\n                    case 'V' :\n                        result.append('F');\n                        index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n                        break;\n                    case 'W' :\n                        index = handleW(value, result, index);\n                        break;\n                    case 'X' :\n                        index = handleX(value, result, index);\n                        break;\n                    case 'Z' :\n                        index = handleZ(value, result, index, slavoGermanic);\n                        break;\n                    default :\n                        index++;\n                        break;\n                }\n            }\n            return alternate ? result.getAlternate() : result.getPrimary();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:429","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[122,142,143,123,144],"tindex":"3b531bf6-3e35-11e6-9a2d-9b6889dabb36","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:160","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes, final java.lang.String salt) {\n    if ((salt.length()) == 0) {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"salt"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtBinaryOperatorImpl","sourcecode":"to == terminator"},"failures":[],"tindex":"3b531bf7-3e35-11e6-9a2d-c707582eca1d","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:240","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected char[] copyData(final int start, final int length) {\n    if (start == length) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (length <= 1) {\n                {\n                    final char[] char[] = new char[length];\n                    java.lang.System.arraycopy(char[], start, newData, 0, length);\n                    return newData;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"terminator":"length","to":"start"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Nysiis:301","type":"CtBinaryOperatorImpl","sourcecode":"(key.length()) > 2"},"failures":[],"tindex":"3b531bf8-3e35-11e6-9a2d-459f114644d2","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:334","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if ((obj.length()) > 2) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof byte[])) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\");\n            } \n            return encode(((byte[])(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:450","type":"CtFieldReadImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.this.concat"},"failures":[106,99,107,100,111],"tindex":"3b531bf9-3e35-11e6-9a2d-9d1e89b04779","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:485","type":"CtMethodImpl","sourcecode":"private java.lang.String[] soundex(final java.lang.String source, final boolean branching) {\n    if (branching) {\n        {\n            if (source == null) {\n                return null;\n            } \n            final java.lang.String java.lang.String = cleanup(source);\n            final java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = new java.util.LinkedHashSet<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>();\n            currentBranches.add(new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch());\n            char char = '\u0000';\n            for (int int = 0 ; index < (input.length()) ; index++) {\n                final char char = input.charAt(index);\n                if (java.lang.Character.isWhitespace(ch)) {\n                    continue;\n                } \n                final java.lang.String java.lang.String = input.substring(index);\n                final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(ch);\n                if (rules == null) {\n                    continue;\n                } \n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.Collections.java.util.List;\n                for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n                    if (rule.matches(inputContext)) {\n                        if (branching) {\n                            nextBranches.clear();\n                        } \n                        final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n                        final boolean boolean = ((replacements.int) > 1) && branching;\n                        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                            for (final java.lang.String java.lang.String : replacements) {\n                                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                                final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                                nextBranch.processNextReplacement(nextReplacement, force);\n                                if (branching) {\n                                    nextBranches.add(nextBranch);\n                                } else {\n                                    break;\n                                }\n                            }\n                        }\n                        if (branching) {\n                            currentBranches.clear();\n                            currentBranches.addAll(nextBranches);\n                        } \n                        index += (rule.getPatternLength()) - 1;\n                        break;\n                    } \n                }\n                lastChar = ch;\n            }\n            final java.lang.String[] java.lang.String[] = new java.lang.String[currentBranches.size()];\n            int int = 0;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                branch.finish();\n                result[(index++)] = branch.toString();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"concat":"branching"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:680","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")"},"failures":[],"tindex":"3b53430a-3e35-11e6-9a2d-e97fa14f296e","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:133","type":"CtMethodImpl","sourcecode":"private static java.lang.String sha2Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String saltPrefix, final int blocksize, final java.lang.String algorithm) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(algorithm, blocksize, 3, \"TIA\", \"TCH\")) {\n        {\n            final int int = keyBytes.int;\n            int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int;\n            boolean boolean = false;\n            if (salt == null) {\n                throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n            } \n            final java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.util.regex.Pattern.matcher(salt);\n            if ((m == null) || (!(m.find()))) {\n                throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n            } \n            if ((m.group(3)) != null) {\n                rounds = java.lang.Integer.parseInt(m.group(3));\n                rounds = java.lang.Math.max(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, java.lang.Math.min(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, rounds));\n                roundsCustom = true;\n            } \n            final java.lang.String java.lang.String = m.group(4);\n            final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n            final int int = saltBytes.int;\n            java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            ctx.update(keyBytes);\n            ctx.update(saltBytes);\n            java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            altCtx.update(keyBytes);\n            altCtx.update(saltBytes);\n            altCtx.update(keyBytes);\n            byte[] byte[] = altCtx.digest();\n            int int = keyBytes.int;\n            while (cnt > blocksize) {\n                ctx.update(altResult, 0, blocksize);\n                cnt -= blocksize;\n            }\n            ctx.update(altResult, 0, cnt);\n            cnt = keyBytes.int;\n            while (cnt > 0) {\n                if ((cnt & 1) != 0) {\n                    ctx.update(altResult, 0, blocksize);\n                } else {\n                    ctx.update(keyBytes);\n                }\n                cnt >>= 1;\n            }\n            altResult = ctx.digest();\n            altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            for (int int = 1 ; i <= keyLen ; i++) {\n                altCtx.update(keyBytes);\n            }\n            byte[] byte[] = altCtx.digest();\n            final byte[] byte[] = new byte[keyLen];\n            int int = 0;\n            while (cp < (keyLen - blocksize)) {\n                java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n                cp += blocksize;\n            }\n            java.lang.System.arraycopy(tempResult, 0, pBytes, cp, (keyLen - cp));\n            altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n                altCtx.update(saltBytes);\n            }\n            tempResult = altCtx.digest();\n            final byte[] byte[] = new byte[saltLen];\n            cp = 0;\n            while (cp < (saltLen - blocksize)) {\n                java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n                cp += blocksize;\n            }\n            java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp));\n            for (int int = 0 ; i <= (rounds - 1) ; i++) {\n                ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                if ((i & 1) != 0) {\n                    ctx.update(pBytes, 0, keyLen);\n                } else {\n                    ctx.update(altResult, 0, blocksize);\n                }\n                if ((i % 3) != 0) {\n                    ctx.update(sBytes, 0, saltLen);\n                } \n                if ((i % 7) != 0) {\n                    ctx.update(pBytes, 0, keyLen);\n                } \n                if ((i & 1) != 0) {\n                    ctx.update(altResult, 0, blocksize);\n                } else {\n                    ctx.update(pBytes, 0, keyLen);\n                }\n                altResult = ctx.digest();\n            }\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(saltPrefix);\n            if (roundsCustom) {\n                buffer.append(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String);\n                buffer.append(rounds);\n                buffer.append(\"$\");\n            } \n            buffer.append(saltString);\n            buffer.append(\"$\");\n            if (blocksize == 32) {\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer);\n            } else {\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer);\n            }\n            java.util.Arrays.fill(tempResult, ((byte)(0)));\n            java.util.Arrays.fill(pBytes, ((byte)(0)));\n            java.util.Arrays.fill(sBytes, ((byte)(0)));\n            ctx.reset();\n            altCtx.reset();\n            java.util.Arrays.fill(keyBytes, ((byte)(0)));\n            java.util.Arrays.fill(saltBytes, ((byte)(0)));\n            return buffer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"blocksize","value":"algorithm"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[145],"tindex":"3b536a1b-3e35-11e6-9a2d-499dac711280","method":{"position":"org.apache.commons.codec.net.RFC1522Codec:102","type":"CtMethodImpl","sourcecode":"protected java.lang.String encodeText(final java.lang.String text, final java.lang.String charsetName) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.EncoderException {\n    if ((charsetName.length()) == 0) {\n        {\n            if (text == null) {\n                return null;\n            } \n            return org.apache.commons.codec.net.RFC1522Codec.this.encodeText(text, java.nio.charset.Charset.forName(charsetName));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"charsetName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtInvocationImpl","sourcecode":"value.startsWith(element)"},"failures":[146],"tindex":"3b536a1c-3e35-11e6-9a2d-978a129172bc","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:486","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if (str.startsWith(str)) {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"str","element":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtInvocationImpl","sourcecode":"ph.startsWith(\"(\")"},"failures":[147,114],"tindex":"3b53912d-3e35-11e6-9a2d-f374c3131e84","method":{"position":"org.apache.commons.codec.digest.DigestUtils:437","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final java.lang.String data) {\n    if (data.startsWith(\"(\")) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\"]\"))"},"failures":[112],"tindex":"3b53912e-3e35-11e6-9a2d-b574c0b5d07a","method":{"position":"org.apache.commons.codec.language.SoundexUtils:41","type":"CtMethodImpl","sourcecode":"static java.lang.String clean(final java.lang.String str) {\n    if (!(str.endsWith(\"]\"))) {\n        {\n            if ((str == null) || ((str.length()) == 0)) {\n                return str;\n            } \n            final int int = str.length();\n            final char[] char[] = new char[len];\n            int int = 0;\n            for (int int = 0 ; i < len ; i++) {\n                if (java.lang.Character.isLetter(str.charAt(i))) {\n                    chars[(count++)] = str.charAt(i);\n                } \n            }\n            if (count == len) {\n                return str.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            } \n            return new java.lang.String(chars , 0 , count).toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:133","type":"CtBinaryOperatorImpl","sourcecode":"(offset > (b.length)) || ((offset + len) > (b.length))"},"failures":[129,148,130,149,150,131,151,152,153,132,133,134,135],"tindex":"3b53912f-3e35-11e6-9a2d-f3f15f0c6a28","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final byte[] b, final int offset, final int len) throws java.io.IOException {\n    if ((offset > len) || ((offset + len) > (b.int))) {\n        {\n            if (b == null) {\n                throw new java.lang.NullPointerException();\n            } else if ((offset < 0) || (len < 0)) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if (len > 0) {\n                if (boolean) {\n                    org.apache.commons.codec.binary.BaseNCodec.encode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                } else {\n                    org.apache.commons.codec.binary.BaseNCodec.decode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                }\n                flush(false);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","offset":"offset","len":"len","length":"len"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"3b539130-3e35-11e6-9a2d-01db6b3191c8","method":{"position":"org.apache.commons.codec.digest.HmacUtils:616","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha384Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[15,16,17,18,19,20,154,155,21,22,23,30,31,24,25,156,157,26,27,158,28,159,160,161,32,29],"tindex":"3b539131-3e35-11e6-9a2d-f379b550b737","method":{"position":"org.apache.commons.codec.language.bm.Languages:165","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Languages getInstance(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Languages>.get(nameType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtInvocationImpl","sourcecode":"value.startsWith(element)"},"failures":[71,72,2,73,74],"tindex":"3b53b842-3e35-11e6-9a2d-11d7d65fe435","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:827","type":"CtMethodImpl","sourcecode":"private boolean conditionL0(final java.lang.String value, final int index) {\n    if (value.startsWith(value)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n                return true;\n            } else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value","element":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:268","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"3b53b843-3e35-11e6-9a2d-e56292d25515","method":{"position":"org.apache.commons.codec.digest.DigestUtils:469","type":"CtMethodImpl","sourcecode":"public static byte[] sha256(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha256Digest(), data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:130","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'H'"},"failures":[162,163,164,165],"tindex":"3b53b844-3e35-11e6-9a2d-abcfd283ede9","method":{"position":"org.apache.commons.codec.binary.Hex:77","type":"CtMethodImpl","sourcecode":"public static byte[] decodeHex(final char[] data) throws org.apache.commons.codec.DecoderException {\n    if ((data[1]) == 'H') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228989276/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            final int int = data.int;\n            if ((len & 1) != 0) {\n                throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n            } \n            final byte[] byte[] = new byte[len >> 1];\n            for (int int = 0, int int = 0 ; j < len ; i++) {\n                int int = (org.apache.commons.codec.binary.Hex.toDigit(data[j], j)) << 4;\n                j++;\n                f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j));\n                j++;\n                out[i] = ((byte)(f & 255));\n            }\n            return out;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":107,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":59,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":240,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":121,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":241,"org.apache.commons.codec.language.Caverphone1Test.testEncodeEmpty":256,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":45,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":186,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":147,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":202,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":195,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":210,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":70,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":110,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":245,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":49,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":14,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":15,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":18,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":128,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":16,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":218,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":17,"org.apache.commons.codec.net.URLCodecTest.testDecodeWithNullArray":44,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":125,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":127,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":69,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":192,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":262,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":89,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":0,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":25,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":144,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":261,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":9,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":64,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":237,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":23,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":201,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":159,"org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull":258,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":252,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":232,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":95,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":141,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":57,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":114,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":92,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":242,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":254,"org.apache.commons.codec.net.RFC1522CodecTest.testNullInput":260,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":122,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":194,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":221,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":111,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":68,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":21,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":120,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":67,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":35,"org.apache.commons.codec.language.MetaphoneTest.testEncodeNull":170,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":225,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":236,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":139,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":76,"org.apache.commons.codec.binary.Base64Test.testUUID":11,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":161,"org.apache.commons.codec.binary.Base64Test.testSingletons":24,"org.apache.commons.codec.net.QCodecTest.testNullInput":204,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":137,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":167,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":72,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":27,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":90,"org.apache.commons.codec.binary.Base64Test.testPairs":10,"org.apache.commons.codec.binary.Base64Test.testConstructors":97,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":71,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":247,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":251,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":138,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":82,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":208,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":156,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":228,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":174,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":154,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":43,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":7,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":75,"org.apache.commons.codec.language.SoundexTest.testEncodeNull":50,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":182,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":102,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":189,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":215,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull":152,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":249,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":34,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":103,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":116,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":60,"org.apache.commons.codec.binary.HexTest.testEncodeEmpty":176,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":47,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":85,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":117,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":191,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":131,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":207,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":99,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":80,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":179,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":13,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":119,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":206,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":183,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":86,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":165,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":181,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":199,"org.apache.commons.codec.binary.HexTest.testCustomCharset":172,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":63,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":62,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":235,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":243,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":211,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":234,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":219,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":40,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":180,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":184,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":39,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":65,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":56,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":87,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":230,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":6,"org.apache.commons.codec.binary.Base64Test.testTriplets":8,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull":205,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":77,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":166,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":134,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":224,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":133,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":135,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":200,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":140,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":155,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":104,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":78,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":151,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":19,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":81,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":30,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":229,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":253,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1":197,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":149,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":187,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":96,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":132,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":259,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":198,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":145,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":48,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":178,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":1,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":160,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":169,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":203,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":142,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":244,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":101,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":177,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":83,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":130,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":58,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":61,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":105,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":109,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":148,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":153,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":233,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":216,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":129,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":163,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":2,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":168,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":209,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":226,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":227,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":31,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":214,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":118,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":217,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":250,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":173,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":115,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":5,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":126,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":52,"org.apache.commons.codec.digest.DigestUtilsTest.testInternalNoSuchAlgorithmException":220,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":162,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":212,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":188,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":158,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":255,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":108,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":150,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":91,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":146,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":98,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":239,"org.apache.commons.codec.binary.Base64Test.testBase64":28,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":38,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":55,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":196,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":3,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":20,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":66,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":223,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":190,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":222,"org.apache.commons.codec.net.BCodecTest.testNullInput":53,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":175,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":41,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":193,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":246,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":112,"org.apache.commons.codec.binary.Base64Test.testCodec112":22,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":84,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":157,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":36,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":88,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":123,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":94,"org.apache.commons.codec.language.Caverphone1Test.testLocaleIndependence":257,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":4,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":93,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":143,"org.apache.commons.codec.binary.Base64Test.testCodec68":106,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":213,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":51,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":171,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":79,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":113,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":32,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":248,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":231,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":42,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":164,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":73,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":185,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":26,"org.apache.commons.codec.language.SoundexTest.testDifference":46,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":238,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":124,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":74,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":136,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":33,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":37,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":54,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":100,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":12},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"59302662-3e8c-11e6-acf2-71685ab0d8b9","method":{"position":"org.apache.commons.codec.digest.HmacUtils:205","type":"CtMethodImpl","sourcecode":"public static byte[] hmacMd5(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(valueToDigest)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key).doFinal(valueToDigest);\n                    } catch (final java.lang.IllegalStateException e) {\n                        throw new java.lang.IllegalArgumentException(e);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"valueToDigest"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:268","type":"CtBinaryOperatorImpl","sourcecode":"(i % 7) != 0"},"failures":[],"tindex":"59307483-3e8c-11e6-acf2-2d5c878a76d7","method":{"position":"org.apache.commons.codec.language.Soundex:245","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic void setMaxLength(final int maxLength) {\n    if ((maxLength % 7) != 0) {\n        {\n            org.apache.commons.codec.language.Soundex.this.int = maxLength;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"maxLength"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtBinaryOperatorImpl","sourcecode":"(content.length()) == 0"},"failures":[0,1],"tindex":"59307484-3e8c-11e6-acf2-7f188accc4ac","method":{"position":"org.apache.commons.codec.digest.HmacUtils:295","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if ((key.length()) == 0) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"content":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"tindex":"59307485-3e8c-11e6-acf2-c790d182681d","method":{"position":"org.apache.commons.codec.binary.Base64:639","type":"CtMethodImpl","sourcecode":"public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe) {\n    if (binaryData == null) {\n        {\n            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, urlSafe, java.lang.Integer.java.lang.Integer.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[35],"tindex":"59309b96-3e8c-11e6-acf2-6177fb4bbfff","method":{"position":"org.apache.commons.codec.digest.HmacUtils:633","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtUnaryOperatorImpl","sourcecode":"!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))"},"failures":[36,37,38,39,40,41,42,43],"tindex":"59309b97-3e8c-11e6-acf2-f16d1faa688a","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:92","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) throws org.apache.commons.codec.EncoderException {\n    if (!(source.matches(((\"^[\" + source) + \"]{2,}$\")))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (source == null) {\n                return null;\n            } \n            return org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.encode(source);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"source","org.apache.commons.codec.digest.B64.B64T":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[44],"tindex":"59309b98-3e8c-11e6-acf2-513703efcac7","method":{"position":"org.apache.commons.codec.net.URLCodec:161","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeUrl(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    if (bytes == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new org.apache.commons.codec.DecoderException();\n                    } else {\n                        {\n                            if (bytes == null) {\n                                return null;\n                            } \n                            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n                            for (int int = 0 ; i < (bytes.int) ; i++) {\n                                final int int = bytes[i];\n                                if (b == '+') {\n                                    buffer.write(' ');\n                                } else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n                                    try {\n                                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                                        buffer.write(((char)((u << 4) + l)));\n                                    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                                        throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n                                    }\n                                } else {\n                                    buffer.write(b);\n                                }\n                            }\n                            return buffer.toByteArray();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtBinaryOperatorImpl","sourcecode":"((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))"},"failures":[],"tindex":"5930c2a9-3e8c-11e6-acf2-15f0828f602f","method":{"position":"org.apache.commons.codec.language.Caverphone2:45","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (((source == null) || (source.equalsIgnoreCase(name2))) || (source.equalsIgnoreCase(name2))) {\n        {\n            java.lang.String java.lang.String = source;\n            if ((txt == null) || ((txt.length()) == 0)) {\n                return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n            } \n            txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            txt = txt.replaceAll(\"[^a-z]\", \"\");\n            txt = txt.replaceAll(\"e$\", \"\");\n            txt = txt.replaceAll(\"^cough\", \"cou2f\");\n            txt = txt.replaceAll(\"^rough\", \"rou2f\");\n            txt = txt.replaceAll(\"^tough\", \"tou2f\");\n            txt = txt.replaceAll(\"^enough\", \"enou2f\");\n            txt = txt.replaceAll(\"^trough\", \"trou2f\");\n            txt = txt.replaceAll(\"^gn\", \"2n\");\n            txt = txt.replaceAll(\"mb$\", \"m2\");\n            txt = txt.replaceAll(\"cq\", \"2q\");\n            txt = txt.replaceAll(\"ci\", \"si\");\n            txt = txt.replaceAll(\"ce\", \"se\");\n            txt = txt.replaceAll(\"cy\", \"sy\");\n            txt = txt.replaceAll(\"tch\", \"2ch\");\n            txt = txt.replaceAll(\"c\", \"k\");\n            txt = txt.replaceAll(\"q\", \"k\");\n            txt = txt.replaceAll(\"x\", \"k\");\n            txt = txt.replaceAll(\"v\", \"f\");\n            txt = txt.replaceAll(\"dg\", \"2g\");\n            txt = txt.replaceAll(\"tio\", \"sio\");\n            txt = txt.replaceAll(\"tia\", \"sia\");\n            txt = txt.replaceAll(\"d\", \"t\");\n            txt = txt.replaceAll(\"ph\", \"fh\");\n            txt = txt.replaceAll(\"b\", \"p\");\n            txt = txt.replaceAll(\"sh\", \"s2\");\n            txt = txt.replaceAll(\"z\", \"s\");\n            txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n            txt = txt.replaceAll(\"[aeiou]\", \"3\");\n            txt = txt.replaceAll(\"j\", \"y\");\n            txt = txt.replaceAll(\"^y3\", \"Y3\");\n            txt = txt.replaceAll(\"^y\", \"A\");\n            txt = txt.replaceAll(\"y\", \"3\");\n            txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n            txt = txt.replaceAll(\"gh\", \"22\");\n            txt = txt.replaceAll(\"g\", \"k\");\n            txt = txt.replaceAll(\"s+\", \"S\");\n            txt = txt.replaceAll(\"t+\", \"T\");\n            txt = txt.replaceAll(\"p+\", \"P\");\n            txt = txt.replaceAll(\"k+\", \"K\");\n            txt = txt.replaceAll(\"f+\", \"F\");\n            txt = txt.replaceAll(\"m+\", \"M\");\n            txt = txt.replaceAll(\"n+\", \"N\");\n            txt = txt.replaceAll(\"w3\", \"W3\");\n            txt = txt.replaceAll(\"wh3\", \"Wh3\");\n            txt = txt.replaceAll(\"w$\", \"3\");\n            txt = txt.replaceAll(\"w\", \"2\");\n            txt = txt.replaceAll(\"^h\", \"A\");\n            txt = txt.replaceAll(\"h\", \"2\");\n            txt = txt.replaceAll(\"r3\", \"R3\");\n            txt = txt.replaceAll(\"r$\", \"3\");\n            txt = txt.replaceAll(\"r\", \"2\");\n            txt = txt.replaceAll(\"l3\", \"L3\");\n            txt = txt.replaceAll(\"l$\", \"3\");\n            txt = txt.replaceAll(\"l\", \"2\");\n            txt = txt.replaceAll(\"2\", \"\");\n            txt = txt.replaceAll(\"3$\", \"A\");\n            txt = txt.replaceAll(\"3\", \"\");\n            txt = txt + (org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String);\n            return txt.substring(0, org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String.length());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"source","name2":"source","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"5930e9ba-3e8c-11e6-acf2-6dc84f9736bc","method":{"position":"org.apache.commons.codec.binary.Base64:594","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeBase64URLSafeString(final byte[] binaryData) {\n    if (binaryData == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (binaryData == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"binaryData"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"5930e9bb-3e8c-11e6-acf2-07ee96377ad4","method":{"position":"org.apache.commons.codec.language.bm.Rule:539","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtUnaryOperatorImpl","sourcecode":"!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))"},"failures":[45,46,47,48,49,50,51,52],"tindex":"5930e9bc-3e8c-11e6-acf2-b33c1d9e3550","method":{"position":"org.apache.commons.codec.language.Soundex:258","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str.startsWith(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(str.matches(((\"^[\" + str) + \"]{2,}$\")))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n                    if ((str.length()) == 0) {\n                        return str;\n                    } \n                    final char[] char[] = new char[]{ '0' , '0' , '0' , '0' };\n                    char char;\n                    char char;\n                    int int = 1;\n                    int int = 1;\n                    out[0] = str.charAt(0);\n                    last = getMappingCode(str, 0);\n                    while ((incount < (str.length())) && (count < (out.int))) {\n                        mapped = getMappingCode(str, (incount++));\n                        if (mapped != 0) {\n                            if ((mapped != '0') && (mapped != last)) {\n                                out[(count++)] = mapped;\n                            } \n                            last = mapped;\n                        } \n                    }\n                    return new java.lang.String(out);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"str","org.apache.commons.codec.digest.B64.B64T":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[53],"tindex":"593110cd-3e8c-11e6-acf2-fff5ae063761","method":{"position":"org.apache.commons.codec.net.BCodec:100","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.Base64.decodeBase64(bytes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isWhitespace(ch)"},"failures":[54,55],"tindex":"593110ce-3e8c-11e6-acf2-573ce79230e0","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:865","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String.indexOf(ch)) != (-1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[],"tindex":"593110cf-3e8c-11e6-acf2-ef079700af52","method":{"position":"org.apache.commons.codec.language.bm.Languages:202","type":"CtMethodImpl","sourcecode":"private static java.lang.String langResourceName(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        {\n            return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_languages.txt\", nameType.getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:336","type":"CtBinaryOperatorImpl","sourcecode":"(strA.length()) > (strB.length())"},"failures":[54,55,56,57,58,59],"tindex":"593110d0-3e8c-11e6-acf2-5b9ca4e4d5cc","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:676","type":"CtMethodImpl","sourcecode":"private int handleT(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((value.length()) > (value.length())) {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n                result.append('X');\n                index += 3;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n                result.append('X');\n                index += 3;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n                if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                    result.append('T');\n                } else {\n                    result.append('0', 'T');\n                }\n                index += 2;\n            } else {\n                result.append('T');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strA":"value","strB":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[60,61,2,62,63,64,3,65,66,67,68,69,4,70,71,72,73,5,74,75,76,77,78,79,80,81,6,82,83,84,85,86,87,88,89,90,91,92,93,7,8,94,95,9,96,10,11,12,97,13,14,15,16,17,98,18,99,19,20,100,21,101,22,102,103,104,105,23,24,25,106,26,107,108,27,28,109,110,29,111,112,113,30,31,114,115,116,117,118,119,120,121,122,32,33,123,34],"tindex":"593137e1-3e8c-11e6-acf2-4dd47eda9e74","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:495","type":"CtMethodImpl","sourcecode":"protected boolean containsAlphabetOrPad(final byte[] arrayOctet) {\n    if (arrayOctet == null) {\n        {\n            if (arrayOctet == null) {\n                return false;\n            } \n            for (final byte byte : arrayOctet) {\n                if (((byte) == element) || (isInAlphabet(element))) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"arrayOctet"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"593137e2-3e8c-11e6-acf2-e1c265eadb98","method":{"position":"org.apache.commons.codec.net.URLCodec:161","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeUrl(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    if (bytes == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new org.apache.commons.codec.DecoderException();\n                    } else {\n                        {\n                            if (bytes == null) {\n                                return null;\n                            } \n                            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n                            for (int int = 0 ; i < (bytes.int) ; i++) {\n                                final int int = bytes[i];\n                                if (b == '+') {\n                                    buffer.write(' ');\n                                } else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n                                    try {\n                                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                                        buffer.write(((char)((u << 4) + l)));\n                                    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                                        throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n                                    }\n                                } else {\n                                    buffer.write(b);\n                                }\n                            }\n                            return buffer.toByteArray();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[124,125,126,127,128,129,130],"tindex":"593137e3-3e8c-11e6-acf2-194f3f37991e","method":{"position":"org.apache.commons.codec.net.URLCodec:209","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.net.URLCodec.decodeUrl(bytes);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[],"tindex":"59315ef4-3e8c-11e6-acf2-9739cc041cee","method":{"position":"org.apache.commons.codec.digest.DigestUtils:49","type":"CtMethodImpl","sourcecode":"private static byte[] digest(final java.security.MessageDigest digest, final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.updateDigest(digest, data).digest();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[36,37,131,38,39,40,132,133,134,135],"tindex":"59315ef5-3e8c-11e6-acf2-7de2a0bee4df","method":{"position":"org.apache.commons.codec.language.bm.Rule:519","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            return input.equals(content);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[],"tindex":"59315ef6-3e8c-11e6-acf2-c3b65ea32fc1","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj.equalsIgnoreCase(obj)) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof byte[]) {\n                return encode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"obj","name1":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[32,33,34],"tindex":"59315ef7-3e8c-11e6-acf2-3f909fc748fa","method":{"position":"org.apache.commons.codec.net.BCodec:119","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return null;\n            } \n            return encodeText(value, charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:272","type":"CtBinaryOperatorImpl","sourcecode":"cmtI >= 0"},"failures":[84,119],"tindex":"59315ef8-3e8c-11e6-acf2-5f99a3290bb7","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:128","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(final byte[] b, final int offset, final int len) throws java.io.IOException {\n    if (len >= 0) {\n        {\n            if (b == null) {\n                throw new java.lang.NullPointerException();\n            } else if ((offset < 0) || (len < 0)) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if (len == 0) {\n                return 0;\n            } else {\n                int int = 0;\n                while (readLen == 0) {\n                    if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n                        final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n                        final int int = java.io.InputStream.read(buf);\n                        if (boolean) {\n                            org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        } else {\n                            org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        }\n                    } \n                    readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                }\n                return readLen;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmtI":"len"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"59318609-3e8c-11e6-acf2-13e213fbb0c4","method":{"position":"org.apache.commons.codec.binary.Hex:231","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] array) throws org.apache.commons.codec.DecoderException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:116","type":"CtBinaryOperatorImpl","sourcecode":"ascii == null"},"failures":[136],"tindex":"5931860a-3e8c-11e6-acf2-c31970b84e6b","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:527","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (obj == null) {\n                {\n                    if (obj == null) {\n                        return null;\n                    } else if (obj instanceof byte[]) {\n                        return decode(((byte[])(obj)));\n                    } else if (obj instanceof java.lang.String) {\n                        return decode(((java.lang.String)(obj)));\n                    } else {\n                        throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.Base32:440","type":"CtBinaryOperatorImpl","sourcecode":"inAvail < 0"},"failures":[2,77],"tindex":"5931860b-3e8c-11e6-acf2-b13c560cb07f","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final int i) throws java.io.IOException {\n    if (i < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            byte[][0] = ((byte)(i));\n            write(byte[], 0, 1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inAvail":"i"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtUnaryOperatorImpl","sourcecode":"!(boxContent.contains(\"[\"))"},"failures":[],"tindex":"5931860c-3e8c-11e6-acf2-9508497fd3cc","method":{"position":"org.apache.commons.codec.language.bm.Rule:319","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.codec.language.bm.Rule> getInstance(final org.apache.commons.codec.language.bm.NameType nameType, final org.apache.commons.codec.language.bm.RuleType rt, final java.lang.String lang) {\n    if (!(lang.contains(\"[\"))) {\n        {\n            return org.apache.commons.codec.language.bm.Rule.getInstance(nameType, rt, org.apache.commons.codec.language.bm.Languages.LanguageSet.from(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(lang))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"boxContent":"lang"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"5931860d-3e8c-11e6-acf2-c166ac58ea6c","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:527","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (obj == null) {\n                {\n                    if (obj == null) {\n                        return null;\n                    } else if (obj instanceof byte[]) {\n                        return decode(((byte[])(obj)));\n                    } else if (obj instanceof java.lang.String) {\n                        return decode(((java.lang.String)(obj)));\n                    } else {\n                        throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:356","type":"CtBinaryOperatorImpl","sourcecode":"(index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))"},"failures":[54,55,56,57,58,59],"tindex":"5931ad1e-3e8c-11e6-acf2-dbc1c0aa4c2f","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:279","type":"CtMethodImpl","sourcecode":"private int handleC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        {\n            if (((value == null) || (value.equalsIgnoreCase(name2))) || (value.equalsIgnoreCase(name2))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n                        {\n                            if (conditionC0(value, index)) {\n                                result.append('K');\n                                index += 2;\n                            } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))) {\n                                result.append('S');\n                                index += 2;\n                            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")) {\n                                index = handleCH(value, result, index);\n                            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CZ\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 4, \"WICZ\")))) {\n                                result.append('S', 'X');\n                                index += 2;\n                            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"CIA\")) {\n                                result.append('X');\n                                index += 3;\n                            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CC\")) && (!((index == 1) && ((charAt(value, 0)) == 'M')))) {\n                                return handleCC(value, result, index);\n                            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n                                result.append('K');\n                                index += 2;\n                            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n                                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n                                    result.append('S', 'X');\n                                } else {\n                                    result.append('S');\n                                }\n                                index += 2;\n                            } else {\n                                result.append('K');\n                                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n                                    index += 3;\n                                } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n                                    index += 2;\n                                } else {\n                                    index++;\n                                }\n                            }\n                            return index;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:417","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"5931ad1f-3e8c-11e6-acf2-7bf3097f0a81","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:428","type":"CtMethodImpl","sourcecode":"private java.lang.String preprocess(java.lang.String text) {\n    if (text == null) {\n        {\n            if (text.startsWith(text)) {\n                {\n                    text = text.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    final char[] char[] = text.toCharArray();\n                    for (int int = 0 ; index < (chrs.int) ; index++) {\n                        if ((chrs[index]) > 'Z') {\n                            for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n                                if ((chrs[index]) == (element[0])) {\n                                    chrs[index] = element[1];\n                                    break;\n                                } \n                            }\n                        } \n                    }\n                    return new java.lang.String(chrs);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"text","line":"text"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[137,138,139,140,141],"tindex":"5931ad20-3e8c-11e6-acf2-714f183a24fc","method":{"position":"org.apache.commons.codec.net.QCodec:207","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return encodeText(str, charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"5931d431-3e8c-11e6-acf2-49cf6f946920","method":{"position":"org.apache.commons.codec.binary.Hex:160","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeHexString(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        {\n            return new java.lang.String(org.apache.commons.codec.binary.Hex.encodeHex(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtInvocationImpl","sourcecode":"incl.contains(\" \")"},"failures":[142],"tindex":"5931d432-3e8c-11e6-acf2-c31437d5c509","method":{"position":"org.apache.commons.codec.digest.DigestUtils:210","type":"CtMethodImpl","sourcecode":"public static byte[] md2(final java.lang.String data) {\n    if (data.contains(\" \")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.md2(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"incl":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"5931d433-3e8c-11e6-acf2-21e93ffbdbe2","method":{"position":"org.apache.commons.codec.digest.HmacUtils:444","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest).doFinal();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[70,71,72,73,94,96,10,11,12,13,14,15,16,17,18,19,20,100,101,102,103,23,24,106,26,108,28,109,111,112,113,31,114,32,33,123],"tindex":"5931d434-3e8c-11e6-acf2-93253d4b1e49","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            if (pArray == pArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((pArray == null) || ((pArray.int) == 0)) {\n                        return pArray;\n                    } \n                    final org.apache.commons.codec.binary.BaseNCodec.Context org.apache.commons.codec.binary.BaseNCodec.Context = new org.apache.commons.codec.binary.BaseNCodec.Context();\n                    decode(pArray, 0, pArray.int, context);\n                    decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context);\n                    final byte[] byte[] = new byte[context.int];\n                    readResults(result, 0, result.int, context);\n                    return result;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"pArray","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"pArray"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[143],"tindex":"5931d435-3e8c-11e6-acf2-cda7c15d5107","method":{"position":"org.apache.commons.codec.binary.StringUtils:198","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Be(final java.lang.String string) {\n    if (string == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:283","type":"CtBinaryOperatorImpl","sourcecode":"lineLength > 0"},"failures":[60,2,63,64,3,70,71,72,73,78,79,80,6,83,86,87,89,90,91,92,93,7,94,96,10,11,12,13,14,15,16,17,18,19,20,100,101,102,103,24,106,26,108,28,109,111,112,113,31,114,32,33,123],"tindex":"5931fb46-3e8c-11e6-acf2-c908ef247b13","method":{"position":"org.apache.commons.codec.binary.Base64:428","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid decode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inPos > 0) {\n        {\n            if (context.boolean) {\n                return ;\n            } \n            if (inAvail < 0) {\n                context.boolean = true;\n            } \n            for (int int = 0 ; i < inAvail ; i++) {\n                final byte[] byte[] = ensureBufferSize(int, context);\n                final byte byte = in[(inPos++)];\n                if (b == (byte)) {\n                    context.boolean = true;\n                    break;\n                } else {\n                    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n                        final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n                        if (result >= 0) {\n                            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                            context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n                            if ((context.int) == 0) {\n                                buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                            } \n                        } \n                    } \n                }\n            }\n            if ((context.boolean) && ((context.int) != 0)) {\n                final byte[] byte[] = ensureBufferSize(int, context);\n                switch (context.int) {\n                    case 1 :\n                        break;\n                    case 2 :\n                        context.int = (context.int) >> 4;\n                        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    case 3 :\n                        context.int = (context.int) >> 2;\n                        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    default :\n                        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                }\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineLength":"inPos"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"5931fb47-3e8c-11e6-acf2-e535d43e670f","method":{"position":"org.apache.commons.codec.digest.HmacUtils:741","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac updateHmac(final javax.crypto.Mac mac, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            mac.reset();\n            mac.update(valueToDigest);\n            return mac;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"valueToDigest"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:735","type":"CtBinaryOperatorImpl","sourcecode":"bigInt == null"},"failures":[],"tindex":"5931fb48-3e8c-11e6-acf2-5bba6d2bfbf0","method":{"position":"org.apache.commons.codec.binary.Base64:748","type":"CtMethodImpl","sourcecode":"static byte[] toIntegerBytes(final java.math.BigInteger bigInt) {\n    if (bigInt == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = bigInt.bitLength();\n            bitlen = ((bitlen + 7) >> 3) << 3;\n            final byte[] byte[] = bigInt.toByteArray();\n            if ((((bigInt.bitLength()) % 8) != 0) && ((((bigInt.bitLength()) / 8) + 1) == (bitlen / 8))) {\n                return bigBytes;\n            } \n            int int = 0;\n            int int = bigBytes.int;\n            if (((bigInt.bitLength()) % 8) == 0) {\n                startSrc = 1;\n                len--;\n            } \n            final int int = (bitlen / 8) - len;\n            final byte[] byte[] = new byte[bitlen / 8];\n            java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n            return resizedBytes;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:180","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[144],"tindex":"59322259-3e8c-11e6-acf2-bbd9ce1e947e","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:152","type":"CtMethodImpl","sourcecode":"public byte[] toByteArray(final java.lang.String ascii) {\n    if ((ascii.length()) == 0) {\n        {\n            if (ascii == null) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii.toCharArray());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"ascii"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:292","type":"CtBinaryOperatorImpl","sourcecode":"(key.length()) > 1"},"failures":[145,36,37,146,147,131,38,39,40,132,43,133,148,134,135],"tindex":"5932225a-3e8c-11e6-acf2-0b75ec9a7e2d","method":{"position":"org.apache.commons.codec.language.bm.Rule:124","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Rule.Phoneme append(final java.lang.CharSequence str) {\n    if ((str.length()) > 1) {\n        {\n            org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(str);\n            return org.apache.commons.codec.language.bm.Rule.Phoneme.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[149,150,151,152,153,154,155,156,157],"tindex":"5932225b-3e8c-11e6-acf2-4583a92ad2f1","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:225","type":"CtMethodImpl","sourcecode":"private static boolean isEmpty(final byte[] array) {\n    if (array == null) {\n        {\n            return (array == null) || ((array.int) == 0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtBinaryOperatorImpl","sourcecode":"rulesIS == null"},"failures":[],"tindex":"5932225c-3e8c-11e6-acf2-37e12ee57da9","method":{"position":"org.apache.commons.codec.digest.DigestUtils:792","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest updateDigest(final java.security.MessageDigest digest, final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            final byte[] byte[] = new byte[org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int];\n            int int = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int);\n            while (read > (-1)) {\n                digest.update(buffer, 0, read);\n                read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int);\n            }\n            return digest;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rulesIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"5932496d-3e8c-11e6-acf2-056c6fe28725","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:428","type":"CtMethodImpl","sourcecode":"private java.lang.String preprocess(java.lang.String text) {\n    if (text == null) {\n        {\n            if (text.startsWith(text)) {\n                {\n                    text = text.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    final char[] char[] = text.toCharArray();\n                    for (int int = 0 ; index < (chrs.int) ; index++) {\n                        if ((chrs[index]) > 'Z') {\n                            for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n                                if ((chrs[index]) == (element[0])) {\n                                    chrs[index] = element[1];\n                                    break;\n                                } \n                            }\n                        } \n                    }\n                    return new java.lang.String(chrs);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"text"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[158,159,160,161,162,163,164,165,166,167,168],"tindex":"5932496e-3e8c-11e6-acf2-b1e5928f3808","method":{"position":"org.apache.commons.codec.digest.Crypt:65","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] keyBytes, final java.lang.String salt) {\n    if (salt == null) {\n        {\n            if (salt == null) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes, salt);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(keyBytes, salt);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt);\n            } else {\n                return org.apache.commons.codec.digest.UnixCrypt.crypt(keyBytes, salt);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[169],"tindex":"5932496f-3e8c-11e6-acf2-f5ca36589637","method":{"position":"org.apache.commons.codec.digest.DigestUtils:499","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Hex(final byte[] data) {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[170],"tindex":"59324970-3e8c-11e6-acf2-0363a6338a54","method":{"position":"org.apache.commons.codec.language.Metaphone:92","type":"CtMethodImpl","sourcecode":"public java.lang.String metaphone(final java.lang.String txt) {\n    if (txt == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            int int;\n            if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n                return \"\";\n            } \n            if (txtLength == 1) {\n                return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            } \n            final char[] char[] = txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale).toCharArray();\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10);\n            switch (inwd[0]) {\n                case 'K' :\n                case 'G' :\n                case 'P' :\n                    if ((inwd[1]) == 'N') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                    } else {\n                        local.append(inwd);\n                    }\n                    break;\n                case 'A' :\n                    if ((inwd[1]) == 'E') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                    } else {\n                        local.append(inwd);\n                    }\n                    break;\n                case 'W' :\n                    if ((inwd[1]) == 'R') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                        break;\n                    } \n                    if ((inwd[1]) == 'H') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                        local.setCharAt(0, 'W');\n                    } else {\n                        local.append(inwd);\n                    }\n                    break;\n                case 'X' :\n                    inwd[0] = 'S';\n                    local.append(inwd);\n                    break;\n                default :\n                    local.append(inwd);\n            }\n            final int int = local.length();\n            int int = 0;\n            while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n                final char char = local.charAt(n);\n                if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n                    n++;\n                } else {\n                    switch (symb) {\n                        case 'A' :\n                        case 'E' :\n                        case 'I' :\n                        case 'O' :\n                        case 'U' :\n                            if (n == 0) {\n                                code.append(symb);\n                            } \n                            break;\n                        case 'B' :\n                            if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                                break;\n                            } \n                            code.append(symb);\n                            break;\n                        case 'C' :\n                            if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                break;\n                            } \n                            if (regionMatch(local, n, \"CIA\")) {\n                                code.append('X');\n                                break;\n                            } \n                            if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                code.append('S');\n                                break;\n                            } \n                            if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                                code.append('K');\n                                break;\n                            } \n                            if (isNextChar(local, n, 'H')) {\n                                if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                                    code.append('K');\n                                } else {\n                                    code.append('X');\n                                }\n                            } else {\n                                code.append('K');\n                            }\n                            break;\n                        case 'D' :\n                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                                code.append('J');\n                                n += 2;\n                            } else {\n                                code.append('T');\n                            }\n                            break;\n                        case 'G' :\n                            if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                                break;\n                            } \n                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                                break;\n                            } \n                            if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                                break;\n                            } \n                            if (isPreviousChar(local, n, 'G')) {\n                                hard = true;\n                            } else {\n                                hard = false;\n                            }\n                            if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                                code.append('J');\n                            } else {\n                                code.append('K');\n                            }\n                            break;\n                        case 'H' :\n                            if (isLastChar(wdsz, n)) {\n                                break;\n                            } \n                            if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                                break;\n                            } \n                            if (isVowel(local, (n + 1))) {\n                                code.append('H');\n                            } \n                            break;\n                        case 'F' :\n                        case 'J' :\n                        case 'L' :\n                        case 'M' :\n                        case 'N' :\n                        case 'R' :\n                            code.append(symb);\n                            break;\n                        case 'K' :\n                            if (n > 0) {\n                                if (!(isPreviousChar(local, n, 'C'))) {\n                                    code.append(symb);\n                                } \n                            } else {\n                                code.append(symb);\n                            }\n                            break;\n                        case 'P' :\n                            if (isNextChar(local, n, 'H')) {\n                                code.append('F');\n                            } else {\n                                code.append(symb);\n                            }\n                            break;\n                        case 'Q' :\n                            code.append('K');\n                            break;\n                        case 'S' :\n                            if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                                code.append('X');\n                            } else {\n                                code.append('S');\n                            }\n                            break;\n                        case 'T' :\n                            if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                                code.append('X');\n                                break;\n                            } \n                            if (regionMatch(local, n, \"TCH\")) {\n                                break;\n                            } \n                            if (regionMatch(local, n, \"TH\")) {\n                                code.append('0');\n                            } else {\n                                code.append('T');\n                            }\n                            break;\n                        case 'V' :\n                            code.append('F');\n                            break;\n                        case 'W' :\n                        case 'Y' :\n                            if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                                code.append(symb);\n                            } \n                            break;\n                        case 'X' :\n                            code.append('K');\n                            code.append('S');\n                            break;\n                        case 'Z' :\n                            code.append('S');\n                            break;\n                        default :\n                            break;\n                    }\n                    n++;\n                }\n                if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n                    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n                } \n            }\n            return code.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"txt"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[171,172,173,174,175,176,177,0,178,179,180,181,182,1,183,184,185,186,187,188,189,142,190,191,192,169,193,194,195,196],"tindex":"59327081-3e8c-11e6-acf2-43df58161709","method":{"position":"org.apache.commons.codec.binary.Hex:140","type":"CtMethodImpl","sourcecode":"protected static char[] encodeHex(final byte[] data, final char[] toDigits) {\n    if (data == null) {\n        {\n            final int int = data.int;\n            final char[] char[] = new char[l << 1];\n            for (int int = 0, int int = 0 ; i < l ; i++) {\n                out[(j++)] = toDigits[((240 & (data[i])) >>> 4)];\n                out[(j++)] = toDigits[(15 & (data[i]))];\n            }\n            return out;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"59329792-3e8c-11e6-acf2-1b342bb416bb","method":{"position":"org.apache.commons.codec.net.BCodec:92","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(bytes)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.Base64.encodeBase64(bytes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[145,36,37,146,131,38,39,40,132,43,133,134,135],"tindex":"59329793-3e8c-11e6-acf2-a179e64d542e","method":{"position":"org.apache.commons.codec.language.bm.Rule:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtInvocationImpl","sourcecode":"replacedName.contains(dc)"},"failures":[197,78,79,88,89,92,93,198,199,200,201,202,203],"tindex":"59329794-3e8c-11e6-acf2-3d5c1dfdcff2","method":{"position":"org.apache.commons.codec.binary.StringUtils:113","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesIso8859_1(final java.lang.String string) {\n    if (string.contains(string)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacedName":"string","dc":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator != null"},"failures":[204],"tindex":"59329795-3e8c-11e6-acf2-1dafc25d3bf7","method":{"position":"org.apache.commons.codec.net.QCodec:169","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes != null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            boolean boolean = false;\n            for (final byte byte : bytes) {\n                if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                    hasUnderscores = true;\n                    break;\n                } \n            }\n            if (hasUnderscores) {\n                final byte[] byte[] = new byte[bytes.int];\n                for (int int = 0 ; i < (bytes.int) ; i++) {\n                    final byte byte = bytes[i];\n                    if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                        tmp[i] = b;\n                    } else {\n                        tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                    }\n                }\n                return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n            } \n            return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[],"tindex":"59329796-3e8c-11e6-acf2-1ddbfa5885a7","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:257","type":"CtMethodImpl","sourcecode":"private static java.lang.String join(final java.lang.Iterable<java.lang.String> strings, final java.lang.String sep) {\n    if ((sep.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (sep.equals(\"\")) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    final java.util.Iterator<java.lang.String> java.util.Iterator<java.lang.String> = strings.iterator();\n                    if (si.hasNext()) {\n                        sb.append(si.next());\n                    } \n                    while (si.hasNext()) {\n                        sb.append(sep).append(si.next());\n                    }\n                    return sb.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"sep"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[205],"tindex":"5932bea7-3e8c-11e6-acf2-d9cb14805ad6","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:596","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException {\n    if ((str.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.UnsupportedEncodingException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:274","type":"CtBinaryOperatorImpl","sourcecode":"mapped != 0"},"failures":[],"tindex":"5932bea8-3e8c-11e6-acf2-a9b36738c2be","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:234","type":"CtMethodImpl","sourcecode":"public void addRight(final char chr) {\n    if ((chr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(chr))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(chr))))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (chr != 0) {\n                {\n                    char[][int] = chr;\n                    (int)++;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapped":"chr"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"5932bea9-3e8c-11e6-acf2-8fde0557dbcd","method":{"position":"org.apache.commons.codec.digest.HmacUtils:205","type":"CtMethodImpl","sourcecode":"public static byte[] hmacMd5(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(valueToDigest)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key).doFinal(valueToDigest);\n                    } catch (final java.lang.IllegalStateException e) {\n                        throw new java.lang.IllegalArgumentException(e);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\")\"))"},"failures":[158,206,207,208,159,160,161,209,162,210,211,163,164,212,213,214,215,216,217,218,168,219,220,186,187,188,189,221,142,190,191,192,169,193,194,195,196],"tindex":"5932beaa-3e8c-11e6-acf2-35c3d0fde86b","method":{"position":"org.apache.commons.codec.digest.DigestUtils:66","type":"CtMethodImpl","sourcecode":"public static java.security.MessageDigest getDigest(final java.lang.String algorithm) {\n    if (!(algorithm.endsWith(\")\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.security.MessageDigest.getInstance(algorithm);\n            } catch (final java.security.NoSuchAlgorithmException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"algorithm"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:68","type":"CtInvocationImpl","sourcecode":"salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX)"},"failures":[145,36,37,146,147,222,223,131,38,39,40,132,42,43,133,148,134,135],"tindex":"5932beab-3e8c-11e6-acf2-afaa7b22c2ff","method":{"position":"org.apache.commons.codec.language.bm.Rule:365","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.Phoneme parsePhoneme(final java.lang.String ph) {\n    if (ph.startsWith(ph)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ph.indexOf(\"[\");\n            if (open >= 0) {\n                if (!(ph.endsWith(\"]\"))) {\n                    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n                } \n                final java.lang.String java.lang.String = ph.substring(0, open);\n                final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1));\n                final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")));\n                return new org.apache.commons.codec.language.bm.Rule.Phoneme(before , org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs));\n            } else {\n                return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX":"ph","salt":"ph"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"5932e5bc-3e8c-11e6-acf2-c933d1c57768","method":{"position":"org.apache.commons.codec.digest.DigestUtils:362","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static byte[] sha(final java.lang.String data) {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"5932e5bd-3e8c-11e6-acf2-911f910fe7aa","method":{"position":"org.apache.commons.codec.net.URLCodec:161","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeUrl(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    if (bytes == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new org.apache.commons.codec.DecoderException();\n                    } else {\n                        {\n                            if (bytes == null) {\n                                return null;\n                            } \n                            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n                            for (int int = 0 ; i < (bytes.int) ; i++) {\n                                final int int = bytes[i];\n                                if (b == '+') {\n                                    buffer.write(' ');\n                                } else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n                                    try {\n                                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                                        buffer.write(((char)((u << 4) + l)));\n                                    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                                        throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n                                    }\n                                } else {\n                                    buffer.write(b);\n                                }\n                            }\n                            return buffer.toByteArray();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)"},"failures":[145,36,224,225,37,146,147,222,223,131,38,226,227,39,40,228,132,229,230,41,42,43,133,148,134,135],"tindex":"5932e5be-3e8c-11e6-acf2-cfb0099dc0ab","method":{"position":"org.apache.commons.codec.language.bm.Lang:113","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.codec.language.bm.Lang instance(final org.apache.commons.codec.language.bm.NameType nameType) {\n    if (nameType == nameType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Lang>.get(nameType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.NameType.GENERIC":"nameType"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"5932e5bf-3e8c-11e6-acf2-b1e2fd57d4a4","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:298","type":"CtMethodImpl","sourcecode":"public static java.lang.String toAsciiString(final byte[] raw) {\n    if (raw == null) {\n        {\n            if (raw == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[231,232,233,234,235,236,237,238,239,240],"tindex":"59330cd0-3e8c-11e6-acf2-9ffe4ee814d5","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:135","type":"CtMethodImpl","sourcecode":"public void processNextReplacement(final java.lang.String replacement, final boolean forceAppend) {\n    if (replacement == null) {\n        {\n            final boolean boolean = (((java.lang.String) == null) || (!(java.lang.String.endsWith(replacement)))) || forceAppend;\n            if (append && ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int))) {\n                java.lang.StringBuilder.append(replacement);\n                if ((java.lang.StringBuilder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n                    java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length());\n                } \n                java.lang.String = null;\n            } \n            java.lang.String = replacement;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtInvocationImpl","sourcecode":"line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)"},"failures":[],"tindex":"59330cd1-3e8c-11e6-acf2-73664250d99e","method":{"position":"org.apache.commons.codec.language.Soundex:258","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str.startsWith(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(str.matches(((\"^[\" + str) + \"]{2,}$\")))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n                    if ((str.length()) == 0) {\n                        return str;\n                    } \n                    final char[] char[] = new char[]{ '0' , '0' , '0' , '0' };\n                    char char;\n                    char char;\n                    int int = 1;\n                    int int = 1;\n                    out[0] = str.charAt(0);\n                    last = getMappingCode(str, 0);\n                    while ((incount < (str.length())) && (count < (out.int))) {\n                        mapped = getMappingCode(str, (incount++));\n                        if (mapped != 0) {\n                            if ((mapped != '0') && (mapped != last)) {\n                                out[(count++)] = mapped;\n                            } \n                            last = mapped;\n                        } \n                    }\n                    return new java.lang.String(out);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"str","line":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:214","type":"CtBinaryOperatorImpl","sourcecode":"((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name1))"},"failures":[],"tindex":"59330cd2-3e8c-11e6-acf2-fdefe2b13572","method":{"position":"org.apache.commons.codec.language.SoundexUtils:41","type":"CtMethodImpl","sourcecode":"static java.lang.String clean(final java.lang.String str) {\n    if (((str == null) || (str.equalsIgnoreCase(name1))) || (str.equalsIgnoreCase(name1))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((str == null) || ((str.length()) == 0)) {\n                return str;\n            } \n            final int int = str.length();\n            final char[] char[] = new char[len];\n            int int = 0;\n            for (int int = 0 ; i < len ; i++) {\n                if (java.lang.Character.isLetter(str.charAt(i))) {\n                    chars[(count++)] = str.charAt(i);\n                } \n            }\n            if (count == len) {\n                return str.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            } \n            return new java.lang.String(chars , 0 , count).toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"str","name1":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[137,139,241,141,124,126,127,129,130,242,243,244,245,246,247,136,248],"tindex":"593333e3-3e8c-11e6-acf2-d9a9741e5b0d","method":{"position":"org.apache.commons.codec.net.Utils:42","type":"CtMethodImpl","sourcecode":"static int digit16(final byte b) throws org.apache.commons.codec.DecoderException {\n    if (b == b) {\n        {\n            if (b == b) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    final int int = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int);\n                    if (i == (-1)) {\n                        throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n                    } \n                    return i;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","pad":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[191,195],"tindex":"593333e4-3e8c-11e6-acf2-03bd387a5c33","method":{"position":"org.apache.commons.codec.digest.DigestUtils:425","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha1Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:180","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[231,232,233,234,235,236,237,238,239,240],"tindex":"593333e5-3e8c-11e6-acf2-f578e589e00e","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:198","type":"CtMethodImpl","sourcecode":"public boolean matches(final java.lang.String context) {\n    if ((context.length()) == 0) {\n        {\n            return context.startsWith(java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"context"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtBinaryOperatorImpl","sourcecode":"b == (pad)"},"failures":[],"tindex":"593333e6-3e8c-11e6-acf2-4f4f78c818ee","method":{"position":"org.apache.commons.codec.net.Utils:42","type":"CtMethodImpl","sourcecode":"static int digit16(final byte b) throws org.apache.commons.codec.DecoderException {\n    if (b == b) {\n        {\n            if (b == b) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    final int int = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int);\n                    if (i == (-1)) {\n                        throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n                    } \n                    return i;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b","pad":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:158","type":"CtBinaryOperatorImpl","sourcecode":"(curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))"},"failures":[],"tindex":"593333e7-3e8c-11e6-acf2-ffcc9ed1805d","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:234","type":"CtMethodImpl","sourcecode":"public void addRight(final char chr) {\n    if ((chr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(chr))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(chr))))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (chr != 0) {\n                {\n                    char[][int] = chr;\n                    (int)++;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"next":"chr","prev":"chr","curr":"chr"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtUnaryOperatorImpl","sourcecode":"!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))"},"failures":[249,46,250],"tindex":"59335af8-3e8c-11e6-acf2-4b94674c6d6a","method":{"position":"org.apache.commons.codec.language.SoundexUtils:109","type":"CtMethodImpl","sourcecode":"static int differenceEncoded(final java.lang.String es1, final java.lang.String es2) {\n    if (!(es2.matches(((\"^[\" + es2) + \"]{2,}$\")))) {\n        {\n            if ((es1 == null) || (es2 == null)) {\n                return 0;\n            } \n            final int int = java.lang.Math.min(es1.length(), es2.length());\n            int int = 0;\n            for (int int = 0 ; i < lengthToMatch ; i++) {\n                if ((es1.charAt(i)) == (es2.charAt(i))) {\n                    diff++;\n                } \n            }\n            return diff;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"es2","org.apache.commons.codec.digest.B64.B64T":"es2"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtBinaryOperatorImpl","sourcecode":"(salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))"},"failures":[],"tindex":"59335af9-3e8c-11e6-acf2-f7d8ad76d481","method":{"position":"org.apache.commons.codec.net.QCodec:246","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if ((str != null) && (!(salt.startsWith(str)))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return encode(str, getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"str","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:270","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[251,252,253,254,255,256,257],"tindex":"59335afa-3e8c-11e6-acf2-152a493bda14","method":{"position":"org.apache.commons.codec.language.Caverphone1:45","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source == null) {\n        {\n            java.lang.String java.lang.String = source;\n            if ((txt == null) || ((txt.length()) == 0)) {\n                return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String;\n            } \n            txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            txt = txt.replaceAll(\"[^a-z]\", \"\");\n            txt = txt.replaceAll(\"^cough\", \"cou2f\");\n            txt = txt.replaceAll(\"^rough\", \"rou2f\");\n            txt = txt.replaceAll(\"^tough\", \"tou2f\");\n            txt = txt.replaceAll(\"^enough\", \"enou2f\");\n            txt = txt.replaceAll(\"^gn\", \"2n\");\n            txt = txt.replaceAll(\"mb$\", \"m2\");\n            txt = txt.replaceAll(\"cq\", \"2q\");\n            txt = txt.replaceAll(\"ci\", \"si\");\n            txt = txt.replaceAll(\"ce\", \"se\");\n            txt = txt.replaceAll(\"cy\", \"sy\");\n            txt = txt.replaceAll(\"tch\", \"2ch\");\n            txt = txt.replaceAll(\"c\", \"k\");\n            txt = txt.replaceAll(\"q\", \"k\");\n            txt = txt.replaceAll(\"x\", \"k\");\n            txt = txt.replaceAll(\"v\", \"f\");\n            txt = txt.replaceAll(\"dg\", \"2g\");\n            txt = txt.replaceAll(\"tio\", \"sio\");\n            txt = txt.replaceAll(\"tia\", \"sia\");\n            txt = txt.replaceAll(\"d\", \"t\");\n            txt = txt.replaceAll(\"ph\", \"fh\");\n            txt = txt.replaceAll(\"b\", \"p\");\n            txt = txt.replaceAll(\"sh\", \"s2\");\n            txt = txt.replaceAll(\"z\", \"s\");\n            txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n            txt = txt.replaceAll(\"[aeiou]\", \"3\");\n            txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n            txt = txt.replaceAll(\"gh\", \"22\");\n            txt = txt.replaceAll(\"g\", \"k\");\n            txt = txt.replaceAll(\"s+\", \"S\");\n            txt = txt.replaceAll(\"t+\", \"T\");\n            txt = txt.replaceAll(\"p+\", \"P\");\n            txt = txt.replaceAll(\"k+\", \"K\");\n            txt = txt.replaceAll(\"f+\", \"F\");\n            txt = txt.replaceAll(\"m+\", \"M\");\n            txt = txt.replaceAll(\"n+\", \"N\");\n            txt = txt.replaceAll(\"w3\", \"W3\");\n            txt = txt.replaceAll(\"wy\", \"Wy\");\n            txt = txt.replaceAll(\"wh3\", \"Wh3\");\n            txt = txt.replaceAll(\"why\", \"Why\");\n            txt = txt.replaceAll(\"w\", \"2\");\n            txt = txt.replaceAll(\"^h\", \"A\");\n            txt = txt.replaceAll(\"h\", \"2\");\n            txt = txt.replaceAll(\"r3\", \"R3\");\n            txt = txt.replaceAll(\"ry\", \"Ry\");\n            txt = txt.replaceAll(\"r\", \"2\");\n            txt = txt.replaceAll(\"l3\", \"L3\");\n            txt = txt.replaceAll(\"ly\", \"Ly\");\n            txt = txt.replaceAll(\"l\", \"2\");\n            txt = txt.replaceAll(\"j\", \"y\");\n            txt = txt.replaceAll(\"y3\", \"Y3\");\n            txt = txt.replaceAll(\"y\", \"2\");\n            txt = txt.replaceAll(\"2\", \"\");\n            txt = txt.replaceAll(\"3\", \"\");\n            txt = txt + (org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String);\n            return txt.substring(0, org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String.length());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[],"tindex":"5933820b-3e8c-11e6-acf2-a5721af8fcc4","method":{"position":"org.apache.commons.codec.digest.DigestUtils:198","type":"CtMethodImpl","sourcecode":"public static byte[] md2(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd2Digest(), data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:148","type":"CtUnaryOperatorImpl","sourcecode":"!(getEncoding().equalsIgnoreCase(encoding))"},"failures":[],"tindex":"5933820c-3e8c-11e6-acf2-7dfc1a65bbd8","method":{"position":"org.apache.commons.codec.language.Soundex:149","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj instanceof java.lang.String)) {\n        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n    } \n    return soundex(((java.lang.String)(obj)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"obj","encoding":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtBinaryOperatorImpl","sourcecode":"(content.length()) == 0"},"failures":[],"tindex":"5933820d-3e8c-11e6-acf2-3355a6c82f3f","method":{"position":"org.apache.commons.codec.language.bm.Languages:91","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.String language) {\n    if ((language.length()) == 0) {\n        {\n            return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.java.util.Set<java.lang.String>.contains(language);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"content":"language"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:119","type":"CtBinaryOperatorImpl","sourcecode":"(inwd[1]) == 'E'"},"failures":[],"tindex":"5933820e-3e8c-11e6-acf2-532da4d0f783","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if ((source[1]) == 'E') {\n        {\n            if (!(source instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\");\n            } \n            return encode(((java.lang.String)(source)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inwd":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:145","type":"CtInvocationImpl","sourcecode":"line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)"},"failures":[178,181],"tindex":"5933820f-3e8c-11e6-acf2-6110a61fcbc7","method":{"position":"org.apache.commons.codec.digest.HmacUtils:402","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final java.lang.String key, final java.lang.String valueToDigest) {\n    if (valueToDigest.endsWith(valueToDigest)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"valueToDigest","line":"valueToDigest"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:429","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) == 0"},"failures":[],"tindex":"5933a920-3e8c-11e6-acf2-1712a3767170","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:257","type":"CtMethodImpl","sourcecode":"private static java.lang.String join(final java.lang.Iterable<java.lang.String> strings, final java.lang.String sep) {\n    if ((sep.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (sep.equals(\"\")) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    final java.util.Iterator<java.lang.String> java.util.Iterator<java.lang.String> = strings.iterator();\n                    if (si.hasNext()) {\n                        sb.append(si.next());\n                    } \n                    while (si.hasNext()) {\n                        sb.append(sep).append(si.next());\n                    }\n                    return sb.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"sep"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[151],"tindex":"5933a921-3e8c-11e6-acf2-7b2b05f7dbfc","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] raw) {\n    if (raw == null) {\n        {\n            return org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(raw);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:180","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[145,36,37,146,147,131,38,39,40,132,133,134,135],"tindex":"5933a922-3e8c-11e6-acf2-a501b2ca01b1","method":{"position":"org.apache.commons.codec.language.bm.Rule:571","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if ((input.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtUnaryOperatorImpl","sourcecode":"!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))"},"failures":[145,36,37,146,147,222,223,131,38,39,40,132,42,43,133,148,134,135],"tindex":"5933a923-3e8c-11e6-acf2-7343d293099a","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (!(str.matches(((\"^[\" + str) + \"]{2,}$\")))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"str","org.apache.commons.codec.digest.B64.B64T":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtBinaryOperatorImpl","sourcecode":"lineSeparator == null"},"failures":[],"tindex":"5933a924-3e8c-11e6-acf2-adf489cb12f5","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:376","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (obj instanceof byte[]) {\n                return decode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineSeparator":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtBinaryOperatorImpl","sourcecode":"((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))"},"failures":[],"tindex":"5933d035-3e8c-11e6-acf2-9d2521446272","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:279","type":"CtMethodImpl","sourcecode":"private int handleC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        {\n            if (((value == null) || (value.equalsIgnoreCase(name2))) || (value.equalsIgnoreCase(name2))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n                        {\n                            if (conditionC0(value, index)) {\n                                result.append('K');\n                                index += 2;\n                            } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))) {\n                                result.append('S');\n                                index += 2;\n                            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")) {\n                                index = handleCH(value, result, index);\n                            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CZ\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 4, \"WICZ\")))) {\n                                result.append('S', 'X');\n                                index += 2;\n                            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"CIA\")) {\n                                result.append('X');\n                                index += 3;\n                            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CC\")) && (!((index == 1) && ((charAt(value, 0)) == 'M')))) {\n                                return handleCC(value, result, index);\n                            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n                                result.append('K');\n                                index += 2;\n                            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n                                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n                                    result.append('S', 'X');\n                                } else {\n                                    result.append('S');\n                                }\n                                index += 2;\n                            } else {\n                                result.append('K');\n                                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n                                    index += 3;\n                                } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n                                    index += 2;\n                                } else {\n                                    index++;\n                                }\n                            }\n                            return index;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"value","name2":"value","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[],"tindex":"5933d036-3e8c-11e6-acf2-436de3427b99","method":{"position":"org.apache.commons.codec.digest.DigestUtils:748","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String shaHex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"5933d037-3e8c-11e6-acf2-bfbaf8e4d85a","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] pArray) {\n    if (pArray == null) {\n        {\n            if (pArray == pArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((pArray == null) || ((pArray.int) == 0)) {\n                        return pArray;\n                    } \n                    final org.apache.commons.codec.binary.BaseNCodec.Context org.apache.commons.codec.binary.BaseNCodec.Context = new org.apache.commons.codec.binary.BaseNCodec.Context();\n                    decode(pArray, 0, pArray.int, context);\n                    decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context);\n                    final byte[] byte[] = new byte[context.int];\n                    readResults(result, 0, result.int, context);\n                    return result;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"pArray"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtInvocationImpl","sourcecode":"replacedName.contains(dc)"},"failures":[258],"tindex":"5933d038-3e8c-11e6-acf2-cffb1c6026b5","method":{"position":"org.apache.commons.codec.net.BCodec:158","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) throws org.apache.commons.codec.EncoderException {\n    if (value.contains(value)) {\n        {\n            if (value == null) {\n                return null;\n            } \n            return encode(value, org.apache.commons.codec.net.BCodec.this.getCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacedName":"value","dc":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:353","type":"CtBinaryOperatorImpl","sourcecode":"(encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)"},"failures":[171,172,173,174,175,176,177,0,178,179,180,181,182,1,183,184,185,186,187,188,189,142,190,191,192,169,193,194,195,196],"tindex":"5933f749-3e8c-11e6-acf2-05ed22a49871","method":{"position":"org.apache.commons.codec.binary.Hex:108","type":"CtMethodImpl","sourcecode":"public static char[] encodeHex(final byte[] data) {\n    if (data == data) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHex(data, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encodeTable":"data","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[178,179,259,181,183,184],"tindex":"5933f74a-3e8c-11e6-acf2-fd2c24a6d35d","method":{"position":"org.apache.commons.codec.digest.HmacUtils:80","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha1(final byte[] key) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"5933f74b-3e8c-11e6-acf2-856d220ac9af","method":{"position":"org.apache.commons.codec.digest.DigestUtils:593","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha384Hex(final byte[] data) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(data)) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[260],"tindex":"5933f74c-3e8c-11e6-acf2-87b6b3b5c87a","method":{"position":"org.apache.commons.codec.net.RFC1522Codec:124","type":"CtMethodImpl","sourcecode":"protected java.lang.String decodeText(final java.lang.String text) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (text == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (text == null) {\n                return null;\n            } \n            if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n            } \n            final int int = (text.length()) - 2;\n            int int = 2;\n            int int = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n            if (to == terminator) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n            } \n            final java.lang.String java.lang.String = text.substring(from, to);\n            if (charset.equals(\"\")) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n            } \n            from = to + 1;\n            to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n            if (to == terminator) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n            } \n            final java.lang.String java.lang.String = text.substring(from, to);\n            if (!(getEncoding().equalsIgnoreCase(encoding))) {\n                throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n            } \n            from = to + 1;\n            to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n            byte[] byte[] = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(text.substring(from, to));\n            data = doDecoding(data);\n            return new java.lang.String(data , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"text"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtBinaryOperatorImpl","sourcecode":"to == terminator"},"failures":[165,261,262,166],"tindex":"59341e5d-3e8c-11e6-acf2-6fff48a3b045","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:325","type":"CtMethodImpl","sourcecode":"private static int dEncrypt(int el, final int r, final int s, final int e0, final int e1, final int[] sArr) {\n    if (r == e0) {\n        {\n            int int = r ^ (r >>> 16);\n            int int = v & e0;\n            v &= e1;\n            u = ((u ^ (u << 16)) ^ r) ^ (sArr[s]);\n            int int = ((v ^ (v << 16)) ^ r) ^ (sArr[(s + 1)]);\n            t = (t >>> 4) | (t << 28);\n            el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)]);\n            return el;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"terminator":"e0","to":"r"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtBinaryOperatorImpl","sourcecode":"lRulesIS == null"},"failures":[194],"tindex":"59341e5e-3e8c-11e6-acf2-d59014cbcd61","method":{"position":"org.apache.commons.codec.digest.DigestUtils:704","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Hex(final java.io.InputStream data) throws java.io.IOException {\n    if (data == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lRulesIS":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"59341e5f-3e8c-11e6-acf2-579f625e741f","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:279","type":"CtMethodImpl","sourcecode":"private int handleC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        {\n            if (((value == null) || (value.equalsIgnoreCase(name2))) || (value.equalsIgnoreCase(name2))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n                        {\n                            if (conditionC0(value, index)) {\n                                result.append('K');\n                                index += 2;\n                            } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))) {\n                                result.append('S');\n                                index += 2;\n                            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")) {\n                                index = handleCH(value, result, index);\n                            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CZ\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 4, \"WICZ\")))) {\n                                result.append('S', 'X');\n                                index += 2;\n                            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"CIA\")) {\n                                result.append('X');\n                                index += 3;\n                            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CC\")) && (!((index == 1) && ((charAt(value, 0)) == 'M')))) {\n                                return handleCC(value, result, index);\n                            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n                                result.append('K');\n                                index += 2;\n                            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n                                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n                                    result.append('S', 'X');\n                                } else {\n                                    result.append('S');\n                                }\n                                index += 2;\n                            } else {\n                                result.append('K');\n                                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n                                    index += 3;\n                                } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n                                    index += 2;\n                                } else {\n                                    index++;\n                                }\n                            }\n                            return index;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"59341e60-3e8c-11e6-acf2-f94dd4fa4ef5","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:298","type":"CtMethodImpl","sourcecode":"public static java.lang.String toAsciiString(final byte[] raw) {\n    if (raw == null) {\n        {\n            if (raw == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtInvocationImpl","sourcecode":"replacedName.contains(dc)"},"failures":[],"tindex":"59341e61-3e8c-11e6-acf2-e71e86029f04","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:384","type":"CtMethodImpl","sourcecode":"java.lang.String removeDoubleConsonants(final java.lang.String name) {\n    if (name.contains(name)) {\n        {\n            java.lang.String java.lang.String = name.toUpperCase();\n            for (final java.lang.String java.lang.String : org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String[]) {\n                if (replacedName.contains(dc)) {\n                    final java.lang.String java.lang.String = dc.substring(0, 1);\n                    replacedName = replacedName.replace(dc, singleLetter);\n                } \n            }\n            return replacedName;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacedName":"name","dc":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:548","type":"CtBinaryOperatorImpl","sourcecode":"startsWithBox && endsWithBox"},"failures":[171,173],"tindex":"59344572-3e8c-11e6-acf2-739887bf4821","method":{"position":"org.apache.commons.codec.binary.Hex:124","type":"CtMethodImpl","sourcecode":"public static char[] encodeHex(final byte[] data, final boolean toLowerCase) {\n    if (toLowerCase && toLowerCase) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHex(data, (toLowerCase ? org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.char[] : org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.char[]));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"endsWithBox":"toLowerCase","startsWithBox":"toLowerCase"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"59344573-3e8c-11e6-acf2-5b68eda8e0a0","method":{"position":"org.apache.commons.codec.digest.HmacUtils:581","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha384Hex(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"valueToDigest"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"59344574-3e8c-11e6-acf2-35a2598e08f3","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:515","type":"CtMethodImpl","sourcecode":"public long getEncodedLength(final byte[] pArray) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(pArray)) {\n        {\n            long long = ((((pArray.int) + (int)) - 1) / (int)) * ((long)(int));\n            if ((int) > 0) {\n                len += (((len + (int)) - 1) / (int)) * (int);\n            } \n            return len;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"pArray"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"59344575-3e8c-11e6-acf2-bfd93e695e85","method":{"position":"org.apache.commons.codec.binary.Base64:594","type":"CtMethodImpl","sourcecode":"public static java.lang.String encodeBase64URLSafeString(final byte[] binaryData) {\n    if (binaryData == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (binaryData == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266855236/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"binaryData"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}